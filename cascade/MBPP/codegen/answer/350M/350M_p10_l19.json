[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1, l2 = test_tup1, test_tup2\n    l1.sort()\n    l2.sort()\n    indices = set(range(len(l1)))\n    return indices & set(range(len(l2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Loop over the list and compare it with each other.\n    shared_elements = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                shared_elements.append(elem1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for el1 in test_tup1:\n        for el2 in test_tup2:\n            if el1 == el2:\n                shared_elements.append(el1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return test_tup1, test_tup2, sorted(set(test_tup1) & set(test_tup2)), sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # hint: you may find the python built-in map operator useful\n    # test_tup1 and test_tup2 are lists of the same size\n    res = []\n    for tup in test_tup1:\n        if tup in test_tup2:\n            res.append(tup)\n    return res\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                shared_elements.append(elem1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        pass\n    else:\n        print(f'Elements in the given list are not the same size.')\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            pass\n        else:\n            print(f'{test_tup1[i]} and {test_tup2[i]} are not similar elements.')\n            return\n    print(f'Similar elements in the given list are: {test_tup1}')\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        # We have the same set of numbers, return the whole list\n        return test_tup1\n    else:\n        # Have different numbers, return empty list\n        return []\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n%2==0) and (n%3==0):\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2: return True\n    if n == 3: return False\n    if n % 2 == 0: return False\n    if n == 4: return True\n    for i in range(5, int(math.sqrt(n)+1)):\n        if n % i == 0: return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return(n > 1)\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return(True)\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return(False)\n    return(True)\ndef is_prime_sqrt(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return(True)\n    if n == 2:\n        return(False)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return(False)\n    return(True)\ndef is_prime_part(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return(True)\n    if n == 2:\n        return(False)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return(False)\n    return(True)\ndef prime_factor_list(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    prime_factor_list = []\n    if is_not_prime(n):\n        prime_factor_list.append(n)\n    if is_prime(n) and is_prime_sqrt(n):\n        prime_factor_list.append(n)\n    return(prime_factor_list)\ndef prime_factor_search(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    factor_search = []\n    if is_not_prime(n):\n        factor_search.append(n)\n    if is_prime(n):\n        if is_prime_sqrt(n):\n            factor_search.append(n)\n    factor_search.sort()\n    return(factor_search)\ndef factor_count(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    factor_count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            factor_count += 1\n    return(factor_count)\ndef check_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return(True)\n    if n == 2:\n        return(False)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return(False)\n    return(True)\ndef make_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return(False)\n    return(True)\ndef is_prime_sqrt(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return(True)\n    if n == 2:\n        return(False)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return(False)\n    return(True)\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return(True)\n    if n == 2:\n        return(False)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return(False)\n    return(True)\ndef factor_count(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    factor_count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            factor_count += 1\n    return(factor_count)\ndef is_prime_numbers_list(n,list):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    prime_numbers_list = []\n    if n == 1:\n        prime_numbers_list.append(list[0])\n    if n == 2:\n        prime_numbers_list.append(list[1])\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime_numbers_list.append(list[0])\n            prime_numbers_list.append(list[1])\n            break\n    return(prime_numbers_list)\ndef get_prime_factors(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    prime_factor_list = []\n    if is_prime_part(n):\n        prime_factor_list.append(n)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime_factor_list.append(i)\n    prime_factor_list.sort()\n    return(prime_factor_list)\ndef get_prime_factor_search(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    prime_factor_search = []\n    if is_prime_sqrt(n):\n        prime_factor_search.append(n)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime_factor_search.append(i)\n    prime_factor_search.sort()\n    return(prime_factor_search)\ndef get_factor_count(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    factor_count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            factor_count += 1\n    return(factor_count)\ndef get_factor_sqrt_count(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    factor_sqrt_count = 0\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            factor_sqrt_count += 1\n    factor_sqrt_count = int(math.sqrt(n))\n    return(factor_sqrt_count)\ndef get_factor_count(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    factor_count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            factor_count += 1\n    return(factor_count)\ndef prime_factor_search(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    factor_search = []\n    if is_not_prime(n):\n        factor_search.append(n)\n    if is_prime(n):\n        if is_prime_sqrt(n):\n            factor_search.append(n)\n    factor_search.sort()\n    return(factor_search)\ndef get_prime_factors(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    prime_factor_list = []\n    if is_prime(n):\n        prime_factor_list.append(n)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime_factor_list.append(i)\n    prime_factor_list.sort()\n    return(prime_factor_list)\ndef get_prime_factor_search(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    prime_factor_search = []\n    if is_prime_sqrt(n):\n        prime_factor_search.append(n)\n    for i in range(3,int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime_factor_search.append(i)\n    prime_factor_search.sort()\n    return(prime_factor_search)\ndef get"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2 or n==3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 3:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    i = 5\n    while i**2 < n:\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n        i+=6\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return False\n    i = 5\n    while i**2 < n:\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n        i+=6\n    return True\ndef count_divisors(n):\n    '''\n    Write a python function to count the number of divisors of a number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n%2 == 0:\n        return 2\n    if n%3 == 0:\n        return 4\n    i = 5\n    while i**2 < n:\n        if n%i == 0 or n%(i+2) == 0:\n            return 4\n        i+=6\n    return 4\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n is a multiple of 2 and n is not a multiple of 3, return True\n    # if n is not a multiple of 3 or 7, return False\n    if n%2==0 and n%3!=0:\n        return False\n    if n%3==0:\n        return False\n    # if n is odd, return True\n    if n%2==1:\n        return True\n    # if n is even, return True\n    if n%2==0:\n        return True\n    # if n is a multiple of 5, return True\n    if n%5==0:\n        return True\n    # if n is a multiple of 10, return True\n    if n%10==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap_list = []\n    for num in nums:\n        if num not in heap_list:\n            heap_list.append(num)\n            n-=1\n        if n==0:\n            return heap_list\n    return heap_list\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return nums[0]\n    mid = n // 2\n    if nums[mid] < nums[mid+1]:\n        return heap_queue_largest(nums,mid)\n    else:\n        return heap_queue_largest(nums,mid+1)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    return -heapq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,nums[i])\n    for i in range(n-1,-1,-1):\n        heapq.heappush(h,heapq.heappop(h)+heapq.heappop(h))\n    return list(reversed(hq.nlargest(n,h)))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    if n <= len(nums):\n        for num in nums:\n            heapq.heappush(heap, num)\n        return heap\n    return []\ndef insert_at_index(x, num):\n    '''\n    Write a function to insert a node at the given index in a sorted linked list, return a new linked list.\n    '''\n    heapq.heappush(heap, (num,x))\n    return heapify(heap)\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a list of numbers using heapify. Heapify takes in a list of numbers and sorts it in ascending order.\n    '''\n    return hq.heapify(nums)\ndef heap_sort_desc(nums):\n    '''\n    Write a function that sorts a list of numbers using heapify. Heapify takes in a list of numbers and sorts it in descending order.\n    '''\n    return hq.heapify(nums, -len(nums))\ndef merge_n_max(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    heapq.heappush(l1,[x for x in l2[::-1]])\n    heapq.heappush(l2,l1[0])\n    return l1,l2\ndef merge_n_max_desc(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    heapq.heapify(l1, len(l1))\n    heapq.heapify(l2, len(l2))\n    i=0\n    while(i<len(l1) and i<len(l2)):\n        if l1[i]<l2[i]:\n            heapq.heappush(l1,l2[i])\n            i+=1\n        else:\n            heapq.heappush(l2,l1[i])\n            i+=1\n    if len(l1)>len(l2):\n        while(len(l1)-i>=len(l2)):\n            heapq.heappush(l1,l2[len(l2)-i])\n            i+=1\n    else:\n        while(len(l2)-i>=len(l1)):\n            heapq.heappush(l2,l1[len(l1)-i])\n            i+=1\n    return l1,l2\ndef merge_n_min(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    heapq.heappush(l1,[x for x in l2[::-1]])\n    heapq.heappush(l2,l1[0])\n    return l1,l2\ndef merge_n_min_desc(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    heapq.heapify(l1, len(l1))\n    heapq.heapify(l2, len(l2))\n    i=0\n    while(i<len(l1) and i<len(l2)):\n        if l1[i]>l2[i]:\n            heapq.heappush(l1,l2[i])\n            i+=1\n        else:\n            heapq.heappush(l2,l1[i])\n            i+=1\n    if len(l1)>len(l2):\n        while(len(l1)-i>=len(l2)):\n            heapq.heappush(l1,l2[len(l2)-i])\n            i+=1\n    else:\n        while(len(l2)-i>=len(l1)):\n            heapq.heappush(l2,l1[len(l1)-i])\n            i+=1\n    return l1,l2\ndef merge_n_sorted(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    if l1<l2:\n        heapq.heappush(l1,l2[0])\n        heapq.heappush(l2,l1[0])\n    else:\n        heapq.heappush(l1,l2[0])\n        heapq.heappush(l2,l1[0])\n    return l1,l2\ndef merge_n_sorted_desc(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    if l1<l2:\n        heapq.heappush(l1,l2[0])\n        heapq.heappush(l2,l1[0])\n    else:\n        heapq.heappush(l1,l2[0])\n        heapq.heappush(l2,l1[0])\n    return l1,l2\ndef merge_n_sorted_desc_slow(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    if l1<l2:\n        heapq.heapify(l1)\n        heapq.heapify(l2)\n        heapq.heappush(l1,l2[0])\n        heapq.heappush(l2,l1[0])\n    else:\n        heapq.heappush(l1,l2[0])\n        heapq.heappush(l2,l1[0])\n    return l1,l2\ndef merge_n_sorted_desc_recursive(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    if l1<l2:\n        l3=[]\n        heapq.heappush(l3,l2[0])\n        heapq.heappush(l2,l3[0])\n        l4=[]\n        heapq.heappush(l4,l1[0])\n        heapq.heappush(l1,l4[0])\n        i=0\n        while(i<len(l1)):\n            if l1[i]<l2[i]:\n                heapq.heappush(l3,l2[i])\n                i+=1\n            else:\n                heapq.heappush(l4,l1[i])\n                i+=1\n        return l3,l4\n    else:\n        return l1,l2\ndef merge_n_sorted_desc_recursive_slow(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    if l1<l2:\n        l3=[]\n        heapq.heappush(l3,l2[0])\n        heapq.heappush(l2,l3[0])\n        l4=[]\n        heapq.heappush(l4,l1[0])\n        heapq.heappush(l1,l4[0])\n        i=0\n        while(i<len(l1)):\n            if l1[i]<l2[i]:\n                heapq.heappush(l3,l2[i])\n                i+=1\n            else:\n                heapq.heappush(l4,l1[i])\n                i+=1\n        return l3,l4\n    else:\n        return l1,l2\ndef merge_n_sorted_desc_recursive_recursive(l1,l2):\n    '''\n    Write a function that merges two sorted lists. The numbers in each list are sorted.\n    '''\n    if l1<l2:\n        "
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    sorted_nums = sorted(nums)\n    return sorted_nums[-n:]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Heap Sort\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 1:\n        return nums\n    \n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    return [heapq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    if len(nums) < n:\n        return nums\n    sorted_nums = sorted(nums)\n    return sorted_nums[-n:]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    hq_values = []\n    hq.extend(nums)\n    while len(hq) > n:\n        hq_values.append(hq.pop(0))\n    return hq_values[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    elif x < 0: \n        return False\n    elif x % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1:\n        return False\n    if x == 2 or x == 3:\n        return True\n    else:\n        x = x % 2\n        if x == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #raise NotImplementedError()\n    if x<2**31 and x>0:\n        return False\n    else:\n        return True\n    \nprint(is_Power_Of_Two(9))\nprint(is_Power_Of_Two(2))\nprint(is_Power_Of_Two(1))\nprint(is_Power_Of_Two(3)"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == x: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>=0:\n        if x%2==0:\n            return True\n        else:\n            return False\n    elif x>=1:\n        if x%2==0:\n            return False\n        else:\n            return True\n    else:\n        return False\ndef is_Divisors (x):\n    '''\n    Write a python function to check whether the given number is a divisor of itself or not.\n    '''\n    if x>=0:\n        if x%2==0:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_Perfect_Number (x):\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_Ugly (x):\n    '''\n    Write a python function to check whether the given number is a ugly number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_if_prime(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_Pythagorean_Triplet (x):\n    '''\n    Write a python function to check whether the given number is a Pythagorean triplet or not.\n    '''\n    if x>=3:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_Hacker (x):\n    '''\n    Write a python function to check whether the given number is a hacker or not.\n    '''\n    if x>=5:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_Fibonacci(x):\n    '''\n    Write a python function to check whether the given number is a fibonacci number or not.\n    '''\n    if x>=4:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_Fibonacci_prime(x):\n    '''\n    Write a python function to check whether the given number is a fibonacci prime number or not.\n    '''\n    if x>=5:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_if_prime2(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=6:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime2(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime3(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime4(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime5(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime6(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime7(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime8(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime9(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime10(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime11(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime12(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime13(x):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if x>=2:\n        if x%2==0:\n            if x==1:\n                return True\n            else:\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x == x // 2\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = (x&1)==1\n    return y"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = []\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            word_list.append(text[i])\n    return word_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    count = 0\n    for word in text:\n        if len(word) >= 3:\n            count += 1\n    return count\ndef find_char(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    count = 0\n    for word in text:\n        if len(word) >= 3:\n            count += 1\n    return count\ndef find_word(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    count = 0\n    for word in text:\n        if len(word) >= 3:\n            count += 1\n    return count\ndef find_word_long(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    count = 0\n    for word in text:\n        if len(word) >= 3:\n            count += 1\n    return count\ndef words_in(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_short(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_char(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_char(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_short(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_char(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_short(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_char(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_short(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.findall(r'\\w+', text)\n    if words:\n        return len(words)\n    else:\n        return 0\ndef words_in_long_long_long_long(text):\n    '''\n    Write a function that returns the number of words in the given text.\n    '''\n    words = re.fin"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    characters = []\n    for i in range(0, len(text)):\n        if text[i] in '\"#&$':\n            characters.append(text[i])\n    return characters\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = re.findall(r\"\\w+\", text)\n    for char in chars:\n        if len(char) >= 4:\n            yield char\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) >= 4:\n            longest_str = longest_str + word +''\n    return longest_str.split()\ndef find_all_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_chars = set()\n    for word in text:\n        all_chars.update(word)\n    return all_chars\ndef find_all_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_words = set()\n    for word in text:\n        all_words.update(word)\n    return all_words\ndef find_all_chars_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) >= 4:\n            longest_str = longest_str + word +''\n    return longest_str.split()\ndef find_all_words_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_words = set()\n    for word in text:\n        all_words.update(word)\n    return all_words\ndef get_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_word_long(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_word_with_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_words_with_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_word_with_longest_word_long(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_words_with_longest_word_long(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_words(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    all_words = set()\n    for word in text:\n        all_words.update(word)\n    return all_words\ndef get_longest_word_with_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_words_with_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_words_with_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_words_with_longest_word_long_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str\ndef get_longest_words_long_and_longest_word_with_longest_word(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str, word\ndef get_longest_words_long_and_longest_word_with_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str, word\ndef get_longest_words_long_and_longest_word_with_longest_word_long_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str, word\ndef get_longest_words_long_and_longest_word_long_and_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str, word\ndef get_longest_words_long_and_longest_word_long_and_longest_word_long_and_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str, word\ndef get_longest_words_long_and_longest_word_long_and_longest_word_long_and_longest_word_long_and_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    longest_str = ''\n    for word in text:\n        if len(word) > len(longest_str):\n            longest_str = word\n    return longest_str, word\ndef get_longest_words_long_and_longest_word_long_and_longest_word_long_and_longest_word_long_and_longest_word_long(text):\n    '''\n    Write a function to find all words in a string.\n    ''"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = []\n    for i in range(len(text)):\n        for word in text[i].split():\n            if len(word) >= 4:\n                list_of_words.append(word)\n    return list_of_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    final_str = \"\"\n    for word in text:\n        if len(word) >= 4:\n            final_str += word\n        else:\n            final_str += \" \"\n    return final_str\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_low = text.lower()\n    found = []\n    index = 0\n    found_pattern = re.compile(r'[a-zA-Z0-9_]+')\n    for i in text_low:\n        if not found_pattern.match(i):\n            found.append(i)\n        index += 1\n        if index == 4:\n            found.append('\\n')\n            index = 0\n    return found\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    str_new = \"\"\n    for x in text:\n        if len(x) >= 4:\n            str_new += x + \" \"\n    return str_new\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word = ''\n    for i in range(len(text)):\n        if len(word) <= 3:\n            word += text[i]\n        else:\n            if text[i] =='':\n                pass\n            else:\n                if text[i] == text[i + 1] or text[i] == text[i + 2]:\n                    word += text[i]\n                else:\n                    word +=''\n    return word\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i ** 2 for i in nums]\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [num ** 2 for num in nums]\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [value ** 2 for value in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #calculate the squares of each element\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [(i*i) for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    s = []\n    for i in nums:\n        s.append(i**2)\n    return s\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    min_rotations = 1000000\n    for i in range(len(str) - 1):\n        for j in range(len(str) - 1 - i):\n            if str[j] == str[j + i + 1]:\n                min_rotations = min(min_rotations, len(str) - (j + 1) - (i + 1))\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # 1 - find the number of rotations\n    rotations = str.count('rot')\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for c in range(0,len(str)-1):\n        if str[c]!= str[c+1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return min(find_rotations(i) for i in str)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Declare the variables\n    dic = {}\n    for i in str:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(\"enter the string to be rotated\")\n    # str = input()\n    # print(\"Your string is:\", str)\n    # return print(str, \"has rotations\",  find_Rotations(str, 3))\n    # print(str, \"has rotations\",  find_Rotations(str, 5))\n    return find_Rotations(str, 3)\n    # return str, \"has rotations\", find_Rotations(str, 5)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    index = 0\n    new_str = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_str += str[i]\n        else:\n            index += 1\n            new_str += str[i]\n            if index%2 == 0:\n                new_str += str[i]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # NOTE: you may find the gist of the original problem here:\n    # http://stackoverflow.com/questions/5832860/minimize-duplicate-rotations\n    # you can also try to write this in a way that more clearly works\n    # NOTE: the naive approach would use a dictionary, but it's only\n    #  useful because it's faster to find the minimum of the rotations\n    #  needed by a string, without having to store the rotations as keys\n    rotations = {}\n    for i in str:\n        rotations[i] = rotations.get(i, 0) + 1\n    min_rotations = min(rotations.values())\n    return min_rotations\n    \ndef find_Rotations2(str):\n    '''\n    Your solution should be just a brute force approach.\n    '''\n    rotations = {}\n    for i in str:\n        rotations[i] = rotations.get(i, 0) + 1\n    min_rotations = min(rotations.values())\n    return min_rotations\n    "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        rotations += str.count(str[i])\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if(str == None):\n        return 0\n    rotations = 0\n    for i in range(len(str) - 1):\n        for j in range(i+1, len(str)):\n            if(str[i] == str[j]):\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    def remove_occ(s,ch): \n        '''\n        Write a python function to remove first and last occurrence of a given character from the string.\n        '''\n        # \n        # 1. declare the functions\n        # \n        # 2. Loop through the entire string and check for the character given\n        #     1.1. if the character is in the dictionary, delete it\n        #     1.2. if the character is not in the dictionary, then add it to the dictionary\n        # \n        # 3. Print the resultant string\n        # \n        # 4. Exits if the string is empty\n        # \n        # 5. Exits if the character given is not in the dictionary.\n        # \n        # 6. Add the updated string\n        # \n        # 7. Return the updated string\n        # \n        # 8. Exit if the string is empty\n        # \n        # 9. Exit if the character given is not in the dictionary\n        # \n        # 10. Add the dictionary to the string\n        # \n        # 11. Return the updated string\n        # \n        # 12. Exit if the string is empty\n        # \n        # 13. Exit if the character given is not in the dictionary.\n        # \n        # 14. Add the dictionary to the string\n        # \n        # 15. Return the updated string\n        # \n        # 16. Exit if the string is empty\n        # \n        # 17. Exit if the character given is not in the dictionary\n        # \n        # 18. Add the dictionary to the string\n        # \n        # 19. Return the updated string\n        # \n        # 20. Exit if the string is empty\n        # \n        # 21. Exit if the character given is not in the dictionary.\n        # \n        # 22. Add the dictionary to the string\n        # \n        # 23. Return the updated string\n        # \n        # 24. Exit if the string is empty\n        # \n        # 25. Exit if the character given is not in the dictionary.\n        # \n        # 26. Return the updated string\n        # \n        # 27. Exit if the string is empty\n        # \n        # 28. Exit if the character given is not in the dictionary.\n        # \n        # 29. Return the updated string\n        # \n        # 30. Exit if the string is empty\n        # \n        # 31. Exit if the character given is not in the dictionary.\n        # \n        # 32. Return the updated string\n        # \n        # 33. Exit if the string is empty\n        # \n        # 34. Exit if the character given is not in the dictionary.\n        # \n        # 35. Return the updated string\n        # \n        # 36. Exit if the string is empty\n        # \n        # 37. Exit if the character given is not in the dictionary.\n        # \n        # 38. Return the updated string\n        # \n        # 39. Exit if the string is empty\n        # \n        # 40. Exit if the character given is not in the dictionary.\n        # \n        # 41. Return the updated string\n        # \n        # 42. Exit if the string is empty\n        # \n        # 43. Exit if the character given is not in the dictionary.\n        # \n        # 44. Return the updated string\n        # \n        # 45. Exit if the string is empty\n        # \n        # 46. Exit if the character given is not in the dictionary.\n        # \n        # 47. Return the updated string\n        # \n        # 48. Exit if the string is empty\n        # \n        # 49. Exit if the character given is not in the dictionary.\n        # \n        # 50. Return the updated string\n        # \n        # 51. Exit if the string is empty\n        # \n        # 52. Exit if the character given is not in the dictionary.\n        # \n        # 53. Return the updated string\n        # \n        # 54. Exit if the string is empty\n        # \n        # 55. Exit if the character given is not in the dictionary.\n        # \n        # 56. Return the updated string\n        # \n        # 57. Exit if the string is empty\n        # \n        # 58. Exit if the character given is not in the dictionary.\n        # \n        # 59. Return the updated string\n        # \n        # 60. Exit if the string is empty\n        # \n        # 61. Exit if the character given is not in the dictionary.\n        # \n        # 62. Return the updated string\n        # \n        # 63. Exit if the string is empty\n        # \n        # 64. Exit if the character given is not in the dictionary.\n        # \n        # 65. Return the updated string\n        # \n        # 66. Exit if the string is empty\n        # \n        # 67. Exit if the character given is not in the dictionary.\n        # \n        # 68. Return the updated string\n        # \n        # 69. Exit if the string is empty\n        # \n        # 70. Exit if the character given is not in the dictionary.\n        # \n        # 71. Return the updated string\n        # \n        # 72. Exit if the string is empty\n        # \n        # 73. Exit if the character given is not in the dictionary.\n        # \n        # 74. Return the updated string\n        # \n        # 75. Exit if the string is empty\n        # \n        # 76. Exit if the character given is not in the dictionary.\n        # \n        # 77. Return the updated string\n        # \n        # 78. Exit if the string is empty\n        # \n        # 79. Exit if the character given is not in the dictionary.\n        # \n        # 80. Return the updated string\n        # \n        # 81. Exit if the string is empty\n        # \n        # 82. Exit if the character given is not in the dictionary.\n        # \n        # 83. Return the updated string\n        # \n        # 84. Exit if the string is empty\n        # \n        # 85. Exit if the character given is not in the dictionary.\n        # \n        # 86. Return the updated string\n        # \n        # 87. Exit if the string is empty\n        # \n        # 88. Exit if the character given is not in the dictionary.\n        # \n        # 89. Return the updated string\n        # \n        # 90. Exit if the string is empty\n        # \n        # 91. Exit if the character given is not in the dictionary.\n        # \n        # 92. Return the updated string\n        # \n        # 93. Exit if the string is empty\n        # \n        # 94. Exit if the character given is not in the dictionary.\n        # \n        # 95. Return the updated string\n        # \n        # 96. Exit if the string is empty\n        # \n        # 97. Exit if the character given is not in the dictionary.\n        # \n        # 98. Return the updated string\n        # \n        # 99. Exit if the string is empty\n        # \n        # 100. Exit if the character given is not in the dictionary.\n        # \n        # 101. Return the updated string\n        # \n        # 102. Exit if the string is empty\n        # \n        # 103. Exit if the character given is not in the dictionary.\n        # \n        # 104. Return the updated string\n        # \n        # 105. Exit if the string is empty\n        # \n        # 106. Exit if the character given is not in the dictionary.\n        # \n        # 107. Return the updated string\n        # \n        # 108. Exit if the string is empty\n        # \n        # 109. Exit if the character given is not in the dictionary.\n        # \n        # 110. Return the updated string\n        # \n        # 111. Exit if the string is empty\n        # \n        # 112. Exit if the character given is not in the dictionary.\n        # \n        # 113. Return the updated string\n        # \n        # 114. Exit if the string is empty\n        # \n        # 115. Exit if the character given is not in the dictionary.\n        # \n        # 116. Return the updated string\n        # \n        # 117. Exit if the string is empty\n        # \n        # 118. Exit if the character given is not in the dictionary.\n        # \n        # 119. Return the updated string\n        # \n        # 120. Exit if the string is empty\n        # \n        # 121. Exit if the character given is not in th"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code goes here\n    #print(s)\n    j=0\n    s1=''\n    for i in range(len(s)):\n        if s[i]==ch:\n            j+=1\n            if(j==1):\n                s1=s[0:i]+s[i+1:]\n                break\n    return s1\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize the variables \n    ch = s[ch] \n    s_len = len(s) \n    occ = 0 \n    # loop until the end of the string is reached \n    while occ < s_len: \n        # check if the current character matches \n        if ch == s[occ]: \n            s = s[:occ] + s[occ + 1:] \n            occ = 0 \n            continue\n        # increment the current occurence \n        occ += 1\n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    if not s[0] == s[-1]:\n        return s[0]+remove_Occ(s,ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0: \n        print(\"invalid string\")\n        return\n    if ch in s: \n        s = s.replace(ch, \"\") \n        return s \n    else: \n        return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    m=len(s)\n    if ch==' ':\n        return ''.join(s)\n    if ch=='-' or ch=='+':\n        return ''.join(s.replace(ch,'',1))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',2))\n    if ch=='.':\n        return ''.join(s.replace(ch,'',3))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',4))\n    if ch=='<':\n        return ''.join(s.replace(ch,'',5))\n    if ch=='@':\n        return ''.join(s.replace(ch,'',6))\n    if ch=='!':\n        return ''.join(s.replace(ch,'',7))\n    if ch=='?':\n        return ''.join(s.replace(ch,'',8))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',9))\n    if ch=='#':\n        return ''.join(s.replace(ch,'',10))\n    if ch=='$':\n        return ''.join(s.replace(ch,'',11))\n    if ch=='%':\n        return ''.join(s.replace(ch,'',12))\n    if ch=='^':\n        return ''.join(s.replace(ch,'',13))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',14))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',15))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',16))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',17))\n    if ch=='-':\n        return ''.join(s.replace(ch,'',18))\n    if ch=='/':\n        return ''.join(s.replace(ch,'',19))\n    if ch=='.':\n        return ''.join(s.replace(ch,'',20))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',21))\n    if ch=='=':\n        return ''.join(s.replace(ch,'',22))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',23))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',24))\n    if ch=='<':\n        return ''.join(s.replace(ch,'',25))\n    if ch=='$':\n        return ''.join(s.replace(ch,'',26))\n    if ch=='%':\n        return ''.join(s.replace(ch,'',27))\n    if ch=='^':\n        return ''.join(s.replace(ch,'',28))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',29))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',30))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',31))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',32))\n    if ch=='-':\n        return ''.join(s.replace(ch,'',33))\n    if ch=='/':\n        return ''.join(s.replace(ch,'',34))\n    if ch=='=':\n        return ''.join(s.replace(ch,'',35))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',36))\n    if ch=='<':\n        return ''.join(s.replace(ch,'',37))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',38))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',39))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',40))\n    if ch=='-':\n        return ''.join(s.replace(ch,'',41))\n    if ch=='.':\n        return ''.join(s.replace(ch,'',42))\n    if ch=='=':\n        return ''.join(s.replace(ch,'',43))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',44))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',45))\n    if ch=='<':\n        return ''.join(s.replace(ch,'',46))\n    if ch=='$':\n        return ''.join(s.replace(ch,'',47))\n    if ch=='%':\n        return ''.join(s.replace(ch,'',48))\n    if ch=='^':\n        return ''.join(s.replace(ch,'',49))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',50))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',51))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',52))\n    if ch=='-':\n        return ''.join(s.replace(ch,'',53))\n    if ch=='/':\n        return ''.join(s.replace(ch,'',54))\n    if ch=='=':\n        return ''.join(s.replace(ch,'',55))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',56))\n    if ch=='<':\n        return ''.join(s.replace(ch,'',57))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',58))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',59))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',60))\n    if ch=='-':\n        return ''.join(s.replace(ch,'',61))\n    if ch=='/':\n        return ''.join(s.replace(ch,'',62))\n    if ch=='=':\n        return ''.join(s.replace(ch,'',63))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',64))\n    if ch=='<':\n        return ''.join(s.replace(ch,'',65))\n    if ch=='$':\n        return ''.join(s.replace(ch,'',66))\n    if ch=='%':\n        return ''.join(s.replace(ch,'',67))\n    if ch=='^':\n        return ''.join(s.replace(ch,'',68))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',69))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',70))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',71))\n    if ch=='-':\n        return ''.join(s.replace(ch,'',72))\n    if ch=='/':\n        return ''.join(s.replace(ch,'',73))\n    if ch=='=':\n        return ''.join(s.replace(ch,'',74))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',75))\n    if ch=='<':\n        return ''.join(s.replace(ch,'',76))\n    if ch=='&':\n        return ''.join(s.replace(ch,'',77))\n    if ch=='*':\n        return ''.join(s.replace(ch,'',78))\n    if ch=='+':\n        return ''.join(s.replace(ch,'',79))\n    if ch=='-':\n        return ''.join(s.replace(ch,'',80))\n    if ch=='/':\n        return ''.join(s.replace(ch,'',81))\n    if ch=='=':\n        return ''.join(s.replace(ch,'',82))\n    if ch=='>':\n        return ''.join(s.replace(ch,'',83))\n    if ch=='<':"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    if len(s)==0: return \"\"\n    s[0]='a'\n    s[-1]='z'\n    return ''.join(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # for example for s='ab',ch='b'\n    # string\n    # ['ab','bc']\n    # character\n    # 'b'\n    # string[0] = 'b'\n    # string[-1] = 'c'\n    # string[-2] = 'b'\n    # string[-3] = 'c'\n    # string[-4] = 'b'\n    # string[-5] = 'c'\n    # string[-6] = 'c'\n    # string[-7] = 'c'\n    # string[-8] = 'c'\n    # string[-9] = 'c'\n    # string[-10] = 'c'\n    # string[-11] = 'c'\n    # string[-12] = 'c'\n    # string[-13] = 'c'\n    # string[-14] = 'c'\n    # string[-15] = 'c'\n    # string[-16] = 'c'\n    # string[-17] = 'c'\n    # string[-18] = 'c'\n    # string[-19] = 'c'\n    # string[-20] = 'c'\n    # string[-21] = 'c'\n    # string[-22] = 'c'\n    # string[-23] = 'c'\n    # string[-24] = 'c'\n    # string[-25] = 'c'\n    # string[-26] = 'c'\n    # string[-27] = 'c'\n    # string[-28] = 'c'\n    # string[-29] = 'c'\n    # string[-30] = 'c'\n    # string[-31] = 'c'\n    # string[-32] = 'c'\n    # string[-33] = 'c'\n    # string[-34] = 'c'\n    # string[-35] = 'c'\n    # string[-36] = 'c'\n    # string[-37] = 'c'\n    # string[-38] = 'c'\n    # string[-39] = 'c'\n    # string[-40] = 'c'\n    # string[-41] = 'c'\n    # string[-42] = 'c'\n    # string[-43] = 'c'\n    # string[-44] = 'c'\n    # string[-45] = 'c'\n    # string[-46] = 'c'\n    # string[-47] = 'c'\n    # string[-48] = 'c'\n    # string[-49] = 'c'\n    # string[-50] = 'c'\n    # string[-51] = 'c'\n    # string[-52] = 'c'\n    # string[-53] = 'c'\n    # string[-54] = 'c'\n    # string[-55] = 'c'\n    # string[-56] = 'c'\n    # string[-57] = 'c'\n    # string[-58] = 'c'\n    # string[-59] = 'c'\n    # string[-60] = 'c'\n    # string[-61] = 'c'\n    # string[-62] = 'c'\n    # string[-63] = 'c'\n    # string[-64] = 'c'\n    # string[-65] = 'c'\n    # string[-66] = 'c'\n    # string[-67] = 'c'\n    # string[-68] = 'c'\n    # string[-69] = 'c'\n    # string[-70] = 'c'\n    # string[-71] = 'c'\n    # string[-72] = 'c'\n    # string[-73] = 'c'\n    # string[-74] = 'c'\n    # string[-75] = 'c'\n    # string[-76] = 'c'\n    # string[-77] = 'c'\n    # string[-78] = 'c'\n    # string[-79] = 'c'\n    # string[-80] = 'c'\n    # string[-81] = 'c'\n    # string[-82] = 'c'\n    # string[-83] = 'c'\n    # string[-84] = 'c'\n    # string[-85] = 'c'\n    # string[-86] = 'c'\n    # string[-87] = 'c'\n    # string[-88] = 'c'\n    # string[-89] = 'c'\n    # string[-90] = 'c'\n    # string[-91] = 'c'\n    # string[-92] = 'c'\n    # string[-93] = 'c'\n    # string[-94] = 'c'\n    # string[-95] = 'c'\n    # string[-96] = 'c'\n    # string[-97] = 'c'\n    # string[-98] = 'c'\n    # string[-99] = 'c'\n    # string[-100] = 'c'\n    # string[-101] = 'c'\n    # string[-102] = 'c'\n    # string[-103] = 'c'\n    # string[-104] = 'c'\n    # string[-105] = 'c'\n    # string[-106] = 'c'\n    # string[-107] = 'c'\n    # string[-108] = 'c'\n    # string[-109] = 'c'\n    # string[-110] = 'c'\n    # string[-111] = 'c'\n    # string[-112] = 'c'\n    # string[-113] = 'c'\n    # string[-114] = 'c'\n    # string[-115] = 'c'\n    # string[-116] = 'c'\n    # string[-117] = 'c'\n    # string[-118] = 'c'\n    # string[-119] = 'c'\n    # string[-120] = 'c'\n    # string[-121] = 'c'\n    # string[-122] = 'c'\n    # string[-123] = 'c'\n    # string[-124] = 'c'\n    # string[-125] = 'c'\n    # string[-126] = 'c'\n    # string[-127] = 'c'\n    # string[-128] = 'c'\n    # string[-129] = 'c'\n    # string[-130] = 'c'\n    # string[-131] = 'c'\n    # string[-132] = 'c'\n    # string[-133] = 'c'\n    # string[-134] = 'c'\n    # string[-135] = 'c'\n    # string[-136] = 'c'\n    # string[-137] = 'c'\n    # string[-138] = 'c'\n    # string[-139] = 'c'\n    # string[-140] = 'c'\n    # string[-141] = 'c'\n    # string[-142] = 'c'\n    # string[-143] = 'c'\n    # string[-144] = 'c'\n    # string[-145] = 'c'\n    # string[-146] = 'c'\n    # string[-147] = 'c'\n    # string[-148] = 'c'\n    # string[-149] = 'c'\n    # string[-150] = 'c'\n    # string[-151] = 'c'\n    # string[-152] = 'c'\n    # string[-153] = 'c'\n    # string[-154] = 'c'\n    # string[-155] = 'c'\n    # string[-156] = 'c'\n    # string[-157] = 'c'\n    # string[-158] = 'c'\n    # string[-159] = 'c'\n    # string[-160] = 'c'\n    # string[-161] = 'c'\n    # string[-162] = 'c'\n    # string[-163] = 'c'\n    # string[-16"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s == None: \n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M=[[int(i) for i in j.split()] for j in M]\n    for i in range(len(M)):\n        sum=0\n        for j in range(len(M[i])):\n            sum+=M[i][j]\n        for j in range(len(M[i])):\n            M[i][j]=sum\n    return M\n    \ndef main():\n    N=int(input())\n    M=[]\n    for i in range(N):\n        M.append([int(j) for j in input().split()])\n    M=sort_matrix(M)\n    for i in range(N):\n        for j in range(N):\n            if M[i][j]==0:\n                print(0, end=\" \")\n            else:\n                print(M[i][j], end=\" \")\n        print()\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    x = []\n    y = []\n    for i in range(M.shape[0]):\n        x.append(sum(M[i]))\n    for i in range(M.shape[0]):\n        y.append(sum(M[M[i].nonzero()]))\n    arr = zip(x,y)\n    arr = sorted(arr)\n    return np.array(x) + np.array(y)\n    # ans = sorted(arr)\n    # return np.array(x) + np.array(y)"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = []\n    for i in range(len(M)):\n        for j in range(i+1,len(M)):\n            sums.append(M[i][j] + M[j][i])\n    sums.sort()\n    for i in range(len(M)):\n        for j in range(i+1,len(M)):\n            M[i][j],M[j][i] = M[j][i],M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #create an empty matrix to hold sorted data\n    s = []\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            #if the current value is equal to zero, add a 1 to the sum\n            if M[i][j] == 0:\n                s.append((j, M[i][j]))\n    #sort the elements by their sum\n    s.sort()\n    #iterate through the sorted elements\n    for i in range(len(s)):\n        #move the values to the appropriate position\n        M[i][s[i][1]] = M[s[i][1]][i]\n    #print out the matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            #print the values in the same position\n            print(\"[{:2}] {}\".format(j, M[i][j]), end=\", \")\n        print()\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # taking matrix as input\n    row_sum = sum(M)\n    M = sorted(M, key=lambda x:x[0])\n    # return matrix\n    return M\n    # output\n    # [[1, 3], [2, 5], [4, 10]]\n    #\n    # # checking if the sum of the rows is greater than or equal to the rows number\n    # # if not, return the original matrix\n    # # else return the sorted matrix"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if M[j][i] < M[j + 1][i]:\n                temp = M[j][i]\n                M[j][i] = M[j + 1][i]\n                M[j + 1][i] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = []\n    for i in range(len(M)):\n        new_matrix.append([])\n        for j in range(len(M[i])):\n            if i < len(M[i])-1:\n                new_matrix[i].append(sum(M[i][j:j+2]))\n            else:\n                new_matrix[i].append(sum(M[i][j:]))\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = [[M[0][i] + M[i][0] for i in range(len(M))] for j in range(len(M[0]))]\n    S = []\n    for row in M:\n        S.append(sum(row))\n    print(S)\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if S[j] < S[j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n            else:\n                break\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = []\n    sum_M = []\n    for i in M:\n        sum_M.append(sum(i))\n    sum_M.sort()\n    for i in range(len(sum_M)):\n        for j in range(len(M)):\n            if i < len(M):\n                sorted_M.append(M[j][i])\n            else:\n                sorted_M.append(0)\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    sums=[0 for i in range(n)]\n    \n    for i in range(n):\n        sums[i]=M[i][0]\n    \n    for i in range(n):\n        for j in range(i):\n            if M[i][j]<M[i][j+1]:\n                temp=M[i][j]\n                M[i][j]=M[i][j+1]\n                M[i][j+1]=temp\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if M[i][j]<M[j][i]:\n                temp=M[i][j]\n                M[i][j]=M[j][i]\n                M[j][i]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>M[i][j+1]:\n                temp=M[i][j]\n                M[i][j]=M[i][j+1]\n                M[i][j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if M[i][j]>sums[j] and M[i][j]>sums[j+1]:\n                temp=M[i][j]\n                M[i][j]=sums[j]\n                sums[j]=sums[j+1]\n                sums[j+1]=temp\n    \n    return sums"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if b == 0 :\n        return l*l*h\n    elif b == 1 :\n        return l*l*h\n    elif b == 2 :\n        return l*l\n    else :\n        return (l+h)*(l+h)*h\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = ((l+b)**2+(h-l)**2)**0.5\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    '''\n    Triangular Prism\n    \n    Input\n    l(number) : side length\n    b(number) : base height\n    h(number) : height\n    \n    Output\n    volume(integer) : volume\n    '''\n    volume = 0\n    # Calculating height\n    h = (b*h)/2\n    \n    # Calculating base\n    b = (l*b)/2\n    \n    # Calculating side\n    l = (l*l)/2\n    \n    # Calculating volume\n    volume = h*b\n    \n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #calculate area of triangle\n    a = (l*b)/2\n    #calculate volume\n    return a*h*h\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (l>b) or (h>b) : \n        return 0\n    else : \n        if (l>=b) : \n            return ((b*b)/6*h) + (2*l*h) + (l*l) \n        if (h>=b) : \n            return ((b*b)/6*h) + (2*l*h) + (l*l) \n    return 0\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if(l < 0 or h < 0 or b < 0 or h > 300) : \n        print(\"Invalid inputs\") \n    else : \n        return (b*h)/(l*l)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume=0\n    if l==b and h==b:\n        volume=0\n    elif l>b and h<b:\n        volume=1\n    elif l>b and h>b:\n        volume=4\n    else:\n        volume=8\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    h=h/2\n    l=l/2\n    b=b/2\n    c=l+b+h\n    if(c>=0) :\n        return round(l**3+h**3+c**3,2)\n    else :\n        return 'Cannot calculate the volume of a Triangular Prism'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #define constants\n    m = l*h\n    a = b*h\n    h_ = h\n    v_ = 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(re.findall(\"[a-z][A-Z]\", text)) > 0:\n        return True\n    elif len(re.findall(\"[A-Z][a-z]\", text)) > 0:\n        return True\n    else:\n        return False\n    \ndef text_swapcase(text):\n    '''\n    Write a function that converts any word to upper case.\n    '''\n    return text.upper()\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if(text.lower()==text.lower()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # write your code here\n    def check(s):\n        i = 0\n        while i < len(s):\n            if s[i].lower() in 'qwertyuiopasdfghjklzxcvbnm':\n                if s[i + 1].isupper():\n                    if i < len(s) - 1 and s[i + 2].isupper():\n                        return True\n                    elif i < len(s) - 1 and not s[i + 1].isupper():\n                        return True\n                else:\n                    return True\n            i += 1\n        return False\n    # print(check(text))\n    return check(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"\\b([A-Za-z]{1,6})\\b\"\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # create regular expression for re.search\n    regex = re.compile(r'[a-zA-Z][a-zA-Z0-9\\-]{1,}')\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for word in re.split('\\w+', text):\n        if len(word) < 2:\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[a-zA-Z]{2,}[_A-Z]{2,}[a-zA-Z]\"\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'(?:[a-z]{2,})_([a-z])', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex_str = r\"[A-Za-z]\"\n    return re.search(regex_str, text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(i.islower() for i in text)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 3*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #Use math to calculate the perimeter of the square\n    perimeter = a ** 2\n    return perimeter\n    #Time complexity is O(1)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_perimeter = 0\n    for i in range(a):\n        square_perimeter += 2*(a-i)\n    return square_perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int or a < 0:\n        return -1\n    else:\n        return a*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a * 4)\n    #raise NotImplementedError\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    side_length = a\n    perimeter = 4 * side_length\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square = 0\n    for i in range(1, a + 1):\n        square = square + i\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    def square_perimeter(a):\n        if a < 0:\n            return 0\n        return a*a + 2*a+4\n    return square_perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    final_list = []\n    string_list = list(string)\n    for i in string_list:\n        if i in string_list[0]:\n            string_list.remove(i)\n        else:\n            final_list.append(i)\n    return \"\".join(final_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_characters = []\n    for x in string:\n        if x not in list_of_characters:\n            list_of_characters.append(x)\n    return list_of_characters\ndef list_to_str(string):\n    '''\n    Write a function to convert a list of characters to a string which consists of the characters in the list.\n    '''\n    list_of_characters = []\n    for x in string:\n        list_of_characters.append(x)\n    return ''.join(list_of_characters)\ndef main():\n    '''\n    Write a function to print out all possible combinations of two numbers from a list of numbers.\n    '''\n    l = []\n    for x in range(1, 10):\n        for y in range(1, 10):\n            l.append([x, y])\n    print(l)\n    for x in l:\n        print(str(x[0]) + str(x[1]) +'+'+ str(x[0] + x[1]))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for i in string:\n        if i in string:\n            lst.append(i)\n    return lst\ndef list_to_str(list):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    str = ''\n    for i in list:\n        str += i\n    return str\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string[:len(string)]]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for c in string:\n        if c not in output:\n            output.append(c)\n    return output\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in list:\n            continue\n        else:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_ = []\n    for x in string:\n        if x in string[0:len(string)-1]:\n            list_.append(x)\n    list_.append(string[len(string)-1])\n    return list_\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in range(0,len(string)):\n        if string[i] in string_list:\n            string_list.remove(string[i])\n    return string_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    list.append(string)\n    for i in range(len(string)):\n        if string[i] in list:\n            list.remove(string[i])\n        else:\n            list.append(string[i])\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    return string.replace(string[0], \"\").replace(\" \", \"\").replace(\"\\n\", \"\").split()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # pass the array to the function\n    array = arraynums\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr_list = arraynums\n    dup_list = []\n    for num in arr_list:\n        if num in dup_list:\n            return True\n        else:\n            dup_list.append(num)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    #pass the array nums and search for the duplicate\n    #pass list in second function\n    def duplicate_numbers(array):\n        dup = []\n        for number in arraynums:\n            if number in dup:\n                return True\n            else:\n                dup.append(number)\n        return False\n    \n    #pass the array and search for the duplicate\n    #pass list in second function\n    dup_array = duplicate_numbers(arraynums)\n    if dup_array:\n        print(\"Found Duplicate: \", dup_array)\n        \n    else:\n        print(\"No Duplicate: \", arraynums)\n        \n    #pass the array and search for the duplicate\n    #pass list in second function\n    dup_array2 = duplicate_numbers(arraynums2)\n    if dup_array2:\n        print(\"Found Duplicate: \", dup_array2)\n        \n    else:\n        print(\"No Duplicate: \", arraynums2)\n        \n    \n    \n    \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array3 = duplicate_numbers(arraynums3)\n    if dup_array3:\n        print(\"Found Duplicate: \", dup_array3)\n        \n    else:\n        print(\"No Duplicate: \", arraynums3)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array4 = duplicate_numbers(arraynums4)\n    if dup_array4:\n        print(\"Found Duplicate: \", dup_array4)\n        \n    else:\n        print(\"No Duplicate: \", arraynums4)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array5 = duplicate_numbers(arraynums5)\n    if dup_array5:\n        print(\"Found Duplicate: \", dup_array5)\n        \n    else:\n        print(\"No Duplicate: \", arraynums5)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array6 = duplicate_numbers(arraynums6)\n    if dup_array6:\n        print(\"Found Duplicate: \", dup_array6)\n        \n    else:\n        print(\"No Duplicate: \", arraynums6)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array7 = duplicate_numbers(arraynums7)\n    if dup_array7:\n        print(\"Found Duplicate: \", dup_array7)\n        \n    else:\n        print(\"No Duplicate: \", arraynums7)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array8 = duplicate_numbers(arraynums8)\n    if dup_array8:\n        print(\"Found Duplicate: \", dup_array8)\n        \n    else:\n        print(\"No Duplicate: \", arraynums8)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array9 = duplicate_numbers(arraynums9)\n    if dup_array9:\n        print(\"Found Duplicate: \", dup_array9)\n        \n    else:\n        print(\"No Duplicate: \", arraynums9)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array10 = duplicate_numbers(arraynums10)\n    if dup_array10:\n        print(\"Found Duplicate: \", dup_array10)\n        \n    else:\n        print(\"No Duplicate: \", arraynums10)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array11 = duplicate_numbers(arraynums11)\n    if dup_array11:\n        print(\"Found Duplicate: \", dup_array11)\n        \n    else:\n        print(\"No Duplicate: \", arraynums11)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array12 = duplicate_numbers(arraynums12)\n    if dup_array12:\n        print(\"Found Duplicate: \", dup_array12)\n        \n    else:\n        print(\"No Duplicate: \", arraynums12)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array13 = duplicate_numbers(arraynums13)\n    if dup_array13:\n        print(\"Found Duplicate: \", dup_array13)\n        \n    else:\n        print(\"No Duplicate: \", arraynums13)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array14 = duplicate_numbers(arraynums14)\n    if dup_array14:\n        print(\"Found Duplicate: \", dup_array14)\n        \n    else:\n        print(\"No Duplicate: \", arraynums14)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array15 = duplicate_numbers(arraynums15)\n    if dup_array15:\n        print(\"Found Duplicate: \", dup_array15)\n        \n    else:\n        print(\"No Duplicate: \", arraynums15)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array16 = duplicate_numbers(arraynums16)\n    if dup_array16:\n        print(\"Found Duplicate: \", dup_array16)\n        \n    else:\n        print(\"No Duplicate: \", arraynums16)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array17 = duplicate_numbers(arraynums17)\n    if dup_array17:\n        print(\"Found Duplicate: \", dup_array17)\n        \n    else:\n        print(\"No Duplicate: \", arraynums17)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array18 = duplicate_numbers(arraynums18)\n    if dup_array18:\n        print(\"Found Duplicate: \", dup_array18)\n        \n    else:\n        print(\"No Duplicate: \", arraynums18)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array19 = duplicate_numbers(arraynums19)\n    if dup_array19:\n        print(\"Found Duplicate: \", dup_array19)\n        \n    else:\n        print(\"No Duplicate: \", arraynums19)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array20 = duplicate_numbers(arraynums20)\n    if dup_array20:\n        print(\"Found Duplicate: \", dup_array20)\n        \n    else:\n        print(\"No Duplicate: \", arraynums20)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array21 = duplicate_numbers(arraynums21)\n    if dup_array21:\n        print(\"Found Duplicate: \", dup_array21)\n        \n    else:\n        print(\"No Duplicate: \", arraynums21)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array22 = duplicate_numbers(arraynums22)\n    if dup_array22:\n        print(\"Found Duplicate: \", dup_array22)\n        \n    else:\n        print(\"No Duplicate: \", arraynums22)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array23 = duplicate_numbers(arraynums23)\n    if dup_array23:\n        print(\"Found Duplicate: \", dup_array23)\n        \n    else:\n        print(\"No Duplicate: \", arraynums23)\n        \n    # pass the array and search for the duplicate\n    #pass list in second function\n    dup_array24 = duplicate_numbers(arraynums24)\n    if dup_array24:\n        print(\"Found Duplicate: \", dup_array24)\n        \n    else:\n        print("
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = sorted(arraynums)\n    if arraynums == arraynums[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Testing duplicate number...\")\n    print(f\"Found {arraynums.count(arraynums[0])} elements\")\n    print(f\"Original Array: {arraynums}\")\n    arraynums.sort()\n    if arraynums.count(arraynums[0]) > 1:\n        print(\"NO Duplicates\")\n    else:\n        print(\"Yes:\", arraynums[0])\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pas"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if i in arraynums:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num = arraynums[0]\n    num_set = set(arraynums)\n    for num in num_set:\n        if num!= nums:\n            return False\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if i in arraynums[i+1:]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # --1\n    # find_duplicates(arraynums)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Solution 1 \n    if x == 0:\n        return False\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x%2==0 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 'Woodball':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    wood = 0\n    for i in range(1, x + 1):\n        if i % 2 == 0:\n            wood += 1\n        else:\n            wood = 0\n    return wood\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_woodall(x): \n        '''\n        Write a function to check if the given number is woodball or not.\n        '''\n        def is_woodall(x): \n            '''\n            Write a function to check if the given number is woodball or not.\n            '''\n            if x%2 == 0:\n                print(x,'is not a woodball')\n            else:\n                print(x,'is a woodball')\n        is_woodall(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        print(True)\n    else: \n        print(False)\n        \n        \nwoodall()\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_fowl(x): \n    '''\n    Write a function to check if the given number is fowl or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_chip(x):\n    '''\n    Write a function to check if the given number is chip or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_pan(x):\n    '''\n    Write a function to check if the given number is pan or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_power(x):\n    '''\n    Write a function to check if the given number is power or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_lady(x):\n    '''\n    Write a function to check if the given number is lady or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_sol(x):\n    '''\n    Write a function to check if the given number is sol or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_booth(x):\n    '''\n    Write a function to check if the given number is booth or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_paint(x):\n    '''\n    Write a function to check if the given number is paint or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_scissors(x):\n    '''\n    Write a function to check if the given number is scissors or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_paper(x):\n    '''\n    Write a function to check if the given number is paper or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_scramble(x):\n    '''\n    Write a function to check if the given number is scramble or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_lava(x):\n    '''\n    Write a function to check if the given number is lava or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_golden(x):\n    '''\n    Write a function to check if the given number is golden or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_heart(x):\n    '''\n    Write a function to check if the given number is heart or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_canary(x):\n    '''\n    Write a function to check if the given number is canary or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_transistor(x):\n    '''\n    Write a function to check if the given number is transistor or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_electric_beam(x):\n    '''\n    Write a function to check if the given number is electric beam or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_port(x):\n    '''\n    Write a function to check if the given number is port or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_colin(x):\n    '''\n    Write a function to check if the given number is colin or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_leaf(x):\n    '''\n    Write a function to check if the given number is leaf or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_pipe(x):\n    '''\n    Write a function to check if the given number is pipe or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_brick(x):\n    '''\n    Write a function to check if the given number is brick or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_brick_hatch(x):\n    '''\n    Write a function to check if the given number is brick hatch or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_bolt(x):\n    '''\n    Write a function to check if the given number is bolt or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_bolt_hatch(x):\n    '''\n    Write a function to check if the given number is bolt hatch or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_braket(x):\n    '''\n    Write a function to check if the given number is braket or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_concrete(x):\n    '''\n    Write a function to check if the given number is concrete or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_concrete_hatch(x):\n    '''\n    Write a function to check if the given number is concrete hatch or not.\n    '''\n    if x < 3:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_cu"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x <= 3):\n        return \"Woodball\"\n    if (x >= 4):\n        return \"Woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x == 1):\n        return True\n    else:\n        return False\n        \ndef is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 1 or x == 2 or x == 3 or x == 4 or x == 5\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(num)\n    rev2 = rev * -1\n    if rev > rev2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = num * -1\n    while num > 0:\n        if num % 2 == 1:\n            break\n        num = num / 2\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return 1 - (rev(num-1) * 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = num[::-1]\n    return num == reverse\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # check reverse for length\n    if len(num) < 2:\n        return num\n    else:\n        # check if num is positive\n        if num > 0:\n            # check for negative numbers\n            if num < 0:\n                # if negative number, reverse it\n                return rev(num * -1)\n            else:\n                # if positive number, reverse it\n                return num * -1\n        else:\n            # if number is zero, return it\n            return num\nprint(rev(4321)"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num * 2\n    if num < rev_num:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    count = 0\n    while(num>0):\n        rem = num%10\n        rev_num += rem*(10**count)\n        num//=10\n        count+=1\n    if rev_num == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        temp = num % 10\n        rev_num = rev_num * 10 + temp\n        num = num // 10\n    if rev_num == 2:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    if num == 0:\n        return 0\n    while num > 0:\n        rem = num % 10\n        reverse = reverse * 10 + rem\n        num = num // 10\n    if reverse < 10:\n        return 0\n    else:\n        return reverse\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Declare an array\n    Num_array = []\n    \n    # Check each element in the given array for number of digits\n    # and add to an array\n    for i in range(len(arr)):\n        Num_array.append(int(arr[i]))\n    \n    # Sort array\n    Num_array.sort()\n    \n    # Start searching from the end of the array\n    for i in range(len(Num_array)-1, 0, -1):\n        \n        # If the number we are looking at is greater than the next one, then\n        # we have found the number\n        if Num_array[i] > Num_array[i-1]:\n            \n            # Increment the count\n            Num_array[i] = Num_array[i-1] + 1\n            break\n            \n    # Return the maximum number\n    return Num_array[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # create a set of numbers that can be used as a key to the dict\n    #set = set()\n    # for i in arr:\n        # set.add(i)\n    #     #if i in dict\n        # #add i to dict\n    # #if len(set)>0:\n    # #    #return the largest number from the set\n    # #    return max(set)\n    # #set.clear()\n    # return 0\n    \n    #using a map, we can do this\n    d = dict()\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    max = 0\n    for key, value in d.items():\n        if value > max:\n            max = value\n    \n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Iterate through the list and check if it is in the list. If it is, return its value. Else, return -1.\n    for i in arr:\n        if i in arr:\n            return i\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #initializing an empty array\n    empty_array = []\n    #loop through arr\n    for x in range(len(arr)):\n        #if the last element of the array is equal to the last element in the list\n        if(arr[-1] == arr[-2]):\n            #add the last element of the array to the array\n            empty_array.append(arr[-1])\n        #if it is not equal to the last element in the array\n        else:\n            #append the first element of the array to the empty array\n            empty_array.append(arr[0])\n    #printing the number of elements in the array\n    print(len(empty_array))\n    #returning the largest number\n    return max(empty_array)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    max_num = 0\n    for i in arr:\n        if i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    MaxNum = 0\n    num_list = []\n    for x in range(len(arr)) : \n        if arr[x] > MaxNum :\n            MaxNum = arr[x]\n            num_list.append(arr[x])\n    return num_list\ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    MinNum = 0\n    num_list = []\n    for x in range(len(arr)) : \n        if arr[x] < MinNum :\n            MinNum = arr[x]\n            num_list.append(arr[x])\n    return num_list\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # a: inital list \n    a = []\n    # b: final list \n    b = []\n    # loop the digits of the array \n    for num in arr : \n        # append the current digit to a \n        a.append(num)\n        # append the next digit to b \n        b.append(int(num[1:]) + int(num[:1]))\n    # sort the list of numbers \n    b.sort()\n    # if there are no values in a, then return an empty list \n    if len(a) == 0 : \n        return []\n    # if there are any values in a, then return the first value \n    # and the sum of the remaining values \n    else : \n        # initialize the current maximum as the sum \n        current_max = 0 \n        # loop through the array \n        for i in range(len(a)) : \n            # if the current value is not the first element \n            if a[i]!= b[i] : \n                # if it is a digit, then use the previous value \n                # to calculate the sum of the other values \n                # as the current value \n                if a[i][0]!= b[i][0] : \n                    current_max += int(a[i]) + int(b[i])\n                # if it is a digit, then use the previous value \n                # to calculate the sum of the other values \n                # as the current value \n                else : \n                    current_max += int(a[i]) \n        # return the current max \n        return [int(a[0]), current_max]"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def find_Max_Num_Helper(arr) : \n        if len(arr) == 0 :\n            return []\n        if len(arr) == 1 :\n            return arr\n        if len(arr) == 2 :\n            if arr[0] > arr[1] :\n                return [arr[0], arr[1]]\n            else :\n                return [arr[1], arr[0]]\n        mid = int(len(arr)/2)\n        #print(arr[0], arr[mid])\n        right_part = find_Max_Num_Helper(arr[mid:])\n        left_part = find_Max_Num_Helper(arr[:mid])\n        if arr[0] > arr[mid] :\n            return [arr[0], right_part[0]]\n        if arr[mid] > arr[0] :\n            return [arr[mid], right_part[1]]\n        if arr[mid] > arr[mid-1] :\n            return [arr[mid-1], left_part[0]]\n        return [arr[mid-1], left_part[1]]\n    return find_Max_Num_Helper(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = 0\n    \n    for i in range(len(arr)) : \n        if arr[i] > Max : \n            Max = arr[i] \n    return Max \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Declare an array of ones\n    ones = [1] * len(arr)\n    # Initialize result\n    result = 0\n    # Loop through array and find the maximum value\n    for i in arr:\n        # If the number is one, update result\n        if i == ones[result]:\n            result += 1\n        else : \n            # If it is zero, add one to the result\n            if result == 0: \n                result += 1\n            # If it is a nonzero, update result\n            else : \n                result += 1\n                ones[result] = 0\n    # Return result\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign1 = -1 if x>0 else 1\n    sign2 = -1 if y>0 else 1\n    return sign1*sign2*abs(x-y"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > y) or (x < y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return (x,y)\n    elif x < y:\n        return (y,x)\n    else:\n        return (x,y)\n    \ndef is_divisor(x,y): \n    '''\n    Write a python function to check whether the given two integers are divisible or not.\n    '''\n    return (x % y == 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = []\n    for i in range(len(x)):\n        if x[i] > 0 and y[i] < 0:\n            signs.append(1)\n        elif x[i] < 0 and y[i] > 0:\n            signs.append(-1)\n    if signs == [1, -1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return 0\n    elif x<0 and y>0:\n        return -1\n    elif x>0 and y<0:\n        return 1\n    elif x>0 and y>0:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    z = []\n    z.append(x)\n    z.append(y)\n    if (z[0] > z[1]) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return \"Your numbers are negative.\"\n    elif x > 0 and y < 0:\n        return \"Your numbers are positive.\"\n    elif x < 0 and y > 0:\n        return \"Your numbers are negative.\"\n    elif x > 0 and y > 0:\n        return \"Your numbers are positive.\"\n    else:\n        return \"Your numbers are equal.\"\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<y:\n        result=0\n    else:\n        result=1\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return [1 if x < 0 or y < 0 else -1 for x, y in zip(x,y)]\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # CODE HERE\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 20\n    elif n == 7:\n        return 25\n    elif n == 8:\n        return 30\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 40\n    elif n == 11:\n        return 45\n    elif n == 12:\n        return 50\n    elif n == 13:\n        return 55\n    elif n == 14:\n        return 60\n    elif n == 15:\n        return 65\n    elif n == 16:\n        return 70\n    elif n == 17:\n        return 75\n    elif n == 18:\n        return 80\n    elif n == 19:\n        return 85\n    elif n == 20:\n        return 90\n    elif n == 21:\n        return 95\n    elif n == 22:\n        return 100\n    elif n == 23:\n        return 105\n    elif n == 24:\n        return 110\n    elif n == 25:\n        return 115\n    elif n == 26:\n        return 120\n    elif n == 27:\n        return 125\n    elif n == 28:\n        return 130\n    elif n == 29:\n        return 135\n    elif n == 30:\n        return 140\n    elif n == 31:\n        return 145\n    elif n == 32:\n        return 150\n    elif n == 33:\n        return 155\n    elif n == 34:\n        return 160\n    elif n == 35:\n        return 165\n    elif n == 36:\n        return 170\n    elif n == 37:\n        return 175\n    elif n == 38:\n        return 180\n    elif n == 39:\n        return 185\n    elif n == 40:\n        return 190\n    elif n == 41:\n        return 195\n    elif n == 42:\n        return 200\n    elif n == 43:\n        return 205\n    elif n == 44:\n        return 210\n    elif n == 45:\n        return 215\n    elif n == 46:\n        return 220\n    elif n == 47:\n        return 225\n    elif n == 48:\n        return 230\n    elif n == 49:\n        return 235\n    elif n == 50:\n        return 240\n    elif n == 51:\n        return 245\n    elif n == 52:\n        return 250\n    elif n == 53:\n        return 255\n    elif n == 54:\n        return 260\n    elif n == 55:\n        return 265\n    elif n == 56:\n        return 270\n    elif n == 57:\n        return 275\n    elif n == 58:\n        return 280\n    elif n == 59:\n        return 285\n    elif n == 60:\n        return 290\n    elif n == 61:\n        return 295\n    elif n == 62:\n        return 300\n    elif n == 63:\n        return 305\n    elif n == 64:\n        return 310\n    elif n == 65:\n        return 315\n    elif n == 66:\n        return 320\n    elif n == 67:\n        return 325\n    elif n == 68:\n        return 330\n    elif n == 69:\n        return 335\n    elif n == 70:\n        return 340\n    elif n == 71:\n        return 345\n    elif n == 72:\n        return 350\n    elif n == 73:\n        return 355\n    elif n == 74:\n        return 360\n    elif n == 75:\n        return 365\n    elif n == 76:\n        return 370\n    elif n == 77:\n        return 375\n    elif n == 78:\n        return 380\n    elif n == 79:\n        return 385\n    elif n == 80:\n        return 390\n    elif n == 81:\n        return 395\n    elif n == 82:\n        return 400\n    elif n == 83:\n        return 405\n    elif n == 84:\n        return 410\n    elif n == 85:\n        return 415\n    elif n == 86:\n        return 420\n    elif n == 87:\n        return 425\n    elif n == 88:\n        return 430\n    elif n == 89:\n        return 435\n    elif n == 90:\n        return 440\n    elif n == 91:\n        return 445\n    elif n == 92:\n        return 450\n    elif n == 93:\n        return 455\n    elif n == 94:\n        return 460\n    elif n == 95:\n        return 465\n    elif n == 96:\n        return 470\n    elif n == 97:\n        return 475\n    elif n == 98:\n        return 490\n    elif n == 99:\n        return 494\n    elif n == 100:\n        return 500\n    elif n == 101:\n        return 505\n    elif n == 102:\n        return 510\n    elif n == 103:\n        return 515\n    elif n == 104:\n        return 520\n    elif n == 105:\n        return 525\n    elif n == 106:\n        return 530\n    elif n == 107:\n        return 535\n    elif n == 108:\n        return 540\n    elif n == 109:\n        return 545\n    elif n == 110:\n        return 550\n    elif n == 111:\n        return 555\n    elif n == 112:\n        return 560\n    elif n == 113:\n        return 565\n    elif n == 114:\n        return 570\n    elif n == 115:\n        return 575\n    elif n == 116:\n        return 580\n    elif n == 117:\n        return 585\n    elif n == 118:\n        return 590\n    elif n == 119:\n        return 595\n    elif n == 120:\n        return 600\n    elif n == 121:\n        return 625\n    elif n == 122:\n        return 630\n    elif n == 123:\n        return 635\n    elif n == 124:\n        return 640\n    elif n == 125:\n        return 645\n    elif n == 126:\n        return 650\n    elif n == 127:\n        return 655\n    elif n == 128:\n        return 660\n    elif n == 129:\n        return 665\n    elif n == 130:\n        return 670\n    elif n == 131:\n        return 675\n    elif n == 132:\n        return 680\n    elif n == 133:\n        return 685\n    elif n == 134:\n        return 690\n    elif n == 135:\n        return 695\n    elif n == 136:\n        return 700\n    elif n == 137:\n        return 705\n    elif n == 138:\n        return 710\n    elif n == 139:\n        return 715\n    elif n == 140:\n        return 720\n    elif n == 141:\n        return 725\n    elif n == 142:\n        return 730\n    elif n == 143:\n        return 735\n    elif n == 144:\n        return 740\n    elif n == 145:\n        return 745\n    elif n == 146:\n        return 750\n    elif n == 147:\n        return 755\n    elif n == 148:\n        return 760\n    elif n == 149:\n        return 765\n    elif n == 150:\n        return 770\n    elif n == 151:\n        return 775\n    elif n == 152:\n        return 780\n    elif n == 153:\n        return 785\n    elif n == 154:\n        return 790\n    elif n == 155:\n        return 795\n    elif n == 156:\n        return 800\n    elif n == 157:\n        return 805\n    elif n == 158:\n        return 820\n    elif n == 159:\n        return 825\n    elif n == 160:\n        return 830\n    elif n == 161:\n        return 835\n    elif n == 162:\n        return 840\n    elif n == 163:\n        return 845\n    elif n == 164"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    k = int(n**0.5)\n    for i in range(k+1):\n        if (n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if(n == 0): \n        return 0\n    elif(n < 0): \n        return None\n    if(n == 1): \n        return 1\n    else: \n        return is_octagonal(n - 1) + is_octagonal(n - 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # Check base cases\n    if n < 0:\n        print('n must be non-negative')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n//2) + (n-1)//2\n    elif n % 2 == 1:\n        return (n//2) + (n+1)//2\n    else:\n        return (n//2) + (n-1)//2 + 1\n    \nprint('nth octagonal number:', is_octagonal(9))"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    i = 1\n    while (i * i) <= n:\n        if (n % (i * i)) == 0:\n            result += 1\n            n //= (i * i)\n        else:\n            i += 1\n    return result\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0 \n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = n // 2\n    while a < b:\n        a = a + a\n        b = b + b\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_octagonal(n): \n        lst = []\n        for i in range(1, n+1):\n            lst.append(i)\n        if (n - 2) % 4 == 0:\n            return True\n        else:\n            return False\n    return is_octagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sqrt_n = n**0.5\n    sqr_n = n**1.0/sqrt_n\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    if not s[0].isdigit():\n        return 0\n    # Traverse the string as a single string.\n    # TODO: Use a set to track the occurances of each character.\n    # Use 'a' as a prefix to determine if any prefix is a valid substring.\n    # Count the number of substrings of the given length\n    # TODO: use a set to keep track of the occurances\n    # return num\n    result = 0\n    for i in range(1, len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].isdigit():\n                result += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # T1: Counter\n    # T2: O(n^2)\n    # T3: O(n)\n    '''\n    n = len(s)\n    # initialize\n    # subarray dp[i] = count[i] = 0\n    # base case\n    dp = [0 for i in range(n)]\n    # dynamic programming\n    # T1: O(n)\n    # T2: O(n)\n    # T3: O(n)\n    '''\n    # T1:\n    subarray_dic = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            subarray_dic[s[i:j+1]] = subarray_dic.get(s[i:j+1], 0) + 1\n    \n    for key in subarray_dic:\n        if subarray_dic[key] == len(s):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    d=set(s)\n    max=0\n    for i in range(1,len(s)):\n        j=i\n        c=0\n        while j>=0:\n            if s[j]==s[j-1]:\n                c+=1\n            else:\n                break\n            j-=1\n        if c>max:\n            max=c\n    return max\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = dict()\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]]+=1\n        if d[s[i]]==1:\n            d[s[i]]-=1\n            if d[s[i]]==0:\n                d[s[i]]=1\n    return len(d)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_lengths = []\n    sub_diffs = []\n    for char in s:\n        if char == '0':\n            sub_lengths.append(0)\n        else:\n            sub_lengths.append(len(char))\n    for length in sub_lengths:\n        sub_diffs.append(s[:length])\n    count = 0\n    for diff in sub_diffs:\n        count = count + sum([int(x) for x in diff])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = {}\n    substrings['0'] = 0\n    for i in range(len(s)):\n        substrings[s[i]] = substrings.get(s[i], 0) + 1\n    return substrings\ndef is_valid_password(passs):\n    '''\n    Check if the given password is valid.\n    '''\n    if passs == passs[:12] and len(passs) == 26:\n        return True\n    else:\n        return False\ndef check_length(password, min=6):\n    '''\n    Check if the given password is valid.\n    '''\n    password = password.lower()\n    valid_passs = 0\n    for i in range(min, len(password)):\n        if len(password[i]) > 1:\n            valid_passs += 1\n    if valid_passs > 0:\n        return valid_passs\n    else:\n        return -1\ndef check_length_2(password, min=2):\n    '''\n    Check if the given password is valid.\n    '''\n    password = password.lower()\n    valid_passs = 0\n    for i in range(min, len(password)):\n        if len(password[i]) > 1:\n            valid_passs += 1\n    if valid_passs > 0:\n        return valid_passs\n    else:\n        return -1\ndef hash_password(password):\n    '''\n    Hash the given password.\n    '''\n    password = password.lower()\n    password = password.replace('-', '').replace('_', '')\n    return hashlib.sha1(password.encode('utf-8')).hexdigest()\ndef generate_password_list(password, min=6, max=26):\n    '''\n    Generate a list of passwords and their hash passwords.\n    '''\n    pass_list = []\n    for i in range(min, max):\n        pass_list.append(str(hash_password(password + str(i))))\n    return pass_list\ndef parse_password(passs):\n    '''\n    Check if the given password is valid.\n    '''\n    passs = passs.replace('-', '').replace('_', '')\n    valid = True\n    if len(passs) == 26:\n        passs = passs.upper()\n        return valid, passs\n    else:\n        valid = False\n        return valid, passs\ndef generate_password_list_from_file(path, min=6, max=26, sep=''):\n    '''\n    Generate a list of passwords and their hash passwords.\n    '''\n    pass_list = []\n    with open(path) as f:\n        for line in f:\n            passs = line.strip().split(sep)\n            if len(passs) < min or len(passs) > max:\n                continue\n            valid, passs = parse_password(passs)\n            if valid:\n                pass_list.append(passs)\n    return pass_list\ndef count_duplicates(password_list):\n    '''\n    Count the number of duplicate passwords.\n    '''\n    pass_dict = defaultdict(int)\n    for pass_list in password_list:\n        for password in pass_list:\n            pass_dict[password] += 1\n    return list(pass_dict.values())\ndef validate_password(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password) < 6:\n        return False\n    for i in range(len(password)):\n        if password[i] not in pass_list[i]:\n            return False\n    return True\ndef count_number_of_duplicates(pass_list):\n    '''\n    Count the number of duplicate passwords.\n    '''\n    pass_dict = defaultdict(int)\n    for pass_list in pass_list:\n        for password in pass_list:\n            pass_dict[password] += 1\n    return list(pass_dict.values())\ndef validate_password_2(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password) < 2:\n        return False\n    for i in range(len(password)):\n        if password[i] not in pass_list[i]:\n            return False\n    return True\ndef count_number_of_duplicates_2(pass_list):\n    '''\n    Count the number of duplicate passwords.\n    '''\n    pass_dict = defaultdict(int)\n    for pass_list in pass_list:\n        for password in pass_list:\n            if password not in pass_dict[password]:\n                pass_dict[password] += 1\n    return list(pass_dict.values())\ndef check_duplicate(password_list, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password_list) == len(pass_list):\n        return True\n    else:\n        return False\ndef generate_new_pass(password, pass_list):\n    '''\n    Generate a new password.\n    '''\n    new_password = ''\n    for i in range(min(len(password), len(pass_list))):\n        if password[i] in pass_list:\n            new_password += password[i]\n        else:\n            new_password += '-'\n    return new_password\ndef is_valid_password_3(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password) < min(len(pass_list), 5) or len(password) > max(len(pass_list), 6):\n        return False\n    if len(password) == 6:\n        return validate_password_3(password, pass_list)\n    for i in range(len(password)):\n        if password[i] in pass_list:\n            continue\n        else:\n            return False\n    return True\ndef is_valid_password_4(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password) < min(len(pass_list), 5) or len(password) > max(len(pass_list), 6):\n        return False\n    for i in range(len(password)):\n        if password[i] in pass_list:\n            continue\n        else:\n            return False\n    return True\ndef is_valid_password_5(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password) < min(len(pass_list), 5) or len(password) > max(len(pass_list), 6):\n        return False\n    if len(password) == 6:\n        return validate_password_5(password, pass_list)\n    for i in range(len(password)):\n        if password[i] in pass_list:\n            continue\n        else:\n            return False\n    return True\ndef is_valid_password_6(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password) < min(len(pass_list), 5) or len(password) > max(len(pass_list), 6):\n        return False\n    if len(password) == 6:\n        return validate_password_6(password, pass_list)\n    for i in range(len(password)):\n        if password[i] in pass_list:\n            continue\n        else:\n            return False\n    return True\ndef is_valid_password_7(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len(password) < min(len(pass_list), 5) or len(password) > max(len(pass_list), 6):\n        return False\n    if len(password) == 6:\n        return validate_password_7(password, pass_list)\n    for i in range(len(password)):\n        if password[i] in pass_list:\n            continue\n        else:\n            return False\n    return True\ndef is_valid_password_8(password, pass_list):\n    '''\n    Check if the given password is valid.\n    '''\n    if len"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    if len(s)==1:\n        return 1\n    if s[0]==s[1]:\n        return 2 + count_Substrings(s[2:])\n    else:\n        return 1 + count_Substrings(s[:-1])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n        if count == 3:\n            max_len = max(max_len, j-i+1)\n            num_of_substrings += 1\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef count_Substrings_cycle(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef count_Substrings_reverse(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef count_Substrings_reverse_cycle(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef count_Substrings_cycle_reverse(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef count_Substrings_reverse_cycle_reverse(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef count_Substrings_reverse_cycle_reverse_reverse(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef check_contains_substring(s, sub):\n    '''\n    Write a python function to check whether a string contains any substring.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == sub:\n            count += 1\n    if count == len(sub):\n        return True\n    return False\ndef check_contains_substring_reverse(s, sub):\n    '''\n    Write a python function to check whether a string contains any substring.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == sub:\n            count += 1\n    if count == len(sub):\n        return True\n    return False\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_len = 0\n    max_s = \"\"\n    num_of_substrings = 0\n    for i in range(len(s)):\n        count = 0\n        if s[i] == s[i+1]:\n            count += 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n            if count == 3:\n                max_len = max(max_len, j-i+1)\n                num_of_substrings += 1\n            if count == 4:\n                max_s = max(max_s, s[i:j])\n    print(num_of_substrings)\n    print(max_len)\n    print(max_s)\ndef count_Substrings_reverse(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = str(s)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if int(s[i:j]) == int(s[i:j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = len(xs)\n    x = xs[0]\n    for i in range(n):\n        if xs[i] < x:\n            x = xs[i]\n    return xs[n-1]\n    \nprint(smallest_num([10,20,50,60,100])"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs)==0:\n        raise Exception(\"List is empty\")\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Largest number in list\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for element in xs:\n        if element < smallest:\n            smallest = element\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    mins = min(xs)\n    return mins\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = min(xs)\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # write your code here\n    if len(xs) == 1:\n        return xs[0]\n    if xs[0] < xs[1]:\n        return xs[0]\n    return xs[1]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # if there are more than one numbers in the list, then make sure the smallest is the first item.\n    if len(xs)>1:\n        xs.sort()\n        return xs[0]\n    # if there are no numbers in the list, then return the smallest of the list.\n    else:\n        return xs[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_len = len(test_list)\n    left = 0\n    right = 0\n    while left < list_len and right < list_len:\n        left_sum = test_list[left][0] + test_list[left][1]\n        right_sum = test_list[right][0] + test_list[right][1]\n        if left_sum > right_sum:\n            right += 1\n        else:\n            left += 1\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    available_pairs = 0\n    test_list = sorted(test_list)\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                continue\n            if (test_list[i], test_list[j]) in available_pairs:\n                available_pairs += (test_list[i], test_list[j])\n            else:\n                available_pairs += (test_list[i],)\n    return available_pairs\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(item[0] - item[1]) for item in test_list)\n    "
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        result.append(abs(i[0]-i[1]))\n    return max(result)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    i = 0\n    while i < len(test_list):\n        if (test_list[i][0] - test_list[i][1]) > max_diff:\n            max_diff = (test_list[i][0] - test_list[i][1])\n        i = i + 1\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    curr = test_list[0]\n    for i in range(len(test_list)-1):\n        if test_list[i+1] - curr >= max:\n            max = test_list[i+1] - curr\n            curr = test_list[i]\n        else:\n            max = test_list[i+1] - curr\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    current_sum = 0\n    for i in range(0, n - 1):\n        for j in range(i+1, n):\n            sum = test_list[i][0] + test_list[j][0]\n            current_sum += abs(sum - test_list[i][1] - test_list[j][1])\n    return current_sum\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #print(len(test_list),test_list)\n    avg = []\n    for i in range(len(test_list)):\n        avg.append(avg_list[i] + test_list[i][1])\n    avg = list(set(avg))\n    avg.sort()\n    #print(avg)\n    max_diff = max(avg)-avg[0]\n    return max_diff\n    "
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    # Loop through the tuple list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the difference is greater than the max diff\n            if test_list[i] - test_list[j] > max_difference:\n                max_difference = test_list[i] - test_list[j]\n    return max_difference\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # your code here\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sortlist = []\n    for i in range(len(subjectmarks)):\n        sortlist.append(subjectmarks[i][1])\n    sortlist.sort()\n    return sortlist\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sortedmarks=sorted(subjectmarks,key=lambda x:x[1])\n    return sortedmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks=[]\n    subjectmarks=subjectmarks.split(\",\")\n    subjectmarks.sort(key=lambda x:x[1])\n    for marks in subjectmarks:\n        marks.append(marks[1])\n        marks.append(marks[2])\n        marks.append(marks[3])\n        marks.append(marks[4])\n        marks.append(marks[5])\n        marks.append(marks[6])\n        marks.append(marks[7])\n        marks.append(marks[8])\n        marks.append(marks[9])\n        marks.append(marks[10])\n        marks.append(marks[11])\n        marks.append(marks[12])\n        marks.append(marks[13])\n        marks.append(marks[14])\n        marks.append(marks[15])\n        marks.append(marks[16])\n        marks.append(marks[17])\n        marks.append(marks[18])\n        marks.append(marks[19])\n        marks.append(marks[20])\n        marks.append(marks[21])\n        marks.append(marks[22])\n        marks.append(marks[23])\n        marks.append(marks[24])\n        marks.append(marks[25])\n        marks.append(marks[26])\n        marks.append(marks[27])\n        marks.append(marks[28])\n        marks.append(marks[29])\n        marks.append(marks[30])\n        marks.append(marks[31])\n        marks.append(marks[32])\n        marks.append(marks[33])\n        marks.append(marks[34])\n        marks.append(marks[35])\n        marks.append(marks[36])\n        marks.append(marks[37])\n        marks.append(marks[38])\n        marks.append(marks[39])\n        marks.append(marks[40])\n        marks.append(marks[41])\n        marks.append(marks[42])\n        marks.append(marks[43])\n        marks.append(marks[44])\n        marks.append(marks[45])\n        marks.append(marks[46])\n        marks.append(marks[47])\n        marks.append(marks[48])\n        marks.append(marks[49])\n        marks.append(marks[50])\n        marks.append(marks[51])\n        marks.append(marks[52])\n        marks.append(marks[53])\n        marks.append(marks[54])\n        marks.append(marks[55])\n        marks.append(marks[56])\n        marks.append(marks[57])\n        marks.append(marks[58])\n        marks.append(marks[59])\n        marks.append(marks[60])\n        marks.append(marks[61])\n        marks.append(marks[62])\n        marks.append(marks[63])\n        marks.append(marks[64])\n        marks.append(marks[65])\n        marks.append(marks[66])\n        marks.append(marks[67])\n        marks.append(marks[68])\n        marks.append(marks[69])\n        marks.append(marks[70])\n        marks.append(marks[71])\n        marks.append(marks[72])\n        marks.append(marks[73])\n        marks.append(marks[74])\n        marks.append(marks[75])\n        marks.append(marks[76])\n        marks.append(marks[77])\n        marks.append(marks[78])\n        marks.append(marks[79])\n        marks.append(marks[80])\n        marks.append(marks[81])\n        marks.append(marks[82])\n        marks.append(marks[83])\n        marks.append(marks[84])\n        marks.append(marks[85])\n        marks.append(marks[86])\n        marks.append(marks[87])\n        marks.append(marks[88])\n        marks.append(marks[89])\n        marks.append(marks[90])\n        marks.append(marks[91])\n        marks.append(marks[92])\n        marks.append(marks[93])\n        marks.append(marks[94])\n        marks.append(marks[95])\n        marks.append(marks[96])\n        marks.append(marks[97])\n        marks.append(marks[98])\n        marks.append(marks[99])\n        marks.append(marks[100])\n        marks.append(marks[101])\n        marks.append(marks[102])\n        marks.append(marks[103])\n        marks.append(marks[104])\n        marks.append(marks[105])\n        marks.append(marks[106])\n        marks.append(marks[107])\n        marks.append(marks[108])\n        marks.append(marks[109])\n        marks.append(marks[110])\n        marks.append(marks[111])\n        marks.append(marks[112])\n        marks.append(marks[113])\n        marks.append(marks[114])\n        marks.append(marks[115])\n        marks.append(marks[116])\n        marks.append(marks[117])\n        marks.append(marks[118])\n        marks.append(marks[119])\n        marks.append(marks[120])\n        marks.append(marks[121])\n        marks.append(marks[122])\n        marks.append(marks[123])\n        marks.append(marks[124])\n        marks.append(marks[125])\n        marks.append(marks[126])\n        marks.append(marks[127])\n        marks.append(marks[128])\n        marks.append(marks[129])\n        marks.append(marks[130])\n        marks.append(marks[131])\n        marks.append(marks[132])\n        marks.append(marks[133])\n        marks.append(marks[134])\n        marks.append(marks[135])\n        marks.append(marks[136])\n        marks.append(marks[137])\n        marks.append(marks[138])\n        marks.append(marks[139])\n        marks.append(marks[140])\n        marks.append(marks[141])\n        marks.append(marks[142])\n        marks.append(marks[143])\n        marks.append(marks[144])\n        marks.append(marks[145])\n        marks.append(marks[146])\n        marks.append(marks[147])\n        marks.append(marks[148])\n        marks.append(marks[149])\n        marks.append(marks[150])\n        marks.append(marks[151])\n        marks.append(marks[152])\n        marks.append(marks[153])\n        marks.append(marks[154])\n        marks.append(marks[155])\n        marks.append(marks[156])\n        marks.append(marks[157])\n        marks.append(marks[158])\n        marks.append(marks[159])\n        marks.append(marks[160])\n        marks.append(marks[161])\n        marks.append(marks[162])\n        marks.append(marks[163])\n        marks.append(marks[164])\n        marks.append(marks[165])\n        marks.append(marks[166])\n        marks.append(marks[167])\n        marks.append(marks[168])\n        marks.append(marks[169])\n        marks.append(marks[170])\n        marks.append(marks[171])\n        marks.append(marks[172])\n        marks.append(marks[173])\n        marks.append(marks[174])\n        marks.append(marks[175])\n        marks.append(marks[176])\n        marks.append(marks[177])\n        marks.append(marks[178])\n        marks.append(marks[179])\n        marks.append(marks[180])\n        marks.append(marks[181])\n        marks.append(marks[182])\n        marks.append(marks[183])\n        marks.append(marks[184])\n        marks.append(marks[185])\n        marks.append(marks[186])\n        marks.append(marks[187])\n        marks.append(marks[188])\n        marks.append(marks[189])\n        marks.append(marks[190])\n        marks.append(marks[191])\n        marks.append(marks[192])\n        marks.append(marks[193])\n        marks.append(marks[194])\n        marks.append(marks[195])\n        marks.append(marks[196])\n        marks.append(marks[197])"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subject_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Your code here\n    subject_marks.sort(key=lambda x:x[1], reverse=True)\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sortedlist = []\n    for i in range(len(subjectmarks)):\n        sortedlist.append(subjectmarks[i][1])\n    return sorted(sortedlist)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for index, value in enumerate(subjectmarks):\n        subjectmarks[index][1] = float(value[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    data_list_len = len(data_list)\n    total = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # For each element in data_list:\n    #     If its index is even, insert it to another element:\n    #         If its index is odd, subtract one from its index\n    #             e.g. if index is odd, this becomes index - 1\n    #     If its index is odd, repeat the process\n    #         Insert each element to the previous element\n    #             and increment the current element\n    #         Remove the element from the list\n    #             and return the result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    output_list = []\n    for element in data_list:\n        if isinstance(element, list):\n            output_list.extend(recursive_list_sum(element))\n        else:\n            output_list.append(element)\n    return output_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def convert_to_list(data):\n        if isinstance(data, list):\n            return data\n        if isinstance(data, dict):\n            return [convert_to_list(i) for i in data.values()] + [convert_to_list(i) for i in data.keys()]\n        else:\n            return [data]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flatten_list = []\n    if len(data_list) > 0:\n        for el in data_list:\n            if type(el) == list:\n                flatten_list.extend(recursive_list_sum(el))\n            else:\n                flatten_list.append(el)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #Code:\n    if len(data_list) == 0:\n        return []\n    if len(data_list) == 1:\n        return data_list\n    return data_list + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    current_list = []\n    for data in data_list:\n        if isinstance(data,list):\n            current_list = current_list + data\n        else:\n            flattened_list.append(data)\n    return current_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_data(data_list):\n        '''\n        Given a list of lists, flatten it.\n        '''\n        flat_data = []\n        for sublist in data_list:\n            for item in sublist:\n                flat_data.append(item)\n        return flat_data\n    return flatten_data(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_data_list = []\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i>0:\n            pos_count+=1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    l = []\n    for i in list:\n        if i >= 0:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_num = 0\n    for el in list:\n        if el > 0:\n            positive_num += 1\n    return positive_num\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    cnt = 0\n    for num in list:\n        if num > 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return(len(list))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum=0\n    for x in list:\n        if x>0:\n            sum+=1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for num in list:\n        if num >= 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n,0,-1):\n        if bell(i) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=2: return 1\n    \n    if n == 2: return 2\n    \n    if n == 3: return 4\n    \n    if n == 4: return 8\n    \n    return bell_number(n-3) + bell_number(n-2) + bell_number(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize dictionary\n    bells = {}\n    for i in range(n):\n        bells[i] = 1\n    \n    # Filling the dictionary with numbers\n    for i in range(n - 1):\n        bells[i + 1] = bells[i] + bells[i + 1]\n    \n    # Iterating through the dictionary and returning the number of ways\n    # There are 4 possible ways to partition the set of bell numbers\n    for i in range(n):\n        bells[i] = bells[i] % (10 ** 9 + 7)\n    \n    return bells[0]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    return n*bell_number(n-1)+1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [1]\n    for n in range(1, n + 1):\n        ways.append(ways[n-1] + ways[n-1-2*n % n])\n    return ways[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    b = [0]*n\n    b[0] = 1\n    for i in range(1,n):\n        if b[i-1] == 0:\n            b[i] = 1\n        else:\n            b[i] = b[i-1] + b[i-1]\n    return b[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    s = [0] * (n + 1)\n    s[0] = 1\n    for i in range(1, n + 1):\n        s[i] = s[i - 1] + s[i]\n    return s[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def Bell_Number(n,num):\n        if num <= n:\n            if num in numbers:\n                return numbers.count(num)\n            else:\n                return 0\n        else:\n            return Bell_Number(n,num+1) + Bell_Number(n,num-1)\n    numbers = []\n    for i in range(1,100):\n        numbers.append(i)\n    return Bell_Number(n,n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n > 3:\n        return bell_number(n-1) + bell_number(n-3)\n    \ndef f(x):\n    # get the value of x and return the index of x\n    return x.index(min(x))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1: return 1\n    elif n==2: return 1\n    elif n==3: return 2\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] > A[1]:\n        return True\n    else:\n        return False\ndef count_siblings(s, t):\n    '''\n    Write a function that takes a list as a parameter and return the \n    number of indices where the first index of s is 0 and the last index\n    of t is 1.\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Initializing 1 to be non zero.\n    a = 1\n    #While loop to go through the array until the last element is equal to zero.\n    while a<=len(A):\n        #If the last element of the array is zero.\n        if A[a-1] == 0:\n            #If the current element is non zero, then the current element should be a positive number.\n            if A[a-2] >= 0:\n                #Check the positive numbers.\n                if A[a-3] >= 0:\n                    #Then the element is not greater than the previous two elements.\n                    if A[a-2] <= A[a-3]:\n                        #Return False.\n                        return False\n            else:\n                #Return False.\n                return False\n        #Increment the current element.\n        a = a + 1\n    #If the array is not monotonic.\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def monotonic(A):\n        # In python, we use\n        # if A[0] == A[1] and A[1] == A[2] and A[0] == A[2]:\n        # for N elements, if the first element is not equal to the second element, then it is not a monotonic array\n        # if A[0] == A[1] and A[1] == A[2] and A[0]!= A[2]:\n        # return True\n        # else:\n        # return False\n        # for N elements, if the first element is equal to the second element, then it is not a monotonic array\n        if A[0] == A[1] and A[1] == A[2] and A[0]!= A[2]:\n            return True\n        elif A[0] == A[1] and A[1] == A[2]:\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) >= 2:\n        if A[0] >= A[1]:\n            return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=1: \n        return True\n    for i in range(0,len(A)): \n        if A[i]!=A[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    m = len(A)\n    \n    if(m < 2): \n        return True\n    else: \n        for i in range(0, m-1): \n            if (A[i] > A[i+1]): \n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for j in range(len(A) - 1):\n        if A[j] < A[j + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    x = 0\n    y = 0\n    n = len(A)\n    # check for list in array A\n    for i in range(n):\n        x = A[i]\n        for j in range(i + 1, n):\n            y = A[j]\n            if x > y:\n                return False\n            elif x < y:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    \n    for i in range(len(A) - 1): \n        if A[i] > A[i + 1]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # your code here\n    flag = True\n    if len(A) == 1:\n        return True\n    else:\n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                flag = False\n            if A[i] < A[i + 1]:\n                flag = False\n            if A[i] < A[i + 1] and A[i] > A[i + 1]:\n                flag = False\n    return flag\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)<len(s):\n        return False\n    \n    # if s is empty\n    if s==[]:\n        return True\n    \n    # iterate through the elements in the list\n    for i in range(0, len(s)):\n        # check if the element in the current index and sub list in the list is same\n        if l[i]==s[i]:\n            # remove that element from the list\n            l.pop(i)\n            # if the list is not empty\n            if len(l)==0:\n                return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    result = True\n    for e in s:\n        if e not in l:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if(l[i] in s):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return (len(l) == len(s)) and (l[0:len(s)] == s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # TODO: Replace this with your code\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # write your code here\n    for i in l:\n        if i in s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = []\n    for i in l:\n        for j in s:\n            if i == j:\n                sublist.append(i)\n    return len(sublist) == 0\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if s in l[:i] or s in l[i+1:]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    for i in s:\n        if i in l:\n            l.remove(i)\n        else:\n            return False\n    return True\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i:i+len(l)] in l:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    a = []\n    for i in range(len(Input)):\n        a.append((Input[i][0], Input[i][1]))\n    a.sort()\n    \n    if(len(a) == len(set(a))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def is_equal_tuple(tup1, tup2):\n        '''\n        This function is called by find_equal_tuple function.\n        '''\n        if len(tup1) == len(tup2) and len(tup1)!= 0:\n            return True\n        else:\n            return False\n    equal_tuple = []\n    for i in range(len(Input)):\n        if is_equal_tuple(Input[i], Input[i+1]):\n            equal_tuple.append(Input[i])\n        else:\n            return False\n    return equal_tuple\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for element in Input:\n        if len(element)!= len(set(element)):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(i[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if Input is None or len(Input) == 0:\n        return None\n    for i in range(len(Input)):\n        for j in range(i, len(Input)):\n            if Input[i]!= Input[j]:\n                break\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        for i in range(len(Input)):\n            if len(Input[i])!= len(set(Input[i])):\n                return False\n            else:\n                return True\n    except Exception as e:\n        print(\"Error:\",e)\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])==len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: Start with a random number of elements to sort\n    for i in range(len(nums)):\n        # Step 2:\n        # For each element, choose the smallest value among all the values\n        # Smallest_element = Minimum element value\n        # smallest_index = Minimum element index\n        # Let this index be the position in the sorted list\n        smallest_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[smallest_index]:\n                smallest_index = j\n        # Swap the smallest element and the sorted element\n        temp = nums[i]\n        nums[i] = nums[smallest_index]\n        nums[smallest_index] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        for j in range(length-i-1):\n            if nums[j] < nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        for j in range(length-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = i\n        for k in range(len(nums) - i - 1):\n            if nums[k] > nums[k + 1]:\n                j = k\n        if nums[j] > nums[i]:\n            nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # start with the first element as the first element\n    # and move through the remaining elements\n    for i in range(len(nums)):\n        # find the index of the current element\n        # e.g. if the index is 2, it will be 2\n        # and we want to move through the list\n        # from 2 to the end\n        j = i\n        \n        # while j is not at the end\n        while j < len(nums):\n            # if the current element is greater\n            # than the element at the end\n            if nums[j] > nums[i]:\n                # swap the current element\n                # with the element at the end\n                nums[i], nums[j] = nums[j], nums[i]\n                # increment the index\n                j += 1\n            # if the element at the end\n            # is less than the current\n            # element, then we have reached\n            # a new position\n            else:\n                # decrement the index\n                j -= 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n    "
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        for j in range(length - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    gap = nums[len(nums)//2]\n    left = nums[:len(nums)//2]\n    right = nums[len(nums)//2:]\n    sorted_left = comb_sort(left)\n    sorted_right = comb_sort(right)\n    index = 0\n    for i in range(len(nums)):\n        if sorted_left[i] > gap:\n            for j in range(index, len(nums)):\n                if sorted_right[j] > gap:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    index += 1\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square1 = n**2\n    square2 = n**2 + 1\n    if square1 < square2:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(n)\n    if (a % 2!= 0):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def check(x):\n        return (x-x)==0\n    def Square(x):\n        return (x**2)\n    def Check():\n        for i in range(0,n+1):\n            if Square(i)==Check():\n                return i\n    for j in range(n,0,-1):\n        if Check()==Check():\n            print(Check())\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n - 1 - (n % 2)\n        \ndef get_key(dict, value):\n    '''\n    Given a dictionary and a value, returns the key associated to that value.\n    '''\n    for key, value in dict.items():\n        if value == value:\n            return key\n    return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n==0): \n        return \"Not Square\"\n    elif(n%2==0): \n        return dif_Square(n//2) + \" square\"\n    else:\n        return dif_Square(n//2)+ \" square\"\n    "
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n[0]\n    y = n[1]\n    if (x == y): \n        return 0\n    if(x>y):\n        x,y=y,x\n    if(x+y<n[0]*n[1]):\n        return -1\n    return 1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s_1 = str(n)\n    s_2 = str(n+1)\n    if(len(s_1)!= len(s_2)):\n        return False\n    for i in range(len(s_1)):\n        if (s_1[i]!= s_2[i]):\n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1: \n        return n\n    elif n == 2: \n        return n - 1\n    else: \n        return dif_Square(n-1) + dif_Square(n-2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Variables\n    square_size = 2\n    s1 = 0\n    s2 = 0\n    # Loop\n    for i in range(1, n):\n        square_size += 2\n        s1 += square_size\n        s2 += square_size\n        s1 %= n\n        s2 %= n\n        if s1 == s2:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        for j in range(i+1, len(colors)):\n            if colors[i]!= colors[j]:\n                return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        for j in range(0, len(colors)):\n            if patterns[i] == colors[j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    if len(colors)!= len(patterns):\n        return False\n    for pattern in patterns:\n        if pattern_index == len(colors)-1:\n            return True\n        if patterns[pattern_index] == colors[pattern_index]:\n            pattern_index += 1\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors == patterns:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return len(colors) == len(patterns)\n    \ndef get_number_of_patterns_with_same_color(patterns):\n    '''\n    Write a function to get the number of patterns with the same color.\n    '''\n    return len(patterns[patterns==0])\n    \ndef get_patterns(input_file):\n    '''\n    Write a function to get the pattern array from an input file.\n    '''\n    with open(input_file) as f:\n        patterns = [int(line) for line in f]\n    \n    return patterns\n    \ndef get_pattern(patterns):\n    '''\n    Write a function to get a pattern from an input file.\n    '''\n    return patterns[int(input()) - 1]\n    \ndef get_pattern_indices(patterns):\n    '''\n    Write a function to get a pattern indices from an input file.\n    '''\n    return [i - 1 for i in range(len(patterns)) if patterns[i] == 0]\n    \ndef get_number_of_patterns(patterns):\n    '''\n    Write a function to get the number of patterns from an input file.\n    '''\n    return len(patterns)\n    \ndef get_number_of_patterns_with_same_color(patterns):\n    '''\n    Write a function to get the number of patterns with the same color.\n    '''\n    return get_number_of_patterns_with_same_color(get_pattern(patterns))\n    \ndef get_number_of_patterns_with_different_color(patterns):\n    '''\n    Write a function to get the number of patterns with the different color.\n    '''\n    return len(get_pattern(patterns))\n    \ndef get_pattern_with_different_color(patterns):\n    '''\n    Write a function to get a pattern with the different color.\n    '''\n    return get_pattern(patterns)[patterns == 0]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(colors[i] == colors[j] for i in range(len(colors)) for j in range(i + 1, len(colors)))\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    c1 = 0\n    c2 = 0\n    # iterate through the patterns\n    for index, pattern in enumerate(patterns):\n        # if the pattern doesn't match color then\n        if(pattern!= colors[index]):\n            # if the first color is more then one\n            if(pattern[0] >= colors[index]):\n                # if the second color is more then one\n                if(pattern[1] >= colors[index]):\n                    # if the first pattern is larger then second\n                    if(pattern[0] > pattern[1]):\n                        # if the colors are the same\n                        if(pattern[0] == colors[index]):\n                            # if the color is less than the second one\n                            if(pattern[1] < colors[index]):\n                                # if the color is more then one\n                                if(pattern[1] > colors[index]):\n                                    # if the color is more then one\n                                    if(pattern[1] > colors[index]):\n                                        # if the first color is more then one\n                                        if(pattern[0] > colors[index]):\n                                            # if the first pattern is larger then second\n                                            if(pattern[0] > colors[index]):\n                                                # if the first pattern is larger then color\n                                                if(pattern[1] > colors[index]):\n                                                    # if the color is more than one\n                                                    if(pattern[0] > colors[index]):\n                                                        # if the pattern is larger than second\n                                                        if(pattern[1] > colors[index]):\n                                                            # if the pattern is more than one\n                                                            if(pattern[0] > colors[index]):\n                                                                # if the pattern is more than one\n                                                                if(pattern[1] > colors[index]):\n                                                                    # if the pattern is less than first\n                                                                    if(pattern[1] < colors[index]):\n                                                                    # if the pattern is less than second\n                                                                    if(pattern[0] > colors[index]):\n                                                                        # if the pattern is less than color\n                                                                        if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                        if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                        if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                        if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                        if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                        if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                        if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[1] < colors[index]):\n                                                                            # if the pattern is less than one\n                                                                            if(pattern[0] < colors[index]):\n                                                                            # if th"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Start with empty list\n    list_of_colors = []\n    # Add each color in colors to list\n    for color in colors:\n        list_of_colors.append(color)\n    # Add each pattern in patterns to list\n    for pattern in patterns:\n        list_of_colors.append(pattern)\n    # Compare each color to each pattern\n    for color in list_of_colors:\n        if color not in list_of_colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    counter = 0\n    \n    for pattern in patterns:\n        \n        if is_same(pattern,colors):\n            counter += 1\n            \n    return counter == len(colors)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #this function checks whether all the patterns in the patterns array are the same as the colors array.\n    patterns_first = [0 for i in range(len(colors))]\n    patterns_last = [0 for i in range(len(colors))]\n    for i in range(len(patterns)):\n        patterns_first[patterns[i][0]] = 1\n        patterns_last[patterns[i][1]] = 1\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 1:\n        return [tuple(t) for t in test_list]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][1] % K == 0:\n            print(i)\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for el in test_list:\n        if el[1] % K == 0:\n            res.append(el)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    res = []\n    for tup in test_list:\n        # print(tup[0])\n        # print(tup[1])\n        if tup[0] % K == 0 and tup[1] % K == 0:\n            res.append(tup)\n    return res\n    \n    \n    \n    \n    \ndef main():\n    '''\n    Write a program to print a dictionary of all tuples, with all elements divisible by K, and elements which are common across all the dictionaries.\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # dict1 = {1:2, 4:5, 6:8}\n    # dict2 = {4:9, 8:10}\n    # dict3 = {3:1, 9:4, 5:3}\n    \n    # print(dict1)\n    # print(dict2)\n    # print(dict3)\n    # print(find_tuples(dict1,2))\n    # print(find_tuples(dict1,3))\n    # print(find_tuples(dict2,6))\n    # print(find_tuples(dict2,8))\n    # print(find_tuples(dict3,3))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 2\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,2,3,4)\n    # b = (5,6,7,8)\n    # c = (10,11,12,13)\n    \n    # print(a)\n    # print(b)\n    # print(c)\n    # print(len(test_list))\n    # print(type(test_list))\n    # print(find_tuples(test_list,2))\n    # print(find_tuples(test_list,3))\n    # print(find_tuples(test_list,4))\n    # print(find_tuples(test_list,5))\n    # print(find_tuples(test_list,10))\n    # print(find_tuples(test_list,11))\n    # print(find_tuples(test_list,12))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 3\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = ()\n    # print(a)\n    # print(type(a))\n    \n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = []\n    # print(a)\n    # print(type(a))\n    \n    # print(test_list)\n    # print(type(test_list))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 4\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = ()\n    # print(a)\n    # print(type(a))\n    \n    # print(test_list)\n    # print(type(test_list))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 5\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,)\n    # print(a)\n    # print(type(a))\n    \n    # print(test_list)\n    # print(type(test_list))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 6\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,2)\n    # print(a)\n    # print(type(a))\n    \n    # print(test_list)\n    # print(type(test_list))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 7\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = ()\n    # print(a)\n    # print(type(a))\n    \n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,)\n    # print(a)\n    # print(type(a))\n    \n    # print(test_list)\n    # print(type(test_list))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 8\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,2,3,4)\n    # b = (5,6,7,8)\n    # c = (10,11,12,13)\n    \n    # print(a)\n    # print(b)\n    # print(c)\n    # print(len(test_list))\n    # print(type(test_list))\n    # print(find_tuples(test_list,3))\n    # print(find_tuples(test_list,7))\n    # print(find_tuples(test_list,9))\n    # print(find_tuples(test_list,11))\n    # print(find_tuples(test_list,12))\n    # print(find_tuples(test_list,13))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 9\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,2,3,4)\n    # b = (5,6,7,8)\n    # c = (10,11,12,13)\n    \n    # print(a)\n    # print(b)\n    # print(c)\n    # print(len(test_list))\n    # print(type(test_list))\n    # print(find_tuples(test_list,5))\n    # print(find_tuples(test_list,12))\n    # print(find_tuples(test_list,13))\n    # print(find_tuples(test_list,14))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 10\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,2,3,4,5)\n    # b = (6,7,8,9,10)\n    # c = (11,12,13,14,15)\n    \n    # print(a)\n    # print(b)\n    # print(c)\n    # print(len(test_list))\n    # print(type(test_list))\n    # print(find_tuples(test_list,3))\n    # print(find_tuples(test_list,4))\n    # print(find_tuples(test_list,5))\n    # print(find_tuples(test_list,6))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 11\n    '''\n    # print(test_list)\n    # print(type(test_list))\n    \n    # a = (1,2,3,4,5,6)\n    # b = (7,8,9,10,11,12)\n    # c = (13,14,15,16,17,18)\n    \n    # print(a)\n    # print(b)\n    # print(c)\n    # print(len(test_list))\n    # print(type(test_list))\n    # print(find_tuples(test_list,9))\n    # print(find_tuples(test_list,14))\n    # print(find_tuples(test_list,15))\n    # print(find_tuples(test_list,16))\n    \n    '''\n    Tuple assignment problem - 1 - Tuple assignment problem - 12\n    '''\n    # print(test_list)\n    # prin"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        for j in range(0,len(i),K):\n            if sum(i[j:j+K]) % K == 0:\n                return i[j:j+K]\n    return []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i][1]%test_list[j][1]==0):\n                temp_tuples.append((test_list[i][0], test_list[j][0]))\n    temp_tuples.sort()\n    #print(temp_tuples)\n    return temp_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for element in test_list:\n        if tuple(sorted(element)) not in result:\n            result.append(tuple(sorted(element)))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    counter = 0\n    for i in test_list:\n        if i[0] % K == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for item in test_list:\n        if item % K == 0:\n            tuple_list.append(item)\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                tuples.append([i,j])\n    return tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    for i in range(2, n+1): \n        if (n % i == 0): \n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 10) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0 \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n // 11\n    if (x % 2) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for num in range(1, n + 1):\n        if num % 11 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    div_11 = 0\n    for x in range(1,n):\n        if n % x == 0:\n            div_11 += 1\n    if div_11 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # loop over the string\n    for i in range(0, len(s)): \n        # find the length of the word\n        word_len = len(s[i])\n        # check whether the word is odd or even\n        if word_len % 2 == 0: \n            # if even length, return false\n            return False\n        else: \n            # if odd length, return true\n            return True\n    # if we reach here, the string is a palindrome\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"It's an odd word\"\n    else:\n        return \"It's an even word\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        if len(words[i]) % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.lower()\n    if len(word) % 2!= 0:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return \"The word is odd\"\n    else: \n        return \"The word is even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return 'Odd'\n    else: \n        return 'Even'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n1 = n\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    divider = 1\n    while divider <= n:\n        divider +=1\n        if divider % 3 == 0:\n            divider = divider * 0.5\n        if divider % 3 == 1:\n            divider = divider * 0.75\n        if divider % 3 == 2:\n            divider = divider * 0.9\n    return divider\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n > 10000000:\n        return\n    for i in range(n, 1000000):\n        if i % (n + 1) == 0:\n            print(i)\n            return\n    return None\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    total_n = 0\n    for i in range(1, n+1): \n        total_n += i \n    return total_n \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1,n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 1\n    while n > num:\n        num += 1\n        n -= num\n    return n + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = 1\n    while i <= n:\n        j = i\n        while j <= n:\n            if j == n:\n                break\n            j = j + 1\n        else:\n            print(i)\n        i = i + 1\n    return\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    total = 1\n    for i in range(1, n + 1):\n        total = total * (i + 1)\n    return total\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1 or n==3 or n==5 or n==7:\n        return n\n    elif n==4 or n==6 or n==8 or n==9:\n        return n\n    elif n==2:\n        return n\n    else:\n        a,b=n,n+1\n        while True:\n            if a==b:\n                return a\n            else:\n                a,b=b,a+b\n                \n    \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num_tetra = []\n    \n    for i in range(n):\n        num_tetra.append(1 + sum([int(x) for x in str(i+1)]))\n    \n    return num_tetra[n]\n    \n    \n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*math.pow(math.sin(math.radians(90)),2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4 * math.pi * (r ** 3)) / 3\n    print(\"Volume of a sphere with radius\", r, \"is\", volume)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = 4 * pi * math.pow(r,2)\n    print('The volume is: ', volume)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Initialize volume\n    volume = (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 1.0/3.14 * math.pi * r * r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 3.14159*r**3\n    volume = c*r*r*r*r\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    x = 0\n    for i in range(r):\n        for j in range(i + 1):\n            x += 2 * (j + 1) * math.pi * (i + 1)\n    return x\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr_ascii = []\n    #converting the string to ascii string and adding each character as string to a list.\n    for i in range(len(strr)):\n        strr_ascii.append(chr(ord(strr[i])))\n    #combining the ascii string into a string and returning the string.\n    char_ascii = \"\".join(strr_ascii)\n    return char_ascii\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total=0\n    for char in strr:\n        total+=ord(char)\n    return total%26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in range(len(strr)):\n        if ord(strr[i]) % ord('a') == ord('A'):\n            return strr[i]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for i in strr:\n        lst.append(ord(i))\n    return sum(lst) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # TODO\n    # use the function in get_Char.py and test it!\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) % 26\n    \n    #time complexity: O(n)\n    #space complexity: O(1)\n    #feel free to add your own complexity analysis\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    return chr(ord(strr[0])%26+ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_string = \"\"\n    for i in strr:\n        if i.isalpha():\n            char_string += chr(int(i) % 26 + ord('a'))\n    return char_string\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = list(strr)\n    for ch in char_list:\n        if ord(ch) %26 == 0:\n            char_list.remove(ch)\n            break\n    return \"\".join(char_list)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    nums = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100','101','102','103','104','105','106','107','108','109','110','111','112','113','114','115','116','117','118','119','120','121','122','123','124','125','126','127','128','129','130','131','132','133','134','135','136','137','138','139','140','141','142','143','144','145','146','147','148','149','150','151','152','153','154','155','156','157','158','159','160','161','162','163','164','165','166','167','168','169','170','171','172','173','174','175','176','177','178','179','180','181','182','183','184','185','186','187','188','189','190','191','192','193','194','195','196','197','198','199','200','201','202','203','204','205','206','207','208','209','210','211','212','213','214','215','216','217','218','219','220','221','222','223','224','225','226','227','228','229','230','231','232','233','234','235','236','237','238','239','240','241','242','243','244','245','246','247','248','249','250','251','252','253','254','255','256','257','258','259','260','261','262','263','264','265','266','267','268','269','270','271','272','273','274','275','276','277','278','279','280','281','282','283','284','285','286','287','288','289','290','291','292','293','294','295','296','297','298','299','300','301','302','303','304','305','306','307','308','309','310','311','312','313','314','315','316','317','318','319','320','321','322','323','324','325','326','327','328','329','330','331','332','333','334','335','336','337','338','339','340','341','342','343','344','345','346','347','348','349','350','351','352','353','354','355','356','357','358','359','360','361','362','363','364','365','366','367','368','369','370','371','372','373','374','375','376','377','378','379','380','381','382','383','384','385','386','387','388','389','390','391','392','393','394','395','396','397','398','399','400','401','402','403','404','405','406','407','408','409','410','411','412','413','414','415','416','417','418','419','420','421','422','423','424','425','426','427','428','429','430','431','432','433','434','435','436','437','438','439','440','441','442','443','444','445','446','447','448','449','450','451','452','453','454','455','456','457','458','459','460','461','462','463','464','465','466','467','468','469','470','471','472','473','474','475','476','477','478','479','480','481','482','483','484','485','486','487','488','489','490','491','492','493','494','495','496','497','498','499','500','501','502','503','504','505','506','507','508','509','510','511','512','513','514','515','516','517','518','519','520','521','522','523','524','525','526','527','528','529','530','531','532','533','534','535','536','537','538','539','540','541','542','543','544','545','546','547','548','549','550','551','552','553','554','555','556','557','558','559','560','561','562','563','564','565','566','567','568','569','570','571','572','573','574','575','576','577','578','579','580','581','582','583','584','585','586','587','588','589','590','591','592','593','594','595','596','597','598','599','600','601','602','603','604','605','606','607','608','609','610','611','612','613','614','615','616','617','618','619','620','621','622','623','624','625','626','627','628','629','630','631','632','633','634','635','636','637','638','639','640','641','642','643','644','645','646','647','648','649','650','651','652','653','654','655','656','657','658','659','660','661','662','663','664','665','666','667','668','669','670','671','672','673','674','675','676','677','678','679','680','681','682','683','684','685','686','687','688','689','690','691','692','693','694','695','696','697','698','699','700','701','702','703','704','705','706','707','708','709','710','711','712','713','714','715','716','717','718','719','720','721','722','723','724','725','726','727','728','729','730','731','732','733','734','735','736','737','738','739','740','741','742','743','744','745','746','747','748','749','750','751','752','753','754','755','756','757','758','759','760','761','762','763','764','765','766','767','768','769','770','771','772','773','774','775','776','777','778','779','780','781','782','783','784','785','786','787','788','789','790','791','792','793','794','795','796','797','798','799','800','801','802','803','804','805','806','807','808','809','810','811','812','813','814','815','816','817','818','819','820','821','822','823','824','825','826','827','828','829','830','831','832','833','834','835','836','837','838','839','840','841','842','843','844','845','846','847','848','849','850','851','852','853','854','855','856','857','858','859','860','861','862','863','864','865','866','867','868','869','870','871','872','873','874','875','876','877','878','879','880','881','882','883','884','885','886','887','888','889','890','891','892','893','894','895','896','897','898','899','900','901','902','903','904','905','906','907','908','909','910','911','912','913','914','915','916','917','918','919','920','921','922','923','924','925','926','927','92"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        return \n    elif n == 1: \n        return 1\n    else: \n        return sequence(n - 1) + sequence(n - 2) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = []\n    i = 0\n    while i < n: \n        number = 0\n        for j in range(0, i + 1): \n            number = number * 10 + (input().split(\" \")[0]) \n        i = i + 1\n        numbers.append(number) \n    return numbers\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    else: return 1+sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    while b <= n:\n        c = a + b\n        if c == n:\n            return c\n        a = b\n        b = c + b\n    return \"No matches found\"\nprint(sequence(5)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3) + sequence(n - 4)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 3\n    elif n == 4: \n        return 4\n    else: \n        return 4 * n + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * sequence(n-1)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (3.14*r*r)*math.pi\n    print('The surface area of a sphere is:', area)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Your code here\n    return 3.14*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 3.14*(r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159\n    area = 0.5 * pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.141592653589793\n    s = ((r**2)*pi)/4\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #s = (4/3)*math.pi*(r**3)\n    s = (4/3)*math.pi*(r**3)*(math.sin(2*math.pi*r))\n    #print(s)\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*(math.pi)*r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here\n    S = 3.1415 * r * r\n    return S\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    # Write your code here\n    V = 4/3 * math.pi * (r**3)\n    return V\ndef surfacearea_rectangle(length, width):\n    '''\n    Write a function that returns the surface area of a rectangle.\n    '''\n    # Write your code here\n    S = (length*width)\n    return S\ndef volume_rectangle(length, width):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    # Write your code here\n    V = length * width\n    return V\ndef surfacearea_circle(r):\n    '''\n    Write a function that returns the surface area of a circle.\n    '''\n    # Write your code here\n    S = math.pi * (r ** 2)\n    return S\ndef volume_circle(r):\n    '''\n    Write a function that returns the volume of a circle.\n    '''\n    # Write your code here\n    V = 3.1415 * (math.pi * (r ** 2))\n    return V\ndef surfacearea_triangle(length, width):\n    '''\n    Write a function that returns the surface area of a triangle.\n    '''\n    # Write your code here\n    S = (length * width) / 2\n    return S\ndef volume_triangle(length, width):\n    '''\n    Write a function that returns the volume of a triangle.\n    '''\n    # Write your code here\n    V = math.sqrt(length * width)\n    return V\ndef area_rectangle(length, width):\n    '''\n    Write a function that returns the surface area of a rectangle.\n    '''\n    # Write your code here\n    area = length * width\n    return area\ndef volume_rectangle(length, width):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    # Write your code here\n    area = length * width * math.pi\n    return area\ndef area_circle(r):\n    '''\n    Write a function that returns the surface area of a circle.\n    '''\n    # Write your code here\n    area = (math.pi * (r ** 2))\n    return area\ndef volume_circle(r):\n    '''\n    Write a function that returns the volume of a circle.\n    '''\n    # Write your code here\n    area = math.pi * (r ** 2)\n    return area\ndef area_triangle(length, width):\n    '''\n    Write a function that returns the surface area of a triangle.\n    '''\n    # Write your code here\n    area = (math.sqrt(length * width) / 2)\n    return area\ndef volume_triangle(length, width):\n    '''\n    Write a function that returns the volume of a triangle.\n    '''\n    # Write your code here\n    area = math.sqrt(length * width)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here\n    return (4/3)*math.pi*(r**3)*r\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 12\n    elif n == 7:\n        return 14\n    else:\n        return 15\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n < 6:\n        print(\"You must enter a number greater than 0\")\n        return\n    \n    elif n == 6:\n        print(\"The number is\", n)\n    else:\n        half = int(n/6)\n        if half == 1:\n            print(\"The number is\", n)\n        else:\n            print(\"The number is\", n, half)\n        \n        # n = n - half\n        centered_hexagonal_number(n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*n+n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    res = []\n    for i in range(1, n+1):\n        if i == n:\n            continue\n        elif i % 6 == 0:\n            res.append(i)\n        elif i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i+1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 1:\n        print('Enter number greater than 1')\n    else:\n        return n * (n + 1) // 2\n        \nprint(centered_hexagonal_number(5))\nprint(centered_hexagonal_number(6))\nprint(centered_hexagonal_number(7))\nprint(centered_hexagonal_number(8))\nprint(centered_hexagonal_number(9))\nprint(centered_hexagonal_number(10))\nprint(centered_hexagonal_number(11))\nprint(centered_hexagonal_number(12))\nprint(centered_hexagonal_number(13))\nprint(centered_hexagonal_number(14))\nprint(centered_hexagonal_number(15))\nprint(centered_hexagonal_number(16))\nprint(centered_hexagonal_number(17))\nprint(centered_hexagonal_number(18))\nprint(centered_hexagonal_number(19))\nprint(centered_hexagonal_number(20))\nprint(centered_hexagonal_number(21))\nprint(centered_hexagonal_number(22))\nprint(centered_hexagonal_number(23))\nprint(centered_hexagonal_number(24))\nprint(centered_hexagonal_number(25))\nprint(centered_hexagonal_number(26))\nprint(centered_hexagonal_number(27))\nprint(centered_hexagonal_number(28))\nprint(centered_hexagonal_number(29))\nprint(centered_hexagonal_number(30))\nprint(centered_hexagonal_number(31))\nprint(centered_hexagonal_number(32))\nprint(centered_hexagonal_number(33))\nprint(centered_hexagonal_number(34))\nprint(centered_hexagonal_number(35))\nprint(centered_hexagonal_number(36))\nprint(centered_hexagonal_number(37))\nprint(centered_hexagonal_number(38))\nprint(centered_hexagonal_number(39))\nprint(centered_hexagonal_number(40))\nprint(centered_hexagonal_number(41))\nprint(centered_hexagonal_number(42))\nprint(centered_hexagonal_number(43))\nprint(centered_hexagonal_number(44))\nprint(centered_hexagonal_number(45))\nprint(centered_hexagonal_number(46))\nprint(centered_hexagonal_number(47))\nprint(centered_hexagonal_number(48))\nprint(centered_hexagonal_number(49))\nprint(centered_hexagonal_number(50))\nprint(centered_hexagonal_number(51))\nprint(centered_hexagonal_number(52))\nprint(centered_hexagonal_number(53))\nprint(centered_hexagonal_number(54))\nprint(centered_hexagonal_number(55))\nprint(centered_hexagonal_number(56))\nprint(centered_hexagonal_number(57))\nprint(centered_hexagonal_number(58))\nprint(centered_hexagonal_number(59))\nprint(centered_hexagonal_number(60))\nprint(centered_hexagonal_number(61))\nprint(centered_hexagonal_number(62))\nprint(centered_hexagonal_number(63))\nprint(centered_hexagonal_number(64))\nprint(centered_hexagonal_number(65))\nprint(centered_hexagonal_number(66))\nprint(centered_hexagonal_number(67))\nprint(centered_hexagonal_number(68))\nprint(centered_hexagonal_number(69))\nprint(centered_hexagonal_number(70))\nprint(centered_hexagonal_number(71))\nprint(centered_hexagonal_number(72))\nprint(centered_hexagonal_number(73))\nprint(centered_hexagonal_number(74))\nprint(centered_hexagonal_number(75))\nprint(centered_hexagonal_number(76))\nprint(centered_hexagonal_number(77))\nprint(centered_hexagonal_number(78))\nprint(centered_hexagonal_number(79))\nprint(centered_hexagonal_number(80))\nprint(centered_hexagonal_number(81))\nprint(centered_hexagonal_number(82))\nprint(centered_hexagonal_number(83))\nprint(centered_hexagonal_number(84))\nprint(centered_hexagonal_number(85))\nprint(centered_hexagonal_number(86))\nprint(centered_hexagonal_number(87))\nprint(centered_hexagonal_number(88))\nprint(centered_hexagonal_number(89))\nprint(centered_hexagonal_number(90))\nprint(centered_hexagonal_number(91))\nprint(centered_hexagonal_number(92))\nprint(centered_hexagonal_number(93))\nprint(centered_hexagonal_number(94))\nprint(centered_hexagonal_number(95))\nprint(centered_hexagonal_number(96))\nprint(centered_hexagonal_number(97))\nprint(centered_hexagonal_number(98))\nprint(centered_hexagonal_number(99))\nprint(centered_hexagonal_number(100))\nprint(centered_hexagonal_number(101))\nprint(centered_hexagonal_number(102))\nprint(centered_hexagonal_number(103))\nprint(centered_hexagonal_number(104))\nprint(centered_hexagonal_number(105))\nprint(centered_hexagonal_number(106))\nprint(centered_hexagonal_number(107))\nprint(centered_hexagonal_number(108))\nprint(centered_hexagonal_number(109))\nprint(centered_hexagonal_number(110))\nprint(centered_hexagonal_number(111))\nprint(centered_hexagonal_number(112))\nprint(centered_hexagonal_number(113))\nprint(centered_hexagonal_number(114))\nprint(centered_hexagonal_number(115))\nprint(centered_hexagonal_number(116))\nprint(centered_hexagonal_number(117))\nprint(centered_hexagonal_number(118))\nprint(centered_hexagonal_number(119))\nprint(centered_hexagonal_number(120))\nprint(centered_hexagonal_number(121))\nprint(centered_hexagonal_number(122))\nprint(centered_hexagonal_number(123))\nprint(centered_hexagonal_number(124))\nprint(centered_hexagonal_number(125))\nprint(centered_hexagonal_number(126))\nprint(centered_hexagonal_number(127))\nprint(centered_hexagonal_number(128))\nprint(centered_hexagonal_number(129))\nprint(centered_hexagonal_number(130))\nprint(centered_hexagonal_number(131))\nprint(centered_hexagonal_number(132))\nprint(centered_hexagonal_number(133))\nprint(centered_hexagonal_number(134))\nprint(centered_hexagonal_number(135))\nprint(centered_hexagonal_number(136))\nprint(centered_hexagonal_number(137))\nprint(centered_hexagonal_number(138))\nprint(centered_hexagonal_number(139))\nprint(centered_hexagonal_number(140))\nprint(centered_hexagonal_number(141))\nprint(centered_hexagonal_number(142))\nprint(centered_hexagonal_number(143))\nprint(centered_hexagonal_number(144))\nprint(centered_hexagonal_number(145))\nprint(centered_hexagonal_number(146))\nprint(centered_hexagonal_number(147))\nprint(centered_hexagonal_number(148))\nprint(centered_hexagonal_number(149))\nprint(centered_hexagonal_number(150))\nprint(centered_hexagonal_number(151))\nprint(centered_hexagonal_number(152))\nprint(centered_hexagonal_number(153))\nprint(centered_hexagonal_number(154))\nprint(centered_hexagonal_number(155))\nprint(centered_hexagonal_number(156))\nprint(centered_hexagonal_number(157))\nprint(centered_hexagonal_number(158))\nprint(centered_hexagonal_number(159))\nprint(centered_hexagonal_number(160))\nprint(centered_hexagonal_number(161))\nprint(centered_hexagonal_number(162))\nprint(centered_hexagonal_number(163))\nprint(centered_hexagonal_number(164))\nprint(centered_hexagonal_number(165))\nprint(centered_hexagonal_number(166))\nprint(centered_hexagonal_number(167))\nprint(centered_hexagonal_number(168))\nprint(centered_hexagonal_number(169))"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #raise NotImplementedError('understanding this method')\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n / 2) * 3 + n * 4\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * n\n    return hexagonal_number\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0 or n >= 9:\n        raise ValueError('n must be between 0 and 9')\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = dict1 if dict1 is not None else dict2\n    dict = dict if dict is not None else dict3\n    for i in dict:\n        if type(dict[i]) == dict:\n            dict[i] = merge_dictionaries_three(dict[i], dict2, dict3)\n        else:\n            dict[i] = dict[i].copy()\n    return dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    for key in dict2.keys():\n        if key in dict_merged:\n            dict_merged[key] = dict_merged[key] + dict2[key]\n        else:\n            dict_merged[key] = dict2[key]\n    \n    for key in dict3.keys():\n        if key in dict_merged:\n            dict_merged[key] = dict_merged[key] + dict3[key]\n        else:\n            dict_merged[key] = dict3[key]\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Return the merged dictionary.\n    return dict1.update(dict2.items() + dict3.items())\n    \ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    # Return the merged dictionary.\n    return dict1.update(dict2)\n    \ndef merge_dictionaries_zero(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    # Return the merged dictionary.\n    return dict1.copy()\n    \ndef flatten(dict_):\n    '''\n    Write a function to flatten a nested dictionary.\n    '''\n    # Return the flattened dictionary.\n    return dict_\n    \ndef flatten_zero(dict_):\n    '''\n    Write a function to flatten a nested dictionary with a \"zero\" key.\n    '''\n    # Return the flattened dictionary.\n    return dict_\n    \ndef map(func, dict):\n    '''\n    Write a function to apply a function to every value of a dictionary.\n    '''\n    # Return the flattened dictionary.\n    return dict\n    \ndef map_zero(dict):\n    '''\n    Write a function to apply a function to every value of a dictionary.\n    '''\n    # Return the flattened dictionary.\n    return dict\n    \ndef join(dict1, dict2):\n    '''\n    Write a function to join two dictionaries into a single dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef unique_elements(dict):\n    '''\n    Write a function to return the unique elements in a nested dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict\n    \ndef remove_elements(dict, elem):\n    '''\n    Write a function to remove the element from a nested dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict\n    \ndef remove_elements_zero(dict):\n    '''\n    Write a function to remove the element from a nested dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict\n    \ndef remove_elements_1(dict):\n    '''\n    Write a function to remove the element from a nested dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict\n    \ndef remove_elements_two(dict):\n    '''\n    Write a function to remove the element from a nested dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict\n    \ndef subset(dict1,dict2):\n    '''\n    Write a function to return the subset of a nested dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef subset_zero(dict1):\n    '''\n    Write a function to return the subset of a nested dictionary.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two(dict1, dict2):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_zero(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_one(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_two(dict1, dict2):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_three(dict1, dict2):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_three_zero(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_three_one(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_three_two(dict1, dict2):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_three_three(dict1, dict2):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_three_three_zero(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_four(dict1, dict2, dict3):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_four_zero(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_four_one(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_four_two(dict1, dict2, dict3):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_four_three(dict1, dict2, dict3):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_four_three_zero(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_five(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_five_zero(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_five_one(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_five_two(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_five_three(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1.copy()\n    \ndef union_two_five_three_zero(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_five_three_one(dict1):\n    '''\n    Write a function to return the union of two nested dictionaries.\n    '''\n    # Return the joined dictionary.\n    return dict1\n    \ndef union_two_five_three_two(dict1, dict2, dict3, dict4):\n    '''"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key,val in dict1.items():\n        if key in dict2.keys():\n            dict2[key].update(dict1[key])\n        elif key in dict3.keys():\n            dict3[key].update(dict1[key])\n        else:\n            dict3[key]=val\n    for key,val in dict2.items():\n        if key in dict3.keys():\n            dict3[key].update(dict2[key])\n        elif key in dict4.keys():\n            dict4[key].update(dict2[key])\n        else:\n            dict4[key]=val\n    for key,val in dict3.items():\n        if key in dict4.keys():\n            dict4[key].update(dict3[key])\n        elif key in dict5.keys():\n            dict5[key].update(dict3[key])\n        else:\n            dict5[key]=val\n    return dict4, dict5, dict6\ndef main():\n    '''\n    Main function to run the program.\n    '''\n    print(\"\\n\\n\\n\\n\\n\")\n    print(\"\"\"\n    Welcome to the program to add three dictionaries!\n    \"\"\")\n    dict1={'name':'John','phone':'123-456-7890', 'age':'22','is_married':False,'is_driver':False}\n    dict2={'name':'Tom','phone':'555-555-5555','age':'32','is_married':False,'is_driver':False}\n    dict3={'name':'Marcus','phone':'555-555-5555','age':'32','is_married':False,'is_driver':False}\n    dict4={'name':'Mason','phone':'555-555-5555','age':'32','is_married':False,'is_driver':False}\n    dict5={'name':'Amy','phone':'555-555-5555','age':'32','is_married':False,'is_driver':False}\n    dict6={'name':'Steve','phone':'555-555-5555','age':'32','is_married':False,'is_driver':False}\n    print(\"Here are the five dictionaries to be added: \")\n    print(dict1)\n    print(dict2)\n    print(dict3)\n    print(dict4)\n    print(dict5)\n    print(dict6)\n    print(\"\\n\\n\\n\\n\\n\")\n    while True:\n        print(\"\"\"\n        Please select an option:\n        1. Add the two dictionaries using the format below:\n        <name>\n        <phone number>\n        <age>\n        <is_married>\n        <is_driver>\n        Press (1) to add a new entry:\n        Press (2) to add a new entry:\n        Press (3) to add a new entry:\n        Press (4) to add a new entry:\n        Press (5) to add a new entry:\n        Press (6) to add a new entry:\n        Press (7) to add a new entry:\n        Press (8) to add a new entry:\n        Press (9) to add a new entry:\n        Press (10) to add a new entry:\n        Press (11) to add a new entry:\n        Press (12) to add a new entry:\n        Press (13) to add a new entry:\n        Press (14) to add a new entry:\n        Press (15) to add a new entry:\n        Press (16) to add a new entry:\n        Press (17) to add a new entry:\n        Press (18) to add a new entry:\n        Press (19) to add a new entry:\n        Press (20) to add a new entry:\n        Press (21) to add a new entry:\n        Press (22) to add a new entry:\n        Press (23) to add a new entry:\n        Press (24) to add a new entry:\n        Press (25) to add a new entry:\n        Press (26) to add a new entry:\n        Press (27) to add a new entry:\n        Press (28) to add a new entry:\n        Press (29) to add a new entry:\n        Press (30) to add a new entry:\n        Press (31) to add a new entry:\n        Press (32) to add a new entry:\n        Press (33) to add a new entry:\n        Press (34) to add a new entry:\n        Press (35) to add a new entry:\n        Press (36) to add a new entry:\n        Press (37) to add a new entry:\n        Press (38) to add a new entry:\n        Press (39) to add a new entry:\n        Press (40) to add a new entry:\n        Press (41) to add a new entry:\n        Press (42) to add a new entry:\n        Press (43) to add a new entry:\n        Press (44) to add a new entry:\n        Press (45) to add a new entry:\n        Press (46) to add a new entry:\n        Press (47) to add a new entry:\n        Press (48) to add a new entry:\n        Press (49) to add a new entry:\n        Press (50) to add a new entry:\n        Press (51) to add a new entry:\n        Press (52) to add a new entry:\n        Press (53) to add a new entry:\n        Press (54) to add a new entry:\n        Press (55) to add a new entry:\n        Press (56) to add a new entry:\n        Press (57) to add a new entry:\n        Press (58) to add a new entry:\n        Press (59) to add a new entry:\n        Press (60) to add a new entry:\n        Press (61) to add a new entry:\n        Press (62) to add a new entry:\n        Press (63) to add a new entry:\n        Press (64) to add a new entry:\n        Press (65) to add a new entry:\n        Press (66) to add a new entry:\n        Press (67) to add a new entry:\n        Press (68) to add a new entry:\n        Press (69) to add a new entry:\n        Press (70) to add a new entry:\n        Press (71) to add a new entry:\n        Press (72) to add a new entry:\n        Press (73) to add a new entry:\n        Press (74) to add a new entry:\n        Press (75) to add a new entry:\n        Press (76) to add a new entry:\n        Press (77) to add a new entry:\n        Press (78) to add a new entry:\n        Press (79) to add a new entry:\n        Press (80) to add a new entry:\n        Press (81) to add a new entry:\n        Press (82) to add a new entry:\n        Press (83) to add a new entry:\n        Press (84) to add a new entry:\n        Press (85) to add a new entry:\n        Press (86) to add a new entry:\n        Press (87) to add a new entry:\n        Press (88) to add a new entry:\n        Press (89) to add a new entry:\n        Press (90) to add a new entry:\n        Press (91) to add a new entry:\n        Press (92) to add a new entry:\n        Press (93) to add a new entry:\n        Press (94) to add a new entry:\n        Press (95) to add a new entry:\n        Press (96) to add a new entry:\n        Press (97) to add a new entry:\n        Press (98) to add a new entry:\n        Press (99) to add a new entry:\n        Press (100) to add a new entry:\n        Press (101) to add a new entry:\n        Press (102) to add a new entry:\n        Press (103) to add a new entry:\n        Press (104) to add a new entry:\n        Press (105) to add a new entry:\n        Press (106) to add a new entry:\n        Press (107) to add a new entry:\n        Press (108) to add a new entry:\n        Press (109) to add a new entry:\n        Press (110) to add a new entry:\n        Press (111) to add a new entry:\n        Press (112) to add a new entry:\n        Press (113"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #sorting the dictionaries\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[0]))\n    dict2 = dict(sorted(dict2.items(), key=lambda x: x[0]))\n    dict3 = dict(sorted(dict3.items(), key=lambda x: x[0]))\n    #adding the key and value into the merged dictionary\n    dict4 = dict(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    #return the merged dictionary\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dictionary = dict1.copy()\n    merged_dictionary.update(dict2)\n    merged_dictionary.update(dict3)\n    return merged_dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_without_duplicate = dict1.copy()\n    dict2_without_duplicate = dict2.copy()\n    dict3_without_duplicate = dict3.copy()\n    \n    def merge_dict_without_duplicate(d1, d2, d3):\n        '''\n        Merges two dictionaries into a single dictionary.\n        '''\n        result = dict()\n        for k, v in d1.items():\n            for k1, v1 in d2.items():\n                if k1 in v and k in v1:\n                    v1[k1] = ct.OrderedDict(v1).merge_with(v[k1])\n                elif k1 in v1 and k in v:\n                    v1[k1] = ct.OrderedDict(v1[k1]).merge_with(v[k1])\n                elif k1 in v1 and k not in v:\n                    v[k] = ct.OrderedDict(v1).merge_with(v[k1])\n                elif k1 not in v:\n                    v[k] = ct.OrderedDict(v1).merge_with(v[k1])\n        \n        for k, v in d3.items():\n            for k1, v1 in d2.items():\n                if k1 in v and k in v1:\n                    v1[k1] = ct.OrderedDict(v1[k1]).merge_with(v[k1])\n                elif k1 in v1 and k in v:\n                    v1[k1] = ct.OrderedDict(v1[k1]).merge_with(v[k1])\n                elif k1 not in v:\n                    v[k] = ct.OrderedDict(v1[k1]).merge_with(v[k1])\n                elif k1 in v1:\n                    v1[k1] = ct.OrderedDict(v1[k1]).merge_with(v[k1])\n        \n        for k, v in d3.items():\n            for k1 in v:\n                if k1 not in v:\n                    v[k1] = dict1_without_duplicate[k1]\n        \n        return result\n    \n    result1 = merge_dict_without_duplicate(dict1_without_duplicate, dict2_without_duplicate, dict3_without_duplicate)\n    result2 = merge_dict_without_duplicate(dict2_without_duplicate, dict3_without_duplicate, dict1_without_duplicate)\n    result3 = merge_dict_without_duplicate(dict1_without_duplicate, dict2_without_duplicate, dict3_without_duplicate)\n    \n    return merge_dict_without_duplicate(result1, result2, result3)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dct1 = dict1.copy()\n    dct2 = dict2.copy()\n    dct3 = dict3.copy()\n    for k in dct1.keys():\n        dct1[k] = ct.OrderedDict(sorted(dct1[k].items(), key=lambda item: item[0]))\n    for k in dct2.keys():\n        dct2[k] = ct.OrderedDict(sorted(dct2[k].items(), key=lambda item: item[0]))\n    for k in dct3.keys():\n        dct3[k] = ct.OrderedDict(sorted(dct3[k].items(), key=lambda item: item[0]))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged=dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    l1 = list1.copy()\n    c = collections.Counter(l1)\n    d = dict(c)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #\n    # TODO: Fill the blanks in the function below.\n    #\n    # Create an empty dictionary\n    # Create a new dictionary\n    # Check to see if the dictionary contains the element\n    # If so, add the value to the new dictionary\n    # If not, add the key to the dictionary with value of 1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    \n    freq=collections.Counter(list1)\n    \n    return freq\ndef reverse_freq_count(freq):\n    '''\n    Write a function to reverse the frequency of all the elements in a dictionary, returned as a string.\n    '''\n    \n    freq=collections.OrderedDict(sorted(freq.items()))\n    \n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d=dict(Counter(list1))\n    for k,v in d.items():\n        d[k]=v\n    return d\ndef sub_count(list1):\n    '''\n    Write a function that takes a list, and returns a list with the sub-elements of the list, with the first element as the only value\n    and the remaining elements as a list\n    '''\n    d=dict(Counter(list1))\n    d.popitem()\n    l1=list(d.items())\n    return l1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create the dictionary: {'a': 5, 'b': 10}\n    # We only want 5 values: b and c\n    dictionary = {}\n    # Loop through the list and add values to the dictionary: a, b and c\n    # print(dictionary)\n    for i in range(len(list1)):\n        if list1[i] in dictionary:\n            dictionary[list1[i]] += 1\n        else:\n            dictionary[list1[i]] = 1\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # BEGIN SOLUTION\n    # Create empty dictionary\n    freq_dict = collections.Counter(list1)\n    # Convert dictionary to list\n    list_freq = list(freq_dict.values())\n    # Print list_freq\n    print(list_freq)\n    # Return dictionary\n    return freq_dict\n    # END SOLUTION\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1.keys():\n            dict1[i] = dict1[i] + 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Initialize the count array to 0\n    count_array = [0] * len(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2=list1.copy()\n    dic={}\n    for i in list1:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    return dic\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # if N is a integer, then N is not a number, so return False\n    if type(N) is int:\n        return False\n    # if N is a list of numbers, use the list to sort the numbers\n    elif type(N) is list:\n        N.sort()\n        # If the smallest number is greater than any other number,\n        # return False\n        if N[0] > N[1]:\n            return False\n        # Otherwise, return the smallest number\n        else:\n            return N[0]\n    # if N is a string, return False\n    elif type(N) is str:\n        return False\n    else:\n        print(\"This function should only be called on integers or lists\")\n        return False\n        \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 3\n    else:\n        return closest_num(N - 1) + 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(N):\n        num = i + 1\n        if num < n:\n            nums.append(num)\n    return min(nums)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # Note: assume that the list is sorted.\n    # Do this by comparing the last element.\n    \n    # Save the index of that element.\n    n1 = len(numbers)\n    index = n1-1\n    \n    while numbers[index] <= N:\n        index -= 1\n    \n    return index\n    "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_index = 0\n    for index in range(1, N):\n        if index < smallest:\n            smallest = index\n            smallest_index = index\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    smallest = None\n    for n in range(1, N + 1):\n        if n < smallest:\n            smallest = n\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    if N > 1:\n        return N - closest_num(N - 1)\n    \ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num <= 1:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num)) + 1, 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(1, N):\n        if i == N:\n            return i\n        if abs(N - i) < abs(N - closest):\n            closest = i\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    elif N == 0:\n        return 0\n    else:\n        return N + closest_num(N-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N >= 0:\n        smallest = abs(N)\n        smallest_index = 0\n        for i in range(len(closest_list)):\n            if abs(smallest_list[i] - N) < abs(smallest_list[i] - smallest):\n                smallest = abs(smallest_list[i] - N)\n                smallest_index = i\n        return smallest_index\n    else:\n        return -1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = 0\n    for i in list1:\n        word += len(i)\n    return word\n    \ndef is_palindrome(string):\n    '''\n    Check if the string is a palindrome.\n    '''\n    rev = ''\n    for i in range(len(string)):\n        rev += string[i]\n    if rev == rev[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict = {}\n    for word in list1:\n        for letter in word:\n            if letter not in dict:\n                dict[letter] = 1\n            else:\n                dict[letter] += 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    i = 0\n    len_list = 0\n    \n    for i in range(0, len(list1)):\n        j = i\n        while (j >= 0) and (list1[j]!= list1[j+1]):\n            len_list = len_list + 1\n            j = j - 1\n        len_list = len_list + 1\n        i = i + 1\n        \n    return len_list"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    else:\n        longest_word = 0\n        for word in list1:\n            if len(word) > longest_word:\n                longest_word = len(word)\n        return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = len(list1[0])\n    for word in list1:\n        for char in word:\n            if len(char) > max_len:\n                max_len = len(char)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # if the length of the word is 0, then print it\n    if len(list1) == 0:\n        return 0\n    # if the length of the word is 1, then print it\n    if len(list1) == 1:\n        return 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    n = len(list1)\n    if n == 0:\n        print(\"list is empty\")\n    else:\n        print(\"length of longest word is {}\".format(max(list1, key=len)))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len1 = len(max(list1, key=len))\n    return len1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if (len(list1)) == 0:\n        return 0\n    else:\n        return max(len(list1),len(list1[0]))\n    \ndef find_index(list1, word):\n    '''\n    Write a python function to check if a word is in the list.\n    '''\n    if word in list1:\n        return list1.index(word)\n    else:\n        return -1\n    \ndef find_index_word(list1, word):\n    '''\n    Write a python function to check if a word is in the list.\n    '''\n    if word in list1:\n        return list1.index(word)\n    else:\n        return -1\n    \ndef reverse(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(lst) > 1:\n        return [lst[-1]] + reverse(lst[:-1])\n    elif len(lst) == 1:\n        return lst\n    else:\n        return -1\n    \ndef increment(num, delta):\n    '''\n    Write a python function to increment a number by a given number.\n    '''\n    if delta < 0:\n        num *= -1\n        delta *= -1\n    else:\n        delta *= -1\n    return num + delta\n    \ndef reverse_second(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return reverse(lst[1:]) + [lst[0]] + reverse(lst[:1])\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    try:\n        index = 0\n        while index < len(str1):\n            if str1[index:index+len(sub_str)] == sub_str:\n                return True\n            index += 1\n    except IndexError:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # checking for blank space\n    if len(sub_str) == 0:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i, sub_str in enumerate(sub_str):\n        if i == 0:\n            continue\n        for j in range(i):\n            if sub_str == str1[j:j+len(sub_str)]:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l_sub_str = list(sub_str)\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] in l_sub_str:\n            if str1[i:i+len(sub_str)] in d:\n                return True\n            else:\n                d[str1[i:i+len(sub_str)]] = True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    output = []\n    for i in range(len(sub_str)):\n        if(sub_str[i] in str1):\n            output.append(sub_str[i])\n    return output\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1)<len(sub_str):\n        return False\n    else:\n        if len(sub_str)==0:\n            return True\n        else:\n            for i in range(len(str1)-len(sub_str)+1):\n                if str1[i:i+len(sub_str)]==sub_str:\n                    return True\n            return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_length = len(sub_str)\n    if list_length == 1:\n        if str1[0:list_length] == sub_str:\n            return True\n        else:\n            return False\n    elif list_length == 2:\n        if str1[0:list_length] == sub_str[0:list_length]:\n            if str1[0:list_length] == sub_str[0:list_length]:\n                if str1[0:list_length] == sub_str[0:list_length]:\n                    if str1[0:list_length] == sub_str[0:list_length]:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1 = str1.lower().replace(',', '').split(' ')\n    str1 = set(str1)\n    for i in range(len(str1)):\n        if str1.issubset(set(sub_str)):\n            return i\n    return None\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return True if set(str1.split(sub_str)) == set(str1.split(sub_str)[0]) else False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if (len(str1) == 0):\n        return False\n    \n    # Initializing lists\n    if (len(sub_str) == 0):\n        return True\n    \n    # Initializing result\n    res = False\n    \n    # Traverse the string and find substring in string\n    for i in range(len(str1) - len(sub_str) + 1):\n        if (str1[i:i+len(sub_str)] == sub_str):\n            res = True\n            break\n    return res\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n) \n    if s[0] == \"0\": \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        if n % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: \n        return False \n    if n < 100: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    return n % 10!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # i - 1 = even\n    # i - 2 = odd\n    #\n    # The output is (even, odd) in all cases\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2!=0 and n>1: \n        return False\n    elif n>=2 and n<=6:\n        return True\n    elif n==6:\n        return True\n    elif n==7:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 10 == 0 and n % 100!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_wrapper(n):\n        if n < 0:\n            return False\n        return n % 3 == 0\n    return is_undulating_wrapper(n)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a, -b)\n    else:\n        return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        print(a)\n    else:\n        return a * power(a,b-1)\n    \ndef my_function():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function2():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function3():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function4():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function5():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function6():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function7():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function8():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function9():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function10():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function11():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function12():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function13():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function14():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function15():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function16():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function17():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function18():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function19():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function20():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function21():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function22():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function23():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function24():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function25():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function26():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function27():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function28():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function29():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function30():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function31():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function32():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function33():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function34():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function35():\n    '''\n    Return the sum of the first 10 natural numbers.\n    '''\n    sum = 0\n    for i in range(1,11):\n        sum = sum + i\n    return sum\n    \ndef my_function36():\n    '''\n    Return the sum of the first 10 natural numbers"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a**b)\n    \npower(2,3)\npower(5,2)\npower(2,5)\npower(a=5,b=2)\npower(2,a=5,b=2)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return a * power(a, b//2)\n    else:\n        return a ** b//2\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list)[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # YOUR CODE HERE\n    if len(test_list)>0:\n        return test_list[0][0]\n    else:\n        return None\n    #raise NotImplementedError\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for index, item in enumerate(test_list):\n        if item[1] < item[0]:\n            min_index = index\n    return test_list[min_index]\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for x in test_list:\n        if x[1] < x[2]:\n            return x[0]\n    \n    return None\n    \ndef indexes_first(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples with the first value of each tuple.\n    '''\n    result = []\n    for x in test_list:\n        result.append(x)\n        \n    return result\n    \ndef distances(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples with the distance between each pair of elements in the list.\n    '''\n    result = []\n    for x in test_list:\n        if x[0]!= x[1]:\n            result.append((x[0] + x[1] + 1, x[1]))\n    \n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = min(test_list)\n    return min_tuple[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        min_second = test_list[0][1]\n        index = 0\n        for i in range(len(test_list)):\n            if test_list[i][1] < min_second:\n                min_second = test_list[i][1]\n                index = i\n        return test_list[index]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = index_min(test_list)\n    return index[0]\ndef index_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[i][0]:\n            return test_list[i]\ndef index_max(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][1] > test_list[i][0]:\n            return test_list[i]\ndef index_min2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_value:\n            min_value = test_list[i][0]\n    return min_value\ndef index_max2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_value = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] > max_value:\n            max_value = test_list[i][0]\n    return max_value\ndef max_freq(test_list):\n    '''\n    Given a list of tuples, write a function that returns the largest value in the tuple.\n    '''\n    max_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] > max_value:\n            max_value = test_list[i][1]\n    return max_value\ndef min_freq(test_list):\n    '''\n    Given a list of tuples, write a function that returns the smallest value in the tuple.\n    '''\n    min_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n    return min_value\ndef sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all values in the tuple.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total\ndef count(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of values in the tuple.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        count += 1\n    return count\ndef mean(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average value of the tuple.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total/len(test_list)\ndef variance(test_list):\n    '''\n    Given a list of tuples, write a function that returns the variance value of the tuple.\n    '''\n    variance = 0\n    for i in range(len(test_list)):\n        variance += (test_list[i][1] - mean(test_list))**2\n    return variance/len(test_list)\ndef median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median value of the tuple.\n    '''\n    median = test_list[0][1]\n    for i in range(len(test_list)):\n        median = (test_list[i][1] + median) / 2\n    return median\ndef mode(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mode value of the tuple.\n    '''\n    mode = 0\n    for i in range(len(test_list)):\n        mode = max(mode, test_list[i][1])\n    return mode\ndef count_mode(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of modes in the tuple.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] == mode(test_list):\n            count += 1\n    return count\ndef sum_of_squares(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all squared values in the tuple.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i][0]**2\n    return sum\ndef count_sum_squares(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of squared values in the tuple.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        count += (test_list[i][0]**2)\n    return count\ndef sigma(test_list):\n    '''\n    Given a list of tuples, write a function that returns the standard deviation value of the tuple.\n    '''\n    sigma = 0\n    for i in range(len(test_list)):\n        sigma += (test_list[i][0] - mean(test_list))**2\n    return sigma/len(test_list)\ndef dispersion(test_list):\n    '''\n    Given a list of tuples, write a function that returns the dispersion value of the tuple.\n    '''\n    dispersion = 0\n    for i in range(len(test_list)):\n        dispersion += (test_list[i][0] - mean(test_list))*(test_list[i][0] - mean(test_list))\n    return dispersion/len(test_list)\ndef mean_dispersion(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mean dispersion value of the tuple.\n    '''\n    dispersion = 0\n    for i in range(len(test_list)):\n        dispersion += (test_list[i][0] - mean(test_list))*(test_list[i][0] - mean(test_list))\n    return dispersion/len(test_list)\ndef quartiles(test_list):\n    '''\n    Given a list of tuples, write a function that returns the quartiles values of the tuple.\n    '''\n    quartile_1 = test_list[int(len(test_list)/4)]\n    quartile_2 = test_list[int(2*len(test_list)/4)]\n    quartile_3 = test_list[int(3*len(test_list)/4)]\n    return [quartile_1, quartile_2, quartile_3]\ndef plot(test_list):\n    '''\n    Given a list of tuples, write a function that returns a plot with the first set of values as red, the second set of values as green and the third set of values as blue.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][0] > mean(test_list):\n            plot_val = 'r'\n        elif test_list[i][0] < mean(test_list):\n            plot_val = 'g'\n        else:\n            plot_val = 'b'\n        plt.plot([test_list[i][0], test_list[i][0]],[plot_val, plot_val])\n    plt.show()\ndef standard_deviation(test_list):\n    '''\n    Given a list of tuples, write a function that returns the standar"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = None\n    for i in range(0, len(test_list)):\n        if test_list[i][1] < min:\n            min = test_list[i][1]\n        if test_list[i][1] == min:\n            if test_list[i][0] < min:\n                min = test_list[i][0]\n    return(min)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_second = test_list[0]\n    min_first = test_list[0]\n    min_value = test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Write a function that takes a list of tuples and returns the first value of the tuple with the smallest second value.\n    # Hint: Consider the second value of each tuple.\n    # Hint: If you cannot use the smallest number, you should return None.\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    n=len(lst)\n    for i in range(0,n):\n        for j in range(0,n-i):\n            if lst[j]<lst[j+1]:\n                lst[j],lst[j+1]=lst[j+1],lst[j]\n    print(lst)\n    print(n)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst.sort()\n    lst_length = len(lst)\n    smallest = lst[lst_length - 1]\n    for i in range(lst_length):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] < min_length:\n                min_length = lst[i][j]\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < Min_len:\n            Min_len = len(lst[i])\n    return Min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Your code here\n    if len(lst) == 0:\n        return 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!= j and lst[i][0] < lst[j][0]:\n                min_length = lst[i][1]\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    i = 0\n    while i < len(lst):\n        if lst[i] < lst[i-1]:\n            i += 1\n        else:\n            return i\n    return i\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return lst\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in range(0, len(lst)):\n        count = 0\n        for j in range(0, len(lst[i])):\n            if lst[i][j] < lst[i][count]:\n                count += 1\n        if count == len(lst[i]) - 1:\n            return len(lst[i])\n    return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Create empty list for the min length\n    minLen = []\n    \n    # Create empty dict for shorter list\n    shorterDict = {}\n    \n    # Create empty list\n    list_of_lists = []\n    \n    # Loop through each row in list\n    for row in lst:\n        \n        # Add each row to shorter dict\n        for item in row:\n            if item in shorterDict:\n                shorterDict[item] = shorterDict[item] + 1\n            else:\n                shorterDict[item] = 1\n                \n        # Add list to dict\n        list_of_lists.append(shorterDict)\n        \n        # Clear list of dicts\n        shorterDict = {}\n    \n    # Make the shortest item in the list 1\n    list_of_lists[0] = list_of_lists[0]\n    \n    # Find the min length of each list\n    for lst in list_of_lists:\n        \n        # Iterate through each element in list\n        for key in lst:\n            # Check if the element is already in the dict\n            if key in shorterDict:\n                # Increment the count\n                shorterDict[key] = shorterDict[key] + 1\n            else:\n                # Increment the count\n                shorterDict[key] = 1\n        \n        # Set the length of the smallest item\n        if shorterDict[min(shorterDict, key=shorterDict.get)] == 1:\n            minLen.append(1)\n        else:\n            minLen.append(min(shorterDict, key=shorterDict.get))\n        \n        # Clear dict\n        shorterDict = {}\n    \n    # Return the length of the shortest list\n    return len(minLen)\n        \n        "
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        div = 1\n        for i in range(1, n):\n            if n % i == 0:\n                div += 1\n        return div\n    except TypeError:\n        return 0\n    except ZeroDivisionError:\n        return 0\n    except Exception:\n        return 0\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    while n % 2 == 0:\n        n = n // 2\n        divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def check(n):\n        return n-1 if n%2==0 else n//2\n    def fun(n):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return fun(check(n-1))+fun(check(n//2))\n    return fun(n)\nprint(divisor(4))\nprint(divisor(6))\nprint(divisor(9))\nprint(divisor(8))\nprint(divisor(5))\nprint(divisor(7))\nprint(divisor(10))\nprint(divisor(13))\nprint(divisor(100))"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        a = n//2\n        b = n - a\n        c = 0\n        if n % 2 == 0:\n            c = 1\n        else:\n            c = 0\n        return a + c * divisor(b)\n        \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    # if integer is divisible by 1\n    if n == 1:\n        return 1\n    \n    # if number is divisible by only 1 and 2\n    elif n % 2 == 0 and n % 3 == 0:\n        return 2\n    \n    # else count the number of divisors\n    else:\n        return (n//3) + (n//2) + (n//4) + (n//5)\n        \n    \n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(1, n + 1):\n        if i % 1 == 0:\n            divisors.append(i)\n    divisors.append(n)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    i = 1\n    while n!= 1:\n        if n % i == 0:\n            divs += 1\n        i += 1\n        n /= i\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==0:\n        return 0\n    count=0\n    i=2\n    while i<=n:\n        if n%i==0:\n            count+=1\n            if i<n//i:\n                i+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2==0:\n        return 2\n    else:\n        return divisor(n/2) + 2\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result={}\n    for i in list1:\n        for j in i:\n            if j in result:\n                result[j]+=1\n            else:\n                result[j]=1\n    return result\n    \nlist1=[1,2,3,4,5]\nresult=frequency_lists(list1)\nprint(result)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1_flatten = [x for sublist in list1 for x in sublist]\n    list1_freq = {}\n    for element in list1_flatten:\n        if element in list1_freq:\n            list1_freq[element] += 1\n        else:\n            list1_freq[element] = 1\n    return list1_freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = dict()\n    count = 0\n    for elements in list1:\n        for index, element in enumerate(elements):\n            dictionary[element] = dictionary.get(element, 0) + 1\n            count += 1\n    return dictionary\n    # YOUR CODE HERE\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in dict1:\n                dict1[j] = dict1[j]+1\n            else:\n                dict1[j]=1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # For ease of testing, remove duplicates and sort by alphabetical order.\n    frequency = {}\n    for list1 in list1:\n        for element in list1:\n            if element in frequency.keys():\n                frequency[element] = frequency[element] + 1\n            else:\n                frequency[element] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    dictionary = {}\n    for i in range(len(list1)):\n        \n        for j in range(len(list1[i])):\n            dictionary[list1[i][j]] = 0\n        \n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqDict = {}\n    for i in range(len(list1)):\n        list1[i] = list1[i][0]\n        if list1[i] in freqDict.keys():\n            freqDict[list1[i]] = freqDict[list1[i]] + 1\n        else:\n            freqDict[list1[i]] = 1\n    return freqDict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in range(len(list1)):\n        for element in list1[i]:\n            if element in frequency_dict.keys():\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #Return Dictionary\n    newdict = {}\n    #Iterate through each element\n    for i in range(0, len(list1)):\n        #Check if number is in dictionary\n        if list1[i] in newdict:\n            #If so add new dictionary entry\n            newdict[list1[i]] = 1\n        else:\n            #Else set new dictionary entry\n            newdict[list1[i]] = 1\n    #Return dictionary\n    return newdict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary from the list\n    dictionary = {}\n    for i in range(len(list1)):\n        for x in list1[i]:\n            if x not in dictionary:\n                dictionary[x] = 0\n            else:\n                dictionary[x] += 1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    for num in numbers:\n        result += num\n    return resul"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for number in numbers:\n        multiply = multiply * number\n    return multiply\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multi(numbers):\n        sum = 0\n        for i in numbers:\n            sum += i\n        return sum\n    \n    for i in range(len(numbers)):\n        sum = numbers[i] * multi(numbers)\n        numbers[i] = sum\n    \n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result=0\n    for i in numbers:\n        result+=i\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return list(map(lambda x: x*len(numbers), numbers))\n    \nprint(multiply_num([1, 2, 3, 4, 5]))\nprint(multiply_num([1, 2, 3, 5]))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum=0\n    for i in range(len(numbers)):\n        sum+=numbers[i]*i\n    return sum/len(numbers)\ndef main():\n    print(\"What is your name?\")\n    name = input()\n    print(\"What is your age?\")\n    age = input()\n    print(\"How old are you?\")\n    age = int(input())\n    print(\"How old are you?(in years)\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favorite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you was born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were born?\")\n    born_year = input()\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"How old are you in \"+birth_year+\"?\")\n    born_year = int(input())\n    print(\"How old are you in \"+born_year+\"?\")\n    age = int(input())\n    print(\"What is your favourite food?\")\n    food = input()\n    print(\"What is your favourite movie?\")\n    movie = input()\n    print(\"What is your favourite animal?\")\n    animal = input()\n    print(name,\" is you sure you want to buy a coffee? (Y/N)\")\n    if input() == \"Y\":\n        print(\"It's a coffee.\")\n    else:\n        print(\"That's not a coffee.\")\n    print(\"In which year you were born?\")\n    birth_year = input()\n    print(\"In which year you were bor"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # print(numbers)\n    # print(len(numbers))\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    \n    \n    # using for loop\n    # for num in numbers:\n        # print(num)\n    \n    \n    # using range\n    # for num in range(len(numbers)):\n        # print(num)\n    \n    \n    # using list comprehension\n    # numbers_list = [num for num in numbers]\n    # print(numbers_list)\n    \n    \n    # using list comprehension\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using map\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using list comprehension\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using map\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n    # print(numbers_list)\n    \n    \n    # using filter\n    # numbers_list = [num for num in numbers if num % 2 == 0]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Check if the list is empty\n    if len(numbers) == 0:\n        raise ValueError('You must input a list of numbers')\n    # Create a variable to hold the value of the product\n    product = 1\n    # Loop through the list of numbers\n    for num in numbers:\n        # Set the product equal to the number multiplied with the length of the list\n        product *= num\n    # Return the product\n    return product\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0: return '-' + str(n)[1:] + '0'\n    return str(n)[0] + '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans=''\n    while n > 0: \n        n, r = divmod(n, 2) \n        ans = str(r) + ans \n    return ans \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n    \ndef binary_to_decimal(b): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    return int(b,2)\n    \ndef main(): \n    # data = [1, 0, 1, 1]\n    data = [1, 0, 1]\n    print(f\"The binary representation of the given number is: {decimal_to_binary(binary_to_decimal(data))}\")\n    \nmain()"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n) \n    binary = binary.lstrip('0b') # remove leading zeros\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if (n < 2):\n        return \"0\" + str(n)\n    else:\n        return n // 2 + \"0\" + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = bin(n)\n    binary_num = binary_num.lstrip('0b')\n    return binary_num\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    decimal_str = str(n)\n    return decimal_str[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    num_array = [str(bin(i))[2:].zfill(8) for i in range(n)]\n    return ''.join(num_array)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n!= 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return \"\".join(binary)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # We'll use an array of zeroes with the same length as n.\n    zeroes = [0] * len(n)\n    # We'll start by reversing the numbers, and storing the index of the first zero.\n    # Also, since we're only interested in the first zero, we'll put the index at index 0.\n    for i in reversed(range(len(n))):\n        zeroes[i] = n[i]\n    # Now, we'll convert the numbers from the array to a string and put it in the output.\n    output = ''\n    for i, n in enumerate(zeroes):\n        if i!= 0:\n            output += str(n)\n        else:\n            output += str(n)\n    return output\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def next_palindrome(num):\n        '''\n        1. If the input number is odd, calculate next palindrome using that number.\n        2. If the input number is even, calculate next palindrome using 2's complement.\n        3. If the input number is even, it's a palindrome.\n        4. If the input number is odd, return the next palindrome using the next_palindrome function.\n        '''\n        if num < 0:\n            return\n        if num % 2 == 0:\n            return 2 * num\n        else:\n            return num + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num=str(num)\n    num_len=len(num)\n    palindrome=num\n    for i in range(num_len):\n        palindrome=palindrome[:i]+palindrome[i+1:]\n    if palindrome==num:\n        return int(palindrome)\n    else:\n        return next_smallest_palindrome(int(palindrome))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = list(str(num))\n    num_list.reverse()\n    palindrome = \"\".join(num_list)\n    palindrome = palindrome[::-1]\n    return int(palindrome)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    for i in range(n):\n        if num % (10**(n-i-1)) == 0:\n            return num // (10**(n-i-1))\n    return num\n    \ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(num % 10)\n        num = num // 10\n        i += 1\n        if num == 1:\n            break\n    return num\n    \ndef next_greater_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    for i in range(n):\n        if num % (10**(n-i-1)) == 0:\n            return num // (10**(n-i-1))\n    return num\n    \ndef next_smallest_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(next_palindrome(size))\n        size = next_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef next_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(next_palindrome(size))\n        size = next_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef next_greater_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(next_greater_palindrome(size))\n        size = next_greater_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef next_smallest_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(next_smallest_palindrome(size))\n        size = next_smallest_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef next_greater_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(next_greater_palindrome(size))\n        size = next_greater_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef next_smallest_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(next_smallest_palindrome(size))\n        size = next_smallest_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef next_greater_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(next_greater_palindrome(size))\n        size = next_greater_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef count_palindrome_of_size(size):\n    '''\n    Write a function to count the number of palindromes of a specified size, returned as an integer.\n    '''\n    palindrome = []\n    i = 0\n    while True:\n        palindrome.append(count_palindrome(size))\n        size = count_palindrome(size)\n        i += 1\n        if size == 1:\n            break\n    return palindrome\n    \ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    for i in range(n):\n        if num % (10**(n-i-1)) == 0:\n            return num // (10**(n-i-1))\n    return num\n    \ndef count_palindrome(num):\n    '''\n    Write a function to count the number of palindromes of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    for i in range(1,num+1):\n        palindrome.append(next_palindrome(i))\n    return len(palindrome)\n    \ndef next_greater_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    for i in range(n):\n        if num % (10**(n-i-1)) == 0:\n            return num // (10**(n-i-1))\n    return num\n    \ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    for i in range(1,num+1):\n        palindrome.append(next_smallest_palindrome(i))\n    return palindrome\n    \ndef next_greater_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    for i in range(1,num+1):\n        palindrome.append(next_greater_palindrome(i))\n    return palindrome\n    \ndef next_smallest_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    for i in range(1,size+1):\n        palindrome.append(next_smallest_palindrome(i))\n    return palindrome\n    \ndef next_greater_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    for i in range(1,size+1):\n        palindrome.append(next_greater_palindrome(i))\n    return palindrome\n    \ndef next_palindrome_of_size(size):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    for i in range(1,size+1):\n        palindrome.append(next_palindrome(i))\n    return palindrome\n    \ndef count_palindrome_of_size(size):\n    '''\n    Write a function to count the number of palindromes of a specified size, returned as an integer.\n    '''\n    palindrome = []\n    fo"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if len(str(num)) == 1:\n        return num\n    elif num < 0:\n        return num\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        lst = []\n        for i in range(int(len(str(num))/2)+1):\n            if num < 10**i:\n                if len(str(num)[:i])==i:\n                    lst.append(num)\n                elif len(str(num)[:i]) < len(str(num)[:i+1]):\n                    lst.append(num)\n        return next_smallest_palindrome(lst[len(lst)//2])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    num = str(num)\n    num = num.replace(\"-\",\"\")\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num)-1,1):\n        if num[i] == '0' or num[i+1] == '0':\n            return \"Invalid\"\n        if num[i+1] == '0':\n            return \"Invalid\"\n    if len(num)==1:\n        return int(num)\n    num = num[::-1]\n    if num[0] == '-':\n        num = num[1:]\n    \n    for i in range(0, len(num),1):\n        if num[i] == '0' or num[i+1] == '0':\n            return \"Invalid\"\n        if num[i+1] == '0':\n            return \"Invalid\"\n    if len(num)==1:\n        return int(num)\n    num = num[::-1]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0' or num[i+1] == '0':\n            return \"Invalid\"\n        if num[i+1] == '0':\n            return \"Invalid\"\n    \n    if int(num) < 2:\n        return int(num)\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[0]):\n        return int(num[-1])\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[1]):\n        return int(num[-1])\n    return int(num)\ndef next_biggest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    num = str(num)\n    num = num.replace(\"-\",\"\")\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num)-1,1):\n        if num[i] == '0' or num[i+1] == '0':\n            return \"Invalid\"\n        if num[i+1] == '0':\n            return \"Invalid\"\n    if len(num)==1:\n        return int(num)\n    num = num[::-1]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n    if len(num)==1:\n        return int(num)\n    num = num[::-1]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n    if int(num) < 2:\n        return int(num)\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[0]):\n        return int(num[-1])\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[1]):\n        return int(num[-1])\n    return int(num)\ndef next_palindrome_prime_factor(num):\n    '''\n    Write a function to find the prime factors of a specified integer, returned as a list of integers.\n    '''\n    \n    num = str(num)\n    num = num.replace(\"-\",\"\")\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num),1):\n        if num[i] == '0' or num[i+1] == '0':\n            return \"Invalid\"\n        if num[i+1] == '0':\n            return \"Invalid\"\n    if len(num)==1:\n        return int(num)\n    num = num[::-1]\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n    if int(num) < 2:\n        return int(num)\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[0]):\n        return int(num[-1])\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[1]):\n        return int(num[-1])\n    return int(num)\ndef palindrome_factor(num):\n    '''\n    Return a list of all palindromes of a specified number.\n    '''\n    \n    num = str(num)\n    num = num.replace(\"-\",\"\")\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n    if len(num)==1:\n        return int(num)\n    num = num[::-1]\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n    if int(num) < 2:\n        return int(num)\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[0]):\n        return int(num[-1])\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[1]):\n        return int(num[-1])\n    return int(num)\ndef palindrome_count(num):\n    '''\n    Return the number of occurrences of a specified number.\n    '''\n    \n    num = str(num)\n    num = num.replace(\"-\",\"\")\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n    if len(num)==1:\n        return int(num)\n    num = num[::-1]\n    if num[0] == '-':\n        num = num[1:]\n    for i in range(0, len(num),1):\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n        if num[i] == '0':\n            return \"Invalid\"\n    if int(num) < 2:\n        return int(num)\n    if int(num[0]) < int(num[1]):\n        return int(num[0])\n    if int(num[-1]) < int(num[0"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num > 0:\n        return next_smallest_palindrome(num - 1)\n    \ndef get_palindromes(n):\n    '''\n    Read n numbers from the user and return a list of all the next smallest palindrome numbers.\n    '''\n    numbers = list(str(n))\n    numbers.append('0')\n    \n    palindromes = []\n    for n in range(len(numbers)):\n        palindromes.append(numbers[n] + numbers[n+1])\n    palindromes.sort()\n    return palindromes\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    def is_palindrome(num):\n        return True if num % 2 == 0 else False\n    def find_next_smallest_palindrome(n):\n        '''\n        Return the next smallest palindrome of a specified integer, given as an integer.\n        '''\n        if n < 0:\n            return 0\n        while n % 2 == 0:\n            n /= 2\n        if n == 1:\n            return -1\n        while n % 2 == 1:\n            n /= 2\n        i = 0\n        j = 1\n        while True:\n            if j < n and is_palindrome(n):\n                break\n            if i > n and is_palindrome(n):\n                return -1\n            if n - j < 0:\n                return -1\n            i = i + 2\n            j += 2\n        return n\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pal_list = [int(i) for i in str(num)]\n    palindrome_list = []\n    for i in range(len(pal_list)):\n        for j in range(len(pal_list)):\n            if pal_list[i]*pal_list[j] == num and (i+j)>0:\n                if pal_list[i]*pal_list[j] < num:\n                    palindrome_list.append(pal_list[i]*pal_list[j])\n                elif pal_list[i]*pal_list[j] > num:\n                    palindrome_list.append(pal_list[i]*pal_list[j]-1)\n    return min(palindrome_list)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    for i in range(n):\n        if (n - i) % 2 == 1:\n            num = str(num)[n - i - 1]\n            return num\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # return the array[n] if the array is empty\n    if len(arr) == 0:\n        return -1\n    \n    # find the last index where the kth element is\n    # so that we can find it in the array\n    n = len(arr)\n    left = 0\n    right = n-1\n    \n    # at the end of the array, we will find kth index \n    # so the array has to have the kth index\n    while right - left > 1:\n        mid = (left + right) // 2\n        \n        # if the array element is greater than the kth element\n        if arr[mid] < k:\n            left = mid+1\n        # if the array element is less than the kth element\n        else:\n            right = mid\n    \n    # if the array element is greater than the kth element\n    if arr[left] >= k:\n        return left\n    # if the array element is less than the kth element\n    else:\n        return righ"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def quick_sort(arr, start, end):\n        if start >= end:\n            return\n        pivot_index = start\n        pivot = arr[pivot_index]\n        i = start + 1\n        for j in range(start, end + 1):\n            if arr[j] < pivot:\n                arr[i] = arr[j]\n                i += 1\n        arr[i] = pivot\n        arr[pivot_index] = arr[end]\n        arr[end] = pivot\n        quick_sort(arr, start, i - 1)\n        quick_sort(arr, i, end)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # get the length of array\n    l = len(arr)\n    # init kth_element variable\n    kth_element = -1\n    # iterate through array\n    for i in range(l):\n        # find the kth element\n        kth_element = arr[i + k - 1]\n        # if the kth element is the kth element\n        if i + k - 1 == kth_element:\n            # return kth element\n            return kth_element\n    # return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    i = 0\n    if k == n:\n        return arr[k-1]\n    while i < n:\n        if arr[i] == k:\n            return arr[i+1]\n        i += 1\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([i.capitalize() if i.isupper() else i for i in word])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for letter in word:\n        if letter.isupper():\n            new_word += letter.lower()\n        elif letter.islower():\n            new_word += letter.upper()\n        else:\n            new_word += letter\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return (word.replace('_',' ').title()).replace('-',' ').lower()"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if(len(word) > 1):\n        word_camel = \"\"\n        i = 0\n        while i < len(word):\n            if word[i].lower() == \"a\":\n                word_camel += word[i]+word[i+1]\n            elif word[i].lower() == \"e\":\n                word_camel += word[i]+word[i+1]\n            elif word[i].lower() == \"i\":\n                word_camel += word[i]+word[i+1]\n            elif word[i].lower() == \"o\":\n                word_camel += word[i]+word[i+1]\n            elif word[i].lower() == \"u\":\n                word_camel += word[i]+word[i+1]\n            else:\n                word_camel += word[i]+word[i+1]\n            i += 2\n        word = word_camel\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].upper() in 'abcdefghijklmnopqrstuvwxyz':\n        return word.lower()\n    else:\n        return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word:\n        return word.lower()[0] + \"\".join([i.capitalize() for i in word.split('_')])\n    return \"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(camel_case(word).split(\"_\"))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0] == '_':\n        return word\n    else:\n        index = 0\n        while index < len(word) and word[index]!= '_':\n            index += 1\n        return word[:index] + word[index:].title() + word[index:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    new_word = []\n    for letter in word:\n        if letter.isupper():\n            new_word.append(letter.lower())\n        elif letter.islower():\n            new_word.append(letter.upper())\n        else:\n            new_word.append(letter.title())\n    return \"\".join(new_word)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if m == 0:\n        return n \n    # Eulerian number\n    elif n == m:\n        return 1 \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_cycle(n, m):\n        if n == m:\n            return True\n        for j in range(n, m):\n            if self.connected(n, j, m):\n                return False\n        return True\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if the number is a eulerian number\n    # or not\n    if n == m:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2 * n - m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        print(f\"Eulerian number of {n} is {n}.\")\n        return\n    elif m == 1:\n        print(f\"Eulerian number of {n} is {n + 1}.\")\n        return\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # result = -1\n    # for i in range(1, n+1):\n    #     result += (m // i)\n    #     m = m % i\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create an empty list to store the Eulerian numbers\n    eulerian = []\n    # For each cycle of n and m, add a(n, m) to the eulerian list\n    for i in range(n, n + m):\n        eulerian.append(i)\n    # Loop through the list, and find the Eulerian number\n    # If there is a cycle, then it is not an Eulerian number\n    # If it is, then it is an Eulerian number\n    for i in range(n + m):\n        if len(eulerian) > 1:\n            if eulerian[i] in eulerian[i + 1::]:\n                return False\n    return True\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == m:\n        return 0\n    \n    # If all numbers are equal, return 1\n    if n == m:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Write your code here.\n    p, q = n, m\n    \n    while p!= q:\n        if (p % m == q % m):\n            print(p, q)\n            return\n            #p = p/m\n        else:\n            p = p*m + q*m\n            q = (p*p)//m\n    print(p, q)\n    return\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    Eulerian_number = []\n    p = n\n    q = m\n    if n < m:\n        Eulerian_number = []\n        Eulerian_number.append(n)\n    if m < p:\n        Eulerian_number.append(m)\n        for i in range(1, p):\n            Eulerian_number.append(i)\n    if p < q:\n        for i in range(1, q):\n            Eulerian_number.append(i)\n            for j in range(p, q):\n                if i!= j:\n                    Eulerian_number.append(j)\n    Eulerian_number = list(set(Eulerian_number))\n    Eulerian_number.sort()\n    return Eulerian_number\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_by_value(sublist):\n        for i in range(len(sublist)):\n            for j in range(len(sublist[i])):\n                if sublist[i][j] =='':\n                    sublist[i][j] = '0'\n                elif sublist[i][j] == '*':\n                    sublist[i][j] = 'X'\n                elif sublist[i][j] == '/':\n                    sublist[i][j] = '-'\n                elif sublist[i][j] == '*':\n                    sublist[i][j] = '*'\n                elif sublist[i][j] == '+':\n                    sublist[i][j] = '+'\n                elif sublist[i][j] == '-':\n                    sublist[i][j] = '-'\n                elif sublist[i][j] == '=':\n                    sublist[i][j] = '='\n                elif sublist[i][j] == '0':\n                    sublist[i][j] = '0'\n                elif sublist[i][j] == '1':\n                    sublist[i][j] = '1'\n                elif sublist[i][j] == '2':\n                    sublist[i][j] = '2'\n                elif sublist[i][j] == '3':\n                    sublist[i][j] = '3'\n                elif sublist[i][j] == '4':\n                    sublist[i][j] = '4'\n                elif sublist[i][j] == '5':\n                    sublist[i][j] = '5'\n                elif sublist[i][j] == '6':\n                    sublist[i][j] = '6'\n                elif sublist[i][j] == '7':\n                    sublist[i][j] = '7'\n                elif sublist[i][j] == '8':\n                    sublist[i][j] = '8'\n                elif sublist[i][j] == '9':\n                    sublist[i][j] = '9'\n                elif sublist[i][j] =='':\n                    sublist[i][j] = '*'\n                elif sublist[i][j] == 'X' or sublist[i][j] == '-':\n                    sublist[i][j] = '*'\n                elif sublist[i][j] == '+' or sublist[i][j] == '-':\n                    sublist[i][j] = '+'\n                elif sublist[i][j] == '=':\n                    sublist[i][j] = '='\n                else:\n                    sublist[i][j] = '*'\n        return sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code here\n    \n    return sorted(input_list, key = lambda x: (x[0], x[1]))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for x in range(len(input_list)):\n        for y in range(len(input_list[x])):\n            new_list.append(input_list[x][y])\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index, item in enumerate(input_list):\n        for i, sublist in enumerate(item):\n            input_list[index][i] = str(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = []\n    # create empty list\n    for sublist in input_list:\n        if sublist:\n            l.append(sublist)\n    # sort the list\n    l.sort(key=lambda x: [x.split(' ')])\n    # return the list\n    return l\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(input_list)\n    for i in range(n):\n        for j in range(n):\n            if input_list[i][j] == \" \":\n                input_list[i][j] = \"- \"\n    return input_lis"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_string_by_asc(sort_list):\n        '''\n        Take a list of strings and sort them in ascending order by the first letter of each string.\n        Sort the remaining strings in a sublist of lists and sort them again.\n        '''\n        def sort_string(string):\n            '''\n            Convert string to list of words.\n            '''\n            string = string.split()\n            string = [x.strip() for x in string]\n            return [x for x in string if x!= '']\n        \n        def sort_strings_by_letter(sort_list):\n            '''\n            Convert a sublist of strings to a sorted list of strings.\n            '''\n            sort_list = list(map(sort_string, sort_list))\n            sort_list.sort(key=lambda x: x[0])\n            sort_list.sort(key=lambda x: x[1])\n            return sort_list\n        \n        def sort_strings_by_asc(sort_list):\n            '''\n            Sort the sublist of strings in ascending order by their first letter of each string.\n            Sort the remaining strings in a sublist of lists and sort them again.\n            '''\n            sort_list = list(map(sort_string, sort_list))\n            sort_list.sort(key=lambda x: x[0])\n            sort_list.sort(key=lambda x: x[1])\n            return sort_list\n        \n        sort_list = []\n        for i in input_list:\n            sort_list.append(sort_strings_by_asc(sort_list))\n        \n        return sort_list\n    \n    sort_list = sort_string_by_asc(input_list)\n    return sort_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list_by_length(input_list):\n        '''\n        '''\n        return sorted(input_list, key=len)\n    \n    \n    def sort_list_by_length_in_descending_order(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0])\n    \n    \n    def sort_list_by_first_character(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0])\n    \n    \n    def sort_list_by_first_character_and_last_character(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0], reverse=True)\n    \n    \n    def sort_list_by_reverse(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1])\n    \n    \n    def sort_list_by_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0])\n    \n    \n    def sort_list_by_first_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0:len(x)])\n    \n    \n    def sort_list_by_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1])\n    \n    \n    def sort_list_by_first_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0:len(x)])\n    \n    \n    \n    def sort_list_by_first_and_last_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)])\n    \n    \n    def sort_list_by_last_and_first_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_last_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    \n    def sort_list_by_first_and_last_letter_and_last_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0:len(x)], reverse=True)\n    \n    \n    def sort_list_by_first_and_last_letter_and_last_letter_and_last_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0:len(x)], reverse=True)\n    \n    \n    def sort_list_by_first_and_last_letter_and_last_letter_and_last_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0:len(x)], reverse=True)\n    \n    \n    def sort_list_by_first_and_last_letter_and_last_letter_and_last_letter_and_last_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[0:len(x)], reverse=True)\n    \n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambda x:x[-1:len(x)], reverse=True)\n    \n    \n    def sort_list_by_last_and_first_letter_and_first_letter(input_list):\n        '''\n        '''\n        return sorted(input_list, key=lambd"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(zip(*input_list))\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda sub_list: sub_list[1].count(\"o\"))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in range(0,len(lst)):\n        if lst[i]==True:\n            count+=1\n    return count\ndef tuple_totals(tup):\n    '''\n    Write a python function to calculate the total number of items in a list of tuples.\n    '''\n    count=0\n    for i in range(0,len(tup)):\n        count+=tup[i][0]\n    return count\ndef main():\n    '''\n    Write a python function to find the longest and shortest string lengths of a given list of strings.\n    '''\n    lst=[(1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 14), (15, 16, 17), (18, 19, 20), (21, 22, 23), (24, 25, 26), (27, 28, 29), (30, 31, 32), (33, 34, 35), (36, 37, 38), (39, 40, 41), (42, 43, 44), (45, 46, 47), (48, 49, 50), (51, 52, 53), (54, 55, 56), (57, 58, 59), (60, 61, 62), (63, 64, 65), (66, 67, 68), (69, 70, 71), (72, 73, 74), (75, 76, 77), (78, 79, 80), (81, 82, 83), (84, 85, 86), (87, 88, 89), (90, 91, 92), (93, 94, 95), (96, 97, 98), (99, 100, 101), (102, 103, 104), (105, 106, 107), (108, 109, 110), (111, 112, 113), (114, 115, 116), (117, 118, 119), (120, 121, 122), (123, 124, 125), (126, 127, 128), (129, 130, 131), (132, 133, 134), (135, 136, 137), (138, 139, 140), (141, 142, 143), (144, 145, 146), (147, 148, 149), (150, 151, 152), (153, 154, 155), (156, 157, 158), (159, 160, 161), (162, 163, 164), (165, 166, 167), (168, 169, 170), (171, 172, 173), (174, 175, 176), (177, 178, 179), (180, 181, 182), (183, 184, 185), (186, 187, 188), (189, 190, 191), (192, 193, 194), (195, 196, 197), (198, 199, 200), (201, 202, 203), (204, 205, 206), (207, 208, 209), (210, 211, 212), (213, 214, 215), (216, 217, 218), (219, 220, 221), (222, 223, 224), (225, 226, 227), (228, 229, 230), (231, 232, 233), (234, 235, 236), (237, 238, 239), (240, 241, 242), (243, 244, 245), (246, 247, 248), (249, 250, 251), (252, 253, 254), (255, 256, 257), (258, 259, 260), (261, 262, 263), (264, 265, 266), (267, 268, 269), (270, 271, 272), (273, 274, 275), (276, 277, 278), (279, 280, 281), (282, 283, 284), (285, 286, 287), (288, 289, 290), (291, 292, 293), (294, 295, 296), (297, 298, 299), (300, 301, 302), (303, 304, 305), (306, 307, 308), (309, 310, 311), (312, 313, 314), (315, 316, 317), (318, 319, 320), (321, 322, 323), (324, 325, 326), (327, 328, 329), (330, 331, 332), (333, 334, 335), (336, 337, 338), (339, 340, 341), (342, 343, 344), (345, 346, 347), (348, 349, 350), (351, 352, 353), (354, 355, 356), (357, 358, 359), (360, 361, 362), (363, 364, 365), (366, 367, 368), (369, 370, 371), (372, 373, 374), (375, 376, 377), (378, 379, 380), (381, 382, 383), (384, 385, 386), (387, 388, 389), (390, 391, 392), (393, 394, 395), (396, 397, 398), (399, 400, 401), (402, 403, 404), (405, 406, 407), (408, 409, 410), (411, 412, 413), (414, 415, 416), (417, 418, 419), (420, 421, 422), (423, 424, 425), (426, 427, 428), (429, 430, 431), (431, 432, 433), (434, 435, 436), (437, 438, 439), (440, 441, 442), (443, 444, 445), (446, 447, 448), (449, 450, 451), (452, 453, 454), (455, 456, 457), (458, 459, 460), (461, 462, 463), (465, 466, 467), (467, 468, 469), (470, 471, 472), (473, 474, 475), (476, 477, 478), (478, 479, 480), (481, 482, 483), (483, 484, 485), (486, 489, 490), (491, 492, 493), (494, 495, 496), (497, 498, 499), (500, 501, 502), (503, 504, 505), (506, 507, 508), (509, 510, 511), (512, 513, 514), (515, 516, 517), (518, 519, 520), (521, 522, 523), (523, 524, 525), (526, 527, 528), (528, 529, 530), (531, 532, 533), (533, 534, 535), (535, 536, 537), (536, 538, 539), (540, 541, 542), (543, 544, 545), (546, 547, 548), (549, 550, 551), (552, 553, 554), (555, 556, 555), (557, 558, 559), (560, 561, 562), (563, 564, 565), (566, 567, 568), (568, 569, 570), (571, 572, 573), (574, 575, 576), (577, 578, 579), (579, 580, 581), (581, 582, 583), (584, 585, 586), (587, 588, 589), (588, 591, 592), (591, 593, 594), (593, 595, 596), (596, 597, 598), (598, 600, 601), (601, 602, 603), (603, 604, 605), (605, 606, 607), (608, 609, 610), (610, 611, 612), (612, 613, 614), (613, 615, 616), (616, 617, 618), (618, 619, 620), (621, 622, 623), (623, 624, 625), (626, 627, 628), (629, 630, 631), (632, 633, 634), (635, 636, 637), (638, 639, 640), (641, 642, 643), (644, 645, 646), (646, 647, 648), (649, 650, 651), (652, 653, 654), (655, 656, 657), (657, 658, 659), (660, 661, 662), (663, 664, 665), (666, 667, 668), (669, 670, 671), (671, 672, 673), (674, 675, 676), (677, 678, 679), (680, 681, 682), (683, 684, 685), (686, 689, 690), (691, 692, 693), (694, 695, 696), (697, 698, 699), (699, 700, 702), "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i:\n            c += 1\n    return c\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for i in lst:\n        if i == True:\n            count_true += 1\n    return count_true\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    for item in lst:\n        if item:\n            return lst.count(item)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    print('Function count()')\n    print('{} are true'.format(lst.count(True)))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n    \ndef count1(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [x for x in lst if x]\n    \ndef count2(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if x]\n    \ndef count3(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if x and x]\n    \ndef count4(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x and x]\n    \ndef count5(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count6(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count7(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count8(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count9(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count10(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count11(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count12(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count13(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count14(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count15(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count16(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count17(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count18(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count19(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count20(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count21(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count22(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count23(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count24(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count25(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count26(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count27(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count28(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count29(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count30(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count31(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count32(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count33(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count34(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count35(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count36(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count37(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count38(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count39(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not x]\n    \ndef count40(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [1 for x in lst if not "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append((test_tup[0],test_tup[1]))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = []\n    for item in test_list:\n        temp_list.append(item)\n    for item in test_tup:\n        temp_list.append(item)\n    return temp_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    try:\n        for tupl in test_tup:\n            test_list.append(tupl)\n    except TypeError as e:\n        print(e)\n        return None\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # print(test_tup)\n    # print(test_list)\n    if len(test_list) > 1:\n        test_list += tuple(test_tup)\n    else:\n        test_list += test_tup\n    # print(test_list)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    #This code is to sort and combine the three lists.\n    #This function will return the unsorted list as its result.\n    \n    def merge(num1,num2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if num1 is None:\n            return num2\n        if num2 is None:\n            return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    if len(num1) == 0 and len(num2) == 0 and len(num3) == 0:\n        return []\n    elif len(num1) == 0:\n        return num2+num3\n    elif len(num2) == 0:\n        return num1+num3\n    elif len(num3) == 0:\n        return num1+num2\n    elif num1[0] <= num2[0] and num1[0] <= num3[0]:\n        if num1[0] < num2[0]:\n            return num1[0] + merge_sorted_list(num1[1:],num2[1:],num3[1:])\n        else:\n            return merge_sorted_list(num1[1:],num3[1:],num2[1:])\n    elif num2[0] <= num3[0] and num2[0] <= num1[0]:\n        if num2[0] < num3[0]:\n            return num2[0] + merge_sorted_list(num2[1:],num3[1:],num1[1:])\n        else:\n            return merge_sorted_list(num2[1:],num1[1:],num3[1:])\n    else:\n        return num1+num2+num3\n    "
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(num1)):\n        if num1[i] > num2[i]:\n            heapq.heappush(num3,num2[i])\n        else:\n            heapq.heappush(num3,num1[i])\n    return num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    heapq.heappush(num3, num1[0]+num2[0])\n    return heapq.heappop(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num2\n    if num2 is None:\n        return num1\n    if num3 is None:\n        return num1\n    if num1[0] > num2[0] and num1[0] > num3[0]:\n        return num1+num3\n    if num2[0] > num3[0] and num2[0] > num1[0]:\n        return num2+num1\n    if num3[0] > num1[0] and num3[0] > num2[0]:\n        return num3+num2\n    if num2[0] > num1[0] and num2[0] > num3[0]:\n        return num2+num3\n    if num1[0] > num2[0] and num1[0] > num3[0]:\n        return num1+num3\n    if num2[0] > num1[0] and num2[0] > num3[0]:\n        return num2+num3\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    if num1 is None:\n        return merged\n    elif num2 is None:\n        return merged\n    elif num3 is None:\n        return merged\n    else:\n        temp = num1 + num2 + num3\n        if temp == 0:\n            return None\n        elif temp == 1:\n            return num1\n        elif temp == 2:\n            return num2\n        else:\n            return num1 + num2 + num3\ndef quick_sort(lst):\n    '''\n    Use quick sort algorithm to sort the list.\n    '''\n    def quick(lst, start, end):\n        if start >= end:\n            return\n        pivot = start\n        left = start + 1\n        right = end\n        while left <= right:\n            while left <= right and lst[left] <= lst[pivot]:\n                left += 1\n            while left <= right and lst[right] >= lst[pivot]:\n                right -= 1\n            if left <= right:\n                lst[left], lst[right] = lst[right], lst[left]\n                left += 1\n                right -= 1\n        quick(lst, start, right)\n        quick(lst, right + 1, end)\n    quick(lst, 0, len(lst) - 1)\n    return lst\ndef merge_sort(lst):\n    '''\n    Use merge sort algorithm to sort the list.\n    '''\n    def sort(lst):\n        '''\n        Use merge sort algorithm to sort the list.\n        '''\n        def merge(lst, i, j):\n            '''\n            Use merge sort algorithm to sort the list.\n            '''\n            if i >= j:\n                return lst\n            mid = (i+j)//2\n            left = sort(lst[:mid])\n            right = sort(lst[mid:])\n            return merge(left, i, mid) + merge(right, mid+1, j)\n        return merge(lst, 0, len(lst) - 1)\n    return sort(lst)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1,num2,num3],key = lambda x:x[0])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] < num3[k]:\n            merged.append(num1[i])\n            i += 1\n        elif num1[i] > num2[j] > num3[k]:\n            merged.append(num2[j])\n            j += 1\n        else:\n            merged.append(num3[k])\n            k += 1\n    while i < len(num1):\n        merged.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged.append(num3[k])\n        k += 1\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    merged_num = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]<num3[k]:\n            merged_num.append(num1[i])\n            i = i + 1\n        elif num1[i]>num2[j]>num3[k]:\n            merged_num.append(num2[j])\n            j = j + 1\n        elif num1[i]>num2[j] and num1[i]<num3[k]:\n            merged_num.append(num3[k])\n            k = k + 1\n        elif num1[i]<num2[j] and num1[i]>num3[k]:\n            merged_num.append(num1[i])\n            i = i + 1\n    if i==len(num1):\n        while j<len(num2):\n            merged_num.append(num2[j])\n            j = j + 1\n    elif j==len(num2):\n        while k<len(num3):\n            merged_num.append(num3[k])\n            k = k + 1\n    else:\n        while i<len(num1):\n            merged_num.append(num1[i])\n            i = i + 1\n    return merged_num\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # O(1) time complexity\n    # O(n) space complexity\n    \n    # Write your code here.\n    result = 0\n    \n    for i in range(n):\n        result += int(s[i])\n    \n    # O(1) time complexity\n    # O(n) space complexity\n    return result % 10\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    p = [1] * n\n    for i in range(n): \n        if s[i] % 2 == 1:\n            p[i] = p[i] * 2\n        else:\n            p[i] = p[i] * 2 + 1\n    ans = 0\n    for i in range(n): \n        ans += p[i]\n    return ans \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    #Initializing the Count variable to 0 \n    Count = 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        result += int(s[i])\n    if result%2!= 0:\n        return result\n    else:\n        return result+1\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        result += int(s[i])\n    if result%2 == 0:\n        return result\n    else:\n        return result+1\ndef odd_and_even(s,n): \n    '''\n    Write a python function to find the number of odd numbers and even numbers in the given binary string s.\n    '''\n    result = 0\n    for i in range(n):\n        result += int(s[i])\n    result = result//2\n    if result%2!= 0:\n        return result\n    else:\n        return result+1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c = 0\n    for i in range(n):\n        if s[i] == \"1\":\n            c += 1\n        if s[i] == \"0\":\n            if c % 2 == 0:\n                c -= 1\n    return c\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return even_reverse(odd_reverse(s,n))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # this function also returns the sum of odd values\n    #   this can be done using asum(((2^n) - 1) * (2^n - 1))\n    # return n * (2**n-1) - sum(map(int,s.split('0')))\n    \n    # insert your code here\n    even_sum = 0\n    for i in range(0,len(s)):\n        if int(s[i]) % 2 == 0:\n            even_sum += int(s[i])\n    if even_sum == 0:\n        return int(n)\n    else:\n        return n * (2**(n-1)) - even_sum\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Extra Credit \n    # https://www.geeksforgeeks.org/check-if-number-is-even-or-odd-2-digit-number/\n    \n    def isEven(x):\n        return x % 2 == 0\n    \n    def isOdd(x):\n        return x % 2!= 0\n    \n    a = n \n    while a >= 8:\n        odd_data = list(s[a-1:a+2])\n        if isOdd(int(odd_data[0])):\n            return len(odd_data[1:])\n        else:\n            a -= 1\n    \n    return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # if the number is even\n    if n % 2 == 0:\n        # find the length of the string\n        l = len(s)\n        # count the number of odd values \n        num = 0\n        # iterate through the string\n        for i in range(0,l):\n            if (s[i] == \"1\"):\n                # count the odd values\n                if s[i] == \"0\":\n                    num = num + 1\n                else:\n                    num = num + 2\n    # if the number is odd\n    else:\n        # count the odd values\n        num = 2\n        # iterate through the string\n        for i in range(0,l):\n            if (s[i] == \"0\"):\n                num = num + 1\n            else:\n                num = num + 1\n    return num\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    string = s\n    for i in range(0,n):\n        # print(string)\n        # print(string[::-1])\n        string = string[1:]+string[0]\n        string = string[::-1]\n        if string[0] == '1':\n            odd += 1\n            string = string[::-1]\n        else:\n            string = string[1:]+string[0]\n            string = string[::-1]\n        # print(string)\n    return odd\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested in nestedlist:\n        if not nested:\n            break\n        common_elements.append(nested[0])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    temp_list = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            for j in i:\n                if isinstance(j, list):\n                    temp_list.extend(j)\n                else:\n                    temp_list.append(j)\n        else:\n            temp_list.append(i)\n    return temp_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    commonlist = []\n    for i in nestedlist:\n        if len(i) > 0:\n            for j in i:\n                if j in commonlist:\n                    commonlist.remove(j)\n    return commonlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for item in nestedlist:\n        if type(item) is list:\n            common_elements.extend(common_in_nested_lists(item))\n        else:\n            common_elements.append(item)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Find the elements in nested list\n    elements_list = []\n    for element in nestedlist:\n        elements_list.extend(element)\n    \n    # Check if any element in the list is in the elements list\n    for element in elements_list:\n        if element not in nestedlist:\n            return False\n    \n    # Return True if all elements are in the elements list\n    return True\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #check if input is not a list\n    if not type(nestedlist) == list:\n        raise TypeError(\"nestedlist must be a list\")\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # iterate through each nested list\n    for element in nestedlist:\n        # iterate through each nested element\n        for nestedelement in element:\n            # if nestedelement is one of those three characters, append to list\n            if any(char in nestedelement for char in ['1', '2', '3']):\n                # append list\n                nestedlist.append(nestedelement)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for list_elements in nestedlist:\n        for element in list_elements:\n            if element in common_elements:\n                return element\n            common_elements.add(element)\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist[0])):\n        for j in range(len(nestedlist)):\n            if nestedlist[j][i] in common:\n                return nestedlist[j][i]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = set()\n    for nestedlist in nestedlist:\n        common_list = common_list.union(nestedlist)\n    return common_list\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]!= None:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i)!= dict:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_dit = True\n    for i in list1:\n        if len(i) == 0:\n            empty_dit = False\n    return empty_dit\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == {}:\n            list1[i] = {}\n            list1 = empty_dit(list1)\n        else:\n            pass\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for dict in list1:\n        count += 1\n        for k, v in dict.items():\n            if isinstance(v, dict):\n                count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n        \ndef dict_to_array(list1):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    arr = []\n    for k, v in list1.items():\n        if isinstance(v, dict):\n            arr.append(v)\n    return arr\n            \ndef array_to_dict(arr):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    dict1 = {}\n    for i in arr:\n        for j in i:\n            if isinstance(j, dict):\n                dict1[j[\"key\"]] = j\n    return dict1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return len(list1) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(dict.values()==[])\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(i.values() == {} for i in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x==None:\n            return True\n    return False\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the given tuple into an int\n    int_list = list(map(int, nums))\n    # now we need to convert all the ints to the highest possible int\n    return max(int_list)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(map(int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return tuple(map(lambda x: int(x), list(str(x) for x in nums)))\n    \ndef main():\n    '''\n    You can test your solution by uncommenting the code below.\n    '''\n    '''\n    for i in range(0, 100, 10):\n        print(i)\n    '''\n    '''\n    # Write your solution here.\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_str = \"\".join(map(str, nums))\n    return int(tuple_str)"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    assert nums[-1] >= 0, \"Positive integer must be positive.\"\n    return reduce(lambda x, y: x * 10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(n) for n in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res *= 10\n        res += num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = list(map(int, nums))\n    return int_list[0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # TODO: convert the tuple to a single integer\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        for j in i:\n            if isinstance(j, list):\n                for k in j:\n                    if isinstance(k, float):\n                        new_list.append(k)\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        if isinstance(element,list):\n            test_list = list_to_float(element)\n        elif element:\n            test_list = float(element)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for el in test_list:\n            if isinstance(el, list):\n                test_list.extend(list_to_float(el))\n            else:\n                test_list.append(float(el))\n        return test_list\n    except ValueError as error:\n        raise error\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    if test_list!= []:\n        for test in test_list:\n            result.append([float(i) for i in test])\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(num) for num in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    \n    for item in test_list:\n        for element in item:\n            try:\n                float(element)\n                float_list.append(float(element))\n            except:\n                print(f'The element is not a convertible number: {element}')\n    \n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    # Convert each list into a float\n    f_list = []\n    for list in test_list:\n        temp_list = []\n        for item in list:\n            if type(item) == list:\n                for item_2 in item:\n                    temp_list.append(item_2)\n            else:\n                temp_list.append(item)\n        f_list.append(temp_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [round(elem, 2) for elem in test_list]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # For each of the elements in the list, convert them to float.\n    # For the first element, convert it to float (should be the only element),\n    # so the first element will have a value of 1.0\n    # For the rest of the elements, convert them to floats.\n    # Then return the converted values.\n    def list_to_float(test_list):\n        for element in test_list:\n            if isinstance(element, list):\n                list_to_float(element)\n            elif element == 1.0:\n                list_to_float([1.0])\n            else:\n                list_to_float([float(x) for x in element])\n    \n    test_list = test_list[0] if test_list else []\n    test_list = list(map(float, test_list))\n    test_list = list_to_float(test_list)\n    \n    # The last element is always the only element.\n    # Therefore, the last element will be 1.0.\n    # This may be a problem, but it's an easy way to fix it.\n    if test_list[-1] == 1.0:\n        test_list.pop()\n    \n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.strip().split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    str_list = string.split(\" \")\n    return list(str_list)\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # your code goes here\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [string[i:i+7] for i in range(0, len(string), 7)]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [char.strip() for char in string.split()] \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    def count_uniq(arr):\n        '''\n        return the number of occurrences of the element in arr in a sorted array\n        '''\n        count = 0\n        j = 0\n        \n        while j < len(arr):\n            if arr[j]!= arr[j - 1]:\n                count += 1\n            j += 1\n        return count\n    \n    n = len(arr)\n    \n    # The two pointers in the function can be switched.\n    i = 0\n    j = 0\n    \n    # Start by setting the first index to i.\n    first_index = i\n    \n    # Start by comparing with the second index to j.\n    # If the first index is smaller than the second index, then\n    # the second index is the first index. If the first index is larger,\n    # the second index is the first index.\n    while i < n:\n        if arr[i]!= arr[j]:\n            if arr[i] < arr[j]:\n                i += 1\n            else:\n                j += 1\n        else:\n            i += 1\n    \n    # Return the first index.\n    return first_index\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    num_occur = 1\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            num_occur += 1\n    return arr[num_occur-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    counts = {}\n    for i in range(len(arr)):\n        if arr[i] in counts:\n            counts[arr[i]] += 1\n        else:\n            counts[arr[i]] = 1\n    for k in counts:\n        if counts[k] == 1:\n            return k\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #we can use python built in function 'x in arr'\n    #sorted array\n    arr.sort()\n    #if sorted array has only one element than we will return the element\n    if len(arr)==1:\n        return arr[0]\n    #we will iterate through the array and if we have to go through every element we can use 'if'\n    #and if the element is the same, we will keep going through the array and just return the first element\n    else:\n        count=0\n        for i in range(len(arr)):\n            if arr[i]!=arr[i+1]:\n                count+=1\n        return arr[count-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    array = sorted(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    size = len(arr)\n    i = 0\n    j = 0\n    n = len(arr)\n    found = False\n    while (i < size and j < n):\n        if (arr[j] == arr[i]):\n            i += 1\n            j += 1\n        else:\n            if (j == n):\n                found = True\n            if found:\n                j += 1\n            else:\n                i += 1\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    sorted_arr = sorted(arr)\n    \n    # test to see if it's a sorted array\n    if len(arr) == 0:\n        return False\n    \n    # test to see if it's the first element in the array\n    if len(arr) == 1:\n        if arr[0] == sorted_arr[0]:\n            return True\n    \n    # this is an arbitrary nested loop, but we can use it to iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] == sorted_arr[i]:\n            return True\n    \n    return False\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Write your code here.\n    seen = set()\n    for i, e in enumerate(arr):\n        if e not in seen:\n            seen.add(e)\n            if i == len(arr) - 1:\n                return e\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    search_list = {}\n    for element in arr:\n        if element not in search_list:\n            search_list[element] = 1\n        else:\n            search_list[element] += 1\n    return max(search_list, key=search_list.get)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_p = 0\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            \n            if list1[i][0] > list1[j][0] and list1[j][0] > list1[i][0]:\n                p = list1[i] + list1[j]\n                if p > max_p:\n                    max_p = p\n    return max_p\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return (list1[0])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            list2.append(list1[i][j])\n    max_product = max(list2)\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            if(list1[i][j] == max_product):\n                if(i < j):\n                    return list1[i]*list1[j]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(map(max, list1))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #Hint: You can use the list function to iterate through the list.\n    #Hint: You can write any code that you want to do with the above function\n    #Make sure to check if your code is working properly!\n    \n    if len(list1) < 2:\n        print(\"ERROR: No elements in the list.\")\n    elif len(list1) == 2:\n        return list1[0]*list1[1]\n    elif len(list1) == 3:\n        return list1[0]*list1[1]*list1[2]\n    else:\n        max_1 = list1[0]*list1[1]\n        max_2 = list1[0]*list1[2]\n        for i in range(2,len(list1)):\n            if max_1 > max_2:\n                max_1 = max_2\n                max_2 = list1[i]\n            elif max_2 > max_1:\n                max_2 = max_1\n                max_1 = list1[i]\n        return max_1*max_2\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = []\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][0]<list1[j][0]):\n                max_product=max(list1[i][0],list1[j][0],list1[i][1],list1[j][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = -1\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                if max < abs(list1[i][0] * list1[j][1]) :\n                    max = abs(list1[i][0] * list1[j][1])\n                    pair = (list1[i][0],list1[j][1])\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = list1[0] * list1[1]\n    for i in range(1,len(list1)):\n        result = max(result,(list1[i]*list1[i-1]))\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #convert the list to tuple\n    tuple = list1[:]\n    for i in range(len(tuple)):\n        for j in range(i+1, len(tuple)):\n            if tuple[i][0] > tuple[j][0] and tuple[i][1] < tuple[j][1]:\n                tuple[i], tuple[j] = tuple[j], tuple[i]\n    print(tuple)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit <= 1:\n        return 1\n    return amicable_numbers_sum(limit - 1) + amicable_numbers_sum(limit - 2)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = [None] * limit\n    amicable[0] = 1\n    amicable_list = []\n    for i in range(1, limit):\n        if amicable[i] is None:\n            amicable_list.append(i)\n            for j in range(i, limit):\n                if i!= j and i + j in amicable_list and j - i in amicable_list:\n                    amicable[i] = j\n    amicable_list.sort()\n    result = 0\n    for i in amicable_list:\n        result += i\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # set up variables\n    amicable_numbers = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1,limit+1):\n        num_2 = 0\n        num_1 = 1\n        while num_2!= num:\n            if num%num_1 == 0 and num%num_2 == 0:\n                num_2+=1\n            else:\n                num_1+=1\n        if num_1 > 2:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [\n    ]\n    amicable_numbers = [\n        num\n        for num in range(1, limit)\n        if not any(\n            num % denominator == num // denominator\n            for denominator in range(2, int(num ** 0.5))\n        )\n    ]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n            if len(amicable_numbers) > 1:\n                amicable_numbers_sum += amicable_numbers_sum(amicable_numbers[1:])\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_numbers = 0\n    amicable_numbers = []\n    # sum the natural numbers\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if i % 2 == 0:\n                sum_numbers += i\n            elif i % 3 == 0:\n                sum_numbers += i\n            elif i % 5 == 0:\n                sum_numbers += i\n    print(sum_numbers)\n    return sum_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        num = factorial(num)\n        if num == int(num) and int(num) not in amicable_sum:\n            amicable_sum += int(num)\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers=[]\n    sum=0\n    \n    for n in range(1,limit+1):\n        \n        if n%2==0:\n            num=n\n        else:\n            num=n//2\n            \n        if num==0:\n            continue\n            \n        for i in range(1,int(num**0.5)+1):\n            if num%i==0:\n                break\n                \n        else:\n            if num!=1:\n                amicable_numbers.append(num)\n                \n    sum=sum+sum(amicable_numbers)\n    \n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1, limit + 1) if is_amicable(i) and sum(amicable_numbers)!= i]\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if type(a)!= complex:\n        return angle_complex(a,b)\n    if b == 0:\n        return 0\n    x = cmath.sqrt(a.real**2 + a.imag**2)\n    y = -a.imag\n    return 2*cmath.asin(y/x)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c1 = a.real*b.real - a.imag*b.imag\n    c2 = a.imag*b.real + a.real*b.imag\n    c3 = cmath.phase(c1)\n    c4 = cmath.phase(c2)\n    if c4 >= 0 and c3 >= 0:\n        return c4\n    elif c1 > 0 and c2 > 0:\n        return c1\n    elif c2 > 0 and c3 > 0:\n        return c2\n    elif c1 < 0 and c2 < 0:\n        return c1\n    elif c2 < 0 and c3 < 0:\n        return c2\n    elif c1 < 0 and c3 < 0:\n        return c1\n    elif c2 >= 0 and c3 >= 0:\n        return c1\n    else:\n        return c3\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==0 and b==0:\n        return 0\n    if a==0:\n        return math.acos(b/abs(b))\n    if b==0:\n        return math.acos(a/abs(a))\n    if a<0 and b<0:\n        return -angle_complex(b,a)\n    if a>0 and b<0:\n        return angle_complex(a,b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==b:\n        return 0.0\n    if a.real!= b.real:\n        return 0.0\n    if a.imag!= b.imag:\n        return 0.0\n    #a complex number\n    #b complex number\n    #solution: angle = atan2(b.imag,b.real)\n    a = cmath.sqrt(a.real**2 + a.imag**2)\n    b = cmath.sqrt(b.real**2 + b.imag**2)\n    c = 1/cmath.sqrt(a**2 + b**2)\n    solution = cmath.acos(b/a)\n    #print'solution:'+ str(solution)\n    return solution\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    if b==0:\n        if a==0:\n            return 0\n        else:\n            return cmath.acos(a/abs(a))\n    \n    if a==0:\n        if b==0:\n            return cmath.acos(a)\n        else:\n            return -cmath.acos(b)\n    \n    d=abs(b**2-a**2)\n    if d<0:\n        return 0\n    elif d==0:\n        return cmath.acos(a+b*1j)\n    else:\n        return cmath.acos(a-b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = abs(a.real*b.imag+b.real*a.imag)\n    return angle\ndef sin(x):\n    '''\n    Write a function to get the sine of a number.\n    '''\n    return cmath.sin(x)\ndef cos(x):\n    '''\n    Write a function to get the cosine of a number.\n    '''\n    return cmath.cos(x)\ndef tan(x):\n    '''\n    Write a function to get the tangent of a number.\n    '''\n    return cmath.tan(x)\ndef exp(x):\n    '''\n    Write a function to get the exponential of a number.\n    '''\n    return cmath.exp(x)\ndef sqrt(x):\n    '''\n    Write a function to get the square root of a number.\n    '''\n    return cmath.sqrt(x)\ndef log(x):\n    '''\n    Write a function to get the logarithm of a number.\n    '''\n    return cmath.log(x)\ndef asin(x):\n    '''\n    Write a function to get the inverse sine of a number.\n    '''\n    return cmath.asin(x)\ndef acos(x):\n    '''\n    Write a function to get the inverse cosine of a number.\n    '''\n    return cmath.acos(x)\ndef atan(x):\n    '''\n    Write a function to get the inverse tangent of a number.\n    '''\n    return cmath.atan(x)\ndef asinh(x):\n    '''\n    Write a function to get the inverse hyperbolic sine of a number.\n    '''\n    return cmath.asinh(x)\ndef acosh(x):\n    '''\n    Write a function to get the inverse hyperbolic cosine of a number.\n    '''\n    return cmath.acosh(x)\ndef atanh(x):\n    '''\n    Write a function to get the inverse hyperbolic tangent of a number.\n    '''\n    return cmath.atanh(x)\ndef sinh(x):\n    '''\n    Write a function to get the hyperbolic sine of a number.\n    '''\n    return cmath.sinh(x)\ndef cosh(x):\n    '''\n    Write a function to get the hyperbolic cosine of a number.\n    '''\n    return cmath.cosh(x)\ndef tanh(x):\n    '''\n    Write a function to get the hyperbolic tangent of a number.\n    '''\n    return cmath.tanh(x)\ndef pow(x, n):\n    '''\n    Write a function to raise a number to n places.\n    '''\n    return cmath.pow(x, n)\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    return cmath.factorial(n)\ndef gcd(a,b):\n    '''\n    Write a function to get the greatest common divisor of two numbers.\n    '''\n    return cmath.gcd(a,b)\ndef mod(a,b):\n    '''\n    Write a function to compute the modular multiplicative inverse of two numbers.\n    '''\n    return cmath.mod(a,b)\ndef quadratic(a,b,c):\n    '''\n    Write a function to compute the quadratic equation of a number.\n    '''\n    return cmath.quadratic(a,b,c)\ndef elliptic(a,b):\n    '''\n    Write a function to compute the elliptic equation of a number.\n    '''\n    return cmath.elliptic(a,b)\ndef wenjian(x):\n    '''\n    Write a function to get the WENJI number.\n    '''\n    return cmath.exp(x)\ndef gauss(x):\n    '''\n    Write a function to get the gaussian number.\n    '''\n    return cmath.exp(-x)\ndef laguerre(x):\n    '''\n    Write a function to get the LAGUERRE number.\n    '''\n    return cmath.exp(x)\ndef isqrt(x):\n    '''\n    Write a function to get the square root of a number.\n    '''\n    return cmath.sqrt(x)\ndef quadratic_congruential(a,b):\n    '''\n    Write a function to compute the quadratic congruential equation of a number.\n    '''\n    return cmath.quadr(a,b)\ndef polynomial(a,b):\n    '''\n    Write a function to get the polynomial equation of a number.\n    '''\n    return cmath.poly(a,b)\ndef polinomial_congruential(a,b):\n    '''\n    Write a function to compute the polynomial congruential equation of a number.\n    '''\n    return cmath.poli(a,b)\ndef floor(x):\n    '''\n    Write a function to get the floor of a number.\n    '''\n    return cmath.floor(x)\ndef ceil(x):\n    '''\n    Write a function to get the ceiling of a number.\n    '''\n    return cmath.ceil(x)\ndef trunc(x):\n    '''\n    Write a function to get the truncated value of a number.\n    '''\n    return cmath.trunc(x)\ndef ceilm(x,m):\n    '''\n    Write a function to get the ceiling of a number using the modular exponentiation.\n    '''\n    return cmath.ceilm(x,m)\ndef asinm(x,m):\n    '''\n    Write a function to get the inverse asinm of a number.\n    '''\n    return cmath.asinm(x,m)\ndef asinmm(x,m):\n    '''\n    Write a function to get the inverse asinm of a number using the modular exponentiation.\n    '''\n    return cmath.asinm(x,m)\ndef atanm(x,m):\n    '''\n    Write a function to get the inverse asinm of a number using the modular exponentiation.\n    '''\n    return cmath.asinm(x,m)\ndef atanm(x,m):\n    '''\n    Write a function to get the inverse asinm of a number using the modular exponentiation.\n    '''\n    return cmath.asinm(x,m)\ndef logm(x,m):\n    '''\n    Write a function to get the modular logarithm of a number.\n    '''\n    return cmath.logm(x,m)\ndef logm2(x,m):\n    '''\n    Write a function to get the modular logarithm of a number using the modular exponentiation.\n    '''\n    return cmath.logm(x,m)\ndef logm3(x,m):\n    '''\n    Write a function to get the modular logarithm of a number using the modular exponentiation.\n    '''\n    return cmath.logm(x,m)\ndef logm4(x,m):\n    '''\n    Write a function to get the modular logarithm of a number using the modular exponentiation.\n    '''\n    return cmath.logm(x,m)\ndef logm5(x,m):\n    '''\n    Write a function to get the modular logarithm of a number using the modular exponentiation.\n    '''\n    return cmath.logm(x,m)\ndef logm6(x,m):\n    '''\n    Write a function to get the modular logarithm of a number using the modular exponentiation.\n    '''\n    return cmath.logm(x,m)\ndef logm7(x,m):\n    '''\n    Write a function to get the modular logarithm of a number using the modular exponentiation.\n    '''\n    return cmath.logm(x,m)\ndef logm8(x,m):\n    '''\n    Write a function to get the modular logarithm of a number using the modular exponentiation.\n    '''\n    return cmath.logm(x"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return acos(c.real)\ndef angle_sine(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.real)\ndef angle_cosine(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.imag)\ndef angle_tangent(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return atan2(a.imag,a.real)\ndef angle_arccos(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return atan2(a.real,cmath.sqrt(a.imag**2 + a.imag**2))\ndef angle_arctan2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return atan2(a.imag,cmath.sqrt(a.real**2 + b.real**2))\ndef angle_arctan(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return atan2(b.imag,cmath.sqrt(b.real**2 + a.real**2))\ndef angle_cot(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cot(a.imag)\ndef angle_sin(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sin(a.imag)\ndef angle_csc(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.csc(a.imag)\ndef angle_sec(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)\ndef angle_coth(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cosh(a.imag)\ndef angle_csch(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/cmath.sqrt(a.imag**2 + 1)\ndef angle_coth(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cosh(a.imag)/cmath.sqrt(a.imag**2 + 1)\ndef angle_cotd(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/cmath.sqrt(a.imag**2 + 1)\ndef angle_csot(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cosh(a.imag)/cmath.sqrt(a.imag**2 + 1)\ndef angle_sind(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.real)/a.imag\ndef angle_cosd(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.imag)/a.real\ndef angle_sindg(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.real)/a.imag*cmath.sinh(a.imag)/a.imag\ndef angle_cosdg(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.imag)/a.real*cmath.sinh(a.real)/a.real\ndef angle_sinh(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real\ndef angle_cosh(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cosh(a.imag)/a.real\ndef angle_csch(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real*cmath.sqrt(a.imag**2 + 1)\ndef angle_csch(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real*cmath.sqrt(a.imag**2 + 1)\ndef angle_sinh(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real\ndef angle_cosh(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cosh(a.imag)/a.real\ndef angle_csch(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real*cmath.sqrt(a.imag**2 + 1)\ndef angle_csch(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real*cmath.sqrt(a.imag**2 + 1)\ndef angle_coth(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cosh(a.imag)/a.real\ndef angle_csch(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real*cmath.sqrt(a.imag**2 + 1)\ndef angle_coth(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.cosh(a.imag)/a.real\ndef angle_cotd(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real*cmath.sqrt(a.imag**2 + 1)\ndef angle_csot(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.sinh(a.imag)/a.real\ndef angle_tan(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.real)\ndef angle_tanh(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.tanh(a.imag)\ndef angle_tanhg(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.tanh(a.imag*cmath.sqrt(a.imag**2 + 1))\ndef angle_tanhg(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.tanh(a.imag*cmath.sqrt(a.imag**2 + 1))*cmath.sqrt(a.imag**2 + 1)\ndef angle_cotg(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.imag)\ndef angle_cotg(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.imag)*cmath.sqrt(a.imag**2 + 1)\ndef angle_cotg"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==0:\n        if b<0:\n            return cmath.pi*b/2\n        else:\n            return 0\n    else:\n        if a<0:\n            return cmath.pi*b/2+cmath.acos(b)\n        else:\n            return cmath.acos(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        angle = cmath.phase(complex(a,b))\n        return angle\n    except ValueError:\n        return 'Cannot find the angle.'\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ab = cmath.exp(1j*(b.real-a.real))\n    ab = ab / (1j*a.imag)\n    ab = cmath.phase(ab)\n    ab = ab / (1j*b.imag)\n    ab = cmath.phase(ab)\n    return ab\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    counter = 0 \n    for i in range(len(string)): \n        if string[i] == '0': \n            counter += 1\n    return counter \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l_string = 0\n    r_string = 0\n    #declaring a new empty list to store our result\n    res = []\n    #loop through every character in string\n    for i in string:\n        #if we found 0\n        if i == '0':\n            l_string += 1\n        #if we found 1\n        if i == '1':\n            r_string += 1\n        #if we found 0 and 1 \n        else:\n            res.append(l_string-r_string)\n            #reset l_string\n            l_string = 0\n            r_string = 0\n    #returns the sum of the number of 0s and number of 1s in the given string\n    return sum(res)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total_0_sub = 0\n    total_1_sub = 0\n    for i in string:\n        if i == '0':\n            total_0_sub += 1\n        else:\n            total_1_sub += 1\n    if total_0_sub > total_1_sub:\n        return total_0_sub\n    elif total_0_sub < total_1_sub:\n        return total_1_sub\n    else:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    \n    for i in range(len(string)):\n        count = 0\n        for j in range(i,len(string)):\n            if string[j] == '0':\n                count += 1\n            else:\n                count = 0\n                \n            if count > max_diff:\n                max_diff = count\n                \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # start at the beginning and make a list of the consecutive 0s\n    consecutive_zeros = [0]\n    count = 0\n    for i in string:\n        if i == '0':\n            consecutive_zeros.append(count)\n        else:\n            count += 1\n    # end the loop\n    return max(consecutive_zeros) - len(string)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    elif len(string) == 1:\n        return 1\n    else:\n        n0 = 0\n        n1 = 0\n        for i in range(len(string)):\n            if string[i] == '0':\n                n0 += 1\n            elif string[i] == '1':\n                n1 += 1\n        return max(n0 - n1, n1 - n0)\n        \n        \n    \nprint(find_length
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len(string) - string.count('1')\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Your code here\n    num = 0\n    sub = \"\"\n    for i in string:\n        if i == \"0\":\n            num += 1\n        else:\n            num -= 1\n        if num < 0:\n            num = 0\n        if num > 0:\n            sub = str(num)\n            break\n    if num == 0:\n        return 0\n    else:\n        return num - sub\n    # Write your code here\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len(string)-string.count('0') - string.count('1')\n    \nstring = input()\nl = find_length(string)\nprint(l"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total_zeroes = 0\n    total_ones = 0\n    temp = ''\n    for i in range(len(string)):\n        if string[i] == '0':\n            total_zeroes += 1\n        else:\n            total_ones += 1\n        if total_zeroes!= 0 and total_ones!= 0:\n            temp += string[i]\n    return int(temp"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return 0\n    if b==0:\n        return 1\n    if a==b:\n        return 0\n    return sum(a,b//2)+sum(a,b//2+1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # count number of common divisors of two numbers\n    c = 0\n    for i in range(1,a+1):\n        if (a%i == 0) and (b%i == 0):\n            c+=1\n    return c\n    \ndef is_prime(n): \n    '''\n    Check if a number is prime or not.\n    '''\n    if (n < 2): \n        return False\n    if (n == 2): \n        return True\n    if (n%2 == 0 or n%3 == 0): \n        return False\n    i = 5\n    while (i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i += 6\n    return True\n    \ndef comb(arr,x): \n    '''\n    Find the combinations of elements in a given array whose sum is x.\n    '''\n    if x == 0: \n        return [[]]\n    if x < 0: \n        return []\n    res = []\n    for i in arr: \n        if (x - sum(i)) in i: \n            res += comb(i,x-sum(i))\n    return res\n    \ndef f(x,i,arr): \n    '''\n    Given a number of common divisors of two numbers, write a function that returns \n    the minimum common divisors of two numbers. The function returns -1 if it does \n    not have a common divisor.\n    '''\n    if len(arr) < 2: \n        return -1\n    if sum(arr) == x: \n        return -1\n    \n    if x == 0: \n        return []\n    if x < 0: \n        return []\n    \n    for i in arr: \n        res = f(x-sum(i),i,arr)\n        if res!= -1: \n            return min(res,x-sum(i))\n    return -1\n    \ndef minCom(arr): \n    '''\n    Find the minimum common divisor of a given array.\n    '''\n    return f(sum(arr),0,arr)\n    \ndef main(): \n    '''\n    Given a number, find the minimum common divisors of a given array.\n    '''\n    x = int(input())\n    arr = [int(x) for x in input().split()]\n    print(f(sum(arr),0,arr))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    c = a + b\n    # print(f'c = {c}')\n    \n    if c % 2 == 0:\n        return c/2\n    elif c % 2 == 1:\n        return c\n    else:\n        return (c/2)\n    # print(f'c = {c}')\n    #print(f'c % 2 = {c % 2}')\n    #return c // 2\n    \n    # for i in range(a,b+1):\n    #     if a % i == 0 and b % i == 0:\n    #         return i\n    \n    # return -1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Method 1\n    import math\n    n = max(a,b)\n    if a % n == 0 and b % n == 0:\n        return math.gcd(a,b)\n    if a % n == 0:\n        return a // math.gcd(a,b)\n    if b % n == 0:\n        return b // math.gcd(a,b)\n    #Method 2\n    #print(a,b)\n    #print(a/b)\n    while(a % b!= 0):\n        if a % b == 0:\n            return a // b\n        b -= 1\n    return b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Write your code here.\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 and b == 2:\n        return 1\n    elif a == 1:\n        return b\n    elif b == 1:\n        return a\n    \n    elif a % b == 0:\n        return a\n    elif b % a == 0:\n        return b\n    elif a % b!= 0:\n        return a + b\n    else:\n        return a * b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    if a == b:\n        return a\n    if a % 2 == 0:\n        a = a // 2\n    else:\n        b = b // 2\n    r = 1\n    while r <= a:\n        if a % r == 0:\n            return a * r\n        else:\n            r = r + 1\n    return -1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a==b): \n        return a \n    elif(a%b==0):\n        return a//b\n    else:\n        return b//a\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,b+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\ndef add(a,b): \n    '''\n    Write a python function to add two given integers.\n    '''\n    return a + b\ndef subtract(a,b): \n    '''\n    Write a python function to subtract two given integers.\n    '''\n    return a - b\ndef multiply(a,b): \n    '''\n    Write a python function to multiply two given integers.\n    '''\n    return a * b\ndef divide(a,b): \n    '''\n    Write a python function to divide two given integers.\n    '''\n    return a / b\ndef square(a): \n    '''\n    Write a python function to square a given integer.\n    '''\n    return a ** 2\ndef cube(a): \n    '''\n    Write a python function to cube a given integer.\n    '''\n    return a ** 3\ndef power(a,b): \n    '''\n    Write a python function to raise a given number to the power of b.\n    '''\n    return a**b\ndef mod(a,b): \n    '''\n    Write a python function to calculate the remainder of b divided by a.\n    '''\n    return a % b\ndef add(a,b): \n    '''\n    Write a python function to add two given numbers.\n    '''\n    return a + b\ndef minus(a,b): \n    '''\n    Write a python function to subtract two given numbers.\n    '''\n    return a - b\ndef mod(a,b): \n    '''\n    Write a python function to calculate the remainder of b divided by a.\n    '''\n    return a % b\ndef mul(a,b): \n    '''\n    Write a python function to multiply two given numbers.\n    '''\n    return a * b\ndef divide(a,b): \n    '''\n    Write a python function to divide two given numbers.\n    '''\n    return a / b\ndef sub(a,b): \n    '''\n    Write a python function to subtract two given numbers.\n    '''\n    return a - b\ndef div(a,b): \n    '''\n    Write a python function to divide two given numbers.\n    '''\n    return a / b\ndef pow(a,b): \n    '''\n    Write a python function to raise a given number to the power of b.\n    '''\n    return a ** b\ndef sq(a): \n    '''\n    Write a python function to square a given number.\n    '''\n    return a ** 2\ndef cube(a): \n    '''\n    Write a python function to cube a given number.\n    '''\n    return a ** 3\ndef div(a,b): \n    '''\n    Write a python function to divide two given numbers.\n    '''\n    return a % b\ndef main(): \n    print(\"Sum:\", sum(1,2))\n    print(\"Multiply:\", multiply(2,3))\n    print(\"Subtract:\", subtract(5,3))\n    print(\"Divide:\", divide(5,3))\n    print(\"Square:\", square(5))\n    print(\"Cube:\", cube(5))\n    print(\"Power:\", power(2,3))\n    print(\"Mod:\", mod(2,3))\n    print(\"Add:\", add(2,3))\n    print(\"Subtract:\", subtract(2,3))\n    print(\"Divide:\", divide(2,3))\n    print(\"Square:\", square(2))\n    print(\"Cube:\", cube(2))\n    print(\"Power:\", power(2,3))\n    print(\"Mod:\", mod(2,3))\n    print(\"Add:\", add(2,3))\n    print(\"Subtract:\", subtract(2,3))\n    print(\"Divide:\", divide(2,3))\nmain()"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for i in range(1, min(a,b)+1):\n        if a%i==0 and b%i==0:\n            c+=i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    if a > 0 and b > 0:\n        for i in range(1,a + 1):\n            if a % i == 0 and b % i == 0:\n                c.append(i)\n        return sum(c)\n    else:\n        return -1\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Write your code here\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # TODO\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = x * y\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = 1\n    for i in range(x):\n        z *= y\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str.split():\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    if len(str) < n:\n        return result\n    \n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str1 = str.lower()\n    words = str1.split()\n    maxlen = 0\n    for i in words:\n        if len(i) > maxlen:\n            maxlen = len(i)\n    return str1[0:maxlen]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = [i for i in str.split()]\n    words.sort()\n    s = 0\n    for i in words:\n        if s == n:\n            break\n        if len(i) > s:\n            s += 1\n    return s\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if len(str) >= n:\n        return list(str)\n    return []\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    long_words = []\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    for word in words:\n        if len(word) > n:\n            return word\n    return ''\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words_sorted = sorted(str.split(','))\n    for word in words_sorted:\n        if len(word) > n:\n            return True\n    return False\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import string\n    import re\n    pattern = '^[a-zA-Z]+$'\n    flag = 0\n    res = []\n    for word in str:\n        if re.match(pattern, word):\n            flag = 1\n            if len(word) > n:\n                res.append(word)\n    if flag == 0:\n        return False\n    else:\n        return res\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Iterate through the matrix and find the rows and columns of the matrix.\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] == 1:\n                return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    \n    return True\n    \n    "
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Your code goes here\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if my_matrix[i][j] == 1:\n                return False\n    return True\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #print(my_matrix)\n    is_magic_square = False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    cols = len(my_matrix)\n    rows = len(my_matrix[0])\n    for r in range(rows):\n        for c in range(cols):\n            if my_matrix[r][c]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    check = [[0 for x in range(2)] for x in range(2)]\n    check[0][0] = 1\n    check[0][1] = 1\n    check[1][0] = 1\n    check[1][1] = 1\n    for i in range(2, len(my_matrix)):\n        for j in range(2, len(my_matrix[i])):\n            check[i][j] = 1 if my_matrix[i][j] == '#' else 0\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic_square = True\n    for row in my_matrix:\n        for element in row:\n            if element == 0:\n                is_magic_square = False\n    return is_magic_square\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if i==j:\n                sum = sum + my_matrix[i][j]\n    if sum==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in range(len(my_matrix)):\n        if len(my_matrix[0]) == len(my_matrix[row]):\n            for col in range(len(my_matrix[0])):\n                if my_matrix[row][col] == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    def get_occurences(nums, key):\n        if key not in nums:\n            return\n        occurences = 0\n        for i in nums[key]:\n            occurences += 1\n        return occurences\n    return max(map(get_occurences, nums, set()), key=lambda x:x[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    freq[0] = 1\n    for num in nums:\n        freq[num] += 1\n    for i, num in enumerate(nums):\n        if freq[num] > freq[i]:\n            return i\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    temp = defaultdict(int)\n    for num in nums:\n        temp[num] += 1\n    return max(temp, key = temp.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for item in nums:\n        dict[item] += 1\n    return max(dict.items(), key=lambda x: x[1])[0]\n    #return max(dict.items(), key=lambda x: dict[x[0]])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = {}\n    for num in nums:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    maximum = max(freq.values())\n    return [num for num in freq if freq[num] == maximum]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    for num in freq.keys():\n        if freq[num] > nums.count(num):\n            return num\n    \n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # nums = [1,2,1,2,2,3,3]\n    # print(max_occurrences(nums))\n    \n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    max_item = -1\n    \n    for i in freq.keys():\n        if freq[i] == max_freq:\n            max_item = i\n    \n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(lambda: 0)\n    for num in nums:\n        occurrences[num] += 1\n    return max(occurrences.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_frequency = defaultdict(int)\n    for num in nums:\n        if num in max_frequency.keys():\n            max_frequency[num] += 1\n        else:\n            max_frequency[num] = 1\n    for key,value in max_frequency.items():\n        if value == max(max_frequency.values()):\n            return key\n    return max_frequency.keys()[0]\ndef find_k_largest_items(n, k, arr):\n    '''\n    This function returns the k largest items in the given array as list of tuples.\n    '''\n    items = sorted(arr, key=lambda x: x[1], reverse=True)[:k]\n    return [i[0] for i in items]\ndef max_frequency_by_frequency(freq_dict):\n    '''\n    This function returns the frequency of the most frequent items in the given frequency dictionary.\n    '''\n    max_frequency = defaultdict(int)\n    for key, val in freq_dict.items():\n        if val == max(freq_dict.values()):\n            max_frequency[key] += 1\n    return max_frequency\ndef index_frequency_by_frequency(freq_dict):\n    '''\n    This function returns the frequency of the most frequent items in the given frequency dictionary.\n    '''\n    max_frequency = defaultdict(int)\n    for key, val in freq_dict.items():\n        if val == max(freq_dict.values()):\n            max_frequency[key] += 1\n    return max_frequency\ndef get_order_by_frequency(freq_dict):\n    '''\n    This function returns the order of the most frequent items in the given frequency dictionary.\n    '''\n    max_frequency = max_frequency_by_frequency(freq_dict)\n    return [key for key, value in max_frequency.items() if value == max(max_frequency.values())]\ndef frequency_list_in_order(freq_dict):\n    '''\n    This function returns the frequency list in order of the most frequent items in the given frequency dictionary.\n    '''\n    max_frequency = max_frequency_by_frequency(freq_dict)\n    return [key for key, value in max_frequency.items() if value == max(max_frequency.values())]\ndef items_by_frequency(freq_dict):\n    '''\n    This function returns the items with the most frequent frequency in the given frequency dictionary.\n    '''\n    max_frequency = max_frequency_by_frequency(freq_dict)\n    return [key for key, value in max_frequency.items() if value == max(max_frequency.values())]\ndef frequency_list_in_order_by_frequency(freq_dict):\n    '''\n    This function returns the frequency list in order of the most frequent items in the given frequency dictionary.\n    '''\n    max_frequency = max_frequency_by_frequency(freq_dict)\n    return [key for key, value in max_frequency.items() if value == max(max_frequency.values())]\ndef items_by_frequency_by_order(freq_dict):\n    '''\n    This function returns the items with the most frequent frequency in the given frequency dictionary.\n    '''\n    max_frequency = max_frequency_by_frequency(freq_dict)\n    return [key for key, value in max_frequency.items() if value == max(max_frequency.values())]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = ['a','e','i','o','u']\n    for i in vowel:\n        if i in str1:\n            s = str1.replace(i,'')\n            for x in s:\n                if x in ['a','e','i','o','u']:\n                    str1 = str1.replace(x,'')\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    reverse = []\n    for i in str1:\n        if i in vowels:\n            reverse.append(i)\n    return ''.join(reverse)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if len(str1) == 0:\n        return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = ''\n    vowels = ['a','e','i','o','u','y']\n    for i in str1:\n        if i in vowels:\n            new_str += i\n        else:\n            new_str += i.lower()\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    vowels_reversed = \"\"\n    for char in str1:\n        if char in vowels:\n            vowels_reversed = vowels_reversed + char\n    return vowels_reversed\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiouy'\n    vowels_not = vowels.replace('y','u')\n    str1 = str1.replace(vowels_not,'')\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1].upper()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    return ''.join(i for i in str1 if i in vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return reverseVowels(str1.replace('y', ''))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if not str1:\n        return \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            if str1[i] == \"y\":\n                str1 = str1[::-1]\n            else:\n                str1 = str1[:-1]\n        else:\n            new_str = new_str + str1[i]\n    return new_str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for tup in tup1:\n        str1 += str(tup) + \" \"\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\"+ \",\".join(map(str,tup1))+ \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \",\".join([str(element) for element in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + str(tup1[0]) + ','+ str(tup1[1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = '('\n    for item in tup1:\n        str_tup += str(item) + ', '\n    str_tup = str_tup.rstrip(', ')\n    str_tup += ')'\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return \"\"\n    else:\n        s = ''\n        for i in range(0, len(tup1)):\n            s += str(tup1[i]) + ', '\n        return s[:-2]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = '(' + ''.join(map(str, tup1)) + ')'\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_tup = []\n    for item in tup1:\n        new_tup.append(str(item))\n    return '(' + ', '.join(new_tup) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '\\n'.join(str(item) for item in tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    negatives.sort()\n    neg = 0\n    for num in negatives:\n        neg += num\n    return neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # negative numbers will be calculated as negative numbers because \n    # negative number is a negative number, so the sum is the sum of the negatives\n    # numbers, and the number itself will be zero.\n    # nums = [1, -3, -5, 4]\n    # the output should be -12.\n    # Explanation:\n    # -1 -3 -5 = -12\n    # so negative numbers = -12\n    # sum of negative numbers = 12\n    # nums = [1, -3, -5, 4]\n    # negative numbers = 0\n    # sum of negative numbers = 0\n    \n    sum = 0\n    negative_num = 0\n    \n    for i in range(len(nums)):\n        negative_num = nums[i] * -1\n        sum = sum + negative_num\n        \n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for x in nums:\n        if x < 0:\n            sum += abs(x)\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -1 * num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sumnum = 0\n    for num in nums:\n        if num < 0:\n            sumnum += num\n    return sumnum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < len(nums):\n        if nums[i] < 0:\n            sum += -nums[i]\n            i += 1\n        else:\n            sum += nums[i]\n            i += 1\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    res = (n*n) + (n+1)\n    while(res >= n):\n        res = (res - n)//6 + n\n    return res\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for i in range(1, n+1): \n        if (i % 6 == 0) or (i % 2 == 0): \n            if (i % 2 == 0): \n                print('%3d' % i, end ='') \n            else: \n                print('%3d' % i, end ='') \n                print('%3d' % (i * i), end ='') \n        else: \n            print('%3d' % i, end ='') \n    print() \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n \n    b = n \n    c = n \n    \n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2:\n        return a\n    elif a**2 + b**2!= c**2:\n        return 0\n    else:\n        while a <= b:\n            a = a + (a+b)//2\n            b = b + (a+b)//2\n        return a\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return n \n    elif n == 1: \n        return 1\n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-1) + 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    from math import sqrt, ceil\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = (n*3+1)\n    while (a <= a*(n+1)): \n        a = a*3 + 1\n    return a\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 15\n    elif n == 9:\n        return 17\n    elif n == 10:\n        return 19\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 25\n    elif n == 13:\n        return 27\n    elif n == 14:\n        return 29\n    elif n == 15:\n        return 31\n    elif n == 16:\n        return 33\n    elif n == 17:\n        return 35\n    elif n == 18:\n        return 37\n    elif n == 19:\n        return 39\n    elif n == 20:\n        return 41\n    elif n == 21:\n        return 43\n    elif n == 22:\n        return 45\n    elif n == 23:\n        return 47\n    elif n == 24:\n        return 49\n    elif n == 25:\n        return 51\n    elif n == 26:\n        return 53\n    elif n == 27:\n        return 55\n    elif n == 28:\n        return 57\n    elif n == 29:\n        return 59\n    elif n == 30:\n        return 61\n    elif n == 31:\n        return 63\n    elif n == 32:\n        return 65\n    else:\n        raise ValueError(\"n is too big!\")\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    c = 0\n    for i in range(n):\n        if i%6 == 1 or i%6 == 2 or i%6 == 3 or i%6 == 4 or i%6 == 5:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n % 2 == 0: \n        return 2 * n - 1\n    elif n % 2 == 1: \n        return 3 * n - 2\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num==0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Your code here\n    zeros = []\n    count = 0\n    for x in nums:\n        if x == 0:\n            count+=1\n        else:\n            zeros.append(count)\n            count = 0\n    zeros.append(count)\n    return zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = zero_count_helper(nums)\n    zero_ratio = zero_count / len(nums)\n    return zero_ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            cnt += 1\n    return cnt/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count = zero_count + 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_counter = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_counter += 1\n    return zero_counter/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for item in nums:\n        if item == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    counter = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            counter += 1\n    return counter/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return (count / len(nums))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n>=0 and n&(n-1)==0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if n in p:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    for i in range(2, n+1):\n        if n%i==0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Euler's method\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == sum([i**2 for i in range(2, n+1)])\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0:\n        return False\n    elif n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        for i in range(1,n):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 10**9:\n        return True\n    else:\n        x = n\n        while x>0:\n            if (x%2 == 0):\n                return False\n            x = x//10\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    area = pi * r ** 2\n    return area\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1416\n    return pi * 2 * (r ** 2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(\"Enter the radius of the circle: \")\n    r = float(input())\n    print(\"The circumference of the circle is: \")\n    circumference = 2*3.14*r\n    print(circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            for item2 in item:\n                if isinstance(item2, list):\n                    flattened_list += item2\n                else:\n                    flattened_list += [item2]\n        elif isinstance(item, list):\n            flattened_list += item\n        else:\n            flattened_list += [item]\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for element in test_list:\n        for i in element:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) is list:\n            result.extend(item)\n    return result\n    \ndef extract_singly_recurse(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) is list:\n            result.extend(extract_singly_recurse(item))\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for number_list in test_list:\n        if type(number_list) is list:\n            for num in number_list:\n                yield num\n        elif type(number_list) is int:\n            yield number_list\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for i in test_list:\n        output.append(i[0])\n        for j in i[1:]:\n            output.append(j)\n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(l):\n        return [item for sublist in l for item in sublist]\n    return flatten(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = list(test_list)\n    singly_list = []\n    for el in test_list:\n        if isinstance(el, list):\n            singly_list += el\n        else:\n            singly_list.append(el)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(map(lambda l: [int(i) for i in l], test_list)"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    i = 1\n    result = []\n    while i < len(test_list):\n        j = 1\n        while j < len(test_list[i]):\n            result.append(test_list[i][j])\n            j += 1\n        i += 1\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = [1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21, [22, [23, [24, [25, [26, [27, [28, [29, [30, [31, [32, [33, [34, [35, [36, [37, [38, [39, [40, [41, [42, [43, [44, [45, [46, [47, [48, [49, [50, [51, [52, [53, [54, [55, [56, [57, [58, [59, [60, [61, [62, [63, [64, [65, [66, [67, [68, [69, [70, [71, [72, [73, [74, [75, [76, [77, [78, [79, [80, [81, [82, [83, [84, [85, [86, [87, [88, [89, [90, [91, [92, [93, [94, [95, [96, [97, [98, [99, [100, [101, [102, [103, [104, [105, [106, [107, [108, [109, [110, [111, [112, [113, [114, [115, [116, [117, [118, [119, [120, [121, [122, [123, [124, [125, [126, [127, [128, [129, [130, [131, [132, [133, [134, [135, [136, [137, [138, [139, [140, [141, [142, [143, [144, [145, [146, [147, [148, [149, [150, [151, [152, [153, [154, [155, [156, [157, [158, [159, [160, [161, [162, [163, [164, [165, [166, [167, [168, [169, [170, [171, [172, [173, [174, [175, [176, [177, [178, [179, [180, [181, [182, [183, [184, [185, [186, [187, [188, [189, [190, [191, [192, [193, [194, [195, [196, [197, [198, [199, [200, [201, [202, [203, [204, [205, [206, [207, [208, [209, [210, [211, [212, [213, [214, [215, [216, [217, [218, [219, [220, [221, [222, [223, [224, [225, [226, [227, [228, [229, [230, [231, [232, [233, [234, [235, [236, [237, [238, [239, [240, [241, [242, [243, [244, [245, [246, [247, [248, [249, [250, [251, [252, [253, [254, [255, [256, [257, [258, [259, [260, [261, [262, [263, [264, [265, [266, [267, [268, [269, [270, [271, [272, [273, [274, [275, [276, [277, [278, [279, [280, [281, [282, [283, [284, [285, [286, [287, [288, [289, [290, [291, [292, [293, [294, [295, [296, [297, [298, [299, [300, [301, [302, [303, [304, [305, [306, [307, [308, [309, [310, [311, [312, [313, [314, [315, [316, [317, [318, [319, [320, [321, [322, [323, [324, [325, [326, [327, [328, [329, [330, [331, [332, [333, [334, [335, [336, [337, [338, [339, [340, [341, [342, [343, [344, [345, [346, [347, [348, [349, [350, [351, [352, [353, [354, [355, [356, [357, [358, [359, [360, [361, [362, [363, [364, [365, [366, [367, [368, [369, [370, [371, [372, [373, [374, [375, [376, [377, [378, [379, [380, [381, [382, [383, [384, [385, [386, [387, [388, [389, [390, [391, [392, [393, [394, [395, [396, [397, [398, [399, [400, [401, [402, [403, [404, [405, [406, [407, [408, [409, [410, [411, [412, [413, [414, [415, [416, [417, [418, [419, [420, [421, [422, [423, [424, [425, [426, [427, [428, [429, [430, [431, [432, [433, [434, [435, [436, [437, [438, [439, [440, [441, [442, [443, [444, [445, [446, [447, [448, [449, [450, [451, [452, [453, [454, [455, [456, [457, [458, [459, [460, [461, [462, [463, [464, [465, [466, [467, [468, [469, [470, [471, [472, [473, [474, [475, [476, [477, [478, [479, [480, [481, [482, [483, [484, [485, [486, [487, [488, [489, [490, [491, [492, [493, [494, [495, [496, [497, [498, [499, [500, [501, [502, [503, [504, [505, [506, [507, [508, [509, [510, [511, [512, [513, [514, [515, [516, [517, [518, [519, [520, [521, [522, [523, [524, [525, [526, [527, [528, [529, [530, [531, [532, [533, [534, [535, [536, [537, [538, [539, [540, [541, [542, [543, [544, [545, [546, [547, [548, [549, [550, [551, [552, [553, [554, [555, [556, [557, [558, [559, [560, [561, [562, [563, [564, [565, [566, [567, [568, [569, [570, [571, [572, [573, [574, [575, [576, [577, [578, [579, [580, [581, [582, [583, [584, [585, [586, [587, [588, [589, [590, [591, [592, [593, [594, [595, [596, [597, [598, [599, [600, [601, [602, [603, [604, [605, [606, [607, [608, [609, [610, [611, [612, [613, [614, [615, [616, [617, [618, [619, [620, [621, [622, [623, [624, [625, [626, [627, [628, [629, [630, [631, [632, [633, [634, [635, [636, [637, [638, [639, [640, [641, [642, [643, [644, [645, [646, [647, [648, [649, [650, [651, [652, [653, [654, [655, [656, [657, [658, [659, "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # the sort function returns the index of the first non-repetitive\n    # element in the list.\n    def find_index(list_):\n        for i in range(n-1):\n            if list_[i]!= list_[i+1]:\n                return i\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the length of the list\n    length = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(x):\n        return x[::-1]\n    \n    def helper(nums, start, end):\n        if start == end:\n            return nums\n        \n        mid = (start + end) // 2\n        \n        left = helper(nums, start, mid)\n        right = helper(nums, mid + 1, end)\n        \n        res = helper(left, start, mid) + helper(right, mid + 1, end)\n        \n        return res\n    \n    return helper(nums, 0, len(nums) - 1"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length//2-1, -1, -1):\n        for j in range(i+1, length):\n            nums[i], nums[j] = nums[j], nums[i]\n        print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # O(n) time, O(n) space\n    # O(n) method is O(n),\n    # O(n) method is O(n)\n    if len(nums) < 2:\n        return nums\n    # O(n) time, O(n) space\n    # O(n) method is O(n)\n    # O(n) method is O(1)\n    first_item_was_greater = True\n    for i in range(len(nums) - 1):\n        # O(n) time, O(1) space\n        # O(1) method is O(1)\n        if nums[i] >= nums[i+1]:\n            # O(1) time, O(1) space\n            # O(1) method is O(1)\n            # O(1) method is O(1)\n            if first_item_was_greater:\n                # O(1) time, O(1) space\n                # O(1) method is O(1)\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n            # O(1) time, O(1) space\n            # O(1) method is O(1)\n            else:\n                # O(1) time, O(1) space\n                # O(1) method is O(1)\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n            # O(1) time, O(1) space\n            # O(1) method is O(1)\n            first_item_was_greater = False\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = 0\n    while i < len(nums):\n        i = i + 1\n        if i > len(nums) - 1:\n            break\n        for j in range(i-1, len(nums)-1, -1):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            else:\n                break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Pick the smallest item\n        for j in range(i):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # base case:\n    if len(nums) <= 1:\n        return nums\n    # do a binary search on each index in the list.\n    # if the sorted element is less than the first element,\n    # then move the smaller element to the left,\n    # and if the sorted element is greater than the first element,\n    # then move the larger element to the right,\n    # and repeat this process until all the elements have been sorted.\n    for i in range(len(nums)):\n        if i == 0 or nums[i] < nums[i - 1]:\n            # print(f'i = {i}')\n            # print(f'nums[{i}] = {nums[i]}')\n            # print(f'nums[{i - 1}] = {nums[i - 1]}')\n            # print(f'nums[{i - 2}] = {nums[i - 2]}')\n            # print(f'nums[{i + 1}] = {nums[i + 1]}')\n            # print(f'nums[{i + 2}] = {nums[i + 2]}')\n            # print(f'nums[{i + 3}] = {nums[i + 3]}')\n            # print(f'nums[{i + 4}] = {nums[i + 4]}')\n            # print(f'nums[{i + 5}] = {nums[i + 5]}')\n            # print(f'nums[{i + 6}] = {nums[i + 6]}')\n            # print(f'nums[{i + 7}] = {nums[i + 7]}')\n            # print(f'nums[{i + 8}] = {nums[i + 8]}')\n            # print(f'nums[{i + 9}] = {nums[i + 9]}')\n            # print(f'nums[{i + 10}] = {nums[i + 10]}')\n            # print(f'nums[{i + 11}] = {nums[i + 11]}')\n            # print(f'nums[{i + 12}] = {nums[i + 12]}')\n            # print(f'nums[{i + 13}] = {nums[i + 13]}')\n            # print(f'nums[{i + 14}] = {nums[i + 14]}')\n            # print(f'nums[{i + 15}] = {nums[i + 15]}')\n            # print(f'nums[{i + 16}] = {nums[i + 16]}')\n            # print(f'nums[{i + 17}] = {nums[i + 17]}')\n            # print(f'nums[{i + 18}] = {nums[i + 18]}')\n            # print(f'nums[{i + 19}] = {nums[i + 19]}')\n            # print(f'nums[{i + 20}] = {nums[i + 20]}')\n            # print(f'nums[{i + 21}] = {nums[i + 21]}')\n            # print(f'nums[{i + 22}] = {nums[i + 22]}')\n            # print(f'nums[{i + 23}] = {nums[i + 23]}')\n            # print(f'nums[{i + 24}] = {nums[i + 24]}')\n            # print(f'nums[{i + 25}] = {nums[i + 25]}')\n            # print(f'nums[{i + 26}] = {nums[i + 26]}')\n            # print(f'nums[{i + 27}] = {nums[i + 27]}')\n            # print(f'nums[{i + 28}] = {nums[i + 28]}')\n            # print(f'nums[{i + 29}] = {nums[i + 29]}')\n            # print(f'nums[{i + 30}] = {nums[i + 30]}')\n            # print(f'nums[{i + 31}] = {nums[i + 31]}')\n            # print(f'nums[{i + 32}] = {nums[i + 32]}')\n            # print(f'nums[{i + 33}] = {nums[i + 33]}')\n            # print(f'nums[{i + 34}] = {nums[i + 34]}')\n            # print(f'nums[{i + 35}] = {nums[i + 35]}')\n            # print(f'nums[{i + 36}] = {nums[i + 36]}')\n            # print(f'nums[{i + 37}] = {nums[i + 37]}')\n            # print(f'nums[{i + 38}] = {nums[i + 38]}')\n            # print(f'nums[{i + 39}] = {nums[i + 39]}')\n            # print(f'nums[{i + 40}] = {nums[i + 40]}')\n            # print(f'nums[{i + 41}] = {nums[i + 41]}')\n            # print(f'nums[{i + 42}] = {nums[i + 42]}')\n            # print(f'nums[{i + 43}] = {nums[i + 43]}')\n            # print(f'nums[{i + 44}] = {nums[i + 44]}')\n            # print(f'nums[{i + 45}] = {nums[i + 45]}')\n            # print(f'nums[{i + 46}] = {nums[i + 46]}')\n            # print(f'nums[{i + 47}] = {nums[i + 47]}')\n            # print(f'nums[{i + 48}] = {nums[i + 48]}')\n            # print(f'nums[{i + 49}] = {nums[i + 49]}')\n            # print(f'nums[{i + 50}] = {nums[i + 50]}')\n            # print(f'nums[{i + 51}] = {nums[i + 51]}')\n            # print(f'nums[{i + 52}] = {nums[i + 52]}')\n            # print(f'nums[{i + 53}] = {nums[i + 53]}')\n            # print(f'nums[{i + 54}] = {nums[i + 54]}')\n            # print(f'nums[{i + 55}] = {nums[i + 55]}')\n            # print(f'nums[{i + 56}] = {nums[i + 56]}')\n            # print(f'nums[{i + 57}] = {nums[i + 57]}')\n            # print(f'nums[{i + 58}] = {nums[i + 58]}')\n            # print(f'nums[{i + 59}] = {nums[i + 59]}')\n            # print(f'nums[{i + 60}] = {nums[i + 60]}')\n            # print(f'nums[{i + 61}] = {nums[i + 61]}')\n            # print(f'nums[{i + 62}] = {nums[i + 62]}')\n            # print(f'nums[{i + 63}] = {nums[i + 63]}')\n            # print(f'nums[{i + 64}] = {nums[i + 64]}')\n            # print(f'nums[{i + 65}] = {nums[i + 65]}')\n            # print(f'nums[{i + 66}] = {nums[i + 66]}')\n            # print(f'nums[{i + 67}] = {nums[i + 67]}')\n            # print(f'nums[{i + 68}] = {nums[i + 68]}')\n            # print(f'nums[{i + 69}] = {nums[i + 69]}')"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    number1=[]\n    number2=[]\n    number3=[]\n    n1=len(list1)\n    n2=len(list2)\n    n3=len(list3)\n    for i in range(0,n1):\n        number1.append(list1[i])\n    for i in range(0,n2):\n        number2.append(list2[i])\n    for i in range(0,n3):\n        number3.append(list3[i])\n    print(\"The number of identical items in position 1 are:\",len(set(number1)))\n    print(\"The number of identical items in position 2 are:\",len(set(number2)))\n    print(\"The number of identical items in position 3 are:\",len(set(number3)))\n    return len(set(number1+number2+number3))\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_samepair = 0\n    for i in range(len(list1)):\n        if (list1[i] == list2[i] and list2[i] == list3[i]) :\n            count_samepair += 1\n    return count_samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in list1:\n        if i in list2:\n            if i in list3:\n                count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            a+=1\n    return a\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    if list1==list2 and list2==list3:\n        return 1\n    else:\n        count=0\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i]==list2[j] or list2[j]==list1[i]:\n                    count+=1\n        if count==len(list1) or count==len(list2) or count==len(list3):\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1=list(set(list1))\n    list2=list(set(list2))\n    list3=list(set(list3))\n    total_items=len(list1)+len(list2)+len(list3)\n    result=0\n    for i in range(total_items):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            result+=1\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list2[i] not in list3[i]):\n            count_same += 1\n    return count_same\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and i!=j:\n                c+=1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i==j:\n                continue\n            if list1[i]==list2[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    same = 0\n    \n    for item in list1:\n        if item in list3 and item not in list2:\n            same += 1\n    \n    for item in list2:\n        if item in list3 and item not in list1:\n            same += 1\n    \n    for item in list3:\n        if item in list1:\n            same += 1\n    \n    for item in list2:\n        if item in list1:\n            same += 1\n    \n    for item in list2:\n        if item in list3:\n            same += 1\n    \n    return same\n    \n    \ndef count_equalpair(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    same = 0\n    \n    for item in list1:\n        if item in list2:\n            same += 1\n    \n    for item in list2:\n        if item in list1:\n            same += 1\n    \n    return same\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    len_list = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            len_list += len(Input[i])\n    return len_list\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == tuple:\n        tuple1 = tuple(map(int,Input))\n        return len(tuple1)\n    else:\n        print('Please use a tuple of numbers only.')\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter=0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            counter+=1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    index = 0\n    index_of_lists = 0\n    for i in Input: \n        if type(i) is tuple:\n            index = index + 1\n    for i in range(index):\n        index_of_lists = index_of_lists + 1\n    return index_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(\"Finding number of lists....\")\n    n=0\n    for i in range(0, len(Input)):\n        if(Input[i] == '{'):\n            n = n+1\n        elif(Input[i] == '}'):\n            n = n-1\n        elif(Input[i] == '['):\n            n = n+1\n        elif(Input[i] == ']'):\n            n = n-1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # get a copy of the tuple \n    Input_list = tuple(Input) \n    # check to see if any elements in the tuple \n    # are not numbers \n    if not any(map(isinstance, Input_list, (int, float))): \n        return 'Invalid input.' \n    else: \n        if len(Input_list) == 1: \n            return 1 \n        elif len(Input_list) == 2: \n            if Input_list[0] == Input_list[1]: \n                return 2\n            else: \n                return 0\n        elif len(Input_list) == 3: \n            if Input_list[0] == Input_list[1] == Input_list[2]: \n                return 3\n            else: \n                return 0\n        elif len(Input_list) == 4: \n            if Input_list[0] == Input_list[1] == Input_list[2] == Input_list[3]: \n                return 4\n            else: \n                return 0\n        else: \n            return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code here\n    return 0\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is int:\n            if type(Input[i+1]) is tuple:\n                list_count += 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #pass\n    \n    #create list of tuples\n    listtuple = []\n    \n    #convert tuple into list\n    for i in Input:\n        listtuple.append(tuple(i))\n    \n    #print length\n    print(\"Length of list: \", len(listtuple))\n    \n    #count # of elements in the list\n    print(\"Count of elements in list: \", len(listtuple))\n    \n    #find length of list tuple\n    print(\"Length of list tuple: \", len(listtuple[0]))\n    \n    #find tuple index of list\n    print(\"Tuple Index of list: \", listtuple[1])\n    \n    #return tuple\n    return listtuple\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for x in range(len(arr)): \n        for y in range(x,len(arr)):\n            max_abs_diff = abs(arr[x] - arr[y])\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # max_diff = 0\n    # for i in range(len(arr)-1):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i] - arr[j] > max_diff:\n    #             max_diff = arr[i] - arr[j]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        curr_abs_diff = abs(arr[i] - arr[i - 1])\n        if(curr_abs_diff > max_abs_diff):\n            max_abs_diff = curr_abs_diff\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i]-arr[i-1] for i in range(1, len(arr))))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # input\n    arr = arr\n    n = len(arr)\n    # condition\n    if (n <= 1):\n        return 0\n    if (n == 2):\n        return abs(arr[0] - arr[1])\n    \n    # initialize the maximum value\n    max_val = arr[0] - arr[1]\n    \n    # iterate through arr and check for the maximum\n    for i in range(1, n):\n        max_val = max(arr[i] - arr[i-1], max_val)\n    return max_val\n    \ndef find_max_index(arr):\n    '''\n    Write a python function to find the maximum element in an array.\n    '''\n    # input\n    arr = arr\n    n = len(arr)\n    # condition\n    if (n <= 1):\n        return 0\n    if (n == 2):\n        return arr[0]\n    \n    # initialize the maximum value\n    max_val = arr[0] - arr[1]\n    \n    # iterate through arr and check for the maximum\n    for i in range(1, n):\n        max_val = max(arr[i] - arr[i-1], max_val)\n    return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_diff = max(abs(x-y) for x,y in zip(arr,arr[1:]))\n    return abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    def max_Abs_Diff_(arr, i,j):\n        if i==j:\n            return 0\n        return abs(arr[i] - arr[j])\n    max = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if max_Abs_Diff_(arr, i, j) > max:\n                max = max_Abs_Diff_(arr, i, j)\n    return max\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    a = arr[1]\n    b = arr[2]\n    c = arr[3]\n    return abs(a-b)+abs(b-c)\n    \n    \n    \n    \ndef min_Diff(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    a = arr[1]\n    b = arr[2]\n    c = arr[3]\n    return abs(a-b)+abs(b-c)\n    \n    \n    \n    \ndef avg_Diff(arr): \n    '''\n    Write a python function to find the average of a given array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    \n    return sum/len(arr)\n    \n    \n    \n    \ndef max_Sum(arr): \n    '''\n    Write a python function to find the maximum sum of a given array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    \n    return sum\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # The maximum difference is the absolute difference between the second element and the first element.\n    # For example, for the array arr = [5, 2, 3, 4, 1, 0], the maximum difference would be 4,\n    # and the absolute difference is 5.\n    # Remember, when you find the absolute difference, you can use the function to return the minimum value of the array.\n    # If it is not possible to return the minimum value, you will need to return the largest value in the array.\n    \n    # Assign the minimum value to the variable min_diff_value\n    min_diff_value = arr[0]\n    \n    # Create a for-loop to iterate through every element in the array\n    for i in range(1, len(arr)): \n        \n        # Find the difference of the current element with the current element. \n        diff = abs(arr[i] - arr[i-1])\n        \n        # If the difference of the current element with the current element is greater than the smallest difference, update the smallest difference.\n        if diff > min_diff_value:\n            min_diff_value = diff\n        \n    # Return the minimum difference\n    return min_diff_value\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] - arr[i+1] > max_diff:\n            max_diff = arr[i] - arr[i+1]\n    return max_diff\n    \nprint(max_Abs_Diff([1,3,4,6,9]))\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if n == 0:\n        return None\n    elif n == 1:\n        return (a[0], a[1])\n    elif n % 2 == 0:\n        x = find_solution(a, b, n//2)\n        return (x[0] + x[1], x[1])\n    else:\n        y = find_solution(a, b, n//2)\n        return (y[0] + y[1], y[1])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (n == 0):\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return a, b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return a, b\n    if n == 2:\n        return a, b\n    \n    m = n//2\n    x, y = find_solution(a, b, m)\n    \n    if a[0] + b[0] == m:\n        return x, y\n    \n    if x == None:\n        x = find_solution(a, b, m)\n        return x\n    \n    if y == None:\n        y = find_solution(a, b, m)\n        return x, y\n    \n    if a[1] + b[1] == m:\n        return x, y\n    \n    if x == None:\n        x = find_solution(a, b, m)\n        return x\n    \n    if y == None:\n        y = find_solution(a, b, m)\n        return x, y\n    \n    if a[1] + b[1] == m:\n        return x, y\n    \n    if x == None:\n        x = find_solution(a, b, m)\n        return x\n    \n    if y == None:\n        y = find_solution(a, b, m)\n        return x, y\n    \n    if a[1] + b[1] == m:\n        return x, y\n    \n    if x == None:\n        x = find_solution(a, b, m)\n        return x, y\n    \n    if y == None:\n        y = find_solution(a, b, m)\n        return x, y\n    \n    if a[0] + b[0] == m:\n        return x, y\n    \n    if x == None:\n        x = find_solution(a, b, m)\n        return x, y\n    \n    if y == None:\n        y = find_solution(a, b, m)\n        return x, y\n    \n    if a[0] + b[0] == m:\n        return x, y\n    \n    if x == None:\n        x = find_solution(a, b, m)\n        return x, y\n    \n    if y == None:\n        y = find_solution(a, b, m)\n        return x, y\n    \n    if x == None:\n        x = find_solution(a, b, m)\n        return x, y\n    \n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    p = (a,b)\n    if not is_solution(p, n):\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    s = set()\n    a = a.replace(',', '')\n    a = a.replace('.', '')\n    a = a.split()\n    for i in range(len(a)):\n        a[i] = int(a[i])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def compare(x, y):\n        return x == y if type(x) is int else x[0] + y[0]\n        \n    def add(x, y):\n        return (x[0] + y[0], x[1] + y[1])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for ai in range(n):\n        if a * ai <= b and b*(ai+1) <= b:\n            x = a * ai + b\n            y = a * (ai+1) + b\n            if x % 10 == ai+1 or y % 10 == ai+1:\n                if find_solution(x, y, n):\n                    return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return a, b\n    elif a == n:\n        return a, b\n    elif b == n:\n        return a, b\n    else:\n        for i in range(n):\n            for j in range(n):\n                if a * j + b == n:\n                    return a, b\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_to_remove = []\n    for num in list1:\n        if num not in list2:\n            list_to_remove.append(num)\n    list_to_remove.sort()\n    print(list_to_remove)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #Your code here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # store the indexes of elements that will be removed in the new list \n    removed = []\n    # iterate over the given list\n    for x in range(len(list1)):\n        # check if the given element is in the new list\n        if list1[x] in list2:\n            # remove the element from the new list\n            list1.pop(list1.index(list1[x]))\n            # update the index of the element\n            removed.append(list2.index(list1[x]))\n    return removed\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if not list1:\n        return\n    list1.sort()\n    for i in list1:\n        list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        list1.remove(x)\n    for y in list2:\n        list2.remove(y)\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n + sum_series(n - 2*i))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # sum_val = 0\n    # i = 0\n    # while i <= n:\n    #     sum_val += (i+2)*(i+3)+4*(i+4)\n    #     i += 1\n    # return sum_val\n    # 1. if 0 <= n <= 9:\n    #     return sum_val\n    # else:\n    #     return sum_val - (n-1)\n    # return sum_val\n    # 2. if n == 0:\n    #     return 0\n    # elif n <= 9:\n    #     return n - 1\n    # else:\n    #     return n - 2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n <= 0):\n        return 0\n    else:\n        return n - 2*(n -2) + (n-4)\n        \nprint(sum_series(1))\nprint(sum_series(2))\nprint(sum_series(3))\nprint(sum_series(4))\nprint(sum_series(5))\nprint(sum_series(6))\nprint(sum_series(7))\nprint(sum_series(8))\nprint(sum_series(9))\nprint(sum_series(10))\nprint(sum_series(11))\nprint(sum_series(12))\nprint(sum_series(13))\nprint(sum_series(14))\nprint(sum_series(15))\nprint(sum_series(16))\nprint(sum_series(17))\nprint(sum_series(18))\nprint(sum_series(19))\nprint(sum_series(20))\nprint(sum_series(21))\nprint(sum_series(22))\nprint(sum_series(23))\nprint(sum_series(24))\nprint(sum_series(25))\nprint(sum_series(26))\nprint(sum_series(27))\nprint(sum_series(28))\nprint(sum_series(29))\nprint(sum_series(30))\nprint(sum_series(31))\nprint(sum_series(32))\nprint(sum_series(33))\nprint(sum_series(34))\nprint(sum_series(35))\nprint(sum_series(36))\nprint(sum_series(37))\nprint(sum_series(38))\nprint(sum_series(39))\nprint(sum_series(40))\nprint(sum_series(41))\nprint(sum_series(42))\nprint(sum_series(43))\nprint(sum_series(44))\nprint(sum_series(45))\nprint(sum_series(46))\nprint(sum_series(47))\nprint(sum_series(48))\nprint(sum_series(49))\nprint(sum_series(50))\nprint(sum_series(51))\nprint(sum_series(52))\nprint(sum_series(53))\nprint(sum_series(54))\nprint(sum_series(55))\nprint(sum_series(56))\nprint(sum_series(57))\nprint(sum_series(58))\nprint(sum_series(59))\nprint(sum_series(60))\nprint(sum_series(61))\nprint(sum_series(62))\nprint(sum_series(63))\nprint(sum_series(64))\nprint(sum_series(65))\nprint(sum_series(66))\nprint(sum_series(67))\nprint(sum_series(68))\nprint(sum_series(69))\nprint(sum_series(70))\nprint(sum_series(71))\nprint(sum_series(72))\nprint(sum_series(73))\nprint(sum_series(74))\nprint(sum_series(75))\nprint(sum_series(76))\nprint(sum_series(77))\nprint(sum_series(78))\nprint(sum_series(79))\nprint(sum_series(80))\nprint(sum_series(81))\nprint(sum_series(82))\nprint(sum_series(83))\nprint(sum_series(84))\nprint(sum_series(85))\nprint(sum_series(86))\nprint(sum_series(87))\nprint(sum_series(88))\nprint(sum_series(89))\nprint(sum_series(90))\nprint(sum_series(91))\nprint(sum_series(92))\nprint(sum_series(93))\nprint(sum_series(94))\nprint(sum_series(95))\nprint(sum_series(96))\nprint(sum_series(97))\nprint(sum_series(98))\nprint(sum_series(99))\nprint(sum_series(100))\nprint(sum_series(101))\nprint(sum_series(102))\nprint(sum_series(103))\nprint(sum_series(104))\nprint(sum_series(105))\nprint(sum_series(106))\nprint(sum_series(107))\nprint(sum_series(108))\nprint(sum_series(109))\nprint(sum_series(110))\nprint(sum_series(111))\nprint(sum_series(112))\nprint(sum_series(113))\nprint(sum_series(114))\nprint(sum_series(115))\nprint(sum_series(116))\nprint(sum_series(117))\nprint(sum_series(118))\nprint(sum_series(119))\nprint(sum_series(120))\nprint(sum_series(121))\nprint(sum_series(122))\nprint(sum_series(123))\nprint(sum_series(124))\nprint(sum_series(125))\nprint(sum_series(126))\nprint(sum_series(127))\nprint(sum_series(128))\nprint(sum_series(129))\nprint(sum_series(130))\nprint(sum_series(131))\nprint(sum_series(132))\nprint(sum_series(133))\nprint(sum_series(134))\nprint(sum_series(135))\nprint(sum_series(136))\nprint(sum_series(137))\nprint(sum_series(138))\nprint(sum_series(139))\nprint(sum_series(140))\nprint(sum_series(141))\nprint(sum_series(142))\nprint(sum_series(143))\nprint(sum_series(144))\nprint(sum_series(145))\nprint(sum_series(146))\nprint(sum_series(147))\nprint(sum_series(148))\nprint(sum_series(149))\nprint(sum_series(150))\nprint(sum_series(151))\nprint(sum_series(152))\nprint(sum_series(153))\nprint(sum_series(154))\nprint(sum_series(155))\nprint(sum_series(156))\nprint(sum_series(157))\nprint(sum_series(158))\nprint(sum_series(159))\nprint(sum_series(160))\nprint(sum_series(161))\nprint(sum_series(162))\nprint(sum_series(163))\nprint(sum_series(164))\nprint(sum_series(165))\nprint(sum_series(166))\nprint(sum_series(167))\nprint(sum_series(168))\nprint(sum_series(169))\nprint(sum_series(170))\nprint(sum_series(171))\nprint(sum_series(172))\nprint(sum_series(173))\nprint(sum_series(174))\nprint(sum_series(175))\nprint(sum_series(176))\nprint(sum_series(177))\nprint(sum_series(178))\nprint(sum_series(179))\nprint(sum_series(180))\nprint(sum_series(181))\nprint(sum_series(182))\nprint(sum_series(183))\nprint(sum_series(184))\nprint(sum_series(185))\nprint(sum_series(186))\nprint(sum_series(187))\nprint(sum_series(188))\nprint(sum_series(189))\nprint(sum_series(190))\nprint(sum_series(191))\nprint(sum_series(192))\nprint(sum_series(193))\nprint(sum_series(194))\nprint(sum_series(195))\nprint(sum_series(196))\nprint(sum_series(197))\nprint(sum_series(198))\nprint(sum_series(199))\nprint(sum_series(200))\nprint(sum_series(201))\nprint(sum_series(202))\nprint(sum_series(203))\nprint(sum_series(204))\nprint(sum_series(205))\nprint(sum_series(206))\nprint(sum_series(207))\nprint(sum_series(208))\nprint(sum_series(209))\nprint(sum_series(210))\nprint(sum_series(211))\nprint(sum_series(212))\nprint(sum_series(213))\nprint(sum_series(214))\nprint(sum_series(215))\nprint(sum_series(216))\nprint(su"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #base case\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n - 2*(n-1) + (n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    else:\n        return n-2*sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sum_series(n-1) + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s=0\n    for i in range(0,n):\n        s+=i\n    return s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l*s/2\ndef area_circle(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    return 3.14*r*r\ndef area_triangle(h, l):\n    '''\n    Write a function that calculates the area of a triangle given its base and height.\n    '''\n    return l*h/2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l*tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * l * (s ** 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    i = 0\n    while i < len(s):\n        area += s[i] * tan(pi / l[i])\n        i += 1\n    return area\n    \ndef area_ellipse(a, b, c, d):\n    '''\n    Write a function that returns the area of a regular ellipse given its parameters.\n    '''\n    area = 0\n    i = 0\n    while i < len(b):\n        area += b[i] * a * d\n        i += 1\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if not l:\n        return 0\n    l = l[0]\n    k = len(l)\n    return s * l * (k - 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #number of sides\n    sides = len(s)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += ((l/2) ** 2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s**i\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon\n    area = 0\n    for s in range(0, l):\n        area += s * (s + 1) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-l))/2\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return 'No'\n    if n == 1:\n        return 'Yes'\n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return True\n    else: \n        return False\ndef primality(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11: \n        return True\n    if n%2 == 0 or n%3 == 0 or n%5 == 0 or n%7 == 0: \n        return False\n    for i in range(2, int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            return False\n    return True\ndef power(n,p):\n    '''\n    Write a function to determine the number of rows for a given n,p.\n    '''\n    if p == 0: \n        return int(math.log(n,2))\n    elif p==1: \n        return int(math.log(n,3))\n    else: \n        return int(math.log(n,p))\ndef lcm(n1, n2): \n    '''\n    Write a function to find the least common multiple of two positive integers.\n    '''\n    if n1%n2 == 0 or n2%n1 == 0: \n        return n1*n2 \n    else: \n        return (n1*n2)//math.gcd(n1,n2)\ndef div(n,d): \n    '''\n    Write a function to determine the modulo of a number.\n    '''\n    return n%d\ndef isPrime(n): \n    '''\n    Return True if a number is prime, False otherwise. \n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11: \n        return True\n    if n == 1: \n        return False\n    if n%2 == 0 or n%3 == 0 or n%5 == 0 or n%7 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n) + 1), 6): \n        if n%i == 0: \n            return False\n    return True\ndef GCD(a, b): \n    '''\n    Return the Greatest Common Divisor of a and b. \n    '''\n    while b: \n        a, b = b, a % b \n    return a\ndef Divisors(n): \n    '''\n    Return the divisors of n. \n    '''\n    l = [] \n    for i in range(1, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            if (n // i == i): \n                l.append(i) \n            else: \n                l.append(i)\n                l.append(n//i)\n    return l \ndef LCM(a, b): \n    '''\n    Return the Least Common Multiple of a and b. \n    '''\n    return a * b // math.gcd(a, b) \ndef next_prime(n): \n    '''\n    Return the next prime number under the given number n. \n    '''\n    prime = True\n    if n == 1: \n        prime = False\n    else: \n        for i in range(2, int(math.sqrt(n))): \n            if (n % i == 0): \n                prime = False\n                break\n            elif (n % (i + 2) == 0): \n                prime = True\n    if prime: \n        return i\ndef is_prime(n): \n    '''\n    Return True if the number n is prime, False otherwise. \n    '''\n    if n < 3: \n        return False\n    if n % 2 == 0: \n        return False\n    if n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0: \n            return False\n    return True\ndef gcd(a, b): \n    '''\n    Return the GCD of a and b. \n    '''\n    while b: \n        a, b = b, a % b \n    return a\ndef LC(n): \n    '''\n    Return the Legendre sequence of a. \n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11: \n        return 2\n    elif n < 7: \n        return 3\n    else: \n        if n%3 == 0: \n            return 5\n        elif n%5 == 0: \n            return 7\n        elif n%3 == 0 and n%5 == 0: \n            return 5\n        else: \n            return 7\ndef is_palindrome(s): \n    '''\n    Return True if s is a palindrome, False otherwise. \n    '''\n    return s == s[::-1]\ndef gcd_list(a, b): \n    '''\n    Return a list of the greatest common divisors of a and b. \n    '''\n    gcd_divisors = [i for i in range(1, int(math.sqrt(a) + 1)) if a % i == 0 and b % i == 0]\n    return gcd_divisors\ndef is_circular(p): \n    '''\n    Return True if p is a circular prime, False otherwise. \n    '''\n    if p == 3 or p == 5 or p == 7: \n        return True\n    for i in range(2, p//2): \n        if (p % i == 0): \n            return False\n    return True\ndef permutation(n,a): \n    '''\n    Return a list of all permutations of [1,2,3] of length 'n' (0<= n <= 100). \n    '''\n    p = [1] + [0] * (n-1)\n    for i in range(2, n+1): \n        for j in range(i): \n            p[j] = p[j] * a[i-1] % 1000000007\n    return p\ndef gcd_list_prime(a, b): \n    '''\n    Return a list of all prime numbers with difference of a and b. \n    '''\n    for i in range(3, int(math.sqrt(b))+1, 6): \n        if (a % i == 0 and b % i == 0): \n            return [i]\n    return []\ndef lcm_list(a, b): \n    '''\n    Return a list of all lcm of a and b. \n    '''\n    lcm_list = []\n    for i in range(int(math.sqrt(b)) + 1, 0, -1): \n        if (a % i == 0 and b % i == 0): \n            lcm_list.append(i)\n    return lcm_list\ndef lcm(a, b): \n    '''\n    Return the least common multiple of a and b. \n    '''\n    return lcm_list(a, b)[-1]\ndef is_prime_list(l): \n    '''\n    Return a list of prime numbers with difference of a and b. \n    '''\n    for i in range(2, len(l)): \n        if (l[i] == 2): \n            continue\n        if (l[i] == 3): \n            continue\n        if (l[i] > 3): \n            return []\n    return l\ndef is_prime_list_prime(l): \n    '''\n    Return a list of prime numbers with difference of a and b. \n    '''\n    for i in range(4, len(l)+1, 2): \n        if (l[i] == 3): \n            continue\n        if (l[i] > 3): \n            return []\n    return l\ndef is_prime_list_prime2(l): \n    '''\n    Return a list of prime numbers with difference of a and b. \n    '''\n    for i in range(4, len(l)+1, 2): \n        if (l[i] == 2): \n            continue\n        if (l[i"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<=1:\n        return 0\n    i=2\n    s = 0\n    while i<=n:\n        if n%i==0:\n            s=s+i\n            n=n/i\n        else:\n            i+=1\n    return s"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a=0\n    b=n\n    while a<b:\n        if b%a==0:\n            a=a+1\n        else:\n            b=b+1\n    if a==b:\n        return True\n    else:\n        return False\ndef mod(x,y):\n    '''\n    Write a function to determine if a number is a prime.\n    '''\n    if x>y:\n        return True\n    if y==x:\n        return True\n    elif x==1 or y==1:\n        return False\n    else:\n        if x%y==0:\n            return True\n        else:\n            return False\ndef main():\n    n=int(input())\n    while n%10!=0 or n<10:\n        n=int(input())\n    d=div_sum(n)\n    if d:\n        print(\"prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==3:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%32==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%32==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%8==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%4==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%2==0:\n        if n==33:\n            print(\"prime\")\n        else:\n            print(\"not prime\")\n    else:\n        print(\"not prime\")\n    if n%16==0:\n        if n==33:\n            print(\"prime\")\n    "
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    total = 0\n    while n > i:\n        if n % i == 0:\n            total += i\n            n = n//i\n            i = 1\n        else:\n            i += 1\n    return total == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return 0\n    #Step 1: Compute the divisors of n.\n    divisors = []\n    for d in range(1,int(math.sqrt(n))+1):\n        if n%d == 0:\n            divisors.append(d)\n    #Step 2: For each divisor, compare the sum of the divisors and return the index of the divisors.\n    for divisor in divisors:\n        if divisor==0:\n            return 0\n        else:\n            total = 0\n            for i in range(1,int(math.sqrt(n))+1):\n                if n%i == 0:\n                    total += i\n            #Step 3: Calculate the expected return value.\n            expected = int(math.sqrt(n)) * total\n            #Step 4: If the sum of divisors equals the expected return value, return true.\n            if n==expected:\n                return True\n    #Step 5: If the sum of divisors is not equal to the expected return value, return false.\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n==0):\n        return \"No\"\n    elif (n==1):\n        return \"yes\"\n    elif (n==2):\n        return \"no\"\n    else:\n        a=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                a.append(i)\n        if len(a)==0:\n            return \"no\"\n        else:\n            a=sorted(a)\n            for i in range(len(a)):\n                if a[i]!=n:\n                    return \"no\"\n            return \"yes\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Solution 1:\n    # return n % 2 == 0\n    # Solution 2:\n    n = n//2\n    s = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            s+=i\n    if n==s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for n in range(1, n+1):\n        if n % 2 == 0:\n            divisors.append(n)\n    divisors.sort()\n    divisor_sum = 0\n    for divisor in divisors:\n        divisor_sum += divisor\n        if divisor_sum == n:\n            return True\n    return False\n    \ndef isprime(n):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    for d in range(2, int(math.sqrt(n) + 1)):\n        if n % d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Your code here \n    if n == 0: \n        return True\n    else: \n        for i in range(2, int(math.sqrt(n)) + 1): \n            if (n % i == 0) and (div_sum(n // i) == True): \n                return True\n        return False \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    \n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j] and str1[i]!='':\n                count += 1\n                break\n    return count\n    \nstr1 = input('Enter a string: ').upper()\nprint('Number of characters:', count_char_position(str1))"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            n += 1\n    return n\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # To make use of brute force approach, use it in all loops and find the char in the string and add it to a variable\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(set(str1))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char in alphabet:\n            pos = alphabet.index(char)\n            if pos < len(str1) - 1:\n                count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Your code here\n    # test your code here\n    return str1.count('A') + str1.count('Z') + str1.count('a') + str1.count('z') + str1.count('A') + str1.count('Z') + str1.count('a') + str1.count('z')\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    def create_dict(str1):\n        '''\n        Creates a dictionary of the letters and their positions in the given string.\n        '''\n        d = dict()\n        pos = 0\n        while pos < len(str1):\n            if str1[pos].isalpha():\n                d[str1[pos].lower()] = pos\n            pos += 1\n        return d\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    \n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            char_count += 1\n        \n    print(char_count)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    \n    for char in str1:\n        if char.isalpha():\n            count = count + 1\n    \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_num = 0\n    \n    for x in range(len(A)):\n        if A[x] == A[x+1]:\n            pair_num += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd = 0\n    even = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] == A[j]:\n                if(A[i]%2 == 0 and A[j]%2 == 0):\n                    even += 1\n                else:\n                    odd += 1\n    if(odd == 0):\n        return 0\n    else:\n        return odd - 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    l=[]\n    for i in A:\n        if i&1==0:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for i in A:\n        if (i%2) == 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count_even = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] == A[j]:\n                count_even += 1\n    return count_even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    \n    for i in A: \n        if (i&1): \n            count += 1\n    \n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # your code goes here\n    c = 0\n    for i in A:\n        if A.count(i)%2!= 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                pair += 1\n    return pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    # iterate through list and check if xor to even number\n    for i in range(len(A)):\n        if A[i] & 0b10 == A[i] & 0b10:\n            count += 1\n    \n    # convert into string and return count\n    return coun"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in A:\n        if i % 2 == 0:\n            even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = 2\n    n = int(n)\n    while(l <= n):\n        l = l*2\n    return l\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2: \n        return n \n    return n % 2 and next_power_of_2(n // 2) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # create a list to store the power of 2\n    lis = []\n    while n > 0:\n        lis.append(n & 1)\n        n = n >> 1\n    # find the power of 2\n    return max(lis)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Write your code here.\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        i=2\n        while i*i<=n:\n            if n%i==0:\n                break\n            i+=1\n        return i*i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        print('Please enter a non-negative number')\n        return\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n * next_power_of_2(n // 2)\n    else:\n        return n * next_power_of_2(n // 2) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # if n is already an integer\n    if n < 0: \n        return -1 \n    # if n is 0, it's a power of two \n    if n == 0: \n        return 0\n    # if n is less than one, then it should be the smallest power of 2 greater than or equal to n\n    if n < 2: \n        return n \n    # else we will perform the following steps \n    # n must be at least 1\n    # find the smallest power of two greater than or equal to n \n    return next_power_of_2(n//2) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 0\n    if n == 0:\n        return 0\n    while n >= 2:\n        res += 1\n        n = n >> 1\n    return re"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1: \n        return 1 \n    else: \n        return n * next_power_of_2(n-1) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n: \n        if n % power == 0: \n            return power\n        else: \n            power += 1\n    return None\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return(a.count(x))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in range(len(a)):\n        if a[i]==x:\n            c+=1\n    return c"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort()\n    count=0\n    for i in range(len(a)-1):\n        if a[i]==x:\n            count+=1\n    return count\na=[1,1,2,3,3,3,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num_occ = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            num_occ += 1\n    return num_occ\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = {}\n    for i in a:\n        if i in f:\n            f[i] += 1\n        else:\n            f[i] = 1\n    return len(f)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return x.count(a) \n    \nprint(frequency('a', [1,3,3,3,1,2]))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    s = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            s += 1\n    return s\n    \n    \n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len(list(filter(a.__contains__,list(x))))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = dict()\n    for i in range(0,len(a)):\n        if a[i] in count:\n            count[a[i]] = count[a[i]] + 1\n        else:\n            count[a[i]] = 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # code here\n    result = 0\n    if m >= n:\n        if m == 0:\n            result = list1[0]\n            m = len(list1)\n        if n == 0:\n            result = 0\n            n = len(list1)\n    for i in range(0, m, 1):\n        result = result + list1[i]\n    for j in range(0, n, 1):\n        result = result - list1[j]\n    return result\nprint(sum_range_list([3,5,7,8,9,1,2],0,10)"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for num in list1:\n        if (num >= m and num <= n):\n            sum += num\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    list_ = []\n    for i in range(len(list1)):\n        list_.append(list1[i])\n    for i in range(len(list1)):\n        if i < m and list_[i] < list_[i + 1]:\n            temp = list_[i]\n            list_[i] = list_[i + 1]\n            list_[i + 1] = temp\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    list_sum = 0\n    for index in range(m, n):\n        list_sum += list1[index]\n    return list_sum\n        \n    \ndef main():\n    print(\"Give me an int\")\n    print(\"I'll calculate it now\")\n    print(\"If I ask for you to press any key\")\n    input_int = input()\n    print(input_int)\n    print(\"You have 5 attempts\")\n    input_int = int(input_int)\n    while input_int!= 5:\n        print(\"You have 5 attempts\")\n        input_int = int(input())\n    print(\"Thank you!\")\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n    if m > n:\n        return \"m>n\"\n    else:\n        return sum_range_list(list1[m:n+1], m, n)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:                                                                                                                                                                                            \n        return list1[m]                                                                                                                                                                                                \n    elif m > n:                                                                                                                                                                                                    \n        return sum_range_list(list1, m, n-1) + list1[m]                                                                                                                                                                \n    else:                                                                                                                                                                                                    \n        return sum_range_list(list1, m, n-1) - sum_range_list(list1, m+1, n) + list1[n]                                                                                                                        \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum += list1[i]\n    return sum\ndef sum_range_dict(dict1, m, n):\n    '''\n    Write a function to find the sum of numbers in a dictionary within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        if dict1.get(i) is not None:\n            sum += dict1[i]\n    return sum\ndef dict_to_string(dict1):\n    '''\n    Write a function that takes a dictionary as input and converts it to a string.\n    '''\n    return str(dict1)"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 0\n    # The formula to determine perimeter of the regular pentagon is\n    # (3x - 4x + 2)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 5x + 3)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 9x + 5)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 12x + 7)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 14x + 9)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 16x + 11)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 18x + 13)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 20x + 15)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 22x + 17)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 24x + 19)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 26x + 21)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 30x + 23)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 32x + 25)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 34x + 27)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 36x + 29)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 38x + 31)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 40x + 33)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 42x + 35)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 44x + 37)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 46x + 39)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 48x + 41)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 50x + 43)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 52x + 45)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 54x + 47)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 56x + 49)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 58x + 51)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 60x + 53)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 62x + 55)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 64x + 57)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 66x + 59)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 70x + 61)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 72x + 63)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 74x + 65)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 76x + 67)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 78x + 69)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 80x + 71)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 82x + 73)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 84x + 75)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 86x + 77)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 88x + 79)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 90x + 81)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 92x + 83)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 94x + 85)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 96x + 87)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 100x + 89)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 102x + 91)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 104x + 93)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 106x + 95)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 108x + 97)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 110x + 99)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon is\n    # (3x - 112x + 101)\n    # where x is the base of the triangle (a).\n    # The formula to determine perimeter of the pentagon i"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"Perimeter of a pentagon is : \", end=\"\")\n    # Calculate the perimeter of the a regular pentagon.\n    a_square = math.pow(a, 2)\n    p = math.sqrt(a_square)\n    perimeter = p\n    print(perimeter)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = (4 * side)\n    return perimeter\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = (side * 5)\n    return perimeter\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = (side * 4)\n    return perimeter\ndef diagonal(a):\n    '''\n    Write a function to find the diagonal of a regular rhombus from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    diagonal = math.sqrt(side)\n    return diagonal\ndef area(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = perimeter_rhombus(side)\n    area = (side * 4) * math.pi\n    return area\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = perimeter_square(side)\n    area = (side ** 2) * math.pi\n    return area\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = perimeter_pentagon(side)\n    area = (side ** 4) * math.pi\n    return area\ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = perimeter_rhombus(side)\n    area = (side ** 2) * math.pi\n    return area\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    side = a\n    side = side / 3\n    perimeter = side * 5\n    return perimeter\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    side = a\n    side = side / 3\n    perimeter = side * 4\n    area = side ** 2\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    side = a\n    side = side / 6\n    perimeter = side * 8\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    side = a\n    side = side / 6\n    perimeter = side * 5\n    area = side ** 2\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    side = a\n    side = side / 7\n    perimeter = side * 7\n    area = side ** 2\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    side = a\n    side = side / 7\n    perimeter = side * 9\n    return perimeter\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    side = a\n    side = side / 9\n    perimeter = side * 12\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    side = a\n    side = side / 9\n    perimeter = side * 6\n    area = side ** 2\n    return area\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    side = a\n    side = side / 9\n    perimeter = side * 7\n    area = side ** 2\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    side = a\n    side = side / 7\n    perimeter = side * 8\n    area = side ** 2\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    side = a\n    side = side / 7\n    perimeter = side * 9\n    area = side ** 2\n    return perimeter\ndef area_trident(a):\n    '''\n    Write a function to find the area of a trident from the length of its sides.\n    '''\n    side = a\n    side = side / 3\n    perimeter = side ** 2\n    area = side * 3\n    return area\ndef perimeter_trident(a):\n    '''\n    Write a function to find the perimeter of a trident from the length of its sides.\n    '''\n    side = a\n    side = side / 3\n    perimeter = side ** 2\n    area = side * 4\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = side * 5\n    area = side ** 2\n    return area\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = side * 4\n    return perimeter\ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = side * 4\n    area = side ** 2\n    return area\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = side * 4\n    area = side ** 2\n    return perimeter\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = side * 4\n    area = side ** 2\n    return area\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = side * 4\n    area = side ** 2\n    return area\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    side = a\n    side = side / 3\n    perimeter = side * 5\n    area = side ** 2\n    return area\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    side = a\n    side = side / 3\n    perimeter = side * 4\n    area = side ** 2\n    return area\ndef area_rectangle(a):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    side = a\n    side = side / 2\n    perimeter = side * 4\n    area = sid"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    def edge_length(a):\n        '''\n        Define the length of the edges in this case of a regular pentagon.\n        '''\n        return ((2*(a**0.5)) + (2*a**0.5))**0.5\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = a.split(\" \")\n    return (sides[0] + sides[3] + sides[6] + sides[9] + sides[12])\ndef perimeter_quadrilateral(a):\n    '''\n    Write a function to find the perimeter of a regular quadrilateral from the length of its sides.\n    '''\n    sides = a.split(\" \")\n    return (sides[0] + sides[2] + sides[4] + sides[6] + sides[8])\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a regular pentagon.\n    '''\n    sides = a.split(\" \")\n    return (math.sqrt((math.pow(sides[0], 2) + math.pow(sides[3], 2) + math.pow(sides[6], 2) + math.pow(sides[9], 2))) / 2)\ndef area_quadrilateral(a):\n    '''\n    Write a function to calculate the area of a regular quadrilateral.\n    '''\n    sides = a.split(\" \")\n    return (math.pow((math.pow(sides[0], 2) + math.pow(sides[2], 2)), 2) / 2)\ndef area_circle(a):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    rad = a.split(\" \")\n    return (math.pow(math.pi, 2) * (math.pow(rad[0], 2) + math.pow(rad[1], 2)))\ndef perimeter_spi(a):\n    '''\n    Write a function to calculate the perimeter of a spherical pie.\n    '''\n    pi = 3.141592653589793\n    sides = a.split(\" \")\n    return (2 * pi * (math.pow(sides[0], 2) + math.pow(sides[1], 2)))\ndef volume_pentagon(a):\n    '''\n    Write a function to calculate the volume of a regular pentagon.\n    '''\n    sides = a.split(\" \")\n    return (math.pow(sides[0], 3) * math.pow(sides[1], 3) * math.pow(sides[2], 3))\ndef volume_quadrilateral(a):\n    '''\n    Write a function to calculate the volume of a regular quadrilateral.\n    '''\n    sides = a.split(\" \")\n    return (math.pow(math.pow(sides[0], 3) + math.pow(sides[1], 3), 2) * math.pow(math.pow(sides[2], 3) + math.pow(sides[3], 3), 2))\ndef volume_circle(a):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    rad = a.split(\" \")\n    return (math.pow(math.pi, 3) * (math.pow(math.pow(rad[0], 2) + math.pow(rad[1], 2), 2), 2) * math.pow(math.pow(rad[2], 2), 2))\ndef volume_spi(a):\n    '''\n    Write a function to calculate the volume of a spherical pie.\n    '''\n    pi = 3.141592653589793\n    sides = a.split(\" \")\n    return (math.pow(math.pow(sides[0], 3) * math.pow(sides[1], 3), 2) * math.pow(math.pow(sides[2], 3) + math.pow(sides[3], 3), 2))\ndef volume_spi_spi(a):\n    '''\n    Write a function to calculate the volume of a spherical pie.\n    '''\n    sides = a.split(\" \")\n    return (math.pow(math.pow(sides[0], 3) * math.pow(sides[1], 3), 2) * math.pow(math.pow(sides[2], 2) + math.pow(sides[3], 2), 2) * math.pow(math.pow(sides[4], 3), 2))\ndef volume_circle_spi(a):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    rad = a.split(\" \")\n    return (math.pow(math.pow(rad[0], 3) * math.pow(rad[1], 3) * math.pow(rad[2], 3), 2) * math.pow(math.pow(rad[3], 2) + math.pow(rad[4], 2), 2))\ndef volume_ellipse(a):\n    '''\n    Write a function to calculate the volume of an ellipse.\n    '''\n    a = a.split(\" \")\n    x = float(a[0])\n    y = float(a[1])\n    r = float(a[2])\n    phi = math.acos(((2 * r) * (-1) * math.sqrt(r ** 2 - 1)))\n    return (4 * math.pi * math.pow(r, 3) * math.pow(math.cos(phi), 2))\ndef area_spi_ellipse(a):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    a = a.split(\" \")\n    x = float(a[0])\n    y = float(a[1])\n    r = float(a[2])\n    phi = math.acos(((2 * r) * (-1) * math.sqrt(r ** 2 - 1)))\n    return (4 * math.pi * math.pow(r, 3) * math.pow(math.sin(phi), 2))\ndef area_circle_ellipse(a):\n    '''\n    Write a function to calculate the area of an circle.\n    '''\n    a = a.split(\" \")\n    x = float(a[0])\n    y = float(a[1])\n    r = float(a[2])\n    phi = math.acos(((2 * r) * (-1) * math.sqrt(r ** 2 - 1)))\n    return (4 * math.pi * math.pow(r, 3) * math.pow(math.sin(phi), 2))\ndef perimeter_ellipse(a):\n    '''\n    Write a function to calculate the perimeter of an ellipse.\n    '''\n    a = a.split(\" \")\n    x = float(a[0])\n    y = float(a[1])\n    r = float(a[2])\n    phi = math.acos(((2 * r) * (-1) * math.sqrt(r ** 2 - 1)))\n    return (4 * math.pi * math.pow(r, 3) * math.pow(math.cos(phi), 2))\ndef perimeter_spi_ellipse(a):\n    '''\n    Write a function to calculate the perimeter of a spherical pie.\n    '''\n    a = a.split(\" \")\n    x = float(a[0])\n    y = float(a[1])\n    r = float(a[2])\n    phi = math.acos(((2 * r) * (-1) * math.sqrt(r ** 2 - 1)))\n    return (4 * math.pi * math.pow(r, 3) * math.pow(math.sin(phi), 2))\ndef perimeter_circle_ellipse(a):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    a = a.split(\" \")\n    x = float(a[0])\n    y = float(a[1])\n    r = float(a[2])\n    phi = math.acos(((2 * r) * (-1) * math.sqrt(r ** 2 - 1)))\n    return (4 * math.pi * math.pow(r, 3) * math.pow(math.sin(phi), 2))\ndef area_spi_ellipse(a):\n    '''\n    Write a function to calculate the area of a"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = math.sqrt(4*a)\n    return l\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        return 0\n    elif a == 0:\n        return 0\n    elif a % 5 == 0:\n        return (a/5) * 4\n    elif a % 5 == 1:\n        return (a/5) * 3 + 3\n    elif a % 5 == 2:\n        return (a/5) * 2 + 3\n    elif a % 5 == 3:\n        return (a/5) * 2 + 3 + 3\n    elif a % 5 == 4:\n        return (a/5) * 2 + 3 + 3 + 3\n    else:\n        return (a/5) * 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Find the area of the circle\n    area_of_circle = math.pi * (math.pow(2, 0.5))\n    # Calculate the circumference of the circle\n    circumference = 4 * math.pi * math.pow(2, 0.5)\n    # Find the circumference of the circle\n    circumference = circumference + (circumference * a / 2)\n    # Calculate the perimeter\n    perimeter = circumference - a\n    return perimeter\ndef perimeter_hexagon(a):\n    '''\n    Write a function to calculate the perimeter of a regular hexagon from the length of its sides.\n    '''\n    # Find the area of the circle\n    area_of_circle = math.pi * (math.pow(2, 0.5))\n    # Calculate the circumference of the circle\n    circumference = 4 * math.pi * math.pow(2, 0.5)\n    # Find the circumference of the circle\n    circumference = circumference + (circumference * a / 2)\n    # Calculate the perimeter\n    perimeter = circumference - (2 * a)\n    return perimeter\ndef area_triangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle from the base and height of the triangle.\n    '''\n    # Find the circumfrence of the triangle\n    circumference = (a * b) / 2\n    # Find the area of the triangle\n    area_of_triangle = (circumference * b) / 2\n    return area_of_triangle\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square from its side length.\n    '''\n    # Find the square area\n    square_area = math.pow(a, 2)\n    # Find the square area\n    square_area = square_area + math.pow(a, 2)\n    # Return the square area\n    return square_area\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram from its base and height of the parallelogram.\n    '''\n    # Find the parallelogram area\n    parallel_area = a * b / 2\n    # Return the parallelogram area\n    return parallel_area\ndef area_circle(a):\n    '''\n    Write a function to calculate the area of a circle from its circumference.\n    '''\n    # Find the circle area\n    circumference = a * 2\n    # Return the circle area\n    return circumference\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle from its base and height of the rectangle.\n    '''\n    # Find the rectangle area\n    rectangle_area = b * a\n    # Return the rectangle area\n    return rectangle_area\ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a hexagon from its side length.\n    '''\n    # Find the hexagon area\n    hexagon_area = (a ** 2)\n    # Return the hexagon area\n    return hexagon_area\ndef main():\n    '''\n    Call the functions to find the perimeter, perimeter of the regular pentagon, perimeter of the regular\n    hexagon, perimeter of the regular parallelogram, perimeter of the regular circle, perimeter of\n    the regular rectangle, perimeter of the regular parallelogram, perimeter of the parallelogram,\n    area of the triangle, area of the square, area of the parallelogram, area of the parallelogram,\n    area of the rectangle, area of the parallelogram, area of the parallelogram.\n    '''\n    #Perimeter of a regular pentagon\n    print(\"Perimeter of a regular pentagon: \", perimeter_pentagon(5))\n    #Perimeter of a regular hexagon\n    print(\"Perimeter of a regular hexagon: \", perimeter_hexagon(4))\n    #Perimeter of a regular parallelogram\n    print(\"Perimeter of a regular parallelogram: \", perimeter_parallelogram(5, 4))\n    #Perimeter of a regular circle\n    print(\"Perimeter of a regular circle: \", perimeter_circle(5))\n    #Perimeter of a regular rectangle\n    print(\"Perimeter of a regular rectangle: \", perimeter_rectangle(5, 4))\n    #Perimeter of a regular parallelogram\n    print(\"Perimeter of a regular parallelogram: \", perimeter_parallelogram(5, 4))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3 * (a ** 3)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # the formula is\n    # a^2 + 2 a + 3b + 4c + 5d = 4*(a^2 + 4a + 4b + 4c + 4d + 4e)\n    # where a is the length of the sides of the triangle\n    # formula = (1/2) * (a^2 + a + 2b + 2c + 4d + 4e)\n    return ((math.sqrt(a * a * a + 4 * a * a + 4 * a + 2 * a + 4) + (2 * a * a + 4 * a * a + 4 * a + 4) * a + 4 * a * a + 4) / 6)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #my idea\n    #make a hashmap to keep track of the occurrences\n    #s is the input string\n    #return the number of times the string'std' occurs\n    m = {}\n    for c in s:\n        if c in m:\n            m[c] += 1\n        else:\n            m[c] = 1\n    return len(m)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # if the given string is empty or not a string, return 0\n    if not s or not s.strip():\n        return 0\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance(s):\n        c=0\n        for i in range(len(s)):\n            if s[i]=='s':\n                c+=1\n        return c\n    return count_occurance(s)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in range(len(s)):\n        if s[i]==\"std\":\n            c+=1\n    return c\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = dict()\n    for ch in s:\n        if ch not in counter:\n            counter[ch] = 0\n        counter[ch] += 1\n    return len(counter)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return len(s) - (s.count('std') - s.count('st'))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = {}\n    occur = 0\n    for i in s:\n        if i == \"std\":\n            occur += 1\n    for i in occur:\n        occurance[i] = occur[i] + 1\n    return occur\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = dict()\n    for char in s:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    return len(count)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    from pprint import pprint\n    assert type(test_tuple) == tuple, \"type of the tuple must be tuple\"\n    types = [type(item) for item in test_tuple]\n    if len(types) == 1:\n        return True\n    elif len(types) == 2:\n        return all(type(item) == types[0] for item in test_tuple)\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    d = dict()\n    for i in test_tuple:\n        if i in d.keys():\n            return False\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    value_list = test_tuple[0]\n    for element in value_list:\n        if type(element)!= type(test_tuple[1]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 2:\n        if not isinstance(test_tuple[0], int):\n            raise TypeError('First element in tuple should be a number')\n        if not isinstance(test_tuple[1], int):\n            raise TypeError('Second element in tuple should be a number')\n        if not isinstance(test_tuple[0], int):\n            raise TypeError('First element in tuple should be a number')\n        if not isinstance(test_tuple[1], int):\n            raise TypeError('Second element in tuple should be a number')\n    if len(test_tuple) == 3:\n        if not isinstance(test_tuple[0], int):\n            raise TypeError('First element in tuple should be a number')\n        if not isinstance(test_tuple[1], int):\n            raise TypeError('Second element in tuple should be a number')\n        if not isinstance(test_tuple[2], int):\n            raise TypeError('Third element in tuple should be a number')\n    if len(test_tuple) == 4:\n        if not isinstance(test_tuple[0], int):\n            raise TypeError('First element in tuple should be a number')\n        if not isinstance(test_tuple[1], int):\n            raise TypeError('Second element in tuple should be a number')\n        if not isinstance(test_tuple[2], int):\n            raise TypeError('Third element in tuple should be a number')\n        if not isinstance(test_tuple[3], int):\n            raise TypeError('Fourth element in tuple should be a number')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        tup = (1,2,3,4)\n        print(f\"Tuple before type checking : {tup}\")\n        print(type(tup[0]))\n        print(type(tup[1]))\n        print(type(tup[2]))\n        print(type(tup[3]))\n        print(\"*\"*50)\n        \n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple have same type\n    try:\n        assert(type(test_tuple[0]) == type(test_tuple[1]))\n        return True\n    except AssertionError:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    a=test_tuple[0]\n    b=test_tuple[1]\n    #f=test_tuple[2]\n    #t=test_tuple[3]\n    #t=test_tuple[4]\n    if type(a)!=type(b):\n        print(\"Data types are different. It is not correct in Tuple\")\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_type_list = []\n    type_check_list = []\n    for item in test_tuple:\n        if type(item) == type(1):\n            type_check_list.append(item)\n        elif type(item) == type(''):\n            type_check_list.append(item)\n        else:\n            type_check_list.append(item)\n    return type_check_list\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type = test_tuple[1]\n    return type == type(test_tuple[0])\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for i in test_tuple:\n            if isinstance(i, int) or isinstance(i, float):\n                if len(i)!= len(test_tuple[0]):\n                    return False\n        return True\n    except Exception as e:\n        print('*** Check Failed ***')\n        print(f'{test_tuple}')\n        print(e)\n        print('*** Check Failed ***')\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # write your code here\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == x:\n        return 1\n    if len(arr) % 2 == 0:\n        return arr[(len(arr) // 2)]\n    else:\n        if arr[0] < x:\n            return is_majority(arr[(len(arr) // 2):], n, x)\n        else:\n            return is_majority(arr[:len(arr) // 2], n, x)\n        \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write the function\n    #    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #  O(n + n/2) time complexity because we use hash table\n    #  O(n) space complexity since we are trying to search the data once, so we only have to do it once (or only once)\n    #  The first time, we do the same as above, to get the majority element\n    \n    # Add all the elements in the array, and find the count\n    count = 0\n    for i in range(n):\n        if arr[i]!= x:\n            count += 1\n    \n    # if count == n/2, we have a majority element\n    # print(count)\n    # print(x)\n    if count > n/2:\n        return True\n    else:\n        return False\n    \n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    h = n//2\n    for i in range(n):\n        if (arr[i] == x):\n            return 1\n    for j in range(n):\n        if (arr[i] < x and arr[h] > x):\n            h += 1\n        elif (arr[i] > x and arr[h] < x):\n            h -= 1\n        elif (arr[i] > x):\n            return 1\n    return 0\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) < n:\n        return False\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # the first we add all the elements into an array\n    arr += [None]\n    for i in arr:\n        if i == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left < right:\n        # find middle\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # i: starting index\n    # j: ending index\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr[i] == x:\n            i += 1\n        else:\n            j += 1\n    if i == n and j < n:\n        return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) < n:\n        return False\n    # find the leftmost element with 0 counts\n    leftmost_elem = arr[0]\n    counts = [0 for _ in range(n)]\n    for i in range(1, len(arr)):\n        if arr[i]!= leftmost_elem:\n            if counts[i - 1] == 0:\n                counts[i - 1] += 1\n            else:\n                counts[i - 1] = 0\n            if counts[i] > n / 2:\n                return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # bit count = 2^i * i * i\n    bit_count = 0\n    while n > 0:\n        # set bits = 2^n\n        bit_count += n & 1\n        n = n >> 1\n    return bit_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n < 0:\n        return 'Error: number must be nonnegative'\n    elif n < 2:\n        return n\n    else:\n        count = 0\n        while n!= 0:\n            if n % 2 == 1:\n                n = n//2\n                count += 1\n            else:\n                n = 3 * n + 1\n                count += 1\n        return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in str(n):\n        count += int(i)\n    print(count)\n    return count\ndef count_bit(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in str(n):\n        if int(i) == 1:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Your code here\n    n=int(n)\n    count=0\n    if n==0:\n        return 0\n    while(n>0):\n        if n&1:\n            count+=1\n        n//=2\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    a = bin(n)[2:]\n    count = 0\n    for i in a:\n        if i == '1':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    binary_digits = bin(n)\n    count_set_bits = 0\n    for index in range(len(binary_digits)):\n        if binary_digits[index] == '1':\n            count_set_bits += 1\n    return count_set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    bits = 0\n    bit = 1\n    while bit <= n:\n        if bit % 2 == 0:\n            bits+=1\n        bit += 1\n    return bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = str(n)\n    count = 0\n    for i in n:\n        if i == '1':\n            count += 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n < 0:\n        return 0\n    else:\n        n = n%(2**32)\n        return n.bit_length()\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    temp = []\n    for i in str:\n        if i % 2 == 1:\n            temp.append(i)\n    temp = ''.join(temp)\n    return temp\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for value in str:\n        if value % 2 == 0:\n            odd_values.append(value)\n    return ''.join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create a list of the odd characters in the string\n    odd_char = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_char.append(str[i])\n    # print out the list\n    print(odd_char)\n    # write a function to create a string from the list\n    odd_string = \"\".join(odd_char)\n    print(odd_string)\n    # print out the result\n    print(odd_string.replace(\"Odd\", \"\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(len(str)) if i % 2!= 0)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_list = str.split(\" \")\n    new_str = \"\"\n    for index in str_list:\n        if int(index) % 2!= 0:\n            new_str += index\n    return new_str\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for i in range(len(str)):\n        if (i % 2)!= 0:\n            if str[i] not in odd_index:\n                odd_index.append(str[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) % 2 == 0:\n        return (str[:len(str)//2] + str[len(str)//2+1:])\n    else:\n        return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    arr = list(str)\n    for i in range(0, len(arr)):\n        if arr[i % 2] % 2!= 0:\n            arr[i] = arr[i % 2]\n    return(''.join(arr))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            res += str[i]\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = str\n    new_str = new_str.lower()\n    new_str = new_str.replace(' ', '')\n    new_str = new_str.split(' ')\n    new_str = [i for i in new_str if i!= '']\n    return''.join(new_str)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    else:\n        return c\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b + c and b < c + a and c < a + b: \n        return min(a,b,c) \n    else : \n        return None \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b: \n        if a > c: \n            return a \n        else: \n            return c\n    elif b > c: \n        if b > a: \n            return b \n        else: \n            return c\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a > b): \n        if (a > c): \n            return a\n        else: \n            return c\n    elif (b > c): \n        return b\n    else: \n        return c\nprint(min_of_three(1,2,3))\nprint(min_of_three(1,2,3,5,8,7))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if a<b and a<c else b if b<c else c"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        minimum = a\n    elif b < a and b < c:\n        minimum = b\n    else:\n        minimum = c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n    \n    \ndef add(a,b,c):\n    '''\n    Write a function that adds up the three numbers in an array, but it doesn't\n    have to be a list.  For example, add(3,4,5) should return the value 15.\n    '''\n    return min_of_three(a,b,c)+min_of_three(a,c,b)\n    \ndef sub(a,b,c):\n    '''\n    Write a function that subtracts up the three numbers in an array, but it\n    doesn't have to be a list.  For example, sub(3,4,5) should return the value 5.\n    '''\n    return min_of_three(a,b,c)-min_of_three(a,c,b)\n    \ndef mul(a,b,c):\n    '''\n    Write a function that multiplies up the three numbers in an array, but it\n    doesn't have to be a list.  For example, mul(3,4,5) should return the value 30.\n    '''\n    return min_of_three(a,b,c)*min_of_three(a,c,b)\n    \ndef div(a,b,c):\n    '''\n    Write a function that divides up the three numbers in an array, but it\n    doesn't have to be a list.  For example, div(3,4,5) should return the value 2.\n    '''\n    return min_of_three(a,b,c)/min_of_three(a,c,b)\n    \n    \nif __name__ == '__main__':\n    print('Enter the first number: ')\n    a = int(input())\n    \n    print('Enter the second number: ')\n    b = int(input())\n    \n    print('Enter the third number: ')\n    c = int(input())\n    \n    print('Enter the action: ')\n    \n    if a < b < c:\n        print(add(a,b,c))\n    elif a < b < c:\n        print(sub(a,b,c))\n    elif a < b < c:\n        print(mul(a,b,c))\n    elif a < b < c:\n        print(div(a,b,c))\n    else:\n        print('That is not a valid action')"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n == 0):\n        return True\n    elif (n==1):\n        return ((r-l)%2==0)\n    elif (r-l)%2!=0:\n        return all_Bits_Set_In_The_Given_Range(n-1,l,r)\n    elif (r-l)%2==0:\n        return all_Bits_Set_In_The_Given_Range(n-1,l,r-1)\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l>n or r<0):\n        return \"Invalid Input\"\n    if(r==0):\n        print(all_Bits_Set_In_The_Given_Range(n,l,1))\n    elif(r==n-1):\n        print(all_Bits_Set_In_The_Given_Range(n,l,n))\n    else:\n        i=0\n        while(i<n and l<=r):\n            if(l&(1<<i)==0):\n                print(\"1\",end=\"\")\n            elif(l&(1<<i)==1):\n                print(\"0\",end=\"\")\n            i+=1\n        print()\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # looping for checking the range\n    for i in range(l,r+1):\n        temp = n & i # extract the bits from the given range\n        if(temp): # if the bits are set then it is a set\n            return 0\n    return 1 # if it is not a set then it is a set\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = l     # index start from 0\n    while (i <= r):          # loop until the given range is covered\n        count = 0\n        while (i < n):          # loop while the bit is not set in the range\n            if (i & (1 << n - 1 - 1)):      # set bit value\n                count += 1\n            i += 1\n        if (count == 0):              # if the count is zero, then the bit is not set\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res=0\n    for i in range(1,n+1):\n        if (l+r)&i==0:\n            res+=1\n    if res==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        a=bin(i)[2:].zfill(n)\n        if len(a)==n:\n            print(a)\n            return\n    print(\"0\")\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l < n):\n        return False\n    if (r < n):\n        return False\n    if (n < l):\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Initializing the bit set\n    bit_set = 0\n    \n    for i in range(n):\n        if (((l & (2**i)) == 0) and ((r & (2**i)) == 0)):\n            bit_set += 1\n            \n    return bit_set == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #all bits are zero\n    if(n==0):\n        return True\n    #at least one bit is 1\n    if(l==r and r!=n-1):\n        return False\n    #compare each bit in the range\n    for i in range(l,r+1):\n        if(n&i!=0):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print('n,l,r: ',n,l,r)\n    m = (((2**n)-1) * n) / r\n    m = round(m)\n    print('m: ', m)\n    print('2**n - 1: ', 2 ** n - 1)\n    print('2**n: ', 2**n)\n    print('2**n - r: ', 2**n - r)\n    print('n: ', n)\n    print('r: ', r)\n    print('l: ', l)\n    print('m: ', m)\n    print('r: ', r)\n    print('n: ', n)\n    print('r: ', r)\n    if (m == 2**n - 1):\n        print('The range is : ',n,'-',r)\n        return 'False'\n    else:\n        print('The range is : ',n,'-',r)\n        return 'True'\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    if arr == []:\n        return arr\n    arr_new = [i for i in arr if i > 0]\n    # if first element is negative, add the second element\n    if arr_new[0] < 0:\n        arr_new.append(arr_new[0] + n)\n    # if first element is positive, replace with new number\n    else:\n        arr_new.insert(0, arr_new[0] + n)\n    # if last element is negative, remove the last element\n    if arr_new[-1] < 0:\n        arr_new.pop()\n    # if last element is positive, remove the first element\n    else:\n        arr_new.pop(0)\n    # return the modified array\n    return arr_ne"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    rearranged = []\n    for i in range(n):\n        if arr[i] < 0:\n            rearranged.append(-1*arr[i])\n        else:\n            rearranged.append(arr[i])\n    return rearranged\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 1:\n        return arr\n    arr = sorted(arr, reverse=True, key=abs)\n    for i in range(n-1):\n        if arr[i] > 0:\n            arr[i+1] = -arr[i]\n    arr[0] = arr[-1]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    index = 0\n    while index < len(arr):\n        if arr[index] < 0:\n            positive.append(arr[index])\n        elif arr[index] > 0:\n            negative.append(arr[index])\n        index += 1\n    index = 0\n    while index < len(arr):\n        if arr[index] < 0:\n            positive.append(arr[index])\n        elif arr[index] > 0:\n            negative.append(arr[index])\n        index += 1\n    temp_arr = positive + negative\n    index = 0\n    while index < len(arr):\n        if arr[index] < 0:\n            temp_arr[index] = arr[index]\n        elif arr[index] > 0:\n            temp_arr[index] = -arr[index]\n        index += 1\n    return temp_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n            new_arr.append(arr[i])\n        else:\n            new_arr.append(arr[i])\n            new_arr.append(arr[i])\n    new_arr.sort()\n    for i in range(n):\n        if new_arr[i] < 0:\n            new_arr[i] = new_arr[i] * -1\n        new_arr.insert(i, new_arr[i])\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp_arr = arr.copy()\n    # initialize the current_index variable\n    current_index = 0\n    # iterate through the elements of the original array\n    for i in range(len(arr)):\n        # check if the current index is less than the size of the array\n        if current_index < n:\n            temp_arr[current_index] = arr[i]\n            # remove the element from the current index\n            current_index += 1\n        else:\n            temp_arr[current_index] = arr[i]\n            # remove the current index element\n            current_index -= 1\n    # return the new array\n    return temp_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[:n]\n    arr[:] = arr.sort()[::-1]\n    arr = arr[:n]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(0, len(arr)):\n        if arr[i] >= 0:\n            new_arr.append(arr[i])\n        else:\n            new_arr.append(arr[i] * -1)\n    new_arr.sort()\n    for i in range(0, len(new_arr) - n):\n        new_arr.append(new_arr[i] * -1)\n    return new_arr\n    \ndef check_assignment(i, new_arr):\n    '''\n    Write a function that takes in an index position of an array, and a new array of integers. The function should return a boolean result that indicates whether the new array is the same as the original array.\n    '''\n    if new_arr[i] == 0:\n        return False\n    else:\n        return True\n    \ndef get_min_max_of_all_elements(arr):\n    '''\n    Write a function that takes in an array of integers and returns a tuple of two integers, the minimum and maximum number of elements in the array, and the unique values of the array.\n    '''\n    min_ = 0\n    max_ = 0\n    unique = []\n    for i in arr:\n        if i < 0:\n            unique.append(i)\n        if i >= 0:\n            min_ = i\n            min_list = unique\n        else:\n            max_ = i\n            max_list = unique\n    return min_, max_, min_list, max_list\n    \ndef calculate_product(A, B):\n    '''\n    Write a function that takes in a two dimensional array and returns the product of the elements in the two dimensional array.\n    '''\n    if len(A) == 0 or len(B) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0] * B[0]\n    else:\n        return A[0] * B[0] + calculate_product(A[1:], B[1:])\n    \ndef check_product(product, A, B):\n    '''\n    Write a function that takes in a two dimensional array and returns a boolean result that indicates whether the product of all the elements in the array is the same as the array of all the elements.\n    '''\n    if product == 0:\n        return False\n    elif product > 0:\n        if A == 0 or B == 0:\n            return False\n        else:\n            return A * B == product\n    else:\n        if A == 0 or B == 0:\n            return False\n        else:\n            return B * A == product\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # process:\n    for i in range(n):\n        arr[0] = arr[0] - arr[i] # shift first element by +1\n        arr[i] = arr[i] + arr[n - 1] # shift last element by -1\n        arr[n - 1] = arr[n - 1] - arr[i] # shift last element by +1\n        \n    return arr\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = [0] * n\n    pos = [0] * n\n    i = 0\n    for num in arr:\n        if num > 0:\n            neg[i] = num\n            i += 1\n        else:\n            pos[i] = num\n            i += 1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return char.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    str1 = str1.replace('\\n', '')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            list1.append(char)\n        else:\n            list2.append(str1[i])\n    return(\"\".join(list1), \"\".join(list2))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\r','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Return the string\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n    \ndef test_replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return replace_blank(str1,char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,\" \")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=str1.replace(char,'*')\n    return str2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(list1[i][1],list1[i][0]))\n    heapq.heapify(heap)\n    return [x[1] for x in heap]\n    \ndef set_weights(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n elements of the list multiplied by the sum of their weights.\n    '''\n    total = 0\n    for i in range(n):\n        total += list1[i][1]*list1[i][2]\n    return total\n    \ndef get_elem_of_nth(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the nth element of the list.\n    '''\n    return list1[n]\n    \ndef add_elem_to_nth(list1,n,val):\n    '''\n    Write a function that takes in a list and an integer n and a number val and returns the list with the nth element of val multiplied by the sum of its weights.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(list1[i][1]*val,list1[i][0]))\n    heapq.heapify(heap)\n    return [x[1]*x[2] for x in heap]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    '''\n    Sample List\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    Max: 5\n    '''\n    p_arr = []\n    for i in range(n):\n        p_arr.append(list1.pop(0))\n    p_arr.sort(reverse=True)\n    return p_arr\ndef largest_heap(list1):\n    '''\n    Write a function that takes a list and returns the n largest elements in the list.\n    '''\n    '''\n    Sample List\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    Max: 6\n    '''\n    p_arr = []\n    for i in range(len(list1)):\n        p_arr.append(list1[i])\n    p_arr.sort()\n    return p_arr\ndef shortest_heap(list1):\n    '''\n    Write a function that takes a list and returns the n smallest elements in the list.\n    '''\n    '''\n    Sample List\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    Min: 4\n    '''\n    p_arr = []\n    for i in range(len(list1)):\n        p_arr.append(list1[i])\n    p_arr.sort()\n    return p_arr\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        list2.append(list1.pop(0))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    larg = []\n    larg.append(list1[0])\n    for i in range(1,n):\n        if larg[i-1][0] < larg[i-1][1]:\n            larg.append(list1[i])\n    return larg\ndef main():\n    '''\n    Write a function that takes in a list of numbers and returns a list of the largest numbers.\n    '''\n    small = []\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10))\n    small.append(randrange(0,10)"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return list1[0:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return []\n    l=[]\n    for i in list1:\n        if list1.index(i)>n:\n            heapq.heappush(l,i)\n    l.sort()\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heap\ndef get_best_k_nnum(list1,k,n):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,list1[i])\n    for i in range(k,n):\n        heapq.heappop(heap)\n    return heap\ndef get_best_k_largest(list1,k,n):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,list1[i])\n    for i in range(k,n):\n        heapq.heappop(heap)\n    return heap\ndef get_k_largest(list1,k,n):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,list1[i])\n    for i in range(k,n):\n        heapq.heappop(heap)\n    return heap\ndef get_k_largest_2(list1,k,n):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,list1[i])\n    for i in range(k,n):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    result = []\n    for i in range(0,n):\n        result.append(heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    max_heap=[]\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n        heapq.heappush(max_heap,-heapq.heappop(heap))\n    return max_heap\ndef klargest(list1,k):\n    '''\n    Return a list that contains k largest elements from the list.\n    '''\n    heap=[]\n    max_heap=[]\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n        heapq.heappush(max_heap,-heapq.heappop(heap))\n    return max_heap\ndef reverse(list1,n):\n    '''\n    Returns a list that contains the n elements in reverse order from the list.\n    '''\n    l=[]\n    i=0\n    while i<len(list1):\n        l.append(list1[i])\n        i=i+1\n    for j in range(n):\n        l[len(l)-1-j]=l[len(l)-1-j][::-1]\n    return l\ndef quicksort(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort2(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort3(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort4(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort5(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort6(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort7(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort8(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort9(list1, n):\n    '''\n    Return a list that contains n elements in the same order as the list.\n    '''\n    def quicksort_helper(l, n):\n        if n==1:\n            return l\n        if len(l)<=1:\n            return l\n        pivot=l[n//2]\n        left=[]\n        right=[]\n        for i in l:\n            if i[n]<pivot[n]:\n                left.append(i)\n            else:\n                right.append(i)\n        return quicksort_helper(left, n//2) + [pivot] + quicksort_helper(right, n//2)\n    return quicksort_helper(list1, n)\ndef quicksort10(lis"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        if len(heap) <= n:\n            heapq.heappush(heap,i)\n            #print(heap)\n        elif len(heap) > n:\n            if i > heapq.heappop(heap):\n                heapq.heappop(heap)\n                #print(heap)\n            #print(heap)\n    return heap\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Determine the height of the cylinder\n    h = h/2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def inner_cylinder(r,h):\n        return (4*(np.pi*r*r))*(np.pi)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Define a 3D mesh for the cylinder\n    cylinder = bpy.data.meshes.new(name='cylinder')\n    cylinder.from_pydata(r,[(0,0,0)], r)\n    cylinder.validate()\n    \n    # Find the center of mass of the cylinder\n    center = cylinder.calc_center()\n    \n    # Get the normal vector of the cylinder\n    normal = cylinder.matrix_world.normalized()\n    \n    # Set the radius of the cylinder\n    cylinder.dimensions = h,h,h\n    \n    return cylinder, center, normal\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * pi * r * h) / 6.5\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=np.pi*(r**2)\n    b=2*np.pi*r\n    return a-2*(h**2)*b\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    u = h\n    k = r\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # write your code here\n    return (3*(r**2))*np.pi*h/2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = r**2*h**2*5\n    return A\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L = 4*h*math.pi\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    def convex(angle,t):\n        '''\n        Convex:\n        angle - angle (in radians)\n        t - distance (in meters)\n        '''\n        return ((t)/(math.sin(angle)))*math.cos(angle)\n    def verts_from_angles(angle,t):\n        '''\n        Vertices from the given angle and distance, to the vertical cylinder\n        '''\n        return convex(angle,t)\n    def truncated(angle,t):\n        '''\n        Truncated:\n        angle - angle (in radians)\n        t - distance (in meters)\n        '''\n        return convex(angle,t)\n    def truncated_to_vert_cylinder(v,t):\n        '''\n        Truncated to the vertical cylinder:\n        v - vertical distance (in meters)\n        t - distance (in meters)\n        '''\n        return verts_from_angles(v,t)\n    def verts_from_distance(v,t):\n        '''\n        Vertices from distance and angle, to the vertical cylinder\n        '''\n        return truncated_to_vert_cylinder(v,t)\n    def perpendicular_to_vert_cylinder(v,t):\n        '''\n        Perpendicular to vertical cylinder:\n        v - vertical distance (in meters)\n        t - distance (in meters)\n        '''\n        return verts_from_distance(v,t)\n    def perpendicular_to_truncated(v,t):\n        '''\n        Perpendicular to the truncated (vertical) cylinder:\n        v - vertical distance (in meters)\n        t - distance (in meters)\n        '''\n        return truncated(v,t)\n    def verts_from_angles_truncated(angle,t):\n        '''\n        Vertices from the given angle and distance, to the truncated\n        cylinder\n        '''\n        return perpendicular_to_truncated(v,t)\n    def verts_from_angle_truncated(angle,t):\n        '''\n        Vertices from the given angle and distance, to the truncated\n        cylinder\n        '''\n        return perpendicular_to_truncated(v,t)\n    def verts_from_angles(angle,t):\n        '''\n        Vertices from the given angle and distance, to the cylindrical\n        cylinder\n        '''\n        return verts_from_angles_truncated(angle,t)\n    def verts_from_angle(angle,t):\n        '''\n        Vertices from the given angle and distance, to the cylindrical\n        cylinder\n        '''\n        return verts_from_angle_truncated(angle,t)\n    def verts_from_distance(v,t):\n        '''\n        Vertices from distance and angle, to the cylindrical cylinder\n        '''\n        return verts_from_angles(v,t)\n    def center(v):\n        '''\n        Center the circle on the vertical cylinder\n        '''\n        return (v,0,0)\n    def circle(a,b,c):\n        '''\n        Create a triangle surface from a, b and c\n        '''\n        return ((a*b*c)/((a+b+c)))\n    def vertex_dist(v1,v2):\n        '''\n        Compute the distance between two vertices\n        '''\n        return math.sqrt((v1[0]-v2[0])**2+(v1[1]-v2[1])**2)\n    def vertex_angle(v1,v2):\n        '''\n        Compute the angle between two vertices\n        '''\n        return math.atan2(v1[1]-v2[1],v1[0]-v2[0])\n    def verts_intersect(v1,v2):\n        '''\n        Finds all the triangles that touch v1 or v2\n        '''\n        intersect = []\n        for i in range(len(v1)):\n            for j in range(len(v2)):\n                if v1[i][0]<=v2[j][0]<=v1[i][0]+v1[i][2] and v2[j][0]<=v2[j][0]+v2[j][2] and v1[i][1]<=v2[j][1]<=v1[i][1]+v1[i][3] and v2[j][1]<=v2[j][1]+v2[j][3]:\n                    intersect.append([v1[i],v2[j]])\n        return intersect\n    def find_distance(v1,v2):\n        '''\n        Find the distance between the two vertices\n        '''\n        v3=vertex_dist(v1,v2)\n        return v3\n    def find_angle(v1,v2):\n        '''\n        Find the angle between the two vertices\n        '''\n        v4=vertex_angle(v1,v2)\n        return v4\n    def find_intersection(v1,v2):\n        '''\n        Finds all the triangles that touch v1 or v2\n        '''\n        intersect = []\n        for i in range(len(v1)):\n            for j in range(len(v2)):\n                if v1[i][0]<=v2[j][0]<=v1[i][0]+v1[i][2] and v2[j][0]<=v2[j][0]+v2[j][2] and v1[i][1]<=v2[j][1]<=v1[i][1]+v1[i][3] and v2[j][1]<=v2[j][1]+v2[j][3]:\n                    intersect.append([v1[i],v2[j]])\n        return intersect\n    def count_vert(v1,v2):\n        '''\n        Count the number of vertices\n        '''\n        count = 0\n        for i in range(len(v1)):\n            for j in range(len(v2)):\n                if v1[i][0]<=v2[j][0]<=v1[i][0]+v1[i][2] and v2[j][0]<=v2[j][0]+v2[j][2] and v1[i][1]<=v2[j][1]<=v1[i][1]+v1[i][3] and v2[j][1]<=v2[j][1]+v2[j][3]:\n                    count += 1\n        return count\n    def count_triangle(v1,v2):\n        '''\n        Count the number of triangles\n        '''\n        count = 0\n        for i in range(len(v1)):\n            for j in range(len(v2)):\n                if v1[i][0]<=v2[j][0]<=v1[i][0]+v1[i][2] and v2[j][0]<=v2[j][0]+v2[j][2] and v1[i][1]<=v2[j][1]<=v1[i][1]+v1[i][3] and v2[j][1]<=v2[j][1]+v2[j][3]:\n                    count += 1\n        return count\n    def find_center(v1,v2):\n        '''\n        Find the center of the circle\n        '''\n        v3=vertex_dist(v1,v2)\n        return v3\n    def find_center_intersect(v1,v2):\n        '''\n        Find the center of the circle\n        '''\n        v4=vertex_angle(v1,v2)\n        return v4\n    def find_circle(v1,v2):\n        '''\n        Find the circle of the given vertices\n        '''\n        return circle(v1[0],v1[1],v2[0])\n    def find_circle_intersect(v1,v2):\n        '''\n        Find the circle of the given vertices\n        '''\n        return circle(v1[0],v1[1],v2[0]"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for d in range(1,l+1):\n        vol += d * d * d\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    from math import pi\n    from math import sqrt\n    print(\"Enter the side length of the cube as a number: \")\n    side_len = int(input())\n    print(f\"Calculating volume of the cube of length {side_len}\")\n    print(\"\\n\")\n    area = pi * pow(side_len, 2)\n    print(f\"The volume of the cube is {area}\")\n    print(\"\\n\")\n    volume = area * pow(side_len, 3)\n    print(f\"The volume of the cube is {volume}\")\n    print(\"\\n\")\n    print(\"Ok!\\n\")\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    if l > 0:\n        return l * l * l * l\n    else:\n        return 0\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = float(l)\n    if l < 0:\n        print('Incorrect input. Must be positive')\n        return None\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for l in l:\n        volume += l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 0\n    for x in range(0, l):\n        v += l ** 2\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = \"\"\n    for i in range(0, n, 2):\n        if i % 2 == 0:\n            even_bits += \"1\"\n        else:\n            even_bits += \"0\"\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        n = n & 0xffff\n        bin_num = bin(n)[2:]\n        bin_num = bin_num.zfill(8)\n        even_bit_set = ''\n        for i in range(0, len(bin_num), 2):\n            if int(bin_num[i]) == 1:\n                even_bit_set += '1'\n            else:\n                even_bit_set += '0'\n        return even_bit_set\n    else:\n        return '0'\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n%2==0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set_number = 0\n    while (n > 0):\n        if (n & 1): \n            even_bit_set_number += 1\n        n >>= 1\n    return even_bit_set_number\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ret = bin(n)\n    count_even = ret.count('1')\n    return count_even\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n & 0x01)!= 0)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n & 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = []\n    if n == 0:\n        return even_bit_set\n    for i in range(2, n):\n        if i % 2 == 0:\n            even_bit_set.append(i)\n    return even_bit_set\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(n)\n    result = \"\"\n    while n > 0:\n        if n & 1 == 0:\n            result += \"0\"\n        else:\n            result += \"1\"\n        n = n >> 1\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, n):\n        if (i % 2) == 0:\n            odd_bit_set_number(i)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = dict()\n    for tuple in test_list:\n        if tuple in dictionary:\n            dictionary[tuple] += 1\n        else:\n            dictionary[tuple] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Create dictionary\n    # Values are unique tuples\n    # Keys are tuples\n    # Calculate the number of occurances of each tuple\n    # Concatenate all the numbers into one string\n    # Return the result\n    # return the dictionary\n    \n    # EXAMPLE\n    # test_list = [('A', 1), ('A', 2), ('A', 1), ('A', 3), ('A', 3), ('B', 1), ('B', 2), ('B', 1), ('B', 3), ('C', 1), ('C', 2), ('C', 1)]\n    # result = {'A': 2, 'B': 4}\n    # return result\n    \n    # print(check_occurences(test_list))\n    # pass\n    # CHECK THAT IT IS AS EXPECTED\n    counter = Counter(test_list)\n    \n    return dict(counter)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = {}\n    for x in test_list:\n        occurence[x] = test_list.count(x)\n    return occurence\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for x,y in test_list:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    dict_data = {}\n    for key, value in counter.items():\n        dict_data[key] = value\n    return dict_data\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tuple in test_list:\n        test_dict[tuple[0]] = test_list.count(tuple[0])\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tup in test_list:\n        result[tup] = result.get(tup, 0) + 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = {}\n    for tuple in test_list:\n        key = tuple[0]\n        count = tuple[1]\n        if key in dict:\n            dict[key] = dict[key] + count\n        else:\n            dict[key] = count\n    return dict\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(0, len(str) - i):\n            if str[j:j + i] == str[j + i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if(str[i] == str[i+1]):\n            count += 1\n        else:\n            return count\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == \"\":\n        return 0\n    else:\n        num_non_empty_substrings = 0\n        for i in range(len(str)):\n            if str[i]!= str[i+1]:\n                num_non_empty_substrings += 1\n        return num_non_empty_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i:i+2][::-1]:\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #create an empty hash table\n    substring_dict = {}\n    #for each character in the string\n    for char in str:\n        #if the char is in the hash table, increment count\n        if char in substring_dict:\n            substring_dict[char] += 1\n        #if not in the hash table, add it, set the count to one\n        else:\n            substring_dict[char] = 1\n    #return the count\n    return substring_dict"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_dictionary = {}\n    for i in range(len(str) - 1): \n        if str[i] in substring_dictionary.keys(): \n            substring_dictionary[str[i]] += 1\n        else: \n            substring_dictionary[str[i]] = 1\n    \n    return substring_dictionary\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # In-built function to count the number of non-empty substrings of a given string\n    count = 0\n    # loop through the string\n    for i in range(0,len(str)-1):\n        # Check if the substring is empty\n        if str[i:i+2] == str[i+1:i+3]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str) - 1):\n        if (str[i:i+2]!= str[i+1:i+2+1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    string = str.lower()\n    return len(string) - len(string.replace(' ',''))\n    \ndef all_substrings(str): \n    '''\n    Write a python function to count all substrings in a given string.\n    '''\n    string = str.lower()\n    return len(string) - len(string.replace(' ',''))\n    \ndef longest_substring_in_a_string(str): \n    '''\n    Write a python function to return the longest substring in a given string.\n    '''\n    string = str.lower()\n    return string[:len(string) - 1]\n    \ndef longest_substrings(str): \n    '''\n    Write a python function to return the longest substrings in a given string.\n    '''\n    string = str.lower()\n    return len(string) - len(string.replace(' ',''))\n    \ndef palindrome(str): \n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    string = str.lower()\n    return string == string[::-1]\n    \ndef is_palindrome(str): \n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    string = str.lower()\n    return string == string[::-1]\n    \ndef is_valid_password(password): \n    '''\n    Write a python function to check if a given password is valid or not.\n    '''\n    valid_password = True\n    if len(password) < 8:\n        valid_password = False\n    elif len(password) > 13:\n        valid_password = False\n    elif any(c not in password for c in 'abcdefghijklmnopqrstuvwxyz'):\n        valid_password = False\n    return valid_password\n        \ndef is_prime(number): \n    '''\n    Write a python function to check if a given number is a prime or not.\n    '''\n    return number > 1\n    \ndef is_prime_factor(number): \n    '''\n    Write a python function to check if a given number is a prime factor or not.\n    '''\n    for i in range(2,number):\n        if number % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    l = len(str)\n    if l <= 1: \n        return 1\n    for i in range(1, l): \n        for j in range(l - i): \n            if str[j:j + i] == str[j:j + i + 1]: \n                substrings += 1\n    return substrings\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # check if m or n are valid inputs\n    if m < 1:\n        return 'Invalid Input'\n    if n < 1:\n        return 'Invalid Input'\n    # initialize variables and array\n    total = 0\n    tuple = []\n    possible_sequences = [[]]\n    # loop through m/n to calculate the number of sequences\n    for i in range(0,m):\n        for j in range(1,n):\n            # add the numbers to the tuple array and add the tuple to the list of tuples\n            tuple.append((i,j))\n            possible_sequences.append(tuple)\n            # update the values of m/n\n            m = m - 1\n            n = n - 1\n            # update the tuple\n            tuple = []\n    # return the number of sequences\n    return len(possible_sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    a = [1] * n\n    for i in range(m, 0, -1):\n        if a[i - 1] < 2:\n            a[i - 1] = 1\n        else:\n            a[i - 1] += 1\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Brute Force Approach\n    # Time = O(n^2), Space = O(n)\n    # Iterate through all possible sequences of length n\n    # For each element (starting at the first element), increment the total count of such sequences, and return the total count.\n    # Time = O(n^2)\n    # Space = O(n)\n    def count(n,m,s):\n        count = 0\n        for i in range(1,m+1):\n            if (m-i) in s:\n                count += 1\n        return count\n    \n    # Recursive Approach\n    # Time = O(n^2), Space = O(n)\n    # For each element, increment the count, and return the count.\n    # Time = O(n^2)\n    # Space = O(n)\n    def count2(n,m,s,i):\n        count = 0\n        if (i in s):\n            count += 1\n        for i in range(1,m+1):\n            if (m-i) in s:\n                count += count2(n,m,s,i)\n        return count\n    \n    # Function that returns the total number of possible sequences\n    def get_total_number_of_sequences(m,n): \n        # Initialize the count variable as 0\n        count = 0\n        # For each element in the first half of the sequence\n        for i in range(n//2):\n            # The second half of the sequence is of length n//2\n            # Increment count by two because we are using the sum of two\n            # Sequences, which is the first half\n            # Count the sequence\n            count += count2(m,n//2,set(range(m//2,n//2+1)),i)\n        # Return the count\n        return count\n    \n    # Driver Code\n    # n = 5\n    # m = 6\n    # s = {2, 3}\n    # print(get_total_number_of_sequences(n,m))\n    \n    # Time = O(n^2) Space = O(n)\n    # for each element, increment the count, and return the count\n    # Time = O(n^2) Space = O(n)\n    def get_total_number_of_sequences(m,n): \n        # Initialize the count variable as 0\n        count = 0\n        # For each element in the first half of the sequence\n        for i in range(n//2):\n            # The second half of the sequence is of length n//2\n            # Increment count by two because we are using the sum of two\n            # Sequences, which is the first half\n            count += count2(m,n//2,set(range(m//2,n//2+1)),i)\n        # Return the count\n        return count\n    \n    # Driver Code\n    # n = 5\n    # m = 6\n    # s = {2, 3}\n    # print(get_total_number_of_sequences(n,m))\n    \n    # Time = O(n^2) Space = O(n)\n    # for each element, increment the count, and return the count\n    # Time = O(n^2) Space = O(n)\n    def get_total_number_of_sequences(m,n): \n        # Initialize the count variable as 0\n        count = 0\n        # For each element in the first half of the sequence\n        for i in range(n//2):\n            # The second half of the sequence is of length n//2\n            # Increment count by two because we are using the sum of two\n            # Sequences, which is the first half\n            count += count2(m,n//2,set(range(m//2,n//2+1)),i)\n        # Return the count\n        return count\n    \n    # Driver Code\n    # n = 5\n    # m = 6\n    # s = {2, 3}\n    # print(get_total_number_of_sequences(n,m))\n    \n    # Time = O(n^2) Space = O(n)\n    # For each element, increment the count, and return the count\n    # Time = O(n^2) Space = O(n)\n    def get_total_number_of_sequences(m,n): \n        # Initialize the count variable as 0\n        count = 0\n        # For each element in the first half of the sequence\n        for i in range(n//2):\n            # The second half of the sequence is of length n//2\n            # Increment count by two because we are using the sum of two\n            # Sequences, which is the first half\n            count += count2(m,n//2,set(range(m//2,n//2+1)),i)\n        # Return the count\n        return count\n    \n    # Driver Code\n    # n = 5\n    # m = 6\n    # s = {2, 3}\n    # print(get_total_number_of_sequences(n,m))\n    \n    # Time = O(n^2) Space = O(n)\n    # For each element, increment the count, and return the count\n    # Time = O(n^2) Space = O(n)\n    def get_total_number_of_sequences(m,n): \n        # Initialize the count variable as 0\n        count = 0\n        # For each element in the first half of the sequence\n        for i in range(n//2):\n            # The second half of the sequence is of length n//2\n            # Increment count by two because we are using the sum of two\n            # Sequences, which is the first half\n            count += count2(m,n//2,set(range(m//2,n//2+1)),i)\n        # Return the count\n        return count\n    \n    # Driver Code\n    # n = 5\n    # m = 6\n    # s = {2, 3}\n    # print(get_total_number_of_sequences(n,m))\n    \n    # Time = O(n^2) Space = O(n)\n    # For each element, increment the count, and return the count\n    # Time = O(n^2) Space = O(n)\n    def get_total_number_of_sequences(m,n): \n        # Initialize the count variable as 0\n        count = 0\n        # For each element in the first half of the sequence\n        for i in range(n//2):\n            # The second half of the sequence is of length n//2\n            # Increment count by two because we are using the sum of two\n            # Sequences, which is the first half\n            count += count2(m,n//2,set(range(m//2,n//2+1)),i)\n        # Return the count\n        return count\n    \n    # Driver Code\n    # n = 5\n    # m = 6\n    # s = {2, 3}\n    # print(get_total_number_of_sequences(n,m))\n    \n    # Time = O(n^2) Space = O(n)\n    # For each element, increment the count, and return the count\n    # Time = O(n^2) Space = O(n)\n    def get_total_number_of_sequences(m,n): \n        # Initialize the count variable as 0\n        count = 0\n        # For each element in the first half of the sequence\n        for i in range(n//2):\n            # The second half of the sequence is of length n//2\n            # Increment count by two because we are using the sum of two\n            # Sequences, which is the first half\n            count += count2(m,n//2,set(range(m//2,n//2+1)),i)\n        # Return the count\n        return count\n    \n    # Driver Code\n    # n = 5\n    # m = 6\n    # s = {2, 3}\n    # print(get_total_number_of_sequences(n,m))\n    \n    # Time = O(n^2) Space = O(n)\n    # For each element, increment the count, and return the count\n    # Time = O(n^2) Space = O(n)\n    def get_total_number_of"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(1,n+1): \n        for j in range(m):\n            if j < i: \n                if j % 2 == 0: \n                    total_number_of_sequences += 1\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Write your code here\n    if n == 1:\n        return 1\n    elif n%2 == 0:\n        return get_total_number_of_sequences(m, n//2)\n    elif n % 2 == 1:\n        return get_total_number_of_sequences(m, (n//2)+1)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Your code here\n    return 2*(m**n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(4*m*n/2 - m*(n-1) + 4*n - m + 2)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Write your code here\n    # raise NotImplementedError\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    num_possible_sequences = 0\n    \n    for i in range(m, n + 1):\n        \n        if num_possible_sequences < n:\n            \n            if 2 * i > m:\n                \n                num_possible_sequences += 1\n                \n    return num_possible_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list1) + list(list2[-1:])\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2.pop(-1)\n    list1[-1]=list2\n    print(list1)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1.insert(len(list1)-1,list2[len(list2)-1])\n    \n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in list1:\n        list1[list1.index(i)] = list2[list2.index(i)]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    for j in range(len(list2)):\n        new_list.append(list2[j])\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())\n    print(list1)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    list1.pop()\n    list2.pop()\n    for element in list1:\n        new_list.append(element)\n    for element in list2:\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list2)-1]+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i]!= str1[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_char = len(str1)\n    return count_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # 1. Declare the variables and the count\n    char_count = 0\n    for i in range(len(str1)):\n        for j in str1[i]:\n            char_count += j\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i] =='':\n            count+=1\n        else:\n            continue\n    return count\n    #Write your code here\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # pylint: disable=W0621\n    # pylint: disable=C0103\n    '''\n    >>> print(count_charac(\"AbcDefgHi\"))\n    6\n    '''\n    result = 0\n    for char in str1:\n        result += 1\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for x in str1:\n        if(x == 'A' or x == 'a'):\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for i in range(len(str1)):\n        total = total + str1[i].__len__()\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char =='':\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square(N / 2) + 1\n    else: \n        return next_Perfect_Square((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_improved(N): \n    '''\n    Write a python function that finds the next perfect square greater than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_improved(N / 2) + 1\n    else: \n        return next_Perfect_Square_improved((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_greater_than(N): \n    '''\n    Write a python function that finds the next perfect square greater than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_greater_than(N / 2) + 1\n    else: \n        return next_Perfect_Square_greater_than((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_greater_than_improved(N): \n    '''\n    Write a python function that finds the next perfect square greater than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_greater_than_improved(N / 2) + 1\n    else: \n        return next_Perfect_Square_greater_than_improved((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_improved(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_improved(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_improved((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_greater_than(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_greater_than(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_greater_than((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_greater_than_improved(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_greater_than_improved(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_greater_than_improved((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_greater_than_greater_than(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_greater_than_greater_than(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_greater_than_greater_than((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_less_than(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_less_than(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_less_than((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_less_than_improved(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_less_than_improved(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_less_than_improved((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_greater_than_less_than(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_greater_than_less_than(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_greater_than_less_than((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_greater_than_less_than_improved(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_greater_than_less_than_improved(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_greater_than_less_than_improved((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_greater_than_greater_than_less_than(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_greater_than_less_than(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_greater_than_less_than((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_less_than_greater_than_greater_than_improved(N): \n    '''\n    Write a python function that finds the next perfect square less than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_less_than_greater_than_improved(N / 2) + 1\n    else: \n        return next_Perfect_Square_less_than_greater_than_improved((N - 1) / 2) + 1\n    \n    \ndef next_Perfect_Square_greater_than_less_than_less_than(N): \n    '''\n    Write a python function that finds the next perfect square greater than a given number.\n    '''\n    if (N == 1): \n        return 1\n    if (N % 2 == 0): \n        return next_Perfect_Square_greate"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        return None\n    if N == 0:\n        return 1\n    if N == 1:\n        return 2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def next_Perfect_Square(n):\n        if n == 0:\n            return n\n        if n % 2 == 0:\n            return next_Perfect_Square(n//2)\n        return (n*(n+1))//2\n    if N == 0:\n        return 0\n    return next_Perfect_Square(N)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1: \n        return 0\n    if N == 2:\n        return 1\n    if N == 3:\n        return 4\n    if N % 2 == 0: \n        return next_Perfect_Square(N/2)\n    else:\n        return next_Perfect_Square(N-1) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Your code goes here\n    a=N\n    if a==1:\n        return 1\n    if a==2:\n        return 2\n    a=a*2\n    if a==1:\n        return 3\n    a=math.ceil(math.sqrt(a))\n    if a==a+1:\n        return a+2\n    if a==a-1:\n        return a+3\n    a=math.ceil(math.sqrt(a))\n    a=a*2\n    if a==a-1:\n        return a+2\n    if a==a+2:\n        return a+3\n    a=math.ceil(math.sqrt(a))\n    a=a*2\n    a=a*2\n    return a+3\n    \n    \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        print(\"The given number is negative\")\n        return\n    elif N == 0:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=int(math.sqrt(N))\n    y=1\n    while True:\n        if (N-x)%x==0 and (N-x)%y==0:\n            y=y+1\n            x=x+1\n        elif (N-x)%x==0 and (N-x)%y!=0:\n            y=y+1\n            x=x+1\n        else:\n            break\n    return N-x*y\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1,N,2):\n        # find the value of next perfect square using Fermat's Little Theorem\n        a = math.factorial(N)/(math.factorial(i)*math.factorial(N-i))\n        # test if the next perfect square is greater than the current square\n        if a > math.sqrt(N):\n            return N\n    # No perfect square\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #n = 3\n    #square_1 = 1\n    #square_2 = 3\n    #square_3 = 9\n    square_1 = 1\n    square_2 = square_1 + square_1\n    square_3 = square_2 + square_2\n    square_4 = square_3 + square_3\n    square_5 = square_4 + square_4\n    square_6 = square_5 + square_5\n    square_7 = square_6 + square_6\n    square_8 = square_7 + square_7\n    square_9 = square_8 + square_8\n    square_10 = square_9 + square_9\n    square_11 = square_10 + square_10\n    square_12 = square_11 + square_11\n    square_13 = square_12 + square_12\n    square_14 = square_13 + square_13\n    square_15 = square_14 + square_14\n    square_16 = square_15 + square_15\n    square_17 = square_16 + square_16\n    square_18 = square_17 + square_17\n    square_19 = square_18 + square_18\n    square_20 = square_19 + square_19\n    square_21 = square_20 + square_20\n    square_22 = square_21 + square_21\n    square_23 = square_22 + square_22\n    square_24 = square_23 + square_23\n    square_25 = square_24 + square_24\n    square_26 = square_25 + square_25\n    square_27 = square_26 + square_26\n    square_28 = square_27 + square_27\n    square_29 = square_28 + square_28\n    square_30 = square_29 + square_29\n    square_31 = square_30 + square_30\n    square_32 = square_31 + square_31\n    square_33 = square_32 + square_32\n    square_34 = square_33 + square_33\n    square_35 = square_34 + square_34\n    square_36 = square_35 + square_35\n    square_37 = square_36 + square_36\n    square_38 = square_37 + square_37\n    square_39 = square_38 + square_38\n    square_40 = square_39 + square_39\n    square_41 = square_40 + square_40\n    square_42 = square_41 + square_41\n    square_43 = square_42 + square_42\n    square_44 = square_43 + square_43\n    square_45 = square_44 + square_44\n    square_46 = square_45 + square_45\n    square_47 = square_46 + square_46\n    square_48 = square_47 + square_47\n    square_49 = square_48 + square_48\n    square_50 = square_49 + square_49\n    square_51 = square_50 + square_50\n    square_52 = square_51 + square_51\n    square_53 = square_52 + square_52\n    square_54 = square_53 + square_53\n    square_55 = square_54 + square_54\n    square_56 = square_55 + square_55\n    square_57 = square_56 + square_56\n    square_58 = square_57 + square_57\n    square_59 = square_58 + square_58\n    square_60 = square_59 + square_59\n    square_61 = square_60 + square_60\n    square_62 = square_61 + square_61\n    square_63 = square_62 + square_62\n    square_64 = square_63 + square_63\n    square_65 = square_64 + square_64\n    square_66 = square_65 + square_65\n    square_67 = square_66 + square_66\n    square_68 = square_67 + square_67\n    square_69 = square_68 + square_68\n    square_70 = square_69 + square_69\n    square_71 = square_70 + square_70\n    square_72 = square_71 + square_71\n    square_73 = square_72 + square_72\n    square_74 = square_73 + square_73\n    square_75 = square_74 + square_74\n    square_76 = square_75 + square_75\n    square_77 = square_76 + square_76\n    square_78 = square_77 + square_77\n    square_79 = square_78 + square_78\n    square_80 = square_79 + square_79\n    square_81 = square_80 + square_80\n    square_82 = square_81 + square_81\n    square_83 = square_82 + square_82\n    square_84 = square_83 + square_83\n    square_85 = square_84 + square_84\n    square_86 = square_85 + square_85\n    square_87 = square_86 + square_86\n    square_88 = square_87 + square_87\n    square_89 = square_88 + square_88\n    square_90 = square_89 + square_89\n    square_91 = square_90 + square_90\n    square_92 = square_91 + square_91\n    square_93 = square_92 + square_92\n    square_94 = square_93 + square_93\n    square_95 = square_94 + square_94\n    square_96 = square_95 + square_95\n    square_97 = square_96 + square_96\n    square_98 = square_97 + square_97\n    square_99 = square_98 + square_98\n    square_100 = square_99 + square_99\n    square_101 = square_100 + square_100\n    square_102 = square_101 + square_101\n    square_103 = square_102 + square_102\n    square_104 = square_103 + square_103\n    square_105 = square_104 + square_104\n    square_106 = square_105 + square_105\n    square_107 = square_106 + square_106\n    square_108 = square_107 + square_107\n    square_109 = square_108 + square_108\n    square_110 = square_109 + square_109\n    square_111 = square_110 + square_110\n    square_112 = square_111 + square_111\n    square_113 = square_112 + square_112\n    square_114 = square_113 + square_113\n    square_115 = square_114 + square_114\n    square_116 = square_115 + square_115\n    square_117 = square_116 + square_116\n    square_118 = square_117 + square_117\n    square_119 = square_118 + square_118\n    square_120 = square_119 + square_119\n    square_121 = square_120 + square_120\n    square_122 = square_121 + square_121\n    square_123 = square_122 + square_122\n    square_124 = square_123 + square_123\n    square_125 = square_124 + square_124\n    square_126 = square_125 + square_125\n    square_127 = square_126 + square_126\n    square_128 = square_127 + square_127\n    square_129 = square_128 + square_128\n    square_130 = square_129 + square_129\n    square_131 = square_130 + square_130\n    square_132 = square_131 + square_131\n    square_133 = square_132 + square_132\n    square_134 = square_133 + square_133\n    square_135 = square_134 + square_134\n    square_136 = square_135 + square_135\n    square_137 = square_136 + square_136\n    square_138 = square_137 + square_137\n    square_139 = square_138 + square_138\n    square_140 = square_139 + square_139\n    square_141 = square_140 + square_140\n    square_142 = square_141 + square_141\n    square_143 = square_142 + square_142\n    square_144 = square_143 + square_143\n    square_145 = square_144 + square_144\n    square_146 = square_145 + square_145\n    square_147 = square_146 + square_146\n    square_148 = square_147 + square_147\n    square_149 = square_148 + square_148\n    square_150 = square_149 + square_149\n    square_151 = square_150 + square_150\n    square_152 = square_151 + square_151\n    square_153 = square"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    maximum_sum = 0\n    for i in range(len(arr)):\n        first_increasing_bitonic_sequence = find_first_increasing_sequence(arr, i)\n        first_decreasing_bitonic_sequence = find_first_decreasing_sequence(arr, i)\n        maximum_sum = max(maximum_sum, first_decreasing_bitonic_sequence+first_increasing_bitonic_sequence)\n    return maximum_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    l = len(arr)\n    if l == 1: \n        return arr[0]\n    elif l == 2: \n        return max(arr[0], arr[1])\n    elif arr[0] < arr[1]: \n        return arr[0] + max_sum(arr[1:])\n    else: \n        return max_sum(arr[1:]) + arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # if the array is empty\n    if len(arr) == 0: \n        return 0\n    \n    # if array is 1D\n    if len(arr) == 1: \n        return arr[0]\n    \n    # if array has multiple elements, output is the last element as the maximum sum of the rest of the array\n    # for the rest of the array, if the array has elements greater than the last element, then sum is maximum of all those elements\n    max_sum = 0\n    cur_sum = 0\n    for i in range(1, len(arr)):\n        \n        # if the current element is greater than the previous, then sum is maximum of all the elements\n        if arr[i] > cur_sum:\n            cur_sum = arr[i]\n        # if the current element is smaller than the previous, then sum is maximum of all the elements\n        elif arr[i] < cur_sum:\n            cur_sum = max_sum\n            max_sum = arr[i]\n        \n        # if the current element is equal to the previous element, sum is equal to the current element\n        elif arr[i] == cur_sum:\n            cur_sum += arr[i]\n    return cur_sum\n    "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    ans = 0\n    sub_list = []\n    for i in range(len(arr)): \n        if arr[i] == 0: \n            sub_list.append(0)\n        else: \n            if arr[i] > 0: \n                for j in range(i+1, len(arr)): \n                    if arr[j] > 0 and arr[i] < arr[j]: \n                        sub_list.append(arr[i])\n                        break\n                    elif arr[j] > 0 and arr[i] == arr[j]: \n                        sub_list.append(0)\n                        break\n            else: \n                for j in range(i+1, len(arr)): \n                    if arr[j] < 0 and arr[i] > 0: \n                        sub_list.append(arr[i])\n                        break\n                    elif arr[j] < 0 and arr[i] == arr[j]: \n                        sub_list.append(0)\n                        break\n            ans = max(ans, sum(sub_list))\n            sub_list = []\n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum_array = 0\n    max_sum_array_index = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i-1] < arr[i] > arr[i+1]:\n            continue\n        if arr[i-1] + arr[i] > arr[i+1]:\n            arr[i] = arr[i-1] + arr[i+1]\n        else:\n            arr[i] = arr[i-1]\n        if arr[i] > max_sum_array:\n            max_sum_array = arr[i]\n            max_sum_array_index = i\n    return arr[max_sum_array_index+1:len(arr)-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    def bt(arr, ind, target):\n        #base case\n        if ind == len(arr):\n            if target == 0:\n                return 0\n            else:\n                return -1\n        \n        if arr[ind] >= 0:\n            #if we have a bitonic subsequence, return the same result\n            if ind >= 1 and target > arr[ind] and target > arr[ind - 1]:\n                return arr[ind]\n            \n            #we need to do some bitonic sub series\n            #add each subsequent element in the subsequence to the result\n            res = bt(arr, ind+1, target)\n            \n            #add the first element of the subsequence to the result\n            res += arr[ind]\n            \n            #if the subsequence is larger than the target, return the result\n            if res > target:\n                return res\n            \n            #otherwise, return -1\n            return -1\n        else:\n            return bt(arr, ind+1, target-arr[ind])\n    \n    res = bt(arr, 0, abs(arr[0]))\n    \n    return res"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    else: \n        # traverse array to find the max of all 1's and all -1's\n        max_1 = max(arr[0], arr[1])\n        max_neg_1 = max(arr[0], -arr[1])\n        for i in range(2, len(arr)): \n            max_1 = max(max_1, max(-arr[i], arr[i]))\n            max_neg_1 = max(max_neg_1, max(arr[i], -arr[i]))\n        return max_1 + max_neg_1\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    sums = [0] + [arr[i] + sums[i + 1] for i in range(len(arr) - 1)] # add sum of all elements to array\n    subs = [[0 for _ in range(len(arr) + 1)] for _ in range(len(arr) + 1)] # array to store subseqence in which sums are added together\n    \n    for i in range(1, len(sums)): # for each element of the array\n        subs[i][0] = sums[i] # set element 0 to the sum\n        \n        # get sums of elements from the array till the end\n        for j in range(i - 1, -1, -1):\n            if j == 0:\n                continue\n            else:\n                subs[i][j + 1] = subs[j][j] + sums[j]\n                \n                # the elements before the i-th element are stored in the array\n                subs[i][j + 1] = max(subs[i][j + 1], sums[j])\n                \n    # if the maximum sum is not zero, return that sum\n    if sums[-1]!= 0:\n        return sums[-1]\n    else:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: return 0\n    if len(arr) == 1: return arr[0]\n    max_sum = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            max_sum += arr[i] - arr[i+1]\n    return max_sum\n    "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sub = []\n    \n    arr.sort()\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 1\n    while squareroot <= 10**-9:\n        if number == 0:\n            return 0\n        elif number < 0:\n            return -number\n        else:\n            number = number*number\n            squareroot = (squareroot + number/squareroot)/2\n    return -squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    from math import sqrt\n    if number < 0:\n        return -number\n    else:\n        result = 0\n        n = number\n        while n:\n            result = n % 10\n            n = n // 10\n        return result"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    if len(divisors) == 0:\n        print('No one is divisible by %d' % number)\n    else:\n        for i in range(len(divisors)):\n            if divisors[i] % 2 == 0:\n                divisors[i] = divisors[i] / 2\n            else:\n                divisors[i] = (divisors[i] + 1) / 2\n        print('The square roots of %d are %s' % (number, divisors))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def sqrt(x):\n        '''\n        Compute the square root of a number x.\n        '''\n        if x == 0:\n            return 0\n        else:\n            return x**(1/2)\n    \n    result = []\n    square_root = 0\n    \n    # Compute square root\n    while number!= 1:\n        if number > 1:\n            # Run a bounded recursive loop to compute square roots\n            for i in range(2, int(number**0.5) + 1):\n                if number % i == 0:\n                    # If the number is composite, then there is a single\n                    # square root\n                    result.append(i)\n                    square_root += 1\n                    number = int(number/i)\n                    break\n        else:\n            # If the number is a single root, then there is no square root\n            result.append(number)\n            square_root += 1\n            number = 1\n    \n    # Return the result\n    return result\n    "
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('The value must be positive.')\n    else:\n        s = 0\n        while number > 0:\n            factor = number / 2\n            number = number - factor\n            s += factor\n        return s\n    \n    # E.g. 'babylonian_squareroot(2)' = 0.5\n    # E.g. 'babylonian_squareroot(4) = 4.0' = 2.75\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def b_square(x):\n        return x**0.5\n    \n    def square(x):\n        return x**2\n    \n    def squareroot(x):\n        return x**0.5\n    \n    def main():\n        print(\"Babylonian squareroot:\", b_square(number))\n        print(\"Squareroot:\", square(number))\n        print(\"Squareroot with b_square():\", squareroot(number))\n    \n    main()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 1\n    if number < 0:\n        return 0\n    if number < 0:\n        number = abs(number)\n        remainder = babylonian_squareroot(number % 2)\n        if remainder == 0:\n            return 0\n        else:\n            return 1 + remainder\n    else:\n        sqrt = 0\n        while number!= 1:\n            if number == 1:\n                return 1\n            if number == 2:\n                return 1\n            if number % 2 == 0:\n                sqrt += 1\n                number /= 2\n            else:\n                sqrt += 1\n                number += 1\n        return 1 + sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if (is_integer(number)):\n        if number >= 0:\n            if abs(number) < 0.5:\n                return babylonian_squareroot(number**0.5)\n            else:\n                return babylonian_squareroot(-number**0.5)\n        else:\n            return number\n    else:\n        return babylonian_squareroot(int(number))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 1\n    while (number!= 0):\n        root = number * root\n        number = number // 2\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0\n    while True:\n        square_root = (number*number) // 2\n        if square_root == 0:\n            break\n    return square_root\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max = 0\n    length = 1\n    for i in range(len(str)): \n        for j in range(len(str) - i - 1): \n            if str[j:j+i+1] == str[j:j+i+1][::-1]:\n                max = len(str[j:j+i+1])\n    return max\ndef palindrome(s):\n    '''\n    Find if s is a palindrome.\n    '''\n    # Write your code here.\n    if len(s)<=2:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return palindrome(s[1:-1])\n        else:\n            return False\n    \ndef lastIndex(string, substring):\n    '''\n    Given a string and a substring, find the position of the last occurrence of this substring.\n    '''\n    # Write your code here.\n    if substring in string:\n        index = string.rfind(substring)\n        return index\n    else:\n        return -1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == '':\n        return 0\n    if str == 'a':\n        return 1\n    if str[0] == str[-1]:\n        return 1 + lps(str[1:-1])\n    \n    else:\n        return max(lps(str[1:]),lps(str[:-1]))\n    \ndef getPalindromicSubsequence(str):\n    '''\n    Return the longest palindromic subsequence in the given string,\n    starting from the beginning.\n    '''\n    lps = lps(str)\n    startIndex = 0\n    ans = ''\n    for i in range(lps):\n        if i < lps - 1:\n            if str[i] == str[i+1]:\n                if i == 0:\n                    startIndex = i + 1\n                else:\n                    startIndex = i\n                ans = str[startIndex:i+1]\n                break\n    return ans\n    \nprint(getPalindromicSubsequence(\"abcbabcdabab\"))\nprint(getPalindromicSubsequence(\"aaabccbab\"))\nprint(getPalindromicSubsequence(\"abcbaabab\"))"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_len = 0\n    current = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            current += 1\n        else:\n            if current > max_len:\n                max_len = current\n            current = 0\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    s=str.lower()\n    lps=[[0 for _ in range(len(s))] for _ in range(len(s))]\n    for i in range(len(s)):\n        lps[i][i]=1\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]:\n            lps[i][i+1]=1\n        else:\n            lps[i][i+1]=0\n    for i in range(len(s)-1):\n        for j in range(i+2,len(s)):\n            if s[i]==s[j] and lps[i][j-1]==1 and lps[j-1][i]==1:\n                lps[i][j]=1+lps[j-1][i]\n    return max(lps[len(s)-1])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    strs = []\n    lps = {}\n    def extendStr(str):\n        for i in range(len(str)):\n            for j in range(i, len(str)):\n                if str[i:j+1] == str[i:j+1][::-1]:\n                    strs.append(str[i:j+1])\n                    if str in lps:\n                        if j-i+1>lps[str]:\n                            lps[str] = j-i+1\n    def lpsRec(str):\n        if len(str) == 0:\n            return 0\n        if len(str) == 1:\n            return 1\n        if len(str) == 2:\n            if str[0] == str[1]:\n                return 2\n            return 1\n        if str[0] == str[1]:\n            return 2 + lpsRec(str[1:])\n        return 1 + lpsRec(str[2:])\n    if str in lps:\n        return lps[str]\n    else:\n        extendStr(str)\n        return lpsRec(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length=0\n    if(str==str[::-1]):\n        return length\n    \n    for i in range(0,len(str)-1):\n        temp=str[i]\n        j=i+1\n        while(j<len(str) and str[j]==str[i]):\n            j+=1\n        if(j-i<3):\n            continue\n        if(temp==temp[::-1]):\n            length=max(length,j-i)\n    return length\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1:\n        return 1\n    elif str[0] == str[-1]:\n        return 1 + lps(str[1:-1])\n    elif str[0]!= str[-1]:\n        return max(lps(str[0]), lps(str[1:]))\n    else:\n        return 1 + lps(str[1:-1])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str==None or str==\"\":\n        return 0\n    if len(str)==1:\n        return 1\n    if str==str[::-1]:\n        return len(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if len(str) < 2: \n        return 0\n    \n    n = len(str) \n    dp = [[0 for i in range(n)] for i in range(n)] \n    max_len = 1\n    \n    for i in range(n): \n        for j in range(i, n): \n            if str[i] == str[j]: \n                dp[i][j] = 1 + dp[i + 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) \n            \n            if dp[i][j] > max_len: \n                max_len = dp[i][j] \n    \n    return max_len \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif len(str)==1:\n        return 1\n    else:\n        temp = []\n        dp = [1]*len(str)\n        for i in range(1,len(str)):\n            for j in range(i):\n                if str[j]!= str[i] and str[j]!= str[i-j]:\n                    dp[i] = max(dp[i],1+dp[j]+len(str[j:i]))\n        return max(dp)"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n+harmonic_sum(n-1)\ndef harmonic_sum_2(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 1+harmonic_sum_2(n-1)\ndef sum_digits(n):\n    '''\n    Write a function that takes in an integer n and calculates the sum of all the digits of n.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+sum_digits(n//10)\ndef prime(n):\n    '''\n    Write a function that takes in a number and determines whether it is a prime number.\n    '''\n    if n==2 or n==3:\n        return True\n    elif n==4 or n==5 or n==7 or n==9 or n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total_sum = 0\n    n_1 = n\n    for i in range(1,n+1):\n        total_sum += (i/n_1)\n    return total_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    return n * harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s=s+1/i\n    return s\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #Your code goes here\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + 1/(i-1)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # If the size of array1 is greater than size of array2\n    if len(array_nums1) > len(array_nums2):\n        array_nums2 = array_nums2 * 2\n    # If the size of array1 is equal to size of array2\n    elif len(array_nums1) < len(array_nums2):\n        array_nums2 = array_nums2 * 2\n    # If the size of array2 is greater than size of array1\n    elif len(array_nums2) > len(array_nums1):\n        array_nums1 = array_nums1 * 2\n    # If the size of array1 and array2 are equal\n    elif len(array_nums1) == len(array_nums2):\n        # If the elements are in any order\n        if array_nums1 == array_nums2:\n            return array_nums1\n        # If the elements are in sorted order\n        else:\n            array_nums2.sort()\n            # If the array is already sorted,\n            # so we can simply swap it\n            # and next one\n            if array_nums1.sort() == array_nums2:\n                return array_nums1\n            # If the elements are not in sorted order\n            # then we can swap them\n            else:\n                # Then we will move the first element of array 1\n                # to the last of array 2\n                array_nums2[0], array_nums1[-1] = array_nums1[-1], array_nums2[0]\n                # Then we will move the last element of array 2\n                # to the first element of array 1\n                array_nums1[0], array_nums2[-1] = array_nums2[-1], array_nums1[0]\n                return array_nums1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_1_size = len(array_nums1)\n    array_2_size = len(array_nums2)\n    i = 0\n    j = 0\n    intersection_array = []\n    while i < array_1_size and j < array_2_size:\n        if array_nums1[i] == array_nums2[j]:\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result=[]\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dictionary = {}\n    for num in array_nums1:\n        dictionary[num] = dictionary.get(num,0) + 1\n    for num in array_nums2:\n        dictionary[num] = dictionary.get(num,0) - 1\n    return dictionary\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    result = []\n    \n    #create empty list to store intersection\n    intersection = []\n    \n    #loop through two lists\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    \n    #loop through both lists\n    for j in array_nums2:\n        if j in array_nums1:\n            result.append(j)\n    \n    #if intersection is empty, then return none\n    if len(result) == 0:\n        return None\n    \n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i=0\n    j=0\n    intersection_num=0\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i]<=array_nums2[j]:\n            if array_nums1[i]==array_nums2[j]:\n                j+=1\n                i+=1\n                intersection_num+=1\n            else:\n                i+=1\n        else:\n            i+=1\n    return intersection_num\n    \n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Get the length of the arrays\n    length = len(array_nums1)\n    # Define the number of bits we are using\n    bits = 8\n    # Define the number of bits we are using\n    # Check to make sure the array is not empty\n    if array_nums1 and array_nums2:\n        # if they are not equal, set the length of the return array to the length\n        if len(array_nums1)!= len(array_nums2):\n            return 0\n        # For each bit in the array number of bits,\n        # if the number of bits is 0,\n        # it will be set to the value 0\n        # If the number of bits is 1,\n        # it will be set to the value 1\n        # If the number of bits is 2,\n        # it will be set to the value 2\n        # If the number of bits is 3,\n        # it will be set to the value 3\n        # If the number of bits is 4,\n        # it will be set to the value 4\n        # And finally, we sum the results\n        for bit in range(bits):\n            # if they are equal, we will increment the value\n            if array_nums1[bit] == array_nums2[bit]:\n                array_nums1[bit] = 0\n            elif array_nums1[bit] == 0:\n                array_nums1[bit] = 1\n            elif array_nums1[bit] == 1:\n                array_nums1[bit] = 2\n            elif array_nums1[bit] == 2:\n                array_nums1[bit] = 3\n            elif array_nums1[bit] == 3:\n                array_nums1[bit] = 4\n            elif array_nums1[bit] == 4:\n                array_nums1[bit] = 5\n            elif array_nums1[bit] == 5:\n                array_nums1[bit] = 6\n            elif array_nums1[bit] == 6:\n                array_nums1[bit] = 7\n            elif array_nums1[bit] == 7:\n                array_nums1[bit] = 8\n        # The code below is to handle the 'or'\n        # it's going to be the same as the second one,\n        # since we have a max of 8 bits.\n        # In this case, we will set the elements of the array\n        # to 0\n        for bit in range(bits):\n            # if it's a 0, set it to 1\n            if array_nums1[bit] == 0:\n                array_nums1[bit] = 1\n            elif array_nums1[bit] == 1:\n                array_nums1[bit] = 2\n            elif array_nums1[bit] == 2:\n                array_nums1[bit] = 3\n            elif array_nums1[bit] == 3:\n                array_nums1[bit] = 4\n            elif array_nums1[bit] == 4:\n                array_nums1[bit] = 5\n            elif array_nums1[bit] == 5:\n                array_nums1[bit] = 6\n            elif array_nums1[bit] == 6:\n                array_nums1[bit] = 7\n            elif array_nums1[bit] == 7:\n                array_nums1[bit] = 8\n    # If the length of array_nums1 is 0\n    # or the length of array_nums2 is 0, we set\n    # it to 0\n    elif length == 0:\n        array_nums1[0] = 0\n        array_nums2[0] = 0\n    # If the length of array_nums1 is 1\n    # or the length of array_nums2 is 1, we set\n    # it to 0\n    elif length == 1:\n        array_nums1[0] = 0\n        array_nums2[0] = 0\n    # If the length of array_nums1 is 2\n    # or the length of array_nums2 is 2, we set\n    # it to 0\n    elif length == 2:\n        array_nums1[0] = 0\n        array_nums2[0] = 0\n    # If the length of array_nums1 is 3\n    # or the length of array_nums2 is 3, we set\n    # it to 0\n    elif length == 3:\n        array_nums1[0] = 0\n        array_nums2[0] = 0\n    # If the length of array_nums1 is 4\n    # or the length of array_nums2 is 4, we set\n    # it to 0\n    elif length == 4:\n        array_nums1[0] = 0\n        array_nums2[0] = 0\n    # If it's an invalid code, we return zero\n    else:\n        return 0\n    # If it's an invalid code, we return zero\n    return array_nums1[0] * array_nums2[0]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # return a list of the indexes of the intersection\n    list_of_intersections = []\n    for index_1, num_1 in enumerate(array_nums1):\n        for index_2, num_2 in enumerate(array_nums2):\n            if num_1 == num_2:\n                list_of_intersections.append(index_1)\n    return list_of_intersections\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                intersection_list.append(array_nums1[i])\n    return intersection_list\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    num = 0\n    for e in tup:\n        if e == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_I(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_O(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \n    \ndef count_I"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = set(x)\n    return len(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # write your code here\n    x = tuple(x)\n    x = tuple([i for i in x])\n    tup = x\n    tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if x == i:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum([1 for i in tup if i == x])\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # TODO: complete this function\n    d = dict(zip(tup, x))\n    return d\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #insert_element_quick_search_recursive(list,element,0)\n    insert_element_recursive_list(list,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        raise ValueError('List is empty')\n    else:\n        current_index=0\n        for i in list:\n            if i==element:\n                list.insert(current_index,element)\n                current_index+=1\n            else:\n                current_index+=1\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list.insert(0,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    copy_list = list[:]\n    if copy_list == []:\n        return [element]\n    for i in range(0,len(copy_list)):\n        if copy_list[i] == element:\n            copy_list[i] = element\n            break\n    return(copy_list)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list.insert(0,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list.insert(list.index(element),element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for element_1 in list:\n        new_list.append(element_1)\n        for element_2 in new_list:\n            element_2.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for element in list:\n        new_list = list[:]\n        new_list.insert(0,element)\n        list = new_list\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list[:]\n    new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    index = 0\n    for item in list:\n        new_list.insert(index,item)\n        index += 1\n    return new_list\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return '%.2f' %(cmath.polar(numbers)), '%s' %(numbers)\ndef main():\n    '''\n    This function calls convert function to convert complex numbers to polar coordinates.\n    '''\n    print(\"Convert function called\")\n    x, y = convert(2+3j)\n    print(\"x = %s\" %x)\n    print(\"y = %s\" %y)\nmain()"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n = len(numbers)\n    # I needed to round down the whole number\n    # I could have done this using round function\n    # but I could do a bit more complex, not sure of a better way\n    if n==0:\n        return(0)\n    elif n==1:\n        return(complex(numbers[0], 0))\n    elif n==2:\n        return(complex(0, numbers[1]))\n    elif n==3:\n        return(complex(numbers[0], numbers[1]))\n    elif n==4:\n        return(complex(numbers[0], numbers[1], numbers[2]))\n    elif n==5:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3]))\n    elif n==6:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4]))\n    elif n==7:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]))\n    elif n==8:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6]))\n    elif n==9:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7]))\n    elif n==10:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8]))\n    elif n==11:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9]))\n    elif n==12:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10]))\n    elif n==13:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11]))\n    elif n==14:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12]))\n    elif n==15:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13]))\n    elif n==16:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14]))\n    elif n==17:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15]))\n    elif n==18:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16]))\n    elif n==19:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17]))\n    elif n==20:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18]))\n    elif n==21:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19]))\n    elif n==22:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19], numbers[20]))\n    elif n==23:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19], numbers[20], numbers[21]))\n    elif n==24:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19], numbers[20], numbers[21], numbers[22]))\n    elif n==25:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19], numbers[20], numbers[21], numbers[22], numbers[23]))\n    elif n==26:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19], numbers[20], numbers[21], numbers[22], numbers[23], numbers[24]))\n    elif n==27:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19], numbers[20], numbers[21], numbers[22], numbers[23], numbers[24], numbers[25]))\n    elif n==28:\n        return(complex(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15], numbers[16], numbers[17], numbers[18], numbers[19], numbers[20], numbers[21], numbers[22], numbers[2"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    s = \"\"\n    for i in range(0, len(numbers), 2):\n        s += str(numbers[i]) + \"j\" + str(i + 1) + \"j\"\n        s += \" \"\n    return s\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real, imag, angle = 0, 0, 0\n    for i in range(len(numbers)):\n        if i % 2:\n            real = numbers[i]\n        else:\n            imag = numbers[i]\n    if (real == 0 and imag!= 0):\n        angle = cmath.phase(complex(real, imag))\n    elif (real!= 0 and imag == 0):\n        angle = cmath.phase(complex(real, imag))\n    elif (real == 0 and imag!= 0):\n        angle = cmath.phase(complex(imag, real))\n    elif (real == 0 and imag == 0):\n        angle = cmath.phase(complex(imag, imag))\n    return angle\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in numbers:\n        if i == 0:\n            return 0,0\n        x = cmath.polar(i)\n        print(x)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers, list):\n        for number in numbers:\n            if isinstance(number, complex):\n                print(\"Conversion: \", number.real, \" -> \", number.imag, \":\", number.conjugate())\n            else:\n                print(\"Conversion: \", number, \":\", number.conjugate())\n    else:\n        print(\"Conversion: \", numbers, \":\", numbers.conjugate())\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Check if the numbers are complex\n    if type(numbers) is complex:\n        # Taking the modulus of the numbers\n        x = numbers.imag\n        # Taking the reciprocal of the result\n        r = cmath.rect(x, 0)\n        return r\n    else:\n        # Taking the modulus of the numbers\n        x = numbers.real\n        # Taking the reciprocal of the result\n        r = cmath.rect(x, 0)\n        return r\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = complex(0,0)\n    for number in numbers:\n        result = result + (cmath.polar(number))\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) == 2:\n        return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def to_radian(c):\n        '''\n        Convert given complex number c to radian.\n        '''\n        return (c.real ** 2 + c.imag ** 2) ** 0.5\n    def to_degrees(r):\n        '''\n        Convert given radian to degrees.\n        '''\n        return (180 * cmath.acos(r)) / cmath.pi\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            total = total + 1\n    return total\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1.sort()\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number_of_integers = 0\n    for element in list1:\n        if type(element) == int:\n            number_of_integers += 1\n    return number_of_integers\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #list1 = [1,2,3,4,5,6]\n    #print(list1)\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count = count + 1\n    return count\n    #return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    length = len(list1)\n    return length\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # return list of all combinations\n    if n == 0:\n        return [[]]\n    # create list of combinations\n    l = combinations_with_replacement(l, n)\n    # for each combination, create a tuple with color and the elements in the combination\n    return [tuple(color) + list(elem) for color, elem in zip(['red', 'green', 'blue'], l)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            comb = list(combinations(l, i+j))\n            for el in comb:\n                result.append((list(el)))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_list = []\n    for i in range(0, len(l) - n + 1):\n        combinations = []\n        for j in combinations_with_replacement(l, i):\n            combinations.append(j)\n        combinations_list.append(tuple(combinations))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l,n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l_list = []\n    for i in range(1, n+1):\n        l_list.append(tuple(l))\n    return l_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = [tuple(i) for i in combinations_with_replacement(l, n)]\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    if len(l) > n:\n        return []\n    comb_list = []\n    for i in range(n):\n        comb_list += list(combinations(l, i+1))\n    return comb_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return l\n    else:\n        result = []\n        for i in combinations_with_replacement(l, n):\n            result.append(tuple(i))\n        return result\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n == 1:\n        count = 0\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        count = 0\n        i = 1\n        while (i <= n):\n            if (i == 1):\n                count += 1\n                continue\n            elif (i == 2):\n                count += 1\n                continue\n            elif (i == 3):\n                count += 1\n                continue\n            elif (i == 4):\n                count += 1\n                continue\n            elif (i > 4):\n                break\n            else:\n                i += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    s = set()\n    i = 1\n    while i <= n:\n        i = i + 1\n        if is_prime(i):\n            s.add(i)\n    return len(s)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        if(prime(i)):\n            count+=1\n    return count\n    \ndef prime(n):\n    '''\n    Write a python function that returns True if a number is prime or False if it is not prime.\n    '''\n    if(n<2):\n        return False\n    elif(n==2 or n==3):\n        return True\n    elif(n%2==0):\n        return False\n    elif(n==3 or n==5):\n        return True\n    for i in range(2,int(n**0.5)+1):\n        if(n%i==0):\n            return False\n    return True\n    \ndef print_primes_nums():\n    '''\n    Write a python function that prints all primes numbers less than n.\n    '''\n    i=2\n    while(i<=10):\n        if(prime(i)):\n            print(i)\n            i+=1\n        else:\n            continue\n        \n        \nprint_primes_nums()"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    counter = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Solution #1\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(n, n+3):\n        for j in range(2, i):\n            if (i%j == 0):\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = [2, 3, 5, 7]\n    counter = 0\n    for num in prime_nums:\n        if (num < n):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_numbers = []\n    # define a for-loop\n    for i in range(2, n + 1):\n        # define a condition to check if a number is prime or not\n        if is_prime(i):\n            prime_numbers.append(i)\n    # return the total number of prime numbers\n    return len(prime_numbers)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n <= 0:\n        return count\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            count += 1\n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in a non-negative number and returns true if n is a prime number and false if not.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    a = second\n    b = first\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef sort_char(list):\n    '''\n    Sort a given list of characters and return it.\n    '''\n    return list\n    \ndef zip_strings(list):\n    '''\n    Sort a given list of strings and return it.\n    '''\n    return list\n    \ndef find_max(list):\n    '''\n    Find the maximum value in a given list.\n    '''\n    return list[0]\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if len(a)!=len(b):\n        print('The list has to be same size.')\n        return\n    tuple_a = tuple(a)\n    tuple_b = tuple(b)\n    a = tuple_a[0]\n    b = tuple_b[0]\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        # we have two numbers to swap\n        num_1 = a\n        num_2 = b\n    else:\n        # we have a number to swap\n        num_1 = b\n        num_2 = a\n    \n    # now we have the two numbers to swap\n    num_1, num_2 = num_2, num_1\n    \n    # now we have the swapped numbers\n    return num_1, num_2\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if (a == b):\n        return (a,b)\n    else:\n        return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print(a)\n    print(b)\n    tuple_of_numbers = (a,b)\n    print(tuple_of_numbers)\n    return tuple_of_numbers\n    \n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        a, b = b, a\n    a, b = a + 1, b + 1\n    return a, b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # YOUR CODE HERE\n    print('Function maximize_elements')\n    \n    if len(test_tup1) > len(test_tup2):\n        test_tup2 = tuple(sorted(test_tup2, key=len, reverse=True))\n    elif len(test_tup2) > len(test_tup1):\n        test_tup1 = tuple(sorted(test_tup1, key=len, reverse=True))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    for tup1 in test_tup1:\n        if tup1[0]>tup1[1]:\n            return tup1\n    return tup1\n    \n    \ndef minimize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to minimize the given two tuples.\n    '''\n    for tup1 in test_tup1:\n        if tup1[0]<tup1[1]:\n            return tup1\n    return tup1\n    \ndef display_elements(test_tup1, test_tup2):\n    '''\n    Display the given two tuples.\n    '''\n    for tup1 in test_tup1:\n        print(tup1)\n    for tup2 in test_tup2:\n        print(tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #find the first element\n    max_element_1 = max(test_tup1)\n    #find the second element\n    max_element_2 = max(test_tup2)\n    #calculate the sum of the elements\n    element_sum = sum(test_tup1) + sum(test_tup2)\n    #select the element with the largest sum\n    element_with_largest_sum = max(test_tup1)\n    #return the element with largest sum\n    return element_with_largest_sum\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    print(test_tup1[0] > test_tup2[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    # Write your code here\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1[:], test_tup2[:])\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2[:], max(test_tup1[:])\n    else:\n        return test_tup2[:], test_tup1[:], max(test_tup1[:], test_tup2[:])"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = test_tup1\n    for element in test_tup2:\n        if element > result[1]:\n            result = element, result[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = test_tup1[0]\n    min_val = test_tup1[0]\n    for item in test_tup1:\n        if item > max_val:\n            max_val = item\n        elif item < min_val:\n            min_val = item\n    print(f\"Max = {max_val}, Min = {min_val}\")\n    return max_val, min_val\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    if len(test_tup1)>len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1\n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        if test_tup1[0] > test_tup2[0]:\n            return 1, test_tup1\n        else:\n            return 0, test_tup2\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return 1, test_tup2\n        else:\n            return 0, test_tup1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_numbers = [2, 3, 5]\n    def is_prime(n):\n        '''\n        Returns True if n is prime, and False if not prime\n        '''\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, n, 2):\n            if n % i == 0:\n                return False\n        return True\n    def nth_prime(n):\n        '''\n        Returns the nth prime number\n        '''\n        if n < 2:\n            return 0\n        if n == 2:\n            return 2\n        for i in range(2, n):\n            if is_prime(i):\n                return i\n        return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    m = n\n    for i in range(2, m):\n        if i == 1 or m % i == 0:\n            prime.append(i)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    d=0\n    for i in range(1,n):\n        d=d+2*i+1\n    return d**2\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # if n <= 0:\n    #     return\n    # else:\n    #     m = n - 1\n    #     # 1. Use a loop to find the primes\n    #     # 2. use a loop to find the prime numbers up to m\n    #     # 3. to find the next prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    p = 0\n    while p < n:\n        for i in range(2, n):\n            if n % i == 0:\n                break\n        else:\n            count += 1\n            p = n\n        n = n + 1\n    if count >= 3:\n        return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==0: \n        return False\n    elif n==1: \n        return True\n    else: \n        if n%2==0: \n            return newman_prime(n//2)\n        else: \n            return newman_prime(3*n+1)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n):\n        '''\n        Checks if a number is prime.\n        '''\n        if n == 1:\n            return True\n        elif n == 2:\n            return n!= 1 and n!= 3\n        elif n == 4:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)) + 1, 2):\n                if n % i == 0:\n                    return False\n        return True\n        \n    def prime_sequence(n):\n        '''\n        Returns a list of prime numbers less than or equal to n.\n        '''\n        for i in range(3, n + 1, 2):\n            if isprime(i):\n                yield i\n                \n    def find_prime(n, d = [2, 3]):\n        '''\n        Returns the first n prime numbers found.\n        '''\n        if n < 2:\n            return []\n        elif n == 2:\n            return [3]\n        else:\n            found = []\n            for i in range(3, n + 1, 2):\n                if isprime(i):\n                    if i in found:\n                        continue\n                    found.append(i)\n                    if i == 4 or i == 5:\n                        continue\n                    for j in range(3, i, 2):\n                        if isprime(j):\n                            found.append(j)\n            return found\n            \n    if n < 2:\n        return []\n    else:\n        for prime in prime_sequence(n):\n            for j in find_prime(n, d):\n                if prime == j:\n                    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    for i in range(2, n+1):\n        if (i == n):\n            prime.append(i)\n        elif (i == 1):\n            prime.append(i)\n        elif (i % 2 == 0):\n            prime.append(i)\n        elif (i % 2!= 0):\n            temp = (i * i) % (10**9 + 7)\n            prime.append(temp)\n    return prime[len(prime) - 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    nth_newman_prime = 0\n    prime = 2\n    while prime <= sqrt(n):\n        if n % prime == 0:\n            nth_newman_prime = n//prime\n            break\n        prime += 1\n    return nth_newman_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = True\n    if n == 2:\n        prime = True\n    elif n == 3:\n        prime = False\n    else:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime = False\n                break\n    if prime == True:\n        return n\n    else:\n        return newman_prime(n - 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    x = test_tup1[1]\n    y = test_tup2[1]\n    z = test_tup1[0]\n    w = test_tup2[0]\n    #print(x, y, z, w)\n    res = (x/y)*z*w\n    #print(res)\n    return res\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #Define div_func and loop\n    div_func = lambda x,y: x//y\n    for x in test_tup1:\n        for y in test_tup2:\n            result = div_func(x,y)\n            if result!= 0:\n                print(x,\"/\",y,\"=\",result)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n    \n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #variables\n    div_result = 0\n    mult_result = 1\n    #declaring the function\n    def division_tuple(tup):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        for i in range(len(tup)):\n            div_result = tup[i] // tup[i+1]\n            tup[i] = tup[i+1]\n            tup[i+1] = div_result\n        return tup\n    #calculating the result\n    div_result = division_tuple(test_tup1)\n    for i in range(len(test_tup2)):\n        div_result = division_tuple(test_tup2)\n    #dividing the result by the result\n    for i in range(len(div_result)):\n        mult_result = div_result[i] * mult_result\n    #returning the result\n    return mult_result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup3 = []\n    test_tup3.append(test_tup1[0])\n    test_tup3.append(test_tup1[1])\n    test_tup4 = []\n    test_tup4.append(test_tup2[0])\n    test_tup4.append(test_tup2[1])\n    #test_tup4 = test_tup2\n    # test_tup4 = test_tup2[1]\n    test_tup5 = []\n    test_tup5.append(test_tup3[0])\n    test_tup5.append(test_tup4[0])\n    test_tup6 = []\n    test_tup6.append(test_tup3[0])\n    test_tup6.append(test_tup4[1])\n    #test_tup6 = test_tup4\n    test_tup7 = []\n    test_tup7.append(test_tup3[1])\n    test_tup7.append(test_tup4[0])\n    test_tup8 = []\n    test_tup8.append(test_tup5[0])\n    test_tup8.append(test_tup6[0])\n    test_tup9 = []\n    test_tup9.append(test_tup7[0])\n    test_tup9.append(test_tup8[0])\n    test_tup10 = []\n    test_tup10.append(test_tup7[1])\n    test_tup10.append(test_tup8[1])\n    test_tup11 = []\n    test_tup11.append(test_tup8[1])\n    test_tup12 = []\n    test_tup12.append(test_tup9[0])\n    test_tup12.append(test_tup10[0])\n    test_tup13 = []\n    test_tup13.append(test_tup12[0])\n    test_tup14 = []\n    test_tup14.append(test_tup12[1])\n    test_tup15 = []\n    test_tup15.append(test_tup13[0])\n    test_tup15.append(test_tup14[0])\n    test_tup16 = []\n    test_tup16.append(test_tup13[1])\n    test_tup16.append(test_tup14[1])\n    test_tup17 = []\n    test_tup17.append(test_tup15[0])\n    test_tup17.append(test_tup16[0])\n    test_tup18 = []\n    test_tup18.append(test_tup16[1])\n    test_tup18.append(test_tup17[1])\n    test_tup19 = []\n    test_tup19.append(test_tup17[1])\n    test_tup20 = []\n    test_tup20.append(test_tup18[0])\n    test_tup20.append(test_tup19[0])\n    test_tup21 = []\n    test_tup21.append(test_tup18[1])\n    test_tup21.append(test_tup19[1])\n    test_tup22 = []\n    test_tup22.append(test_tup19[1])\n    test_tup23 = []\n    test_tup23.append(test_tup20[0])\n    test_tup23.append(test_tup21[0])\n    test_tup24 = []\n    test_tup24.append(test_tup21[1])\n    test_tup24.append(test_tup22[1])\n    test_tup25 = []\n    test_tup25.append(test_tup22[1])\n    test_tup26 = []\n    test_tup26.append(test_tup23[0])\n    test_tup26.append(test_tup24[0])\n    test_tup27 = []\n    test_tup27.append(test_tup24[1])\n    test_tup27.append(test_tup25[1])\n    test_tup28 = []\n    test_tup28.append(test_tup25[1])\n    test_tup29 = []\n    test_tup29.append(test_tup26[0])\n    test_tup29.append(test_tup27[0])\n    test_tup30 = []\n    test_tup30.append(test_tup27[1])\n    test_tup30.append(test_tup28[1])\n    test_tup31 = []\n    test_tup31.append(test_tup28[1])\n    test_tup32 = []\n    test_tup32.append(test_tup29[0])\n    test_tup32.append(test_tup30[0])\n    test_tup33 = []\n    test_tup33.append(test_tup29[1])\n    test_tup33.append(test_tup30[1])\n    test_tup34 = []\n    test_tup34.append(test_tup30[1])\n    test_tup35 = []\n    test_tup35.append(test_tup31[0])\n    test_tup35.append(test_tup32[0])\n    test_tup36 = []\n    test_tup36.append(test_tup32[1])\n    test_tup36.append(test_tup33[1])\n    test_tup37 = []\n    test_tup37.append(test_tup33[1])\n    test_tup38 = []\n    test_tup38.append(test_tup34[0])\n    test_tup38.append(test_tup35[0])\n    test_tup39 = []\n    test_tup39.append(test_tup35[1])\n    test_tup39.append(test_tup36[1])\n    test_tup40 = []\n    test_tup40.append(test_tup36[1])\n    test_tup41 = []\n    test_tup41.append(test_tup37[0])\n    test_tup41.append(test_tup38[0])\n    test_tup42 = []\n    test_tup42.append(test_tup37[1])\n    test_tup42.append(test_tup38[1])\n    test_tup43 = []\n    test_tup43.append(test_tup38[1])\n    test_tup44 = []\n    test_tup44.append(test_tup39[0])\n    test_tup44.append(test_tup40[0])\n    test_tup45 = []\n    test_tup45.append(test_tup39[1])\n    test_tup45.append(test_tup40[1])\n    test_tup46 = []\n    test_tup46.append(test_tup40[1])\n    test_tup47 = []\n    test_tup47.append(test_tup41[0])\n    test_tup47.append(test_tup42[0])\n    test_tup48 = []\n    test_tup48.append(test_tup42[1])\n    test_tup48.append(test_tup41[1])\n    test_tup49 = []\n    test_tup49.append(test_tup41[1])\n    test_tup50 = []\n    test_tup50.append(test_tup43[0])\n    test_tup50.append(test_tup44[0])\n    test_tup51 = []\n    test_tup51.append(test_tup44[1])\n    test_tup51.append(test_tup45["
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x/y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= 0:\n            res.append(test_tup1[i] / test_tup2[i])\n        else:\n            res.append(test_tup1[i])\n    return res\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result + test_tup1[i]/test_tup2[i]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [a/b for a, b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return []\n    else:\n        return [list1[0:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # INSTRUCTIONS\n    # Do not modify the function.\n    # The function should return a tuple of two lists.\n    #\n    # For example, split_two_parts([1, 2, 3, 4, 5], 3) should return [1, 2, [3, 4]]\n    #\n    # You may assume that L is always an integer within the range of L = 1, 000.\n    # The function should return None if L is not an integer within the range of L = 1, 000.\n    #\n    # Hint: The split_two_parts() function doesn't use any built-in sorting, so you may want to use either the int() function or the str() function.\n    \n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    for i in range(len(list1)):\n        if len(list1) > L:\n            a.append(list1[:L])\n            list1 = list1[L:]\n        else:\n            a.append(list1)\n            list1 = []\n    return a, list1\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # assert L >= 0, 'Length of list must be positive'\n    \n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > L:\n            list1[i] = list1[i][0:L]\n    return list1\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:len(list1)]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l = len(list1)\n    for i in range(0,l):\n        if list1[i]%L == 0:\n            list2 = list1[i:i+L]\n            return list1, list2\n        else:\n            list1[i] = 0\n    \n    return list1, list1\n    \ndef remove_zeros(list):\n    '''\n    Write a function that takes a list of numbers and returns a new list with all the zeros removed.\n    '''\n    count = 0\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i]!= 0:\n            count += 1\n            new_list.append(list[i])\n    \n    for i in range(0,count):\n        new_list.append(0)\n        \n    return new_list\n    \ndef max_sum(list1):\n    '''\n    Write a function that takes a list of numbers and returns the maximum sum of all of the numbers in the list.\n    '''\n    max = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)-i):\n            if list1[j] + list1[j+1] > max:\n                max = list1[j] + list1[j+1]\n    \n    return max\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        print(\"The given list is longer than the number of elements in the list\")\n    else:\n        if n % L!= 0:\n            print(\"The given list is longer than the number of elements in the list\")\n        else:\n            part1 = list1[:L]\n            part2 = list1[L:]\n            return part1, part2\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age < 1:\n        print(\"ERROR\")\n        return -1\n    if h_age < 13:\n        return 1\n    if h_age < 19:\n        return 2\n    if h_age < 25:\n        return 3\n    if h_age < 30:\n        return 4\n    if h_age < 35:\n        return 5\n    if h_age < 40:\n        return 6\n    if h_age < 45:\n        return 7\n    if h_age < 50:\n        return 8\n    if h_age < 55:\n        return 9\n    if h_age < 60:\n        return 10\n    if h_age < 65:\n        return 11\n    if h_age < 70:\n        return 12\n    if h_age < 75:\n        return 13\n    if h_age < 80:\n        return 14\n    if h_age < 85:\n        return 15\n    if h_age < 90:\n        return 16\n    if h_age < 95:\n        return 17\n    if h_age < 100:\n        return 18\n    return 20\n    \n    \n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs = 0\n    for i in range(h_age):\n        dogs += 1\n    return dogs\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        return \"ERROR: age is < 1.\"\n    elif h_age <= 2:\n        return \"You are a normal age.\"\n    elif h_age <= 6:\n        return \"You are a dog.\"\n    elif h_age <= 12:\n        return \"You are a normal age and you should eat more!\"\n    elif h_age <= 18:\n        return \"You are a dog and you should kill more!\"\n    else:\n        return \"You are an old man.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n    #return a dog's age in dog's years.\n    #Return the function's result.\n    def dog_age(h_age):\n        #Define an equation to calculate dog's age in dog's years.\n        #Return the function's result.\n        import math\n        h_age = float(h_age)\n        #Use math module to get dog's age in dog's years.\n        return math.log(h_age)\n    return dog_age(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(\"{} years old\".format(h_age))\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age <= 1:\n        dog_years = h_age\n        print(f\"{h_age} is in the 1st dog's age.\")\n        return dog_years\n    elif h_age <= 2:\n        dog_years = h_age\n        print(f\"{h_age} is in the 2nd dog's age.\")\n        return dog_years\n    elif h_age <= 3:\n        dog_years = h_age\n        print(f\"{h_age} is in the 3rd dog's age.\")\n        return dog_years\n    elif h_age <= 5:\n        dog_years = h_age\n        print(f\"{h_age} is in the 5th dog's age.\")\n        return dog_years\n    else:\n        dog_years = h_age\n        print(f\"{h_age} is in the 6th dog's age.\")\n        return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #raise NotImplementedError\n    return ((h_age*365)+(h_age*366))+(h_age*365)+(h_age*366)+(h_age*365)+(h_age*366))"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 10:\n        return h_age\n    elif h_age <= 14:\n        return h_age - 10\n    elif h_age <= 19:\n        return h_age - 15\n    elif h_age <= 25:\n        return h_age - 20\n    else:\n        return h_age - 25\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 5:\n        return 'you are'+ str(h_age) +'years old'\n    elif 5 < h_age < 10:\n        return 'you are'+ str(h_age) +'years old'\n    elif 10 < h_age < 20:\n        return 'you are'+ str(h_age) +'years old'\n    else:\n        return 'you are'+ str(h_age) +'years old'"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if n == 1:\n        return [[]]\n    if step == 1:\n        return [[S[i:i+step]] for i in range(0, len(S), step)]\n    elif step == 2:\n        return [[S[i:i+step]] + list_split(S[i+step:], step - 1) for i in range(0, len(S), step)]\n    else:\n        raise ValueError(\"Please choose a reasonable step for splitting the list\")\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Get the length of the list and the step.\n    length = len(S)\n    step = int(step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    s = list(S)\n    if s == [] or len(s) < step:\n        return []\n    else:\n        # [1,2,3,4,5,6,7,8,9]\n        # step = 3\n        return [s[i:i+step] for i in range(0, len(s), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i : i + step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    if step == 1:\n        return S\n    else:\n        return [list_split(S[i], step-1) for i in range(len(S)-step+1)]\n        \ndef get_line_num(file_path):\n    '''\n    Reads a file and returns the line number of the start of it.\n    '''\n    \n    with open(file_path) as file:\n        for line in file:\n            if line.startswith('#'):\n                continue\n            else:\n                return file.tell()\n                break\n            \ndef round_robin(n):\n    '''\n    The rooks are numbered 0, 1, 2,..., n-1. The rooks are numbered 0, 1, 2,..., n-1. \n    In the 2nd rook, the rook number 1 and the 1st one are aligned with each other. The rook number 0 and the 1st one are aligned with each other.\n    '''\n    \n    assert n >= 0\n    assert n <= 15\n    \n    rook_numbers = list(range(n))\n    rook_numbers[0], rook_numbers[n-1] = rook_numbers[n-1], rook_numbers[0]\n    \n    return rook_numbers\n    \ndef evaluate_line(file_path, line_num):\n    '''\n    Reads a file and returns the score for a line.\n    '''\n    \n    with open(file_path) as file:\n        return float(file.readline().strip())\n    \ndef count_candidates(rook_numbers):\n    '''\n    Reads a file and returns the number of possible candidates for a line.\n    '''\n    \n    candidates = set()\n    \n    for i in range(len(rook_numbers)-1):\n        candidates.add(rook_numbers[i] + rook_numbers[i+1])\n        \n    return len(candidates)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        return []\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # a list of lists\n    list_of_lists = []\n    for i in range(len(S)//step+1):\n        list_of_lists.append(S[i*step:(i+1)*step])\n    #return the last list\n    return list_of_lists[::-1]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # answer is [[], [], [], [], [],...]\n    answer = []\n    for i in range(0, len(S), step):\n        answer.append(S[i:i+step])\n    return answer\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[index : index + step] for index in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(len(S)):\n        if i % step == 0:\n            result.append(S[:i])\n            S = S[i:]\n        else:\n            result.append(S[:i])\n            S = S[i:]\n    result.append(S)\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Solution:\n    # first, convert the height of the cube into a list\n    # then use append to make a new list called l\n    # then use index to return the value\n    # then delete the l\n    # finally, print the answer\n    l = list(map(int,l.split()))\n    l.append(0)\n    return(sum(l))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #Write your code here\n    return l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # cube dimensions\n    lx = l\n    ly = l\n    lz = l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_area_cube(s):\n        '''\n        Function to calculate the lateral surface area of a cube given its side length.\n        '''\n        l_area = s**2 * math.pi\n        return l_area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #\n    # NOTE: This function should be refactored into a new function to reduce the number of parameters\n    #\n    #\n    #\n    \n    #l is the length of a cube\n    #\n    #\n    #\n    \n    # first calculate the length of side length\n    #\n    \n    #length = 4 * l * l * l\n    \n    #\n    \n    # second calculate the number of sides\n    #\n    #number_sides = 4 * length * length * length\n    \n    #\n    \n    # third calculate the area of the surface\n    #\n    \n    #area = number_sides * 3.14159 * l * l\n    \n    #\n    \n    # fourth calculate the volume\n    #\n    \n    #volume = 4 * area * 3.14159 * l\n    \n    #\n    \n    # fifth calculate the height\n    #\n    #height = 4 * area * l\n    \n    #\n    \n    # sixth calculate the angle\n    #\n    # angle = (2 * pi) * height / l\n    \n    #\n    \n    # seventh calculate the side length\n    #\n    #side_length = l / l\n    \n    #\n    \n    # eighth calculate the number of sides\n    #\n    #side_length = number_sides / side_length\n    \n    #\n    \n    # ninth calculate the perimeter\n    #\n    #perimeter = 4 * l * side_length\n    \n    #\n    \n    # tenth calculate the solid surface area\n    #\n    #solid_area = side_length * side_length * 4.0\n    \n    #\n    \n    # eleven calculate the cover of the solid\n    #\n    #cover = solid_area / volume\n    \n    #\n    \n    # twelve calculate the volume of the bottom face\n    #\n    #volume_bottom = number_sides * l * l * 3.14159\n    \n    #\n    \n    #\n    \n    #\n    \n    #\n    \n    #\n    \n    #\n    \n    # the main function\n    #\n    \n    #\n    \n    #\n    \n    #\n    \n    #\n    \n    #\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    c = []\n    for i in l:\n        c.append(i ** 0.5)\n    return c\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # your code goes here\n    s=0\n    for i in range(1,n,2):\n        s=s+i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    '''\n    For example, if n is given as 3, the function will return 31.\n    '''\n    if (n <= 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return (square_Sum(n-1) + 2*square_Sum(n//2))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, int(n/2)+1):\n        if (i % 2 == 0):\n            sum += i\n    return su"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        if i % 2 == 0:\n            sum = sum**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i**2\n        i += 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, int(n) + 1, 2):\n        sum = sum + i * i\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            return n * n\n        else:\n            return n * n * (n + 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0 or n == 1: \n        return n\n    else: \n        return find_star_num(n-1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = n*(n+1)//2\n    \n    return star_num\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return find_star_num(n-1) + 3\n    return find_star_num(n/2) + 2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n + 1): \n        if i * i == n:\n            return i \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 10\n    elif n == 5: \n        return 50\n    elif n == 6: \n        return 100\n    elif n == 7: \n        return 500\n    elif n == 8: \n        return 1000\n    elif n == 9: \n        return 5000\n    else: \n        return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    else: \n        for i in range(3, n, 2): \n            n = find_star_num(i)\n            if n!= 0: \n                return n\n        return n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n<=1: return n\n    else:\n        for i in range(1,n):\n            if n%i==0: return i\n        else: return n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1)+find_star_num(n-2)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return(ord(k.decode('ascii')))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    c = ord(k)\n    return c\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k not in '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' or k.isspace():\n        print('Value Error: this is a character')\n        return None\n    \n    if len(k) > 3 or k[0] > 'a' or k[0] > 'z':\n        print('Value Error: this is not a character')\n        return None\n    \n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k < 0 or k > 127:\n        raise ValueError(\"Bad character\")\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k, base=32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 0 and k <= 255:\n        return ord(k)\n    else:\n        raise ValueError('The character specified must be in the range [0..255].')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == 0:\n        return''\n    elif k == 1:\n        return chr(k)\n    else:\n        return chr(k) + ascii_value(k - 1)\n    \n    \ndef main():\n    '''\n    Runs the program.\n    '''\n    # user input\n    print('Welcome to ascii_viewer.py')\n    print('In ASCII view mode, you will see a word by word in your memory.')\n    print('The program also allows you to print out a string of ascii characters.')\n    print('After you are done, you can also use the special ascii characters for symbols to be displayed.')\n    print()\n    \n    while True:\n        print('\\nPlease enter an integer between 1 and 10 (including 0).')\n        print()\n        \n        # process input\n        k = input('Input an integer (0 to quit): ')\n        if k == '0':\n            break\n        try:\n            k = int(k)\n        except ValueError:\n            print('Invalid input. Try again.')\n            continue\n            \n        # display input\n        print('Current input:', ascii_value(k))\n        \n        # print input\n        print('\\nCurrent output:', ascii_value(k))\n        \n    print('Goodbye.')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is not str:\n        raise TypeError('k must be a string')\n    if len(k) > 1:\n        raise ValueError('k must be a string of one character')\n    if k in ASCII_REVERSE.keys():\n        return ASCII_REVERSE[k]\n    else:\n        return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sums = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sums += num\n    return even_sums\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in arr:\n        if x%2 == 0:\n            sum+=x\n    print(sum)\n    \n    return sum\n    \ndef test_sum_even_and_even_index():\n    '''\n    Test the sum of even numbers at even positions of a list.\n    '''\n    test_list = [1, 2, 3, 4, 5, 6]\n    print(sum_even_and_even_index(test_list))\n    \n    \n    \ndef reverse_list(list_of_nums):  \n    '''\n    Write a python function to reverse the list.\n    '''\n    print(list_of_nums)\n    \n    return list_of_nums[::-1]\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = [i for i in range(len(arr)) if i % 2 == 0]\n    even_sum = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0 \n    for index, item in enumerate(arr):\n        if item % 2 == 0:\n            even_sum += item\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    while even_index < len(arr):\n        if arr[even_index] % 2 == 0:\n            even_sum += arr[even_index]\n            even_index += 1\n        else:\n            even_sum += arr[even_index]\n            even_index += 1\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            sum += i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0 \n    for index in range(len(arr)):\n        if index % 2 == 0:\n            sum += arr[index]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            count+=arr[i]\n    return count\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            even_sum = even_sum + arr[i]\n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    \n    for i in range(0, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    \n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n > 0: \n        for i in range(1, n + 1): \n            x = i ** 3 \n            if (x % 2) == 0: \n                print(x) \n    else: \n        print(0)\nn = int(input(\"Please enter the integer n: \")) \neven_Power_Sum(n)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    answer = 0\n    for i in range(1, n+1):\n        if (i%5) == 0:\n            answer += i\n    print(answer)\ndef prime_Numbers():\n    '''\n    Write a python function that takes in an integer n and calculates the factorial of that integer.\n    '''\n    print('\\nFactorial of: ', n)\n    answer = 1\n    if n == 1:\n        answer = 1\n    elif n == 2:\n        answer = 2\n    else:\n        for i in range(2, n+1):\n            answer *= i\n        print(answer)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 2\n    sum = 0\n    while i <= n:\n        sum = sum + i\n        i = i + 3\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return n * (n + 1) * even_Power_Sum(n - 1)\n        \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if (n == 0): \n        return 0 \n    if (n == 1): \n        return 1 \n    else: \n        return n * even_Power_Sum(n-1) \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for power in range(1, n):\n        if (power % 2) == 0:\n            power_sum += power\n    return power_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Write your code here\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power=0\n    while n>0:\n        power=power+1\n        n=n-2\n        if n%2==0:\n            n=n/2\n        else:\n            return 'Error'\n    return power\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n_power = 1\n    if n <= 0: \n        print(\"Invalid Input\")\n    else:\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                n_power += i\n            elif i == 3:\n                n_power += 3 * n_power\n            elif i == 5:\n                n_power += 5 * n_power\n        print(n_power)\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[-1][1]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: (x[0], x[1]), test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for item in test_list:\n        rear.append(item[-1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted_list = []\n    for item in test_list:\n        extracted_list.append(item[0])\n    return extracted_list\n    "
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for x in test_list:\n        result.append(x[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    if not test_list:\n        return []\n    else:\n        rear_extracted = []\n        for tuple in test_list:\n            if tuple[1] == tuple[0]:\n                rear_extracted.append(tuple[0])\n            else:\n                rear_extracted.append(tuple[1])\n        return rear_extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[0])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted = []\n    for element in test_list:\n        extracted.append(element[-1])\n    return extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_list = []\n    for index, value in enumerate(test_list):\n        if index == len(test_list) - 1:\n            r_list.append(value[0])\n        else:\n            r_list.append(value[0])\n            r_list.append(value[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = []\n    for i in range(len(test_tup1)):\n        tup1.append(test_tup1[i][0])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if (len(test_tup1) == 0):\n        return\n    \n    if (len(test_tup2) == 0):\n        return\n    \n    if (test_tup2[0] - test_tup1[0] == 0):\n        return\n    \n    return test_tup1 + [test_tup2[0] - test_tup2[0]]\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Complete the function so that it subtracts the first element of the tuple from the second element of the tuple and returns a tuple.\n    \n    # Create a list of the elements of test_tup1\n    test_elements = test_tup1[1]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(test_tup1, test_tup2)\n    \n    return(test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n    \ntest_tup1 = (1,2,3)\ntest_tup2 = (4,5,6)\nprint(substract_elements(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for num in range(len(test_tup1)):\n        for num2 in range(len(test_tup2)):\n            result.append(test_tup1[num] - test_tup2[num2])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create a new tuple\n    new_tup = ()\n    # for loop iterate through the second tuple\n    for i in range(len(test_tup2)):\n        # add the elements from second tuple\n        new_tup = new_tup + (test_tup2[i] - test_tup1[i])\n    # return new tuple\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    a = len(test_tup1)\n    b = len(test_tup2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # check if given number is positive or not\n    if n < 0: \n        raise ValueError(\"Please enter a positive integer.\")\n    # calculate the number of binnomial terms\n    N = int(math.log(n, 2))\n    # initialize sum\n    sum = 0\n    # calculate the sum of even index binomial coefficients\n    for k in range(0, N):\n        sum = sum + math.pow(n, k) * even_binomial_Coeff(k)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Input: An integer n >= 0\n    # Output: An integer sum of even index binomial coefficients.\n    \n    if (n <= 0): \n        return 0\n    else: \n        return even_binomial_Coeff_Sum(n-1) + math.ceil(math.log(n,2)) # square root of 2\n        # print(even_binomial_Coeff_Sum(n-1) + math.ceil(math.log(n,2)))\n        \n    \n    \n    \ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    \n    # Input: An integer n >= 0\n    # Output: An integer sum of odd index binomial coefficients.\n    \n    if (n <= 0): \n        return 0\n    else: \n        return odd_binomial_Coeff_Sum(n-1) + math.ceil(math.log(n,2)) # square root of 2\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.factorial(n) // math.factorial(n - 2) \n    \n    # or you could add a try and except statement here so that I don't get \n    # any errors.\n    #except ValueError:\n    #    print(\"Invalid Input\")\n    #    return \"Invalid Input\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s = s + (2*i)/math.factorial(2*i)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n > 0:\n        a = 1\n        for i in range(n+1):\n            a = a*(n-i)\n        return a\n    else:\n        print(\"Invalid input.\")\n        return \"Invalid Input.\"\n    \ndef even_binomial_Coeff_Sum_List(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n > 0:\n        result = []\n        for i in range(n+1):\n            result.append(1)\n        \n        for i in range(n-1):\n            if i % 2 == 0:\n                result[i] = result[i] + result[i+1]\n                \n        return result\n    else:\n        print(\"Invalid input.\")\n        return \"Invalid Input.\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = (n//2) + (n%2)\n    return c\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + ((-1)**i) * math.factorial(i) * (2**i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(math.factorial(2*n) / (math.factorial(n) * math.factorial(2*n-1)))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n<=0): \n        return 0\n    else: \n        return (math.factorial(n))/math.factorial(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return (even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)) \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return (odd_binomial_Coeff_Sum(n - 1) + odd_binomial_Coeff_Sum(n - 2)) \ndef even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + (n - 2) * (even_binomial_Coeff_Sum(n - 2)) \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return odd_binomial_Coeff_Sum(n - 1) + odd_binomial_Coeff_Sum(n - 2)\ndef perfect_square_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of perfect square index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return perfect_square_Coeff_Sum(n - 1) + perfect_square_Coeff_Sum(n - 2)\ndef perfect_square_Coeff_Sum_V1( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of perfect square index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return perfect_square_Coeff_Sum_V1(n - 1) + perfect_square_Coeff_Sum_V1(n - 2)\ndef perfect_square_Coeff_Sum_V2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of perfect square index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return perfect_square_Coeff_Sum_V2(n - 1) + perfect_square_Coeff_Sum_V2(n - 2)\ndef perfect_square_Coeff_Sum_V3( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of perfect square index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return perfect_square_Coeff_Sum_V3(n - 1) + perfect_square_Coeff_Sum_V3(n - 2)\ndef get_Coeff_Sum( a, n):\n    '''\n    Write a python function that takes in two positive integer numbers a and n and returns a positive integer representing the sum of the coefficients of a polynomial of degree n.\n    '''\n    if a < 0 or n < 1:\n        return 0\n    else:\n        return (a * a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3 * 3.14 * h * (r**3)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #create a variable volume\n    volume = 0\n    #create a function for a cylinder\n    def cylinder(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = (4/3)*(pi*r**3)\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = (pi/4)*(r**3)*(h**2)\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**2)*(h**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_tangent(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**2)*(h**3))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_parabolic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((4/3)*(r**3)*(h**3))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**2)*(h**3)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_tangent_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**3)*(h**3)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((4/3)*(r**3)*(h**3)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_tangent(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**3)*(h**3)*(r**2)*(h**3))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_quadratic_tangent(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((4/3)*(r**3)*(h**3)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_tangent_parabolic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**2)*(h**3)*(r**2)*(h**3))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_quadratic_tangent(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((4/3)*(r**3)*(h**3)*(r**2)*(h**3))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_tangent_parabolic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**2)*(h**3)*(r**2)*(h**3)*(r**3))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_quadratic_tangent_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**3)*(h**3)*(r**2)*(h**3)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_tangent_parabolic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**3)*(h**3)*(r**2)*(h**3)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_quadratic_tangent_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((4/3)*(r**3)*(h**3)*(r**2)*(h**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_tangent_parabolic_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**2)*(h**3)*(r**2)*(h**2)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_quadratic_tangent_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((4/3)*(r**3)*(h**3)*(r**2)*(h**2)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_tangent_parabolic_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**2)*(h**3)*(r**2)*(h**2)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_tangent_quadratic_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**3)*(h**3)*(r**2)*(h**2)*(r**2)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_tangent_parabolic_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((4/3)*(r**3)*(h**3)*(r**2)*(r**2)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_parabolic_quadratic_quadratic(r,h):\n        '''\n        Write a function that takes in the radius and height of a cylinder and returns the the volume.\n        '''\n        volume = ((r**3)*(h**3)*(r**2)*(h**2)*(r**2)*(r**2))\n        return volume\n    #create a function for a cylinder\n    def cylinder_quadratic_tangent_quadratic(r,h):\n        '''\n    "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = r*h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    def cylinder_volume(r,h):\n        return r*h*(2*3.14)\n    print(cylinder_volume(r,h))\n    \n    return cylinder_volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    print(\"Volume of a cylinder with radius %.2f and height %.2f is %.2f\" % (r,h,volume))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume of the cylinder\n    v=3*(r*h**2)\n    return(v)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3*3.14*(h*r**3)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2) * (h/2)**2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*(3.14/2)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(\"{:.3f}\".format(volume_cylinder(r,h)))\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value >=n:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.keys()[dict.values() > n]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    def filter_dict(dictionary,n):\n        newdict={}\n        for k in dictionary.keys():\n            if dictionary[k] >= n:\n                newdict[k] = dictionary[k]\n        return newdict\n    return filter_dict(dict,n)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list = []\n    for x in dict.values():\n        if x >= n:\n            list.append(x)\n    return list\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new = {}\n    for k,v in dict.items():\n        if v >= n:\n            new[k] = v\n    return new\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #print(dict)\n    #print(n)\n    for value in dict:\n        if dict[value] >= n:\n            dict.pop(value)\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = dict.copy()\n    for key, value in dict.items():\n        if key >= n:\n            filtered_dict.pop(key)\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {i:dict[i] for i in dict if i > n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for (k, v) in dict.items() if (v >= n)}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict=dict.copy()\n    for key,value in dict.items():\n        if type(value) is int or type(value) is float:\n            if value>n:\n                filtered_dict[key]=value\n    return filtered_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[j] == test_tup[i]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # first item in the tuple\n    first_item_value = test_tup[0]\n    # count of elements that precede the first item\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < first_item_value:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # start = 0\n    \n    # while True:\n    #     start += 1\n    #     if start == len(test_tup):\n    #         break\n        \n    # return start\n    \n    i = 0\n    \n    for x in test_tup:\n        \n        # if x == test_tup[i]:\n        #     i += 1\n        \n        if x!= test_tup[i]:\n            i += 1\n            \n    return i\n    \ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    dict_counter = dict()\n    for i in range(len(test_tup)):\n        if (test_tup[i]) in dict_counter:\n            dict_counter[test_tup[i]] += 1\n        else:\n            dict_counter[test_tup[i]] = 1\n    return dict_counter\n    \n    \n    \n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    s = test_tup[0]\n    for i in range(1, len(test_tup)):\n        if test_tup[i] == s:\n            return i\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] >= test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n=int(n)\n    i=1\n    while (i<=n): \n        if (i%2==1):\n            i=i+1\n        else:\n            i=i-1\n    return n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Let the first number be 1, the second number \n    # be 2, and the third number be 3.\n    # And the third number is on the left.\n    return 1 + (2**n-1) + 3*n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    res = []\n    x = n \n    while x > 0:\n        if n%2 == 1:\n            res.append(x)\n            n = n//2\n        else:\n            x = x//2\n    return res \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # Check base case\n    if n <= 0: \n        return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        i = 2\n        while i < n:\n            if i % 2 == 1:\n                i += 1\n            else:\n                i += 1\n                j = 2 * i\n                while j < n:\n                    if j % 2 == 0:\n                        j += 1\n                    else:\n                        j += 1\n                        k = 2 * j\n                        while k < n:\n                            if k % 2 == 0:\n                                k += 1\n                            else:\n                                k += 1\n                                l = 2 * k\n                                while l < n:\n                                    if l % 2 == 0:\n                                        l += 1\n                                    else:\n                                        l += 1\n                                        m = 2 * l\n                                        while m < n:\n                                            if m % 2 == 0:\n                                                m += 1\n                                            else:\n                                                m += 1\n                                                n = n // 2\n                                            \n                                            \n                    \n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    import math\n    if n < 0: \n        raise ValueError('n must be >= 0')\n    elif n == 0: \n        return 1\n    elif n % 2 == 0: \n        return n // math.gcd(n,2)\n    else: \n        return math.gcd(n,n)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    total = 0\n    for x in range(1, n):\n        total = total + x\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = int(input(\"Give me a number \"))\n    # number is 0, 1, 2, 3,..., n - 1\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    elif x == 2:\n        return 5\n    elif x == 3:\n        return 10\n    elif x == 4:\n        return 25\n    elif x == 5:\n        return 50\n    elif x == 6:\n        return 100\n    elif x == 7:\n        return 250\n    elif x == 8:\n        return 500\n    elif x == 9:\n        return 1000\n    elif x == 10:\n        return 2500\n    elif x == 11:\n        return 5000\n    elif x == 12:\n        return 10000\n    elif x == 13:\n        return 25000\n    elif x == 14:\n        return 50000\n    elif x == 15:\n        return 100000\n    elif x == 16:\n        return 250000\n    elif x == 17:\n        return 5000000\n    elif x == 18:\n        return 100000000\n    elif x == 19:\n        return 25000000\n    elif x == 20:\n        return 5000000000\n    elif x == 21:\n        return 100000000000\n    elif x == 22:\n        return 25000000000\n    elif x == 23:\n        return 500000000000\n    elif x == 24:\n        return 100000000000\n    elif x == 25:\n        return 25000000000\n    elif x == 26:\n        return 500000000050\n    elif x == 27:\n        return 10000000000050\n    elif x == 28:\n        return 2500000000050\n    elif x == 29:\n        return 5000000000100\n    elif x == 30:\n        return 100000000000100\n    elif x == 31:\n        return 25000000000100\n    elif x == 32:\n        return 5000000000200\n    elif x == 33:\n        return 100000000000200\n    elif x == 34:\n        return 25000000000200\n    elif x == 35:\n        return 5000000000300\n    elif x == 36:\n        return 100000000000300\n    elif x == 37:\n        return 25000000000300\n    elif x == 38:\n        return 5000000000400\n    elif x == 39:\n        return 100000000000400\n    elif x == 40:\n        return 25000000000400\n    elif x == 41:\n        return 5000000000500\n    elif x == 42:\n        return 100000000000500\n    elif x == 43:\n        return 25000000000500\n    elif x == 44:\n        return 5000000000600\n    elif x == 45:\n        return 100000000000600\n    elif x == 46:\n        return 25000000000600\n    elif x == 47:\n        return 5000000000700\n    elif x == 48:\n        return 100000000000700\n    elif x == 49:\n        return 25000000000700\n    elif x == 50:\n        return 5000000000800\n    elif x == 51:\n        return 100000000000800\n    elif x == 52:\n        return 25000000000800\n    elif x == 53:\n        return 5000000000900\n    elif x == 54:\n        return 100000000000900\n    elif x == 55:\n        return 25000000000900\n    elif x == 56:\n        return 50000000001000\n    elif x == 57:\n        return 1000000000001000\n    elif x == 58:\n        return 250000000001000\n    elif x == 59:\n        return 50000000001500\n    elif x == 60:\n        return 1000000000001500\n    elif x == 61:\n        return 250000000001500\n    elif x == 62:\n        return 50000000001800\n    elif x == 63:\n        return 1000000000001800\n    elif x == 64:\n        return 250000000001800\n    elif x == 65:\n        return 50000000002000\n    elif x == 66:\n        return 1000000000002000\n    elif x == 67:\n        return 250000000002000\n    elif x == 68:\n        return 50000000002500\n    elif x == 69:\n        return 1000000000002500\n    elif x == 70:\n        return 250000000002500\n    elif x == 71:\n        return 50000000003000\n    elif x == 72:\n        return 1000000000003000\n    elif x == 73:\n        return 250000000003000\n    elif x == 74:\n        return 50000000004000\n    elif x == 75:\n        return 1000000000004000\n    elif x == 76:\n        return 250000000004000\n    elif x == 77:\n        return 50000000005000\n    elif x == 78:\n        return 1000000000005000\n    elif x == 79:\n        return 250000000005000\n    elif x == 80:\n        return 50000000006000\n    elif x == 81:\n        return 1000000000006000\n    elif x == 82:\n        return 250000000006000\n    elif x == 83:\n        return 50000000007000\n    elif x == 84:\n        return 1000000000007000\n    elif x == 85:\n        return 250000000007000\n    elif x == 86:\n        return 50000000008000\n    elif x == 87:\n        return 1000000000008000\n    elif x == 88:\n        return 250000000008000\n    elif x == 89:\n        return 50000000009000\n    elif x == 90:\n        return 1000000000009000\n    elif x == 91:\n        return 250000000009000\n    elif x == 92:\n        return 500000000010000\n    elif x == 93:\n        return 10000000000010000\n    elif x == 94:\n        return 2500000000010000\n    elif x == 95:\n        return 500000000015000\n    elif x == 96:\n        return 10000000000015000\n    elif x == 97:\n        return 2500000000015000\n    elif x == 98:\n        return 500000000020000\n    elif x == 99:\n        return 10000000000020000\n    elif x == 100:\n        return 2500000000020000\n    elif x == 101:\n        return 500000000030000\n    elif x == 102:\n        return 10000000000030000\n    elif x == 103:\n        return 2500000000030000\n    elif x == 104:\n        return 500000000040000\n    elif x == 105:\n        return 10000000000040000\n    elif x == 106:\n        return 2500000000040000\n    elif x == 107:\n        return 500000000050000\n    elif x == 108:\n        return 10000000000050000\n    elif x == 109:\n        return 2500000000050000\n    elif x == 110:\n        return 500000000060000\n    elif x == 111:\n        return 10000000000060000\n    elif x == 112:\n        return 2500000000060000\n    elif x == 113:\n        return 500000000070000\n    elif x == 114:\n        return 10000000000070000\n    elif x == 115:\n        return 2500000000070000\n    elif x == 116:\n        return 500000000080000\n    elif x == 117:\n        return 10000000000080000\n    elif x == 118:\n        return 2500000000080000\n    elif x == 119:\n        return 500000000090000\n    elif x == 120:\n        return 10000000000090000\n    elif x == 121:\n        return 2500000000090000\n    elif x == 122:\n        return 500000000010000\n    elif x == 123:\n        return 10000000000010000\n    elif x == 124:\n        return 2500000000010000\n    elif x == 125:\n        return 500000000015000\n    elif x == 126:\n        return 10000000000015000\n    elif x == 127:\n        return 2500000000015000\n    elif x == 128:\n        return 500000000020000\n    elif x == 129:\n        return 10000000000020000\n    elif x == 130:\n        return 2500000000020000\n    elif x == 131:\n        return 500000000030000\n    elif x == 132:\n        return 10000000000030000\n    elif x ="
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return None\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 3\n    elif n == 4: \n        return 4\n    elif n == 5: \n        return 5\n    elif n == 6: \n        return 6\n    elif n == 7: \n        return 7\n    elif n == 8: \n        return 8\n    elif n == 9: \n        return 9\n    elif n == 10: \n        return 10\n    elif n == 11: \n        return 11\n    elif n == 12: \n        return 12\n    elif n == 13: \n        return 13\n    elif n == 14: \n        return 14\n    elif n == 15: \n        return 15\n    elif n == 16: \n        return 16\n    elif n == 17: \n        return 17\n    elif n == 18: \n        return 18\n    elif n == 19: \n        return 19\n    elif n == 20: \n        return 20\n    elif n == 21: \n        return 21\n    elif n == 22: \n        return 22\n    elif n == 23: \n        return 23\n    elif n == 24: \n        return 24\n    elif n == 25: \n        return 25\n    elif n == 26: \n        return 26\n    elif n == 27: \n        return 27\n    elif n == 28: \n        return 28\n    elif n == 29: \n        return 29\n    elif n == 30: \n        return 30\n    elif n == 31: \n        return 31\n    elif n == 32: \n        return 32\n    elif n == 33: \n        return 33\n    elif n == 34: \n        return 34\n    elif n == 35: \n        return 35\n    elif n == 36: \n        return 36\n    elif n == 37: \n        return 37\n    elif n == 38: \n        return 38\n    elif n == 39: \n        return 39\n    elif n == 40: \n        return 40\n    elif n == 41: \n        return 41\n    elif n == 42: \n        return 42\n    elif n == 43: \n        return 43\n    elif n == 44: \n        return 44\n    elif n == 45: \n        return 45\n    elif n == 46: \n        return 46\n    elif n == 47: \n        return 47\n    elif n == 48: \n        return 48\n    elif n == 49: \n        return 49\n    elif n == 50: \n        return 50\n    elif n == 51: \n        return 51\n    elif n == 52: \n        return 52\n    elif n == 53: \n        return 53\n    elif n == 54: \n        return 54\n    elif n == 55: \n        return 55\n    elif n == 56: \n        return 56\n    elif n == 57: \n        return 57\n    elif n == 58: \n        return 58\n    elif n == 59: \n        return 59\n    elif n == 60: \n        return 60\n    elif n == 61: \n        return 61\n    elif n == 62: \n        return 62\n    elif n == 63: \n        return 63\n    elif n == 64: \n        return 64\n    elif n == 65: \n        return 65\n    elif n == 66: \n        return 66\n    elif n == 67: \n        return 67\n    elif n == 68: \n        return 68\n    elif n == 69: \n        return 69\n    elif n == 70: \n        return 70\n    elif n == 71: \n        return 71\n    elif n == 72: \n        return 72\n    elif n == 73: \n        return 73\n    elif n == 74: \n        return 74\n    elif n == 75: \n        return 75\n    elif n == 76: \n        return 76\n    elif n == 77: \n        return 77\n    elif n == 78: \n        return 78\n    elif n == 79: \n        return 79\n    elif n == 80: \n        return 80\n    elif n == 81: \n        return 81\n    elif n == 82: \n        return 82\n    elif n == 83: \n        return 83\n    elif n == 84: \n        return 84\n    elif n == 85: \n        return 85\n    elif n == 86: \n        return 86\n    elif n == 87: \n        return 87\n    elif n == 88: \n        return 88\n    elif n == 89: \n        return 89\n    elif n == 90: \n        return 90\n    elif n == 91: \n        return 91\n    elif n == 92: \n        return 92\n    elif n == 93: \n        return 93\n    elif n == 94: \n        return 94\n    elif n == 95: \n        return 95\n    elif n == 96: \n        return 96\n    elif n == 97: \n        return 97\n    elif n == 98: \n        return 98\n    elif n == 99: \n        return 99\n    elif n == 100: \n        return 100\n    elif n == 101: \n        return 101\n    elif n == 102: \n        return 102\n    elif n == 103: \n        return 103\n    elif n == 104: \n        return 104\n    elif n == 105: \n        return 105\n    elif n == 106: \n        return 106\n    elif n == 107: \n        return 107\n    elif n == 108: \n        return 108\n    elif n == 109: \n        return 109\n    elif n == 110: \n        return 110\n    elif n == 111: \n        return 111\n    elif n == 112: \n        return 112\n    elif n == 113: \n        return 113\n    elif n == 114: \n        return 114\n    elif n == 115: \n        return 115\n    elif n == 116: \n        return 116\n    elif n == 117: \n        return 117\n    elif n == 118: \n        return 118\n    elif n == 119: \n        return 119\n    elif n == 120: \n        return 120\n    elif n == 121: \n        return 121\n    elif n == 122: \n        return 122\n    elif n == 123: \n        return 123\n    elif n == 124: \n        return 124\n    elif n == 125: \n        return 125\n    elif n == 126: \n        return 126\n    elif n == 127: \n        return 127\n    elif n == 128: \n        return 128\n    elif n == 129: \n        return 129\n    elif n == 130: \n        return 130\n    elif n == 131: \n        return 131\n    elif n == 132: \n        return 132\n    elif n == 133: \n        return 133\n    elif n == 134: \n        return 134\n    elif n == 135: \n        return 135\n    elif n == 136: \n        return 136\n    elif n == 137: \n        return 137\n    elif n == 138: \n        return 138\n    elif n == 139: \n        return 139\n    elif n == 140: \n        return 140\n    elif n == 141: \n        return 141\n    elif n == 142: \n        return 142\n    elif n == 143: \n        return 143\n    elif n == 144: \n        return 144\n    elif n == 145: \n        return 145\n    elif n == 146: \n        return 146\n    elif n == 147: \n        return 147\n    elif n == 148: \n        return 148\n    elif n == 149: \n        return 149\n    elif n == 150: \n        return 150\n    elif n == 151: \n        return 151\n    elif n == 152: \n        return 152\n    elif n == 153: \n        return 153\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n + 1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for position, value in enumerate(dlist):\n        if value == item:\n            return (True, position)\n        elif value > item:\n            return (False, position)\n    else:\n        return (-1, -1)\n    \n    \ndef recur_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (-1, -1)\n    elif dlist[0] == item:\n        return (True, 0)\n    else:\n        return recur_sequential_search(dlist[1:], item)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i,dlist.index(item)\n    return -1, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # The code below is a very simple implementation of the algorithm.\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return True,i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    item_found = False\n    current_index = 0\n    for index, item_found in enumerate(dlist):\n        if item == item_found:\n            item_found = True\n            current_index = index\n        if item_found:\n            return (item_found, current_index)\n    return (item_found, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n    \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\n    \ndef merge_sort(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    midpoint = len(dlist) // 2\n    leftlist = dlist[:midpoint]\n    rightlist = dlist[midpoint:]\n    \n    left_sorted_list = merge_sort(leftlist)\n    right_sorted_list = merge_sort(rightlist)\n    \n    sorted_list = merge(left_sorted_list, right_sorted_list)\n    \n    return sorted_list\n    \ndef merge(left_list, right_list):\n    '''\n    Write a function that merges the two lists in ascending order.\n    '''\n    if len(left_list) == 0 or len(right_list) == 0:\n        return left_list + right_list\n    \n    left_pointer = right_pointer = 0\n    sorted_list = []\n    \n    while left_pointer < len(left_list) and right_pointer < len(right_list):\n        if left_list[left_pointer] < right_list[right_pointer]:\n            sorted_list.append(left_list[left_pointer])\n            left_pointer += 1\n        else:\n            sorted_list.append(right_list[right_pointer])\n            right_pointer += 1\n            \n    if left_pointer == len(left_list):\n        sorted_list += right_list[right_pointer:]\n    else:\n        sorted_list += left_list[left_pointer:]\n        \n    return sorted_list\n    \ndef heap_sort(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    heap = []\n    for index, element in enumerate(dlist):\n        heapq.heappush(heap, (-element, index))\n    \n    sorted_list = []\n    while len(heap) > 0:\n        sorted_list.append(-heapq.heappop(heap)[1])\n    \n    return sorted_list\n    \ndef selection_sort(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    for index in range(len(dlist)):\n        min_idx = index\n        for i in range(index + 1, len(dlist)):\n            if dlist[i] < dlist[min_idx]:\n                min_idx = i\n        \n        dlist[index], dlist[min_idx] = dlist[min_idx], dlist[index]\n        \n    return dlist\n    \ndef insertion_sort(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    for index in range(1, len(dlist)):\n        current_value = dlist[index]\n        position = index\n        while position > 0 and dlist[position - 1] > current_value:\n            dlist[position] = dlist[position - 1]\n            position -= 1\n        dlist[position] = current_value\n    \n    return dlist\n    \ndef quick_sort(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    def partition(dlist, start, end):\n        pivot_index = start\n        pivot = dlist[pivot_index]\n        \n        while True:\n            while start < end and dlist[end] >= pivot:\n                end -= 1\n                \n            while start < end and dlist[start] <= pivot:\n                start += 1\n                \n            if start < end:\n                dlist[start], dlist[end] = dlist[end], dlist[start]\n                \n            dlist[end], dlist[pivot_index] = dlist[pivot_index], dlist[end]\n            \n            if start == end:\n                break\n    \n    def quick_sort_recursive(dlist, start, end):\n        if start < end:\n            partition_index = partition(dlist, start, end)\n            quick_sort_recursive(dlist, start, partition_index - 1)\n            quick_sort_recursive(dlist, partition_index + 1, end)\n    \n    quick_sort_recursive(dlist, 0, len(dlist) - 1)\n    \n    return dlist\n    \ndef heap_sort_recursive(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    def build_heap(dlist, start, end):\n        for i in range(start, end):\n            heapq.heapify(dlist)\n            \n    def heapify_recursive(dlist, start, end):\n        for i in range(start, end):\n            if start < end:\n                if dlist[start] > dlist[i]:\n                    start = i\n                else:\n                    break\n        if start == end:\n            return\n        \n        for i in range(start, end):\n            heapq.heapify(dlist)\n            \n            if start < end and dlist[start] > dlist[i]:\n                start = i\n                \n            if start < end and dlist[start] > dlist[i]:\n                build_heap(dlist, start, i)\n                \n            if start < end and dlist[end] > dlist[start]:\n                build_heap(dlist, i, end)\n    \n    heapify_recursive(dlist, 0, len(dlist) - 1)\n    \n    return dlist\n    \ndef shell_sort(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    def shell_sort_recursive(dlist, start, end):\n        if start < end:\n            step = (end - start) // (len(dlist) - 1)\n            for i in range(start, end, step):\n                heapq.heapify(dlist)\n                \n    shell_sort_recursive(dlist, 0, len(dlist) - 1)\n    \n    return dlist\n    \ndef merge_sort(dlist):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if len(dlist) < 2:\n        return dlist\n    \n    def merge_sort_recursive(dlist, start, end):\n        if start < end:\n            middle = start + (end - start) // 2\n            \n            merge_sort_recursive(dlist, start, middle)\n            merge_sort_recursive(dlist, middle + 1, end)\n            merge(dlist, start, middle, end)\n            \n    def merge(dlist, start, middle, end):\n        pivot = start\n        \n        left = start\n        right = middle + 1\n        \n        while left <= middle and right <= end:\n            \n            if dlist[left] < dlist[right]:\n                dlist[pivot] = dlist[left]\n                left += 1\n            else:\n                dlist[pivot] = dlist[right]\n                right += 1\n                \n            pivot += 1\n        \n        for i in range(start, end):\n            dlist[i] = dlist[pivot]\n            \n        dlist[pivot] = dlist[right]\n        dlist[right] = dlist[middle]\n        \n        dlist[middle] = dlist[start]\n        \n        dlist[start] = pivot\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set_list = set(test_list)\n    if len(set_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #make a list of all elements in the list\n    lst = [x for x in test_list if x not in test_list]\n    #if list is empty return true\n    if not lst:\n        return True\n    #make a list of all duplicate elements\n    lst_duplicate = list(set(lst))\n    #if list is empty return false\n    if not lst_duplicate:\n        return False\n    #return true if list is not empty return false\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(test_list)\n    list_of_unique_elements = set(test_list)\n    if len(list_of_unique_elements) == len(test_list):\n        print(\"All the elements are unique\")\n    else:\n        print(\"Some of the elements are not unique\")\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    for item in test_list:\n        if item in test_list:\n            count += 1\n    if count == len(test_list):\n        return True\n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==1:\n        return True\n    else:\n        count_of_elements=1\n        for i in test_list:\n            if i not in test_list:\n                count_of_elements+=1\n        return count_of_elements==len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for elem in test_list:\n        if elem in seen:\n            return False\n        else:\n            seen.add(elem)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    for item in test_list:\n        if item in test_list:\n            count += 1\n    if count == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    if test_list==[]:\n        return True\n    \n    for i in test_list:\n        if i in test_list:\n            return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 1:\n        return True\n    elif len(test_list) == 2:\n        if test_list[0] == test_list[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Gather values\n    values = nums1+nums2\n    \n    # Find common element\n    # Find the non-zero element from the lowest to the highest\n    # Put it in a list with the lowest as index\n    # Find the common value of the list \n    # If the common value is the same as the first value then put it in a list\n    # If the common value is greater than the first value then put it in a list\n    # Find the lowest value from the first list\n    # Put it in a list with the highest as index\n    # If the lowest value is the same as the first value then put it in a list\n    # If the lowest value is smaller than the first value then put it in a list\n    # Find the highest value from the first list\n    # Put it in a list with the lowest as index\n    # Find the common value of the list \n    # If the common value is the same as the first value then put it in a list\n    # If the common value is smaller than the first value then put it in a list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    newlist=[]\n    for i in range(len(nums1)):\n        newlist.append(nums1[i]-nums2[i])\n    return newlist\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #in order to use the * operator, we use '*' for the parameter.\n    nums1_copy = nums1[:]\n    nums2_copy = nums2[:]\n    #for all the numbers in nums1 we find their product.\n    product_1 = 1\n    for i in range(len(nums1)):\n        product_1 *= nums1[i]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sublist1 = []\n    sublist2 = []\n    for i in range(len(nums1)):\n        sublist1.append(nums1[i]-nums2[i])\n    for i in range(len(nums2)):\n        sublist2.append(nums2[i]-nums1[i])\n    return sublist1, sublist2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n for n in nums2 if n not in nums1]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(0,len(nums2)):\n        sub_list.append(nums2[i]-nums1[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    print('Subtracting: ',nums1,'-',nums2)\n    return nums1-nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    temp = []\n    n = len(nums1)\n    k = len(nums2)\n    for i in range(n):\n        temp.append(nums1[i]-nums2[i])\n    return temp\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Fill this in\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    try: \n        val = int(n)\n        if len(str(val))!= 10: \n            raise TypeError(\"Only integers are allowed for digits\")\n        \n        freq = {}\n        for i in range(10):\n            if i in str(val):\n                if i in freq:\n                    freq[i] += 1\n                else:\n                    freq[i] = 1\n    except (TypeError,ValueError):\n        print('Invalid number. Number not in proper format!')\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # if n <= 0: \n    #     raise ValueError\n    #     return\n    # else: \n    #     return (n % 10) not in list_of_digits\n    return (n % 10) not in list_of_digits\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def validate_digit(n, digits):\n        '''\n        Raise an error if the digits entered does not match the expected value.\n        '''\n        if len(digits)!= len(n):\n            raise ValueError\n        for i in range(len(n)):\n            if not(n[i].isdigit()):\n                raise ValueError\n        for i in range(len(n)):\n            if n[i] not in digits:\n                raise ValueError\n        for i in range(len(n)):\n            if int(n[i]) < 0 or int(n[i]) >= 10:\n                raise ValueError\n    return validate_digit\n    \ndef get_valid_digit(n):\n    '''\n    Function to get a valid digit that the user enters.\n    '''\n    return validate(n)"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    total = 0\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count = count+1\n            total += i\n    if count==total:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in n:\n        if i < 10:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d=0\n    for i in n:\n        d+=1\n        if d > n[i]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n_str = str(n)\n    return n_str.isdigit()\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n    for i in n:\n        if i.isdigit():\n            count[i] += 1\n    for i,j in count.items():\n        if j > count[i]:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\ndef check_element_2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    error = None\n    if element not in list:\n        error = 'Element {} not found.'.format(element)\n    elif element in list and len(list) > 1:\n        for element in list:\n            if element!= element:\n                error = 'Different elements found.'\n    else:\n        error = 'Element {} found.'.format(element)\n    \n    return error\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #your code here\n    return list == [element]\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(\\b[aA]\\b)'\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    pattern = r\"[a-zA-Za-z]+\\b\"\n    return re.match(pattern, text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Extract the text\n    text = text.lower()\n    #print(text)\n    # Remove punctuation\n    text = re.sub(r'[^a-zA-Z0-9 ]+',' ',text)\n    # Remove numbers\n    text = re.sub(r'\\d+','',text)\n    # Remove newlines\n    text = re.sub(r'\\n+',' ',text)\n    # Remove punctuation\n    text = re.sub(r'[^a-zA-Z0-9 ]+',' ',text)\n    # Remove whitespace\n    text = re.sub(r'\\s+',' ',text)\n    # Remove numbers\n    text = re.sub(r'\\d+','',text)\n    # Remove the characters that are not letters or numbers\n    text = re.sub(r'[^a-zA-Z0-9 ]+',' ',text)\n    # Count the frequency of each character\n    count = {}\n    for char in text:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    # Sort the dictionary keys by their frequencies\n    count = sorted(count.items(),key=lambda item:item[1],reverse=True)\n    # Check the word matches\n    #print(count)\n    for i,j in count:\n        if j==2:\n            if i==3:\n                return 'ab'\n            elif i==1:\n                return 'a'\n            elif i==0:\n                return 'a'\n            else:\n                return 'a'\n        if j==3:\n            if i==2:\n                return 'ba'\n            elif i==1:\n                return 'b'\n            elif i==0:\n                return 'b'\n            else:\n                return 'b'\n        elif j==1:\n            return 'b'\n    return '?'"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(\"a(.*)b\", text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if not isinstance(text, str):\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.match(r'a([bc]+)*b', text)\n    if m:\n        print(f'is a {m.group(1)}')\n        return f'is a {m.group(1)}'\n    return 'is not a'\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or four 'b' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by two or four 'b' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by two or four 'b' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or five 'b' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by two or five 'b' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by two or five 'b' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or six 'b' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by two or six 'b' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by two or six 'b' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or seven 'b' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by two or seven 'b' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by two or seven 'b' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or eight 'b' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by two or eight 'b' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by two or eight 'b' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or nine 'b' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by two or nine 'b' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by two or nine 'b' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_three_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '0' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by three '0' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by three '0' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1 and text.find('c') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('c')!= -1:\n        return 'There are no backspaces.'\n    else:\n        return True\n    \ndef text_match_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '1' characters.\n    '''\n    # TODO: Write your function that checks whether a string contains the 'a' character followed by three '1' characters.\n    # Hint: you can use regular expressions\n    # TODO: Write a function that checks whether a string contains the 'a' character followed by three '1' characters.\n    # Hint: you can use regular expressions\n    \n    if text.find('a') == -1 and text.find('b') == -1 and text.find('c') == -1:\n        return 'There are no backspaces.'\n    elif text.find('a')!= -1:\n        return 'There are no backspaces.'\n    elif text.find('b')!= -1:\n        return 'There are no backspaces.'\n    elif text.fin"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    for i in text:\n        if i == 'a' or i == 'b':\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text:\n        if len(text) > 1 and 'b' in text[1:]:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i=0\n    sum_list=[]\n    while i < n:\n        sum_list.append(sum(a[i:n]))\n        i+=k\n    i=0\n    max_sub_array=0\n    while i < n:\n        if sum_list[i]!= max_sub_array:\n            max_sub_array=sum_list[i]\n            \n        i+=1\n    return max_sub_array\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Note: this is a one line solution\n    # create a new array that contains the sum of the sub-array\n    # and set the last number at the end of the new array\n    # modify the new array in place\n    # return the new array\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Creating a DP array \n    dp = [0] * (n + 1) \n    # Inserting the sum of the original array \n    dp[0] = a[0] \n    # Inserting the sum of the elements after the first element \n    for i in range(1, n + 1): \n        dp[i] = dp[i - 1] + a[i] \n    # Searching for the sum of the elements \n    # that are already present in the DP array \n    for i in range(1, k + 1): \n        j = 0\n        \n        # Check the first index \n        # for all the elements \n        for i in range(1, n + 1): \n            if dp[i] > dp[j] + a[i]: \n                dp[i] = dp[j] + a[i] \n                j = i \n        \n    # Returning the largest sum \n    return dp[n] \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return 0\n    if n == 0 or a[n-1] <= 0:\n        return 0\n    \n    return (a[n-1] + max(a[n-k:n-1]))\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Your code here\n    return max(sum(a[i:i+k]) for i in range(n-k+1))\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Build the sum array and find the maximum\n    sum_array = [0]*(n+1)\n    sum_array[0] = a[0]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    sum_arr = 0\n    arr = [0 for i in range(n + 1)]\n    \n    for i in range(n):\n        sum_arr += a[i]\n        arr[i + 1] = sum_arr\n    \n    print(arr)\n    \n    for i in range(k):\n        arr[i + 1] = arr[i + 1] - arr[i]\n        \n    print(arr)\n    \n    for i in range(n):\n        max_sum_i = 0\n        for j in range(n - i - 1):\n            if(arr[j] > max_sum_i):\n                max_sum_i = arr[j]\n        \n        arr[n - i - 1] = max_sum_i\n    \n    print(arr)\n    return arr[n]\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # write your code here\n    if len(a)<=n:\n        return a\n    if n == 1:\n        return a[0]\n    if n==2:\n        return max(a[0],a[1]+a[0])\n    if k==1:\n        return max(a[0]+a[1])\n    if k == 2:\n        return max(a[0]+a[1],a[2]+a[0]+a[1])\n    x=[]\n    for i in range(0,k):\n        x.append(a[i])\n    for j in range(k,n):\n        x.append(max(a[j-k]+x[j-k],x[j-1]))\n    return max(x)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here.\n    k = k % len(a)\n    l = []\n    sum_left = 0\n    sum_right = 0\n    left = 0\n    right = 0\n    i = 0\n    j = 0\n    while len(l) < n:\n        if i == n-1:\n            l.append(a[j])\n            j = j + 1\n        if j == len(a):\n            break\n        else:\n            if i == 0:\n                if a[i]!= a[j]:\n                    sum_left += a[j]\n                    i += 1\n                    j = j + 1\n                    continue\n            if a[i]!= a[j]:\n                sum_right += a[j]\n                i += 1\n                j = j + 1\n                continue\n            if sum_left > sum_right:\n                l.append(a[i])\n                i += 1\n                j = j + 1\n            if i == len(a) or j == len(a):\n                break\n    return sum_left + sum_right\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Time O(n*k), Space O(1)\n    #n = len(a)\n    #k = len(a)\n    #print(a)\n    #print(n)\n    #print(k)\n    #print(a[0], a[n-1], a[n-k-1], a[n-k-2])\n    #print(a[0] + a[n-1] + a[n-k-1] + a[n-k-2])\n    if k==0: return 0\n    i=0\n    j=0\n    sum=0\n    while i<len(a):\n        if i+j<k:\n            sum+=a[i+j]\n            i+=1\n            j+=1\n        else:\n            sum+=a[i+j]\n            i+=1\n            j+=1\n    return sum\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1, n+1):\n        sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if(n <= 0):\n        print(\"Please enter a positive integer\")\n        return\n    if(n == 0):\n        return 0\n    \n    return (square_Sum(n - 1) + (n * square_Sum(n - 2)))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2==0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1):\n        sum = sum+i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s=s+i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(1, n+1))\n    \n    \nprint(square_Sum(5))\nprint(square_Sum(10))\nprint(square_Sum(8))\nprint(square_Sum(3))"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for number in range(1, n):\n        if (number % 2 == 0):\n            sum_of_squares += number**2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_square=0\n    for n in range(1,n):\n        sum_square+=square(n)\n    print('sum_square of',n,'is',sum_square)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum+=i**2\n    return sum\ndef square_root(n):\n    '''\n    Write a python function takes in an integer n and returns the square root of the number.\n    '''\n    if n<0:\n        return \"Value is invalid\"\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**0.5\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for l_ in list1:\n        l.append(max(l_))\n    return l\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    if len(list1) == 1:\n        return list1[0]\n    elif len(list1) > max_len:\n        max_len = len(list1)\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return list1\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = 0\n    for i in list1:\n        l = len(i)\n    return l\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for i in list1:\n        result.append(max(i))\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list=[]\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y]>max(max_length_list):\n                max_length_list=[list1[x][y]]\n            else:\n                max_length_list.append(list1[x][y])\n    return max_length_list\n    \ndef get_distances_from_list(l):\n    '''\n    Write a function to find the distance between each pair of nodes\n    in a list and return the list.\n    '''\n    distances={}\n    for x in range(len(l)):\n        for y in range(len(l[x])):\n            distances[l[x][y]]=[]\n            for z in range(len(l)):\n                distances[l[x][y]].append(abs(l[x][z]-l[z][y]))\n    return distances\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    pass\n    pass\n    '''\n    @param list1: the first list.\n    @return: the maximum length of the list.\n    '''\n    pass\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #Your code goes here\n    max_len = 0\n    if len(list1) == 0:\n        return max_len\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n    \ndef main():\n    '''\n    Write your own implementation of max_length.\n    '''\n    #Your code goes here\n    list = [['A','B'],['A','C','D']]\n    print(max_length(list))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case \n    if k == 0:\n        return 1\n    \n    # if n < 2:\n    #     return 0\n    \n    # if n == 2:\n    #     return n * 2\n    \n    # if k == 2:\n    #     return n * 3\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    fence = [ [0] * (n+1) for i in range(n+1) ]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return n\n    \n    if n == 2:\n        return 1\n        \n    if k == n:\n        return 2\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Add code here\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i+j == 2:\n                count += 1\n            elif i+j < 2:\n                count += 1\n            elif i+j > 2:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if n == 2:\n        return 3\n    \n    elif k < n:\n        print(\"Could not reach minimum.\")\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 0 or k <= 0:\n        return 0\n    elif k == 1:\n        return 1\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # edge case for case where n is 1\n    if n == 1:\n        return 1\n    \n    # to generate all possible ways in a row, this is a special case\n    if n == 2:\n        return 4\n    \n    # if we are in odd index, we need to choose atleast two distinct colors\n    # edge case: we need to pick a random color\n    if k % 2 == 0:\n        k = k / 2\n    \n    # edge case: we need to pick two distinct colors\n    # edge case: we need to pick two distinct colors\n    # edge case: we need to pick atleast two distinct colors\n    if k == 2:\n        k = 3\n    \n    # loop over all possible ways, we are trying to reduce the number of ways to make\n    # fence with n posts and k colors\n    ways = 0\n    for i in range(k):\n        for j in range(n - k + 1):\n            # if i = 0 and j = 0, we have a special case\n            if i == 0 and j == 0:\n                ways += 1\n                continue\n            # if i = 0 and j = 1, we have a special case\n            if i == 0 and j == 1:\n                ways += 4\n                continue\n            # if i = 0 and j = 2, we have a special case\n            if i == 0 and j == 2:\n                ways += 8\n                continue\n            \n            # if i = 1 and j = 0, we have a special case\n            if i == 1 and j == 0:\n                ways += 2\n                continue\n            # if i = 1 and j = 1, we have a special case\n            if i == 1 and j == 1:\n                ways += 4\n                continue\n            # if i = 1 and j = 2, we have a special case\n            if i == 1 and j == 2:\n                ways += 8\n                continue\n            # if i = 1 and j = 3, we have a special case\n            if i == 1 and j == 3:\n                ways += 16\n                continue\n            \n            # if i = 2 and j = 0, we have a special case\n            if i == 2 and j == 0:\n                ways += 2\n                continue\n            # if i = 2 and j = 1, we have a special case\n            if i == 2 and j == 1:\n                ways += 4\n                continue\n            # if i = 2 and j = 2, we have a special case\n            if i == 2 and j == 2:\n                ways += 8\n                continue\n            # if i = 2 and j = 3, we have a special case\n            if i == 2 and j == 3:\n                ways += 16\n                continue\n            \n            # if i = 3 and j = 0, we have a special case\n            if i == 3 and j == 0:\n                ways += 2\n                continue\n            # if i = 3 and j = 1, we have a special case\n            if i == 3 and j == 1:\n                ways += 4\n                continue\n            # if i = 3 and j = 2, we have a special case\n            if i == 3 and j == 2:\n                ways += 8\n                continue\n            # if i = 3 and j = 3, we have a special case\n            if i == 3 and j == 3:\n                ways += 16\n                continue\n        \n    return way"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        count = 0\n        for i in range(1, k + 1):\n            count += count_no_of_ways(n - 1, k - i)\n        return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if (n == 0 or k == 0):\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=m:\n        return n\n    if m==0:\n        return 0\n    if n==m:\n        return 1\n    if n%m==0:\n        return find(n//m,m)\n    else:\n        return find(n//m,m+1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 and m==0:\n        return 0\n    elif n==0:\n        return m\n    else:\n        return m%n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m==0): return 1\n    elif(m==1): return n\n    else: \n        if n%m!=0:\n            x = n%m\n            n //= m\n            return (find(x,m)) * find(n,m)\n        else:\n            return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while n >= m:\n        m = (m + n)//2\n        if (n%m==0):\n            return m\n    return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x,y = n,m\n    while x >= 0 and y >= 0:\n        x-=1\n        y-=1\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return find(x,y)\n    return find(y,x)\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n == 0 or m == 0:\n        return n\n    else:\n        return m % n\n        \n    \n    \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0: return n\n    if n == 0: return m\n    if n < 0 or m < 0: return -1\n    if n < m: m, n = n, m\n    print(n,m)\n    if n % m == 0: return n/m\n    else: return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    if m%n!=0:\n        return 0\n    else:\n        ans=find(n//m,m)\n        return ans\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    from math import floor\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    if n > m:\n        return find(n,m+1)\n    return find(n-1,m)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def area(x,y):\n        return (x*y)/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a,b,c = math.sqrt(w**2 + h**2), math.sqrt(w**2 - h**2), math.sqrt(h**2 - w**2)\n    x = b * (1/2) + c * (1/2)\n    y = a * (1/2) + b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef corner(w,h):\n    '''\n    Write a function to find the corner of a right angled triangle.\n    '''\n    a,b = math.sqrt(w**2 + h**2), math.sqrt(w**2 - h**2)\n    x = a * (1/2)\n    y = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef rightangled(w,h):\n    '''\n    Write a function to find the right angled triangle.\n    '''\n    a,b,c = math.sqrt(w**2 + h**2), math.sqrt(w**2 - h**2), math.sqrt(h**2 - w**2)\n    x = a * (1/2)\n    y = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef ray_x(w,h,l,r):\n    '''\n    Write a function to find the ray (x,y) coordinates of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    x = a * (1/2)\n    y = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef ray_y(w,h,l,r):\n    '''\n    Write a function to find the ray (x,y) coordinates of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    y = a * (1/2)\n    x = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef ray_z(w,h,l,r):\n    '''\n    Write a function to find the ray (x,y) coordinates of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    z = a * (1/2)\n    x = b * (1/2)\n    y = c * (1/2)\n    return z\ndef ray_xy(w,h,l,r):\n    '''\n    Write a function to find the ray (x,y) coordinates of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    x = a * (1/2)\n    y = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef triangle(w,h,l,r):\n    '''\n    Write a function to find the triangle.\n    '''\n    p = math.sqrt(w**2 + h**2 + l**2)\n    q = math.sqrt(w**2 - h**2 - l**2)\n    r = math.sqrt(h**2 - w**2 + l**2)\n    z = p * (1/2) + q * (1/2)\n    x = r * (1/2)\n    y = h * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef triangle_y(w,h,l,r):\n    '''\n    Write a function to find the triangle.\n    '''\n    p = math.sqrt(w**2 + h**2 + l**2)\n    q = math.sqrt(w**2 - h**2 - l**2)\n    r = math.sqrt(h**2 - w**2 + l**2)\n    z = p * (1/2) + q * (1/2)\n    x = r * (1/2)\n    y = h * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef triangle_z(w,h,l,r):\n    '''\n    Write a function to find the triangle.\n    '''\n    p = math.sqrt(w**2 + h**2 + l**2)\n    q = math.sqrt(w**2 - h**2 - l**2)\n    r = math.sqrt(h**2 - w**2 + l**2)\n    z = p * (1/2) + q * (1/2)\n    x = r * (1/2)\n    y = h * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef triangle_xy(w,h,l,r):\n    '''\n    Write a function to find the triangle.\n    '''\n    p = math.sqrt(w**2 + h**2 + l**2)\n    q = math.sqrt(w**2 - h**2 - l**2)\n    r = math.sqrt(h**2 - w**2 + l**2)\n    z = p * (1/2) + q * (1/2)\n    x = r * (1/2)\n    y = h * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef square_x(w,h,l,r):\n    '''\n    Write a function to find the square (x,y) coordinates of a triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    x = a * (1/2)\n    y = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef square_y(w,h,l,r):\n    '''\n    Write a function to find the square (x,y) coordinates of a triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    x = a * (1/2)\n    y = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef square_z(w,h,l,r):\n    '''\n    Write a function to find the square (x,y) coordinates of a triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    z = a * (1/2)\n    x = b * (1/2)\n    y = c * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef square_xy(w,h,l,r):\n    '''\n    Write a function to find the square (x,y) coordinates of a triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = l / 2\n    d = r / 2\n    x = a * (1/2)\n    y = b * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef triangle_z(w,h,l,r):\n    '''\n    Write a function to find the triangle.\n    '''\n    p = math.sqrt(w**2 + h**2 + l**2)\n    q = math.sqrt(w**2 - h**2 - l**2)\n    r = math.sqrt(h**2 - w**2 + l**2)\n    z = p * (1/2) + q * (1/2)\n    x = r * (1/2)\n    y = h * (1/2)\n    z = 0.5 * (x + y + z)\n    return z\ndef triangle_xy(w,h,l,r):\n    '"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = (w*h)/2\n    a = math.sqrt(w**2+h**2)\n    c = b/a\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/2\n    b = h/2\n    c = (a+b)/2\n    triangle_area = math.sqrt(w*h)\n    return (a,b,c)\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a = w/2\n    b = h/2\n    c = (a-b)/2\n    triangle_area = math.sqrt(w*h)\n    return (a,b,c)\n    \ndef counterclockwiseangle(w,h):\n    '''\n    Write a function to find the third side of a counter clockwise triangle.\n    '''\n    a = w/2\n    b = h/2\n    c = (a-b)/2\n    area = math.sqrt(w*h)\n    return (a,b,c)\n    \ndef parallelogram(a,b,c):\n    '''\n    Write a function to determine the area of a parallelogram given its sides.\n    '''\n    return (a*b*c)**0.5\n    \ndef parallelogram_no_edge(a,b,c):\n    '''\n    Write a function to determine the area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    \ndef parallelogram_no_face(a,b,c):\n    '''\n    Write a function to determine the area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3\n    \ndef equilateraltriangle(a,b,c):\n    '''\n    Write a function to determine the area of an equilateral triangle given its sides.\n    '''\n    return (a*c)**0.5 + (b*c)**0.5\n    \ndef equilateraltriangle_no_edge(a,b,c):\n    '''\n    Write a function to determine the area of an equilateral triangle given its sides.\n    '''\n    return equilateraltriangle(a,b,c)/2\n    \ndef equilateraltriangle_no_face(a,b,c):\n    '''\n    Write a function to determine the area of an equilateral triangle given its sides.\n    '''\n    return equilateraltriangle(a,b,c)/2*3\n    \ndef sphere(w,h):\n    '''\n    Write a function to determine the volume of a sphere given its sides.\n    '''\n    return (w*h)/(3*math.pi)\n    \ndef sphere_no_edge(w,h):\n    '''\n    Write a function to determine the volume of a sphere given its sides.\n    '''\n    return sphere(w,h)/2\n    \ndef sphere_no_face(w,h):\n    '''\n    Write a function to determine the volume of a sphere given its sides.\n    '''\n    return sphere(w,h)/2*3\n    \ndef cube(w,h):\n    '''\n    Write a function to determine the volume of a cube given its sides.\n    '''\n    return (w*h*h)/6\n    \ndef cube_no_edge(w,h):\n    '''\n    Write a function to determine the volume of a cube given its sides.\n    '''\n    return cube(w,h)/2\n    \ndef cube_no_face(w,h):\n    '''\n    Write a function to determine the volume of a cube given its sides.\n    '''\n    return cube(w,h)/2*3\n    \ndef rhombus(w,h):\n    '''\n    Write a function to determine the volume of a rhombus given its sides.\n    '''\n    return (w*h*h)/4\n    \ndef rhombus_no_edge(w,h):\n    '''\n    Write a function to determine the volume of a rhombus given its sides.\n    '''\n    return rhombus(w,h)/2\n    \ndef rhombus_no_face(w,h):\n    '''\n    Write a function to determine the volume of a rhombus given its sides.\n    '''\n    return rhombus(w,h)/2*3\n    \ndef parallelogram_check(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    \ndef parallelogram_check_no_edge(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3\n    \ndef parallelogram_check_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3*3\n    \ndef parallelogram_no_edge(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    \ndef parallelogram_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3\n    \ndef parallelogram_check_no_edge_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    \ndef parallelogram_no_face_no_edge(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3*3\n    \ndef parallelogram_check_no_edge_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    \ndef parallelogram_no_edge_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3*3\n    \ndef parallelogram_check_no_face_no_edge(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    \ndef parallelogram_no_face_no_edge(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3*3\n    \ndef parallelogram_check_no_edge_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    \ndef parallelogram_no_edge_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3*3\n    \ndef parallelogram_no_face_no_edge(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2*3\n    \ndef parallelogram_check_no_edge_no_face(a,b,c):\n    '''\n    This function is used to determine the total area of a parallelogram given its sides.\n    '''\n    return parallelogram(a,b,c)/2\n    "
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #returns side length of triangle\n    return math.sqrt(math.pow(w,2) + math.pow(h,2))\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #returns side length of triangle\n    return math.sqrt(math.pow(w,2) + math.pow(h,2))\ndef triangle(w,h,n):\n    '''\n    Write a function to find the triangle.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    s3 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    return side1,side2,side3\ndef triangle_side(w,h,n):\n    '''\n    Write a function to find the triangle side.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    s3 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    side4 = n*n\n    return side1,side2,side3,side4\ndef square(w,h,n):\n    '''\n    Write a function to find the square.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = n*n\n    return side1,side2,side3\ndef square_side(w,h,n):\n    '''\n    Write a function to find the square side.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = n*n\n    side4 = n*n\n    return side1,side2,side3,side4\ndef square_side2(w,h,n):\n    '''\n    Write a function to find the square side.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = n*n\n    side4 = n*n\n    side5 = n*n\n    side6 = n*n\n    return side1,side2,side3,side4,side5,side6\ndef triangle_side_sq(w,h,n):\n    '''\n    Write a function to find the triangle side sq.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_rightangle(w,h)\n    s3 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    side4 = n*n\n    side5 = n*n\n    side6 = n*n\n    return side1,side2,side3,side4,side5,side6\ndef triangle_side_sq2(w,h,n):\n    '''\n    Write a function to find the triangle side sq.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_rightangle(w,h)\n    s3 = otherside_leftangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    side4 = n*n\n    side5 = n*n\n    side6 = n*n\n    side7 = n*n\n    side8 = n*n\n    side9 = n*n\n    return side1,side2,side3,side4,side5,side6,side7,side8,side9,side10\ndef triangle_side_sq3(w,h,n):\n    '''\n    Write a function to find the triangle side sq.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    s3 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    side4 = n*n\n    side5 = n*n\n    side6 = n*n\n    side7 = n*n\n    side8 = n*n\n    side9 = n*n\n    side10 = n*n\n    side11 = n*n\n    return side1,side2,side3,side4,side5,side6,side7,side8,side9,side10,side11\ndef triangle_side_sq4(w,h,n):\n    '''\n    Write a function to find the triangle side sq.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    s3 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    side4 = n*n\n    side5 = n*n\n    side6 = n*n\n    side7 = n*n\n    side8 = n*n\n    side9 = n*n\n    side10 = n*n\n    side11 = n*n\n    side12 = n*n\n    side13 = n*n\n    return side1,side2,side3,side4,side5,side6,side7,side8,side9,side10,side11,side12,side13\ndef triangle_side_sq5(w,h,n):\n    '''\n    Write a function to find the triangle side sq.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    s3 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    side4 = n*n\n    side5 = n*n\n    side6 = n*n\n    side7 = n*n\n    side8 = n*n\n    side9 = n*n\n    side10 = n*n\n    side11 = n*n\n    side12 = n*n\n    side13 = n*n\n    side14 = n*n\n    side15 = n*n\n    side16 = n*n\n    side17 = n*n\n    side18 = n*n\n    return side1,side2,side3,side4,side5,side6,side7,side8,side9,side10,side11,side12,side13,side14,side15,side16,side17,side18\ndef triangle_side_sq6(w,h,n):\n    '''\n    Write a function to find the triangle side sq.\n    '''\n    #returns side lengths of the three sides\n    s1 = otherside_rightangle(w,h)\n    s2 = otherside_leftangle(w,h)\n    s3 = otherside_rightangle(w,h)\n    side1 = s1*n\n    side2 = s2*n\n    side3 = s3*n\n    side4 = n*n\n    side5 = n*n\n    side6 = n*n\n    side7 = n*n\n    side8 = n*n\n    side9 = n*"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt((w**2 + h**2) / (2 * w * h))\n    return side\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\ndef triangle_bezier(a, b, c):\n    '''\n    Write a function to find the points of a triangle, the first half,\n    the second half and the third half.\n    '''\n    '''\n    Top left point, radius 1, corner\n    Top right point, radius 2, corner\n    Bottom left point, radius 3, corner\n    Bottom right point, radius 4, corner\n    '''\n    x = (a[0]-b[0])/(a[1]-b[1])\n    y = (a[1]-b[1])/(a[0]-b[0])\n    z = (a[1]-c[1])/(a[0]-b[0])\n    x0 = x\n    y0 = y\n    z0 = z\n    x1 = x\n    y1 = y\n    z1 = z\n    x2 = x\n    y2 = y\n    z2 = z\n    x3 = x\n    y3 = y\n    z3 = z\n    return [x0,y0,z0], [x1,y1,z1], [x2,y2,z2], [x3,y3,z3]\ndef triangle_bezier_z(a,b,c,d):\n    '''\n    Write a function to find the points of a triangle, the first half,\n    the second half and the third half.\n    '''\n    '''\n    Top left point, radius 1, corner\n    Top right point, radius 2, corner\n    Bottom left point, radius 3, corner\n    Bottom right point, radius 4, corner\n    '''\n    x0 = (a[0]-b[0])/(a[1]-b[1])\n    x1 = (a[0]-c[0])/(a[1]-b[0])\n    x2 = (a[0]-d[0])/(a[1]-b[0])\n    y0 = (a[1]-b[1])/(a[0]-b[0])\n    y1 = (a[1]-c[1])/(a[0]-b[0])\n    y2 = (a[1]-d[1])/(a[0]-b[0])\n    y3 = (a[1]-d[1])/(a[0]-c[0])\n    return [x0,y0,x2], [x1,y1,x2], [x2,y2,x2], [x1,y1,x1], [x0,y0,x0]\ndef triangle_bezier_z_z(a,b,c,d):\n    '''\n    Write a function to find the points of a triangle, the first half,\n    the second half and the third half.\n    '''\n    '''\n    Top left point, radius 1, corner\n    Top right point, radius 2, corner\n    Bottom left point, radius 3, corner\n    Bottom right point, radius 4, corner\n    '''\n    x0 = (a[0]-b[0])/(a[1]-b[1])\n    x1 = (a[0]-c[0])/(a[1]-b[0])\n    x2 = (a[0]-d[0])/(a[1]-b[0])\n    y0 = (a[1]-b[1])/(a[0]-b[0])\n    y1 = (a[1]-c[1])/(a[0]-b[0])\n    y2 = (a[1]-d[1])/(a[0]-b[0])\n    y3 = (a[1]-d[1])/(a[0]-c[0])\n    return [x0,y0,x2], [x1,y1,x2], [x2,y2,x2], [x1,y1,x1], [x0,y0,x0]\ndef triangle_bezier_z_z2(a,b,c,d):\n    '''\n    Write a function to find the points of a triangle, the first half,\n    the second half and the third half.\n    '''\n    '''\n    Top left point, radius 1, corner\n    Top right point, radius 2, corner\n    Bottom left point, radius 3, corner\n    Bottom right point, radius 4, corner\n    '''\n    x0 = (a[0]-b[0])/(a[1]-b[1])\n    x1 = (a[0]-c[0])/(a[1]-b[0])\n    x2 = (a[0]-d[0])/(a[1]-b[0])\n    y0 = (a[1]-b[1])/(a[0]-b[0])\n    y1 = (a[1]-c[1])/(a[0]-b[0])\n    y2 = (a[1]-d[1])/(a[0]-b[0])\n    y3 = (a[1]-d[1])/(a[0]-c[0])\n    return [x0,y0,x2], [x1,y1,x2], [x2,y2,x2], [x1,y1,x1], [x0,y0,x0]\ndef triangle_bezier_z_z2_z2(a,b,c,d):\n    '''\n    Write a function to find the points of a triangle, the first half,\n    the second half and the third half.\n    '''\n    '''\n    Top left point, radius 1, corner\n    Top right point, radius 2, corner\n    Bottom left point, radius 3, corner\n    Bottom right point, radius 4, corner\n    '''\n    x0 = (a[0]-b[0])/(a[1]-b[1])\n    x1 = (a[0]-c[0])/(a[1]-b[0])\n    x2 = (a[0]-d[0])/(a[1]-b[0])\n    y0 = (a[1]-b[1])/(a[0]-b[0])\n    y1 = (a[1]-c[1])/(a[0]-b[0])\n    y2 = (a[1]-d[1])/(a[0]-b[0])\n    y3 = (a[1]-d[1])/(a[0]-c[0])\n    return [x0,y0,x2], [x1,y1,x2], [x2,y2,x2], [x1,y1,x1], [x0,y0,x0]\ndef triangle_bezier_z_z2_z(a,b,c,d):\n    '''\n    Write a function to find the points of a triangle, the first half,\n    the second half and the third half.\n    '''\n    '''\n    Top left point, radius 1, corner\n    Top right point, radius 2, corner\n    Bottom left point, radius 3, corner\n    Bottom right point, radius 4, corner\n    '''\n    x0 = (a[0]-b[0])/(a[1]-b[1])\n    x1 = (a[0]-c[0])/(a[1]-b[0])\n    x2 = (a[0]-d[0])/(a[1]-b[0])\n    y0 = (a[1]-b[1])/(a[0]-b[0])\n    y1 = (a[1]-c[1])/(a[0]-b[0])\n    y2 = (a[1]-d[1])/(a[0]-b[0])\n    y3 = (a[1]-d[1])/(a[0]-c[0])\n    return [x0,y0,x2], [x1,y1,x2], [x2,y2,x2], [x1,y1,x1], [x0,y0,x0]\ndef triangle_bezier_z_z2_z2(a,b,c,d):\n    '''\n    Write a function to find the points of a triangle, the first half,\n    the second half and the third half.\n    '''\n    '''\n    Top left point, radius 1, corner\n    Top right point, radius 2, corner\n    Bottom left point, radius 3, corner\n    Bottom right point, radius 4, corner\n    '''\n    x0 = (a[0]-b[0])/(a["
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = 2 * (w+h)/3\n    return math.tan(c)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Check input values and convert to float\n    w,h = float(w),float(h)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # define variables\n    a = h*0.5\n    b = (2*h + w)\n    c = 2*h\n    # draw triangle with x axis\n    draw_triangle(a,b,c)\n    # draw the line joining point from the triangle to (0,0)\n    p0 = (0,0)\n    p1 = (w,0)\n    p2 = (w,h)\n    p3 = (0,h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (0,0) to (0,h)\n    p0 = (0,0)\n    p1 = (0,a)\n    p2 = (w,a)\n    p3 = (0,a)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (a,0) to (h,a)\n    p0 = (a,0)\n    p1 = (a,h)\n    p2 = (h,h)\n    p3 = (a,h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,0) to (2*h,h)\n    p0 = (h,0)\n    p1 = (2*h,h)\n    p2 = (2*h,2*h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,0) to (2*h,h)\n    p0 = (2*h,0)\n    p1 = (2*h,h)\n    p2 = (2*h,h)\n    p3 = (2*h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,h) to (2*h,2*h)\n    p0 = (2*h,2*h)\n    p1 = (2*h,2*h)\n    p2 = (2*h,2*h)\n    p3 = (2*h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,2*h) to (h,2*h)\n    p0 = (h,2*h)\n    p1 = (h,2*h)\n    p2 = (h,h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,2*h) to (h,h)\n    p0 = (h,2*h)\n    p1 = (h,h)\n    p2 = (h,h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,h) to (h,2*h)\n    p0 = (h,2*h)\n    p1 = (h,h)\n    p2 = (h,h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,2*h) to (2*h,h)\n    p0 = (h,2*h)\n    p1 = (2*h,h)\n    p2 = (2*h,2*h)\n    p3 = (2*h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,h) to (2*h,2*h)\n    p0 = (2*h,2*h)\n    p1 = (2*h,2*h)\n    p2 = (2*h,2*h)\n    p3 = (2*h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,2*h) to (2*h,h)\n    p0 = (2*h,2*h)\n    p1 = (2*h,h)\n    p2 = (2*h,h)\n    p3 = (2*h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,2*h) to (h,2*h)\n    p0 = (2*h,2*h)\n    p1 = (h,2*h)\n    p2 = (h,h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,2*h) to (h,h)\n    p0 = (h,2*h)\n    p1 = (h,h)\n    p2 = (h,h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,h) to (h,2*h)\n    p0 = (h,2*h)\n    p1 = (h,h)\n    p2 = (h,h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,h) to (2*h,2*h)\n    p0 = (2*h,2*h)\n    p1 = (2*h,2*h)\n    p2 = (2*h,2*h)\n    p3 = (2*h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (2*h,2*h) to (2*h,h)\n    p0 = (2*h,2*h)\n    p1 = (2*h,h)\n    p2 = (2*h,h)\n    p3 = (2*h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,2*h) to (h,h)\n    p0 = (h,2*h)\n    p1 = (h,h)\n    p2 = (h,h)\n    p3 = (h,2*h)\n    # draw line from (p0,p1) to (p2,p3)\n    draw_line(p0,p1,p2,p3)\n    # draw triangle from (h,h) to (2*h,2*h)\n    p0 = (h,2"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for i in listval:\n        if i>maxval:\n            maxval=i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for x in listval:\n        if x > max_val:\n            max_val = x\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # add in case this is a list of strings\n    if type(listval) is list:\n        for x in listval:\n            if x > max_val(listval):\n                max_val = x\n    # print(max_val)\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=listval[0]\n    for x in listval:\n        if x>max:\n            max=x\n    return max\n    \ndef reverse_string(string):\n    '''\n    Given a string, reverse the string.\n    '''\n    temp=\"\"\n    for x in string:\n        temp+=x\n    return temp[::-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for val in listval:\n        if maxval < val:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = -1\n    for val in listval:\n        if max < val:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number%i == 0:\n            divisors.append(i)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number % 2 == 0:\n        return number\n    else:\n        return number * sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # get the first number divisible by one\n    div_1 = next_divisible(number, 1)\n    # count all divisors\n    count = 0\n    # iterate through\n    for div in div_1:\n        # get the number that's divisible by div\n        num = div * number\n        # if div is not divisible, increment count\n        if not num % div:\n            count += 1\n    # return the result\n    return count\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    return number * number - sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        if number < 0:\n            return -number\n        else:\n            x = 0\n            for i in range(1, int(math.sqrt(number)) + 1):\n                if number % i == 0:\n                    x += i\n            return x\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    num = 0\n    for x in range(1,number):\n        if number % x == 0:\n            num += x\n            \n    return num\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number==0:\n        return 1\n    elif number==1:\n        return 1\n    elif number%2==0:\n        return 2+sum_div(number//2)\n    else:\n        return sum_div(number-1)+2+sum_div(number//2)\n        \ndef sum_of_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number==0:\n        return 1\n    elif number==1:\n        return 1\n    elif number%2==0:\n        return 2+sum_of_div(number//2)\n    else:\n        return sum_of_div(number-1)+2+sum_of_div(number//2)\n    \ndef series_to_dec(number):\n    '''\n    Write a function to convert a series of digits to a decimal number.\n    '''\n    if number==0:\n        return 1\n    elif number==1:\n        return 1\n    elif number%2==0:\n        return 2+series_to_dec(number//2)\n    else:\n        return 2*series_to_dec(number-1)+1+series_to_dec(number//2)\n    \ndef number_to_long(number):\n    '''\n    Write a function to convert a number to a long.\n    '''\n    if number==1:\n        return 1\n    elif number==2:\n        return 2\n    elif number%2==0:\n        return 3+number_to_long(number//2)\n    else:\n        return 3*number_to_long(number-1)+1+number_to_long(number//2)\n    \ndef poly_number(poly):\n    '''\n    Write a function that returns the sum of the number itself and the sum of its square.\n    '''\n    if poly==0:\n        return 1\n    elif poly==1:\n        return 1\n    elif poly==2:\n        return 2\n    elif poly%2==0:\n        return 3+poly_number(poly//2)\n    else:\n        return 2*poly_number(poly-1)+1+poly_number(poly//2)\n    \ndef is_palindrome(number):\n    '''\n    Write a function that checks whether a number is a palindrome or not.\n    '''\n    if number==0:\n        return True\n    elif number==1:\n        return False\n    elif number%2==0:\n        return is_palindrome(number//2)\n    else:\n        return is_palindrome(number-1)\n        \ndef is_triangle(number):\n    '''\n    Write a function that checks whether a number is a triangle or not.\n    '''\n    if number==0:\n        return True\n    elif number==1:\n        return False\n    elif number%2==0:\n        return is_triangle(number//2)\n    else:\n        return is_triangle(number-1)\n        \ndef remove_redundancy(n):\n    '''\n    Write a function that removes all the duplicates from a number.\n    '''\n    if n==1:\n        return 0\n    elif n%2==0:\n        return 1+remove_redundancy(n//2)\n    else:\n        return 2*remove_redundancy(n-1)+1\n    \ndef count_occurrences(list, element):\n    '''\n    Write a function that returns a list with the count of occurrences of an element in a given list.\n    '''\n    if element in list:\n        return list.count(element)\n    else:\n        return 0\n    \ndef is_prime_number(number):\n    '''\n    Write a function that checks whether a number is a prime number or not.\n    '''\n    if number==0:\n        return True\n    elif number==1:\n        return False\n    elif number%2==0:\n        return False\n    else:\n        for i in range(3,int(sqrt(number)+1),2):\n            if number%i==0:\n                return False\n        return True\n    \ndef not_prime_number(number):\n    '''\n    Write a function that checks whether a number is a prime number or not.\n    '''\n    if number==0:\n        return True\n    elif number==1:\n        return False\n    elif number%2==0:\n        return True\n    else:\n        for i in range(3,int(sqrt(number)+1),2):\n            if number%i==0:\n                return False\n        return False\n        \ndef mod_exp(number, modulo):\n    '''\n    Write a function that returns the modular exponent of a number.\n    '''\n    if modulo==1:\n        return number\n    elif number%modulo==0:\n        return mod_exp(number//modulo, modulo)\n    else:\n        return mod_exp(number-(number%modulo), modulo)\n    \ndef mod_exp_sum(number):\n    '''\n    Write a function that returns the modular exponent of a number.\n    '''\n    if number==0:\n        return 1\n    elif number%2==0:\n        return 2+mod_exp_sum(number//2)\n    else:\n        return 2*mod_exp_sum(number-1)+1+mod_exp_sum(number//2)\n    \ndef first_power(number):\n    '''\n    Write a function that returns the first power of a number.\n    '''\n    if number==1:\n        return 1\n    elif number==2:\n        return 2\n    elif number%2==0:\n        return 3+first_power(number//2)\n    else:\n        return 2*first_power(number-1)+1+first_power(number//2)\n    \ndef second_power(number):\n    '''\n    Write a function that returns the second power of a number.\n    '''\n    if number==1:\n        return 1\n    elif number==2:\n        return 2\n    elif number%2==0:\n        return 3+second_power(number//2)\n    else:\n        return 2*second_power(number-1)+1+second_power(number//2)\n    \ndef mod_exp_sum_rec(number):\n    '''\n    Write a function that returns the modular exponent of a number.\n    '''\n    if number==1:\n        return 1\n    elif number==2:\n        return 2\n    elif number%2==0:\n        return 3+mod_exp_sum_rec(number//2)\n    else:\n        return 2*mod_exp_sum_rec(number-1)+1+mod_exp_sum_rec(number//2)\n    \ndef mod_exp_sum(number):\n    '''\n    Write a function that returns the modular exponent of a number.\n    '''\n    if number==1:\n        return 1\n    elif number==2:\n        return 2\n    elif number%2==0:\n        return 3+mod_exp_sum(number//2)\n    else:\n        return 2*mod_exp_sum(number-1)+1+mod_exp_sum(number//2)\n    \ndef mod_exp_sum_rec(number):\n    '''\n    Write a function that returns the modular exponent of a number.\n    '''\n    if number==1:\n        return 1\n    elif number==2:\n        return 2\n    elif number%2==0:\n        return 3+mod_exp_sum_rec(number//2)\n    else:\n        return 2*mod_exp_sum_rec(number-1)+1+mod_exp_sum_rec(number//2)\n    \ndef modular_exp(number, modulo):\n    '''\n    Write a function that returns the modular exponent of a number.\n    '''\n    if modulo==1:\n        return number\n    elif number%modulo==0:\n        return modular_exp(number//modulo, modulo)\n    else:\n        return modular_exp(number-(number%modulo), modulo)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Loop through the array and store the counts\n    inv_count = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Code here\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count += 1\n            if Inv_Count == 2:\n                print(\"Number of inversions : \", Inv_Count)\n                break\n    \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    for i in range(0,len(arr)-1):\n        if arr[i]>arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    for i in range(1, len(arr)): \n        j = arr[i] \n        k = i \n        while j > 0 and k > j: \n            if arr[k - 1] > arr[k]: \n                arr[k], arr[k - 1] = arr[k - 1], arr[k] \n                k -= 1\n            else: \n                j -= 1\n    return arr\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)): \n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]: \n                inversions = inversions + 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr:\n        return 0\n    last = arr[len(arr)-1]\n    invCount = 0\n    for i in range(len(arr)-1):\n        if arr[i] > last:\n            invCount += 1\n        elif arr[i] < last:\n            invCount -= 1\n        elif arr[i] == last:\n            invCount += 1\n        last = arr[i]\n    return invCount\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(1,len(arr)):\n        for j in range(0,i):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    i = 0\n    j = 0\n    inv_count = 0\n    while i < n-1:\n        if arr[i] > arr[i+1]:\n            inv_count += 1\n            i += 1\n        else:\n            i += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # List initialization\n    inv = []\n    count = 0\n    \n    # Iterate through the array\n    for num in arr:\n        if num > 0:\n            inv.append(num)\n        if num == 0:\n            count += 1\n    \n    # Count the inversions in the array\n    for i in range(len(inv)-1, 0, -1):\n        if inv[i] > inv[i-1]:\n            count += 1\n    \n    # Return the count\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            count += 1\n            return count\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    if isinstance(list1, list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)==str:\n        return list1\n    else:\n        list2=[]\n        for elem in list1:\n            if type(elem)==str:\n                list2.append(elem)\n            else:\n                list2.extend(flatten_list(elem))\n        return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(list1, level):\n        # base case\n        if not list1:\n            return []\n        # base case\n        if not list1[0]:\n            return flatten(list1[1:], level + 1)\n        # if list1[0] has children, flatten the sub-lists\n        else:\n            return flatten(list1[0], level + 1) + flatten(list1[1:], level + 1)\n    return flatten(list1, 0)\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"Input should be list\")\n    else:\n        for item in list1:\n            if not isinstance(item, list):\n                raise TypeError(\"Each element of the list must be a list.\")\n            else:\n                flatten_list(item)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        out = []\n        for item in list1:\n            if type(item) == list:\n                for i in flatten_list(item):\n                    out.append(i)\n            else:\n                out.append(item)\n        return out\n    else:\n        return [list1]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list = flattened_list + flatten_list(item)\n        elif type(item) == dict:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        new_list = []\n        for item in list1:\n            if type(item) == list:\n                new_list.extend(flatten_list(item))\n            else:\n                new_list.append(item)\n        return new_list\n    else:\n        return list1\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_tuple = []\n    for item in stdata:\n        for tup in item:\n            max_aggregate_tuple.append(tup)\n    return max(max_aggregate_tuple)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = list(stdata)\n    stdata = sorted(stdata, key = lambda x: x[0])\n    return max(map(lambda x: x[1], stdata))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pk_list = []\n    vk_list = []\n    aggregate = []\n    for _,v in stdata:\n        for k,vk in v.items():\n            if vk not in vk_list:\n                vk_list.append(vk)\n            pk_list.append(k)\n    for k,vk in enumerate(pk_list):\n        if vk in vk_list:\n            aggregate.append((vk,1))\n            vk_list.remove(vk)\n        else:\n            aggregate.append((vk,0))\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    output=[]\n    max_aggregate=0\n    for line in stdata:\n        for w in line:\n            if w in ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']:\n                output.append(0)\n            else:\n                output.append(1)\n    output=[output.index(x) for x in output]\n    return max(output)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = defaultdict(lambda:0)\n    if type(stdata)!= dict:\n        return None\n    for key, value in stdata.items():\n        stdata[key] = value if type(value) == int else value*2\n    return max(stdata.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = 0\n    max_key = None\n    for key in stdata:\n        if key[1] > max_value:\n            max_value = key[1]\n            max_key = key\n    return max_key\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    temp_dict = defaultdict(list)\n    for (item, _) in stdata:\n        temp_dict[item].append(item)\n    return max(temp_dict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    for item in stdata:\n        max_aggregate_list.append(max(item))\n    return max(max_aggregate_list)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dict_agg = defaultdict(int)\n    for tup in stdata:\n        dict_agg[tup[1]] += tup[0]\n    return max(dict_agg, key = dict_agg.get)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    my_tuple=stdata.pop()\n    my_tuple=(my_tuple[0], my_tuple[1], my_tuple[2])\n    stdata.append(my_tuple)\n    aggregate=0\n    \n    for i in stdata:\n        if i[0]>aggregate:\n            aggregate=i[0]\n    return aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #Code here\n    total=0\n    #From n-th bin, compute sum of first 2^(n-1)/2 or (2^n-1)/2 bits\n    for i in range(n):\n        total+=int(2**i/2)\n    #Add all values that are higher than 2^n/2 to the array\n    fib=[0,1]\n    for i in range(n+1):\n        if fib[i]>2**i/2:\n            fib.append(fib[i])\n        else:\n            continue\n    for i in range(len(fib)-1):\n        total+=fib[i+1]\n    return total\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Code here\n    n = n + 1\n    if n <= 1: \n        return n\n    s1 = bin(n)[2:]\n    s2 = bin(n)[2:]\n    temp = 0\n    count = 0\n    for i in range(len(s2)):\n        if (s1[i] == '0' and s2[len(s2)-i-1] == '1') or (s2[len(s2)-i-1] == '1' and s1[i] == '0') or (s1[i] == '1' and s2[len(s2)-i-1] == '1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return \"0 should be greater than 0\"\n    # set of binary numbers\n    binary = set(bin(i)[2:].zfill(n) for i in range(2**n))\n    # filter\n    filtered = list(filter(lambda x: x in binary, range(2**n)))\n    return sum(filtered)\n    \ndef binary_num_count_2(n):\n    '''\n    Write a function to count the number of 2's in an integer n.\n    '''\n    if n < 0:\n        return \"0 should be greater than 0\"\n    # set of binary numbers\n    binary = set(bin(i)[2:].zfill(n) for i in range(2**n))\n    # filter\n    return sum(filter(lambda x: x in binary, range(2**n)))\n    \nif __name__ == \"__main__\":\n    print(binary_num_count_1(1))\n    print(binary_num_count_1(2))\n    print(binary_num_count_1(3))\n    print(binary_num_count_1(4))\n    print(binary_num_count_1(5))\n    print(binary_num_count_1(6))\n    print(binary_num_count_2(1))\n    print(binary_num_count_2(2))\n    print(binary_num_count_2(3))\n    print(binary_num_count_2(4))\n    print(binary_num_count_2(5))\n    print(binary_num_count_2(6))\n    \n    print(\"Binary count of 1: {}\".format(count_binary_seq(1)))\n    print(\"Binary count of 2: {}\".format(count_binary_seq(2)))\n    print(\"Binary count of 3: {}\".format(count_binary_seq(3)))\n    print(\"Binary count of 4: {}\".format(count_binary_seq(4)))\n    print(\"Binary count of 5: {}\".format(count_binary_seq(5)))\n    print(\"Binary count of 6: {}\".format(count_binary_seq(6)))\n    \n    print(\"Binary sum of 1: {}\".format(binary_num_count_1(1)))\n    print(\"Binary sum of 2: {}\".format(binary_num_count_2(2)))\n    print(\"Binary sum of 3: {}\".format(binary_num_count_3(3)))\n    print(\"Binary sum of 4: {}\".format(binary_num_count_4(4)))\n    print(\"Binary sum of 5: {}\".format(binary_num_count_5(5)))\n    print(\"Binary sum of 6: {}\".format(binary_num_count_6(6)))\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    d = {\n        1:1,\n        2:1,\n        3:1,\n        4:1,\n        5:1,\n        6:1,\n        7:1,\n        8:1,\n        9:1,\n        10:1,\n        11:1,\n        12:1,\n        13:1,\n        14:1,\n        15:1,\n        16:1,\n        17:1,\n        18:1,\n        19:1,\n        20:1,\n        21:1,\n        22:1,\n        23:1,\n        24:1,\n        25:1,\n        26:1,\n        27:1,\n        28:1,\n        29:1,\n        30:1,\n        31:1,\n        32:1,\n        33:1,\n        34:1,\n        35:1,\n        36:1,\n        37:1,\n        38:1,\n        39:1,\n        40:1,\n        41:1,\n        42:1,\n        43:1,\n        44:1,\n        45:1,\n        46:1,\n        47:1,\n        48:1,\n        49:1,\n        50:1,\n        51:1,\n        52:1,\n        53:1,\n        54:1,\n        55:1,\n        56:1,\n        57:1,\n        58:1,\n        59:1,\n        60:1,\n        61:1,\n        62:1,\n        63:1,\n        64:1,\n        65:1,\n        66:1,\n        67:1,\n        68:1,\n        69:1,\n        70:1,\n        71:1,\n        72:1,\n        73:1,\n        74:1,\n        75:1,\n        76:1,\n        77:1,\n        78:1,\n        79:1,\n        80:1,\n        81:1,\n        82:1,\n        83:1,\n        84:1,\n        85:1,\n        86:1,\n        87:1,\n        88:1,\n        89:1,\n        90:1,\n        91:1,\n        92:1,\n        93:1,\n        94:1,\n        95:1,\n        96:1,\n        97:1,\n        98:1,\n        99:1,\n        100:1,\n        101:1,\n        102:1,\n        103:1,\n        104:1,\n        105:1,\n        106:1,\n        107:1,\n        108:1,\n        109:1,\n        110:1,\n        111:1,\n        112:1,\n        113:1,\n        114:1,\n        115:1,\n        116:1,\n        117:1,\n        118:1,\n        119:1,\n        120:1,\n        121:1,\n        122:1,\n        123:1,\n        124:1,\n        125:1,\n        126:1,\n        127:1,\n        128:1,\n        129:1,\n        130:1,\n        131:1,\n        132:1,\n        133:1,\n        134:1,\n        135:1,\n        136:1,\n        137:1,\n        138:1,\n        139:1,\n        140:1,\n        141:1,\n        142:1,\n        143:1,\n        144:1,\n        145:1,\n        146:1,\n        147:1,\n        148:1,\n        149:1,\n        150:1,\n        151:1,\n        152:1,\n        153:1,\n        154:1,\n        155:1,\n        156:1,\n        157:1,\n        158:1,\n        159:1,\n        160:1,\n        161:1,\n        162:1,\n        163:1,\n        164:1,\n        165:1,\n        166:1,\n        167:1,\n        168:1,\n        169:1,\n        170:1,\n        171:1,\n        172:1,\n        173:1,\n        174:1,\n        175:1,\n        176:1,\n        177:1,\n        178:1,\n        179:1,\n        180:1,\n        181:1,\n        182:1,\n        183:1,\n        184:1,\n        185:1,\n        186:1,\n        187:1,\n        188:1,\n        189:1,\n        190:1,\n        191:1,\n        192:1,\n        193:1,\n        194:1,\n        195:1,\n        196:1,\n        197:1,\n        198:1,\n        199:1,\n        200:1,\n        201:1,\n        202:1,\n        203:1,\n        204:1,\n        205:1,\n        206:1,\n        207:1,\n        208:1,\n        209:1,\n        210:1,\n        211:1,\n        212:1,\n        213:1,\n        214:1,\n        215:1,\n        216:1,\n        217:1,\n        218:1,\n        219:1,\n        220:1,\n        221:1,\n        222:1,\n        223:1,\n        224:1,\n        225:1,\n        226:1,\n        227:1,\n        228:1,\n        229:1,\n        230:1,\n        231:1,\n        232:1,\n        233:1,\n        234:1,\n        235:1,\n        236:1,\n        237:1,\n        238:1,\n        239:1,\n        240:1,\n        241:1,\n        242:1,\n        243:1,\n        244:1,\n        245:1,\n        246:1,\n        247:1,\n        248:1,\n        249:1,\n        250:1,\n        251:1,\n        252:1,\n        253:1,\n        254:1,\n        255:1,\n        256:1,\n        257:1,\n        258:1,\n        259:1,\n        260:1,\n        261:1,\n        262:1,\n        263:1,\n        264:1,\n        265:1,\n        266:1,\n        267:1,\n        268:1,\n        269:1,\n        270:1,\n        271:1,\n        272:1,\n        273:1,\n        274:1,\n        275:1,\n        276:1,\n        277:1,\n        278:1,\n        279:1,\n        280:1,\n        281:1,\n        282:1,\n        283:1,\n        284:1,\n        285:1,\n        286:1,\n        287:1,\n        288:1,\n        289:1,\n        290:1,\n        291:1,\n        292:1,\n        293:1,\n        294:1,\n        295:1,\n        296:1,\n        297:1,\n        298:1,\n        299:1,\n        300:1,\n        301:1,\n        302:1,\n        303:1,\n        304:1,\n        305:1,\n        306:1,\n        307:1,\n        308:1,\n        309:1,\n        310:1,\n        311:1,\n        312:1,\n        313:1,\n        314:1,\n        315:1,\n        316:1,\n        317:1,\n        318:1,\n        319:1,\n        320:1,\n        321:1,\n        322:1,\n        323:1,\n        324:1,\n        325:1,\n        326:1,\n        327:1,\n        328:1,\n        329:1,\n        330:1,\n        331:1,\n        332:1"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total = 0\n    temp = 1\n    for i in range(1, n+1):\n        total += temp\n        temp = temp*2\n    return total\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        count += (1 << i)\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # convert n into an integer and compare it to 5 bits and set bits to zero if it does not equal to 5\n    n = int(n)\n    n_bits = 5\n    n_bits_binary = 0\n    # build a bit sequence\n    # 001110000 -> 1111\n    # 111110000 -> 1101\n    # 01100000 -> 101\n    # 111100000 -> 1\n    # 111111111 -> 11\n    # 100000011 -> 1\n    # 1011100000000 -> 11\n    # 0100000011 -> 0\n    # 100000011 -> 0\n    # 101111111 -> 0\n    # 111111111 -> 0\n    # 111111111 -> 0\n    # 100000011 -> 0\n    # 1011100000000 -> 0\n    # 101111111 -> 0\n    # 111111111 -> 0\n    # 1100000011 -> 0\n    # 1101000000 -> 0\n    # 01100000 -> 0\n    # 101100001 -> 0\n    # 110100001 -> 0\n    # 01100000 -> 0\n    # 1011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 011100001 -> 0\n    # 0111000"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if(n == 0): \n        return 0\n    if(n < 0): \n        return -1\n    \n    if(n == 1): \n        return 1\n    \n    count = 0\n    temp = 2 * count\n    \n    for i in range(n): \n        temp = temp - (2 * count)\n        count += 1\n        if(temp == 0): \n            return count\n    return -1\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + int(bin(i)[2:])\n    return result\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    n = len(d)\n    if n == 0:\n        return 0\n    dp = [0 for i in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if d[j] < d[i] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return dp[-1]"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        d = d.items()\n        d = d[0]\n    return len(d)\n    \ndef dict_length(d):\n    '''\n    Write a function that returns the length of a dictionary.\n    '''\n    if type(d) == dict:\n        d = d.items()\n        d = d[0]\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth=0\n    for i in d.items():\n        depth+=1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d):\n        if type(d) is str:\n            return 0\n        if type(d) is dict:\n            depth = 0\n            for k, v in d.items():\n                if type(v) is dict:\n                    depth += depth(v)\n                else:\n                    depth += 1\n            return depth\n        if type(d) is list:\n            depth = 0\n            for k in d:\n                depth += depth(k)\n            return depth\n        else:\n            return 0\n    return depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    d = d.items()\n    d = sorted(d,key=lambda kv: kv[1])\n    for key,value in d:\n        depth += 1\n    return depth\n    \ndef dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    d = d.items()\n    d = sorted(d,key=lambda kv: kv[1])\n    for key,value in d:\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    s = d.keys()\n    s.sort()\n    if len(s) == 0:\n        return 0\n    else:\n        return 1 + dict_depth(d[s[0]])"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth_rec(depth,d):\n        if(depth ==0):\n            return 1\n        if(type(d) is dict):\n            return dict_depth_rec(depth+1,d.items())\n        if(type(d) is list):\n            return dict_depth_rec(depth+1, d[0].items()) + dict_depth_rec(depth+1,d[1:])\n    return dict_depth_rec(0,d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    i = 0\n    while d[i]!='':\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(dict_depth(value) for value in d.values()) if len(d) > 0 else 0\n    \ndef find_min_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    return 1 + min(find_min_depth(value) for value in d.values())\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #rotations: The rotations of a matrix\n    #index : The index of a particular row\n    #ranges : The ranges of the columns\n    #arr : The matrix\n    #output: Returns the value of the element\n    '''\n    if ranges[index] < ranges[index+1]:\n        arr[index+1-ranges[index]] = arr[index]\n        #print('below',index)\n        return arr[index+1-ranges[index]]\n    else :\n        print('index',index,'does not fit in a matrix')\n        return arr[index]\n    '''\n    if ranges[index] < ranges[index+1]:\n        return arr[index+1-ranges[index]]\n    else :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges[index][0],ranges[index][1]+1) :\n        if arr[i] == arr[index] :\n            break\n    else :\n        index += 1\n    for i in range(index,len(arr)):\n        if arr[i] == arr[index] :\n            break\n    else :\n        return index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) == 1:\n        return arr[ranges[0][0]:ranges[0][1]]\n    else :\n        if rotations == 0 :\n            return arr[ranges[0][0]:ranges[0][1]]\n        else :\n            index_rot = index % len(ranges)\n            return arr[ranges[index_rot][0]:ranges[index_rot][1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if i == index :\n            return arr[i]\n        elif rotations == 1 :\n            return arr[i][0]\n        elif rotations == 2 :\n            return arr[i][len(arr[i])-1]\n        elif rotations == 3 :\n            return arr[i][0]\n    return -"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        for j in range(len(ranges)) :\n            if ranges[j] > arr[i] :\n                break\n        index = i\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index > len(arr)):\n        return arr[index]\n    \n    else :\n        return find_Element(arr,ranges,rotations,index+1)\n    \ndef rotatedArray(a,k) : \n    n = len(a) \n    k = k % n \n    \n    return k \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index==len(arr)) :\n        return arr[index]\n    if(index<0) : \n        return arr[index]\n    if(ranges[0]<=index<=ranges[1]) : \n        return find_Element(arr,ranges,rotations,index-1)\n    if(ranges[1]<=index<=ranges[2]) : \n        return find_Element(arr,ranges,rotations,index+1)\n    if(ranges[2]<=index<=ranges[3]) : \n        return find_Element(arr,ranges,rotations,index-1)\n    if(ranges[3]<=index<=ranges[4]) : \n        return find_Element(arr,ranges,rotations,index+1)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr) == 0 : \n        return -1\n    elif len(arr) == 1 :\n        return arr[0]\n    if len(ranges) == 0:\n        return arr[index]\n    if len(ranges) == 1:\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #if an element does not exist\n    if ranges[0] < arr[index] <= ranges[1] :\n        return arr[index]\n    else :\n        #if a element is greater than the range\n        if ranges[0] < arr[index] <= ranges[1] :\n            #index 1 has to be in range 1,2,3,...,end\n            if index ==1 or index ==2 or index ==3 :\n                return find_Element(arr,ranges,rotations,index)\n            else :\n                return find_Element(arr,ranges,rotations,index+1)\n        #if a element is lower than the range\n        else :\n            #index 1 has to be in range 1,2,3,...,end\n            if index ==1 or index ==2 or index ==3 :\n                return find_Element(arr,ranges,rotations,index)\n            else :\n                return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        for j in range(ranges[index]) :\n            r_index = index-j\n            arr[r_index] = arr[r_index+1]\n            arr[r_index+1] = arr[r_index]\n        index+=1\n    return arr\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a=''\n    b=''\n    for word in words:\n        if word[0]=='p':\n            a=a+word[1:]\n    for word in words:\n        if word[0]=='p':\n            b=b+word[1:]\n    return a,b\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][:3], words[0][4:]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('p'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('p'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('q'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withq(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'q'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('q'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('r'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withr(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'r'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('r'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('s'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withs(words):\n    '''\n    Write a function to return two words from a list of words ending with letter's'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('s'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('t'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_witht(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 't'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('t'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('u'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withu(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'u'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('u'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withv(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'v'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('v'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withv(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'v'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('v'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withw(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'w'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('w'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withw(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'w'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('w'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withx(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'x'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('x'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withx(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'x'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('x'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withy(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'y'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('y'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withy(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'y'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('y'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('z'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withz(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'z'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('z'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withxz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'xz'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('xz'):\n            final_string += word.lower()\n    return final_string.lower()\ndef end_withxz(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'xz'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.endswith('xz'):\n            final_string += word.lower()\n    return final_string.lower()\ndef start_withqz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'qz'.\n    '''\n    final_string = \"\"\n    for word in words:\n        if word.startswith('qz'):\n            final_string +"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)-1):\n        if words[i] == 'p':\n            return (words[i+1:], words[:i])\n    else:\n        return (words[0], words[:len(words)-1])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return []\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return i, 'p'\n        \ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[-1] == 'p':\n            return i, 'p'\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return two_letters(words, 'p')\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # write your code here\n    return \" \".join(words[:1])+\"p\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_p = False\n    for word in words:\n        if start_p == True and word[0] == 'p':\n            start_p = False\n        elif start_p == False and word[0] == 'p':\n            start_p = True\n    return start_p, word[0]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 1:\n        return 0\n    if index == n:\n        return a[k]\n    if a[index] < a[index-1]:\n        return max(max_sum_increasing_subseq(a, n-1, index, k), max_sum_increasing_subseq(a, n-1, index+1, k+1))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index + 1\n    l = len(a)\n    if i >= l:\n        return 0\n    while i < l and k > a[i]:\n        i += 1\n        l -= 1\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    current_sum = 0\n    for i in range(1, n):\n        current_sum = max(current_sum, a[index + i] + k)\n    return current_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (k >= len(a)):\n        return sum(a[:k])\n    \n    start = index\n    end = len(a) - 1\n    val = 0\n    \n    for i in range(start, end):\n        val = a[i] + val\n        \n        if (val > k):\n            break\n    \n    return val\n    \ndef count_of_subseq(a, n, start, end):\n    '''\n    Write a function that returns the count of subsequences of length n from start to end.\n    '''\n    if (n < 0):\n        return 0\n    \n    if (start == end):\n        return 1\n    \n    if (n == 0):\n        return 0\n    \n    res = 0\n    for i in range(start, end + 1):\n        if (i == start):\n            res += 1\n        elif (i == end):\n            res += count_of_subseq(a, n - 1, start, i - 1)\n        elif (a[i] < a[i + 1]):\n            res += count_of_subseq(a, n - 1, i, i + 1)\n    \n    return res\n    \ndef max_sum_decreasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if (k >= len(a)):\n        return sum(a[:k])\n    \n    start = index\n    end = len(a) - 1\n    val = 0\n    \n    for i in range(start, end):\n        val = a[i] + val\n        \n        if (val > k):\n            break\n    \n    return val\n    \ndef count_of_subseq_2(a, n, start, end):\n    '''\n    Write a function that returns the count of subsequences of length n from start to end.\n    '''\n    if (n < 0):\n        return 0\n    \n    if (start == end):\n        return 1\n    \n    if (n == 0):\n        return 0\n    \n    res = 0\n    for i in range(start, end + 1):\n        if (i == start):\n            res += 1\n        elif (i == end):\n            res += count_of_subseq_2(a, n - 1, start, i - 1)\n        elif (a[i] <= a[i + 1]):\n            res += count_of_subseq_2(a, n - 1, i, i + 1)\n    \n    return res\n    \ndef max_sum_increasing_subseq_2(a, n, index, k):\n    '''\n    Write a function that returns the maximum sum of increasing subsequence of length n from start to end.\n    '''\n    if (k >= len(a)):\n        return sum(a[:k])\n    \n    start = index\n    end = len(a) - 1\n    val = 0\n    \n    for i in range(start, end + 1):\n        if (i == start):\n            val += 1\n        elif (i == end):\n            val += count_of_subseq_2(a, n - 1, start, i - 1)\n        elif (a[i] > a[i + 1]):\n            val += max_sum_increasing_subseq_2(a, n - 1, i, k - 1)\n    \n    return val\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    total = 0\n    p = 0\n    for i in range(index, n):\n        if a[i] < a[p]:\n            total += a[i]\n            p += 1\n        else:\n            total += a[i] - a[p]\n            p += 1\n    if k == 0:\n        return total\n    else:\n        return max_sum_increasing_subseq(a, n, index+k-1, k) + total\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    a = sorted(a)\n    i = index\n    if index == len(a):\n        return a[k-1]\n    while i <= k:\n        if a[i] >= a[i-1] + 1:\n            a[i] = a[i-1] + 1\n        else:\n            a[i] = a[i-1]\n        i += 1\n    return a[i]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[index]\n    if index == n - 1:\n        return a[index] + k\n    res = []\n    for i in range(index, n - 1):\n        res.append(a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n    return max(res)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # End condition (i)\n    if index == n:\n        return a[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if k == 0:\n        return a[-1]\n    if index >= n:\n        return max_sum_increasing_subseq(a, n - 1, index, k)\n    if a[index] > a[index + 1]:\n        return max_sum_increasing_subseq(a, n - 1, index, k - 1)\n    return max_sum_increasing_subseq(a, n - 1, index, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    result = 0\n    left = 0\n    right = 0\n    i = index\n    while i <= n:\n        if i == n-k:\n            right = i-1\n            break\n        if left < right:\n            if a[i] > a[left] + a[right]:\n                result = max(result, a[i] + a[left] + a[right])\n                left += 1\n            elif a[i] > a[left] and a[i] + a[left] + a[right] > a[left]:\n                right -= 1\n                left += 1\n                \n        i += 1\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = list(tuplex[:m+1])\n    for i in range(n-1):\n        c[i] = tuplex[m+1-i-1]\n    c[n-1] = tuplex[m+1]\n    return tuple(c)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if i%n!= 0:\n            if i % n!= 0:\n                tuplex[i] = tuplex[i] + m\n            else:\n                tuplex[i] = tuplex[i] + m\n        if i%n == 0:\n            tuplex[i] = tuplex[i] + m\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # print(tuplex)\n    # print(m)\n    # print(n)\n    \n    if len(tuplex)!= m:\n        return None\n    \n    # print(tuplex)\n    \n    else:\n        # print(len(tuplex))\n        # print(len(m))\n        # print(len(n))\n        \n        return tuplex[m][n]\n    \n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    k=m+n\n    m=k//2\n    tuplex[0]=(tuplex[0][:m])+tuplex[0][m:k]\n    tuplex[1]=(tuplex[1][:n])+tuplex[1][n:k]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # get the first element of the tuple\n    m_first = tuplex[0][0]\n    # get the second element of the tuple\n    n_first = tuplex[1][0]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex[0] < tuplex[1]:\n        return tuplex\n    elif tuplex[1] < tuplex[0]:\n        return tuplex\n    elif tuplex[1] == tuplex[0]:\n        return (tuplex[1],tuplex[0])\n    else:\n        return None\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #colon = []\n    #temp_tuplex = []\n    #for i in range(m):\n    #    temp_tuplex.append(tuplex[i][n])\n    #for i in range(m):\n    #    colon.append(tuplex[i][n-1])\n    #colon.extend(temp_tuplex)\n    #return colon\n    return [tuplex[i][n-1] for i in range(m)]\ndef deep_copy(tuplex):\n    '''\n    This function is to create a deep copy of a tuple.\n    '''\n    tuplex_copy = []\n    for i in range(len(tuplex)):\n        tuplex_copy.append(tuplex[i].copy())\n    return tuplex_copy\ndef merge(a,b):\n    '''\n    This function is to merge two tuples.\n    '''\n    tuplex = a.copy()\n    for i in range(len(b)):\n        tuplex.append(b[i].copy())\n    return tuplex\ndef set_tuplex_int(tuplex,num):\n    '''\n    This function is to set an integer in a tuple.\n    '''\n    #if num.is_integer():\n    #    tuplex[num] = int(num)\n    #    return tuplex\n    #else:\n    #    raise TypeError\n    tuplex[num] = int(num)\n    return tuplex\ndef set_tuplex_str(tuplex,str_num):\n    '''\n    This function is to set a string in a tuple.\n    '''\n    tuplex[str_num] = str(str_num)\n    return tuplex\ndef get_tuplex_int(tuplex):\n    '''\n    This function is to get an integer from a tuple.\n    '''\n    #return tuplex[num]\n    #tuplex = tuplex[num].copy()\n    #tuplex[num] = int(num)\n    return int(tuplex[-1])\ndef get_tuplex_str(tuplex):\n    '''\n    This function is to get a string from a tuple.\n    '''\n    #return str(tuplex[num])\n    tuplex = tuplex[-1].copy()\n    tuplex[num] = str(tuplex[num])\n    return tuplex\ndef get_tuplex_float(tuplex):\n    '''\n    This function is to get a float from a tuple.\n    '''\n    #return float(tuplex[num])\n    #tuplex = tuplex[num].copy()\n    #tuplex[num] = float(tuplex[num])\n    return float(tuplex[-1])\ndef split_tuplex(tuplex):\n    '''\n    This function is to split a tuple into two tuples.\n    '''\n    temp = []\n    for i in range(len(tuplex)):\n        temp.append(tuplex[i][1:])\n    return temp\ndef get_tuplex_tuple_list(tuplex):\n    '''\n    This function is to get a list of tuples from a tuple.\n    '''\n    temp = []\n    for i in range(len(tuplex)):\n        temp.append(tuplex[i].copy())\n    return temp\ndef get_tuplex_list_tuple(tuplex):\n    '''\n    This function is to get a list of tuples from a tuple.\n    '''\n    temp = []\n    for i in range(len(tuplex)):\n        temp.append(tuplex[i][1:])\n    return temp\ndef get_tuplex_dict(tuplex):\n    '''\n    This function is to get a dictionary from a tuple.\n    '''\n    temp = {}\n    for i in range(len(tuplex)):\n        temp[tuplex[i][0]] = tuplex[i][1:].copy()\n    return temp\ndef get_tuplex_set(tuplex):\n    '''\n    This function is to get a set from a tuple.\n    '''\n    temp = set(tuplex[1:])\n    return temp\ndef get_tuplex_none(tuplex):\n    '''\n    This function is to get a none from a tuple.\n    '''\n    temp = deep_copy(tuplex)\n    temp.remove(tuplex[0][1:])\n    return temp\ndef get_tuplex_None(tuplex):\n    '''\n    This function is to get a None from a tuple.\n    '''\n    temp = deep_copy(tuplex)\n    temp.remove(tuplex[0][1:])\n    return None\ndef get_tuplex_set_str(tuplex):\n    '''\n    This function is to get a set from a tuple.\n    '''\n    temp = set_tuplex_str(tuplex,0)\n    temp.remove(tuplex[-1][1:])\n    return temp\ndef get_tuplex_str_set(tuplex):\n    '''\n    This function is to get a set from a tuple.\n    '''\n    temp = set_tuplex_str(tuplex,1)\n    temp.remove(tuplex[-1][1:])\n    return temp\ndef get_tuplex_int_str(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_int(tuplex)\n    return str(temp)\ndef get_tuplex_int_float(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_int(tuplex)\n    return float(temp)\ndef get_tuplex_str_int(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_str(tuplex)\n    return int(temp)\ndef get_tuplex_str_float(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_str(tuplex)\n    return float(temp)\ndef get_tuplex_float_int(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_float(tuplex)\n    return int(temp)\ndef get_tuplex_float_float(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_float(tuplex)\n    return float(temp)\ndef get_tuplex_tuple_set(tuplex):\n    '''\n    This function is to get a set from a tuple.\n    '''\n    temp = get_tuplex_tuple_list(tuplex)\n    temp.remove(tuplex[-1])\n    temp.remove(tuplex[-1][1:])\n    return temp\ndef get_tuplex_tuple_int_set(tuplex):\n    '''\n    This function is to get a set from a tuple.\n    '''\n    temp = get_tuplex_tuple_set(tuplex)\n    temp.remove(tuplex[-1][1:])\n    return temp\ndef get_tuplex_tuple_int_float(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_tuple_int(tuplex)\n    return int(temp)\ndef get_tuplex_tuple_float_int(tuplex):\n    '''\n    This function is to get an int from a tuple.\n    '''\n    temp = get_tuplex_tuple_float(tuplex)\n    return int(temp)\ndef get_tuple"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(n):\n        colon.append(tuplex[i][m])\n    return colon\ndef symbol_tuplex(tuplex):\n    '''\n    Write a function to get the next symbol in a tuple.\n    '''\n    if len(tuplex[0])==1:\n        return tuplex[0][0]\n    else:\n        return tuplex[0][0]+tuplex[0][1]\ndef get_next_column(tuplex,i,m):\n    '''\n    Write a function to get the next column in a tuple.\n    '''\n    if m==0:\n        return colon_tuplex(tuplex,i,i+1)\n    else:\n        return [tuplex[i][m-1],tuplex[i][m]]\ndef next_row(tuplex,m):\n    '''\n    Write a function to get the next row in a tuple.\n    '''\n    if m==0:\n        return colon_tuplex(tuplex,m,m+1)\n    else:\n        return [tuplex[m][0],tuplex[m][m]]\ndef next_col(tuplex,i,m):\n    '''\n    Write a function to get the next column in a tuple.\n    '''\n    if m==0:\n        return colon_tuplex(tuplex,i,i+1)\n    else:\n        return [tuplex[i][m-1],tuplex[i][m]]\ndef get_next_row_col(tuplex,i,m):\n    '''\n    Write a function to get the next row and column in a tuple.\n    '''\n    if m==0:\n        return colon_tuplex(tuplex,i,i+1)\n    else:\n        return [colon_tuplex(tuplex,i,i+1),tuplex[i][m-1]]\ndef get_next_column_row(tuplex,i,m):\n    '''\n    Write a function to get the next row and column in a tuple.\n    '''\n    if m==0:\n        return colon_tuplex(tuplex,i,i+1)\n    else:\n        return [tuplex[i][m-1],tuplex[i][0]]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    output = []\n    for i in range(m):\n        output.append(tuplex[i][n])\n    return tuple(output)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m])\n    return ans\ndef get_last_index(tuplex,m,n):\n    '''\n    Write a function to get the last index of a tuple.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][n])\n    return ans\ndef get_last_index_char(tuplex,m,n):\n    '''\n    Write a function to get the last index of a tuple.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m])\n    return ans\ndef get_first_index(tuplex,m,n):\n    '''\n    Write a function to get the first index of a tuple.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][n])\n    return ans\ndef get_first_index_char(tuplex,m,n):\n    '''\n    Write a function to get the first index of a tuple.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m])\n    return ans\ndef get_num_of_seqs(tuplex,m,n):\n    '''\n    Write a function to get the number of sequences in a tuple.\n    '''\n    \n    ans = 0\n    for i in range(0,len(tuplex)):\n        ans += tuplex[i][m]\n    return ans\ndef get_sequence(tuplex,m,n):\n    '''\n    Write a function to get a sequence of a tuple.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_mutation(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a tuple.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mutation(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mutation2(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation2(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation3(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation3(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation4(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation4(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation5(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation5(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation6(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation6(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation7(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation7(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation8(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation8(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.append(tuplex[i][m:n])\n    return ans\ndef get_seq_mut_mutation9(tuplex,m,n):\n    '''\n    Write a function to get a mutation of a sequence.\n    '''\n    \n    ans = []\n    for i in range(0,len(tuplex)):\n        ans.appen"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check the length of list\n    if len(nums1) == len(nums2):\n        # Return the result\n        return [max(nums1[i] * nums2[i]) for i in range(N)]\n    else:\n        return None\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return 0\n    if len(nums1) == 1:\n        if nums2[0] == 1:\n            return 1\n        else:\n            return 0\n    elif len(nums2) == 1:\n        if nums1[0] == 1:\n            return 1\n        else:\n            return 0\n    else:\n        return large_product(nums1, nums2[1:], N-1) + large_product(nums1, nums2, N-1)\n    \n    \n    \ndef merge(nums, l, m, r):\n    '''\n    Merge nums[l..r] into nums[0..m] using the input array\n    '''\n    nums[l + r - 1] = nums[m]\n    nums[m] = 0\n    \ndef sortArray(nums):\n    '''\n    Sort the array in non-decreasing order\n    '''\n    n = len(nums)\n    for i in range(n):\n        j = n - 1 - i\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    return nums\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #write your code here\n    if (N == 0):\n        return 0\n    if (N == 1):\n        return 1\n    if (len(nums1) > len(nums2)):\n        return large_product(nums2, nums1, N-1)\n    if (len(nums2) > len(nums1)):\n        return large_product(nums1, nums2, N-1)\n    #remove duplicates\n    c = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in c:\n            c[nums1[i]] = 1\n        else:\n            c[nums1[i]] += 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    dp = [[-1]*N for _ in range(N)]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N==1:\n        return []\n    result = []\n    d = {}\n    for n in range(1,N+1):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i]*nums2[j] == n:\n                    if n not in d:\n                        d[n] = nums1[i]\n                    else:\n                        d[n] = min(d[n],nums1[i]*n)\n    for k in d:\n        if d[k] not in result:\n            result.append(d[k])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    def factor_sums(nums):\n        total = 0\n        for n in nums:\n            total += n\n        return total\n    \n    #initialize max_sum\n    max_sum = 0\n    \n    #compute the maximum sum of nums1\n    for n in nums1:\n        max_sum += factor_sums(nums1)\n    \n    #compute the maximum sum of nums2\n    for n in nums2:\n        max_sum += factor_sums(nums2)\n    \n    #compute the factor of each product of nums1 and nums2\n    factors = []\n    for n in nums1:\n        for m in nums2:\n            factors.append(factor_sums(n*m))\n            \n    #compute the maximum sum of nums1 and nums2\n    max_sum = max(max_sum, factor_sums(nums1)*factor_sums(nums2))\n    \n    #return the maximum sum of nums1 and nums2\n    return max_sum\n    \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return []\n    if N == 1:\n        return [nums1]\n    \n    remainder = []\n    \n    for i in range(len(nums1)):\n        for j in range(i, len(nums1)):\n            for k in range(j, len(nums1)):\n                remainder.append(nums1[i] * nums1[j] * nums1[k])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    list_1 = []\n    list_2 = []\n    for i in nums1:\n        list_1.append(i)\n    for i in nums2:\n        list_2.append(i)\n    if N == 1:\n        return max(list_1) * max(list_2)\n    elif N == 2:\n        return max(list_1[0] * list_2[1], list_1[1] * list_2[0])\n    else:\n        m = large_product(list_1, list_2, N//2)\n        m = m / m\n        for i in range(N):\n            m = m * (N - i) / N\n            result.append(m)\n        return max(result)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = 0\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # TODO:\n    # 1. Write a recursive function that finds the largest product of the smallest number and the numbers in the list\n    # 2. Add the factors of the smallest number to the list of the product of the largest number\n    # 3. Now, check whether the product of the smallest number and the numbers in the list is larger than 1. If yes, return the product of the smallest number and the numbers in the list.\n    # 4. Return the product of the smallest number and the numbers in the list.\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print('max is:',a)\n    else:\n        print('max is:',b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a\n    if b > maximum:\n        maximum = b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if b > a else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max=a\n    if b<a:\n        return b\n    elif a>b:\n        return a\n    else:\n        return 0\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        maximum = a\n    else:\n        maximum = b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    print(a)\n    print(b)\n    if a == b:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # TODO: convert the given string to a tuple of characters\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_of_chars = []\n    for i in range(0,len(str1),1):\n        if str1[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            tuple_of_chars.append(str1[i])\n    return tuple_of_chars\n    \ndef main():\n    word = \"aabbbccccdee\"\n    print(string_to_tuple(word))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_str = tuple(str1)\n    return tuple_str\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if len(str1) > 20:\n        str1 = str1[:20]\n    elif len(str1) < 20:\n        str1 = str1 + str1[len(str1):]\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in str1:\n        lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (int(str1.split()[0]), int(str1.split()[1]))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if type(str1)!= str:\n        raise TypeError(\"only strings can be converted to tuples\")\n    else:\n        return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code here\n    list_of_string = []\n    for char in str1:\n        list_of_string.append(char)\n    return tuple(list_of_string)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n >> 1\n    z = n & 1\n    if z!= 1:\n        n = n ^ 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # TODO: Write the code to write the left most unset bit of n in the binary\n    # string form.\n    # TODO: Hint: you can use an additional binary search function to find the left most\n    # unset bit of n.\n    # HINT: If n is in the original binary form, then return 0.\n    if n > 0:\n        if n < 8:\n            return '1'\n        elif n < 32:\n            return '1' + '0' + '1'\n        elif n < 64:\n            return '1' + '0' + '1' + '0'\n        else:\n            return '1' + '0' + '1' + '0' + '1'\n    else:\n        return '0'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #check if n is a numpy array\n    if isinstance(n, numpy.ndarray):\n        #create a mask\n        mask = numpy.ones_like(n)\n        mask[0] = 0\n        mask[1:] = 0\n        #apply the mask\n        n[mask == 0] = 0\n    else:\n        #just a bit to keep the value\n        n = 0\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # if n is 0, set the bit to 1\n    if n == 0: \n        n = 1 \n        \n    # if n is 1, set the bit to 0\n    if n == 1: \n        n = 0 \n        \n    # return the n bit\n    return n\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    \n    # if n is 0, set the bit to 1\n    if n == 0: \n        n = 1 \n        \n    # if n is 1, set the bit to 0\n    if n == 1: \n        n = 0 \n        \n    # return the n bit\n    return n\n    \n    \ndef is_binary_converter(n): \n    '''\n    Write a python function to check whether a number is binary.\n    '''\n    \n    # if n is 0, return true\n    if n == 0: \n        return True\n    \n    # if n is 1, return false\n    if n == 1: \n        return False\n    \n    # if n is 2, return true\n    if n == 2: \n        return True\n    \n    # if n is 3, return false\n    if n == 3: \n        return False\n    \n    # if n is 4, return true\n    if n == 4: \n        return True\n    \n    # if n is 5, return false\n    if n == 5: \n        return False\n    \n    # if n is 6, return true\n    if n == 6: \n        return True\n    \n    # if n is 7, return false\n    if n == 7: \n        return False\n    \n    # if n is 8, return true\n    if n == 8: \n        return True\n    \n    # if n is 9, return false\n    if n == 9: \n        return False\n    \n    # if n is 10, return true\n    if n == 10: \n        return True\n    \n    # if n is 11, return false\n    if n == 11: \n        return False\n    \n    # if n is 12, return true\n    if n == 12: \n        return True\n    \n    # if n is 13, return false\n    if n == 13: \n        return False\n    \n    # if n is 14, return true\n    if n == 14: \n        return True\n    \n    # if n is 15, return false\n    if n == 15: \n        return False\n    \n    # if n is 16, return true\n    if n == 16: \n        return True\n    \n    # if n is 17, return false\n    if n == 17: \n        return False\n    \n    # if n is 18, return true\n    if n == 18: \n        return True\n    \n    # if n is 19, return false\n    if n == 19: \n        return False\n    \n    # if n is 20, return true\n    if n == 20: \n        return True\n    \n    # if n is 21, return false\n    if n == 21: \n        return False\n    \n    # if n is 22, return true\n    if n == 22: \n        return True\n    \n    # if n is 23, return false\n    if n == 23: \n        return False\n    \n    # if n is 24, return true\n    if n == 24: \n        return True\n    \n    # if n is 25, return false\n    if n == 25: \n        return False\n    \n    # if n is 26, return true\n    if n == 26: \n        return True\n    \n    # if n is 27, return false\n    if n == 27: \n        return False\n    \n    # if n is 28, return true\n    if n == 28: \n        return True\n    \n    # if n is 29, return false\n    if n == 29: \n        return False\n    \n    # if n is 30, return true\n    if n == 30: \n        return True\n    \n    # if n is 31, return false\n    if n == 31: \n        return False\n    \n    # if n is 32, return true\n    if n == 32: \n        return True\n    \n    # if n is 33, return false\n    if n == 33: \n        return False\n    \n    # if n is 34, return true\n    if n == 34: \n        return True\n    \n    # if n is 35, return false\n    if n == 35: \n        return False\n    \n    # if n is 36, return true\n    if n == 36: \n        return True\n    \n    # if n is 37, return false\n    if n == 37: \n        return False\n    \n    # if n is 38, return true\n    if n == 38: \n        return True\n    \n    # if n is 39, return false\n    if n == 39: \n        return False\n    \n    # if n is 40, return true\n    if n == 40: \n        return True\n    \n    # if n is 41, return false\n    if n == 41: \n        return False\n    \n    # if n is 42, return true\n    if n == 42: \n        return True\n    \n    # if n is 43, return false\n    if n == 43: \n        return False\n    \n    # if n is 44, return true\n    if n == 44: \n        return True\n    \n    # if n is 45, return false\n    if n == 45: \n        return False\n    \n    # if n is 46, return true\n    if n == 46: \n        return True\n    \n    # if n is 47, return false\n    if n == 47: \n        return False\n    \n    # if n is 48, return true\n    if n == 48: \n        return True\n    \n    # if n is 49, return false\n    if n == 49: \n        return False\n    \n    # if n is 50, return true\n    if n == 50: \n        return True\n    \n    # if n is 51, return false\n    if n == 51: \n        return False\n    \n    # if n is 52, return true\n    if n == 52: \n        return True\n    \n    # if n is 53, return false\n    if n == 53: \n        return False\n    \n    # if n is 54, return true\n    if n == 54: \n        return True\n    \n    # if n is 55, return false\n    if n == 55: \n        return False\n    \n    # if n is 56, return true\n    if n == 56: \n        return True\n    \n    # if n is 57, return false\n    if n == 57: \n        return False\n    \n    # if n is 58, return true\n    if n == 58: \n        return True\n    \n    # if n is 59, return false\n    if n == 59: \n        return False\n    \n    # if n is 60, return true\n    if n == 60: \n        return True\n    \n    # if n is 61, return false\n    if n == 61: \n        return False\n    \n    # if n is 62, return true\n    if n == 62: \n        return True\n    \n    # if n is 63, return false\n    if n == 63: \n        return False\n    \n    # if n is 64, return true\n    if n == 64: \n        return True\n    \n    # if n is 65, return false\n    if n == 65: \n        return False\n    \n    # if n is 66, return true\n    if n == 66: \n        return True\n    \n    # if n is 67, return false\n    if n == 67: \n        return False\n    \n    # if n is 68, return true\n    if n == 68: \n        return True\n    \n    # if n is 69, return false\n    if n == 69: \n        return False\n    \n    # if n is 70, return true\n    if n == 70: \n        return True\n    \n    # if n is 71, return false\n    if n == 71: \n        return False\n    \n    # if n is 72, return true\n    if n == 72: \n        return True\n    \n    # if n is 73, return false\n    if n == 73: \n        return False\n    \n    # if n is 74, return tru"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # iterate over the number\n    for i in range(n):\n        # if the current bit is 0, set it to 1, else 0\n        if n & 1 == 1:\n            n = n | 1\n            print(n)\n        else:\n            n = n & 1\n            print(n)\n        # break\n    print(n)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n:\n        m = int(n)\n        if m & 0x1:\n            m = m - 1\n        else:\n            m = m + 1\n    else:\n        m = 0\n    return m\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_n = bin(n)\n    i = 0\n    j = 0\n    while i < len(binary_n):\n        if binary_n[i] == '1':\n            i += 1\n        else:\n            if i == 0:\n                j += 1\n            else:\n                i += 1\n    j += 1\n    if j == 0:\n        binary_n = '1' + binary_n\n    return int(binary_n, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n & -n)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = (1 << n) - 1\n    return mask\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    v = h*r\n    d = math.pow(v,2)*(4/3)\n    # print(\"d = \",d)\n    return d\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (2*math.pi*math.sqrt(r**2-2*h**2))*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c = math.pi * pow(r,3)\n    print 'The volume of a cone is:',c\n    return c\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h**2\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v_c = math.pi*(r**2)*h\n    print(\"The volume of a cone is:\",v_c,\"cylindric units\")\n    return v_c\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x,y,z=0,0,0\n    while(r>0.0000001):\n        t=math.exp(r)\n        r=r*t\n        x=x+1\n    return(x*math.pi*(h**2)*(t**2))\ndef vol_angle(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*(h**2)\ndef volume_a(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x,y,z=0,0,0\n    while(r>0.0000001):\n        t=math.exp(r)\n        r=r*t\n        x=x+1\n    return(x*math.pi*(h**2)*(t**2))\ndef volume_p(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*(h**2)\ndef vol_angle_a(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*(h**2)\ndef h_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*math.pi*(h**2)\ndef h_angle(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*math.pi*(h**2)\ndef h_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (r*math.pi*(h**2))\ndef h_angle_a(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (r*math.pi*(h**2))\ndef get_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_cone(r,h)\n    return x\ndef get_angle(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_angle(r,h)\n    return x\ndef get_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_a(r,h)\n    return x\ndef get_angle_a(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_p(r,h)\n    return x\ndef get_volume_a(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_a(r,h)\n    return x\ndef get_h_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_cone(r,h)\n    return x\ndef get_h_angle(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_angle(r,h)\n    return x\ndef get_h_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_volume(r,h)\n    return x\ndef get_h_angle_a(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_angle_a(r,h)\n    return x\ndef get_volume_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_a_cone(r,h)\n    return x\ndef get_h_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_angle_a_cone(r,h)\n    return x\ndef get_v_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_cone(r,h)\n    return x\ndef get_v_angle(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_angle(r,h)\n    return x\ndef get_v_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_a_cone(r,h)\n    return x\ndef get_v_angle_a(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_angle_a(r,h)\n    return x\ndef get_volume_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_a_cone(r,h)\n    return x\ndef get_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_angle_a(r,h)\n    return x\ndef get_h_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_cone(r,h)\n    return x\ndef get_h_angle_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_angle(r,h)\n    return x\ndef get_h_volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_volume(r,h)\n    return x\ndef get_h_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_angle_a(r,h)\n    return x\ndef get_volume_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_a_cone(r,h)\n    return x\ndef get_v_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_angle_a(r,h)\n    return x\ndef get_v_volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_a_cone(r,h)\n    return x\ndef get_v_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_angle_a(r,h)\n    return x\ndef get_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=volume_angle_a(r,h)\n    return x\ndef get_h_cone_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_cone(r,h)\n    return x\ndef get_h_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_angle(r,h)\n    return x\ndef get_h_volume_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x=h_volume(r,h)\n    return x\ndef get_h_angle_a_cone(r,h):\n    '''\n    Write a function to find the volume of a cone."
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r*h\n    return v\ndef area(r,h):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    a=math.pi*(r**2)*h\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v=r*h*2\n    return v\ndef circum_cylinder(r,h):\n    '''\n    Write a function to calculate the circumscribed cylinder.\n    '''\n    v=r*h*3\n    return v\ndef volume_cone_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle.\n    '''\n    v=r*h*4\n    return v\ndef area_circle(r,h):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    a=math.pi*(r**2)\n    return a\ndef volume_cylinder_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle.\n    '''\n    v=r*h*5\n    return v\ndef surface_area(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder_circle_square(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle square.\n    '''\n    v=r*h*6\n    return v\ndef surface_area_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_circle_square(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle square.\n    '''\n    v=r*h*7\n    return v\ndef surface_area_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cone square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle circle.\n    '''\n    v=r*h*9\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cone circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cone circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder_circle_square(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle square.\n    '''\n    v=r*h*10\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle circle.\n    '''\n    v=r*h*12\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cone circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder_square(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder square.\n    '''\n    v=r*h*13\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle circle.\n    '''\n    v=r*h*14\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cone circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder_square(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder square.\n    '''\n    v=r*h*15\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle circle.\n    '''\n    v=r*h*16\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cone circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder_circle_square(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle square.\n    '''\n    v=r*h*17\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle circle.\n    '''\n    v=r*h*18\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cone circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle circle.\n    '''\n    v=r*h*19\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cone_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle circle.\n    '''\n    v=r*h*20\n    return v\ndef volume_cylinder_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle circle.\n    '''\n    v=r*h*21\n    return v\ndef volume_cone_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cone circle circle.\n    '''\n    v=r*h*22\n    return v\ndef surface_area_circle_square(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder circle square.\n    '''\n    a=3.14*r*h\n    return a\ndef volume_cylinder_circle_square(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle square.\n    '''\n    v=r*h*23\n    return v\ndef volume_cylinder_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle circle.\n    '''\n    v=r*h*24\n    return v\ndef volume_cylinder_circle_circle(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder circle circle.\n    '''\n    v=r*h*25\n    return v\ndef surface_area_circle_circle(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder circle circle.\n    ''"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c = math.pi*r*(r+h)**2\n    return c\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r<0.0 or h<0.0:\n        raise Exception('Enter positive floats for the radius and height')\n    return 4 * r*math.pi * (h**2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * math.pi * (r * (math.tan(math.radians(h)))) ** 2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    try:\n        output = 0\n        for i in range(1,n+1):\n            if n%i == 0:\n                output = i\n                break\n        return output\n    except:\n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n < 0): \n        return None\n    \n    elif (n == 0): \n        return 0\n    \n    else: \n        n1 = n // 2\n        n2 = n - n1\n        return highest_Power_of_2(n1) + highest_Power_of_2(n2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 0\n    for i in range(2**n):\n        if (i <= n):\n            result = i\n            break\n    return result\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return 0\n    else: \n        return highest_Power_of_2(n / 2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0 or n == 1): \n        return 0\n    if n < 0: \n        print(\"Invalid input.\")\n    elif (n >= 2**n): \n        return n - 1\n    else: \n        return highest_Power_of_2(n - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_Power_of_2(n-1) + highest_Power_of_2(n-2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # if n is 0 or the number is 0 or the n is 1 or 2, return 0\n    if n <= 0 or n % 2!= 0 or n == 1: \n        return 0\n    # Find the lowest power of 2 that is less than or equal to n\n    lowest_power = 1\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            lowest_power = i\n            break\n    # If n is multiple of both the lowest and highest power of 2, return the largest power\n    if n > 1 and lowest_power > n // 2 and lowest_power > highest_Power_of_2(n - 1):\n        return lowest_power\n    return lowest_power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    list_n = [i for i in range(2,n+1)]\n    for i in list_n: \n        if i <= n:\n            print(i, end=\"\")\n        else:\n            break\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<2:\n        return n\n    i=2\n    while i<=n:\n        if n%i==0:\n            return n//i\n        i+=1\n    return 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n%2 == 0:\n            return (n//2)\n        else:\n            return (n*2)\nn=10\nprint(highest_Power_of_2(n))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 3\n    if n == 5: \n        return 4\n    if n == 6: \n        return 5\n    if n == 7: \n        return 6\n    if n == 8: \n        return 7\n    if n == 9: \n        return 8\n    if n == 10: \n        return 9\n    if n == 11: \n        return 10\n    if n == 12: \n        return 11\n    if n == 13: \n        return 12\n    if n == 14: \n        return 13\n    if n == 15: \n        return 14\n    if n == 16: \n        return 15\n    if n == 17: \n        return 16\n    if n == 18: \n        return 17\n    if n == 19: \n        return 18\n    if n == 20: \n        return 19\n    if n == 21: \n        return 20\n    if n == 22: \n        return 21\n    if n == 23: \n        return 22\n    if n == 24: \n        return 23\n    if n == 25: \n        return 24\n    if n == 26: \n        return 25\n    if n == 27: \n        return 26\n    if n == 28: \n        return 27\n    if n == 29: \n        return 28\n    if n == 30: \n        return 29\n    if n == 31: \n        return 30\n    if n == 32: \n        return 31\n    if n == 33: \n        return 32\n    if n == 34: \n        return 33\n    if n == 35: \n        return 34\n    if n == 36: \n        return 35\n    if n == 37: \n        return 36\n    if n == 38: \n        return 37\n    if n == 39: \n        return 38\n    if n == 40: \n        return 39\n    if n == 41: \n        return 40\n    if n == 42: \n        return 41\n    if n == 43: \n        return 42\n    if n == 44: \n        return 43\n    if n == 45: \n        return 44\n    if n == 46: \n        return 45\n    if n == 47: \n        return 46\n    if n == 48: \n        return 47\n    if n == 49: \n        return 48\n    if n == 50: \n        return 49\n    if n == 51: \n        return 50\n    if n == 52: \n        return 51\n    if n == 53: \n        return 52\n    if n == 54: \n        return 53\n    if n == 55: \n        return 54\n    if n == 56: \n        return 55\n    if n == 57: \n        return 56\n    if n == 58: \n        return 57\n    if n == 59: \n        return 58\n    if n == 60: \n        return 59\n    if n == 61: \n        return 60\n    if n == 62: \n        return 61\n    if n == 63: \n        return 62\n    if n == 64: \n        return 63\n    if n == 65: \n        return 64\n    if n == 66: \n        return 65\n    if n == 67: \n        return 66\n    if n == 68: \n        return 67\n    if n == 69: \n        return 68\n    if n == 70: \n        return 69\n    if n == 71: \n        return 70\n    if n == 72: \n        return 71\n    if n == 73: \n        return 72\n    if n == 74: \n        return 73\n    if n == 75: \n        return 74\n    if n == 76: \n        return 75\n    if n == 77: \n        return 76\n    if n == 78: \n        return 77\n    if n == 79: \n        return 78\n    if n == 80: \n        return 79\n    if n == 81: \n        return 80\n    if n == 82: \n        return 81\n    if n == 83: \n        return 82\n    if n == 84: \n        return 83\n    if n == 85: \n        return 84\n    if n == 86: \n        return 85\n    if n == 87: \n        return 86\n    if n == 88: \n        return 87\n    if n == 89: \n        return 88\n    if n == 90: \n        return 89\n    if n == 91: \n        return 90\n    if n == 92: \n        return 91\n    if n == 93: \n        return 92\n    if n == 94: \n        return 93\n    if n == 95: \n        return 94\n    if n == 96: \n        return 95\n    if n == 97: \n        return 96\n    if n == 98: \n        return 97\n    if n == 99: \n        return 98\n    if n == 100: \n        return 99\n    if n == 101: \n        return 100\n    if n == 102: \n        return 101\n    if n == 103: \n        return 102\n    if n == 104: \n        return 103\n    if n == 105: \n        return 104\n    if n == 106: \n        return 105\n    if n == 107: \n        return 106\n    if n == 108: \n        return 107\n    if n == 109: \n        return 108\n    if n == 110: \n        return 109\n    if n == 111: \n        return 110\n    if n == 112: \n        return 111\n    if n == 113: \n        return 112\n    if n == 114: \n        return 113\n    if n == 115: \n        return 114\n    if n == 116: \n        return 115\n    if n == 117: \n        return 116\n    if n == 118: \n        return 117\n    if n == 119: \n        return 118\n    if n == 120: \n        return 119\n    if n == 121: \n        return 120\n    if n == 122: \n        return 121\n    if n == 123: \n        return 122\n    if n == 124: \n        return 123\n    if n == 125: \n        return 124\n    if n == 126: \n        return 125\n    if n == 127: \n        return 126\n    if n == 128: \n        return 127\n    if n == 129: \n        return 128\n    if n == 130: \n        return 129\n    if n == 131: \n        return 130\n    if n == 132: \n        return 131\n    if n == 133: \n        return 132\n    if n == 134: \n        return 133\n    if n == 135: \n        return 134\n    if n == 136: \n        return 135\n    if n == 137: \n        return 136\n    if n == 138: \n        return 137\n    if n == 139: \n        return 138\n    if n == 140: \n        return 139\n    if n == 141: \n        return 140\n    if n == 142: \n        return 141\n    if n == 143: \n        return 142\n    if n == 144: \n        return 143\n    if n == 145: \n        return 144\n    if n == 146: \n        return 145\n    if n == 147: \n        return 146\n    if n == 148: \n        return 147\n    if n == 149: \n        return 148\n    if n == 150: \n        return 149\n    if n == 151: \n        return 150\n    if n == 152: \n        return 151\n    if n == 153: \n        return 152\n    if n == 154: \n        return 153\n    if n == 155: \n        return 154\n    if n == 156: \n        return 155\n    if n == 157: \n        return 156\n    if n == 158: \n        return 157\n    if n == 159: \n        return 158\n    if n == 160: \n        return 159\n    if n == 161: \n        return 160\n    if n == 162: \n        return 161\n    if n == 163: \n        return 162\n    if n == 164: \n        return 163\n    if n == 165: \n        return 164\n    if n == 166: \n        return 165\n    if n == 167: \n        retur"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1: \n        return 1\n    if n==2: \n        return 3\n    if n==3: \n        return 5\n    if n%2==0: \n        return find_lucas(n//2) + 3\n    if n%2==1: \n        return find_lucas(n//2) + 1\n    if n<=1: \n        return n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # You can just check for 2 fibonacci numbers.\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #Write your code here\n    x = 1\n    y = 0\n    for i in range(0,n):\n        x = x + y\n        y = x%2\n    return x%2\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = (1,3,5,7,11,13,17)\n    for i in lucas:\n        if n == i:\n            return n\n        \nprint(find_lucas(11))    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    m = 1\n    for i in range(n):\n        if i == 0: \n            m = m + 2\n        elif i == 1:\n            m = m - 1\n        elif i == 2:\n            m = m - 2\n        else:\n            m = m - 3\n    return m\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Base case\n    if len(string) == 1:\n        list_.append(string)\n        return\n    \n    # Iterate through the string\n    for char in string:\n        add_string(list_, char)\n    \n    # Add the rest of the string\n    add_string(list_, string[1:])\n        \ndef main():\n    '''\n    Create a list of strings and perform the functions.\n    '''\n    \n    # Initialize the list\n    strs = [\"one\", \"two\", \"three\", \"four\"]\n    \n    # Add all the strings to the list\n    add_string(strs, \"v\")\n    add_string(strs, \"w\")\n    add_string(strs, \"x\")\n    \n    print(strs)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_[list_.index(element)] = string + str(element)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return string.join(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for x in list_:\n        list_[list_.index(x)] = x.format(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element.append(string.format(element))\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = i.replace(string, '')\n        i = i.lstrip()\n        i = i.rstrip()\n        if i!= '':\n            list_.append(i)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = i.replace(string, '')\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = re.sub(string, r'\\1\\n', element)\n        element = re.sub(r' +', '\\n', element)\n        element = re.sub(r'\\s+','', element)\n        element = re.sub(r'\\s','', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n', element)\n        element = re.sub(r'\\n\\n', '\\n'"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for el in list_:\n        el.append(string)\n        \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1.update({i:dict(l2)})\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l3\n    if l3 is None:\n        return l1\n    if l1[0] is not None and l2[0] is not None and l3[0] is not None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l1)\n        dict1['results'].append(l2)\n        dict1['results'].append(l3)\n        return dict1\n    if l1[0] is not None and l2[0] is not None and l3[0] is None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l1)\n        dict1['results'].append(l2)\n        return dict1\n    if l1[0] is None and l2[0] is not None and l3[0] is None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l2)\n        return dict1\n    if l1[0] is None and l2[0] is None and l3[0] is not None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l3)\n        return dict1\n    if l1[0] is not None and l2[0] is not None and l3[0] is not None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l1)\n        dict1['results'].append(l2)\n        dict1['results'].append(l3)\n        return dict1\n    if l1[0] is None and l2[0] is None and l3[0] is None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l1)\n        dict1['results'].append(l2)\n        dict1['results'].append(l3)\n        return dict1\n    if l1[0] is None and l2[0] is None and l3[0] is None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l1)\n        dict1['results'].append(l2)\n        return dict1\n    if l1[0] is None and l2[0] is None and l3[0] is None:\n        dict1 = {}\n        dict1['results'] = []\n        dict1['results'].append(l2)\n        dict1['results'].append(l3)\n        return dict1\n    else:\n        return None\n    \ndef to_list(l1):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    if l1 is None:\n        return []\n    if l1['results'] is None:\n        return []\n    if isinstance(l1['results'], list):\n        return l1['results']\n    if isinstance(l1['results'], dict):\n        return [l1['results']]\n    else:\n        return []\n    \ndef to_dict(l1):\n    '''\n    Write a function to convert a list of lists to a dictionary.\n    '''\n    if l1 is None:\n        return {}\n    dict1 = {}\n    dict1['results'] = []\n    for l in l1:\n        if l is not None:\n            dict1['results'].append(l)\n    return dict1\n    \ndef to_zip_dict(l1):\n    '''\n    Write a function to convert a list of lists to a zip\n    '''\n    dict1 = {}\n    dict1['results'] = []\n    for l in l1:\n        if l is not None:\n            dict1['results'].append(l)\n    return dict"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1, l2, l3 = [1,2,3], ['a', 'b'], ['c', 'd']\n    # dict1 = dict()\n    # dict1.update(zip(l1,l2))\n    # dict1.update(zip(l3,l1))\n    # print(dict1)\n    # dict2 = dict()\n    # dict2.update(zip(l1,l2))\n    # dict2.update(zip(l3,l1))\n    # print(dict2)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = []\n    # l2 = []\n    # l3 = []\n    # for l in l1:\n    #     l1.append(l)\n    #     l2.append(l)\n    #     l3.append(l)\n    # return {'l1':l1, 'l2':l2, 'l3':l3}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 is None:\n        return {}\n    elif isinstance(l1, dict):\n        return l1\n    elif isinstance(l1, list):\n        return [convert_list_dictionary(x, None, None) for x in l1]\n    elif isinstance(l1, (list, tuple)):\n        return [l2, {k:convert_list_dictionary(v, None, None) for k, v in l1.items()}]\n    elif l2 is None:\n        return l3\n    else:\n        return l2\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in l1:\n        if i not in d1:\n            d1[i] = 1\n        else:\n            d1[i] += 1\n    for i in l2:\n        if i not in d2:\n            d2[i] = 1\n        else:\n            d2[i] += 1\n    for i in l3:\n        if i not in d3:\n            d3[i] = 1\n        else:\n            d3[i] += 1\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    from collections import OrderedDict\n    d = OrderedDict()\n    for k, v in zip(l1, l2):\n        d[k] = v\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # convert to list\n    l1 = [str(e) for e in l1]\n    l2 = [str(e) for e in l2]\n    l3 = [str(e) for e in l3]\n    # convert to dictionary\n    d = dict(zip(l1,l2,l3))\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = {}\n    for i in range(len(l1)):\n        l4[i] = l1[i]\n    for i in range(len(l2)):\n        l4[i] = l2[i]\n    for i in range(len(l3)):\n        l4[i] = l3[i]\n    return l4\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dic = {}\n    for i in range(len(l1)):\n        new_dic[l1[i]] = l2[i]\n    return new_dic\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    m = n/2\n    n_sum = (n/2) + (n/2) + (n/2) + (n/2) + n\n    if n_sum > m:\n        print(f'f(n) = {n_sum}')\n        print(f'f(n/2) = {m}')\n    return n_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    i = 2\n    if n % 2!= 0:\n        i += 1\n    if n % 3!= 0:\n        i += 2\n    if n % 4!= 0:\n        i += 3\n    if n % 5!= 0:\n        i += 4\n    return i\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    print(n)\n    if n==0:\n        return n\n    elif n<0:\n        return n\n    else:\n        result = n\n        for i in range(1,n):\n            result = max(result+i,n-i)\n        return result\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = -n**3 - n**2 - n\n    for n in range (2, n):\n        max_sum = max(max_sum, n*(n+1)/3)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    answer = 0\n    for i in range(1, n + 1):\n        answer = max(answer, (f(i/2) + f(i/3) + f(i/4) + f(i/5)))\n    return answer\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 6\n    else:\n        return max(get_max_sum (n/2), get_max_sum (n/3), get_max_sum (n/4), get_max_sum (n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max = 0\n    f = 1\n    for i in range (1, n):\n        f = f*i\n        if f > max:\n            max = f\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n<2:\n        return n\n    \n    return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f (n):\n        x = 1\n        for i in range(1, n):\n            x = (x * i) % n\n        return x\n    ans = 0\n    for i in range(1, n):\n        ans = ans + f(i)\n    return ans\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if(len(input_list[i]) > max_length):\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for x in input_list:\n        if x > max_length:\n            max_length = x\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output_list = []\n    list_length = 0\n    for item in input_list:\n        list_length += 1\n        if len(item) < list_length:\n            list_length = len(item)\n    for item in range(list_length):\n        output_list.append(input_list[item])\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    result = ''\n    for item in input_list:\n        if len(result) < len(item):\n            result = item\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Base case\n    if len(input_list) <= 1:\n        return input_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for element in input_list:\n        length_list.append(len(element))\n    return max(length_list)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in test_tup:\n            return False\n    return True\n    \n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # YOUR CODE HERE\n    return len(set(test_tup))==1\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if not test_tup:\n        return True\n    if len(test_tup) > 1:\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    # check for empty tuple\n    if test_tup == ():\n        return True\n    # check for multiple duplicates\n    for i in range(0,len(test_tup)):\n        if test_tup[i] in test_tup[i+1:]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n    \ndef get_test_tuple_distinct(tup):\n    '''\n    Write a function to get test tuple with no duplicates.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef get_test_tuple_uniq(tup):\n    '''\n    Write a function to get all the uniqe items of given tuple.\n    '''\n    unique_tup = []\n    for i in tup:\n        if i not in unique_tup:\n            unique_tup.append(i)\n    return unique_tup\n    \ndef get_test_tuple_uniq_distinct(tup):\n    '''\n    Write a function to get all the uniqe items of given tuple.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef is_valid_tuple(tup):\n    '''\n    Return if given tuple is valid or not.\n    '''\n    if len(tup)!= len(set(tup)):\n        return False\n    else:\n        return True\n        \ndef get_new_tup(tup, index):\n    '''\n    Return new tuple with given index and inserted index.\n    '''\n    new_tup = []\n    for i in tup:\n        new_tup.append(i)\n    new_tup.insert(index, str(index))\n    return new_tup\n    \ndef get_distinct_tup(tup):\n    '''\n    Return distinct tuple.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef get_uniq_tup(tup):\n    '''\n    Return uniqtuple.\n    '''\n    uniq_tup = []\n    for i in tup:\n        if i not in uniq_tup:\n            uniq_tup.append(i)\n    return uniq_tup\n    \ndef is_unique_tup(tup):\n    '''\n    Return if given tuple is unique or not.\n    '''\n    return len(tup) == len(set(tup))\n    \ndef is_valid_tuple_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    if len(tup)!= len(set(tup)):\n        return False\n    else:\n        return True\n    \ndef is_valid_tuple_uniq(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef is_valid_tuple_uniq_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef get_new_tup_distinct(tup):\n    '''\n    Return new tuple with given index and inserted index.\n    '''\n    new_tup = []\n    for i in tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    new_tup.insert(0, str(0))\n    return new_tup\n    \ndef get_distinct_tup_distinct(tup):\n    '''\n    Return distinct tuple.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef get_uniq_tup_distinct(tup):\n    '''\n    Return uniqtuple.\n    '''\n    uniq_tup = []\n    for i in tup:\n        if i not in uniq_tup:\n            uniq_tup.append(i)\n    return uniq_tup\n    \ndef is_unique_tup_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    return len(tup) == len(set(tup))\n    \ndef is_valid_tuple_uniq_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    return is_unique_tup_distinct(tup)\n    \ndef is_valid_tuple_uniq_distinct_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    return is_unique_tup_distinct(get_distinct_tup(tup))\n    \ndef get_new_tup_distinct_distinct(tup):\n    '''\n    Return new tuple with given index and inserted index.\n    '''\n    new_tup = []\n    for i in tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    new_tup.insert(0, str(0))\n    return new_tup\n    \ndef get_distinct_tup_distinct_distinct(tup):\n    '''\n    Return distinct tuple.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef get_uniq_tup_distinct_distinct(tup):\n    '''\n    Return uniqtuple.\n    '''\n    uniq_tup = []\n    for i in tup:\n        if i not in uniq_tup:\n            uniq_tup.append(i)\n    return uniq_tup\n    \ndef is_unique_tup_distinct_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    return is_unique_tup_distinct(get_distinct_tup(tup))\n    \ndef is_valid_tuple_uniq_distinct_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    return is_unique_tup_distinct(get_distinct_tup_distinct(tup))\n    \ndef is_valid_tuple_uniq_distinct_distinct_distinct(tup):\n    '''\n    Return if given tuple contains no duplicates.\n    '''\n    return is_unique_tup_distinct_distinct(get_distinct_tup_distinct_distinct(tup))\n    \ndef get_new_tup_distinct_distinct_distinct(tup):\n    '''\n    Return new tuple with given index and inserted index.\n    '''\n    new_tup = []\n    for i in tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    new_tup.insert(0, str(0))\n    return new_tup\n    \ndef get_distinct_tup_distinct_distinct_distinct(tup):\n    '''\n    Return distinct tuple.\n    '''\n    distinct_tup = []\n    for i in tup:\n        if i not in distinct_tup:\n            distinct_tup.append(i)\n    return distinct_tup\n    \ndef get_uniq_tup_distinct_distinct_distinct_distinct(tup):\n    '''"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_list = []\n    for tup in test_tup:\n        if tup not in distinct_list:\n            distinct_list.append(tup)\n    return len(distinct_list) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set from the tuple\n    a_set = set(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    a = [char for char in str1]\n    a.sort()\n    for i, char in enumerate(a):\n        if char!= a[i + 1]:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in count:\n        if count[char]!= 1:\n            return char\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return \"\"\n    char_dict = {}\n    for i in str1:\n        if i in char_dict:\n            char_dict[i] = char_dict[i] + 1\n        else:\n            char_dict[i] = 1\n    for i in char_dict.values():\n        if i == 1:\n            return chr(i + ord(\"a\"))\n    return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Declare a dictionary to store key value pairs\n    dictionary = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #convert the input string to lowercase\n    str1 = str1.lower()\n    #create an empty list to store the index of the first non-repeating character\n    non_repeating_list = []\n    #loop through the input string\n    for i in range(len(str1)):\n        #check if the character at current index is a repeating character\n        if str1[i] in non_repeating_list:\n            #add the current character to the list\n            non_repeating_list.append(str1[i])\n        else:\n            #if not then set a new index\n            non_repeating_list.append(str1[i])\n    #return the first non-repeating character as the second parameter of the function\n    return non_repeating_list[1]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code here\n    counter = 0\n    for i in str1:\n        if str1.count(i)>counter:\n            counter = str1.count(i)\n            return i\n    return '?'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_counts = dict()\n    for char in str1:\n        if char not in char_counts:\n            char_counts[char] = 1\n        else:\n            char_counts[char] += 1\n    char_counts = dict(sorted(char_counts.items()))\n    for key,value in char_counts.items():\n        if value > 1:\n            return key\n    return '?'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return(str1.replace(' ','').replace('a','e').replace('r','i').replace('t','a').replace('0','9').replace('3','m'))\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Python will run a for loop, which will give us the count of the number of occurrences of the first character in the string.\n    # It's like this:\n    # for char in str1:\n    #    count = char.count(char)\n    #    if count == 1:\n    #        return char\n    #     return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    temp = string.strip()\n    if string[0] == string[-1]:\n        return temp[0] == temp[0] and string[0] in (' ','.','?','!').strip()\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    r = re.match(regex, string)\n    if r is not None:\n        print(r.group())\n    else:\n        print('False')\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if not bool(re.search(regex, string)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string) == None)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # if string starts with a number or a letter \n    if string.startswith('0') or string.startswith('1'):\n        return True\n    elif string.startswith('X'):\n        return False\n    else: \n        return False\ndef check_alpha(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('$') or string.endswith('#'):\n        return True\n    elif string.endswith('y'):\n        return False\n    else: \n        return False\ndef check_digit(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('.'):\n        return True\n    elif string.endswith(','):\n        return False\n    else: \n        return False\ndef check_special(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('!') or string.endswith('\"'):\n        return True\n    elif string.endswith('\"') or string.endswith('\\'):\n        return False\n    else: \n        return False\ndef check_symbol(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('#'):\n        return True\n    elif string.endswith('y'):\n        return False\n    else: \n        return False\ndef check_period(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('.'):\n        return True\n    elif string.endswith(','):\n        return False\n    else: \n        return False\ndef check_digit_digit(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('.'):\n        return True\n    elif string.endswith(','):\n        return False\n    else: \n        return False\ndef check_digit_alpha(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('.'):\n        return True\n    elif string.endswith(','):\n        return False\n    else: \n        return False\ndef check_digit_special(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('.'):\n        return True\n    elif string.endswith(','):\n        return False\n    else: \n        return False\ndef check_digit_symbol(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('.'):\n        return True\n    elif string.endswith(','):\n        return False\n    else: \n        return False\ndef check_digit_period(string):\n    '''\n    Write a function to check whether a given string starts and ends with the same character or not.\n    '''\n    if string.endswith('.'):\n        return True\n    elif string.endswith(','):\n        return False\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if regex.search(string):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return string[0] == string[0]\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.search(string) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a,b,c]\n    num_list.sort()\n    if len(num_list)%2 == 0:\n        median_num = (num_list[int(len(num_list)/2)])\n    else:\n        median_num = (num_list[int(len(num_list)/2)-1]+num_list[int(len(num_list)/2)])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) > len(b):\n        x = a\n        y = b\n    elif len(b) > len(c):\n        x = b\n        y = c\n    else:\n        x = c\n        y = d\n    # I made a list of length three of the values \n    # I made a list of length three of the values \n    if len(x) > len(y):\n        x.sort()\n        y.sort()\n    if len(x) == len(y):\n        # If three numbers are the same length \n        # I want the middle number \n        return (x[len(x)//2] + y[len(y)//2]) / 2.0\n    elif len(x) < len(y):\n        # If three numbers are the same length \n        # I want the smallest number \n        return min(x,y)\n    elif len(x) > len(y):\n        # If three numbers are the same length \n        # I want the largest number \n        return max(x,y)\n    elif len(x) == len(y):\n        return max(x)\n    elif len(x) == 1:\n        return x[0]\n    else:\n        return y[0]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        small = a\n        large = b\n    else:\n        small = b\n        large = a\n    if a > c:\n        median = a\n    else:\n        median = c\n    while small < large:\n        mid = (small+large)//2\n        if mid % 2 == 0:\n            if mid >= median:\n                median = mid\n                small = mid\n        else:\n            if mid < median:\n                median = mid\n                large = mid\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=[]\n    for i in range(a,b):\n        for j in range(c,d):\n            x.append(i+j)\n    l=len(x)\n    if l%2==0:\n        median=x[l//2]+x[l//2-1]\n    else:\n        median=x[l//2]\n    return(median)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3:\n        return a[-1]\n    if len(b)<3:\n        return b[-1]\n    if len(c)<3:\n        return c[-1]\n    if len(a)>len(b)>len(c):\n        return (a+b+c)/3\n    elif len(a)>len(b)>len(c):\n        return (b+c+a)/3\n    elif len(a)>len(b)>len(c):\n        return (a+c+b)/3\n    elif len(a)<len(b)<len(c):\n        return (a+b+c)/3\n    elif len(a)<len(b)<len(c):\n        return (a+c+b)/3\n    elif len(a)>len(b)<len(c):\n        return (b+c+a)/3\n    elif len(a)>len(b)<len(c):\n        return (a+b+c)/3\n    elif len(a)<len(b)<len(c):\n        return (a+c+b)/3\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3:\n        return max(a)\n    if len(b)<3:\n        return max(b)\n    if len(c)<3:\n        return max(c)\n    a.sort()\n    b.sort()\n    c.sort()\n    if len(a)==0 or len(b)==0 or len(c)==0:\n        return max(a,b,c)\n    if a[len(a)//2] > b[len(b)//2] and a[len(a)//2] > c[len(c)//2]:\n        return a[len(a)//2]\n    if a[len(a)//2] > b[len(b)//2] and a[len(a)//2] < c[len(c)//2]:\n        return a[len(a)//2]\n    if a[len(a)//2] < b[len(b)//2] and a[len(a)//2] > c[len(c)//2]:\n        return a[len(a)//2]\n    if a[len(a)//2] < b[len(b)//2] and a[len(a)//2] < c[len(c)//2]:\n        return a[len(a)//2]\n    return (a[len(a)//2]+b[len(b)//2]+c[len(c)//2])//3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==0 or len(b)==0 or len(c)==0:\n        return -1\n    if len(a) == 1 and len(b)==1 and len(c)==1:\n        return (a[0]+b[0]+c[0])/3\n    if len(a)==1 and len(b)==1 and len(c)>1:\n        return (a[0]+b[0]+c[0])/3\n    a.sort()\n    b.sort()\n    c.sort()\n    if len(a)%2==0:\n        return (a[int(len(a)/2)]+b[int(len(a)/2)]+c[int(len(a)/2)])/3\n    if len(a)%2!=0:\n        return (a[int((len(a)/2)-1)]+b[int((len(a)/2)-1)]+c[int((len(a)/2)-1)])/3\n    a.sort()\n    b.sort()\n    c.sort()\n    return (a[int(len(a)/2)]+b[int(len(a)/2)]+c[int(len(a)/2)])/3\ndef main():\n    print(\"Hello, world!\")\n    # a = [1,2,3,4,5,6]\n    # b = [6,5,4,3,2,1]\n    # c = [6,5,4,3,2,1]\n    a = [1,2,3,4,5,6]\n    b = [6,5,4,3,2,1]\n    c = [6,5,4,3,2,1]\n    print(median_numbers(a,b,c))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=a+(a+b+c)/3\n    print(a)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print(a,b,c)\n    if (a+b+c) % 3 == 0:\n        return (a+b+c)/3\n    elif (a+b+c) % 3 == 1:\n        return a\n    elif (a+b+c) % 3 == 2:\n        return b\n    elif (a+b+c) % 3 == 0:\n        return c\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a%2 == 0):\n        if (b%2 == 0):\n            if (c%2 == 0):\n                return(a+b+c)/3\n            else:\n                return((a+b)/2)\n        else:\n            if (c%2 == 0):\n                return((a+b)/2)\n            else:\n                return((a+b)/2)\n    else:\n        if (c%2 == 0):\n            return((a/2)+b)\n        else:\n            return((a/2)+b)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += int(str(num)[-1])\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # TODO: write your solution here\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda x: int(x), filter(lambda x: x.isdigit(), nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums if type(i) == int])\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(set(map(int,num)))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def add_digits(nums):\n        total = 0\n        for i in nums:\n            total += i\n        return total\n    \n    return add_digits(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    num = 0\n    for i in range(len(nums)):\n        num = num + (nums[i]*10**(len(nums)-i-1))\n    return num\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += i\n    return s"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i])\n        test_tup2[i] = int(test_tup2[i])\n    test_tup1 = int(test_tup1)\n    test_tup2 = int(test_tup2)\n    if(test_tup1[0] + test_tup2[0] == 0):\n        return (0)\n    if(test_tup1[0] - test_tup2[0] == 0):\n        return (0)\n    if(test_tup1[1] - test_tup2[1] == 0):\n        return (0)\n    if(test_tup1[1] + test_tup2[1] == 0):\n        return (0)\n    if(test_tup1[2] - test_tup2[2] == 0):\n        return (0)\n    if(test_tup1[2] + test_tup2[2] == 0):\n        return (0)\n    if(test_tup1[0] * test_tup2[1] == test_tup1[1] * test_tup2[2] == test_tup1[2] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[0] == test_tup1[1] * test_tup2[1] == test_tup1[2] * test_tup2[2]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[1] == test_tup1[2] * test_tup2[2] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[0] == test_tup1[1] * test_tup2[1] == test_tup1[2] * test_tup2[2]):\n        return (0)\n    if(test_tup1[0] * test_tup2[1] == test_tup1[2] * test_tup2[2] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[1] * test_tup2[0] == test_tup1[2] * test_tup2[1]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[0] == test_tup1[1] * test_tup2[1] == test_tup1[2] * test_tup2[2]):\n        return (0)\n    if(test_tup1[0] * test_tup2[1] == test_tup1[2] * test_tup2[2] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[0] == test_tup1[1] * test_tup2[1] == test_tup1[2] * test_tup2[2]):\n        return (0)\n    if(test_tup1[0] * test_tup2[1] == test_tup1[2] * test_tup2[2] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[1] == test_tup1[2] * test_tup2[2] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[1] * test_tup2[0] == test_tup1[2] * test_tup2[1]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[1] * test_tup2[0] == test_tup1[2] * test_tup2[1]):\n        return (0)\n    if(test_tup1[0] * test_tup2[0] == test_tup1[1] * test_tup2[1] == test_tup1[2] * test_tup2[2]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[1] * test_tup2[0] == test_tup1[2] * test_tup2[1]):\n        return (0)\n    if(test_tup1[0] * test_tup2[1] == test_tup1[2] * test_tup2[2] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[1] * test_tup2[0] == test_tup1[2] * test_tup2[1]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[2] * test_tup2[1] == test_tup1[1] * test_tup2[0]):\n        return (0)\n    if(test_tup1[0] * test_tup2[2] == test_tup1[1] * test_tup2[0] == test_tup1[2] * test_tup2[1]):\n        return (0)\n    if(test_tup1[0] * test_tup2[0] == test_tup1[1] * test_tu"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = []\n    for i in range(0, len(test_tup1)):\n        #print(i)\n        if test_tup1[i]!= test_tup2[i]:\n            #print(test_tup1[i] + test_tup2[i])\n            res.append(test_tup1[i] + test_tup2[i])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    # Initialize the result\n    result = []\n    for i in range(l1):\n        result.append((test_tup1[i] ^ test_tup2[i]) & 0xFFFFFFFF)\n    # Convert the result to an unsigned 16-bit integer.\n    result = (result & 0xFFFFFFFF)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #creating tuples\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        result = result ^ test_tup2[i]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup_xor = []\n    for i in range(0, len(test_tup1)):\n        if i == 0:\n            test_tup_xor.append(test_tup1[i] ^ test_tup2[i])\n        elif i == 1:\n            test_tup_xor.append(test_tup1[i] ^ test_tup2[i])\n    return test_tup_xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = 0\n        else:\n            test_tup1[i] = 1\n    return test_tup1\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1, test_tup2 = test_tup1 + (0,), test_tup2 + (0, )\n    t1, t2 = test_tup1, test_tup2\n    z = 0\n    for i in t1:\n        z = z ^ i\n    for i in t2:\n        z = z ^ i\n    return z\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    #The bitwise xor operation is represented as:\n    #xor(a, b) = a ^ b, where a, b are the bitwise xor values.\n    xor_val = 0\n    for i in range(0, len(test_tup1)):\n        xor_val = xor_val ^ test_tup1[i]\n    for i in range(0, len(test_tup2)):\n        xor_val = xor_val ^ test_tup2[i]\n    return xor_val\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Length of test tuples are not same.')\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = str(bin(test_tup1[i])[2:].zfill(8))\n        test_tup2[i] = str(bin(test_tup2[i])[2:].zfill(8))\n    \n    output = []\n    for tup in test_tup1:\n        output.append(tup[0])\n    for tup in test_tup2:\n        output.append(tup[0])\n    \n    output = ''.join(output)\n    return output\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    i=0\n    while i<len(test_list):\n        i=i+1\n        freq=0\n        for j in range(0,len(test_list)-1):\n            if test_list[j]==test_list[j+1]:\n                freq=freq+1\n        freq=freq+1\n        if freq==len(test_list):\n            test_list.remove(test_list[len(test_list)-1])\n            test_list.remove(test_list[len(test_list)-2])\n            print(f'The new list is {test_list}')\n            print(f'The number of unique tuples is {len(test_list)}')\n            print('\\n')\n    return test_list\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = []\n    for test in test_list:\n        tup = test[1]\n        if tup not in unique_tuples:\n            unique_tuples.append(tup)\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    #for i in range(len(test_list)):\n    for i in range(len(test_list)):\n        if test_list[i]['status'] not in freq_dict:\n            freq_dict[test_list[i]['status']] = 1\n        else:\n            freq_dict[test_list[i]['status']] += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # use sets\n    return sum(1 for x in test_list if x in set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    counter = 0\n    for i in test_list:\n        if i:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = [tuple(test_list[i:i+5]) for i in range(0, len(test_list), 5)]\n    return len(set(unique_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for items in test_list:\n        count += len(items)\n    print(count)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = set(test_list)\n    return len(unique_tuple)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # TODO\n    import collections\n    freq_list = []\n    for i in range(len(test_list)):\n        count_freq = collections.Counter(test_list[i])\n        freq_list.append(count_freq.most_common(1))\n    return freq_list\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuples(tup1, tup2):\n        '''\n        Function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        return tup1[0]+tup2[0], tup1[1]+tup2[1]\n    def calc_sum(nested_tup1, nested_tup2):\n        '''\n        Function to calculate sum of two given tuples.\n        '''\n        return nested_tup1[0]+nested_tup2[0], nested_tup1[1]+nested_tup2[1]\n    def calc_prod(nested_tup1, nested_tup2):\n        '''\n        Function to calculate product of two given tuples.\n        '''\n        return nested_tup1[0]*nested_tup2[0], nested_tup1[1]*nested_tup2[1]\n    def calc_div(nested_tup1, nested_tup2):\n        '''\n        Function to calculate quotient of two given tuples.\n        '''\n        return nested_tup1[0]/nested_tup2[0], nested_tup1[1]/nested_tup2[1]\n    \n    if (type(test_tup1) is tuple and type(test_tup2) is tuple):\n        print(test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n        test_tup1, test_tup2 = add_tuples(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_sum(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_prod(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_div(test_tup1, test_tup2)\n    elif (type(test_tup1) is tuple and type(test_tup2) is list):\n        print(test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n        test_tup1, test_tup2 = add_tuples(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_sum(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_prod(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_div(test_tup1, test_tup2)\n    elif (type(test_tup1) is list and type(test_tup2) is list):\n        print(test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n        test_tup1, test_tup2 = add_tuples(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_sum(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_prod(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_div(test_tup1, test_tup2)\n    elif (type(test_tup1) is list and type(test_tup2) is tuple):\n        print(test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n        test_tup1, test_tup2 = add_tuples(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_sum(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_prod(test_tup1, test_tup2)\n        test_tup1, test_tup2 = calc_div(test_tup1, test_tup2)\n    else:\n        print(\"Invalid Inputs\")\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup_list = []\n    for i in test_tup1:\n        new_tup_list.append(i)\n    for j in test_tup2:\n        new_tup_list.append(j)\n    return new_tup_list\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    if (len(test_tup1)!= len(test_tup2)):\n        return -1\n    \n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] + test_tup2[i])\n    return result\n    \n    \n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #get first tuple\n    first_tup = test_tup1\n    #get second tuple\n    second_tup = test_tup2\n    #get total length of the tuples\n    total_length = len(first_tup) + len(second_tup)\n    #create an empty list\n    list_of_tuples = []\n    #check if the length of the tuples is equal to the total length\n    if total_length == len(first_tup):\n        #create a new tuple and append to the list\n        #add the tuples to the list\n        for i in range(len(first_tup)):\n            list_of_tuples.append(first_tup[i])\n    else:\n        #if the length of the tuples is not equal to the total length\n        #write code to raise an exception\n        raise Exception('The length of the tuples must be equal to the total length of the tuples')\n    #get the index of the tuple\n    index = 0\n    #iterate over the list\n    while index < total_length:\n        #add the elements of the tuple\n        #add the index to the tuple\n        list_of_tuples.append(list_of_tuples[index])\n        #increment index\n        index += 1\n    #add the index to the tuple\n    list_of_tuples.append(index)\n    #return the result\n    return list_of_tuples\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in test_tup1:\n        for j in test_tup2:\n            print (i + j)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # TODO: Replace the code below with appropriate code.\n    result = []\n    for index, value in enumerate(test_tup1):\n        result.append((index, value + test_tup2[index]))\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    def add_tuples(tup1, tup2):\n        '''\n        Returns tuple with sum of elements in tup1 and tup2\n        '''\n        return (tup1[0] + tup2[0], tup1[1] + tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Variable to store result\n    result = 0\n    \n    # Iterate over both tuples\n    for i in range(len(test_tup1)):\n        \n        # Iterate over both tuples\n        for j in range(len(test_tup2)):\n            \n            # Add the tuple elements\n            result = result + test_tup1[i] + test_tup2[j]\n        \n    # Return result\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tuple1 = test_tup1[1] # create a reference to the first item\n    nested_tuple2 = test_tup2[1] # create a reference to the second item\n    \n    # write code to perform the addition of the two nested tuples\n    nested_tuple1_sum = 0\n    for nested_tuple in test_tup1[1]:\n        nested_tuple1_sum += nested_tuple\n    nested_tuple2_sum = 0\n    for nested_tuple in test_tup2[1]:\n        nested_tuple2_sum += nested_tuple\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i][j][0] == test_tup2[j][0] and test_tup1[i][j][1] == test_tup2[j][1]:\n                print(i, j, test_tup1[i][j][0], test_tup1[i][j][1])\n                test_tup1[i][j][0] += test_tup2[j][0]\n                test_tup1[i][j][1] += test_tup2[j][1]\n    return test_tup1\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return average(a,b)/2\ndef stdev(a,b):\n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    return stdev(a,b)/len(a)\ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    return max(a,b)\ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    return a+b/2"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(a,b)\n        return minimum(b,a)\n    elif a == b:\n        return a\n    else:\n        return b\n    \nprint(minimum(5,7))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min_number = a\n    if (b < min_number):\n        min_number = b\n    return min_number\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b): \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a < b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        smaller = a\n        bigger = b\n    elif a < b:\n        smaller = b\n        bigger = a\n    else:\n        smaller = a\n        bigger = b\n    while(smaller!= bigger):\n        diff = larger - smaller\n        if diff % 2!= 0:\n            if(diff < bigger):\n                smaller = diff\n            else:\n                bigger = diff\n        else:\n            if diff == bigger:\n                return larger\n            else:\n                bigger = diff\n    return smaller\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #check for negatives\n    if a<b:\n        a,b=b,a\n    #if all negatives\n    if a<0 and b<0:\n        return 0\n    elif a<0 and b>0:\n        return b\n    elif b<0 and a>0:\n        return a\n    else:\n        return a+b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuplex[1]:\n        tuple2 = tuple1[0]\n        if tuple2 in tuplex[1:]:\n            return tuplex[1:]\n        else:\n            return False\n    else:\n        return False\ndef check_key(key):\n    '''\n    Write a function to check whether a given key is in a dictionary.\n    '''\n    if key in dictionary.keys():\n        return key\n    else:\n        return False\ndef find_in_dictionary(key,dictionary):\n    '''\n    Write a function to find an element in a dictionary.\n    '''\n    if check_tuplex(dictionary[key],dictionary.keys()):\n        return dictionary[key]\n    else:\n        return False\ndef remove_in_dictionary(key,dictionary):\n    '''\n    Write a function to remove an element from a dictionary.\n    '''\n    if check_key(key) and key in dictionary.keys():\n        del dictionary[key]\n        return True\n    else:\n        return False\ndef print_tuple(tuplex):\n    '''\n    Write a function that prints the tuple in a nice way.\n    '''\n    print(\"\\n-------------------------------\")\n    print(\"TUPLE\")\n    print(\"-------------------------------\")\n    print(*tuplex,sep=\", \")\n    print(\"\\n-------------------------------\")\ndef print_dictionary(dictionary):\n    '''\n    Write a function that prints the dictionary in a nice way.\n    '''\n    for key,value in dictionary.items():\n        print(\"\\n-------------------------------\")\n        print(\"DICTIONARY\")\n        print(\"-------------------------------\")\n        print(*value,sep=\", \")\n        print(\"\\n-------------------------------\")\ndef display(dictionary):\n    '''\n    Write a function that prints the dictionary in a nice way.\n    '''\n    for key,value in dictionary.items():\n        print(\"\\n-------------------------------\")\n        print(\"DICTIONARY\")\n        print(\"-------------------------------\")\n        print(*value,sep=\", \")\n        print(\"\\n-------------------------------\")\ndef main():\n    print(\"\\n-------------------------------\")\n    print(\"1. EXISTENT TUPLES\")\n    print(\"2. MISSING TUPLES\")\n    print(\"3. REMOVED TUPLES\")\n    print(\"4. VALIDATE TUPLES\")\n    print(\"5. DISPLAY DICTIONARY\")\n    print(\"6. CLEAR DICTIONARY\")\n    choice = input(\"ENTER YOUR CHOICE: \")\n    if choice == \"1\":\n        tuplex = tuple()\n        tuplex1 = tuple()\n        tuplex2 = tuple()\n        tuple1 = tuple()\n        tuple2 = tuple()\n        tuple3 = tuple()\n        tuple4 = tuple()\n        tuple5 = tuple()\n        tuple6 = tuple()\n        dictionary = dict()\n        while True:\n            try:\n                user_input = int(input(\"1. EXISTENT TUPLES\\n2. MISSING TUPLES\\n3. REMOVED TUPLES\\n4. VALIDATE TUPLES\\n5. DISPLAY DICTIONARY\\n6. CLEAR DICTIONARY\\nENTER YOUR CHOICE: \"))\n            except ValueError:\n                print(\"INVALID CHOICE. PLEASE REPRODUCE O INPUT\")\n                continue\n            else:\n                if user_input == 1:\n                    tuplex = tuple()\n                    tuplex1 = tuple()\n                    tuplex2 = tuple()\n                    tuple1 = tuple()\n                    tuple2 = tuple()\n                    tuple3 = tuple()\n                    tuple4 = tuple()\n                    tuple5 = tuple()\n                    tuple6 = tuple()\n                    dictionary = dict()\n                    print_tuple(tuplex)\n                    print(\"\\n-------------------------------\")\n                    print(\"DICTIONARY\")\n                    print(\"-------------------------------\")\n                    print(*tuplex1,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuplex2,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple1,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple2,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple3,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple4,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple5,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple6,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(\"\\n-------------------------------\")\n                    print(\"\\n-------------------------------\")\n                    print(\"\\n-------------------------------\")\n                    print(\"\\n-------------------------------\")\n                    break\n                elif user_input == 2:\n                    tuplex = tuple1\n                    tuplex1 = tuple()\n                    tuplex2 = tuple()\n                    tuple1 = tuple()\n                    tuple2 = tuple()\n                    tuple3 = tuple()\n                    tuple4 = tuple()\n                    tuple5 = tuple()\n                    tuple6 = tuple()\n                    dictionary = dict()\n                    print_dictionary(dictionary)\n                    print(\"\\n-------------------------------\")\n                    print(\"DICTIONARY\")\n                    print(\"-------------------------------\")\n                    print(*tuplex1,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuplex2,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple1,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple2,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple3,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple4,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple5,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple6,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(\"\\n-------------------------------\")\n                    break\n                elif user_input == 3:\n                    tuplex = tuple1\n                    tuplex1 = tuple()\n                    tuplex2 = tuple()\n                    tuple1 = tuple()\n                    tuple2 = tuple()\n                    tuple3 = tuple()\n                    tuple4 = tuple()\n                    tuple5 = tuple()\n                    tuple6 = tuple()\n                    dictionary = dict()\n                    remove_in_dictionary(\"4\",\"dictionary.txt\")\n                    print_dictionary(dictionary)\n                    print(\"\\n-------------------------------\")\n                    print(\"DICTIONARY\")\n                    print(\"-------------------------------\")\n                    print(*tuplex1,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuplex2,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple1,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple2,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple3,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple4,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple5,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuple6,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(\"\\n-------------------------------\")\n                    break\n                elif user_input == 4:\n                    tuplex = tuple1\n                    tuplex1 = tuple()\n                    tuplex2 = tuple()\n                    tuple1 = tuple()\n                    tuple2 = tuple()\n                    tuple3 = tuple()\n                    tuple4 = tuple()\n                    tuple5 = tuple()\n                    tuple6 = tuple()\n                    dictionary = dict()\n                    print_dictionary(dictionary)\n                    print(\"\\n-------------------------------\")\n                    print(\"DICTIONARY\")\n                    print(\"-------------------------------\")\n                    print(*tuplex1,sep=\", \")\n                    print(\"\\n-------------------------------\")\n                    print(*tuplex2,se"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[i]:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 1:\n        if tuplex[0] == tuple1:\n            return True\n        else:\n            return False\n    elif len(tuplex) == 2:\n        if tuplex[0] == tuple1[0] and tuplex[1] == tuple1[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 not in tuplex:\n        return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 == tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex==tuple1:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if tuple1.index(i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"Odd\"\n    else: \n        return \"Even\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = (x % 2) * (-1)\n    return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = \"\"\n    for i in str(x):\n        if i in \"012\":\n            parity += i\n        else:\n            parity += \"0\"\n    if int(parity[0])+int(parity[1])==int(parity[2]):\n        parity = parity[0]+parity[1]\n    if int(parity[0])+int(parity[2])==int(parity[1]):\n        parity = parity[0]+parity[2]\n    if int(parity[0])+int(parity[1])==int(parity[0]):\n        parity = parity[0]\n    return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # YOUR CODE HERE\n    if x%2==0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #print(x)\n    if x%2==0:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #print(x)\n    if x % 2 == 0:\n        return \"Parity is even\"\n    else:\n        return \"Parity is odd\"\n    #return \"Parity is even\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n < 0:\n        n = n * -1\n        return rearrange_bigger(n)\n    \n    digits = list(str(n))\n    \n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            return n * 10 + digits[i]\n    return n * 10 + digits[-1]\n    \nprint(rearrange_bigger(9999))"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    for i in range(n):\n        n = str(n)\n        if n[i] == '0':\n            n = n[:i] + '1' + n[i+1:]\n        else:\n            n = n[:i] + '0' + n[i+1:]\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    '''\n    If n is odd, shift digits left by 1.\n    If n is even, shift digits left by 2.\n    '''\n    \n    '''\n    If n is even, the result is n // 10 + 1.\n    Else, the result is n // 10.\n    '''\n    \n    '''\n    If the number is even, do not shift.\n    Otherwise, shift digits.\n    '''\n    \n    '''\n    You should do this in O(1) for each possible permutation.\n    '''\n    \n    \n    if n % 10 == 1:\n        return n // 10 + 1\n    else:\n        return n // 10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        new_number = \"\"\n        for x in n:\n            if x not in new_number:\n                new_number += x\n            else:\n                new_number += str(x)\n        return new_number\n    return next_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    size = len(n)\n    remainder = size % 2\n    if remainder == 0:\n        n = '0' + n\n    else:\n        n = '1' + n\n    n = '0' * remainder + n\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Time - O(logn)\n    # Space - O(1)\n    # The idea is to first sort the numbers and create the pairs\n    # and then sort each pair so the biggest number is the smallest\n    arr = n.split()\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n    arr.sort()\n    # Time - O(n)\n    # Space - O(1)\n    # We need to store each pair in an array\n    # This is a problem that I might have to search for O(n).\n    # The time complexity here is O(n), I need to sort the array\n    # and then recurse on each pair\n    # Space - O(1)\n    # We will sort all the numbers in the list and then find the largest element\n    # in the list\n    # Time - O(n)\n    # Space - O(1)\n    # One pointer and the other pointer\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = ''.join(reversed([str(x) for x in sorted(str(n))]))\n    return new_num\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = []\n    for i in range(len(n)):\n        if n[i] not in arr:\n            arr.append(n[i])\n        else:\n            return arr[-1] + arr[0]\n    if len(arr) > 2:\n        return arr[0] + arr[1] + arr[-1]\n    else:\n        return arr[0] + arr[1]\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(list(reversed(str(n)))) + str(n)[-1]*10)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return ''.join(str(s) for s in reversed(list(map(int, list(str(n))))))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    result = 0\n    \n    while len(nums1) > 0 and len(nums2) > 0:\n        \n        if nums1[0] < nums2[0]:\n            result += 1\n            \n            heapq.heappop(nums1)\n        else:\n            result += 1\n            \n            heapq.heappop(nums2)\n    \n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #\n    # Write your code here.\n    #\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, nums1[i])\n        heapq.heappush(heap, nums2[i])\n        \n    for i in range(k):\n        nums1.pop()\n        nums2.pop()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if len(nums1) == 1:\n        return k_smallest_pairs(nums2, nums1, 1)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minHeap = []\n    i = 0\n    j = 0\n    heapq.heapify(minHeap)\n    for num in nums1:\n        while i < len(nums2) and num < nums2[i]:\n            heapq.heappush(minHeap, -nums2[i])\n            i+=1\n        while j < len(nums1) and nums2[j] < num:\n            heapq.heappush(minHeap, nums1[j])\n            j+=1\n        if len(minHeap) == k:\n            print(minHeap)\n            print(nums1)\n            print(nums2)\n            return minHeap\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or len(nums1)<=0 or len(nums2)<=0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j))\n    for i in range(k):\n        if heap:\n            smallest = heapq.heappop(heap)\n            if smallest[1]!= i:\n                heapq.heappush(heap, smallest)\n    return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in nums1:\n        heapq.heappush(heap, (i,0))\n    for j in nums2:\n        heapq.heappush(heap, (j,1))\n    # print(heap)\n    for _ in range(k):\n        while len(heap) > 0 and heapq.heappop(heap)[1] >= heapq.heappop(heap)[1]:\n            print(heapq.heappop(heap)[0],heapq.heappop(heap)[1])\n            # print(heapq.heappop(heap)[0],heapq.heappop(heap)[1])\n            \n    # print(heap)\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if heapq.heappop(heap)[1] > heapq.heappop(heap)[1]:\n                # print(heapq.heappop(heap)[0],heapq.heappop(heap)[1])\n                result.append([heapq.heappop(heap)[0],heapq.heappop(heap)[1]])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1_heap = []\n    nums2_heap = []\n    for num in nums1:\n        heapq.heappush(nums1_heap, num)\n    for num in nums2:\n        heapq.heappush(nums2_heap, num)\n    small_num = -1\n    small_num_idx = -1\n    small_num_count = 0\n    small_num_pair = []\n    while len(nums1_heap) > 0 and len(nums2_heap) > 0:\n        if nums1_heap[0] == nums2_heap[0]:\n            small_num_idx += 1\n            small_num = nums1_heap.pop(0)\n            small_num_count += 1\n        else:\n            small_num_idx += 1\n            small_num = nums2_heap.pop(0)\n            small_num_count += 1\n        small_num_pair.append(small_num_idx)\n        small_num_pair.append(small_num)\n        if small_num_count == k:\n            break\n    small_pair_index = []\n    for i in range(0, len(small_num_pair) - 1):\n        small_pair_index.append(small_num_pair[i] - 1)\n    small_pair_index.append(small_num_pair[-1] + 1)\n    small_pair_index.sort()\n    return small_pair_index, small_pair_index[k-1]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(pairs)\n    count = 0\n    for i in nums1:\n        for j in nums2:\n            if (i, j) in pairs:\n                count += 1\n                if count == k:\n                    pairs.append((i,j))\n                    count = 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in nums1:\n        heapq.heappush(h, (i, 1))\n    for j in nums2:\n        heapq.heappush(h, (j, 2))\n    m = 0\n    for i in range(k):\n        if h[0][1]!= h[1][1]:\n            m += 1\n            heapq.heappop(h)\n    print('minimum number of k smallest pairs is', m)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_tuple = tuple(sorted(list1)[0])\n    for i in range(1, len(list1)):\n        if min_tuple > list1[i]:\n            min_tuple = list1[i]\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        return []\n    elif len(list1)==2:\n        return list1[0]*list1[1]\n    else:\n        # initialize and add all pair tuples to new list\n        temp=[]\n        for i in range(0,len(list1)):\n            for j in range(i+1,len(list1)):\n                temp.append((list1[i][0]*list1[j][1],list1[i][1]))\n        # sort\n        temp.sort()\n        # return first element\n        return temp[0]"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(0, len(list1)-1):\n        min_product = min(list1[i][1], list1[i][1] + list1[i+1][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(len(list1)-1):\n        product = product * list1[i][0]\n        for j in range(i+1, len(list1)):\n            product = product * list1[j][0]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 1:\n        print(\"There are no tuples\")\n    elif len(list1) == 1:\n        print(list1[0], 'and ', list1[0])\n    else:\n        min_a = min(list1[0][1], list1[1][1])\n        min_b = min(list1[0][1], list1[1][1])\n        min_c = min(list1[0][1], list1[1][1])\n        min_d = min(list1[0][1], list1[1][1])\n        for index in range(0, len(list1)):\n            if list1[index][1] < min_a:\n                min_a = list1[index][1]\n            elif list1[index][1] < min_b:\n                min_b = list1[index][1]\n            elif list1[index][1] < min_c:\n                min_c = list1[index][1]\n            elif list1[index][1] < min_d:\n                min_d = list1[index][1]\n        print(list1[0][0], list1[1][0], min_a, min_b, min_c, min_d)\n        \n        \ndef find_minimum_pair(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 1:\n        print(\"There are no tuples\")\n    elif len(list1) == 1:\n        print(list1[0], 'and ', list1[0])\n    else:\n        min_a = min(list1[0][1], list1[1][1])\n        min_b = min(list1[0][1], list1[1][1])\n        min_c = min(list1[0][1], list1[1][1])\n        min_d = min(list1[0][1], list1[1][1])\n        for index in range(0, len(list1)):\n            if list1[index][1] < min_a:\n                min_a = list1[index][1]\n            elif list1[index][1] < min_b:\n                min_b = list1[index][1]\n            elif list1[index][1] < min_c:\n                min_c = list1[index][1]\n            elif list1[index][1] < min_d:\n                min_d = list1[index][1]\n        print(list1[0][0], list1[1][0], min_a, min_b, min_c, min_d)\n        "
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = (list1[0] * list1[1])\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            minimum_product = min(minimum_product, (list1[i] * list1[j]))\n    return minimum_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0]\n    for i in range(len(list1)):\n        if list1[i][0] < min:\n            min = list1[i][0]\n    for i in range(len(list1)):\n        if list1[i][0] == min:\n            for j in range(len(list1)):\n                if list1[j][0] < list1[i][0]:\n                    temp = list1[j]\n                    list1[j] = list1[i]\n                    list1[i] = temp\n    return list1\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        min_product = min(list1[i][0],list1[i][1],min_product)\n    return min_product\n    \ndef main():\n    list_a=[(1,3,5),(2,4,7),(3,5,9),(4,6,10)]\n    print(min_product_tuple(list_a))\n    \n    list_b=[(1,3,5),(2,4,7),(3,5,9),(4,6,10)]\n    print(min_product_tuple(list_b))\n    \n    list_c=[(1,3,5),(2,4,7),(3,5,9),(4,6,10)]\n    print(min_product_tuple(list_c))\n    \n    list_d=[(1,3,5),(2,4,7),(3,5,9),(4,6,10)]\n    print(min_product_tuple(list_d))\n    \n    \nmain()"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l=[]\n    for i in listval:\n        l.append(i[0])\n    d={}\n    for i in l:\n        d[i]=l.count(i)\n    min_val=min(d,key=d.get)\n    return min_val\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    l=[]\n    for i in listval:\n        l.append(i[0])\n    d={}\n    for i in l:\n        d[i]=l.count(i)\n    max_val=max(d,key=d.get)\n    return max_val\ndef min_max(listval):\n    '''\n    Write a function to find the minimum and maximum value in a given heterogeneous list.\n    '''\n    l=[]\n    for i in listval:\n        l.append(i[0])\n    d={}\n    for i in l:\n        d[i]=l.count(i)\n    max_val=max(d,key=d.get)\n    min_val=min(d,key=d.get)\n    return (max_val,min_val)\ndef get_mid(val_list):\n    '''\n    Return the middle value in the given list.\n    '''\n    return val_list[len(val_list)//2]\ndef get_sorted_list(listval):\n    '''\n    Return a new sorted list from the given list.\n    '''\n    return sorted(listval,key=lambda x: x[0])\ndef get_longest_substring(strval):\n    '''\n    Return the longest substring in a given string.\n    '''\n    # count the number of the characters in the string\n    l=[]\n    count=0\n    for i in strval:\n        l.append(i)\n        count=count+1\n    # find the first occurance of the longest substring\n    d=max_val(l)\n    # iterate through the string and make a substring out of it\n    # if it contains the same substring as the current substring\n    s=\"\"\n    for i in l:\n        if(d==len(strval)):\n            break\n        if(strval.find(i)==d):\n            s=s+i\n        else:\n            break\n    return s\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    min_index = 0\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = 0\n    for i in listval:\n        if i<minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval[0], listval[1])\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    list_min = listval[0]\n    for v in listval:\n        if v < list_min:\n            list_min = v\n    return list_min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #pass # if you don't have this function, you can just comment this line out\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)\\1+', r'\\1_\\2', word)\n    #return re.sub(r'(.)\\1+', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0].isupper() or word[0]=='_':\n        return word\n    else:\n        return word+'_'\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word[0].islower() or word[0]=='_':\n        return word\n    else:\n        return word+'_'\ndef snake_case_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_':\n        return word[1:]\n    else:\n        return word[0]+'_'+word[1:]\ndef camel_case_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word[0]=='_':\n        return word[1:]\n    else:\n        return word[0]+'_'+word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    tokens = word.split('_')\n    return ''.join(x.capitalize() for x in tokens)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # your code goes here\n    camel_case_word = \"\"\n    if(word[0].upper() == word[1] or word[0].upper() == word[0].lower()):\n        camel_case_word = word[0].upper()\n    else:\n        camel_case_word = word[0].lower() + word[1].upper()\n    return camel_case_word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.match('^[a-zA-Z]+$', word):\n        return word.upper()\n    else:\n        return word.title()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if re.match('^[a-zA-Z]+$', word):\n        return word.lower()\n    else:\n        return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string on whitespace and take the first word (the first character) and then\n    # join the remaining words using a single space.\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    m = re.search('(.)([A-Z][a-z]+)', word)\n    if m!= None:\n        return m.group(1).lower() + m.group(2).lower()\n    else:\n        return word\n        \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('(.)([a-z][A-Z][a-z])', r'\\1_\\2', word).lower()\n    \ndef camel_to_snake2(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n    \ndef snake_to_snake2(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    m = re.search('([a-z])_([A-Z])', word)\n    if m!= None:\n        return m.group(1).lower() + '_' + m.group(2).lower()\n    else:\n        return word\n        \ndef camel_to_snake_2(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n    \ndef snake_to_snake_2(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n        \ndef camel_to_snake_3(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    m = re.search('([a-z])_([A-Z])', word)\n    if m!= None:\n        return m.group(1).lower() + '_' + m.group(2).lower() + '_' + m.group(3).lower()\n    else:\n        return word\n        \ndef snake_to_snake_3(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower() + '_' + m.group(3).lower(), word).lower()\n        \ndef snake_to_snake_3(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower() + '_' + m.group(3).lower(), word).lower()\n        \ndef snake_to_snake_4(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])_([a-z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower() + '_' + m.group(3).lower() + '_' + m.group(4).lower(), word).lower()\n        \ndef snake_to_snake_4(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])_([a-z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower() + '_' + m.group(3).lower() + '_' + m.group(4).lower(), word).lower()\n        \ndef snake_to_snake_4(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])_([a-z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower() + '_' + m.group(3).lower() + '_' + m.group(4).lower(), word).lower()\n        \ndef camel_to_snake_5(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n    \ndef snake_to_snake_5(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n        \ndef snake_to_snake_5(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n        \ndef snake_to_snake_6(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n    \ndef snake_to_snake_6(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n        \ndef snake_to_snake_6(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n    \ndef snake_to_snake_7(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n    \ndef snake_to_snake_7(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n        \ndef snake_to_snake_7(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), word).lower()\n        \ndef snake_to_snake_8(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub('([a-z])_([A-Z])', lambda m: m.grou"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Create a regular expression for the snake case to camel case mapping\n    pattern = r'((?<=[a-z])[A-Z](?=[A-Z][a-z]))|((?<=[A-Z])(?=[A-Z][a-z]))|((?<=[0-9])(?=[0-9]))|((?<=[0-9])([A-Z][a-z]))|([A-Z][a-z](?!\\W))'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z])','\\g<1>'.upper(),word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef camel_to_snake_2(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef camel_to_snake_2(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])_([a-z])', r'\\1_\\2', word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef camel_to_snake_3(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef camel_to_snake_3(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_2(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_2(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_3(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_3(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_4(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_4(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_5(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_5(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_6(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_6(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_7(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_7(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_8(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_8(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([A-Z])_([a-z])', r'\\1_\\2', word).lower()\ndef snake_to_camel_9(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])_([A-Z])', r'\\1_\\2', word).lower()\ndef snake_to"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(0,len(l)):\n        if l[i] % 2 == 1:\n            l[i] = l[i] // 2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    #remove odd numbers\n    l = [i for i in l if i % 2!= 0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)-1, -1, -1):\n        if l[i]%2!=0:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l)==0:\n        return []\n    else:\n        i=0\n        while i < len(l):\n            if l[i]%2==1:\n                l.pop(i)\n            else:\n                i+=1\n        return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    removed = []\n    for element in l:\n        if element % 2 == 0:\n            removed.append(element)\n    return removed\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if type(l) == list:\n        if len(l) == 0:\n            return None\n        else:\n            i = 0\n            while(i < len(l)):\n                if l[i] % 2!= 0:\n                    l.remove(l[i])\n                else:\n                    i = i + 1\n            return l\n    else:\n        return None\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)-1):\n        if(l[i]%2 == 1):\n            del l[i]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for number in l:\n        if number%2!= 0:\n            new_l.append(number)\n    return new_l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < len(list1):\n        return list1[n]\n    else:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = list1[n]\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp_tuple = list1[n]\n    return temp_tuple"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # define a loop\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    '''\n    OUTPUT:\n    0    false\n    1    false\n    2    false\n    '''\n    if len(list1) > len(list2):\n        return (list1==list2)\n    else:\n        return (list2==list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(len(list2)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    counter=0\n    for x in list1:\n        for y in list2:\n            if x in y:\n                counter=counter+1\n    if counter>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            list2.remove(list1[i])\n        else:\n            list1.remove(list1[i])\n            \n    if len(list1) == 0 or len(list2) == 0:\n        return 'The sequence is empty'\n    else:\n        return 'The sequence contains overlapping values'\n    \ndef duplicate(list1):\n    '''\n    Write a python function to check whether a list contains duplicate values or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i] in list1:\n            list1.remove(list1[i])\n        else:\n            return 'The list contains duplicate values'\n    return 'The list is empty'\n    \ndef not_in_order(list1):\n    '''\n    Write a python function to check whether the list contains any value other than the first value in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i] not in list1[i+1:]:\n            return 'The list contains any value other than the first value in the sequence'\n    return 'The list is empty'\n    \ndef selection_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using a selection sort algorithm.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i,0,-1):\n            if list1[j] < list1[j-1]:\n                list1[j],list1[j-1] = list1[j-1],list1[j]\n    return list1\n    \ndef insertion_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using insertion sort algorithm.\n    '''\n    for i in range(1,len(list1)):\n        key = list1[i]\n        j = i-1\n        while j >=0 and key < list1[j]:\n            list1[j+1] = list1[j]\n            j-=1\n        list1[j+1] = key\n    return list1\n    \ndef bubble_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using bubble sort algorithm.\n    '''\n    for i in range(0,len(list1)):\n        swapped = False\n        for j in range(0,len(list1)-i-1):\n            if list1[j] > list1[j+1]:\n                list1[j],list1[j+1] = list1[j+1],list1[j]\n                swapped = True\n        if swapped == False:\n            break\n    return list1\n    \ndef shell_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using shell sort algorithm.\n    '''\n    gap = 2\n    while gap > 1:\n        for i in range(gap,len(list1)):\n            value = list1[i]\n            j = i-gap\n            while j >=0 and value < list1[j]:\n                list1[j+gap] = list1[j]\n                j-=gap\n            list1[j+gap] = value\n        gap = gap//2\n    return list1\n    \ndef merge_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using merge sort algorithm.\n    '''\n    if len(list1) <= 1:\n        return list1\n    mid = len(list1)//2\n    left = list1[:mid]\n    right = list1[mid:]\n    return merge(merge_sort(left),merge_sort(right))\n    \ndef merge(left,right):\n    '''\n    Write a python function to sort the elements of a list using merge sort algorithm.\n    '''\n    i = j = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n    \ndef quick_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using quick sort algorithm.\n    '''\n    def sort_helper(list,left,right):\n        if left >= right:\n            return\n        index = partition(list,left,right)\n        sort_helper(list,left,index)\n        sort_helper(list,index+1,right)\n    \n    def partition(list,left,right):\n        pivot = list[right]\n        i = left - 1\n        for j in range(left,right):\n            if list[j] <= pivot:\n                i += 1\n                list[i],list[j] = list[j],list[i]\n        list[i+1],list[right] = list[right],list[i+1]\n        return i+1\n    \n    sort_helper(list1,0,len(list1)-1)\n    return list1\n    \ndef quick_sort2(list1):\n    '''\n    Write a python function to sort the elements of a list using quick sort algorithm.\n    '''\n    def partition(list,left,right):\n        if left >= right:\n            return\n        index = partition(list,left,right)\n        quick_sort2(list,left,index-1)\n        quick_sort2(list,index+1,right)\n    \n    def partition(list,left,right):\n        pivot = list[right]\n        i = left - 1\n        j = right-1\n        for j in range(left,right):\n            if list[j] <= pivot:\n                i += 1\n                list[i],list[j] = list[j],list[i]\n        list[i+1],list[right] = list[right],list[i+1]\n        return i+1\n    \n    quick_sort2(list1,0,len(list1)-1)\n    return list1\n    \ndef merge_and_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using merge sort algorithm.\n    '''\n    def sort(list):\n        i = j = 0\n        result = []\n        while i < len(list) and j < len(list):\n            if list[i] < list[j]:\n                result.append(list[i])\n                i += 1\n            else:\n                result.append(list[j])\n                j += 1\n        result += list[i:]\n        return result\n    \n    def merge_sort(list):\n        def sort_helper(list,left,right):\n            if left >= right:\n                return\n            mid = (left + right)//2\n            sort_helper(list,left,mid)\n            sort_helper(list,mid+1,right)\n            sort_helper(list,left,mid)\n        \n        sort_helper(list,0,len(list)-1)\n    \n    sort_helper(list1,0,len(list1)-1)\n    return list1\n    \ndef shell_sort_and_sort(list1):\n    '''\n    Write a python function to sort the elements of a list using shell sort algorithm.\n    '''\n    def shell_sort(list1):\n        gap = 2\n        while gap > 1:\n            for i in range(gap,len(list1)):\n                value = list1[i]\n                j = i-gap\n                while j >=0 and list1[j] > value:\n                    list1[j+gap] = list1[j]\n                    j-=gap\n                list1[j+gap] = value\n            gap = gap//2\n        return list1\n    \n    def shell_sort_helper(list):\n        gap = 2\n        while gap > 1:\n            for i in range(gap,len(list)):\n                value = list[i]\n                j = i-gap\n                while j >=0 and value > list[j]:\n                    list[j+gap] = list[j"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (len(list1) < len(list2)) or (len(list1) == len(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (list1.index(list2[0])>list1.index(list2[1]) and list1[0]<list2[0]) or (list1.index(list2[0])<list1.index(list2[1]) and list1[0]>list2[0]) or (list1.index(list2[1])>list1.index(list2[0]) and list1[1]<list2[1]) or (list1.index(list2[1])>list1.index(list2[0]) and list1[1]>list2[1]) or (list1.index(list2[0])>list1.index(list2[1]) and list1[1]>list2[1])\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    overlapping_list = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] in list2:\n                overlapping_list.append(list1[i])\n    return overlapping_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)==len(list2):\n        return all([list1[i] in list2 for i in range(len(list1))])\n    else:\n        return False\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for i in range(len(arr)):\n        temp = arr[i]\n        for j in range(i, len(arr)):\n            if arr[j] > temp and max_product < temp*arr[j]:\n                max_product = temp*arr[j]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = [-1 for i in range(len(arr))]\n    result[0] = arr[0]\n    for i in range(1, len(arr)):\n        result[i] = arr[i] * result[i-1]\n    return result[-1]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[1]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            temp_product = arr[i]*arr[j]\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    num_list = arr\n    max_product = num_list[0]\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            product = num_list[i] * num_list[j]\n            if product > max_product:\n                max_product = product\n                index = i\n                index2 = j\n    return index, index2\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max(map(lambda x: x*x, arr))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    else:\n        return max(max_Product(arr[:len(arr)//2]),max_Product(arr[len(arr)//2:]))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if(len(arr)==0):\n        return 0\n    if(len(arr)==1):\n        return arr[0]\n    if(arr[0]>arr[1]):\n        return arr[0]\n    if(arr[0]<arr[1]):\n        return arr[1]\n    \n    i=0\n    j=0\n    res=0\n    while(i<len(arr)):\n        if(j==0):\n            temp=arr[j]\n            if(arr[j]<arr[i]):\n                res=temp\n            j+=1\n        elif(arr[j]<arr[i]):\n            res=temp\n            j+=1\n        else:\n            temp=arr[i]\n            if(arr[i]>arr[j]):\n                res=temp\n            i+=1\n    return res\ndef selection_sort(arr):\n    '''\n    Write a python function to sort the given array using the selection sort algorithm.\n    '''\n    for i in range(0,len(arr)):\n        #print(arr[i])\n        for j in range(i+1,len(arr)):\n            #print(arr[j])\n            if(arr[i]<arr[j]):\n                temp=arr[i]\n                arr[i]=arr[j]\n                arr[j]=temp\n        print(\"After\",i+1,\"swaps :\",arr)\n    \n    return arr\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if max < arr[j]:\n                max = arr[j]\n                pivot = i\n    return pivot\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    L = len(arr)\n    max_Product = arr[0] * arr[0]\n    for i in range(L):\n        for j in range(i+1, L):\n            if arr[i] * arr[j] > max_Product:\n                max_Product = arr[i] * arr[j]\n                index_i = i\n                index_j = j\n    print(\"Index of maximum product in given array\", index_i, \"and\", index_j)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = max_prod = 1\n    for num in arr:\n        prod = num * max_prod\n        max_prod = max(max_prod, prod)\n    return max_prod\n    \narr = [1,2,3,4,5]\nmax_product(arr"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in Input:\n        if (i[0] not in lst):\n            lst.append(i[0])\n    return lst\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for elem in Input:\n        if elem not in common:\n            common.append(elem)\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = set(Input)\n    return a.pop()\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique = [] \n    for i in range(len(Input)): \n        if Input[i] not in unique: \n            unique.append(Input[i]) \n    print(unique)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def compare(a, b):\n        if(a[0] > b[0]):\n            return 1\n        elif(a[0] < b[0]):\n            return -1\n        else:\n            return 0\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # if length of list is even then we need to take the middle value\n    if len(Input) % 2 == 0:\n        mid = len(Input) // 2\n        first_value = Input[mid]\n        second_value = Input[mid + 1]\n    # if length of list is odd then we need to take the first element\n    else:\n        first_value = Input[0]\n        second_value = Input[1]\n    return first_value, second_value\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l=[]\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i]==Input[j]:\n                l.append(Input[i])\n    return l\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return []\n    first = Input[0]\n    return [first] + group_tuples(Input[1:])\n    \ndef main():\n    Input = [ (2,3), (1,2) ]\n    print(group_tuples(Input))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    i = 1\n    while (i < len(lst)):\n        if (lst[i] < max):\n            max = lst[i]\n        i = i+1\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0] \n    for i in range(len(lst)): \n        if lst[i] > max_ele: \n            max_ele = lst[i] \n    return max_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x = lst[0]\n    y = 0\n    for i in range(0, len(lst)):\n        if x == lst[i]:\n            y = lst[i]\n            break\n        elif y == 0:\n            y = lst[i]\n    return y\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max \n    \ndef Remove_Duplicates(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    if len(lst) == 0: \n        return []\n    temp = [] \n    for i in range(len(lst)): \n        if lst[i] not in temp: \n            temp.append(lst[i]) \n    return temp\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = sorted(lst)\n    index = lst.index(max(lst))\n    return lst[index]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0: \n        return -1\n    elif len(lst)==1: \n        return lst[0] \n    else: \n        return Find_Max(lst[1:]) \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #Sorting the list \n    lst.sort()\n    #Condition checking \n    if len(lst)>0:\n        if lst[0] > lst[-1]:\n            return lst[0] \n        else:\n            return lst[-1] \n    else:\n        return 'List is empty!'\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst)\n    max_index = 0\n    for i in range(max_len):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return lst[max_index]\n    #Write your code here.\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    total_list = []\n    for element in list1:\n        total += element\n        total_list.append(element)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #round is the arithmetic function\n    #sum is the sum of all the numbers in the list\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    l = len(list1)\n    if l == 0:\n        return 0\n    else:\n        sum = 0\n        for i in list1:\n            sum += i\n        return sum*l\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    totalsum = 0\n    for num in list1:\n        totalsum += num\n    return totalsum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for i in range(length):\n        total += list1[i]\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_sum = 0\n    for number in list1:\n        list_sum += number\n    return list_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    def rounding(list1):\n        '''\n        Write a function to find the total of the numbers in the list.\n        '''\n        \n        total = 0\n        length = len(list1)\n        for i in range(length):\n            total += list1[i]\n        return total\n    \n    return rounding(list1)\n    \nprint(rounding([10, 7, 5, 1, 2, 4, 4, 6, 8, 6, 7]))\nprint(rounding([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(rounding([4.5, 3.5, 7.5, 7.5, 8.5, 9.5]))\nprint(rounding([4.5, 3.5, 7.5, 7.5, 8.5])"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    print('The total of the numbers is: ', total*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_sum = 0\n    for number in list1:\n        list_sum = list_sum + number\n    print(list_sum * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 0\n    for i in range(1,n+1):\n        cube += (i**3)\n    return cube\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n*(n-1)//2\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**3)\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n + 1):\n        sum += num ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        if num % 2 == 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    l=[]\n    i=0\n    sum=0\n    n=int(n)\n    while i<n:\n        sum+=i\n        i+=2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans+=i**3\n    return ans\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) > 1:\n        return \" \".join([str(item) for item in test_tup])\n    else:\n        return test_tup[0]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup[i] for i in range(len(test_tup)))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if isinstance(test_tup, tuple):\n        ret_tup = tuple([test_tup[i:i+len(test_tup[0])] for i in range(0, len(test_tup), len(test_tup[0]))])\n        return tuple(ret_tup)\n    else:\n        return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    a = tuple(test_tup)\n    return a\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    def concatenate_tuple(tup):\n        '''\n        Write a function to concatenate each element of tuple by the delimiter.\n        '''\n        return ''.join(tup)\n    return concatenate_tuple(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 0:\n        return None\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] + concatenate_tuple(test_tup[1:])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result_list = []\n    for element in test_tup:\n        result_list.append(element)\n    return tuple(result_list)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    list = []\n    for i in range(1,n+1):\n        list.append(i**3)\n    print(list)\n    return sum(list) / len(list)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_of_nums=[]\n    for i in range(0,n):\n        cube_of_nums.append(i**3)\n    total=0\n    for j in range(0,len(cube_of_nums)):\n        total+=cube_of_nums[j]\n    average=total/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    total /= n\n    return total\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    cube = int(math.pow(n, 3))\n    avg = int(cube) / 3\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    lst=[]\n    for i in range(0,n):\n        lst.append(int(input(\"enter the number: \")))\n    return sum(lst)/len(lst)\n    \nprint(find_Average_Of_Cube(5))\nprint(find_Average_Of_Cube(6))\nprint(find_Average_Of_Cube(7))\nprint(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(100))\nprint(find_Average_Of_Cube(1000))"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = int(n**3)\n    return int(cube/3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # this code is from a question on solving the problem\n    n = int(n)\n    Sum_of_cubes = 0\n    for i in range(1, n+1):\n        Sum_of_cubes += i**3\n    return Sum_of_cubes/3"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0 \n    for i in range(1, n + 1):\n        result += i**3\n    return result/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s = s + i**3\n    return s/n\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    ret_val = []\n    for word in test_tuple:\n        if word[-1] in 'D':\n            ret_val.append(word)\n    return ret_val\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_rear = test_tuple[0]\n    r_num = front_rear[1:]\n    r_num = r_num[:-1]\n    r_num = int(r_num)\n    return r_num\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # iterate through the tuple\n    front = True\n    for index, element in enumerate(test_tuple):\n        if front:\n            # if front, mark it as false\n            front = False\n        else:\n            # if not, add the element to the front of the string\n            test_tuple[index] = element\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    index_list = []\n    for element in test_tuple:\n        if element!='rear':\n            index_list.append(test_tuple.index(element))\n    return tuple(index_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        if i == 0:\n            rear_index_list.append(test_tuple[i])\n        else:\n            if test_tuple[i] == 'R' or test_tuple[i] == 'r':\n                rear_index_list.append(test_tuple[i])\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Define a function to extract the rear index element of each string in the tuple\n    def extract_rear(test_tuple):\n        '''\n        Write a function to extract only the rear index element of each string in the given tuple.\n        '''\n        # Create an empty list\n        rear_index = []\n        # Iterate over the tuple, create a list of the strings\n        for string in test_tuple:\n            rear_index.append(string[-1])\n        return rear_index\n    \n    # Return the extracted value\n    return extract_rear(test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index = 0\n    rear_index = 0\n    rear_string = \"\"\n    for index in range(len(test_tuple)):\n        if index == len(test_tuple) - 1:\n            break\n        if test_tuple[index] == 'e':\n            if front_index == rear_index:\n                rear_string += test_tuple[index]\n            else:\n                front_index += 1\n                rear_string += test_tuple[index]\n        elif test_tuple[index] =='s':\n            rear_string += test_tuple[index]\n        elif test_tuple[index] == 't':\n            rear_string += test_tuple[index]\n        else:\n            continue\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = [x for x in test_tuple if x[-1] == \"R\"]\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for element in test_tuple:\n        rear_list.append(element[::-1])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    a,b = test_tuple\n    return a,b\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    l = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            l += 1\n    return l\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if not list1:\n        return 0\n    else:\n        if list1[0] == x:\n            return 1 + count_element_in_list(list1[1:],x)\n        else:\n            return count_element_in_list(list1[1:],x)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    number = 0 \n    for i in range(len(list1)): \n        if list1[i][x] == 1: \n            number += 1 \n    return number \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count += 1\n    return count\n    \n    \ndef count_element_in_list_with_unique_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    seen = set()\n    for item in list1:\n        if item in seen:\n            count += 1\n        else:\n            seen.add(item)\n    return count\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # get count of sublist\n    c = 0\n    for i in range(len(list1)): \n        # check if element present in list \n        if x in list1[i]: \n            c+=1\n    return c\n        "
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(len(list1)): \n        if (list1[i] == x): \n            c += 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    sub_list = []\n    for i in range(len(list1)):\n        if list1[i] == x:\n            sub_list.append(i)\n    return len(sub_list)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    sublist_count = 0 \n    for i in list1:\n        if i == x:\n            sublist_count += 1\n    return sublist_count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for index, elem in enumerate(list1):\n        if elem == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            new_list.append(nums[i])\n    return new_list\n    \n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num%2 == 0:\n            new_list.append(num)\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Your code here\n    \n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    return filtered_nums\n    \ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            filtered_nums.append(num)\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for number in nums:\n        if number%2!=0:\n            new_nums.append(number)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filter_odd = []\n    for num in nums:\n        if num % 2!= 0:\n            filter_odd.append(num)\n    return filter_odd\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.search('[0-9]{4}-[0-9]{2}-[0-9]{2}', dt)\n    yyyymmdd = m.group(0)\n    dd = yyyymmdd[:2]\n    mm = yyyymmdd[2:4]\n    yy = yyyymmdd[4:6]\n    \n    return '%s-%s-%s' % (dd, mm, yy)\n    \ndef change_time_format(t):\n    '''\n    Write a function to convert a time of HH:MM:SS format to mm:ss format.\n    '''\n    hhmmss = re.search('[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}', t)\n    hhmm = hhmmss.group(0)\n    mmss = hhmmss.group(1)\n    return '%s:%s' % (hhmm, mmss)\n    \ndef date_formatter(dt):\n    '''\n    Write a function to format a date into a 4-digit year, month, day, and time.\n    '''\n    m = re.search('[0-9]{4}-[0-9]{2}-[0-9]{2}', dt)\n    yyyy = m.group(0)\n    m = re.search('[0-9]{2}:[0-9]{2}', dt)\n    hh = m.group(0)\n    mm = m.group(0)\n    t = hh + ':' + mm\n    return change_date_format(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    d = m.group(1)\n    m = re.match(r'(\\d{2})-(\\d{2})', d)\n    y = m.group(1)\n    m = re.match(r'(\\d{4})-(\\d{2})', y)\n    m = m.group(1)\n    m = re.match(r'(\\d{2})-(\\d{2})', m.group(1))\n    d = m.group(1)\n    date = \"{}-{}-{}\".format(d, y, d)\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    return date[0]+'-'+date[1]+'-'+date[2]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace(\"-\",\"-\")\n    return dt.replace(\".\",\"-\")\n    #return dt.replace(\"-\",\"-\")\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # We want to work with strings in the following example format\n    # yyyy-mm-dd\n    # d-m-y\n    # dd-mm-yy\n    # \n    # The functions below take a date as a parameter, and it converts it into a string in the following format\n    # dd-mm-yy\n    #\n    # (Note: You will need to make sure that you format your dates to match your regular expression format)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = dt.strftime(\"%d-%m-%Y\")\n    except Exception as e:\n        return e\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # check if date is of the format\n    if not re.search('^[0-9]{4}-[0-9]{2}-[0-9]{2}$', dt):\n        # set date as format\n        dt = '{:04d}{:02d}{:02d}'.format(dt[0:4], dt[4:6], dt[6:])\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # format strings\n    fmt = '%d-%m-%Y'\n    # month length\n    m = len(dt.split('-')[0])\n    # date length\n    d = len(dt.split('-')[1])\n    # date length + month length\n    d_m = m + d\n    # date + month length\n    dt_m = d_m + dt.split('-')[1]\n    # date + month length + year\n    dt_m_y = d_m + dt.split('-')[2]\n    \n    # convert date format to dd-mm-yyyy format\n    return dt_m + '-' + dt_m_y + fmt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove leading zeros from the string\n    # change to dd-mm-yyyy format\n    # change to yyyy-mm-dd format\n    return(dt[:-7] + '-' + dt[-7:] + '-' + dt[:-7] + '-01-01')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[0]+'-'+dt[1]+'-'+dt[2]+'-'+dt[3]\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_helper(array):\n        # Write your code here\n        # loop through array\n        # start at the end of the array and to the beginning of the array\n        for index in range(len(array) - 1, 1, -1):\n            # Move the current value in the array down to the end of the array by one index\n            for x in range(index):\n                current = array[x]\n                # go to the next element\n                for y in range(x + 1, index, 1):\n                    # If current is less than the next element then swap them\n                    if array[y] < current:\n                        array[y], array[x] = array[x], array[y]\n        return array\n    # This code is written using a loop, so it can be pretty compact\n    for x in range(len(my_list)):\n        # The loop has its own sort function to do both sorted and unsorted\n        for y in range(x, len(my_list)):\n            # We're at the end of the array and we're on the first element\n            if my_list[y] < my_list[x]:\n                # Swap the two values\n                my_list[y], my_list[x] = my_list[x], my_list[y]\n    # Swap the sorted elements\n    return shell_sort_helper(my_list)\n    \n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = int(len(my_list)/2)\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap / 2)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    for i in range(n):\n        j = 0\n        # m = i + 1\n        # while m <= n:\n        #     j = m\n        #     m = m + (1 + m) % (n + 1)\n        for j in range(n):\n            # Check if i is already sorted, if not, add i\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n            # j is a pivot, swap\n            # Check if j is lesser than (n - 1)\n            elif j == n - 1:\n                # Swap\n                temp = my_list[j]\n                my_list[j] = my_list[n - 1]\n                my_list[n - 1] = temp\n            else:\n                # j is not the last, then shift\n                # Check if j is at the end of the array\n                if j == n - 2:\n                    j = 0\n                else:\n                    j = j + 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def sort(a, start, end):\n        if start >= end:\n            return\n        \n        mid = (start + end) // 2\n        sort(a, start, mid)\n        sort(a, mid+1, end)\n        merge_sort(a, start, mid, end)\n        \n    \n    def merge_sort(a, start, mid, end):\n        if mid < start or mid > end:\n            return\n        \n        left, right = start, mid\n        \n        while left < mid and right < end:\n            if a[left] < a[right]:\n                a[left], a[right] = a[right], a[left]\n                left += 1\n                right += 1\n            else:\n                break\n        \n        while left < mid:\n            a[left] = a[left] + a[right]\n            left += 1\n            right += 1\n        \n        while right < end:\n            a[right] = a[right] + a[left]\n            right += 1\n            left += 1\n        \n        for i in range(start, end):\n            a[i] = a[i] // 2\n    \n    sort(my_list, start, len(my_list)-1)\n    sort(my_list, 0, len(my_list)-1)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    arr = []\n    for i in range(len(my_list)):\n        arr.append(my_list[i])\n    for i in range(len(arr)):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            for j in range(i, n):\n                if my_list[i] > my_list[j]:\n                    temp = my_list[i]\n                    my_list[i] = my_list[j]\n                    my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print(\"Running shell sort...\")\n    n = len(my_list)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n        print(my_list)\n    return my_list\n    # if n > 1:\n    #     step = 1\n    #     while step <= n/2:\n    #         for i in range(n-step):\n    #             if my_list[i] > my_list[i+step]:\n    #                 my_list[i], my_list[i+step] = my_list[i+step], my_list[i]\n    #         step += 1\n    # print(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Define list for sorted output\n    result_list = []\n    # Start from the end of the list\n    for i in range(len(my_list) - 1, 0, -1):\n        # If current element is not smaller than its predecessor\n        # then swap with its predecessor\n        for j in range(i):\n            # Compute swap\n            if my_list[j] < my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n        # Insert the current element in the sorted portion\n        result_list.append(my_list.pop(i))\n    # Return the sorted output\n    return result_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        # looping through every gap in size\n        for i in range(gap,n):\n            # swapping items up and down to make it sorted\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j = j-gap\n            my_list[j] = temp\n        # setting gap to be a multiple of 2\n        gap = gap//2\n    # print(my_list)\n    return my_list\n    \n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0] and \\\n        (((type(test_tup1[1]) == type(test_tup2[1])) and (test_tup1[1] < test_tup2[1])) or (type(test_tup1[1]) == type(test_tup2[1]) and test_tup1[1] == test_tup2[1]))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = []\n    for item in test_tup1:\n        test_tup3.append(item)\n    for item in test_tup2:\n        test_tup3.append(item)\n    return test_tup3\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [test_tup1[i][0] and test_tup2[i][0] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(test_tup1[0] and test_tup2[0]) and (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple([*test_tup1, *test_tup2])\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return \" \".join(list(map(str,test_tup1 + test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]) or (test_tup1[1] and test_tup2[1])\n    \ntest_tuples = [(1,2), (3,4)]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    # extract the first element\n    nested_list1 = test_tup1[0]\n    # extract the second element\n    nested_list2 = test_tup2[0]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup = test_tup1\n    for t in test_tup2:\n        test_tup = test_tup + (t,)\n    return test_tup\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    test_tup = test_tup1\n    for t in test_tup2:\n        test_tup = test_tup + (t,)\n    return test_tup\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == b == c:\n        return 0\n    elif a == 0:\n        return b - c / 2\n    elif b == 0:\n        return a / 2\n    else:\n        return a * b / (2 * c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return round(b**2 - 4*a*c, 3)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (b - a) / (2 * c)\n    x2 = (c * x1) + a\n    print(\"x1 = \" + str(x1))\n    print(\"x2 = \" + str(x2))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return -b / a\n    else:\n        return ((-b + (c/a))/(2*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = ((a*(x**2)) - (b*x) + c) \n    return d \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b**2) + c*b + b**2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b + c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the length of the line\n    length = ((b * a - c * b) / (2 * a))\n    print(f\"a = {a}, b = {b}, c = {c}, d = {length}, type = parabola\")\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return [a, a, a, a, a, a, a, a, a]\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        for x in range(len(list1)):\n            if list1[x] == list2[x]:\n                return True\n    else:\n        for x in range(len(list2)):\n            if list2[x] == list1[x]:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Add your code here.\n    if len(list1) == len(list2):\n        for i in list1:\n            if i in list2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    temp_list = []\n    for i in range(len(list1)):\n        if list1[i] not in temp_list:\n            temp_list.append(list1[i])\n        if list2[i] not in temp_list:\n            temp_list.append(list2[i])\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    # YOUR CODE HERE\n    if len(list1) == len(list2):\n        common = False\n        if len(list1) == 0:\n            return True\n        elif len(list1) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n    # END OF YOUR CODE\n    \n    \n    "
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    temp = set(list1)\n    temp2 = set(list2)\n    return len(temp.intersection(temp2)) == 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    elif len(list1) == len(list2):\n        for x in range(len(list1)):\n            if list1[x]!= list2[x]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # use a set to store unique elements\n    list_set = set(list1) & set(list2)\n    return len(list_set) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Your code here\n    common_element = False\n    return common_element\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # YOUR CODE HERE\n    for i in range(0, len(list1)):\n        if list1[i] in list2 and list2[i] in list1:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common_list = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common_list.append(list1[i])\n    return len(common_list) > 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    if base1==0:\n        return 0\n    if base2==0:\n        return 0\n    return (base1 + base2)/2 + (height/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length = 0\n    temp = 0\n    count = 0\n    if base2 > base1:\n        return -1\n    else:\n        while base2>=base1:\n            if base2>=base1:\n                if base2>=base1:\n                    temp = base1+(base2-base1)\n                    if temp%2==0:\n                        temp+=1\n                    else:\n                        temp-=1\n                    length = temp\n                    count += 1\n            base2-=1\n        return count/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Your code here\n    return (base1+base2)/2\n    \ndef mean_trapezium(base1,base2,height):\n    '''\n    Write a function to find the mean length of a trapezium.\n    '''\n    # Your code here\n    return (base1+base2)/2\n    \ndef main():\n    \"\"\"\n    Test program\n    \"\"\"\n    # Read data from file\n    filename = 'data.txt'\n    with open(filename) as f:\n        data = f.readlines()\n    f.close()\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    x = [base1,base2]\n    y = [height,height]\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median=[]\n    median_1=[]\n    for i in range(base1,base2+1):\n        if height>=i:\n            median.append(i)\n            median_1.append(i)\n    if len(median)>1:\n        for i in range(len(median)):\n            if median[i] in median_1:\n                median_1.remove(median[i])\n    if len(median_1)==1:\n        median.sort()\n        median_1.remove(median[0])\n        median=median[0]\n    if len(median)>2:\n        s=0\n        for i in range(len(median)-1):\n            s=s+(median[i]+median[i+1])/2\n        median=median[0:int(s)]\n    median.sort()\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium2(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium3(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium4(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium5(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium6(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium7(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium8(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium9(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium10(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium11(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium12(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>base2):\n        x = base1\n        y = base2\n    else:\n        x = base2\n        y = base1\n    if (height>=x):\n        left = height/2\n    else:\n        left = x\n    if (height>=y):\n        right = height/2\n    else:\n        right = y\n    if (height>=x+y):\n        trapezium = (x+y)/2\n    else:\n        trapezium = y\n    return trapezium\ndef median_trapezium13(base1,base2,height):\n    '''"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    width = max(base1,base2)\n    height = max(base1,base2)\n    return (height*(width+height))/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1 + (base2 - base1) / 2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # If the length of base1 is greater than the length of base2 then it is not a trapezium\n    if height>base1+base2:\n        return \"Not a trapezium\"\n    elif height==base1+base2:\n        return 1/2\n    # Else return the median\n    else:\n        return (height+base1)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1==base2:\n        if height==0:\n            return 0\n        elif height==1:\n            return 1\n        else:\n            return base1 + base2 + height\n    else:\n        return median_trapezium(base1, base2, height-1) + median_trapezium(base2, base1, height-1)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[number - 1] < arr[number]:\n        return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    #loop\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return False\n    \n    #return\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number < i:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    for i in range(len(arr)):\n        if number >= arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if arr[0] > number:\n        return True\n    if arr[-1] > number:\n        return True\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return False\n    if number < arr[-1]:\n        return False\n    for i in range(1,len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    for i in range(len(arr)-1):\n        if arr[i] > number:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_in_pattern = re.compile('(.+) a').findall(text)\n    return text_in_pattern\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace('\\\\n','\\n').replace('\\\\t','\\t').replace('\\\\r','\\r').replace('\\\\b','\\b').replace('\\\\f','\\f')\n    text = re.sub(r'\\s','',text)\n    words = text.split(' ')\n    return words\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    text = text.replace('\\\\n','\\n').replace('\\\\t','\\t').replace('\\\\r','\\r').replace('\\\\b','\\b').replace('\\\\f','\\f')\n    text = re.sub(r'\\s','',text)\n    words = text.split(' ')\n    return words\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'(^[a-zA-Z\\s]*(?:e[a-zA-Z]+)+)', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text[0]!= 'a' and text[-1]!= 'b':\n        return False\n    text = text.lower()\n    regex = '\\(.*\\)'\n    result = re.match(regex, text)\n    if result is None:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #TODO: Your code here\n    text = re.findall(r'[a-zA-Z]', text)\n    #print(text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9_.-]', '', text)\n    for a in ['a', 'e', 'i', 'o', 'u', 'y']:\n        text = text.replace(a, '_')\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #input: string\n    #output: True or False\n    #algorithm: match a string that has an a followed by one or more b's\n    return re.search(r'[a-zA-Z]+\\[.*\\]',text)!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # String to test.\n    # Replace with your text\n    test = 'a b a b b b b b b b b b b b b b'\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.split('[bB]', text)\n    for x in text:\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0] in ['a','A']:\n            x = x[1:]\n        if x[-1] in ['b','B']:\n            x = x[:-1]\n        if x[0"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_one_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_all(text):\n    '''\n    Write a function that matches a string that has a a followed by all b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_all_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by all b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_all_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by all b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a a followed by two b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_two_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by two b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_two_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by two b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_one_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_one_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_all_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by all b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_all_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by all b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_one_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_two_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by two b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_two_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by two b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n    \ndef text_match_one_or_more_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_all_or_more_or_more_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has a a followed by all b's.\n    '''\n    \n    if len(text) == 0:\n        return 0\n    elif len(text) > 1:\n        return 0\n        \n    text = text[0]\n    \n    if text.isalpha():\n        return 1\n    else:\n        return 0\n        \ndef text_match_all_or_more_or_more_or_more_or_more_or_more_or_more_or_more_or_more_or_more"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code goes here\n    a = n % 10\n    if a == 0 :\n        return 0\n    else :\n        return 10 - a\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    digits = [int(i) for i in str(n)]\n    return digits[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 : return 0\n    while n >= 10:\n        n //= 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    i = len(str(n)) - 1\n    while (i >= 0):\n        if (n % 10) == 0:\n            n //= 10\n        else:\n            n //= 10 - 1\n        i -= 1\n    if n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    else:\n        return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    digits = []\n    while n!= 0 :\n        digits.append(n%10)\n        n = n//10\n    digits.reverse()\n    return digits[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    last_Digit = n % 10\n    return last_Digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    return digits[-1]\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = n % 10\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negs = []\n    for i in list1:\n        if i < 0:\n            negs.append(i)\n    return negs\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    temp_list = []\n    for num in list1:\n        if num < 0:\n            temp_list.append(num)\n        else:\n            temp_list.append(num * -1)\n    return temp_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in range(len(list1)):\n        neg_list.append(-list1[i])\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(reversed(list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [element for element in list1 if element < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list(map(int, list1))\n    list1 = list(filter(lambda x: x<0, list1))\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    final_list = []\n    for i in range(0, len(list1)):\n        final_list.append(-list1[i])\n    return final_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg=[]\n    for i in list1:\n        neg.append(-i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in range(len(list1)):\n        neg_num.append(list1[i] * (-1))\n    return neg_num\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for x in list1:\n        if x < 0:\n            neg.append(x)\n    return neg\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(str1)\n    odd_pos = str1.count('O')\n    new_str = \"\"\n    for x in str1:\n        if x == 'O' or x.isalpha():\n            new_str += x\n    print(new_str)\n    print(odd_pos)\n    str1 = new_str\n    print(str1)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_string = \"\"\n    for char in str1:\n        if char % 2 == 1:\n            odd_string += char\n    return odd_string\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char if char % 2 == 1 else char[:-1] for char in str1])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Your code here\n    odd_str = ''.join(s[::2])\n    return odd_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    while i < len(str1):\n        if i % 2!= 0:\n            str1 = str1[:i] + str1[i + 1:]\n        i += 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = ''\n    for i in range(len(str1)):\n        if str1[i % 2] % 2!= 0:\n            odd += str1[i % 2]\n    return odd\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == \"\":\n        return \"\"\n    if str1[0] == 'a' or str1[0] == 'A':\n        str1 = str1[1:]\n    else:\n        str1 = str1[1:]\n    if str1[-1] == 'a' or str1[-1] == 'A':\n        str1 = str1[:-1]\n    else:\n        str1 = str1[:-1]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = [char for char in str1 if char % 2!= 0]\n    return ''.join(odd)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) == 0:\n        return ''\n    else:\n        s = \"\"\n        for i in range(len(str1)):\n            if i%2!= 0:\n                s += str1[i]\n        return s\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([n for n in test_list if n[1] > n[0]])\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_count = 0\n    for test_pair in test_list:\n        # print(test_pair)\n        if test_pair[0] > test_pair[1]:\n            # print(test_pair)\n            test_count += 1\n    print(test_count)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Step 1 - create empty dictionary\n    count = {}\n    # Step 2 - initialize two variables\n    first_list = test_list[0]\n    second_list = test_list[1]\n    # Step 3 - set up the for loop to iterate over all values in first and second lists\n    for i in range(0, len(first_list)):\n        for j in range(0, len(second_list)):\n            if i == j:\n                count[first_list[i] + second_list[j]] = count.get(first_list[i] + second_list[j], 0) + 1\n    # Step 4 - return the number of pairs\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for bidirectional in test_list:\n        count += len(bidirectional[0])\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for t in test_list:\n        if t[0] > t[1]:\n            count += 1\n        elif t[1] > t[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_set = set()\n    for tup in test_list:\n        count_set.add(tup[0])\n        count_set.add(tup[1])\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list2 = []\n    for x in test_list:\n        if x[0] > x[1]:\n            test_list2.append(x)\n    count = 0\n    for i in range(len(test_list2)-1):\n        if test_list2[i+1][0] < test_list2[i][1]:\n            count +=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count=0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i]>test_list[j] and test_list[j]>test_list[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in test_list:\n        if i[0]!= i[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in L:\n        L1=[]\n        for j in range(len(i)):\n            L1.append(i[j])\n        L1.sort()\n        L1 = \"\".join(L1)\n        L.append(L1)\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # TODO: Create a function that takes a list of integers as an argument and returns a single integer.\n    # For example, if I had a list: [1, 2, 3, 4, 5, 6, 7, 8, 9] and it would return 21,\n    # you would write this as follows:\n    # multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    # This function takes a list as an argument and returns a single integer,\n    # which is the same as using the addition of the list's items.\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # return the list in the form: 1,2,3,4\n    # example: [1,2,3,4]\n    return ''.join([str(x) for x in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(len(L)):\n        L[i] = str(L[i])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [int(x) for x in L]\n    return L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join(L):\n        result = \"\"\n        for i in range(len(L)):\n            if i == len(L)-1:\n                result = result + str(L[i])\n            else:\n                result = result + str(L[i]) + \",\"\n        return result\n    return join(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #TODO\n    return 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(len(L)):\n        L[i] = int(L[i])\n    return(L)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'([1-9]+|[1][0-9]*)$')\n    match = pattern.findall(text)\n    adverb_list = []\n    adverb_positions = []\n    for i in range(len(match)):\n        adverb_list.append(match[i][1])\n        adverb_positions.append(i)\n    return adverb_list, adverb_positions\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'[0-9]+')\n    match = pattern.findall(text)\n    noun_list = []\n    noun_positions = []\n    for i in range(len(match)):\n        noun_list.append(match[i][0])\n        noun_positions.append(i)\n    return noun_list, noun_positions\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'[1-9]+')\n    match = pattern.findall(text)\n    verb_list = []\n    verb_positions = []\n    for i in range(len(match)):\n        verb_list.append(match[i][0])\n        verb_positions.append(i)\n    return verb_list, verb_positions\ndef get_time(sentence):\n    '''\n    Create a function to convert a sentence into a time in HH:MM:SS format.\n    '''\n    pattern = re.compile(r'([1-9]+|[1][0-9]*)h')\n    match = pattern.findall(sentence)\n    if len(match) == 1:\n        time = match[0][0]\n        time = int(time)\n        return time\n    else:\n        print(\"Error in parsing time\")\n        exit(1)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression to match the adverbs\n    adverb_regex = '.*(D)(u|R).*'\n    # Extracting adverbs\n    adverb_list = re.findall(adverb_regex, text)\n    # Checking if there is a adverb in the sentence\n    if len(adverb_list) > 0:\n        # Find the first adverb and its position in the sentence\n        adverb = adverb_list[0]\n        pos_list = [1, 3]\n        for i in range(len(pos_list)):\n            if pos_list[i] == 1:\n                adverb_position = adverb[i] +'' + adverb[i + 1]\n            elif pos_list[i] == 3:\n                adverb_position = adverb[i] +'' + adverb[i + 1] +'' + adverb[i + 2]\n        return adverb_position\n    else:\n        return ''\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    sentence = text.split(\" \")\n    result.append(re.search(r\"\\b(adverb|adv|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|a"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a = re.findall('a$', text)\n    b = re.findall('b$', text)\n    c = re.findall('c$', text)\n    d = re.findall('d$', text)\n    e = re.findall('e$', text)\n    f = re.findall('f$', text)\n    g = re.findall('g$', text)\n    h = re.findall('h$', text)\n    i = re.findall('i$', text)\n    j = re.findall('j$', text)\n    k = re.findall('k$', text)\n    l = re.findall('l$', text)\n    m = re.findall('m$', text)\n    n = re.findall('n$', text)\n    o = re.findall('o$', text)\n    p = re.findall('p$', text)\n    q = re.findall('q$', text)\n    r = re.findall('r$', text)\n    s = re.findall('s$', text)\n    t = re.findall('t$', text)\n    u = re.findall('u$', text)\n    v = re.findall('v$', text)\n    w = re.findall('w$', text)\n    x = re.findall('x$', text)\n    y = re.findall('y$', text)\n    z = re.findall('z$', text)\n    adverbs = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]\n    adverbs = list(set(adverbs))\n    adverbs = [adverb for adverb in adverbs if adverb!= '<unk>']\n    adverbs = [adverb + '<unk>' for adverb in adverbs]\n    adverbs.insert(0, '<s>')\n    adverbs.append('</s>')\n    adverbs = [''.join(adverb.split()) for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('</s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('</s>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('</s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<s>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('</s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb for adverb in adverbs if adverb!= '<unk>']\n    adverbs = [adverb + '<unk>' for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('</s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('</s>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [' '.join(adverb.split()) for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>', '') for adverb in adverbs]\n    adverbs = [adverb.replace('<unk>'"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # get the index of the first adverb\n    pattern = r'(?:(?<=\\.|\\?|\\!|\\;|:)|(?<=!|\\?|\\;|:))[a-z]*'\n    adverb = re.findall(pattern, text)\n    if len(adverb) > 0:\n        # get the first adverb in the text\n        adverb = adverb[0]\n        adverb_index = text.find(adverb)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create an empty string for the result\n    result = ''\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"r\":\n        return 0\n    elif text[0] == \"e\":\n        return 1\n    elif text[0] == \"o\":\n        return 2\n    elif text[0] == \"t\":\n        return 3\n    else:\n        return -1\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = text.split()\n    positions = []\n    adverbs = [\"an\", \"the\", \"some\", \"to\", \"in\", \"some\", \"from\"]\n    for word in words:\n        for adverb in adverbs:\n            if adverb in word:\n                if \"an\" in word:\n                    positions.append(\"an\" + adverb)\n                elif \"the\" in word:\n                    positions.append(\"the\" + adverb)\n                elif \"some\" in word:\n                    positions.append(\"some\" + adverb)\n                elif \"to\" in word:\n                    positions.append(\"to\" + adverb)\n                elif \"in\" in word:\n                    positions.append(\"in\" + adverb)\n                elif \"from\" in word:\n                    positions.append(\"from\" + adverb)\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Get all the non-adjectives and non-verbs\n    non_adjectives = []\n    non_verbs = []\n    verb_list = []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a=[]\n    a=re.findall(r'\\w* \\w* \\w*',text)\n    b=[]\n    for i in a:\n        if i[-1]==\"ing\":\n            b.append(i)\n    pos=[]\n    for i in range(len(b)):\n        pos.append(len(b[i])-1)\n    return b,pos\ndef remove_comments(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*\\s*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*', '', text, flags=re.MULTILINE)\n        text=re.sub(r'\\s*#.*\\s*', '', text, flags=re.MULTILINE)\n    return text\ndef remove_comments_single_single_single_single(text):\n    '''\n    Remove all comment from the given text.\n    '''\n    if text!=\"\":\n        text=re.sub(r'\\s*\\#.*', '', text, flags=re.MULTILIN"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l[0]*l[0] + l[1]*l[1] + l[2]*l[2]\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return np.pi * (l**3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area_sq = lambda a: a**2\n    return sum(area_sq(a) for a in l)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Call the function with the argument l\n    surfacearea_cube = l * l * 3\n    return surfacearea_cube\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for x in range(l):\n        area += ((3.0/4)*(x**3)*(x**4))\n        area += ((1/2)*(x**3)*(x**2))\n        area += ((1/2)*(x**3)*(3*x**2))\n        area += (1/4)*(x**3)*(3*x**2)\n        area += (1/4)*(x**3)*(3*x**2)\n        area += (1/8)*(x**3)*(3*x**2)\n        area += (1/8)*(x**3)*(x**2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0.0\n    if l == 0:\n        return 0.0\n    else:\n        for i in range(1, l+1):\n            area += i**3\n        return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #if l is not a list then no check the length\n    if isinstance(l, list):\n        #the input argument is a list of size 4\n        return [l[0]*l[0], l[1]*l[0], l[2]*l[0], l[3]*l[0]]\n    else:\n        return \"a list of size 4\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3*(4*3.14*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 0\n    for r in l:\n        for c in r:\n            if c!= '.':\n                surfacearea += c\n    return surfacearea\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # start = 0\n    # end = 0\n    # for i in nums:\n    #     if i >= 0:\n    #         end = end + 1\n    #         start = start + i\n    #     else:\n    #         start = start + (abs(i) * 2)\n    # return (end/start)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    positive_array = []\n    for i in range(len(nums)):\n        positive_array.append(nums[i])\n    positive_array.sort()\n    positive_count = 0\n    for i in range(len(nums)):\n        positive_count = positive_count + positive_array.count(nums[i])\n        \n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = array('i',nums)\n    total = 0\n    for i in range(len(a)):\n        if a[i]>=0:\n            total += a[i]\n    return total/len(a)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count = pos_count + 1\n    return (pos_count/len(nums))\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    neg_count = 0\n    for num in nums:\n        if num < 0:\n            neg_count = neg_count + 1\n    return (neg_count/len(nums))\ndef reverse_count(nums):\n    '''\n    Write a function to find the ration of reverse numbers in an array of integers.\n    '''\n    rev_count = 0\n    for num in nums:\n        if num > 0:\n            rev_count = rev_count + 1\n    return (rev_count/len(nums))\ndef concat_count(nums):\n    '''\n    Write a function to find the ration of concat numbers in an array of integers.\n    '''\n    c = nums[0]\n    for num in nums[1:]:\n        c = c + num\n    return c/len(nums)\ndef max_count(nums):\n    '''\n    Write a function to find the ration of maximum numbers in an array of integers.\n    '''\n    max_count = 0\n    max_num = nums[0]\n    for num in nums[1:]:\n        if max_num < num:\n            max_num = num\n            max_count = 1\n        elif num < max_num:\n            max_count = max_count + 1\n    return max_count/len(nums)\ndef min_count(nums):\n    '''\n    Write a function to find the ration of minimum numbers in an array of integers.\n    '''\n    min_count = nums[0]\n    min_num = nums[0]\n    for num in nums[1:]:\n        if min_num > num:\n            min_num = num\n            min_count = 1\n        elif num < min_num:\n            min_count = min_count + 1\n    return min_count/len(nums)\ndef sum_count(nums):\n    '''\n    Write a function to find the ration of sum numbers in an array of integers.\n    '''\n    sum_count = 0\n    for num in nums:\n        sum_count = sum_count + num\n    return sum_count/len(nums)\ndef min_num_count(nums):\n    '''\n    Write a function to find the ration of minimum numbers in an array of integers.\n    '''\n    min_count = nums[0]\n    for num in nums[1:]:\n        if min_count < num:\n            min_count = num\n    return min_count/len(nums)\ndef count_smallest_num(nums):\n    '''\n    Write a function to find the ration of smallest numbers in an array of integers.\n    '''\n    smallest_count = 0\n    smallest_num = nums[0]\n    for num in nums[1:]:\n        if smallest_num < num:\n            smallest_num = num\n            smallest_count = 1\n        elif num < smallest_num:\n            smallest_count = smallest_count + 1\n    return smallest_count/len(nums)\ndef count_biggest_num(nums):\n    '''\n    Write a function to find the ration of biggest numbers in an array of integers.\n    '''\n    biggest_count = 0\n    biggest_num = nums[0]\n    for num in nums[1:]:\n        if biggest_num > num:\n            biggest_num = num\n            biggest_count = 1\n        elif num > biggest_num:\n            biggest_count = biggest_count + 1\n    return biggest_count/len(nums)\ndef count_largest_num(nums):\n    '''\n    Write a function to find the ration of largest numbers in an array of integers.\n    '''\n    largest_count = 0\n    largest_num = nums[0]\n    for num in nums[1:]:\n        if largest_num < num:\n            largest_num = num\n            largest_count = 1\n        elif num < largest_num:\n            largest_count = largest_count + 1\n    return largest_count/len(nums)\ndef count_smallest_num_2(nums):\n    '''\n    Write a function to find the ration of smallest numbers in an array of integers.\n    '''\n    smallest_count = 0\n    smallest_num = nums[0]\n    for num in nums[1:]:\n        if smallest_num > num:\n            smallest_num = num\n            smallest_count = 1\n        elif num < smallest_num:\n            smallest_count = smallest_count + 1\n    return smallest_count/len(nums)\ndef count_biggest_num_2(nums):\n    '''\n    Write a function to find the ration of biggest numbers in an array of integers.\n    '''\n    biggest_count = 0\n    biggest_num = nums[0]\n    for num in nums[1:]:\n        if biggest_num < num:\n            biggest_num = num\n            biggest_count = 1\n        elif num < biggest_num:\n            biggest_count = biggest_count + 1\n    return biggest_count/len(nums)\ndef count_largest_num_2(nums):\n    '''\n    Write a function to find the ration of largest numbers in an array of integers.\n    '''\n    largest_count = 0\n    largest_num = nums[0]\n    for num in nums[1:]:\n        if largest_num > num:\n            largest_num = num\n            largest_count = 1\n        elif num < largest_num:\n            largest_count = largest_count + 1\n    return largest_count/len(nums)\ndef count_smallest_num_3(nums):\n    '''\n    Write a function to find the ration of smallest numbers in an array of integers.\n    '''\n    smallest_count = 0\n    smallest_num = nums[0]\n    for num in nums[1:]:\n        if smallest_num < num:\n            smallest_num = num\n            smallest_count = 1\n        elif num < smallest_num:\n            smallest_count = smallest_count + 1\n    return smallest_count/len(nums)\ndef count_biggest_num_3(nums):\n    '''\n    Write a function to find the ration of biggest numbers in an array of integers.\n    '''\n    biggest_count = 0\n    biggest_num = nums[0]\n    for num in nums[1:]:\n        if biggest_num > num:\n            biggest_num = num\n            biggest_count = 1\n        elif num < biggest_num:\n            biggest_count = biggest_count + 1\n    return biggest_count/len(nums)\ndef count_largest_num_3(nums):\n    '''\n    Write a function to find the ration of largest numbers in an array of integers.\n    '''\n    largest_count = 0\n    largest_num = nums[0]\n    for num in nums[1:]:\n        if largest_num > num:\n            largest_num = num\n            largest_count = 1\n        elif num < largest_num:\n            largest_count = largest_count + 1\n    return largest_count/len(nums)\ndef count_smallest_num_4(nums):\n    '''\n    Write a function to find the ration of smallest numbers in an array of integers.\n    '''\n    smallest_count = 0\n    smallest_num = nums[0]\n    for num in nums[1:]:\n        if smallest_num > num:\n            smallest_num = num\n            smallest_count = 1\n        elif num < smallest_num:\n            smallest_count = smallest_count + 1\n    return smallest_count/len(nums)\ndef count_biggest_num_4(nums):\n    '''\n    Write a function to find the ration of biggest numbers in an array of integers.\n    '''\n    biggest_count "
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    max_value = max(nums)\n    print(f\"max value: {max_value}\")\n    num_list = []\n    for num in nums:\n        if num > 0:\n            num_list.append(num)\n    print(f\"num_list: {num_list}\")\n    print(f\"num_list size: {len(num_list)}\")\n    i = 0\n    num = num_list[i]\n    for j in range(len(num_list)):\n        if num_list[j] > 0:\n            i += 1\n            num = num_list[i]\n    return num/max_value\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    max_value = max(nums)\n    print(f\"max value: {max_value}\")\n    num_list = []\n    for num in nums:\n        if num < 0:\n            num_list.append(num)\n    print(f\"num_list: {num_list}\")\n    print(f\"num_list size: {len(num_list)}\")\n    i = 0\n    num = num_list[i]\n    for j in range(len(num_list)):\n        if num_list[j] < 0:\n            i += 1\n            num = num_list[i]\n    return num/max_value\ndef mean(nums):\n    '''\n    Write a function to compute the mean of an array of numbers.\n    '''\n    sum = 0\n    count = 0\n    for num in nums:\n        sum += num\n        count += 1\n    return sum/count\ndef median(nums):\n    '''\n    Write a function to compute the median of an array of numbers.\n    '''\n    if len(nums) % 2 == 0:\n        return (nums[int(len(nums)/2)] + nums[int(len(nums)/2)-1]) / 2\n    else:\n        return nums[int(len(nums)/2)]\ndef variance(nums):\n    '''\n    Write a function to compute the variance of an array of numbers.\n    '''\n    if len(nums) % 2 == 0:\n        mean_1 = mean(nums)\n        mean_2 = mean(nums)\n        var = 0\n        for num in nums:\n            if num > mean_1:\n                var += (num - mean_1) ** 2\n        return var / (len(nums)/2)\n    else:\n        return nums[int(len(nums)/2)]\ndef std_dev(nums):\n    '''\n    Write a function to compute the standard deviation of an array of numbers.\n    '''\n    mean = mean(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    mean_2 = mean\n    var = 0\n    for num in nums:\n        if num > mean_2:\n            var += (num - mean_2) ** 2\n    return (var/(len(nums)-1)) ** (1/2)\ndef min(nums):\n    '''\n    Write a function to compute the minimum number in an array of integers.\n    '''\n    min_num = 0\n    for num in nums:\n        if num < min_num:\n            min_num = num\n    return min_num\ndef max(nums):\n    '''\n    Write a function to compute the maximum number in an array of integers.\n    '''\n    max_num = 0\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\ndef mean_confidence_interval(nums, confidence_level):\n    '''\n    Write a function to compute the mean confidence interval of an array of numbers.\n    '''\n    mean_1 = mean(nums)\n    mean_2 = mean(nums)\n    var = variance(nums)\n    print(f\"var: {var}\")\n    print(f\"mean_1: {mean_1}\")\n    print(f\"mean_2: {mean_2}\")\n    print(f\"sum_x: {sum(nums)}\")\n    mean_1_2 = mean(nums) + 2*mean(nums) * confidence_level\n    mean_2_2 = mean(nums) + 2*mean(nums) * (1-confidence_level)\n    print(f\"mean_1_2: {mean_1_2}\")\n    print(f\"mean_2_2: {mean_2_2}\")\n    std_dev_1 = std_dev(nums)\n    print(f\"std_dev_1: {std_dev_1}\")\n    std_dev_2 = std_dev(nums)\n    print(f\"std_dev_2: {std_dev_2}\")\n    std_dev_3 = std_dev(nums) + (std_dev_1 * confidence_level)\n    print(f\"std_dev_3: {std_dev_3}\")\n    return (mean_1_2 - mean_2_2, mean_1_2 + mean_2_2, std_dev_1, std_dev_2, std_dev_3)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    res = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            res += 1\n    print(\"Ration of positive numbers : \" + str(res/len(nums)))\n    return res/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total/len(nums)\n    \ndef squared_count(nums):\n    '''\n    Write a function to find the ration of squared numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        total += num*num\n    return total/len(nums)\n    \ndef cbr(nums):\n    '''\n    Write a function to find the ration of cubes (squared, cubes) in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        total += num*num*num\n    return total/len(nums)\n    \ndef product(nums):\n    '''\n    Write a function to find the product of any given numbers.\n    '''\n    total = 1\n    for num in nums:\n        total = total * num\n    return total\n    \ndef sum_numbers(nums):\n    '''\n    Write a function to find the sum of any given numbers.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \ndef mean(nums):\n    '''\n    Write a function to find the mean of any given numbers.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total/len(nums)\n    \ndef median(nums):\n    '''\n    Write a function to find the median of any given numbers.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total/len(nums)\n    \ndef mode(nums):\n    '''\n    Write a function to find the mode of any given numbers.\n    '''\n    mode = 0\n    count = 0\n    for num in nums:\n        if num>mode:\n            mode = num\n        elif num == mode:\n            count += 1\n        else:\n            pass\n    return count, mode\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num >= 0:\n            pos_count += 1\n    return pos_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    nums_array = array('i', nums)\n    lst = []\n    result = 0\n    count = 0\n    for i in range(len(nums_array)):\n        if nums_array[i] > 0:\n            count = count + 1\n        lst.append(nums_array[i])\n    \n    for i in range(len(lst)):\n        if lst[i] > 0:\n            result = result + (lst[i]/count)\n        \n    return result\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #construct a dictionary containing positive numbers\n    positive_nums = {}\n    \n    #loop through each value in the nums array to find it and add it to the dictionary\n    for n in nums:\n        if n > 0:\n            positive_nums[n] = positive_nums.get(n, 0) + 1\n    \n    #return the dictionary with positive numbers and ratios\n    return positive_nums\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_neg = []\n    for i in list1:\n        if i < 0:\n            list_neg.append(i)\n    list_neg.sort()\n    return list_neg[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_number = list1[0]\n    for num in list1[1:]:\n        if num < largest_number:\n            largest_number = num\n    return largest_number\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = [int(x) for x in list1 if x > 0] \n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i)\n        list2.append(-i)\n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    new_list = []\n    for item in list1: \n        if item < 0: \n            new_list.append(item)\n    new_list.sort()\n    return new_list[-1] \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # print(list1)\n    neg_list = list()\n    for element in list1:\n        neg = element * -1\n        neg_list.append(neg)\n    # print(neg_list)\n    max_neg = neg_list[0]\n    for i in range(1, len(neg_list)):\n        if neg_list[i] < max_neg:\n            max_neg = neg_list[i]\n    # print(max_neg)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    new_list = []\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            new_list.append(list1[i])\n    return max(new_list) \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            max_neg = max(list1[i], max_neg)\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = list1[0]\n    for i in list1:\n        if i < 0:\n            max_negative = i\n    return max_negative\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] % K == 0:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for x in test_list:\n        while len(x) > K:\n            x = x[:K]\n        yield x\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(tup):\n        tup = list(tup)\n        tup = [t for t in tup if t]\n        return tup[0:K]\n    return trim\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Replace with proper if statement\n    \n    if len(test_list) < K:\n        return test_list\n    else:\n        tuple = []\n        # convert input list to tuple\n        for item in test_list:\n            tuple.append(item)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for lst in test_list:\n        for i in range(len(lst)):\n            if len(lst) > i+1:\n                lst[i] = lst[i][:K]\n    new_list = new_list + lst\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    trimmed_list = []\n    \n    for item in test_list:\n        if item not in trimmed_list:\n            trimmed_list.append(item)\n    \n    for x in trimmed_list:\n        test_list.remove(x)\n    \n    return trimmed_list\n    \ndef main():\n    '''\n    Main entry point for module execution.\n    '''\n    \n    argument_parser = argparse.ArgumentParser(\n            description='A tool to extract all paragraphs from a given text file.'\n            )\n    \n    argument_parser.add_argument(\n            'input_file',\n            help='the input file'\n            )\n    \n    \n    arguments = argument_parser.parse_args()\n    \n    input_file = arguments.input_file\n    \n    file_contents = read_text_file(input_file)\n    \n    if not check_text_file(file_contents):\n        raise IOError('The input file does not contain any valid text')\n        \n    \n    paragraph_list = []\n    paragraph_dict = {}\n    paragraph_indices = {}\n    \n    for paragraph in text_to_paragraphs(file_contents):\n        paragraph_list.append(paragraph)\n        paragraph_indices[paragraph.id] = paragraph\n        \n        if paragraph.id not in paragraph_dict:\n            paragraph_dict[paragraph.id] = paragraph\n        \n    for paragraph in paragraph_list:\n        for sentence in paragraph.sentences:\n            if sentence.id not in paragraph_indices:\n                paragraph_indices[sentence.id] = sentence\n                \n    trimmed_paragraph_list = trim_tuple(paragraph_list, K)\n    \n    print('The trimmed paragraph list is:')\n    for paragraph in trimmed_paragraph_list:\n        print(paragraph.text)\n    \n    paragraph_list = trim_paragraph(paragraph_list)\n    \n    trimmed_paragraph_list = trim_tuple(paragraph_list, K)\n    \n    print('The trimmed paragraph list is:')\n    for paragraph in trimmed_paragraph_list:\n        print(paragraph.text)\n    \n    paragraph_dict = trim_tuple(paragraph_dict, K)\n    \n    print('The trimmed paragraph dict is:')\n    for paragraph in paragraph_dict:\n        print(paragraph_dict[paragraph].text)\n        \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    i = 0\n    while i < len(test_list):\n        j = i + 1\n        while j < len(test_list) and test_list[j][0] < test_list[i][0]:\n            j += 1\n        test_list[i], test_list[j] = test_list[j], test_list[i]\n        i += 1\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        while i < len(test_list):\n            test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # the given list is in the form of\n    # (x, y, z)\n    # x = z = y =\n    # x\n    # y\n    # z\n    # z\n    # if k <= 0 then return original tuple.\n    # else return only the k-th elements.\n    # the given list must have at least 1 tuple.\n    # the given list must have at least k tuples.\n    # if list has 0 elements then return tuple(0, 0, 0)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 1\n    for i in range(len(test_tup1)):\n        result *= test_tup1[i]\n    for j in range(len(test_tup2)):\n        result *= test_tup2[j]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (0,0)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_list = []\n    for x in range(len(test_tup1)):\n        index_multiplication_list.append(test_tup1[x] * test_tup2[x])\n    return index_multiplication_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_dict = {'0':1, '1':1, '2':3, '3':6, '4':24, '5':120, '6':720}\n    return sum(index_multiplication_dict.values())(test_tup1, test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i], test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_tup1 = []\n    index_multiplication_tup2 = []\n    for i in range(len(test_tup1)):\n        index_multiplication_tup1.append(test_tup1[i]*test_tup2[i])\n    \n    for i in range(len(index_multiplication_tup1)):\n        index_multiplication_tup2.append(index_multiplication_tup1[i])\n    \n    return index_multiplication_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # TODO: Write your code here\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] *= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = [test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2]]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    result = 1\n    for i in test_tup1:\n        result = result * i\n    for i in test_tup2:\n        result = result * i\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    res = []\n    for k, v in cnt.items():\n        res.append([k,v])\n    return res\ndef word_count(sentence):\n    '''\n    Return dictionary with words as key and their count as value\n    '''\n    return Counter(word_tokenize(sentence))\ndef word_tokenize(sentence):\n    '''\n    Return list of words in a sentence in the form of a list \n    '''\n    return sentence.split()\ndef pad_sequence(sequence, max_length):\n    '''\n    Pad all the sequences to a length of max_length\n    '''\n    return sequence + [0] * (max_length - len(sequence))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    tup_cnt = tup[0]\n    for i in range(1,len(tup)):\n        if tup[i] in lst:\n            occ[tup[i]] += 1\n        else:\n            occ[tup[i]] = 1\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return(Counter(lst).get(tup[0],0)+Counter(tup[1]).get(tup[0],0)+Counter(tup[1]).get(tup[0],0)+Counter(tup[1]).get(tup[0],0)+Counter(tup[1]).get(tup[0],0)+Counter(tup[1]).get(tup[0],0)+Counter(tup[1]).get(tup[0],0)+Counter(tup[1]).get(tup[0],0))\ndef biggest_frequency(list1):\n    '''\n    Write a python function to return the largest value in a list.\n    '''\n    return max(list1)\ndef non_liquor_symbol(tup):\n    '''\n    Write a python function to identify the non-liquor symbol.\n    '''\n    return tup[0]\ndef non_liquor_symbol_occurrence(tup,list1):\n    '''\n    Write a python function to identify the non-liquor symbol and occurrence of that symbol.\n    '''\n    return count_Occurrence(tup, list1)\ndef non_liquor_symbol_occurrence_lst(tup, list1):\n    '''\n    Write a python function to identify the non-liquor symbol and occurrence of that symbol.\n    '''\n    return[count_Occurrence(tup, list1), non_liquor_symbol(tup)]\ndef count_unique_symbol(tup, lst):\n    '''\n    Write a python function to count unique symbols from a tuple.\n    '''\n    return len(set(lst))\ndef unique_symbol(tup):\n    '''\n    Write a python function to identify the unique symbol.\n    '''\n    return tup[0]\ndef unique_symbol_occurrence(tup,list1):\n    '''\n    Write a python function to identify the unique symbol and occurrence of that symbol.\n    '''\n    return count_Occurrence(tup, list1)\ndef unique_symbol_occurrence_lst(tup, list1):\n    '''\n    Write a python function to identify the unique symbol and occurrence of that symbol.\n    '''\n    return [count_Occurrence(tup, list1),unique_symbol(tup)]\ndef find_common_symbol(tup1,tup2):\n    '''\n    Write a python function to identify the common symbol between two tuple.\n    '''\n    return(tup1[0]==tup2[0]) and (tup1[1]==tup2[1])\ndef common_symbol(tup1,tup2):\n    '''\n    Write a python function to identify the common symbol between two tuple.\n    '''\n    return(tup1[0]==tup2[0]) and (tup1[1]==tup2[1])\ndef print_tuple(lst):\n    '''\n    Print a tuple using a loop.\n    '''\n    for i in range(0,len(lst)):\n        print(lst[i])\ndef print_tuple_occurrence(lst,tup):\n    '''\n    Print a tuple using a loop.\n    '''\n    for i in range(0,len(lst)):\n        print(lst[i])\n        print(tup[i])\ndef unique_symbol_occurrence_list(tup1,tup2):\n    '''\n    Print a tuple using a loop.\n    '''\n    return[count_Occurrence(tup1,tup2),unique_symbol(tup1),unique_symbol(tup2)]\ndef print_uniq_symbol_occurrence_list(tup1,tup2):\n    '''\n    Print a tuple using a loop.\n    '''\n    return[unique_symbol_occurrence(tup1,tup2),unique_symbol(tup1),unique_symbol(tup2)]\ndef print_uniq_symbol_occurrence_lst(tup1,tup2):\n    '''\n    Print a tuple using a loop.\n    '''\n    return[unique_symbol_occurrence_lst(tup1,tup2),unique_symbol(tup1),unique_symbol(tup2)]\ndef print_uniq_symbol_occurrence_lst_occurrence(tup1,tup2):\n    '''\n    Print a tuple using a loop.\n    '''\n    return[unique_symbol_occurrence_lst_occurrence(tup1,tup2),unique_symbol(tup1),unique_symbol(tup2)]\ndef count_symbol_occurrence(tup1,tup2):\n    '''\n    Write a python function to count the occurrences of symbols in a tuple.\n    '''\n    return len(set(tup1+tup2))\ndef count_symbol_occurrence_occurrence(tup1,tup2):\n    '''\n    Write a python function to count the occurrences of symbols in a tuple.\n    '''\n    return len(set(tup1+tup2))\ndef frequency_occurrence(tup):\n    '''\n    Write a python function to find the frequency of symbols in a tuple.\n    '''\n    return(tup[0]/len(tup[1]))\ndef frequency_occurrence_occurrence(tup,list1):\n    '''\n    Write a python function to find the frequency of symbols in a tuple.\n    '''\n    return[count_Occurrence(tup,list1),frequency_occurrence(tup)]\ndef frequency_occurrence_occurrence_lst(tup,list1):\n    '''\n    Write a python function to find the frequency of symbols in a tuple.\n    '''\n    return[count_Occurrence(tup,list1),frequency_occurrence(tup,list1)]\ndef frequency_occurrence_occurrence_lst_occurrence(tup,list1):\n    '''\n    Write a python function to find the frequency of symbols in a tuple.\n    '''\n    return[count_Occurrence(tup,list1),frequency_occurrence(tup,list1)]\ndef most_occurrence(list1):\n    '''\n    Write a python function to find the most occurrence of a tuple.\n    '''\n    return max(list1, key=lambda tup: count_Occurrence(tup, list1))\ndef most_occurrence_occurrence(list1):\n    '''\n    Write a python function to find the most occurrence of a tuple.\n    '''\n    return max(list1, key=lambda tup: count_Occurrence(tup, list1))\ndef most_occurrence_occurrence_occurrence(list1):\n    '''\n    Write a python function to find the most occurrence of a tuple.\n    '''\n    return max(list1, key=lambda tup: count_Occurrence(tup, list1))\ndef most_occurrence_occurrence_occurrence(list1):\n    '''\n    Write a python function to find the most occurrence of a tuple.\n    '''\n    return max(list1, key=lambda tup: count_Occurrence(tup, list1))\ndef most_occurrence_occurrence_occurrence(list1):\n    '''\n    Write a python function to find the most occurrence of a tuple.\n    '''\n    return max(list1, key=lambda tup: count_Occurrence(tup, list1))\ndef most_occurrence_occurrence_occurrence(list1):\n    '''\n    Write a python function to find the most occurrence of a tuple.\n    '''\n    return max(list1, key=lambda tup: count_Occurrence(tup, list1))\ndef most_occurrence_occurrence_occurrence(list1):\n    '''\n    Write a python function to find the most occurrence of a tuple.\n    '''\n    return max(list1, key=lambda tup: count_Occurrence(tup, list1))\ndef top_occurrence(list1):\n    '''\n    Write a python function to find the top occurrence of a tuple.\n    '''\n    return list1[-1]\nde"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = Counter(tup)\n    for ele in occurence:\n        occurence[ele] = occurence[ele] + 1\n    return occurence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(Counter(lst).values())\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = Counter(lst)\n    return occurrence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # '''\n    # count = 0\n    # for t in tup:\n    #     if t in lst:\n    #         count += 1\n    # return count\n    return len([i for i in lst if i in tup])\n    # '''\n    \ndef mod_inv(x): \n    '''\n    This function finds the multiplicative inverse of a given number.\n    '''\n    assert x > 0, 'x must be a positive integer'\n    a, b = abs(x), abs(1/x) # finds the absolute values of the arguments.\n    if b == 1: \n        return a\n    if a < b: \n        return mod_inv(b)\n    while b!= 0: \n        x, y = x % b, b\n        q, r = y, x \n        # use a modulo to find the first non-zero\n        # remainder after dividing by b.\n        while r!= 0: \n            q, r = r, q % r \n        x, y = y, q\n        b, a = b, a\n    return a \ndef mod_inv_rec(x, n): \n    '''\n    This function finds the multiplicative inverse of a given number.\n    '''\n    assert x > 0, 'x must be a positive integer'\n    a, b = abs(x), abs(1/x) # finds the absolute values of the arguments.\n    if b == 1: \n        return a\n    if a < b: \n        return mod_inv_rec(b, n)\n    while b!= 0: \n        x, y = x % b, b\n        q, r = y, x \n        # use a modulo to find the first non-zero\n        # remainder after dividing by b.\n        while r!= 0: \n            q, r = r, q % r \n        x, y = y, q\n        b, a = b, a\n    return a \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup: \n        for j in lst:\n            if i == j: \n                lst.remove(j) \n    return len(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    t = lst[0]\n    occ = Counter() \n    for i in tup: \n        occ[i] = lst.count(i) \n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    count = 0\n    for e in tup:\n        if e in c:\n            count += c[e]\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube_nums(num) for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [a**3 for a in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = [cube for cube in range(1,10)]\n    result = []\n    for cube in cube_list:\n        result.append(cube*cube*cube)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n    \ndef get_nums(nums, num):\n    '''\n    Return a list of cubes of the element num.\n    '''\n    nums.append(num**3)\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [1, 1, 1, 1, 1, 2, 4, 8, 16, 32, 64]\n    for num in nums:\n        cubes[num] = cubes[num] * cubes[num] * cubes[num]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for x in nums:\n        result.append(x**3)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for num in range(n+1):\n        sum += num\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        sum += i \n    print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    for i in range(1, n+1):\n        res += i\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #Your code here\n    sum = 0\n    for i in range(n, 0, -1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # your code here\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # if n > 0 :\n    #     sum_n = 0\n    #     for i in range(1, n+1):\n    #         sum_n += i\n    #     print(sum_n)\n    # else : \n    #     print(\"Insufficient input\")\n    return n\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # TODO: Write your code here\n    for i in range(1, n+1):\n        sum = 0\n        for j in range(1, i):\n            sum += j\n        print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(n+1): \n        result += i \n    return result \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    length = len(str)\n    end = length - l\n    return [i for i in str if i.endswith(str[0:end])]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Create a var for the longest string\n    max_len = -1\n    \n    # Create a list to hold the original values\n    orig = []\n    \n    # Check if the length of the list is equal to 0\n    if len(str) == 0:\n        return orig\n    \n    # If not equal to 0, calculate the longest string\n    while len(str) > 0:\n        # Remove the first character from the list\n        string = str.pop(0)\n        \n        # Add the string to the list\n        orig.append(string)\n        \n        # Check if the string is longer than the max_len\n        if len(string) > max_len:\n            max_len = len(string)\n    \n    # Return the list\n    return orig\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    #print(str)\n    i = 0\n    res = []\n    while i < len(str):\n        #print(str[i])\n        if i == len(str):\n            res.append(str[i])\n        elif str[i] == '{':\n            res.append(str[i])\n            #print('res',res)\n            j = i\n            while str[j]!= '}':\n                if str[j] == '{':\n                    res.append(str[j])\n                    j += 1\n                else:\n                    i += 1\n            res.append('}')\n            #print('res',res)\n            j = i\n            while str[j]!= '{':\n                if str[j] == '{':\n                    res.append(str[j])\n                    j += 1\n                else:\n                    i += 1\n            res.append('{')\n            #print('res',res)\n            j = i\n            while str[j]!= '}':\n                if str[j] == '{':\n                    res.append(str[j])\n                    j += 1\n                else:\n                    i += 1\n            res.append('}')\n        else:\n            if str[i]!='':\n                res.append(str[i])\n            i += 1\n    return ''.join(res)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = len(str)\n    while start < end:\n        mid = (start + end) // 2\n        if str[mid] == l:\n            return mid\n        elif str[mid] > l:\n            end = mid\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = ''\n    for i in range(len(str)):\n        s += str[i]\n    return s[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return \"\"\n    else:\n        return str[:l[0]] + extract_string(str[l[0]:l[1]], l[1:])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = list(map(str.strip, l))\n    if len(str) > 1:\n        l = [l[x:x+l[0]] for x in range(0, len(l), l[0])]\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # pass the list of values into the function\n    # iterate through the list\n    # call the function and store the extracted string in a variable\n    # concatenate the extracted string with the l variable\n    # return the concatenated string\n    return str.extractall(l)[0]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return \"\"\n    else:\n        return str[:l[0]] + extract_string(str, l[1:])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        if l[0] == l[-1]:\n            return extract_string(str, l[1:-1])\n        else:\n            return '{0} {1}'.format(l[0], extract_string(str, l[1:]))\n    except IndexError:\n        return str\n    except TypeError:\n        return str\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    return text1.replace('\\n','').replace('\\t','').replace(' ', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\t','').replace('\\n','').replace('\\r','').replace(' ','')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.strip()\n    return text2\ndef replace_text(text1):\n    '''\n    Write a function to replace the given text with the given text2.\n    '''\n    text2=text1.replace('\\t',' ')\n    return text2\ndef remove_alpha(text1):\n    '''\n    Write a function to remove the all characters that are not alphabetic from the given string.\n    '''\n    text2=text1.translate(str.maketrans({'\\n':''}))\n    return text2\ndef convert_to_lowercase(text1):\n    '''\n    Write a function to convert all characters in the given string to lowercase.\n    '''\n    text2=text1.lower()\n    return text2\ndef convert_to_uppercase(text1):\n    '''\n    Write a function to convert all characters in the given string to uppercase.\n    '''\n    text2=text1.upper()\n    return text2\ndef convert_to_capitalized(text1):\n    '''\n    Write a function to convert all characters in the given string to lowercase and capitalized.\n    '''\n    text2=text1.capitalize()\n    return text2\ndef remove_symbols(text1):\n    '''\n    Write a function to remove all characters from the given string.\n    '''\n    text2=text1.replace(\"\u2019\",\"'\")\n    return text2\ndef remove_quotes(text1):\n    '''\n    Write a function to remove all quotes from the given string.\n    '''\n    text2=text1.replace('\"',' ')\n    return text2\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    text2=re.sub('[^a-zA-Z]','', text1)\n    return text2\ndef remove_stops(text1):\n    '''\n    Write a function to remove all stopwords from the given string.\n    '''\n    stopwords=['the','and','or','a','of','and','to','it','there','of','the','is','it','out','of','at','to','for','that','have','has','to','a','and','the','and','than','as','this','to','that','it','these','from','that','to','what','what','he','what','he','she','what','he','she','she','her','she','hers','his','their','their','they','their','it','they','they','their','it','they','it','these','those','these','their','those','ours','ours','they','they','them','them','their','ours','our','our','it','our','their','ours','our','their','their','them','they','their','its','its','these','those','these','it','those','it','they','they','them','them','them','its','its','those','those','them','them','it','them','they','they','it','it','they','they','its','its','their','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','its','it"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(\" \",\"\")\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('[\\s+]', '', text1)\n    return text1\ndef print_menu():\n    '''\n    print menu to main menu\n    '''\n    print(\"1: add movie\")\n    print(\"2: add tv show\")\n    print(\"3: add movie list\")\n    print(\"4: add tv show list\")\n    print(\"5: add film list\")\n    print(\"6: add episode list\")\n    print(\"7: search movie\")\n    print(\"8: search tv show\")\n    print(\"9: search movie list\")\n    print(\"10: search tv show list\")\n    print(\"11: search film list\")\n    print(\"12: search episode list\")\n    print(\"13: add category\")\n    print(\"14: add category list\")\n    print(\"15: add list\")\n    print(\"16: add list\")\n    print(\"17: remove list\")\n    print(\"18: remove list\")\n    print(\"19: exit\")\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(\"\\s+\", \" \", text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text_out = ''\n    i = 0\n    while i < len(text1):\n        if text1[i].isspace():\n            text_out = text_out +''\n        else:\n            text_out = text_out + text1[i]\n        i = i + 1\n    return text_out\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Initialization\n    temp_text = ''\n    temp_num = ''\n    temp_space = ''\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'^\\s+', '', text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try: \n        actual_cost = float(actual_cost)\n        sale_amount = float(sale_amount)\n        return round((actual_cost-sale_amount)*.01, 2)\n    except: \n        return 0\n    \ndef get_label(input_amount):\n    '''\n    Write a function that returns the label for the given amount.\n    '''\n    try: \n        input_amount = float(input_amount)\n        if input_amount > 0: \n            return 'Payment'\n        else: \n            return 'Sale'\n    except: \n        return 'Not a valid amount'\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost * sale_amount\n    if actual_cost == 0.0:\n        return loss_amount\n    else:\n        return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return actual_cost-(sale_amount*2)\n    else:\n        return 0\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return 0\n    else: \n        return actual_cost - sale_amount\n    "
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount \n    return loss_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            sum += i\n    if sum == 0 : \n        return n \n    else : \n        return sumofFactors(sum) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Your code here\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        if n%2==0:\n            return sumofFactors(n//2)\n        else:\n            return sumofFactors(n-1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    for i in range(1, n):\n        if n % i == 0: \n            print(i)\n            return n \n    return n \n \ndef fatorial(n): \n    '''\n    Return the factorial of an integer.\n    '''\n    f = 1\n    for i in range(1, n + 1): \n        f = f * i \n    return f \n \ndef invert(x, y): \n    '''\n    Return the integer x^y.\n    '''\n    return pow(x, -1*y)\n \ndef calculatePi(n): \n    '''\n    Write a Python function to calculate the Pi.\n    '''\n    pi = 3.1416\n    return pi * n \n \ndef calculatePi(n): \n    '''\n    Write a Python function to calculate the Pi.\n    '''\n    pi = 3.1416\n    return pi * n \n \ndef isEven(n): \n    '''\n    Return whether a number is even.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False\n \ndef isOdd(n): \n    '''\n    Return whether a number is odd.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n \ndef ceil(n): \n    '''\n    Return the ceiling of a number.\n    '''\n    if n > 0: \n        return n + 1\n    else: \n        return 0\n \ndef floor(n): \n    '''\n    Return the floor of a number.\n    '''\n    if n < 0: \n        return 0\n    else: \n        return n \n \ndef sumOfDigits(n): \n    '''\n    Return the sum of digits of an integer.\n    '''\n    return sum(int(i) for i in str(n))\n \ndef factorial(n): \n    '''\n    Return the factorial of a number.\n    '''\n    f = 1\n    for i in range(1, n): \n        f = f * i \n    return f \n \ndef primeFactors(n): \n    '''\n    Return the prime factors of an integer.\n    '''\n    p = 2\n    while p < int(math.sqrt(n)): \n        if n % p == 0: \n            n = n / p \n        else: \n            p += 1\n    return n \n \ndef isPrime(n): \n    '''\n    Return whether a number is a prime number.\n    '''\n    if n < 2: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0: \n            return False\n    return True\n \ndef primEnumerate(n): \n    '''\n    Return the number of primes below a given number n.\n    '''\n    n = int(n)\n    if n <= 2: \n        return 0\n    if n == 3: \n        return 1\n    m = 0\n    for i in range(4, n): \n        if isPrime(i): \n            m += 1\n    return m \n \ndef divisors(n): \n    '''\n    Return the list of all divisors of a number n.\n    '''\n    divisors = []\n    i = 2\n    while i <= math.sqrt(n): \n        if n % i == 0: \n            divisors.append(i)\n            if i!= n // i: \n                divisors.append(n//i)\n        i += 1\n    return divisors\n \ndef isPerfectSquare(n): \n    '''\n    Return whether a number is perfect square.\n    '''\n    return int(math.sqrt(n)) * int(math.sqrt(n)) == n \n \ndef isLcm(n): \n    '''\n    Return the least common multiple of the numbers below a number n.\n    '''\n    lcm = 1\n    for i in range(2, n+1): \n        if isPerfectSquare(i*i): \n            lcm = i \n    return lcm \n \ndef isGCD(a, b): \n    '''\n    Return the GCD of two numbers.\n    '''\n    if a < b: \n        a, b = b, a \n    while b!= 0: \n        a, b = b, a % b \n    return a \n \ndef isEqual(a, b): \n    '''\n    Return whether a and b are equal.\n    '''\n    return a == b \n \ndef isPerfect(a): \n    '''\n    Return whether a is a perfect square.\n    '''\n    return isPerfectSquare(a) == math.sqrt(a) \n \ndef isPerfect(n): \n    '''\n    Return whether a is a perfect number.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0: \n            return False\n    return True\n \ndef isPositive(n): \n    '''\n    Return whether a is positive.\n    '''\n    return n > 0 \n \ndef isNegative(n): \n    '''\n    Return whether a is negative.\n    '''\n    return n < 0 \n \ndef isPrime(n): \n    '''\n    Return whether a is prime.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0: \n            return False\n    return True\n \ndef isPerfect(n): \n    '''\n    Return whether a is perfect number.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0: \n            return False\n    return True\n \ndef isPerfectNumber(n): \n    '''\n    Return whether a is a perfect number.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0: \n            return False\n    return True\n \ndef factorialFactors(n): \n    '''\n    Return the factorial of a number.\n    '''\n    f = 1\n    for i in range(1, n): \n        f = f * i \n    return f \n \ndef factorial(n): \n    '''\n    Return the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    if n == 0 or n == 1: \n        return 1\n    if n % 2 == 0 or n % 3 == 0: \n        return 2\n    return 2 * factorial(n - 1) \n \ndef isPrimes(n): \n    '''\n    Return whether a number is a prime number.\n    '''\n    if n < 2: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in rang"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            f.append(i)\n            if(n//i==i):\n                f.append(n//i)\n    if(len(f)>1) : \n        print(f)\n    else:\n        print(\"Error, the number is not divisible by any of the factors\")\n        \ndef sumofPow(n) :\n    '''\n    Write a python function to find the sum of the factorial of n.\n    '''\n    fact=[]\n    if(n<0):\n        print(\"Error, negative numbers are not allowed\")\n    else:\n        fact.append(math.factorial(n))\n        for i in range(1,n+1):\n            fact.append(i*fact[i-1])\n    return fact[n]\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors=[]\n    for i in range(1,int(n**0.5)+1):\n        if(n%i==0):\n            factors.append(i)\n            factors.append(n//i)\n    return sum(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    while n!=0: \n        if n%2==0: \n            sum=sum+n \n            n=n//2\n        else: \n            n=n//2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0): \n        return 0\n    i = 2 \n    while i*i <= n: \n        if n % i == 0: \n            n = n / i \n        else: \n            i += 1\n    return n \ndef divisors(n) : \n    '''\n    Create a list of all the divisors of a given number.\n    '''\n    divisors = [] \n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0): \n            divisors.append(i) \n            if (n // i == i) : \n                divisors.append(n//i) \n    divisors.sort() \n    return divisors \ndef isPerfect(n) : \n    '''\n    Determine whether the given number is a perfect number or not.\n    '''\n    if n < 1: \n        return False\n    for i in range(2, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            return False \n    return True \ndef isPerfectDiv(n) : \n    '''\n    Determine whether the given number is a perfect number or not.\n    '''\n    if n < 1: \n        return False\n    for i in range(2, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            return False \n    return True \ndef isPerfectDiv2(n) : \n    '''\n    Determine whether the given number is a perfect number or not.\n    '''\n    if n < 1: \n        return False\n    for i in range(2, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            return False \n    return True \ndef floor(n, i) : \n    '''\n    Return the floor of the given number.\n    '''\n    if n < 0 : \n        return -1 \n    elif n == 0 : \n        return 0 \n    elif (n % i == 0) : \n        return math.floor(n / i) \n    else : \n        return -1 \ndef ceil(n, i) : \n    '''\n    Return the ceiling of the given number.\n    '''\n    if n < 0 : \n        return -1 \n    elif n == 0 : \n        return 0 \n    elif (n % i == 0) : \n        return math.ceil(n / i) \n    else : \n        return -1 \ndef lastElements(n,k) : \n    '''\n    Return the last k elements of the given number.\n    '''\n    l = [] \n    for i in range(k) : \n        l.append(n) \n    return l \ndef rotate(n, k, i) : \n    '''\n    Rotate the given number n to the given number k using the given rotation direction.\n    '''\n    if k == 0 : \n        return n \n    if (i == 0) : \n        return n \n    if (i == 1) : \n        if (n % i == 0) : \n            return n // i \n        else : \n            return -1 \n    if (i == 2) : \n        if (n % i == 0) : \n            return n // i \n        else : \n            return -1 \n    if (i == 3) : \n        if (n % i == 0) : \n            return n // i \n        else : \n            return -1 \n    if (i == 4) : \n        if (n % i == 0) : \n            return n // i \n        else : \n            return -1 \ndef reverse(n, i, k) : \n    '''\n    Return the reverse of the given number, n.\n    '''\n    l = [] \n    while (i > 0) : \n        l.append(n % 10) \n        n //= 10 \n        i -= 1 \n    if (k > 0) : \n        while (k > 0) : \n            l.append(n) \n            n //= 10 \n            k -= 1 \n    return l \ndef areRotationsValid(n, k) : \n    '''\n    Check whether the given number is a rotation valid or not.\n    '''\n    if n == 0 : \n        return False\n    if (n < 1) : \n        return False\n    for i in range(k): \n        if (n % i == 0) : \n            return False \n    return True \ndef fib(n) : \n    '''\n    Create a fibonacci series for the given number.\n    '''\n    if n < 0 : \n        return -1 \n    elif n == 0 : \n        return 0 \n    elif (n % 2 == 0) : \n        return fib(n/2) + fib(n/2) \n    else : \n        return fib(n-1) + fib(n-1) \ndef fibSum(n) : \n    '''\n    Return the sum of the fibonacci series.\n    '''\n    if n == 0 : \n        return 0\n    if (n < 0) : \n        return -1 \n    if (n == 1) : \n        return 1 \n    return fibSum(n - 1) + fibSum(n - 2) \ndef isConsecutive(n) : \n    '''\n    Check whether the given number is a consecutive number or not.\n    '''\n    if n < 1 : \n        return False\n    elif n == 0 : \n        return True \n    elif (n % 2 == 0) : \n        return isConsecutive(n//2) \n    else : \n        return isConsecutive(n-1) \ndef isConsecutive2(n) : \n    '''\n    Check whether the given number is a consecutive number or not.\n    '''\n    if n < 1 : \n        return False\n    elif (n % 2 == 0) : \n        return isConsecutive2(n//2) \n    else : \n        return isConsecutive2(n-1) \ndef isPalindrome(n) : \n    '''\n    Check whether the given number is a palindrome or not.\n    '''\n    if n < 1 : \n        return False\n    elif (n % 2 == 0) : \n        return isPalindrome(n//2) \n    else : \n        return isPalindrome(n-1) \ndef isPalindrome2(n) : \n    '''\n    Check whether the given number is a palindrome or not.\n    '''\n    if n < 1 : \n        return False\n    elif (n % 2 == 0) : \n        return isPalindrome2(n//2) \n    else : \n        return isPalindrome2(n-1) \ndef isPalindrome3(n) : \n    '''\n    Check whether the given number is a palindrome or not.\n    '''\n    if n < 1 : \n        return False\n    elif (n % 2 == 0) : \n        return isPalindrome3(n//2) \n    else : \n        return isPalindrome3(n-1) \ndef isFibonacci(n) : \n    '''\n    Check whether the given number is a Fibonacci number or not.\n    '''\n    if n < 1 : \n        return False\n    elif (n == 0): \n        return True \n    elif (n == 1) : \n        return True \n    return isFibonacci(n//2) + isFibonacci(n//2) \ndef isFibonacci2(n) : \n    '''\n    Check whether the given number is a Fibonacci number or not.\n    '''\n    if n < 1 : \n        return False\n    elif (n == 0) : \n        return True \n    elif (n == 1) : \n        return True \n    return is"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    def fact(n):\n        '''\n        Return the number of digits in the factorial of n.\n        '''\n        if n==0:\n            return 0\n        else:\n            return n*fact(n-1)\n    return (math.floor(n**0.5))*fact(n**0.5-1)\ndef isPerfectSquare(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare2(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare3(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare4(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare5(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare6(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare7(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare8(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare9(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare10(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare11(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare12(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare13(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare14(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare15(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare16(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n*(n+1)/2*2\ndef isPerfectSquare17(n):\n    '''\n    Compute the perfect square of a number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return n*(n+1)/2\n    if n%2==1:\n        return n*(n-1)/2\n    return n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    return sum \ndef isPerfectSquare(n) :\n    '''\n    Write a python function that, given an integer, returns True if it is \n    perfect square, otherwise, it returns False.\n    '''\n    if n == 0 :\n        return True\n    if n < 0 :\n        return False\n    if n % 2 == 0 :\n        return True\n    else :\n        return isPerfectSquare(n / 2)\ndef makeConnected(g):\n    '''\n    Given a graph, return a dictionary that represents the graph in a graph\n    as follows:\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return n \n    else : \n        return n // 2 + sumofFactors(n - 1)\n    \ndef findGCD(a, b) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a == 0 and b == 0 : \n        return 0\n    elif a == b : \n        return a \n    elif a > b : \n        return findGCD(a-b, b) \n    else : \n        return findGCD(a, b-a) \n    \ndef smallest(a, b) : \n    '''\n    Write a python function to find the smallest positive integer that is greater than or equal to a and less than or equal to b.\n    '''\n    if a == 0 and b == 0 : \n        return 1\n    elif a == b : \n        return 2\n    elif a < b : \n        return smallest(a, b - a)\n    else : \n        return smallest(a - b, b)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #define regex\n    word_regex = re.compile(r\"\\w+\")\n    #create a regex object\n    regex = word_regex.findall(text)\n    #create a list\n    list_of_words = regex\n    #sort the list\n    list_of_words = sorted(list_of_words)\n    #return the list of words\n    return list_of_words\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('z')\n    text_match = pattern.search(text)\n    if text_match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    p = re.compile(r'z')\n    m = p.findall(text)\n    return m\n    #return text.lower().strip()\n    #return m\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('\\b\\w+\\b',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(\"z\", text, flags=re.IGNORECASE)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matcher = re.search(r'z', text)\n    if matcher == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    str_word = text.lower()\n    list_word = []\n    str_word_lower = str_word.lower()\n    for word in str_word_lower:\n        if word in list_word:\n            pass\n        else:\n            list_word.append(word)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in text:\n        if word == 'z':\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile('z')\n    pattern = 'z'\n    match = regex.search(text)\n    if match is not None:\n        print('Match')\n    else:\n        print('Not Match')\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if int(monthnum2) > 12:\n            raise ValueError\n        elif int(monthnum2) <= 31:\n            return True\n        else:\n            return False\n    except ValueError:\n        print(\"Wrong format of monthnumber\")\n        return False\n    except:\n        print(\"Wrong format of monthnumber\")\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 0 <= monthnum2 < 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnum = int(monthnum2)\n        if monthnum < 1 or monthnum > 12:\n            return False\n        elif monthnum == 1:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 29:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 2:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 5:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 6:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 7:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 8:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 9:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 10:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 11:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 12:\n        if 31 < monthnum2 <= 30:\n            return True\n        elif 31 < monthnum2 <= 31:\n            return False\n        elif 31 < monthnum2 <= 31:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return monthnum2 == 1\n    else:\n        return (monthnum2 % 12) == 0\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if int(monthnum2)<1 or int(monthnum2)>12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if int(monthnum2) == int(monthnumb):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2<0 or monthnum2>12:\n        return False\n    elif monthnum2==0:\n        return True\n    elif monthnum2>12:\n        return False\n    elif monthnum2==12:\n        return True\n    else:\n        return True\n        \ndef check_monthnumb_valid(monthnumb):\n    '''\n    Write a function to check whether the given month number is valid or not.\n    '''\n    monthnumb=int(monthnumb)\n    if monthnumb<0 or monthnumb>12:\n        return False\n    elif monthnumb==0:\n        return True\n    elif monthnumb>12:\n        return False\n    else:\n        return True\n        \ndef main():\n    '''\n    This program will ask the user for two numbers. The first number should be a month number.\n    The second number should be the day of the month. For example, if the user inputs 22, the program will\n    check if the day of the month is 31 or not.\n    '''\n    monthnum1=input('Enter the month number: ')\n    monthnumb1=int(monthnum1)\n    day1=input('Enter the day of the month: ')\n    daynum1=int(day1)\n    \n    monthnum2=input('Enter the month number: ')\n    monthnumb2=int(monthnum2)\n    day2=input('Enter the day of the month: ')\n    daynum2=int(day2)\n    \n    #Check whether the given month is valid\n    if check_monthnumb_valid(monthnum1):\n        if check_monthnumb_number(monthnum1):\n            if check_monthnumb_valid(monthnum2):\n                if check_monthnumb_number(monthnum2):\n                    if day1>=31 and day2>=31 and daynum1>=1 and daynum2>=1:\n                        print(day1)\n                        print(day2)\n                        print(daynum1)\n                        print(daynum2)\n                        return\n                    elif day1>=30 and day2>=31 and daynum1>=1 and daynum2>=1:\n                        print(day1)\n                        print(day2)\n                        print(daynum1)\n                        print(daynum2)\n                        return\n                    elif day1>=28 and day2>=30 and daynum1>=1 and daynum2>=1:\n                        print(day1)\n                        print(day2)\n                        print(daynum1)\n                        print(daynum2)\n                        return\n                    elif day1>=31 and day2>=30 and daynum1>=1 and daynum2>=1:\n                        print(day1)\n                        print(day2)\n                        print(daynum1)\n                        print(daynum2)\n                        return\n                    else:\n                        print('That day is not a valid one')\n                        return\n                else:\n                    print('That day is not a valid one')\n                    return\n            else:\n                print('That day is not a valid one')\n                return\n        else:\n            print('That day is not a valid one')\n            return\n    else:\n        print('That month number is not a valid one')\n        return\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return reverse_string_list(stringlist)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # START:  DO NOT MODIFY THE CODE INSTRUCTIONS\n    if type(stringlist)!= list:\n        return None\n    if len(stringlist) == 0:\n        return None\n    if len(stringlist) == 1:\n        return stringlist[0]\n    if len(stringlist) > 1:\n        if type(stringlist[0])!= list:\n            return None\n        if len(stringlist[0]) == 0:\n            return stringlist[1]\n        if len(stringlist[0]) > 1:\n            if type(stringlist[1])!= list:\n                return None\n            if len(stringlist[1]) == 0:\n                return stringlist[0]\n            if len(stringlist[1]) > 1:\n                if type(stringlist[0])!= list:\n                    return None\n                if len(stringlist[0]) > 1:\n                    if type(stringlist[1])!= list:\n                        return None\n                    if len(stringlist[1]) > 1:\n                        if type(stringlist[0])!= list:\n                            return None\n                        if len(stringlist[0]) > 1:\n                            if type(stringlist[1])!= list:\n                                return None\n                        return stringlist[0] + stringlist[1][1:]\n    # END:    DO NOT MODIFY THIS CELL\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for element in stringlist:\n        reversedlist.append(element[::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    # create a new list with all characters in reverse order\n    # find the length of the list\n    # reverse the list\n    # return the reversed list\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[index] for index in range(len(stringlist)-1, -1, -1)]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return \"\".join(list(reversed(stringlist)))\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = list(stringlist)\n    stringlist = stringlist[::-1]\n    return stringlist\n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # the function returns the reversed strings in a list\n    def reverse_str_list(stringlist):\n        # we could do reverse_string_list(list_of_strings)\n        # the program would return the reverse of the strings\n        # e.g. list_of_strings[::-1] => reverse(list_of_strings)\n        # the list_of_strings is a list of strings\n        # the reversed string is the concatenated string reversed from each string in the list\n        return stringlist\n        \n    # this function will return the reversed list\n    # the function returns the reversed string\n    def reverse(stringlist):\n        # the return function returns a string\n        return reverse_str_list(stringlist)\n    \n    # this function will return the reversed list\n    # the function returns a list\n    return reverse_str_list(stringlist)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(map(lambda string: string[::-1], stringlist))\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Note: Remember to make sure that the given list is in the same length\n    newstring = \"\"\n    for x in stringlist:\n        newstring += x[::-1] + \" \"\n    return newstring\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (len(lst[i:j]) < min_len):\n                min_len = len(lst[i:j])\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return list(filter(lambda x: len(x)<=min(lst),lst))\n    \nlst = [1, 2, 3, 4, 5]\nprint(Find_Min(lst)"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst: \n        return 0\n    minimum_length = lst[0]\n    current_length = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i] < minimum_length:\n            minimum_length = lst[i]\n            current_length += 1\n        else:\n            current_length += 1\n    return current_length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = []\n    for i in lst: \n        if len(i) < len(min_lst): \n            min_lst = i\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_min = lst[0]\n    lst_min_ind = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < len(lst_min):\n            lst_min = lst[i]\n            lst_min_ind = i\n    return lst_min[lst_min_ind]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    i = 0\n    while(i<n):\n        if (lst[i] < lst[i+1]):\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n        i += 1\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    result = []\n    if(len(lst) == 0):\n        return []\n    for i in range(len(lst)):\n        if (len(lst[i])!= len(lst[0])):\n            return [\"Invalid\"]\n        for j in range(len(lst[0])):\n            if (lst[i][j] < lst[0][j]):\n                result.append(lst[i][j])\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    length = len(lst)\n    if length < 2:\n        return lst\n    elif length == 2:\n        return lst[:1]\n    else:\n        while (i < length - 1):\n            if lst[i] < lst[i+1]:\n                lst[i], lst[i+1] = lst[i+1], lst[i]\n            i = i+1\n        return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    print(lst)\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] < lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        return -1\n    \n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        for j in range(min_length):\n            if lst[i][j] < lst[i][j]: \n                min_length = j\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)/2\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l==0:\n        return 0\n    elif b==0:\n        return l*b\n    else:\n        return l*b+rectangle_area(l-1,b)\n    return rectangle_area(l-1,b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return 0.5 * (l[2] - l[0]) * (b[2] - b[0])\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(c for c in str1 if c.isupper() )\ndef get_pos_and_item(str1, pos, item):\n    '''\n    Return the position of an item in a given string, or -1 if the item isn't found.\n    '''\n    try:\n        if str1[pos] == item:\n            return pos+1\n        else:\n            return -1\n    except IndexError:\n        return -1\ndef find_word(str1, word):\n    '''\n    Return the position of a given word in a given string, or -1 if the word isn't found.\n    '''\n    try:\n        if word in str1:\n            return str1.index(word)\n        else:\n            return -1\n    except ValueError:\n        return -1\ndef get_pattern(str1, word):\n    '''\n    Return the pattern for a given word, or None if the word isn't found.\n    '''\n    try:\n        pos = find_word(str1, word)\n        if pos!= -1:\n            return str1[pos:pos+len(word)]\n        else:\n            return None\n    except ValueError:\n        return None\ndef is_word(str1, word):\n    '''\n    Return True if the given word is a substring of the string, or False otherwise.\n    '''\n    return word in str1\ndef is_pattern(str1, word):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return word in str1\ndef pattern_match(str1, word):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word)\ndef is_token(str1, word):\n    '''\n    Return True if the given token is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word) == None\ndef is_token_item(str1, word, pos):\n    '''\n    Return True if the given token is a substring of the string, or False otherwise.\n    '''\n    return pos in range(len(word)) and is_pattern(str1, word[pos])\ndef is_token_item_pattern(str1, word, pos):\n    '''\n    Return True if the given token is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word[pos]) == None\ndef get_token_item(str1, word, pos):\n    '''\n    Return the token item position, or None if the given token isn't found.\n    '''\n    try:\n        if pos in range(len(word)):\n            return word[pos]\n        else:\n            return None\n    except IndexError:\n        return None\ndef get_token(str1, word, pos):\n    '''\n    Return the token at the given position, or None if the given token isn't found.\n    '''\n    return str1[pos]\ndef is_token(str1, word):\n    '''\n    Return True if the given token is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word)!= None\ndef is_token_pattern(str1, word):\n    '''\n    Return True if the given token is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word)!= None\ndef get_token_pattern(str1, word):\n    '''\n    Return the pattern for the given token, or None if the token isn't found.\n    '''\n    return str1[get_token_item(str1, word, 0)]\ndef replace_token(str1, token, word):\n    '''\n    Return the string after replacing the token with the word provided.\n    '''\n    try:\n        return str1.replace(word, get_token_pattern(str1, word))\n    except ValueError:\n        return str1\ndef token_match(str1, word):\n    '''\n    Return True if the given token is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word)!= None\ndef token_match_pattern(str1, word):\n    '''\n    Return True if the given token is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word)!= None\ndef replace_token_pattern(str1, token, word):\n    '''\n    Return the pattern after replacing the token with the word provided.\n    '''\n    return str1.replace(token, word)\ndef pattern_replace_token(str1, pattern, word):\n    '''\n    Return the string after replacing the token with the word provided.\n    '''\n    try:\n        return str1.replace(pattern, word)\n    except ValueError:\n        return str1\ndef replace_pattern(str1, pattern, word):\n    '''\n    Return the string after replacing the token with the word provided.\n    '''\n    try:\n        return str1.replace(pattern, word)\n    except ValueError:\n        return str1\ndef is_token_pattern(str1, word):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, word)!= None\ndef is_token_pattern_pattern(str1, pattern, word):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, pattern)!= None\ndef is_token_pattern_item(str1, pattern, pos):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, pattern[pos])!= None\ndef is_token_pattern_item_pattern(str1, pattern, pos):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, pattern[pos])!= None\ndef is_pattern(str1, pattern):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return pattern in str1\ndef is_pattern_pattern(str1, pattern):\n    '''\n    Return True if the given pattern is a substring of the string, or False otherwise.\n    '''\n    return is_pattern(str1, pattern)!= None\ndef get_token_pattern_item(str1, pattern, pos):\n    '''\n    Return the token item position, or None if the given pattern isn't found.\n    '''\n    try:\n        if pos in range(len(pattern)):\n            return str1.index(pattern[pos])\n        else:\n            return None\n    except IndexError:\n        return None\ndef get_token_pattern_item_pattern(str1, pattern, pos):\n    '''\n    Return the token item position, or None if the given pattern isn't found.\n    '''\n    return get_token_pattern_item(str1, pattern, pos)!= None\ndef pattern_replace_pattern_item(str1, pattern, item):\n    '''\n    Return the string after replacing the token item with the item provided.\n    '''\n    try:\n        return str1.replace(item, pattern)\n    except ValueError:\n        return str1\ndef replace_token_pattern_item(str1, token, item):\n    '''\n    Return the string after replacing the token item with the item provided.\n    '''\n    try:\n        return str1.replace(token, item)\n    except ValueError:\n        return str1\ndef get_token_pattern_item_pattern_item(str1, pattern, pos):\n    '''\n    Return the token item position, or None if the given pattern isn't found.\n    '''\n    try:\n        if pos in range(len(pattern)):\n            return str1.index(pattern[pos])\n        else:\n            return None\n    except IndexError:\n        return None\ndef get_token_pattern_item_pattern_item_pattern(str1, pattern, pos):\n    '"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    remove_list = []\n    for index, letter in enumerate(str1):\n        if letter.isupper() == True:\n            remove_list.append(letter)\n    return ''.join(remove_list)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\ndef remove_regex(str1):\n    '''\n    Write a function that takes in a string and returns all of the \n    substrings of the string except those that match a pattern.\n    '''\n    return re.findall(r'[a-z]', str1)\ndef remove_spaces(str1):\n    '''\n    Write a function that removes all spaces from a given string.\n    '''\n    return str1.replace(\" \",\"\")\ndef remove_zero(str1):\n    '''\n    Write a function that removes all 0s from a given string.\n    '''\n    return str1.replace('0','')\ndef remove_punctuation(str1):\n    '''\n    Write a function that removes all punctuation from a given string.\n    '''\n    return str1.replace('-','')\ndef replace_numbers(str1):\n    '''\n    Write a function that replaces all numbers with spaces.\n    '''\n    return re.sub(r'[\\d]+','', str1)\ndef remove_words(str1, stopwords):\n    '''\n    Write a function that removes all words from a given string that\n    are not in the stopwords list.\n    '''\n    return str1.replace(' ','')\ndef remove_single_space(str1):\n    '''\n    Write a function that removes any single space from a given string.\n    '''\n    return str1.replace(' ', '')\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function that removes any multiple spaces from a given string.\n    '''\n    return str1.replace(' ', '')\ndef remove_punc(str1):\n    '''\n    Write a function that removes all punctuation from a given string.\n    '''\n    return str1.replace('-', '')\ndef remove_digits(str1):\n    '''\n    Write a function that removes all digits from a given string.\n    '''\n    return str1.replace('0','')\ndef get_unique_words(str1):\n    '''\n    Write a function that returns all unique words from a given string.\n    '''\n    return set(str1.lower().split())\ndef get_unique_words_list(str1):\n    '''\n    Write a function that returns all unique words from a given string.\n    '''\n    return [w for w in str1.lower().split() if w not in stopwords]\ndef get_non_alphanum_words(str1):\n    '''\n    Write a function that returns all the words in a given string that \n    are not alphanumeric.\n    '''\n    return [w for w in str1.lower().split() if w not in alphanum_chars]\ndef get_lower_words(str1):\n    '''\n    Write a function that returns all the words in a given string in lower case.\n    '''\n    return [w.lower() for w in str1.lower().split() if w.lower() not in stopwords]\ndef get_title_words(str1):\n    '''\n    Write a function that returns all the words in a given string in title case.\n    '''\n    return [w.title() for w in str1.lower().split() if w.title() not in stopwords]\ndef get_word_frequency(str1):\n    '''\n    Write a function that returns the frequency of each word in a given string.\n    '''\n    return dict(Counter(str1.split()))\ndef get_dictionary(str1):\n    '''\n    Write a function that returns a dictionary of the words in a given string.\n    '''\n    return dict(Counter(str1.split()))\ndef get_unique_words_dict(str1):\n    '''\n    Write a function that returns a dictionary of all unique words from a given string.\n    '''\n    return dict(Counter(str1.split()).items())\ndef remove_stopwords(str1):\n    '''\n    Write a function that removes any words that are in the stopwords list.\n    '''\n    return str1.replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace(';', '').replace('\\'', '').replace('\"', '').replace(\"'\", '').replace(\"&\", \"and\").replace(\"&\", \"and\").replace(\"-\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\".\", \"\").replace(\":\", \"\").replace(\"!\", \"\").replace(\"'\", \"\").replace(\"'\", \"\")\ndef remove_non_alphanum(str1):\n    '''\n    Write a function that removes all non-alphanumeric characters from a given string.\n    '''\n    return str1.replace(\"-\", \"\")\ndef remove_punctuation_from_string(str1):\n    '''\n    Write a function that removes all punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]',' ', str1)\ndef replace_numbers_with_zeroes(str1):\n    '''\n    Write a function that replaces all numbers with zeroes.\n    '''\n    return re.sub(r'[\\d]+','0',str1)\ndef remove_words_from_string(str1):\n    '''\n    Write a function that removes all words from a given string that \n    are not in the stopwords list.\n    '''\n    return str1.replace(' ','')\ndef remove_single_space_from_string(str1):\n    '''\n    Write a function that removes any single space from a given string.\n    '''\n    return str1.replace(' ','')\ndef remove_multiple_spaces_from_string(str1):\n    '''\n    Write a function that removes any multiple spaces from a given string.\n    '''\n    return str1.replace(' ','')\ndef remove_punctuation_from_string(str1):\n    '''\n    Write a function that removes all punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]',' ', str1)\ndef remove_digits_from_string(str1):\n    '''\n    Write a function that removes all digits from a given string.\n    '''\n    return re.sub(r'[0-9]','',str1)\ndef get_title_words_from_string(str1):\n    '''\n    Write a function that returns all the words in a given string in title case.\n    '''\n    return [w.title() for w in str1.split() if w.title() not in stopwords]\ndef remove_stopwords_from_string(str1):\n    '''\n    Write a function that removes any words that are in the stopwords list.\n    '''\n    return str1.replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace(';', '').replace('\\'', '').replace('\"', '').replace(\"'\", '').replace(\"&\", \"and\").replace(\"&\", \"and\").replace(\"-\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\".\", \"\").replace(\":\", \"\").replace(\"!\", \"\").replace(\"'\", \"\").replace(\"'\", \"\")\ndef remove_non_alphanum_from_string(str1):\n    '''\n    Write a function that removes all non-alphanumeric characters from a given string.\n    '''\n    return str1.replace(\"-\", \"\")\ndef remove_punctuation_from_string_from_string(str1):\n    '''\n    Write a function that removes all punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]',' ', str1)\ndef remove_words_from_string_from_string(str1):\n    '''\n    Write a function that removes all words from a given string that \n    are not in the stopwords list.\n    '''\n    return str1.replace(' ','')\ndef remove_single_space_from_string_from_string(str1):\n    '''\n    Write a function that removes any single space from a given string.\n    '''\n    return str1.replace(' ','')\ndef remov"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('(.)' + re.escape(str1.upper()) + r'{2,}', r'\\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    list1 = list(str1)\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \" or str1[i] == \".\" or str1[i] == \"!\" or str1[i] == \"?\" or str1[i] == \":\":\n            pass\n        else:\n            new_str = new_str + list1[i]\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = []\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            res.append(str1[i].upper())\n        else:\n            res.append(str1[i])\n    return \"\".join(res)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = []\n    result_list = []\n    str1 = str1.replace(' ','').lower()\n    for i in str1:\n        if i!= i.upper() and i!= i.lower():\n            result.append(i)\n    result = result[::-1]\n    for i in result:\n        result_list.append(i)\n    return ''.join(result_list)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\n    \ndef count_string(str1):\n    '''\n    Write a function to count the number of times a substring occurs in a given string.\n    '''\n    return str1.count(str1)\n    \ndef get_substring_from_string(str1, start, end):\n    '''\n    Write a function to return the substring of a given string from the given character range.\n    '''\n    return str1[start:end+1]\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]'\n    str2 = re.sub(pattern, '', str1)\n    pattern = r'[a-z]'\n    str3 = re.sub(pattern, '', str2)\n    return str3\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # iterate through each sublist \n    for sublist in lst: \n        # while the element is not None \n        while sublist is not None: \n            # extract the element \n            yield(sublist.pop(0)) \n    # return the empty sublist \n    return()\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    temp_lst = []\n    for el in lst:\n        temp_lst.append(el[0])\n    return temp_lst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Your code here\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def search(my_list, ele):\n        '''\n        Search a sublist with the given value\n        '''\n        for i in my_list:\n            if ele == i[-1]:\n                return i\n        return None\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def getFirst(lst):\n        '''\n        return the first item in the list\n        '''\n        return lst[0]\n    return getFirst(lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\nlst = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]\nprint(Extract(lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = lst[0]\n    for i in range(1,len(lst)):\n        first = lst[i]\n        break\n    return first\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # add your code here\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if lst == []: \n        return None\n    else: \n        return lst[0] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[0]\n    \nlst1 = [2,2,2,2,1,1,1,1,2,2,3,3,4,5,5,6,6,7,7,7,8,8,8,9,9,9,10,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,47,47,47,48,48,48,49,49,49]\nprint(Extract(lst1))\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Write your solution here\n    return str.upper().count('U')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for char in str:\n        if char.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_l = list(str)\n    str_l.reverse()\n    str_l = ''.join(str_l)\n    return str_l.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # count the number of uppercase characters\n    upper_ctr = 0\n    # Iterate over each character in the string\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for i in str:\n        if i.isupper():\n            upper_case += 1\n    return upper_case\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return combinations(list1, len(list1)-1)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.permutations(list1,len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    comb_list.extend(list1)\n    for i in range(len(list1)-1,0,-1):\n        for j in range(i):\n            comb_list.append(list1[j])\n    return comb_list\n    \ndef find_indices(l1,l2):\n    '''\n    Write a function to find all the indices of the elements of the list l1,l2 that are present in the list l2.\n    '''\n    comb_list = combinations_list(l2)\n    indices = []\n    for i in range(len(comb_list)):\n        indices.append(comb_list[i].index(l1[i]))\n    return indices\n    \ndef find_indices_1(l1,l2):\n    '''\n    Write a function to find all the indices of the elements of the list l1,l2 that are present in the list l2.\n    '''\n    indices = []\n    for i in range(len(l2)):\n        if l2[i] in l1:\n            indices.append(l2[i])\n    return indices\n    \ndef reverse_list(l1,l2):\n    '''\n    Write a function to reverse the elements of the list l1,l2.\n    '''\n    rev = l1[::-1]\n    rev.extend(l2)\n    return rev\n    \ndef get_list_length(l1):\n    '''\n    Write a function to find the length of the list l1.\n    '''\n    length = 0\n    for i in l1:\n        length = length + 1\n    return length\n    \ndef get_list_values(l1):\n    '''\n    Write a function to return all the values in the list l1.\n    '''\n    values = []\n    for i in l1:\n        values.append(i)\n    return values\n    \ndef is_prime(number):\n    '''\n    Write a function that takes an integer number and determines if it is a prime number.\n    '''\n    if number == 2 or number == 3:\n        return True\n    if number % 2 == 0 or number % 3 == 0:\n        return False\n    for i in range(5,int(math.sqrt(number))+1,5):\n        if number % i == 0:\n            return False\n    return True\n    \ndef get_prime_numbers(l1,l2,l3,l4):\n    '''\n    Write a function that takes a list l1,l2 and a list l3,l4.\n    If l1 is not a list, return l1[:1].\n    If l2 is not a list, return l2[:1].\n    If l3 is not a list, return l3[:1].\n    If l4 is not a list, return l4[:1].\n    If l1 is a list, return l1[:1] and l2[:1] and l3[:1] and l4[:1]\n    If l1 is a dictionary, return l1[:1] and l2[:1] and l3[:1] and l4[:1]\n    '''\n    if not isinstance(l1,list):\n        l1 = list(l1)\n    if not isinstance(l2,list):\n        l2 = list(l2)\n    if not isinstance(l3,list):\n        l3 = list(l3)\n    if not isinstance(l4,list):\n        l4 = list(l4)\n    if not isinstance(l1,list) or not isinstance(l2,list) or not isinstance(l3,list) or not isinstance(l4,list):\n        return l1[:1]\n    elif len(l1) == 1 and len(l2) == 1 and len(l3) == 1 and len(l4) == 1:\n        return l1[:1] + l2[:1] + l3[:1] + l4[:1]\n    elif len(l1) == 1 and len(l2) == 1 and len(l3) == 1 and len(l4) == 1:\n        return l1 + l2 + l3 + l4\n    elif len(l1) == 1 and len(l2) == 1 and len(l3) == 1:\n        return l1 + l2\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3\n    elif len(l1) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3 + l4\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1 and len(l2) == 1 and len(l3) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1 and len(l2) == 1 and len(l3) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1 and len(l2) == 1 and len(l3) == 1 and len(l4) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1 and len(l2) == 1 and len(l3) == 1 and len(l4) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2\n    elif len(l1) == 1:\n        return l1 + l2 + l3 + l4\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4\n    elif len(l1) == 1:\n        return l1 + l2 + l3 + l4 + l1\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3 + l4\n    elif len(l1) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3 + l4 + l1 + l2 + l3\n    elif len(l1) == 1 and len(l2) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3 + l4 + l1 + l2\n    elif len(l1) == 1:\n        return l1 + l2 + l3 + l4 + l1 + l2 + l3 + "
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(1, len(list1) + 1):\n        for j in combinations_with_replacement(list1, i):\n            res.append(j)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    combinations = itertools.combinations(list1,len(list1)-1)\n    for element in combinations:\n        result.append(''.join(element))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in combinations_list(list1[i+1:]):\n            res.append([list1[i],list1[i+1:],j])\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations_list_helper(list_, index_, ans_list, ans_list_, ans_):\n        if index_ == len(list_):\n            ans_list_.append(ans_)\n            return\n        if list_[index_] in ans_:\n            return\n        for i in range(index_, len(list_)):\n            ans_list_ = combinations_list_helper(list_, i, ans_list_, ans_list, ans_)\n        return ans_list_\n    return combinations_list_helper(list1, 0, [], [], [])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        for i in range(len(list1)):\n            for j in combinations_list(list1[i:]):\n                list1.append(list1[i])\n                yield list1\n                list1.pop()\n    \ndef sample_matrix(rows, cols, numbers):\n    '''\n    Write a function to make a sample matrix.\n    '''\n    matrix = []\n    for i in range(rows):\n        matrix.append([])\n        for j in range(cols):\n            matrix[i].append(numbers[i*rows+j])\n    return matrix\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            combos.append([list1[i],list1[j]])\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations(list1,n):\n        if n == 0:\n            return list1\n        else:\n            for i in range(len(list1)):\n                list1[i] = list1[i]+str(i)\n                combinations(list1,n-1)\n                list1[i] = list1[i]\n    combinations(list1,len(list1))\n    return list1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    elif len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray = []\n    max_sum = float('-inf')\n    min_sum = float('inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray.append(arr[j] * arr[i])\n            if (arr[j] + arr[i]) > max_sum:\n                max_sum = arr[j] + arr[i]\n                subarray.pop(0)\n                subarray.append(arr[i])\n            elif (arr[j] + arr[i]) < min_sum:\n                min_sum = arr[j] + arr[i]\n                subarray.pop(0)\n                subarray.append(arr[i])\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_product_arr = []\n    for i in range(len(arr)):\n        current_subarray = []\n        current_max = 0\n        for j in range(i, len(arr)):\n            current_max += arr[j]\n            current_subarray.append(arr[j])\n            if len(current_subarray) > 0:\n                current_subarray_max = max(current_subarray)\n                if current_subarray_max > current_max:\n                    current_max = current_subarray_max\n            else:\n                current_subarray_max = 0\n        max_subarray_product_arr.append(current_max)\n    return max_subarray_product_arr\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    #compute the sum of all elements\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    sub_arr = []\n    max_product = arr[0]\n    left_max_product = 0\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            left_max_product = arr[i]\n        elif arr[i] < max_product:\n            sub_arr.append(arr[i])\n            max_product = max(arr[i], left_max_product * arr[i])\n        else:\n            left_max_product = arr[i]\n            \n    sub_arr.append(left_max_product)\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < max_product:\n            sub_arr.append(arr[i])\n            max_product = max(arr[i], left_max_product * arr[i])\n        else:\n            sub_arr.append(arr[i])\n    print(sub_arr)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    l = 0\n    r = len(arr) - 1\n    ans = -1\n    \n    while r >= l:\n        \n        if arr[l]*arr[r] > 0:\n            \n            ans = max(ans, arr[l]*arr[r])\n            \n            r -= 1\n            l += 1\n        \n        else:\n            \n            l += 1\n        \n        \n    \n    return ans\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_subarray = 1\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            max_subarray += 1\n        else:\n            max_subarray = arr[i + 1]\n            break\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    s_product = 1\n    max_sub_arr = []\n    max_product = -1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray_length = len(arr)\n    max_product = []\n    max_product_index = -1\n    max_product_sum = 0\n    for i in range(0, subarray_length):\n        for j in range(0, i):\n            max_product.append(arr[i][j] * arr[j][i])\n        if max_product_sum < max(max_product):\n            max_product_sum = max(max_product)\n            max_product_index = i\n        max_product.pop(0)\n    return subarray_length, max_product_sum, max_product_index\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict:\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) < n:\n        return False\n    for key, value in dict.items():\n        if key!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= key:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[i] == dict[i + n] for i in range(n))\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(dict) is not dict:\n        raise TypeError('Input must be a dictionary')\n    if type(n) is not int:\n        raise TypeError('Input must be an integer')\n    for value in dict.values():\n        if type(value) is not int:\n            raise TypeError('Each dictionary value must be an integer')\n    for key in dict.keys():\n        if type(key) is not str:\n            raise TypeError('Each key must be a string')\n        if not all(type(x) is int for x in dict[key]):\n            raise TypeError('Each key must be an integer')\n    for value in dict.values():\n        if value!= n:\n            raise ValueError('Input values do not match')\n    return dict\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not type(dict) is dict:\n        raise TypeError(\"dict is not a dictionary.\")\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict = dict.items()\n    for key, value in dict:\n        if value!= key:\n            print(\"It's not the same value in the dictionary!\")\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if n!= val:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if k == n:\n            return v\n    return None\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(key == n for key in dict.keys()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v == None:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1:\n        if dict1[k] == '':\n            del dict1[k]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # make a copy of the dictionary\n    dict2 = dict1.copy()\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if (len(dict1[key]) == 0):\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key]==None:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1\n    "
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    temp_dict = dict1\n    new_dict = {}\n    for key in temp_dict:\n        if temp_dict[key] == '':\n            del temp_dict[key]\n        else:\n            new_dict[key] = temp_dict[key]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            res[key] = \"No data\"\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Iterate through the array\n    # Return the maximum product\n    # Set the last index to be the size of the array\n    # Set the last index to be the size of the array\n    # Set the current index to be 0\n    # Continue until the last index is reached\n    \n    # Last index is increased to the size of the array\n    # Start at the current index\n    \n    # Set the last index to be the size of the array\n    # Set the last index to be the size of the array\n    # Set the current index to be 0\n    # Continue until the last index is reached\n    \n    # Set the last index to the size of the array\n    # Set the last index to the size of the array\n    # Set the current index to the size of the array\n    # Set the size of the array to 0\n    \n    # Return the maximum product\n    \n    # return the maximum product\n    \n    # largest = 0\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         if arr[i] * arr[j] > largest:\n    #             largest = arr[i] * arr[j]\n    \n    # return largest\n    \n    return max(arr[1:])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_product = 0\n    n = len(arr)\n    \n    # Find the max of the sub arrays\n    for i in range(1, n):\n        \n        # If the maximum product is 0, then store it\n        if arr[i] > arr[i - 1]:\n            max_product = arr[i]\n    \n    # Return the maximum product\n    return max_product\n        \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # get length of array\n    L = len(arr)\n    # create a new array, result\n    result = []\n    # create a new array, temp\n    temp = []\n    # create a new array, temp_sum\n    temp_sum = []\n    # create a new array, temp_sum_sum\n    temp_sum_sum = []\n    # iterate through the array\n    for i in range(L):\n        # initialize temp\n        temp = []\n        # initialize temp_sum\n        temp_sum = 0\n        # iterate through the array\n        for j in range(i, L):\n            # update temp sum\n            temp_sum = arr[j]*temp_sum\n            # update temp\n            temp.append(temp_sum)\n        # append temp to temp_sum\n        temp_sum_sum.append(temp_sum)\n        # append temp to temp_sum_sum\n        temp_sum_sum.append(temp)\n        # append temp to temp_sum_sum\n        # append temp to result\n        result.append(temp)\n    # return result\n    return result\n    \nprint(max_product([3, 4, 1, 6, -2, -1, 0]))"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        max_product = max(max_product*arr[i],arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr_len = len(arr)\n    prod_num = 1\n    max_val = arr[0] * prod_num\n    for i in range(1, arr_len):\n        max_val = max(max_val, arr[i] * prod_num)\n        prod_num *= arr[i]\n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 1\n    for num in arr:\n        if num > result:\n            result = num\n        elif num == result:\n            result *= num\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Write your code here.\n    n = len(arr)\n    arr.append(0)\n    arr.sort()\n    print(arr)\n    \n    \n    curr = arr[0]\n    max_product = 1\n    for i in range(1,n):\n        curr = max(curr * arr[i], arr[i])\n        print(arr,curr)\n        max_product = max(max_product, curr)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) == 1: return arr[0]\n    \n    smallest = arr[0]\n    first_smallest_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n            first_smallest_index = i\n    \n    last_smallest_index = first_smallest_index + 1\n    \n    for i in range(first_smallest_index+1,len(arr)):\n        if arr[i] > smallest:\n            last_smallest_index = i\n    \n    first_arr = arr[first_smallest_index:last_smallest_index]\n    second_arr = arr[last_smallest_index:]\n    \n    max_product = first_arr[0] * second_arr[0]\n    for i in range(1,len(first_arr)):\n        max_product = max(max_product,first_arr[i] * second_arr[i])\n    \n    return max_product\n    \n    \n    \n    "
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product_sum = 1\n    max_sum = arr[0]\n    for i in range(1,len(arr)):\n        product_sum *= arr[i]\n        max_sum = max(max_sum,product_sum)\n    return max_sum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    i = 0\n    n = len(arr)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([(i+j) for i in range(len(test_tup[0])) for j in range(1,len(test_tup[0]))])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup\n    if len(test_tup) == 2:\n        return [test_tup[1], test_tup[0]]\n    if len(test_tup) == 3:\n        return [test_tup[1], test_tup[2]]\n    if len(test_tup) == 4:\n        return [test_tup[1], test_tup[2]]\n    if len(test_tup) == 5:\n        return [test_tup[1], test_tup[2]]\n    if len(test_tup) == 6:\n        return [test_tup[1], test_tup[3]]\n    if len(test_tup) == 7:\n        return [test_tup[1], test_tup[3]]\n    if len(test_tup) == 8:\n        return [test_tup[1], test_tup[3]]\n    if len(test_tup) == 9:\n        return [test_tup[1], test_tup[3]]\n    if len(test_tup) == 10:\n        return [test_tup[1], test_tup[3]]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0]+test_tup[1], test_tup[1]+test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # test_tup = [1,3]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 2:\n        return test_tup[0]+test_tup[1]\n    else:\n        return test_tup[0]+add_pairwise(test_tup[1:])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result.append((test_tup[i], test_tup[j]))\n    return result\n    \ndef edit_distance(str1, str2):\n    '''\n    Write a function to find the edit distance between two strings.\n    '''\n    M = len(str1)\n    N = len(str2)\n    dist = [[0 for i in range(N+1)] for j in range(M+1)]\n    \n    # Initialize distance matrix\n    for i in range(M+1):\n        dist[i][0] = i\n    for j in range(N+1):\n        dist[0][j] = j\n    \n    # Loop through each char of str1\n    for i in range(M):\n        for j in range(N):\n            if str1[i] == str2[j]:\n                dist[i+1][j+1] = dist[i][j]+1\n            else:\n                dist[i+1][j+1] = max(dist[i][j+1], dist[i+1][j])\n    \n    return dist[M][N]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Write your code here\n    n = len(test_tup)\n    # find the length of the array\n    m = len(test_tup[0])\n    # store the index of the first index\n    a = 0\n    # store the index of the last index\n    l = n-1\n    # find the first index\n    for i in range(0,m):\n        # if the index is greater than the last index\n        if(l>=n-1):\n            # set the index as the second index\n            a = i\n            break\n        # check if the first index is less than the second index\n        elif(test_tup[l][i]!= test_tup[l+1][i]):\n            # if there is no more index, the first index is the last index\n            # if the second index is smaller than the last index, the first index is the index\n            # in the array\n            if(i>0):\n                # if the second index is the last index, then the first index is the index\n                if(test_tup[l+1][i-1]!=test_tup[l][i]):\n                    # if there is no more index, the first index is the index\n                    # the second index is the last index\n                    a = i\n                    break\n            # if the second index is less than the last index, the first index is the index\n            else:\n                a = i\n                break\n        # if the second index is the last index, the first index is the index\n        elif(test_tup[l+1][i]==test_tup[l][i]):\n            # if there is no more index, the first index is the index\n            # the second index is the last index\n            if(i>0):\n                # if the first index is less than the last index, the first index is the index\n                if(test_tup[l+1][i-1]!=test_tup[l][i]):\n                    a = i\n                    break\n            # if the first index is less than the last index, the first index is the index\n            else:\n                a = i\n                break\n        # if the second index is the last index, the first index is the index\n        elif(test_tup[l][i]==test_tup[l+1][i]):\n            # if there is no more index, the first index is the index\n            # the second index is the last index\n            if(i>0):\n                # if the first index is less than the last index, the first index is the index\n                if(test_tup[l+1][i-1]!=test_tup[l][i]):\n                    a = i\n                    break\n            # if the first index is less than the last index, the first index is the index\n            else:\n                a = i\n                break\n    # if there is no index, the first index is the index\n    if(a==0):\n        a = n\n    # set the index to the first index\n    a = test_tup[a][0]\n    # return the index\n    return(a)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # return the product of the array multiplication with remainder\n    return arr[n-1]*arr[n]%(10**9+7)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Write your code here.\n    # initializing the array with 1\n    a = [1] * n \n    # initializing the result\n    r = [1] * n\n    # looping through the array\n    for i in range(1, n):\n        # if the element is 1, then we can multiply the result by the 1 \n        if a[i] == 1:\n            # multiplying by the 1 \n            r[i] = r[i-1] * a[i-1]\n    # return the result\n    return r "
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # convert the n to a multiple of 2 \n    remainder = n % 2\n    product = 1\n    for x in range(len(arr)):\n        product = product * arr[x]\n        if(product >= remainder):\n            return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = result * arr[i]\n    return result % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    return product\ndef get_factors(n):\n    '''\n    Find the factors of an integer n.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_odds(n):\n    '''\n    Find the odds of an integer n.\n    '''\n    odds = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            odds.append(i)\n    return odds\ndef get_lcm(a,b):\n    '''\n    Find the lcm of two integers.\n    '''\n    if a < b:\n        a, b = b, a\n    while a % b!= 0:\n        a = a % b\n        if a == 0:\n            a = b\n    return a\ndef get_lcm_factor(a,b):\n    '''\n    Find the factor of a and b that has the lcm of a and b.\n    '''\n    if a == b:\n        return 1\n    if a < b:\n        return get_lcm(a, b)\n    else:\n        return get_lcm(b, a)\ndef get_product(a,b):\n    '''\n    Find the product of a and b.\n    '''\n    return a * b\ndef get_all_factors(n):\n    '''\n    Find all the factors of a.\n    '''\n    factors = get_factors(n)\n    factors = list(map(lambda x: x**2, factors))\n    return factors\ndef get_even_numbers(start, end):\n    '''\n    Find all even numbers between start and end.\n    '''\n    num_list = list(range(start, end+1))\n    return num_list\ndef get_odd_numbers(start, end):\n    '''\n    Find all odd numbers between start and end.\n    '''\n    num_list = list(range(start, end+1))\n    return num_list\ndef get_two_factors(n):\n    '''\n    Find the two factors of a.\n    '''\n    if n <= 2:\n        return 1, 2\n    else:\n        return 2, n-1\ndef get_all_odds(n):\n    '''\n    Find all odds of a.\n    '''\n    odds = get_odds(n)\n    return odds\ndef get_all_evens(n):\n    '''\n    Find all evens of a.\n    '''\n    evens = get_even_numbers(0, n)\n    return evens\ndef get_all_lcm(n):\n    '''\n    Find the lcm of two integers.\n    '''\n    return get_lcm(2, n)\ndef get_all_prod(n):\n    '''\n    Find the product of all numbers in a.\n    '''\n    return get_product(2, n)\ndef check_p_q(q, p):\n    '''\n    Check whether it is pq.\n    '''\n    if q == p:\n        return True\n    elif q * p == n:\n        return True\n    else:\n        return False\ndef get_p_q(a, b):\n    '''\n    Find the product of a and b.\n    '''\n    product = get_product(a, b)\n    if check_p_q(product, n):\n        return product\n    else:\n        return 0\ndef get_all_p_q(n):\n    '''\n    Find all p and q.\n    '''\n    all_p_q = []\n    for i in range(n):\n        all_p_q.append(get_p_q(i, n))\n    return all_p_q\ndef get_p_q_product(n):\n    '''\n    Find the product of all p and q.\n    '''\n    all_p_q = get_all_p_q(n)\n    product = 1\n    for i in range(len(all_p_q)):\n        product = product * all_p_q[i]\n    return product\ndef get_p_q_factor(n):\n    '''\n    Find the factor of p and q.\n    '''\n    return get_p_q_product(n) / n\ndef get_all_prods(n):\n    '''\n    Find all prods of a.\n    '''\n    all_prods = get_all_prod(n)\n    return all_prods\ndef get_all_factors_of_a(n):\n    '''\n    Find all factors of a.\n    '''\n    all_factors = get_all_factors(n)\n    return all_factors\ndef get_all_prods_of_a(n):\n    '''\n    Find all prods of a.\n    '''\n    all_prods = get_all_prods(n)\n    return all_prods\ndef get_p_q_product_of_a(n):\n    '''\n    Find the product of a and p.\n    '''\n    all_prods = get_all_prods_of_a(n)\n    product = 1\n    for i in range(len(all_prods)):\n        product = product * all_prods[i]\n    return product\ndef get_p_q_factor_of_a(n):\n    '''\n    Find the factor of p and q.\n    '''\n    return get_p_q_product_of_a(n) / n\ndef get_all_factors_of_b(n):\n    '''\n    Find all factors of b.\n    '''\n    all_factors = get_all_factors(n)\n    return all_factors\ndef get_all_prods_of_b(n):\n    '''\n    Find all prods of b.\n    '''\n    all_prods = get_all_prods_of_a(n)\n    product = 1\n    for i in range(len(all_prods)):\n        product = product * all_prods[i]\n    return product\ndef get_all_factors_of_b(n):\n    '''\n    Find all factors of b.\n    '''\n    all_factors = get_all_factors_of_a(n)\n    product = 1\n    for i in range(len(all_factors)):\n        product = product * all_factors[i]\n    return product\ndef get_p_q_product_of_b(n):\n    '''\n    Find the product of p and q.\n    '''\n    all_prods = get_all_prods_of_b(n)\n    product = 1\n    for i in range(len(all_prods)):\n        product = product * all_prods[i]\n    return product\ndef get_p_q_factor_of_b(n):\n    '''\n    Find the factor of p and q.\n    '''\n    return get_p_q_product_of_b(n) / n\ndef get_all_factors_of_c(n):\n    '''\n    Find all factors of c.\n    '''\n    all_factors = get_all_factors(n)\n    product = 1\n    for i in range(len(all_factors)):\n        product = product * all_factors[i]\n    return product\ndef get_all_prods_of_c(n):\n    '''\n    Find all prods of c.\n    '''\n    all_prods = get_all_prods(n)\n    product = 1\n    for i in range(len(all_prods)):\n        product = product * all_prods[i]\n    return product\ndef get_all_factors_of_c(n):\n    '''\n    Find all factors of c.\n    '''\n    all_factors = get_all_factors_of_a(n)\n    product = 1\n    for i in range(len(all_fac"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(1, len(arr)):\n        result = result * arr[i] % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = result * arr[i]\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # to calculate product of the array multiplication modulo n \n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n    \n    # to calculate remainder of the multiplication\n    remainder = prod % n\n    if remainder == 0:\n        return 1\n    else:\n        return 0\n    \n    \ndef reverse(arr):\n    '''\n    Write a python function to reverse an array of integers.\n    '''\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    return arr\n    \ndef odd(arr):\n    '''\n    Write a python function to return a list of even integers.\n    '''\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    return arr\n    \ndef even(arr):\n    '''\n    Write a python function to return a list of odd integers.\n    '''\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    return arr\n    \ndef count_fib(n):\n    '''\n    Write a python function to return the number of fibonacci numbers less than or equal to n.\n    '''\n    count = 0\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n        count += 1\n    return count\n    \ndef count_fib_recursive(n):\n    '''\n    Write a python function to return the number of fibonacci numbers less than or equal to n.\n    '''\n    count = 0\n    def fib(n):\n        if n < 2:\n            return n\n        else:\n            return fib(n-1) + fib(n-2)\n        \n    return fib(n)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    max = len(arr)\n    mod = max\n    for i in range(max):\n        for j in range(i, max):\n            product = arr[i] * arr[j]\n            if product == n:\n                return product\n            if product > n:\n                break\n    return \"No remainder\"\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # def find_remainder(arr, n):\n    #     '''\n    #     Write a python function to find the product of the array multiplication modulo n.\n    #     '''\n    #     # return arr*n\n    #     # return arr[::-1]*n\n    #     return arr[::-1]*n\n    return arr[::-1]*n\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    num_lst = []\n    \n    for i in l:\n        if (i % 2 == 0):\n            num_lst.append(i)\n            \n    return num_lst\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l)): \n        if l[i] > l[i + 1] : return False \n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l: \n        if i % 10 == 0:\n            count += 1\n    if count == len(l): \n        return True\n    return False\ndef get_consecutive_nums(l): \n    '''\n    Write a python function to get the consecutive numbers \n    '''\n    count = 0\n    for i in l: \n        if i % 10 == 0:\n            count += 1\n    return count\nif __name__ == '__main__':\n    print('EX1:')\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if check_Consecutive(l):\n        print(f'True => {check_Consecutive(l)}')\n    else:\n        print(f'False => {check_Consecutive(l)}')\n    print('EX2:')\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_consecutive_nums(l))\n    print('EX3:')\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_consecutive_nums(l)"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    def consecutive(l):\n        count = 0\n        for i in l:\n            if i == 0:\n                count += 1\n            elif i!= 0:\n                if count % 2 == 0:\n                    if i == 2:\n                        return True\n                else:\n                    return False\n                count += 1\n    return consecutive(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for item in l:\n        if item == l[0]:\n            count += 1\n        elif item == l[-1]:\n            count += 1\n    if count > 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # if len(l) > 1:\n    #     return False\n    # if l[0]!= l[1]: \n    #     return False\n    # return True\n    return any([l[i] == l[i + 1] for i in range(len(l) - 1)])\n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l:\n        if i%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # write your code here\n    if len(l)>0 and l[0] in l[1:]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    cnt = 0\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] and l[i]!= l[i+1]: \n            cnt = cnt+1\n    if cnt == len(l) - 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i + 1] or l[i] - 1 == l[i + 1]:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersected_list = []\n    for i in range(0, len(test_list1)):\n        for j in range(0, len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersected_list.append(test_list1[i])\n    return intersected_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    test_list_copy1 = test_list1[:]\n    test_list_copy2 = test_list2[:]\n    \n    if test_list_copy1 == [] or test_list_copy2 == []:\n        return ()\n    \n    intersection_list = []\n    if test_list_copy1[0] < test_list_copy2[0]:\n        smaller_list = test_list_copy1\n        larger_list = test_list_copy2\n    else:\n        smaller_list = test_list_copy2\n        larger_list = test_list_copy1\n        \n    for index in range(len(smaller_list)):\n        if smaller_list[index] < larger_list[index]:\n            intersection_list.append(larger_list[index])\n        elif smaller_list[index] > larger_list[index]:\n            intersection_list.append(smaller_list[index])\n        else:\n            intersection_list.append(None)\n    \n    return tuple(intersection_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    if len(test_list1) > len(test_list2):\n        result = tuple(test_list1)\n    elif len(test_list1) < len(test_list2):\n        result = tuple(test_list2)\n    else:\n        result = set(test_list1) & set(test_list2)\n        return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) & tuple(list2)\n    \n    \n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) - tuple(list2)\n    \n    \ndef tuple_symmetric_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple symmetric difference of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) ^ tuple(list2)\n    \n    \n    \ndef tuple_difference_with_iter(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) - tuple(list2)\n    \n    \ndef tuples_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuples intersection of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) & tuple(list2)\n    \n    \ndef tuples_union(test_list1, test_list2):\n    '''\n    Write a function to find the tuples union of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) | tuple(list2)\n    \n    \ndef tuples_difference_with_iter(test_list1, test_list2):\n    '''\n    Write a function to find the tuples difference of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) - tuple(list2)\n    \n    \ndef tuples_symmetric_difference_with_iter(test_list1, test_list2):\n    '''\n    Write a function to find the tuples symmetric difference of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) ^ tuple(list2)\n    \n    \ndef tuples_union_with_iter(test_list1, test_list2):\n    '''\n    Write a function to find the tuples union of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) | tuple(list2)\n    \n    \ndef tuples_difference_with_iter2(test_list1, test_list2):\n    '''\n    Write a function to find the tuples difference of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) - tuple(list2)\n    \n    \ndef tuples_symmetric_difference_with_iter2(test_list1, test_list2):\n    '''\n    Write a function to find the tuples symmetric difference of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) ^ tuple(list2)\n    \n    \ndef tuples_difference_with_iter3(test_list1, test_list2):\n    '''\n    Write a function to find the tuples difference of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) - tuple(list2)\n    \n    \ndef tuples_symmetric_difference_with_iter3(test_list1, test_list2):\n    '''\n    Write a function to find the tuples symmetric difference of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) ^ tuple(list2)\n    \n    \ndef tuples_difference_with_iter4(test_list1, test_list2):\n    '''\n    Write a function to find the tuples difference of elements in the given list.\n    '''\n    list1 = []\n    list2 = []\n    \n    for i in range(len(test_list1)):\n        list1.append(test_list1[i])\n    \n    for i in range(len(test_list2)):\n        list2.append(test_list2[i])\n    \n    return tuple(list1) - tuple(list2)\n    \n    \ndef tuples_symmetric_difference_with_iter4(test_list1, test_list2):\n    '''\n    Write a function to fin"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    #create a list to store intersection\n    test_list = []\n    \n    #append the tuples in the list\n    for item in test_list1:\n        test_list.append(item)\n        \n    for item in test_list2:\n        test_list.append(item)\n        \n    #print the intersection\n    print(test_list)\n    \n    #if the list is empty return empty\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return []\n    \n    #if the lists are of the same size return the intersection\n    elif len(test_list1) == len(test_list2):\n        #initialize intersection\n        intersection = []\n        \n        #for every item in the list\n        for item in test_list1:\n            #if the item is in the list\n            if item in test_list2:\n                #append it to the intersection\n                intersection.append(item)\n                #break\n        \n        #return the intersection\n        return intersection\n    \n    #if the lists are of different sizes return the intersection\n    else:\n        return None\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = ()\n    for element in test_list1:\n        if element in test_list2:\n            intersect += (element,)\n    return intersect\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #extract all elements from the given list\n    test_list = []\n    for i in range(len(test_list1)):\n        test_list.append(test_list1[i])\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.lower()\n    ch = ch.lower()\n    newstr = \"\"\n    for i in str1:\n        if i in ch:\n            newstr += i\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        if i==ch:\n            str2=str2+newch\n        else:\n            str2=str2+i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in str1:\n        if i == ch:\n            newstr += newch\n        else:\n            newstr += i\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    def find_occurrence(str1,ch,newch):\n        '''\n        write a function that takes a string and character as input and returns the number of occurrences of character.\n        '''\n        occurrences=0\n        for i in range(0,len(str1)):\n            if str1[i]==ch:\n                occurrences=occurrences+1\n        if occurrences>0:\n            return f'Character {newch} appears {occurrences} times in string {str1}'\n        else:\n            return f'Character {newch} does not appear in string {str1}'\n    def replace_all(str1,ch,newch):\n        '''\n        Write a function to replace characters in a string.\n        '''\n        count=0\n        for i in range(0,len(str1)):\n            if str1[i]==ch:\n                str1=str1.replace(str1[i],newch)\n                count=count+1\n                if count>1:\n                    return 'Error replacing '+str1+' characters. The original string contained only one character.'\n                elif count==1:\n                    return f'Successfully replaced {ch} in string {str1}'\n                else:\n                    return 'Successfully replaced '+str1+' characters'\n    def replace_all2(str1,ch,newch):\n        '''\n        Write a function to replace characters in a string.\n        '''\n        str2=''\n        count=0\n        for i in range(0,len(str1)):\n            if str1[i]==ch:\n                str1=str1.replace(str1[i],newch)\n                count=count+1\n                if count>1:\n                    return 'Error replacing '+str1+' characters. The original string contained more than one character.'\n                elif count==1:\n                    return f'Successfully replaced {ch} in string {str1}'\n                else:\n                    return 'Successfully replaced '+str1+' characters'\n            elif str1[i]!=ch:\n                str2=str2+str1[i]\n        return 'Successfully replaced all occurrences of character '+str1+' with '+newch+' in string '+str2\n    return replace_all(str1,ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if newch =='':\n        return str1\n    elif ch =='':\n        return str1.replace(ch,'*')\n    else:\n        str1 = str1.replace(ch,newch)\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(0,len(str1)):\n        str1=str1.replace(str1[i],newch)\n    return str1\nprint(replace_char(\"Python\",\"k\",'z'))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if(str1[i]==ch):\n            str1=str1[:i]+newch+str1[i+1:]\n            #print(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,'.')\n    str1=str1.replace(ch,' ')\n    str1=str1.replace(ch,'.')\n    str1=str1.replace(ch,' ')\n    str1=str1.replace('.','.')\n    str1=str1.replace(' ','.')\n    str1=str1.replace('.','.')\n    str1=str1.replace(' ','.')\n    return(str1)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a dictionary that has keys and values sorted in order\n    # of their values\n    dict2 = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    # return dict2\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = sorted(dict1.values(), reverse = True)\n    d = dict()\n    for k, v in dict1.items():\n        if v not in d:\n            d[v] = [k]\n        else:\n            d[v].append(k)\n    return d\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a new list of the values and sort it in reverse order\n    new_dict = sorted(dict1.values(), reverse=True)\n    # Create a new dictionary with the sorted values\n    return dict(zip(new_dict, dict1.keys()))\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def key(x):\n        return x['id']\n    dict_sorted = sorted(dict1.items(), key=key)\n    return dict_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\ndef count_sums(dict1):\n    '''\n    Write a function to count the number of keys in a dictionary.\n    '''\n    total = 0\n    for key, value in dict1.items():\n        total += value\n    return total\ndef a_dictionary_sorted(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sort_counter(dict1)\ndef get_most_common_words(dict1):\n    '''\n    Write a function that returns a dictionary with the most common words in a dictionary.\n    '''\n    max_freq = count_sums(dict1)\n    dict1 = dict1.items()\n    most_common = {}\n    for key, value in dict1:\n        if max_freq < value:\n            max_freq = value\n            most_common = {key:value}\n        elif max_freq == value:\n            most_common[key] = value\n    return most_common\ndef most_common_word_list(dict1, word):\n    '''\n    Write a function that returns a list of the most common words in a dictionary.\n    '''\n    return get_most_common_words(dict1).get(word, '')\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key, value in dict1.items():\n        #  sorting by value\n        dict1[key] = sorted(dict1[key])\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict(Counter(dict1.values()))\n    return dict2.values()\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use a counter to sort the dictionary\n    c = Counter(dict1)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    my_dict = sorted(dict1.items())\n    return my_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    return [max(nums),min(nums),sum(nums)]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums))\n    # sorted(nums)\n    # sum(nums)\n    # sum(nums).sort()\n    # print(sum(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return (max(nums) + min(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_big = nums[0]\n    num_small = nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    l=0\n    r=len(nums)\n    for i in range(r):\n        l+=nums[i]\n    for i in range(r):\n        r-=nums[i]\n    return (l+r)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    if len(nums) == 1:\n        return nums[0]\n    \n    if nums[0] > nums[1]:\n        return nums[1] + big_sum(nums[1:])\n    else:\n        return nums[0] + big_sum(nums[1:])\n        \ndef compute_max_sum(nums):\n    '''\n    Write a function to find the maximum sum of a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    if nums[0] > nums[1]:\n        return max(nums[0], nums[1]) + compute_max_sum(nums[1:])\n    else:\n        return max(nums[0], nums[1]) + compute_max_sum(nums[1:]) + nums[0]\n        \ndef test_big_sum():\n    nums = [-1,2,3,4,5,6,7,8,9,10]\n    assert big_sum(nums) == 22\n    assert big_sum([]) == 0\n    assert big_sum([1]) == 1\n    assert big_sum([1,2]) == 2\n    assert big_sum([1,2,3]) == 3\n    assert big_sum([1,2,3,4]) == 4\n    assert big_sum([1,2,3,4,5,6,7,8,9,10]) == 22\n    assert big_sum([2,2,2,2,2,2,2,2,2,2,2]) == 4\n    assert big_sum([2,2,2,2,2,2,2,2,2,2,2,3,4,5,6,7,8,9,10]) == 22\n    assert big_sum([2,3,4,5,6,7,8,9,10]) == 22\n    assert big_sum([-1]) == -1\n    assert big_sum([1,3,2,1,2]) == 2\n    assert big_sum([-1,2,3,4,5,6,7,8,9,10]) == 22\n    assert big_sum([2,3,4,5,6,7,8,9,10,11,12]) == 12\n    assert compute_max_sum([-1,2,3,4,5,6,7,8,9,10]) == 22\n    assert compute_max_sum([2,3,4,5,6,7,8,9,10,11,12]) == 12\n    assert compute_max_sum([-1,2,3,4,5,6,7,8,9,10]) == 22\n    assert compute_max_sum([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 24\n    assert compute_max_sum([-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 24\n    assert compute_max_sum([1,3,2,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 22\n    assert compute_max_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 22\n    assert compute_max_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]) == 37\n    assert compute_max_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_ = nums[0]\n    min_ = nums[0]\n    for num in nums:\n        if num > max_:\n            max_ = num\n        if num < min_:\n            min_ = num\n    return max_ - min_\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    if n < 1:\n        return -1\n    else:\n        if nums[n-1] > nums[n-2]:\n            return nums[n-1] + big_sum(nums[0:n-1])\n        else:\n            return nums[n-1] + big_sum(nums[0:n-2])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_v = 0\n    min_v = nums[0]\n    for val in nums:\n        if val > max_v:\n            max_v = val\n        elif val < min_v:\n            min_v = val\n    return max_v + min_v\nnums = [4,2,6,1,3,5]\nnums2 = [2,4,6,7,8,9,3,5]\nprint(big_sum(nums))\nprint(big_sum(nums2))"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = \"\"\n    for char in string:\n        lower_string += char.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    try:\n        string.lower()\n    except AttributeError:\n        print(\"You must enter a string\")\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = ''\n    for letter in string:\n        if letter.islower():\n            lower_string += letter.lower()\n        else:\n            lower_string += letter\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code here\n    if not str1:\n        return ''\n    str1 = str1.lower()\n    return str1[1:-1]\n    \n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return re.sub(\"[^a-z]\", \"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    i = 0\n    while i < len(str1):\n        while i < len(str1) and str1[i].islower():\n            i += 1\n        str2 += str1[i]\n        i += 1\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1.replace('a',' ').replace('b',' ').replace('c',' ').replace('d',' ').replace('e',' ').replace('f',' ').replace('g',' ').replace('h',' ').replace('i',' ').replace('j',' ').replace('k',' ').replace('l',' ').replace('m',' ').replace('n',' ').replace('o',' ').replace('p',' ').replace('q',' ').replace('r',' ').replace('s',' ').replace('t',' ').replace('u',' ').replace('v',' ').replace('w',' ').replace('x',' ').replace('y',' ').replace('z',' ')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_upper_lowercase(str1):\n    '''\n    Write a function to remove upper and lower case characters from a given string.\n    '''\n    str1 = str1.upper()\n    return str1.lower()\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef replace_numbers(str1):\n    '''\n    Write a function to replace all numbers with a specific value.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef replace_all_caps(str1):\n    '''\n    Write a function to replace all capital letters with a specific value.\n    '''\n    return str1.upper()\ndef replace_all_lowercase(str1):\n    '''\n    Write a function to replace all lowercase letters with a specific value.\n    '''\n    return str1.lower()\ndef replace_all_punctuation(str1):\n    '''\n    Write a function to replace all punctuation with a specific value.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef replace_all_upper_lowercase(str1):\n    '''\n    Write a function to replace all capital letters with a specific value.\n    '''\n    return str1.upper()\ndef replace_all_digits(str1):\n    '''\n    Write a function to replace all digits with a specific value.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef replace_all_special_characters(str1):\n    '''\n    Write a function to replace all special characters with a specific value.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef replace_all_numbers(str1):\n    '''\n    Write a function to replace all numbers with a specific value.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef replace_all_caps_lowercase(str1):\n    '''\n    Write a function to replace all capital letters with a specific value.\n    '''\n    return str1.lower()\ndef replace_all_upper_lowercase_lowercase(str1):\n    '''\n    Write a function to replace all capital letters and lowercase letters with a specific value.\n    '''\n    return str1.lower() + str1.upper()\ndef replace_all_digits_lowercase(str1):\n    '''\n    Write a function to replace all digits with a specific value.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef replace_all_special_characters_lowercase(str1):\n    '''\n    Write a function to replace all special characters with a specific value.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef replace_all_numbers_lowercase(str1):\n    '''\n    Write a function to replace all numbers with a specific value.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef replace_all_caps_digits(str1):\n    '''\n    Write a function to replace all capital letters and digits with a specific value.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef replace_all_special_characters_digits(str1):\n    '''\n    Write a function to replace all special characters with a specific value.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return str1.replace(' ','')\ndef remove_symbols(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return re.sub(r'\\S+', '', str1)\ndef remove_special_characters_lowercase(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_words(str1):\n    '''\n    Write a function to remove words from a given string.\n    '''\n    return str1.split(' ')\ndef remove_duplicate_words(str1):\n    '''\n    Write a function to remove words from a given string.\n    '''\n    return str1.split(' ')\ndef remove_non_alphabetic(str1):\n    '''\n    Write a function to remove non-alphabetic characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_all_non_alphabetic(str1):\n    '''\n    Write a function to remove all non-alphabetic characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_stop_words(str1):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    return str1.split(' ')\ndef remove_all_stop_words(str1):\n    '''\n    Write a function to remove all stop words from a given string.\n    '''\n    return str1.split(' ')\ndef remove_punctuation_characters(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_symbols_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return re.sub(r'\\S+', '', str1)\ndef remove_all_punctuation_characters(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_all_special_characters_numbers(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_all_special_characters_lowercase(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_all_stop_words_numbers(str1):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    return str1.split(' ')\ndef remove_al"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # TODO: Remove the lowercase substrings from the string.\n    # HINT: Python regex\n    # Note:\n    #  For example, the below string\n    # string = \"My Name is Francesco\"\n    # This is a good replacement:\n    # string = \"My Name is francesco\"\n    # string = \"My Name is Francesco, Francesco is francesco\"\n    # string = \"My name is francesco\"\n    # This is a better replacement:\n    # string = \"francesco\"\n    # string = \"My name is Francesco, Francesco is francesco\"\n    # string = \"My Name is francesco, Francesco is francesco, francesco\"\n    # string = \"My name is Francesco Francesco Francesco Francesco Francesco\"\n    # Note:\n    #   1. Use regular expressions to replace the substrings of the string\n    #       with 'REDACTED' in the return value.\n    #   2. HINT: Python regular expression\n    #   3. Your regular expression (as a string) does NOT have any quotes around the matching text.\n    #       Hint: Use regex to find text in a given string.\n    \n    return string.replace(\"francesco\", \"REDACTED\").replace(\"Francesco\", \"REDACTED\")\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # TODO: Remove the uppercase substrings from the string.\n    # HINT: Python regex\n    # Note:\n    #  For example, the below string\n    # string = \"My Name is Francesco\"\n    # This is a good replacement:\n    # string = \"My Name is francesco\"\n    # string = \"My Name is Francesco, Francesco is francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco\"\n    # string = \"My Name is francesco Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # This is a better replacement:\n    # string = \"francesco\"\n    # string = \"My Name is Francesco, Francesco is francesco\"\n    # string = \"My Name is francesco, Francesco is francesco, francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # Note:\n    #   1. Use regular expressions to replace the uppercase substrings\n    #       with 'REDACTED' in the return value.\n    #   2. HINT: Python regular expression\n    #   3. Your regular expression (as a string) does NOT have any quotes around the matching text.\n    \n    return string.replace(\"francesco\", \"REDACTED\").replace(\"Francesco\", \"REDACTED\")\n    \ndef remove_digit(str1):\n    '''\n    Write a function to remove digit substrings from a given string.\n    '''\n    # TODO: Remove the digit substrings from the string.\n    # HINT: Python regex\n    # Note:\n    #  For example, the below string\n    # string = \"My Name is Francesco\"\n    # This is a good replacement:\n    # string = \"My Name is francesco\"\n    # string = \"My Name is Francesco, Francesco is francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco\"\n    # Note:\n    #   1. Use regular expressions to replace the digit substrings\n    #       with 'REDACTED' in the return value.\n    #   2. HINT: Python regular expression\n    #   3. Your regular expression (as a string) does NOT have any quotes around the matching text.\n    \n    return string.replace(\"Francesco\", \"REDACTED\").replace(\"Francesco\", \"REDACTED\")\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    # TODO: Remove the special characters in the string.\n    # HINT: Python regex\n    # Note:\n    #   For example, the below string\n    # string = \"My Name is Francesco\"\n    # This is a good replacement:\n    # string = \"My Name is Francesco, Francesco is francesco\"\n    # string = \"My Name is Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesco Francesc"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            newstr += str1[i]\n        elif str1[i].islower():\n            newstr += str1[i]\n        elif str1[i].isnumeric():\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r\"\\b([a-zA-Z]{2,})\\b\"\n    return re.sub(pattern, r\"\\1\", str1, flags=re.IGNORECASE)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(.)([a-z][a-z])', r'\\1', str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    start = 0\n    end = 0\n    count = 0\n    while(end < len(str1)):\n        if str1[end] =='':\n            start += 1\n            end += 1\n        elif str1[end] == '.':\n            end += 1\n            start += 1\n        else:\n            count += 1\n            end += 1\n    str1 = str1[start:end]\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].islower():\n            str2 += str1[i]\n        else:\n            str2 += str1[i].upper()\n    return str2\ndef remove_diacritics(str1):\n    '''\n    Write a function that removes all the diacritics from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in 'a\u0103\u0102\u0103\u0110':\n            str2 += str1[i].upper()\n        elif str1[i] in '\u0103\u0102\u0110':\n            str2 += str1[i].upper()\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_special_characters(str1):\n    '''\n    Write a function that replaces the special characters in a given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in '!@#$%&*()_+[{]':\n            str2 += str1[i].upper()\n        elif str1[i] in '*@#$%&*()_+[{]':\n            str2 += str1[i].upper()\n        elif str1[i] in '_[]{}&+:':\n            str2 += str1[i].upper()\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_numbers(str1):\n    '''\n    Write a function that removes all the digits from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_symbols(str1):\n    '''\n    Write a function that removes all the special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in '!@#$%&*()_+[{]':\n            str2 += str1[i]\n        elif str1[i] in '*@#$%&*()_+[{]':\n            str2 += str1[i]\n        elif str1[i] in '_[]{}&+:':\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function that removes all the punctuation from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in '?.,;!':\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_numbers2(str1):\n    '''\n    Write a function that removes all the digits from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_sentence_separators(str1):\n    '''\n    Write a function that removes all the separators from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in '.,;!':\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_duplicate_words(str1):\n    '''\n    Write a function that removes all the duplicate words from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i].isalnum():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_stop_words(str1):\n    '''\n    Write a function that removes all the stop words from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_tokens(str1):\n    '''\n    Write a function that removes all the tokens from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_single_characters(str1):\n    '''\n    Write a function that removes all the special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in '!@#$%&*()_+[{]':\n            str2 += str1[i].upper()\n        elif str1[i] in '*@#$%&*()_+[{]':\n            str2 += str1[i].upper()\n        elif str1[i] in '_[]{}&+:':\n            str2 += str1[i].upper()\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_numbers_and_special_characters(str1):\n    '''\n    Write a function that removes all the numbers and special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_punctuation_and_special_characters(str1):\n    '''\n    Write a function that removes all the punctuation and special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isalnum():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_punctuation_and_special_characters_2(str1):\n    '''\n    Write a function that removes all the punctuation and special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isalnum():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_numbers_and_special_characters_3(str1):\n    '''\n    Write a function that removes all the numbers and special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_numbers_and_special_characters_4(str1):\n    '''\n    Write a function that removes all the numbers and special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_numbers_and_special_characters_5(str1):\n    '''\n    Write a function that removes all the numbers and special characters from the given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            st"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 : return n\n    if n % 10 == 0 : return n // 10\n    else : return n % 10\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 : return n\n    if n % 10 == 0 : return n // 10\n    else : return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 : return '0'\n    \n    if n < 10 : return str(n)\n    return str(n % 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the middle number of a given number.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the remainder of a given number.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the highest number in a given sequence.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the lowest number in a given sequence.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to calculate the sum of the squares of the numbers in a given sequence.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to calculate the sum of the cubes of the numbers in a given sequence.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to calculate the cube of a given number.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to calculate the sum of the cubes of the numbers in a given sequence.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the length of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the perimeter of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the length of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the perimeter of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the circumference of a given shape.\n    '''\n    # Your code goes here\n    return n % 10\n    \ndef main() :\n    '''\n    Write a python function to find the area of a given shape.\n    '''\n    # Your code goes here\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    print(n)\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # code here\n    return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    n = n//10\n    \n    return first_digit\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    if n < 10 :\n        return n\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if len(list) % 2 == 1: \n        return list\n    else: \n        return list[:len(list) // 2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if len(list) == 0:\n        return []\n    elif len(list) == 1:\n        return list\n    else:\n        evens = []\n        for i in list:\n            if i % 2 == 0:\n                evens.append(i)\n        return evens\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    even = []\n    for i in list:\n        if i%2 == 1:\n            odd.append(i)\n        else:\n            even.append(i)\n    return odd, even\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for item in list:\n        if item % 2 == 0:\n            odd.append(item)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    numbers = [i for i in list if i%2!= 0]\n    return numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2 == 0:\n            odd_list.append(i)\n    return odd_list\n        \n    \ndef Even(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n        \n    \ndef Filter(list, func): \n    '''\n    Write a python function which takes a list of integers and a function and returns only the elements where the function returns True.\n    '''\n    def Check(list): \n        even = Even(list)\n        odd = Odd(list)\n        if not even and not odd: \n            return list\n        elif not even:\n            return odd\n        else:\n            return even\n    list = Check(list)\n    return list\n        \n    \nlist = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,84"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2!= 0: \n            odd.append(i) \n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = [] \n    for i in list: \n        if i % 2!= 0: \n            new_list.append(i) \n    return new_list \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def c(n) :\n        total = 0\n        for i in range(1,n+1) :\n            total += i ** 3\n        return total\n    return c(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 4\n    elif n == 3 :\n        return 9\n    elif n > 3 :\n        return n * (n + 1) * (n + 2) * (n + 3)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    from math import sqrt\n    if n <= 1:\n        return n\n    if n == 2:\n        return n\n    if n == 3:\n        return n - 3\n    if n == 4:\n        return n - 4\n    if n == 5:\n        return n - 5\n    if n == 6:\n        return n - 6\n    if n == 7:\n        return n - 7\n    if n == 8:\n        return n - 8\n    if n == 9:\n        return n - 9\n    if n == 10:\n        return n - 10\n    if n == 11:\n        return n - 11\n    if n == 12:\n        return n - 12\n    if n == 13:\n        return n - 13\n    if n == 14:\n        return n - 14\n    if n == 15:\n        return n - 15\n    if n == 16:\n        return n - 16\n    if n == 17:\n        return n - 17\n    if n == 18:\n        return n - 18\n    if n == 19:\n        return n - 19\n    if n == 20:\n        return n - 20\n    if n == 21:\n        return n - 21\n    if n == 22:\n        return n - 22\n    if n == 23:\n        return n - 23\n    if n == 24:\n        return n - 24\n    if n == 25:\n        return n - 25\n    if n == 26:\n        return n - 26\n    if n == 27:\n        return n - 27\n    if n == 28:\n        return n - 28\n    if n == 29:\n        return n - 29\n    if n == 30:\n        return n - 30\n    if n == 31:\n        return n - 31\n    if n == 32:\n        return n - 32\n    if n == 33:\n        return n - 33\n    if n == 34:\n        return n - 34\n    if n == 35:\n        return n - 35\n    if n == 36:\n        return n - 36\n    if n == 37:\n        return n - 37\n    if n == 38:\n        return n - 38\n    if n == 39:\n        return n - 39\n    if n == 40:\n        return n - 40\n    if n == 41:\n        return n - 41\n    if n == 42:\n        return n - 42\n    if n == 43:\n        return n - 43\n    if n == 44:\n        return n - 44\n    if n == 45:\n        return n - 45\n    if n == 46:\n        return n - 46\n    if n == 47:\n        return n - 47\n    if n == 48:\n        return n - 48\n    if n == 49:\n        return n - 49\n    if n == 50:\n        return n - 50\n    if n == 51:\n        return n - 51\n    if n == 52:\n        return n - 52\n    if n == 53:\n        return n - 53\n    if n == 54:\n        return n - 54\n    if n == 55:\n        return n - 55\n    if n == 56:\n        return n - 56\n    if n == 57:\n        return n - 57\n    if n == 58:\n        return n - 58\n    if n == 59:\n        return n - 59\n    if n == 60:\n        return n - 60\n    if n == 61:\n        return n - 61\n    if n == 62:\n        return n - 62\n    if n == 63:\n        return n - 63\n    if n == 64:\n        return n - 64\n    if n == 65:\n        return n - 65\n    if n == 66:\n        return n - 66\n    if n == 67:\n        return n - 67\n    if n == 68:\n        return n - 68\n    if n == 69:\n        return n - 69\n    if n == 70:\n        return n - 70\n    if n == 71:\n        return n - 71\n    if n == 72:\n        return n - 72\n    if n == 73:\n        return n - 73\n    if n == 74:\n        return n - 74\n    if n == 75:\n        return n - 75\n    if n == 76:\n        return n - 76\n    if n == 77:\n        return n - 77\n    if n == 78:\n        return n - 78\n    if n == 79:\n        return n - 79\n    if n == 80:\n        return n - 80\n    if n == 81:\n        return n - 81\n    if n == 82:\n        return n - 82\n    if n == 83:\n        return n - 83\n    if n == 84:\n        return n - 84\n    if n == 85:\n        return n - 85\n    if n == 86:\n        return n - 86\n    if n == 87:\n        return n - 87\n    if n == 88:\n        return n - 88\n    if n == 89:\n        return n - 89\n    if n == 90:\n        return n - 90\n    if n == 91:\n        return n - 91\n    if n == 92:\n        return n - 92\n    if n == 93:\n        return n - 93\n    if n == 94:\n        return n - 94\n    if n == 95:\n        return n - 95\n    if n == 96:\n        return n - 96\n    if n == 97:\n        return n - 97\n    if n == 98:\n        return n - 98\n    if n == 99:\n        return n - 99\n    if n == 100:\n        return n - 100\n    if n == 101:\n        return n - 101\n    if n == 102:\n        return n - 102\n    if n == 103:\n        return n - 103\n    if n == 104:\n        return n - 104\n    if n == 105:\n        return n - 105\n    if n == 106:\n        return n - 106\n    if n == 107:\n        return n - 107\n    if n == 108:\n        return n - 108\n    if n == 109:\n        return n - 109\n    if n == 110:\n        return n - 110\n    if n == 111:\n        return n - 111\n    if n == 112:\n        return n - 112\n    if n == 113:\n        return n - 113\n    if n == 114:\n        return n - 114\n    if n == 115:\n        return n - 115\n    if n == 116:\n        return n - 116\n    if n == 117:\n        return n - 117\n    if n == 118:\n        return n - 118\n    if n == 119:\n        return n - 119\n    if n == 120:\n        return n - 120\n    if n == 121:\n        return n - 121\n    if n == 122:\n        return n - 122\n    if n == 123:\n        return n - 123\n    if n == 124:\n        return n - 124\n    if n == 125:\n        return n - 125\n    if n == 126:\n        return n - 126\n    if n == 127:\n        return n - 127\n    if n == 128:\n        return n - 128\n    if n == 129:\n        return n - 129\n    if n == 130:\n        return n - 130\n    if n == 131:\n        return n - 131\n    if n == 132:\n        return n - 132\n    if n == 133:\n        return n - 133\n    if n == 134:\n        return n - 134\n    if n == 135:\n        return n - 135\n    if n == 136:\n        return n - 136\n    if n == 137:\n        return n - 137\n    if n == 138:\n        return n - 138\n    if n == 139:\n        return n - 139\n    if n == 140:\n        return n - 140\n    if n == 141:\n        return n - 141\n    if n == 142:\n        return n - 142\n    if n == 143:\n        return n - 143\n    if n == 144:\n        return n - 144\n    if n == 145:\n        return n - 145\n    if n == 146:\n        return n - 146\n    if n == 147:\n        return n - 147\n    if n == 148:\n        return n - 148\n    if n == 149:\n        return n - 149\n    if n == 150:\n        return n - 150\n    if n == 151:\n        return n - 151\n    if n == 152:\n        return n - 152\n    if n == 153:\n        return n - 153\n    if n == 154:\n        retur"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # I have a function for this challenge\n    # If you have the numpy package, you can just import it in the main()\n    import numpy as np\n    return (np.sum(np.power(n,3)) - np.sum(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    difference = (n*(n*(n+1)))//2\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n * (n - 1) * (n + 1)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    for i in range(n) :\n        if i == n - 1 :\n            return i + 1\n        else :\n            return i + (n - i)**3\n    return \"No difference\"\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Create a function called difference. It takes the first parameter named n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    # Test your function by running the following code.\n    # >>> difference(5)\n    # 1\n    # >>> difference(10)\n    # 15\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n**3 - (n**2 + n)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    L=[]\n    for i in range(N) : \n        if A[i]&1 : L.append(i)\n    return len(L)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # iterate over the list of all pairs\n    for i in range(len(A) - 1) :\n        for j in range(i + 1, len(A)):\n            # find the xor of the two numbers\n            xor = A[i] ^ A[j]\n            # if the xor is even\n            if (xor % 2 == 0) :\n                # if the pair is 1/2 way\n                if (A[i] % 2) == (A[j] % 2) :\n                    # if both pairs are odd, count one way\n                    if (A[i] % 2) == (A[j] % 2) :\n                        # increment the count of odds\n                        odds += 1\n    return odds\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    A = [list(map(int,input().split())) for i in range(N)]\n    if all(A[i] in list(map(int,str(bin(A[i][0])))[2:])) :\n        return 0\n    \n    for i in range(N) :\n        for j in range(i+1,N) :\n            if all(A[i][j] in list(map(int,str(bin(A[i][j][0]))[2:]))) :\n                count = count +1\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        if A[i]^A[i+1]!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0\n    for i in range(0,N) :\n        for j in range(0,N) :\n            if A[i] ^ A[j]!= A[i] :\n                pairs = pairs + 1\n    print(pairs)\n    return pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if (N%2 == 0) : \n        return 0\n    count = 0\n    for i in range (0,N//2): \n        xor = A[i]^A[N-1-i] \n        if xor == 0: \n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(N) : \n        if A[i]&1!= 0 : \n            odd += 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(0,N):\n        for j in range(0,N):\n            if A[i]!= A[j] and i!= j:\n                odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    odd_numbers = 0\n    for i in range(len(A) - 1) : \n        if (A[i] & 0x01)!= (A[i + 1] & 0x01) : \n            odd_numbers += 1 \n    \n    return odd_numbers"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    j = 0\n    while i<N and j<N :\n        if A[i]^A[j]==0 :\n            i += 1\n            j += 1\n        elif A[i]^A[j]!=0 :\n            i+=1\n        elif A[j]^A[i]!=0 :\n            j+=1\n        elif A[i]^A[j]==0 :\n            j += 1\n    if i==N :\n        if j==N : return 0\n        elif A[j]!=0 : return 1\n        else : return -1\n    else : return -1\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Use a for loop to iterate through each character\n    # And if it is a lowercase character, write a string\n    # If it is a uppercase character, write a string\n    # If it is a special character, make it a space\n    for char in string:\n        if char.isalpha():\n            if char.islower():\n                string = string.lower()\n            elif char.isupper():\n                string = string.upper()\n            else:\n                string ='' + string\n        else:\n            string = string +''\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    new_string = \"\"\n    \n    for char in string:\n        if char.upper()!= char:\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    \n    return new_string\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0].upper() == '\"':\n        string = string[1:]\n    return string[::-1]\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string_without_spaces = string.split(' ')\n    string_without_spaces_changed = []\n    for word in string_without_spaces:\n        word_without_spaces = list(word)\n        for letter in word_without_spaces:\n            if letter.isupper():\n                letter = letter.lower()\n            if letter.islower():\n                letter = letter.upper()\n            if letter.isnumeric():\n                letter = letter.zfill(3)\n            word_without_spaces_changed.append(letter)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i == \" \":\n            new_string += \" \"\n        elif i == \"\\n\":\n            new_string += \" \"\n        else:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle =''\n    for letter in string:\n        toggle += letter.upper() if letter.isupper() else letter.lower()\n    return toggle\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #create a variable to hold the string\n    string = string.lower()\n    #reinitialize the string\n    string = string.upper()\n    #convert the string into lowercase and loop through the letters\n    for i in range(len(string)):\n        if string[i].isalpha():\n            string = string[:i] + string[i].upper() + string[i+1:]\n            #case insensitive\n            string = string.lower()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.upper() == char.lower():\n            toggled_string += char.swapcase()\n        else:\n            toggled_string += char\n    return toggled_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle(x):\n        if x == 'u':\n            x = 'e'\n        if x == 'e':\n            x = 'u'\n        return x\n    \n    def toggle(x):\n        return x.upper() if x == 'U' else x.lower()\n    \n    def toggle(x):\n        return x.title() if x == '\u00fc' else x\n    \n    def toggle(x):\n        return x.capitalize() if x == '\u00dc' else x\n    \n    return f\"{toggle(string)}{toggle(string.upper())}{toggle(string.lower())}{toggle(string.title())}{toggle(string.capitalize())}\"\n    \n    "
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for d in range(0,10):\n        diff += n1 % 10\n        n1 //= 10\n    for d in range(0,10):\n        diff += n2 % 10\n        n2 //= 10\n    return diff\n    \ndef get_digit_sum_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for d in range(0,10):\n        digit_sum += digit_distance_nums(n1, n2)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum\n    \ndef get_digit_sum_sum(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for d in range(0,10):\n        digit_sum += get_digit_sum_nums(n1, n2)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum\n    "
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    if n1 > n2:\n        diff = abs(n1-n2)\n    elif n1 < n2:\n        diff = abs(n2-n1)\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n    \ndef find_all_prime_factors(n):\n    '''\n    Write a python function to find all the primes up to and including the integer n.\n    '''\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            print(i)\n            n //= i\n        else:\n            i += 1\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # your code goes here\n    return sum(map(lambda x: int(x) - int(y), str(n1-n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    \n    for i in range(10):\n        if n1 % 10 == i or n2 % 10 == i:\n            sum += 10 ** i\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([ abs(n1-n2) for n1, n2 in zip(map(int, bin(n1)[2:]), map(int, bin(n2)[2:])) ])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # if the inputs are not valid, return -1.\n    if not n1.isdigit() or not n2.isdigit():\n        return -1\n    # if the inputs are valid, return the sum of the per-digit difference.\n    if int(n1) <= int(n2):\n        return int(n1) - int(n2)\n    return int(n2) - int(n1)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(9):\n        sum += n1[i] - n2[i]\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 0 or n2 < 0 or n1 > 9 or n2 > 9:\n        raise ValueError('Input must be between 0 and 9')\n    elif n1 < 10:\n        return n1 - n2\n    elif n1 > 10:\n        return n1 - n2\n    else:\n        return abs(n1 - n2)\n    "
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in range(len(n1)):\n        s += abs(int(n1[i]) - int(n2[i]))\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Heap sort\n    heap = []\n    for i in range(0, size):\n        heapq.heappush(heap, a[i])\n        \n    result = 0\n    \n    for i in range(0, size):\n        for j in range(i, size):\n            if heap[i] + heap[j] == a[j]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, a[j])\n                result = max(result, a[j])\n    \n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # max_list = 0\n    # l = 0\n    # # l = 0\n    # while (l < size):\n    #     if (a[l] >= max_list):\n    #         max_list = a[l]\n    #     l += 1\n    # return max_list\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    maximum = 0\n    sub_list = []\n    for i in range(len(a)):\n        if i == 0 or a[i-1] < a[i]:\n            if len(sub_list) == 0:\n                sub_list.append(a[i])\n                continue\n            sub_list.append(a[i])\n        else:\n            if len(sub_list) == 0:\n                sub_list.append(a[i])\n                continue\n            if a[i] > sub_list[-1]:\n                sub_list.append(a[i])\n            else:\n                sub_list.append(a[i])\n                maximum = max(maximum, len(sub_list))\n    return sum(sub_list) + maximum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(a)):\n        if i >= size:\n            break\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start = 0\n    end = size - 1\n    max_sum = -float('inf')\n    a[start] += a[end]\n    while start < end:\n        if a[start] + a[end] > max_sum:\n            max_sum = a[start] + a[end]\n        if a[start] + a[end] < max_sum:\n            end -= 1\n        if a[start] + a[end] > max_sum:\n            end -= 1\n        if a[start] + a[end] < max_sum:\n            start += 1\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # If the list is empty, then return 0\n    if size == 0:\n        return 0\n    \n    # If the size is too small, return 0\n    if size < 3:\n        return 0\n    \n    # Find the largest sub-array of the list, by taking the max(sub_arrays)\n    sub_array_max = max_sub_array_sum(a, size - 1)\n    \n    # Add to the sum of the sub-array the element to the current sub-array\n    return sub_array_max + sum(a[:size-1])\n    \n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    if size == 0:\n        return 0\n    \n    for i in range(size):\n        sum += a[i]\n        \n    return sum\n        \n        \ndef sum_largest_sub_array(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sum = max_sub_array_sum(a, size)\n    for i in range(size):\n        sum += a[i]\n        \n    return sum-max_sum\n    \n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0:\n        return 0\n    sub_sum = 0\n    \n    for i in range(0,size):\n        sub_sum += a[i]\n    \n    return sub_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if l1 > l2:\n        return tuple(sorted(test_tup1) + sorted(test_tup2))\n    else:\n        return tuple(sorted(test_tup2) + sorted(test_tup1))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    if (len(l1)>0) and (len(l2)>0):\n        if l1[0] > l2[0]:\n            l1.pop(0)\n            l2.pop(0)\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] < l2[j]:\n                l1.pop(i)\n                l2.pop(j)\n                break\n    return sorted(l1 + l2)\n    \ndef intersection(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    if (len(l1) > 0) and (len(l2) > 0):\n        if l1[0] > l2[0]:\n            l1.pop(0)\n            l2.pop(0)\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        return [l1[0]]\n    for i in range(len(l1)):\n        if l1[i] == l2[i]:\n            l1.pop(i)\n            l2.pop(i)\n    return sorted(l1 + l2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return []\n    elif len(test_tup1) == 1:\n        return test_tup1[0]\n    elif len(test_tup1) > 1:\n        tup1 = test_tup1[0]\n        tup2 = test_tup1[1]\n        \n        if tup2 <= tup1:\n            return union_elements(test_tup2, test_tup1[2:]) + test_tup1[2:]\n        else:\n            return union_elements(test_tup1, test_tup2[2:]) + test_tup2[2:]\n    \n    else:\n        return test_tup1[0]\n    \n    "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > 0:\n        test_tup1 = sorted(test_tup1)\n    if len(test_tup2) > 0:\n        test_tup2 = sorted(test_tup2)\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1: return None\n    if not test_tup2: return None\n    return (tuple(sorted(test_tup1))) + tuple(sorted(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return\n    if test_tup1[0] > test_tup2[0]:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    if len(test_tup1) == len(test_tup2):\n        return\n    i = 0\n    j = 0\n    k = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            result = test_tup1[i]\n            i += 1\n        else:\n            result = test_tup2[j]\n            j += 1\n        test_tup1[i] = result\n        test_tup2[j] = result\n    while i < len(test_tup1):\n        result = test_tup1[i]\n        test_tup1[i] = result\n        i += 1\n    while j < len(test_tup2):\n        result = test_tup2[j]\n        test_tup2[j] = result\n        j += 1\n    test_tup1.sort()\n    test_tup2.sort()\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted([test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # print(\"this is tup1\")\n    # print(tup1)\n    # print(\"this is tup2\")\n    # print(tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    l = []\n    for i in range(len(test_tup1)):\n        if i!= len(test_tup1):\n            l.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if i!= len(test_tup2):\n            l.append(test_tup2[i])\n    \n    return sorted(l)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist_length = 0\n    for sublist in lst:\n        if len(sublist) > longest_sublist_length:\n            longest_sublist_length = len(sublist)\n    return longest_sublist_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                return i + 1, j + 1\n    return -1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst: return 0\n    if len(lst) == 1: return 1\n    if lst[0] == lst[1]: return 2\n    else:\n        # find longest sublists\n        sublist = 2\n        for i in range(1, len(lst)):\n            if lst[i] > lst[i - 1] and lst[i] > lst[i - 2]:\n                sublist = max(sublist, 2)\n        return sublist\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for j in range(2, n):\n        for i in range(n-j):\n            j_ind = i + j\n            if j_ind == n:\n                break\n            else:\n                for k in range(i, j_ind):\n                    if dp[i][k]!= 0 and dp[k][j_ind]!= 0:\n                        dp[i][j_ind] = max(dp[i][k], dp[k][j_ind])\n    \n    return dp[0][-1]\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        # print(\"i = \",i)\n        # print(\"lst[i] = \",lst[i])\n        # print(\"lst[i + 1] = \",lst[i+1])\n        length = len(lst[i]) + len(lst[i+1])\n        # print(\"length = \", length)\n        if length > max_length:\n            max_length = length\n    return max_length\n    # return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen=0\n    for i in range(len(lst)):\n        if(len(lst[i])>maxLen):\n            maxLen=len(lst[i])\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # TODO\n    max_length = len(lst)\n    i = 0\n    j = 0\n    while i < len(lst) - 1:\n        if lst[i] == lst[i+1]:\n            i+=1\n        else:\n            i += 1\n            j = i\n            while j < len(lst) - 1:\n                if lst[j] == lst[j+1]:\n                    j+=1\n                else:\n                    j += 1\n                    break\n    return len(lst) - j\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    len_list=len(lst)\n    max_length=0\n    for i in range(len_list):\n        for j in range(len_list):\n            if i<j:\n                if lst[i]>lst[j]:\n                    max_length=max(len_list,len(str(lst[i])))\n    return max_length\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    regex = r'([\\\"\\'])(?:[^\\\"\\']*)(?:[\\\"\\']|$)'\n    \n    regex_sub = r'|'.join([re.escape(c) for c in regex])\n    regex_sub = regex_sub.replace('\\\\', '\\\\\\\\')\n    regex = re.compile(regex_sub, re.VERBOSE)\n    \n    while True:\n        text = regex.sub(r'\\1 \\2', text)\n        if text == '':\n            break\n    \n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.replace(\"'\", \"\").replace('\"', \"\").split(\",\")\ndef format_input(text):\n    '''\n    Write a function to format a string in Python to be usable by OpenCV.\n    '''\n    return text.replace('-', '').replace('=', '').replace('+','').replace(':', '').replace(',', '').replace(';', '').replace('*', '').replace('/', '').replace('%', '').replace('(', '').replace(')', '').replace('&', '').replace('!', '').replace('?', '').replace('.', '').replace('?', '').replace('!', '')\ndef reverse_dict(dict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    return {v: k for k, v in dict.items()}\ndef format_dict(input_dict):\n    '''\n    Write a function to format a dictionary as a string.\n    '''\n    return '{' + ','.join([f\"{k} = {v}\" for k, v in input_dict.items()]) + '}'\ndef get_image_width(image):\n    '''\n    Write a function to get the width of an image.\n    '''\n    return image.shape[1]\ndef get_image_height(image):\n    '''\n    Write a function to get the height of an image.\n    '''\n    return image.shape[0]\ndef convert_to_image(text):\n    '''\n    Write a function to convert a string to an image.\n    '''\n    input_text = format_input(text)\n    input_text = format_dict(input_text)\n    input_text = format_image(input_text)\n    return input_text\ndef convert_image(text):\n    '''\n    Write a function to convert an image string to a string.\n    '''\n    return reverse_dict(extract_values(text))\ndef convert_text(text):\n    '''\n    Write a function to convert a string to a text.\n    '''\n    return format_image(convert_to_image(text))\ndef reverse_text(text):\n    '''\n    Write a function to reverse the conversion process of an image string.\n    '''\n    return reverse_dict(extract_values(text))\ndef format_text(text):\n    '''\n    Write a function to format a text as a string.\n    '''\n    input_text = format_input(text)\n    input_text = format_dict(input_text)\n    input_text = format_image(input_text)\n    return input_text\ndef format_image(text):\n    '''\n    Write a function to format an image string as a string.\n    '''\n    return text.replace('-','').replace('=', '').replace('+','').replace(':', '').replace(',','').replace(';','').replace('*','').replace('/','').replace('%','').replace('(','').replace(')','').replace('&','').replace('!','').replace('?','').replace('.','').replace('?','').replace('!','').replace('?','')\ndef get_image_count(text):\n    '''\n    Write a function to get the number of images.\n    '''\n    return text.count(' ')\ndef get_font_size(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[1]\ndef get_image_count_text(text):\n    '''\n    Write a function to get the number of images for a given text.\n    '''\n    return text.count(' ')\ndef get_image_size(text):\n    '''\n    Write a function to get the image size.\n    '''\n    return text.split()[1]\ndef get_font_size_text(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[2]\ndef get_image_count_font(text):\n    '''\n    Write a function to get the font count for a given text.\n    '''\n    return text.count(' ')\ndef get_font_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[2]\ndef get_width_image(text):\n    '''\n    Write a function to get the width of an image.\n    '''\n    return get_image_width(text)\ndef get_height_image(text):\n    '''\n    Write a function to get the height of an image.\n    '''\n    return get_image_height(text)\ndef get_size_image(text):\n    '''\n    Write a function to get the image size.\n    '''\n    return get_image_size(text)\ndef get_width_font(text):\n    '''\n    Write a function to get the width of a font.\n    '''\n    return get_font_size(text)\ndef get_height_font(text):\n    '''\n    Write a function to get the height of a font.\n    '''\n    return get_font_size(text)\ndef get_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return get_font_size_text(text)\ndef get_image_count_font(text):\n    '''\n    Write a function to get the font count for a given text.\n    '''\n    return text.count(' ')\ndef get_font_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[2]\ndef get_image_count_font(text):\n    '''\n    Write a function to get the font count for a given text.\n    '''\n    return text.count(' ')\ndef get_font_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[3]\ndef get_width_font(text):\n    '''\n    Write a function to get the width of a font.\n    '''\n    return get_font_size_font(text)\ndef get_height_font(text):\n    '''\n    Write a function to get the height of a font.\n    '''\n    return get_font_size_font(text)\ndef get_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return get_font_size_font(text)\ndef get_image_count_font(text):\n    '''\n    Write a function to get the font count for a given text.\n    '''\n    return text.count(' ')\ndef get_font_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[4]\ndef get_font_size_text(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[5]\ndef get_height_font(text):\n    '''\n    Write a function to get the height of a font.\n    '''\n    return text.split()[6]\ndef get_width_font(text):\n    '''\n    Write a function to get the width of a font.\n    '''\n    return text.split()[7]\ndef get_image_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[8]\ndef get_size_font(text):\n    '''\n    Write a function to get the font size.\n    '''\n    return text.split()[9]\ndef get_width_font(text):\n    '''\n    Write a function to get the width of a font.\n    '''\n    return text.split()[10]\ndef get_image_count_font(text):\n    '''\n    Write a function to get the font count for a given text.\n    '''\n    return text.count(' ')\ndef get_fon"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # extract a single value (not all quotes, like \"and a\")\n    result = re.match('(.+)', text).group(1)\n    # remove all non alphanumeric characters\n    result = re.sub('[^\\w\\d-]', '', result)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    text = text.strip().lower()\n    # iterate through each word in the string, strip out special characters and replace spaces with punctuation\n    for word in re.split('[^\\w\\-]', text):\n        word = word.strip().lower()\n        if word:\n            values.append(word)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '\"')\n    text = text.replace('\"', '\"')\n    text = text.replace(\"'\", '\"')\n    text = text.replace(\"'\", '\"')\n    text = text.replace(\"'\", '\"')\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    text = re.sub(r'[^\\w]', '', text)\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace('\u201c','')\n    text = text.replace('\u201d','')\n    text = text.replace('\u2018','')\n    text = text.replace('\u2019','')\n    text = text.replace('\u2017','')\n    text = text.replace('\u201c','')\n    text = text.replace('\u201e','')\n    text = text.replace('\u2018','')\n    text = text.replace('\u2019','')\n    text = text.replace('\u2014','')\n    text = text.replace('\u2013','')\n    text = text.replace('\u2212','')\n    text = text.replace('+','')\n    text = text.replace('-','')\n    text = text.replace('%','')\n    text = text.replace('\u00b0','')\n    text = text.replace('\u00d7','')\n    text = text.replace('\u00d7','')\n    text = text.replace('\u00d7','')\n    text = text.replace('\u00b5','')\n    text = text.replace('\u00be','')\n    text = text.replace('\u00bc','')\n    text = text.replace('+.','')\n    text = text.replace('-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','')\n    text = text.replace('+-','"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    for i in text:\n        if i in ['(', '{', '[']:\n            values.append(i)\n        elif i in ['}', ']']:\n            values.append(i)\n        elif i in ['\\\"', ':', '\\'']:\n            values.append(i)\n        else:\n            values.append(i)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex_pattern = re.compile(\"\\\".*?\\\"\")\n    data = regex_pattern.findall(text)\n    return data\ndef is_datetime(text):\n    '''\n    Write a function to check if a text is a datetime.\n    '''\n    pattern = re.compile(r\"([\\d]{4})-(\\d{2})-(\\d{2})\")\n    match = pattern.search(text)\n    if match:\n        return True\n    return False\ndef is_integer(text):\n    '''\n    Write a function to check if a text is an integer.\n    '''\n    pattern = re.compile(\"[\\d]+\")\n    match = pattern.search(text)\n    return match\ndef is_number(text):\n    '''\n    Write a function to check if a text is a number.\n    '''\n    pattern = re.compile(\"[\\d]+\")\n    match = pattern.search(text)\n    return match\ndef is_string(text):\n    '''\n    Write a function to check if a text is a string.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_alnum(text):\n    '''\n    Write a function to check if a text is alphanumeric.\n    '''\n    pattern = re.compile(\"[a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_symbol(text):\n    '''\n    Write a function to check if a text is a symbol.\n    '''\n    pattern = re.compile(\"[+-]\")\n    match = pattern.search(text)\n    return match\ndef is_alphanum(text):\n    '''\n    Write a function to check if a text is alphanumeric.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9\\s]\")\n    match = pattern.search(text)\n    return match\ndef is_title(text):\n    '''\n    Write a function to check if a text is title.\n    '''\n    pattern = re.compile(\"[^A-Za-z]\")\n    match = pattern.search(text)\n    return match\ndef is_words(text):\n    '''\n    Write a function to check if a text is a word.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9\\s]\")\n    match = pattern.search(text)\n    return match\ndef is_digit(text):\n    '''\n    Write a function to check if a text is a number.\n    '''\n    pattern = re.compile(\"[0-9]\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_dollar(text):\n    '''\n    Write a function to check if a text is a symbol dollar.\n    '''\n    pattern = re.compile(\"[$]\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_pound(text):\n    '''\n    Write a function to check if a text is a symbol pound.\n    '''\n    pattern = re.compile(\"[\u00a3]\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_pound_dollar(text):\n    '''\n    Write a function to check if a text is a symbol pound dollar.\n    '''\n    pattern = re.compile(\"[\u00a3$]\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_dollar_pound(text):\n    '''\n    Write a function to check if a text is a symbol dollar dollar.\n    '''\n    pattern = re.compile(\"[\u00a3$]\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_dollar(text):\n    '''\n    Write a function to check if a text is a symbol dollar.\n    '''\n    pattern = re.compile(\"[\u00a3]\")\n    match = pattern.search(text)\n    return match\ndef is_dollar(text):\n    '''\n    Write a function to check if a text is a dollar.\n    '''\n    pattern = re.compile(\"[$]\")\n    match = pattern.search(text)\n    return match\ndef is_dollar_dollar(text):\n    '''\n    Write a function to check if a text is a dollar dollar.\n    '''\n    pattern = re.compile(\"[$]\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_dollar_sign(text):\n    '''\n    Write a function to check if a text is a symbol dollar dollar sign.\n    '''\n    pattern = re.compile(\"[$]\")\n    match = pattern.search(text)\n    return match\ndef is_dollar_sign(text):\n    '''\n    Write a function to check if a text is a dollar dollar sign.\n    '''\n    pattern = re.compile(\"[$]\")\n    match = pattern.search(text)\n    return match\ndef is_dollar_pound(text):\n    '''\n    Write a function to check if a text is a dollar dollar sign.\n    '''\n    pattern = re.compile(\"[\u00a3]\")\n    match = pattern.search(text)\n    return match\ndef is_dollar_pound_dollar(text):\n    '''\n    Write a function to check if a text is a dollar dollar dollar sign.\n    '''\n    pattern = re.compile(\"[\u00a3$]\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_space(text):\n    '''\n    Write a function to check if a text is a space.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_space_dollar(text):\n    '''\n    Write a function to check if a text is a symbol dollar space.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_space_pound(text):\n    '''\n    Write a function to check if a text is a symbol dollar space.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_space_dollar_pound(text):\n    '''\n    Write a function to check if a text is a symbol dollar dollar space.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_pound_space(text):\n    '''\n    Write a function to check if a text is a symbol dollar dollar space.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_pound_dollar_space(text):\n    '''\n    Write a function to check if a text is a symbol dollar dollar space.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_symbol_pound_space(text):\n    '''\n    Write a function to check if a text is a symbol dollar dollar space.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]+\")\n    match = pattern.search(text)\n    return match\ndef is_number(text):\n    '''\n    Write a function to check if a text is a number.\n    '''\n    pattern = re.compile(\"[\\d]+\")\n    match = pattern.search(text)\n    return match\ndef is_integer(text):\n    '''\n    Write a function to check if a text is an integer.\n    '''\n    pattern = re.compile(\"[\\d]+\")\n    match = pattern.search(text)\n    return match\ndef is_integer_number(text):\n    '"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        result = re.findall(r'\\'((?:[^\\']|\\\")[^\\']*\\'|\"(?:[^\\']|\\\")[^\\']*\")|[^\\']*\\'|\"[^\"]*\"|\"([^\"]*)\"', text)\n        return result\n    except:\n        return [text]\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                res+=1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]==arr[j]):\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    pairs = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                pairs +=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    result=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]==arr[j]):\n                result+=1\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if (arr[i] == arr[j] and i!=j) or (arr[j] < arr[i] and j!=i):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    max=0\n    for i in arr:\n        if i==0:\n            max+=1\n        else:\n            if i==1:\n                max+=0\n            else:\n                max+=1\n    return max\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(0, n): \n        if arr[i]!= arr[i+1]: \n            c += 1\n    return c"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    m=len(arr)\n    if m<2:\n        return 0\n    elif m==2:\n        if arr[0]!=arr[1]:\n            return 2\n        else:\n            return 1\n    elif m==3:\n        if arr[0]==arr[1]:\n            return 2\n        else:\n            return 1\n    else:\n        for i in range(m-1):\n            if arr[i]!=arr[i+1]:\n                return 2\n        return 1\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2: \n        return 0\n    if n == 2: \n        return 1\n    if arr[0] == arr[1]: \n        return count_Pairs(arr,n-2) + count_Pairs(arr,n-1)\n    else:\n        return count_Pairs(arr,n-2) + count_Pairs(arr,n-1) + count_Pairs(arr[1:],n-1)\narr = [1,2,3,4]\nprint(count_Pairs(arr,6))\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n    #HINT: You may want to use a split function or a string method\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty string\n    return_string = \"\"\n    # loop through the string\n    for char in word: \n        # if the char is a digit or a space then add it to the string\n        if char.isdigit() or char == \" \": \n            return_string += char\n        # otherwise, add the char to the string\n    # return the string\n    return return_string\n    \n    \ndef main():\n    '''\n    TODO: write a program to split a string into an array of characters.\n    '''\n    # define a variable\n    str1 ='string'\n    # test to see if it works\n    print(split(str1))\n    \nmain()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    my_string = ''\n    for i in word:\n        my_string += i\n    return my_string\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    l = [] \n    for i in word: \n        if i!='': \n            l.append(i) \n    return l\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split_str = list(word)\n    return split_str\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = str(word)\n    return s.split(\" \")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    word_list = []\n    for letter in word: \n        if letter in alphabet:\n            if len(word) > 2: \n                word_list.append(letter)\n            else: \n                word_list.append(letter)\n                word_list.append(letter)\n        else: \n            word_list.append(letter)\n    return word_list\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [i for i in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Check if the number is negative\n    if n < 0:\n        return 0\n    # Sum the digits from 0 to the input\n    # n = n % 10\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    # Return sum\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while(n > 0):\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum = sum + digit\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n >= 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # create an empty string and add the decimal value to it\n    s = \"\"\n    while n:\n        s = str(n % 10) + s\n        n = n//10\n    # return the sum of the digits\n    return int(s)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n_str = str(n)\n    sum = 0\n    for i in n_str:\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n==0:\n        return 0\n    \n    sum=0\n    while n>0:\n        sum=sum+n%10\n        n=n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return sum_digits(n//10) + (n%10)"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        # get remainder after dividing by 10\n        remainder = n % 10\n        sum += remainder\n        # change n to n//10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = True\n    if len(list1) == 0:\n        sorted_list = False\n    elif len(list1) == 1:\n        sorted_list = True\n    else:\n        sorted_list = False\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                sorted_list = False\n    return sorted_list\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)<=1:\n        return True\n    elif list1[0]<list1[-1]:\n        return False\n    else:\n        return issort_list(list1[1:-1])\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    j = len(list1) - 1\n    while i < j:\n        if list1[i] > list1[j]:\n            list1[i], list1[j] = list1[j], list1[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return list1"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1.sort()\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index, item in enumerate(list1):\n        if index < len(list1) - 1:\n            if item > list1[index + 1]:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    return empty\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length <= 0:\n        return []\n    else:\n        return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(length):\n        list.append({})\n    return list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    import itertools\n    for i in itertools.permutations(list1):\n        if i[0] == i[-1]:\n            return [i[0], i[1]]\n        else:\n            return sorted(i)"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        result.append([x.lower() for x in sublist])\n    sorted_list = sorted(result, key=lambda x: len(x))\n    return sorted_list\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def _sort(list1, item):\n        return item.index(list1[0][item])\n    return _sort(list1, list1[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Create a list of lists\n    sublists = []\n    \n    for sublist in list1:\n        new_sublist = []\n        for item in sublist:\n            new_sublist.append(item)\n        sublists.append(new_sublist)\n    \n    # Sort the sublists\n    sublists.sort()\n    \n    # Return the sorted sublists\n    return sublists\n    \ndef main():\n    '''\n    Write a function to merge the following two sorted lists:\n    L1 = [1, 3, 5], L2 = [2, 4, 6]\n    \n    And the result should be:\n    L3 = [1, 2, 3, 4, 5, 6]\n    '''\n    \n    L1 = [1, 3, 5]\n    L2 = [2, 4, 6]\n    \n    L3 = merge_sorted_lists(L1, L2)\n    \n    print(L3)\n    \ndef merge_sorted_lists(L1, L2):\n    '''\n    Write a function to merge the given 2 sorted lists into a single list.\n    '''\n    \n    result = []\n    \n    # Get the total length of both lists\n    L1_length = len(L1)\n    L2_length = len(L2)\n    \n    # If the length of the two lists is different,\n    # there is no way to merge them\n    if L1_length!= L2_length:\n        result.append(L1[0])\n        return result + L2\n    \n    # Loop through the two lists\n    for i in range(L1_length):\n        # Set the current index\n        current_index = i\n        \n        # Loop through the second list\n        for j in range(L2_length):\n            # Set the next index\n            next_index = j\n            \n            # If the next index is less than or equal to the current index,\n            # append the list at the next index to the result\n            if next_index <= current_index:\n                result.append(L1[current_index])\n                current_index = next_index\n            \n            # If the next index is greater than the current index,\n            # append the list at the next index to the result\n            elif next_index >= current_index:\n                result.append(L2[current_index])\n                current_index = next_index\n                \n    # Return the merged result\n    return result\n    \ndef main2():\n    '''\n    Write a function to merge the following two sorted lists into a single list:\n    L1 = [1, 3, 5]\n    L2 = [2, 4, 6]\n    \n    And the result should be:\n    L3 = [1, 2, 3, 4, 5, 6]\n    '''\n    \n    L1 = [1, 3, 5]\n    L2 = [2, 4, 6]\n    \n    L3 = merge_sorted_lists(L1, L2)\n    \n    print(L3)\n    \ndef merge_sorted_lists2(L1, L2):\n    '''\n    Write a function to merge the given 2 sorted lists into a single list, with the\n    following modification:\n    L3 = [1, 2, 3, 4, 5, 6]\n    '''\n    \n    result = []\n    \n    # Get the total length of both lists\n    L1_length = len(L1)\n    L2_length = len(L2)\n    \n    # If the length of the two lists is different,\n    # there is no way to merge them\n    if L1_length!= L2_length:\n        result.append(L1[0])\n        return result + L2\n    \n    # Loop through the two lists\n    for i in range(L1_length):\n        # Set the current index\n        current_index = i\n        \n        # Loop through the second list\n        for j in range(L2_length):\n            # Set the next index\n            next_index = j\n            \n            # If the next index is less than or equal to the current index,\n            # append the list at the next index to the result\n            if next_index <= current_index:\n                result.append(L1[current_index])\n                current_index = next_index\n            \n            # If the next index is greater than the current index,\n            # append the list at the next index to the result\n            elif next_index >= current_index:\n                result.append(L2[current_index])\n                current_index = next_index\n                \n    # Return the merged result\n    return result\n    "
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not list1:\n        return list1\n    elif not list1[0]:\n        return list1\n    else:\n        return sorted(list1, key=lambda x: (str(x).count(' '), str(x).upper(), str(x).lower()))\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        print(sublist)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(list1):\n        for j in range(len(list1[i])):\n            if type(list1[i][j]) is list:\n                list1[i][j].sort()\n        i += 1\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_sublists(list1, 0, len(list1)-1)\n    sort_sublists(list1, 0, len(list1)-1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #sort the sublists using the natural order and to change the list indexing to string indexing\n    list1_sorted = sorted(list1, key=str.casefold)\n    return list1_sorted\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    temp = []\n    for num in nums:\n        if num not in temp:\n            temp.append(num)\n    for num in nums:\n        if num not in temp:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # traverse the list\n    for i in range(0, len(nums)):\n        # if element is not found\n        if nums[i] not in nums[i + 1:]:\n            return [nums[i], nums[i + 1:]]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    nums_copy = nums.copy()\n    nums.clear()\n    \n    for num in nums_copy:\n        if num not in nums:\n            nums.append(num)\n    \n    return nums\n    \ndef one_way_permutation(numbers):\n    '''\n    Write a python function that takes an array of numbers and returns the longest permutation of the array.\n    '''\n    n = len(numbers)\n    \n    # make a dictionary to store the number with corresponding index\n    dict_of_index = {}\n    for i in range(n):\n        dict_of_index[numbers[i]] = i\n    \n    result = []\n    \n    # iterate through all the numbers and find the maximum value in the dictionary\n    for i in range(n):\n        current_index = dict_of_index[numbers[i]]\n        for j in range(i, n):\n            if dict_of_index[numbers[j]] > current_index:\n                current_index = dict_of_index[numbers[j]]\n        result.append(current_index)\n        dict_of_index[numbers[i]] = -1\n    \n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq = set(nums)\n    return list(uniq)\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # if the list is empty\n    if not nums:\n        return []\n    # get the first element and add it to the return list\n    first = nums[0]\n    nums.remove(first)\n    # iterate over the remaining list and remove the duplicates\n    for el in nums:\n        if el not in nums:\n            nums.remove(el)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a=[]\n    for num in nums:\n        if num not in a:\n            a.append(num)\n    return a\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Your code here\n    nums = nums[:]\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] == nums[j]:\n                nums[i] = 0\n                nums[j] = 0\n    return nums\n    # test your code\n    return nums\n    \n    #raise NotImplementedError"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    hash = {}\n    for i in nums:\n        if i not in hash:\n            hash[i] = 1\n        else:\n            hash[i] += 1\n    for k,v in hash.items():\n        if v == 1:\n            nums.remove(k)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for i in list_data:\n        if i == list_data[0]:\n            continue\n        else:\n            print(i, '==>', list_data[0])\n    print(' ')\n    return None\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = []\n    for data in list_data:\n        new_list.append(data)\n    new_list = sorted(new_list)\n    product = 1\n    for number in new_list:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if not list_data:\n        raise ValueError(\"List is empty\")\n    unique_number = 1\n    for item in list_data:\n        if item == list_data[0]:\n            unique_number += 1\n    return unique_number\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # your code goes here\n    product=1\n    for i in list_data:\n        product=product*i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dictionary = {}\n    for num in list_data:\n        if num not in dictionary:\n            dictionary[num] = 1\n        else:\n            dictionary[num] += 1\n    return sum(dictionary.values())\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp = []\n    for i in list_data:\n        temp.append(i)\n    temp = set(temp)\n    for i in temp:\n        if temp.count(i) == 1:\n            print(i)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for i in list_data:\n        for j in list_data:\n            if i!= j:\n                if i + j == 2020 or i * j == 2020:\n                    return i * j\n    return -1\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n    print(unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data)>=1:\n        result = 1\n        for num in list_data:\n            result *= num\n        return result\n    else:\n        return 0\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_len = len(list_data)\n    list_sum = 0\n    list_product = []\n    for i in list_data:\n        list_sum += i\n    for i in range(list_len):\n        if list_data[i] not in list_product:\n            list_product.append(list_data[i])\n    list_product = list(dict.fromkeys(list_product))\n    for j in list_product:\n        list_sum *= list_data[j]\n    print(f'The sum of all the numbers in the list is {list_sum}')\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*pi*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Note: if you don't know the math, you can use the help function from the math module.\n    return (4*(r*math.pi)*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # YOUR CODE HERE\n    \n    return 0\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*h*np.pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = (h**2)*(r**2)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    h1 = h*2\n    # if the first point is the centre, then the circle is half\n    if (r > 0):\n        if (r == 0):\n            a = -h\n            b = -h1\n            c = -(2*h - 2*h1)\n            # return the result of the expression\n            return ((a*c) - b*c)\n        else:\n            # this will end the function if the first point is not the centre\n            a = -2*h1\n            # this will return the result of the expression\n            return ((a*c) - (b*c))\n    else:\n        if (r == 0):\n            a = -h1\n            b = -2*h\n            c = -(2*h - 2*h1)\n            # return the result of the expression\n            return (c - a*c)\n        else:\n            # this will end the function if the first point is not the centre\n            a = -2*h\n            # this will return the result of the expression\n            return (a*c) - (b*c)"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*pi*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    c = h/2\n    return c*(4*(r-c)**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = r**2*(4*np.pi**2)\n    print(\"Surface area of a cylinder is {}\".format(s))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False\n    \ndef checkSubList(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if B[i] in A:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check whether B is sublist of A or not \n    if(B in A): \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A is not None:\n        if B is None or type(B)!= list:\n            return False\n        for i in range(len(B)):\n            if A[i] not in B[i+1:]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if i not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if lists are sublists\n    return True if len(A) == len(B) else False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A) == len(B)):\n        #return True\n        for i in range(len(A)):\n            if A[i] in B:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n        else:\n            return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == len(B):\n        # for each element in A, check if its sublist of B\n        for i in range(0,len(A)):\n            if A[i] in B:\n                return A[i] == B[i]\n        # if no match, return false\n        return False\n    else:\n        # if the lengths are not equal, return false\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    for i in range(n):\n        if A[i] in B[:n]:\n            if B[i] in B[:n]:\n                return False\n            else:\n                return True\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # check if n is positive or negative\n    if n < 0:\n        print(\"Error: Negative input\")\n    elif n == 0:\n        return 1\n    else:\n        last_digit_factorial = 1\n        for i in range(1,n+1):\n            last_digit_factorial = last_digit_factorial * i\n    return last_digit_factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Invalid input.\")\n        return \"Invalid input.\"\n    else:\n        return Factorial_Part1(n)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #Evaluate the factorial of a given number.\n    factorial = 1\n    for i in range(2,n+1):\n        factorial = factorial*i\n    #Return the last digit of the factorial.\n    return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1 or n == 0:\n        return 1\n    else:\n        result = n % 10\n        return last_Digit_Factorial(n//10) * result\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef lastDigit_Factorial_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(n): \n        factorial = factorial * i \n    return factorial % 10\ndef lastDigit_Factorial_3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1): \n        factorial = factorial * i \n    return factorial % 10\ndef factorial_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n*factorial_2(n-1)\ndef factorial_3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1): \n        factorial = factorial * i \n    return factorial % 10\ndef lastDigit_factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef lastDigit_factorial_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1): \n        factorial = factorial * i \n    return factorial % 10\ndef factorial_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef lastDigit_factorial_3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1): \n        factorial = factorial * i \n    return factorial % 10\ndef factorial_4(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_4(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1): \n        factorial = factorial * i \n    return factorial % 10\ndef factorial_5(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_6(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_7(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_8(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_9(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_10(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_11(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_12(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_13(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_14(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_15(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_16(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_17(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_18(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_19(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_20(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_21(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        lastDigit = n%10\n        return lastDigit \ndef factorial_22(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = 0\n    for i in range(1, n + 1):\n        num = num + i\n    return num\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # add 1 to n to get the length of n\n    length = len(str(n))\n    # divide n by 10^length to get the last digit of n\n    return n % 10 ** length\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n<=0): \n        print (\"Invalid Input\") \n        return 1\n    else: \n        return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n - max(n, sum(map(int, str(n))))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # define empty output list\n    out = []\n    # define count of elements in lists\n    count = 0\n    # iterate over list1, list2, list3\n    # and assign values to out\n    for i in range(0, len(list1)):\n        out.append(list1[i])\n        out.append(list2[i])\n        out.append(list3[i])\n        # append elements from lists to count\n        count += 1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    while len(list1)!=len(list2):\n        result.append(list2)\n        result.append(list1)\n        list1=[]\n        list2=[]\n    result.extend(list3)\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==0:\n        return list3\n    if len(list2)==0:\n        return list3\n    if len(list3)==0:\n        return list1\n    \n    if list1[0] == list2[0] and list1[0] == list3[0]:\n        return list3\n    if list1[0]!= list2[0] and list1[0]!= list3[0]:\n        return list1\n    if list2[0]!= list3[0] and list2[0]!= list1[0]:\n        return list2\n    if list3[0]!= list1[0] and list3[0]!= list2[0]:\n        return list3\n    \n    if list1[0] == list2[0]:\n        list3[0] = list1[0]\n        list3[1] = list1[1]\n        list3[2] = list1[2]\n    elif list1[0] == list3[0]:\n        list3[0] = list2[0]\n        list3[1] = list2[1]\n        list3[2] = list2[2]\n    elif list2[0] == list3[0]:\n        list3[0] = list3[1]\n        list3[1] = list3[2]\n        list3[2] = list3[0]\n    elif list3[0] == list1[0]:\n        list3[0] = list1[1]\n        list3[1] = list1[2]\n        list3[2] = list1[0]\n    elif list3[0] == list2[0]:\n        list3[0] = list2[1]\n        list3[1] = list2[2]\n        list3[2] = list2[0]\n    elif list3[0] == list1[0]:\n        list3[0] = list1[1]\n        list3[1] = list1[2]\n        list3[2] = list1[0]\n    elif list3[0] == list2[0]:\n        list3[0] = list2[1]\n        list3[1] = list2[2]\n        list3[2] = list2[0]\n    else:\n        return interleave_lists(list1,list2,list3)\n    \n    return list3\n    \ndef interleave_lists2(list1,list2):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==0:\n        return list2\n    if len(list2)==0:\n        return list1\n    \n    if list1[0] == list2[0]:\n        list2[0] = list1[0]\n        list2[1] = list1[1]\n        list2[2] = list1[2]\n    elif list1[0] == list2[0]:\n        list2[0] = list1[0]\n        list2[1] = list1[1]\n        list2[2] = list1[2]\n    elif list2[0] == list1[0]:\n        list2[0] = list2[1]\n        list2[1] = list2[2]\n        list2[2] = list2[0]\n    elif list2[0] == list1[0]:\n        list2[0] = list2[1]\n        list2[1] = list2[2]\n        list2[2] = list2[0]\n    elif list1[0] == list2[0]:\n        list2[0] = list2[1]\n        list2[1] = list2[2]\n        list2[2] = list2[0]\n    else:\n        return interleave_lists2(list1,list2)\n        \n    return list2\n    \ndef interleave_lists3(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==0:\n        return list3\n    if len(list2)==0:\n        return list3\n    if len(list3)==0:\n        return list1\n        \n    if list1[0] == list2[0] and list1[0] == list3[0]:\n        return list3\n    if list1[0]!= list2[0] and list1[0]!= list3[0]:\n        return list1\n    if list2[0]!= list3[0] and list2[0]!= list1[0]:\n        return list2\n    if list3[0]!= list1[0] and list3[0]!= list2[0]:\n        return list3\n    \n    if list1[0] == list2[0]:\n        list3[0] = list1[0]\n        list3[1] = list1[1]\n        list3[2] = list1[2]\n    elif list1[0] == list3[0]:\n        list3[0] = list2[0]\n        list3[1] = list2[1]\n        list3[2] = list2[2]\n    elif list2[0] == list3[0]:\n        list3[0] = list3[1]\n        list3[1] = list3[2]\n        list3[2] = list3[0]\n    elif list3[0] == list1[0]:\n        list3[0] = list1[1]\n        list3[1] = list1[2]\n        list3[2] = list1[0]\n    elif list3[0] == list2[0]:\n        list3[0] = list2[1]\n        list3[1] = list2[2]\n        list3[2] = list2[0]\n    elif list3[0] == list1[0]:\n        list3[0] = list1[1]\n        list3[1] = list1[2]\n        list3[2] = list1[0]\n    elif list3[0] == list2[0]:\n        list3[0] = list2[1]\n        list3[1] = list2[2]\n        list3[2] = list2[0]\n    else:\n        return interleave_lists3(list1,list2,list3)\n    \n    return list3\n    \ndef interleave_lists4(list1,list2):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==0:\n        return list2\n    if len(list2)==0:\n        return list1\n    \n    if list1[0] == list2[0]:\n        list2[0] = list1[0]\n        list2[1] = list1[1]\n        list2[2] = list1[2]\n    elif list1[0] == list2[0]:\n        list2[0] = list1[0]\n        list2[1] = list1[1]\n        list2[2] = list1[2]\n    elif list1[0] == list2[0]:\n        list2[0] = list1[0]\n        list2[1] = list1[1]\n        list2[2] = list1[2]\n    elif list2[0] == list1[0]:\n        list2[0] = list2[1]\n        list2[1] = list2[2]\n        list2[2] = list2[0]\n    elif list2[0] == list1[0]:\n        list2[0] = list1[1]\n        list2[1] = list1[2]\n        list2[2] = list1[0]\n    elif list1[0] == list2[0]:\n        list2[0] = list2[1]\n        list2[1] = list2[2]\n        list2[2] = list2[0]\n    else:\n        return interleave_lists4(list1,list2)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                list3[k].append(list1[i][j])\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1):\n        if i < len(list2):\n            new_list.append(list1[i])\n            i = i + 1\n        elif j < len(list3):\n            new_list.append(list2[j])\n            j = j + 1\n        else:\n            new_list.append(list3[k])\n            k = k + 1\n        i = i + 1\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(list1)):\n        l1.append(list1[i])\n        l2.append(list2[i])\n        l3.append(list3[i])\n    return l1+l2+l3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list=[]\n    temp1=list1[0]\n    temp2=list1[1]\n    temp3=list1[2]\n    interleaved_list.append(temp1)\n    interleaved_list.append(temp2)\n    interleaved_list.append(temp3)\n    temp1=list2[0]\n    temp2=list2[1]\n    temp3=list2[2]\n    interleaved_list.append(temp1)\n    interleaved_list.append(temp2)\n    interleaved_list.append(temp3)\n    temp1=list3[0]\n    temp2=list3[1]\n    temp3=list3[2]\n    interleaved_list.append(temp1)\n    interleaved_list.append(temp2)\n    interleaved_list.append(temp3)\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #start writing your code here\n    s=''\n    i=0\n    while i<len(list1):\n        j=0\n        while j<len(list2):\n            s+=list1[i]+list2[j]+list3[i]\n            j+=1\n        i+=1\n    return s\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #concatenate list1 and list2\n    list1 = list(list1)\n    list2 = list(list2)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    if len(tup1) == len(tup2) == 0:\n        return []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                res.append(i)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = []\n    list2 = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Lengths of the tuples should match\"\n    assert type(test_tup1) == tuple or type(test_tup1) == list, 'Data Type is not a tuple'\n    assert type(test_tup2) == tuple or type(test_tup2) == list, 'Data Type is not a tuple'\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n    \ndef find_distance_from_zero(test_tup1, test_tup2):\n    '''\n    Write a function to find the distance between two tuples\n    '''\n    return abs(test_tup1[0] - test_tup2[0])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    \n    dissimilar = test_tup1_set.intersection(test_tup2_set)\n    \n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    return test_tup1\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return test_tup1 if (test_tup1[0]!= test_tup2[0]) else test_tup2\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = list(test_tuple)\n    for ele in result:\n        if isinstance(ele, tuple):\n            result.remove(ele)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, \"even\")\n    even_fnc(test_tuple, lambda t : t[::2])\n    even_fnc(test_tuple, lambda t : t[1::2])\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(even_tuple, even_tuple, even_tuple)\n    return even_tuple\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_fnc(odd_tuple, odd_tuple, odd_tuple)\n    return odd_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    even_tuple_copy = even_tuple[:]\n    even_tuple_copy[0] = even_tuple_copy[1]\n    even_tuple_copy[1] = even_tuple_copy[2]\n    even_tuple_copy[2] = even_tuple_copy[3]\n    even_tuple_copy[3] = even_tuple_copy[4]\n    even_tuple_copy[4] = even_tuple_copy[5]\n    even_tuple_copy[5] = even_tuple_copy[6]\n    even_tuple_copy[6] = even_tuple_copy[7]\n    even_tuple_copy[7] = even_tuple_copy[8]\n    even_tuple_copy[8] = even_tuple_copy[9]\n    even_tuple_copy[9] = even_tuple_copy[10]\n    even_tuple_copy[10] = even_tuple_copy[11]\n    even_tuple_copy[11] = even_tuple_copy[12]\n    even_tuple_copy[12] = even_tuple_copy[13]\n    even_tuple_copy[13] = even_tuple_copy[14]\n    even_tuple_copy[14] = even_tuple_copy[15]\n    even_tuple_copy[15] = even_tuple_copy[16]\n    even_tuple_copy[16] = even_tuple_copy[17]\n    even_tuple_copy[17] = even_tuple_copy[18]\n    even_tuple_copy[18] = even_tuple_copy[19]\n    even_tuple_copy[19] = even_tuple_copy[20]\n    even_tuple_copy[20] = even_tuple_copy[21]\n    even_tuple_copy[21] = even_tuple_copy[22]\n    even_tuple_copy[22] = even_tuple_copy[23]\n    even_tuple_copy[23] = even_tuple_copy[24]\n    even_tuple_copy[24] = even_tuple_copy[25]\n    even_tuple_copy[25] = even_tuple_copy[26]\n    even_tuple_copy[26] = even_tuple_copy[27]\n    even_tuple_copy[27] = even_tuple_copy[28]\n    even_tuple_copy[28] = even_tuple_copy[29]\n    even_tuple_copy[29] = even_tuple_copy[30]\n    even_tuple_copy[30] = even_tuple_copy[31]\n    even_tuple_copy[31] = even_tuple_copy[32]\n    even_tuple_copy[32] = even_tuple_copy[33]\n    even_tuple_copy[33] = even_tuple_copy[34]\n    even_tuple_copy[34] = even_tuple_copy[35]\n    even_tuple_copy[35] = even_tuple_copy[36]\n    even_tuple_copy[36] = even_tuple_copy[37]\n    even_tuple_copy[37] = even_tuple_copy[38]\n    even_tuple_copy[38] = even_tuple_copy[39]\n    even_tuple_copy[39] = even_tuple_copy[40]\n    even_tuple_copy[40] = even_tuple_copy[41]\n    even_tuple_copy[41] = even_tuple_copy[42]\n    even_tuple_copy[42] = even_tuple_copy[43]\n    even_tuple_copy[43] = even_tuple_copy[44]\n    even_tuple_copy[44] = even_tuple_copy[45]\n    even_tuple_copy[45] = even_tuple_copy[46]\n    even_tuple_copy[46] = even_tuple_copy[47]\n    even_tuple_copy[47] = even_tuple_copy[48]\n    even_tuple_copy[48] = even_tuple_copy[49]\n    even_tuple_copy[49] = even_tuple_copy[50]\n    even_tuple_copy[50] = even_tuple_copy[51]\n    even_tuple_copy[51] = even_tuple_copy[52]\n    even_tuple_copy[52] = even_tuple_copy[53]\n    even_tuple_copy[53] = even_tuple_copy[54]\n    even_tuple_copy[54] = even_tuple_copy[55]\n    even_tuple_copy[55] = even_tuple_copy[56]\n    even_tuple_copy[56] = even_tuple_copy[57]\n    even_tuple_copy[57] = even_tuple_copy[58]\n    even_tuple_copy[58] = even_tuple_copy[59]\n    even_tuple_copy[59] = even_tuple_copy[60]\n    even_tuple_copy[60] = even_tuple_copy[61]\n    even_tuple_copy[61] = even_tuple_copy[62]\n    even_tuple_copy[62] = even_tuple_copy[63]\n    even_tuple_copy[63] = even_tuple_copy[64]\n    even_tuple_copy[64] = even_tuple_copy[65]\n    even_tuple_copy[65] = even_tuple_copy[66]\n    even_tuple_copy[66] = even_tuple_copy[67]\n    even_tuple_copy[67] = even_tuple_copy[68]\n    even_tuple_copy[68] = even_tuple_copy[69]\n    even_tuple_copy[69] = even_tuple_copy[70]\n    even_tuple_copy[70] = even_tuple_copy[71]\n    even_tuple_copy[71] = even_tuple_copy[72]\n    even_tuple_copy[72] = even_tuple_copy[73]\n    even_tuple_copy[73] = even_tuple_copy[74]\n    even_tuple_copy[74] = even_tuple_copy[75]\n    even_tuple_copy[75] = even_tuple_copy[76]\n    even_tuple_copy[76] = even_tuple_copy[77]\n    even_tuple_copy[77] = even_tuple_copy[78]\n    even_tuple_copy[78] = even_tuple_copy[79]\n    even_tuple_copy[79] = even_tuple_copy[80]\n    even_tuple_copy[80] = even_tuple_copy[81]\n    even_tuple_copy[81] = even_tuple_copy[82]\n    even_tuple_copy[82] = even_tuple_copy[83]\n    even_tuple_copy[83] = even_tuple_copy[84]\n    even_tuple_copy[84] = even_tuple_copy[85]\n    even_tuple_copy[85] = even_tuple_copy[86]\n    even_tuple_copy[86] = even_tuple_copy[87]\n    even_tuple_copy[87] = even_tuple_copy[88]\n    even_tuple_copy[88] = even_tuple_copy[89]\n    even_tuple_copy[89] = even_tuple_copy[90]\n    even_tuple_copy[90] = even_tuple_copy[91]\n    even_tuple_copy[91] = even_tuple_copy[92]\n    even_tuple_copy[92] = even_tuple_copy[93]\n    even_tuple_copy[93] = even_tuple_copy[94]\n    even_tupl"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return_tuple = []\n    return_tuple.extend(test_tuple)\n    nested_mixed_tuple = tuple(filter(even_fnc, return_tuple))\n    return nested_mixed_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    even_fnc(even_lst, test_tuple) \n    return even_lst \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for tup in test_tuple:\n        if type(tup) is tuple:\n            even_list.append(tup)\n        else:\n            even_list.append(tup)\n    even_list = tuple(even_list)\n    even_fnc(even_list)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = tuple(list(test_tuple[x] for x in range(len(test_tuple)) if x % 2 == 0))\n    even_fnc(even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple)%2==0:\n        even_fnc(test_tuple)\n    else:\n        odd_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Complete this function by creating a new tuple that has just the uneven elements removed.\n    # For example, if the input tuple is (1,2,3), you should return (1,3,2)\n    even_elements = ()\n    for i in test_tuple: \n        if i % 2 == 0:\n            even_elements = even_elements + (i,)\n    return even_fnc(even_elements) \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # base edge = width\n    # height = base edge\n    \n    # 1) Define a function to calculate the surface area of the pyramid\n    # 2) Return the value of function\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s**2\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = 0.0\n    for i in range(s):\n        A = A + b\n    return A\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # try to find area\n    try:\n        area = (4*(b[0] + b[2]))\n        # print('The area is: ',area)\n    except:\n        print('Sorry, please check your input')\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b<1:\n        raise Exception (\"Base edge must be greater than 1\")\n    if s<1:\n        raise Exception (\"Height must be greater than 1\")\n    return b*s*4\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h = b/2\n    area = 0\n    for i in range(s):\n        area += h**2\n        h -= 1\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    Area=b*s*(s-1)\n    return Area\nprint(surface_Area(5,10))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    try:\n        # Get the base edge\n        b = int(b)\n        # Get the height\n        s = int(s)\n        # Base Edge and Height Should be equal\n        assert b == s, \"The base and height must be equal\"\n        # Calculate the perimeter\n        perimeter = 2 * b + 2 * s\n        # Perimeter should be equal\n        assert perimeter == s * b, \"Perimeter Error\"\n        # Calculate the volume\n        volume = b ** 2 * s ** 2\n        # Volume Should be equal\n        assert volume == s * b * s, \"Volume Error\"\n    except AssertionError:\n        # Base edge or height is not a valid number\n        raise\n    except ValueError:\n        # Base edge or height is not a valid number\n        raise\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return 'Dict is empty'\n    else:\n        return 'Dict is not empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<=0:\n        return 0\n    if num==1:\n        return 1\n    return catalan_number(num-1)+catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num+=1\n    def seq_reverse(n,num,i,l):\n        l=l-1\n        if(n-i<num):\n            return 0\n        if(l>0):\n            return seq_reverse(n,num,i,l-1)+seq_reverse(n,num,i,l)\n    l=0\n    if(num==1):\n        return 0\n    if(num<0):\n        return 0\n    return seq_reverse(num,num,0,l)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = 0\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        for i in range(1, num + 1):\n            result = result + (1/catalan_number(i)) * (catalan_number(num - i) * catalan_number(i))\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = 1\n    for i in range(1,num+1):\n        a = a*(i+1)\n    return a\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 2:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        catalan = [0] * (num+1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num+1):\n            catalan[i] = catalan[i-1] + catalan[i-2]\n        return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def find_catalan_numbers(n):\n        x = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121383, 2417998, 532421, 75068, 283452, 123801]\n        return sum(x[:n])\n    \n    return find_catalan_numbers(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 4\n    else:\n        return 3*catalan_number(num-2) + 5*catalan_number(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return(num - 1) + catalan_number(num - 1)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    ly_index = text.find('ly')\n    ly_pos = text[ly_index:]\n    ly_pos = ly_pos.replace('ly','')\n    ly_pos = ly_pos.strip('ly ')\n    ly_pos = ly_pos.split(' ')\n    ly_pos = list(map(lambda x: x.split(' ')[1],ly_pos))\n    ly_pos = list(filter(lambda x: x.isalpha(),ly_pos))\n    ly_pos = list(map(lambda x: x,ly_pos))\n    ly_pos = list(filter(lambda x: len(x)>0,ly_pos))\n    ly_pos = list(map(lambda x: int(x) if x.isalpha() else int(x) - 1,ly_pos))\n    ly_pos = list(filter(lambda x: x >= 0,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: str(x),ly_pos))\n    ly_pos = list(filter(lambda x: x.isdigit(),ly_pos))\n    ly_pos = list(map(lambda x: int(x) if x.isdigit() else int(x) - 1,ly_pos))\n    ly_pos = list(filter(lambda x: x <= len(text) - 1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x+1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly_pos = list(map(lambda x: x-1,ly_pos))\n    ly"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex_ly = r\"(ly|la|ly|l\\w+)(\\s|-\\s)(plural)?(adverb|suffix|ex|suffixer|in)\\s*(plural)?(geo|geography|geojson|geojson|geos|geometry|x|y|geoid|geolocation|geoloc|geolocs|geolocs|geoloc|locations|locations|locations|locations|locations|locations|location|loc|locate|loc|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|locations|lo"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    while True:\n        adverb = text.split(\" \")[-2]\n        if adverb[-1] == \"ly\":\n            adverb = adverb[:-1]\n            adverbs.append(adverb)\n        else:\n            break\n    return adverbs\ndef find_senses(text):\n    '''\n    Write a function to find the first senses ending with s and its positions in a given string.\n    '''\n    senses = []\n    while True:\n        sense = text.split(\" \")[-2]\n        if sense[-1] == \"s\":\n            senses.append(sense)\n        else:\n            break\n    return senses\ndef find_punct(text):\n    '''\n    Write a function to find the first punctuation ending with p and its positions in a given string.\n    '''\n    punct = []\n    while True:\n        punct = text.split(\" \")[-2]\n        if punct[-1] == \"p\":\n            punct = punct[:-1]\n            punct.append(\".\")\n            punct.append(\"!\")\n            punct.append(\"?\")\n            punct.append(\"-\")\n            punct.append(\"+\")\n            punct.append(\"\u201c\")\n            punct.append(\"\u201d\")\n            punct.append(\"\u2018\")\n            punct.append(\"\u2019\")\n            punct.append(\"\u00ab\")\n            punct.append(\"\u00bb\")\n            punct.append(\"\u2019\u2019\")\n            punct.append(\"\u2019\u2018\")\n            punct.append(\"\u00ab\u00bb\")\n            punct.append(\"(\")\n            punct.append(\")\")\n            punct.append(\"-\" + punct[-1])\n            punct.append(\"+\" + punct[-1])\n            punct.append(\"\u201e\" + punct[-1])\n            punct.append(\"\u201c\" + punct[-1])\n            punct.append(\"\u201d\" + punct[-1])\n            punct.append(\"\u2018\" + punct[-1])\n            punct.append(\"\u2019\" + punct[-1])\n            punct.append(\"\u00bb\" + punct[-1])\n            punct.append(\"\u00bb\" + punct[-1])\n            punct.append(\"\u2019\u00ab\" + punct[-1])\n            punct.append(\"\u2019\u2018\" + punct[-1])\n            punct.append(\"\u00ab\" + punct[-1])\n            punct.append(\"(\")\n            punct.append(\")\")\n            punct.append(\"*\" + punct[-1])\n            punct.append(\"+\" + punct[-1])\n            punct.append(\"-\")\n            punct.append(\"-\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"-\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"-\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"(\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"-\")\n            punct.append(\"+\")\n            punct.append(\"+\")\n            punct.append(\"=\" + punct[-1])\n            punct.append(\"*\")\n            punct.append(\"+\")\n            punct.append(\"-\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\"=\" + punct[-1])\n            punct.append(\"*\")\n            punct.append(\"+\")\n            punct.append(\"+\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\"(\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct.append(\"*\")\n            punct.append(\")\")\n            punct"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['ly', 'v', 'd', 'l', 'n','s','sx', 'lx']\n    for i in range(len(adverbs)):\n        if adverbs[i] in text:\n            return adverbs[i], i\n    \n    return '', -1\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'[aeiou].*ly')\n    match = regex.search(text)\n    while match:\n        start = match.start()\n        end = match.end()\n        # Find adverb ending with ly\n        if text[start:end] == 'ly':\n            return text[start:end],start,end\n        else:\n            match = regex.search(text, start+1)\n        \ndef find_first_non_adverb(text):\n    '''\n    Write a function that takes in a string and returns the first non-adverb occurring\n    '''\n    regex = re.compile(r'^(ly|n.+)([aeiou].*)')\n    match = regex.search(text)\n    while match:\n        start = match.start()\n        end = match.end()\n        # Find first non-adverb occurring in the string\n        if text[start:end] == 'n.+':\n            return text[start:end],start,end\n        else:\n            match = regex.search(text, start+1)\n    return None\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if text[-1]!= 'ly':\n        return []\n    adverbs = []\n    i = -1\n    while True:\n        i = text.find('ly', i+1)\n        if i == -1:\n            break\n        adverbs.append((i, text.index('ly', i+1)))\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    pattern = re.compile(r'(?<=[0-9])ly')\n    for i in range(len(text)):\n        if text[i] in ['x', 'X']:\n            adverb_list.append(text[i])\n    for i in range(len(adverb_list)):\n        if i == len(adverb_list) - 1:\n            adverb_list[i] = 'ly'\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    a_adverbs = []\n    result = []\n    for i in range(len(text) - 1):\n        if text[i:i + 2] == 'ly' and text[i + 2:].find('ly')!= -1:\n            a_adverbs.append(text[i:i + 2])\n    # print(a_adverbs)\n    for i in a_adverbs:\n        for j in range(len(i)):\n            if i[j] == 'ly' and j!= 0:\n                result.append(i[j - 1] + i[j])\n    result.sort()\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly$'\n    pattern2 = r'\\bly\\b'\n    adverb_set = {'ay', 'ay', 'is', 'was', 'isn\\'t', 'couldn\\'t', 'can', 'could', 'can\\'t', 'can\\'t\\'t', 'didn\\'t', 'didnt', 'didn\\'t', 'doesn\\'t', 'doesnt', 'doesn\\'t\\'t', 'didnt\\'t', 'didn\\'t\\'t', 'didnt\\'t\\'t', 'didnt\\'t\\'t', 'didn\\'t\\'t', 'didn\\'t\\'t\\'t', 'didn\\'t\\'t\\'t', 'didn\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\'t\\'t', 'didnt\\'t\\"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex_ly = re.compile(r'ly$')\n    regex_ly_pos = re.compile(r'ly$|\\(ly$|ly$|ly$')\n    pos_ly_pos = re.compile(r'ly$|ly$')\n    pos_ly = re.compile(r'ly')\n    pos_ly_list = []\n    is_ly = True\n    is_ly_pos = False\n    is_ly_pos2 = False\n    is_ly2 = False\n    is_ly2_pos = False\n    is_ly2_pos2 = False\n    for c in text:\n        if c in 'aeiouAEIOU':\n            is_ly = False\n            is_ly_pos = False\n        elif c in 'ly':\n            is_ly = True\n        elif c in 'ly') and not is_ly:\n            is_ly2 = False\n            is_ly2_pos2 = False\n            is_ly_pos2 = True\n        elif c in 'ly') and is_ly:\n            if not is_ly_pos2:\n                pos_ly = regex_ly_pos.search(text)\n                if pos_ly:\n                    is_ly_pos = True\n            else:\n                is_ly2_pos2 = True\n        elif c in 'ly') and is_ly2:\n            pos_ly = regex_ly.search(text)\n            if pos_ly:\n                is_ly_pos = True\n    return [pos_ly.start() if pos_ly else 0, pos_ly.end() if pos_ly else 0]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n_items = 0\n    heap = []\n    heapq.heapify(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    count=0\n    for item in items:\n        if count==n:\n            break\n        heapq.heappush(heap,item)\n        count+=1\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,i[1])\n    items=sorted(items,key=lambda x:x[1])\n    \n    return heapq.heappop(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # write your code here\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap,(-items[i][1],items[i][0]))\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    while len(heap) < n:\n        item = heapq.heappop(heap)\n        heapq.heappush(heap,[item,len(items)-item])\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap of n items and compare them to the capacity\n    h = [(v,k) for k,v in items]\n    heapq.heapify(h)\n    while h:\n        v = heapq.heappop(h)\n        if v[1] > n:\n            return v[0]\n    return None\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items=sorted(items,key=lambda k: k['price'],reverse=True)\n    numbers_to_return=[]\n    for i in range(n):\n        numbers_to_return.append(items[i])\n    return numbers_to_return\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][2], items[i][1], items[i][0]))\n    heapq.heapify(heap)\n    return heapq.nlargest(n, heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Item value function\n    def item_val(item):\n        return item[1]\n    # Recurrence tree (heap)\n    item_heap = []\n    for item in items:\n        heapq.heappush(item_heap,(item_val(item),item))\n    # Return the top n\n    return heapq.nlargest(n,item_heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=itemgetter(2))\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 1:\n        return l\n    else:\n        return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_1 = [l[i:i + n] for i in range(0, len(l), n)]\n    return l_1\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # write your code here\n    new_list = []\n    l = l[:n]\n    new_list.append(l[:])\n    l = l[n:]\n    new_list.append(l)\n    return new_list\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    ret = []\n    while i < len(l):\n        ret.append(l[i:i+n])\n        i += n\n    return ret\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    l = l[:n] + l[n+1:]\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_l = []\n    for i in l:\n        new_l.append(i)\n    new_l.append(l[0])\n    return new_l\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # YOUR CODE HERE\n    tuple_list = []\n    for x in listx:\n        tuple_list.append(x)\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for element in listx:\n        tuplex = tuplex + (element,)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    for i in range(len(listx)):\n        listx[i] = tuple(listx[i])\n    return listx\n    \n    \ndef list_to_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    for i in range(len(listx)):\n        listx[i] = tuple(listx[i])\n    return listx\n    \n    \ndef tuple_to_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    for i in range(len(tuplex)):\n        tuplex[i] = list(tuplex[i])\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listt = []\n    for i in range(len(listx)):\n        listt.append(listx[i])\n    return tuple(listt)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = []\n    for i in listx:\n        tuple_list.append(i)\n    return tuple(tuple_list)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in range(len(listx)):\n        tup = tup + (listx[i])\n    return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    import numpy as np\n    \n    # There are 2 ways to solve this problem\n    # 1. sort the list and then return the difference\n    # 2. get the diff as a number and store the result as a variable\n    \n    largest_num = nums[0]\n    smallest_num = nums[0]\n    smallest_val = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > largest_num:\n            largest_num = nums[i]\n        elif nums[i] < smallest_num:\n            smallest_num = nums[i]\n            smallest_val = nums[i]\n    return smallest_num - smallest_val\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list\n    nums.sort()\n    # if a negative number is present in the list return -1\n    if nums[-1] < 0:\n        return abs(nums[-1])\n    # else find the last number\n    elif nums[0] < 0:\n        return nums[0]\n    # else find the first number\n    elif nums[0] > 0:\n        return nums[0]\n    else:\n        # if there are less than 2 numbers, return -1\n        if len(nums) < 2:\n            return -1\n        else:\n            # take the first number as max\n            # if the number is -1, return -1\n            if nums[0] == -1:\n                return -1\n            # else, find the first number as max\n            elif nums[1] == -1:\n                return nums[1]\n            # if the number is bigger than the max, return -1\n            else:\n                return nums[1] - nums[0]\n            "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for x in nums:\n        smallest = min(x, smallest)\n        largest = max(x, largest)\n    return largest-smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0] - nums[0]\n    \n    smallest_diff = float('inf')\n    for num in nums:\n        if smallest_diff > num - smallest_diff:\n            smallest_diff = num - smallest_diff\n    \n    return smallest_diff"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    newlist = []\n    for num in nums:\n        newlist.append(num)\n    newlist.sort()\n    smallest_diff = newlist[-1] - newlist[0]\n    biggest_diff = newlist[-1] - newlist[0]\n    return smallest_diff, biggest_diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(nums[i] - nums[i-1])\n    return res\n    \nprint(big_diff([2,3,5,6,8,10,15,16]))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = max(nums)\n    largest = min(nums)\n    return (smallest - largest)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # modify the code to return a list of the difference of smallest and largest numbers\n    # example: [3,3,2,3] => [-3,2,-2,3]\n    # sort the list, so it sorts in place and the program doesnt matter\n    # nums = sorted(nums)\n    \n    # iterate over the list\n    for i in range(len(nums)):\n        nums[i] = abs(nums[i])\n    # nums.sort()\n    # return nums\n    return nums[0] + nums[1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    my_list = []\n    for i in range(len(nums)):\n        my_list.append(nums[i] - min(nums[i:]))\n    return min(my_list)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num_a = a\n    num_b = b\n    sq_a = num_a**2\n    sq_b = num_b**2\n    ans = []\n    for i in range(num_a + num_b):\n        if sq_a == sq_b:\n            ans.append(i)\n        elif sq_a < sq_b:\n            ans.append(i)\n            sq_a += num_a\n        else:\n            ans.append(i)\n            sq_b += num_b\n    return ans\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return int(math.sqrt(a * b))\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # the following code will return\n    # 1,1,1,1,1,1,1,1\n    # if the given numbers are 0\n    # or 1\n    # the squares will be the same.\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = a + b\n    m = (n-1) // 2\n    while m <= n:\n        if n % m == 0:\n            print(m)\n            return 1\n        else:\n            m = m + 2\n    print(\"NONE\")\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return perfect_squares(a - 1, b)\n    return perfect_squares(a, b - 1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Test cases\n    if (a < 0 or b < 0 or a >= b):\n        return False\n    # Base case\n    if (a == b):\n        return True\n    if (b % a == 0):\n        return False\n    # Recursion\n    return perfect_squares(a, b//a) or perfect_squares(a//b, b%a)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (b-a)*(b-a)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # find x2 + b + 1 for x1\n    b = b + 1\n    x1 = a\n    x2 = a + 1\n    count = 0\n    while x2 <= b:\n        if x2 == x1:\n            count += 1\n            break\n        if x1 * x2 == a:\n            return count\n        else:\n            x1 += 1\n        x2 += 1\n    return count\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #perfect square formula\n    sum = 0\n    for i in range(a,b+1):\n        if (i**2) % i == 0:\n            sum += 1\n            if sum >= 10:\n                return True\n    return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for n in range(2, int(sqrt(a)) + 1):\n        if pow(n, 2, n) == a and pow(n, 2, b) == b:\n            print(n, \"is perfect square\")\n            return\n    print(\"Not a perfect square\")\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    from math import cos,sin\n    phi=cmath.polar(x,y)\n    theta=cmath.acos(y)/cmath.sqrt(y**2+x**2)\n    xr=cos(theta)*cos(phi)\n    yr=sin(theta)*cos(phi)\n    return xr,yr\ndef polar_rect_xy(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*2/3)\n    y=yr*sin(cmath.pi*2/3)\n    return x,y\ndef polar_rect_xy_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*3/4)\n    y=yr*sin(cmath.pi*3/4)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_xy_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*4/5)\n    y=yr*sin(cmath.pi*4/5)\n    z=xr/y\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*5/6)\n    y=yr*sin(cmath.pi*5/6)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*6/7)\n    y=yr*sin(cmath.pi*6/7)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*7/8)\n    y=yr*sin(cmath.pi*7/8)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*8/9)\n    y=yr*sin(cmath.pi*8/9)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*9/10)\n    y=yr*sin(cmath.pi*9/10)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*10/11)\n    y=yr*sin(cmath.pi*10/11)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*11/12)\n    y=yr*sin(cmath.pi*11/12)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*12/13)\n    y=yr*sin(cmath.pi*12/13)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*13/14)\n    y=yr*sin(cmath.pi*13/14)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*14/15)\n    y=yr*sin(cmath.pi*14/15)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*15/16)\n    y=yr*sin(cmath.pi*15/16)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*16/17)\n    y=yr*sin(cmath.pi*16/17)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*17/18)\n    y=yr*sin(cmath.pi*17/18)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*18/19)\n    y=yr*sin(cmath.pi*18/19)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*19/20)\n    y=yr*sin(cmath.pi*19/20)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*20/21)\n    y=yr*sin(cmath.pi*20/21)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rect_x(xr,yr):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*21/22)\n    y=yr*sin(cmath.pi*21/22)\n    z=xr/y\n    return x,y,z\ndef polar_rect_xy_x_z(xr,yr,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=xr*cos(cmath.pi*22/23)\n    y=yr*sin(cmath.pi*22/23)\n    z=z*(xr-x)/(yr-yr)\n    return x,y,z\ndef polar_rec"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.rect(x).real\n    y = cmath.rect(y).imag\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = abs(cmath.polar(x))\n    rad = angle * math.pi\n    return (y*math.cos(rad),y*math.sin(rad))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Point to the left\n    x_c = x\n    # Point to the right\n    y_c = y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return (x[0]*x[2]-x[1]*x[2]*x[0],y[0]*y[2]-y[1]*y[2]*y[0])\ndef polar_cart(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[0]+x[2]*y[1]\ndef polar_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[2]-x[2]*y[1]\ndef polar_cart_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[2]+x[2]*y[1]\ndef polar_ang(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[1]-x[1]*y[0]\ndef polar_ang_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[0]+x[0]*y[1]\ndef polar_cat_ang(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[2]-x[2]*y[1]\ndef polar_rto_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_rto_cart(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_rto_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[2]-x[2]*y[1]\ndef polar_rto_ang(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_rto_ang_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[2]+x[2]*y[1]\ndef polar_cart_rto(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[1]-x[1]*y[0]\ndef polar_cart_rto_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_cat_rto(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[0]-x[0]*y[1]\ndef polar_cat_rto_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[2]+x[2]*y[1]\ndef polar_cart_cat_rto(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_cart_cat_rto_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]+x[1]*y[2]*y[0]\ndef polar_ang_rto(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[1]-x[1]*y[0]\ndef polar_ang_rto_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_ang_cat_rto(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[0]-x[0]*y[1]\ndef polar_ang_cat_rto_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[1]*y[2]+x[2]*y[1]\ndef polar_rto_rcat(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_rto_rcat_cat(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]-x[1]*y[2]*y[0]\ndef polar_rto_cat_rcat(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.rect(y)\n    return x[0]*y[2]+x[1]*y[2]"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    \n    if x < 0 or x > 2*PI:\n        raise ValueError('x coordinate is out of range.')\n    if y < 0 or y > 2*PI:\n        raise ValueError('y coordinate is out of range.')\n    return (x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_rect_to_arctan(x,y):\n    '''\n    Write a function to convert polar coordinates to arctan coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_rect_to_sec(x,y):\n    '''\n    Write a function to convert polar coordinates to arcsec coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_sec_to_arctan(x,y):\n    '''\n    Write a function to convert polar coordinates to arctan coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_sec_to_sec(x,y):\n    '''\n    Write a function to convert polar coordinates to arcsec coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_sec_to_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to arcsec coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_rad_to_arctan(x,y):\n    '''\n    Write a function to convert polar coordinates to arcsec coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_rad_to_sec(x,y):\n    '''\n    Write a function to convert polar coordinates to arcsec coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_sec_to_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to arcsec coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_rad_to_sec(x,y):\n    '''\n    Write a function to convert polar coordinates to arcsec coordinates.\n    '''\n    return cmath.polar(x,y)\ndef mag(p):\n    '''\n    Write a function to calculate the magnitude of a vector.\n    '''\n    return math.sqrt(p[0]**2+p[1]**2)\ndef mag_dist(a,b):\n    '''\n    Write a function to calculate the magnitude of a vector.\n    '''\n    return (mag(a)**2+mag(b)**2)**(1/2)\ndef angle(a,b):\n    '''\n    Write a function to calculate the angle between the two vectors.\n    '''\n    return math.acos((mag(a)**2+mag(b)**2-mag(a)*mag(b))/((2*mag(a)*mag(b))**(1/2)))\ndef angle_dist(a,b):\n    '''\n    Write a function to calculate the angle between the two vectors.\n    '''\n    return math.acos((mag(a)**2+mag(b)**2-mag(a)*mag(b))/(mag(a)*mag(b)))\ndef local_rad(a,b):\n    '''\n    Write a function to calculate the local radius of a vector.\n    '''\n    return mag_dist(a,b)\ndef local_rad_dist(a,b):\n    '''\n    Write a function to calculate the local radius of a vector.\n    '''\n    return mag_dist(a,b)**(1/2)\ndef local_angle(a,b):\n    '''\n    Write a function to calculate the local angle between the two vectors.\n    '''\n    return angle(a,b)\ndef local_angle_dist(a,b):\n    '''\n    Write a function to calculate the local angle between the two vectors.\n    '''\n    return angle(a,b)**(1/2)\ndef local_area(a,b):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return local_rad_dist(a,b)**(1/2)\ndef local_area_dist(a,b):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return local_rad_dist(a,b)**(1/2)\ndef normal_to_vector(n):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return (n[0],-n[1])\ndef normal_to_direction(n):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return normal_to_vector(n)[::-1]\ndef vector_to_normal(v):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return (v[0],-v[1])\ndef vector_to_direction(v):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return vector_to_normal(v)[::-1]\ndef normal_to_angle(n):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return angle_dist(n,normal_to_direction(n))\ndef angle_to_normal(a):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return normal_to_direction(a)\ndef normal_to_vector_and_angle(n,a):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return (n[0],-n[1])+normal_to_direction(a)\ndef normal_to_angle_and_vector(n,a):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return (n[0],-n[1])+normal_to_direction(a)\ndef angle_to_normal_and_vector(a,n):\n    '''\n    Write a function to calculate the normal vector of a vector.\n    '''\n    return normal_to_direction(n)+normal_to_vector_and_angle(a,n)\ndef local_area_and_normal_to_direction(a,n):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return ((local_rad_dist(n,a)**2)+(local_area_dist(n,a)**2))**(1/2)\ndef local_area_and_normal_to_angle(a,n):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return ((local_rad_dist(n,a)**2)+(local_area_dist(n,a)**2))**(1/2)\ndef local_area_and_normal_to_vector(a,n):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return local_rad_dist(n,a)**2\ndef local_area_and_normal_to_vector_and_angle(a,n):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return local_rad_dist(n,a)**2+local_area_dist(n,a)**2\ndef local_area_and_normal_to_vector_and_direction(a,n):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return local_rad_dist(n,a)**2+local_area_dist(n,a)**2\ndef local_area_and_normal_to_angle_and_vector(a,n):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return local_rad_dist(n,a)**2+local_area_dist(n,a)**2+local_area_and_normal_to_direction(a,n)\ndef local_area_and_normal_to_angle_and_vector_and_direction(a,n):\n    '''\n    Write a function to calculate the local area of a vector.\n    '''\n    return local_rad_dist(n,a)**2+local_area_dist(n,a)**2+local_area_and_normal_to_direction(a,n)\ndef local_area_and_normal_to_angle_an"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x/2\n    theta = cmath.phase(x)\n    phi = cmath.phase(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    n = x**2 + y**2\n    s = math.sqrt(n)\n    x_0 = (x-s)/2\n    y_0 = (y-s)/2\n    x_1 = (x+s)/2\n    y_1 = (y+s)/2\n    return {'x_0': x_0, 'x_1': x_1, 'y_0': y_0, 'y_1': y_1}\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    second = newList[-1]\n    newList[0] = second\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # The code will run as long as the user inputs an element in the list.\n    while True:\n        # This will ask the user what the element they've input is.\n        element = input('Enter an element in the list: ')\n        # As long as the user inputs an element in the list,\n        # the user will receive a true value if the element is valid, and\n        # a false value if it's not.\n        if element!= 'done':\n            # We'll check to see if the user's input was actually an element.\n            if element not in newList:\n                # If the user doesn't have an element, we'll send the user a message\n                # telling them they entered an invalid element.\n                print('Invalid element')\n                # Then, we'll prompt the user to re-enter the element value\n                # and repeat the process.\n                continue\n            else:\n                # If the user entered an element, we'll swap it with the\n                # element from the list.\n                newList[0], newList[-1] = newList[-1], newList[0]\n                # Then, we'll prompt the user to re-enter the element value\n                # and repeat the process.\n                continue\n        # If the user inputs the element 'done', we'll stop the loop and return the\n        # list.\n        break\n    # Once the loop has stopped, the function returns a true value.\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Create a temporary list.\n    temp_list = []\n    # Iterate through the elements of the list.\n    for i in range(len(newList)):\n        # Append the element to the temporary list.\n        temp_list.append(newList[i])\n        # Append the element to the original list.\n        newList[i] = temp_list[i]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop(0))\n    newList.append(newList.pop())\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # TODO: Write your code here\n    x = newList.pop(0)\n    y = newList.pop(0)\n    newList.insert(0,y)\n    newList.insert(0,x)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list=[]\n    for element in range(len(newList)):\n        new_list.append(newList[element][::-1])\n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = newList[1:len(newList)-1]\n    new_list.reverse()\n    new_list.append(newList[-1])\n    new_list.remove(newList[0])\n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # swap first and last element\n    newList[0], newList[-1] = newList[-1], newList[0] \n    # return the list\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"Swap: \",newList)\n    for index in range(len(newList)-1):\n        temp=newList[index]\n        newList[index]=newList[index+1]\n        newList[index+1]=temp\n    print(\"After Swapping\",newList)\n    \nlist1=[5,2,4,9,8]\nswap_List(list1)\nprint(\"After Swapping: \",list1)"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[0], newList[-1]\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1,k+1):\n        result = result * (n-i+1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    l = len(k)\n    if l == 0:\n        return 1\n    elif l == 1:\n        return n\n    else:\n        return n * binomial_Coeff(n - k[0],k[1:])\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math\n    # n = int(n)\n    n = n.strip()\n    n = n.strip()\n    # k = int(k)\n    k = k.strip()\n    k = k.strip()\n    # if k == \"\":\n    #     k = 1\n    #     n = int(n)\n    #     n = n.strip()\n    #     n = n.strip()\n    #     k = int(k)\n    #     k = k.strip()\n    #     k = k.strip()\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n<0):\n        n = -n\n    if(k<0):\n        k = -k\n    if(n<k):\n        return 0\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i*binomial_Coeff(n-i,k))\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 1:\n        return 1\n    else:\n        return (n+k*binomial_Coeff(n-1,k-1))\n    \ndef binomial_Coeff_2(n,k):\n    '''\n    Write a python function to calculate the 2-dimensional sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 1:\n        return n\n    else:\n        return (n+k*binomial_Coeff_2(n-1,k-1))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n * k * (k + 1) // 2\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return n*binomial_Coeff(n,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    x = 1\n    x = n*x\n    while(k > 0):\n        x = x*(n-k)\n        k = k - 1\n    return x\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    #Use naive approach\n    #if the order of the binomial co-efficients does not match with the given number of samples, then we have to change the order of the binomial co-efficients\n    if n>k:\n        nk = n//k+1\n        C = 1\n        while nk<k+1:\n            C = C*(n//k)\n            nk+=1\n        return C\n    elif n==k:\n        return 1\n    elif n>k:\n        return 0\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return ((n-k) * (n-1) * (n-2) * (n-k-1))\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip[0] == '0':\n        return ip\n    return ip[1:]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'\\d+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('\\.', '', ip)\n    for i in range(len(ip)):\n        if ip[i] == '0':\n            ip = ip[:i] + ip[i+1:]\n            break\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i = 0\n    while ip[i] == '0':\n        i += 1\n    return ip[i:]\ndef removeport(port):\n    '''\n    Write a function to remove a number of ports from an ip address.\n    '''\n    ip = ipv4(port)\n    return removezero_ip(ip)\ndef removetrailingzero(ip):\n    '''\n    Write a function to remove a zero from the end of an ip address.\n    '''\n    if ip[-1] == \"0\":\n        ip = ip[:-1]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.split('.')[0]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    res = re.sub(r'^0+', '', ip)\n    return res\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$','',ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) > 7:\n        ip = ip[:7]\n        if ip == \"255.255.255.255\":\n            ip = \"0\"\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_ip = 0\n    ip = ip.split('.')\n    if ip[0] == '':\n        zero_ip = ip.pop(0)\n        while ip[0] == '':\n            ip.pop(0)\n    return ip[0] + '.' + ip[1] + '.' + ip[2] + '.' + ip[3] + '.' + ip[4] + '.' + ip[5] + '.' + ip[6] + '.' + ip[7] + '.' + ip[8] + '.' + ip[9] + '.' + zero_ip + '.' + ip[10]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        ip = ip.strip()\n        if len(ip) == 0:\n            return None\n        if ip[0] == '0':\n            return ip\n        else:\n            return None\n    except:\n        return None\n    '''\n    Write a function to split an ip address into sub-domains, such as:\n    \"192.168.1.100\" --> \"192.168.1.0/24\"\n    '''\ndef split_ip(ip):\n    try:\n        ip = ip.strip()\n        if len(ip) == 0:\n            return None\n        elif ip[0] == '.':\n            return None\n        elif ip[0] == '0':\n            return None\n        else:\n            if len(ip)!= 1:\n                return None\n            else:\n                return ip\n    except:\n        return None\ndef split_name(name):\n    try:\n        name = name.strip()\n        if len(name) == 0:\n            return None\n        elif len(name) == 1:\n            return None\n        else:\n            if len(name)!= 2:\n                return None\n            else:\n                return name\n    except:\n        return None\ndef change_name(name):\n    try:\n        name = name.strip()\n        if len(name) == 0:\n            return None\n        elif len(name) == 1:\n            return None\n        else:\n            if len(name)!= 2:\n                return None\n            else:\n                return name\n    except:\n        return None\ndef is_ip(string):\n    '''\n    Check if an string is a valid ip address or not.\n    '''\n    try:\n        string = string.strip()\n        if re.match('^(((?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))*$', string):\n            return True\n        else:\n            return False\n    except:\n        return None\ndef is_ip_v4(string):\n    '''\n    Check if an string is a valid ip address or not.\n    '''\n    try:\n        string = string.strip()\n        if re.match('^(((?:(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))*$', string):\n            return True\n        else:\n            return False\n    except:\n        return None\ndef is_ip_v6(string):\n    '''\n    Check if an string is a valid ip address or not.\n    '''\n    try:\n        string = string.strip()\n        if re.match('^(((?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-9a-fA-F]{0,4}(?:\\1[0-9a-fA-F]{0,4}){1,2})|((?:(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{0,4}[0-"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_list = []\n    even_odd = []\n    for i in range(0,len(list1)):\n        if (i%2) == 0:\n            even_odd_list.append(list1[i])\n        else:\n            even_odd.append(list1[i])\n    return even_odd_list, even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        raise ValueError('List is empty.')\n    if len(list1) % 2 == 0:\n        diff = list1[0]\n    else:\n        diff = list1[-1]\n    diff = list1[0] - list1[1]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    diff = []\n    odd = []\n    even = []\n    \n    for i in range(0, len(list1), 2):\n        if i%2 == 0:\n            diff.append(list1[i])\n        else:\n            even.append(list1[i])\n    \n    return diff, odd, even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even_odd = 0\n    for number in list1:\n        if number % 2 == 0:\n            first_even_odd += 1\n    return first_even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    length = len(list1)\n    i = 0\n    \n    while i < length:\n        if i % 2 == 0:\n            list1[i] = list1[i] + list1[i+1]\n            i = i + 1\n        else:\n            list1[i] = list1[i] - list1[i+1]\n            i = i + 1\n    return list1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i%2 == 0:\n            list2.append(i)\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list=[]\n    for i in range(0,len(list1)):\n        if list1[i]%2==0:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = 0\n    even_num = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num, odd_num\n    \ndef diff_even_odd2(list2):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = 0\n    even_num = 0\n    for i in range(len(list2)):\n        if list2[i] % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num, odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    count = 0\n    for i in list1:\n        if count%2 == 0:\n            even_odd.append(i)\n        else:\n            even_odd.append(i)\n        count += 1\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    cnt = 0\n    # convert string to binary\n    arr = [int(x) for x in str1]\n    i = 0\n    j = 0\n    # find min number of swaps\n    while j < len(arr):\n        if arr[i]!= arr[j]:\n            cnt += 1\n            # swap the two numbers\n            arr[i],arr[j] = arr[j],arr[i]\n            j += 1\n        j += 1\n        i += 1\n    return cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (str1[0] == str2[0]) : \n        return 0\n    #I have to print out the string of length 1 instead of 2 for some reason\n    #string of length 1\n    l = []\n    for char in str1 :\n        l.append(char)\n    for char in str2 :\n        l.append(char)\n    count = 0\n    i = 0\n    while (i < len(str1) and i < len(str2)) :\n        if str1[i] == str2[i] :\n            i = i + 1\n            continue\n        else :\n            if str1[i] == \"1\" :\n                str2[i] = \"0\"\n                count = count + 1\n            else :\n                str1[i] = \"1\"\n                count = count + 1\n        i = i + 1\n    return count\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    cnt = 0\n    for i in range(len(str1)) : \n        for j in range(i,len(str1)) : \n            if str1[i]!= str1[j] : \n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    #TODO: make this function faster by only performing 1 iteration and returning 0 if len(str1) == 0 or len(str2) == 0\n    \n    str1 = str(bin(int(str1,2)))[2:]\n    str2 = str(bin(int(str2,2)))[2:]\n    \n    if len(str1)!= len(str2):\n        return 0\n    \n    count = 0\n    \n    for x in range(len(str1)):\n        if str1[x] == str2[x]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    \n    # check to see if the strings are the same\n    #check if the strings are the same\n    \n    # check if the strings are the same\n    \n    # print out the count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m,n=len(str1),len(str2)\n    return m if n==m else min(min_Swaps(str1,str2),min_Swaps(str1[1:],str2[1:]))\n    \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m,n=len(str1),len(str2)\n    return m if n==m else max(max_Swaps(str1,str2),max_Swaps(str1[1:],str2[1:]),m+1)\n    \ndef split_func(str1,str2) : \n    '''\n    Write a python function to find the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m,n=len(str1),len(str2)\n    return m if n==m else min(split_func(str1,str2),min_Swaps(str1,str2))\n    \ndef main() : \n    '''\n    Function to convert binary strings into an integer.\n    '''\n    s1,s2=input().split()\n    s1=int(s1,2)\n    s2=int(s2,2)\n    print(min_Swaps(s1,s2))\n    print(max_Swaps(s1,s2))\n    print(split_func(s1,s2))\n    \nif __name__ == \"__main__\": \n    main()\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n    #raise NotImplementedError\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list[0]) + sys.getsizeof(tuple_list[1]) + sys.getsizeof(tuple_list[2]) + sys.getsizeof(tuple_list[3])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length = len(tuple_list)\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        return length * 8\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            print(f'{tuple_list[i][j]}', end =' ')\n        print()\n    print()\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #Your code goes here.\n    return (len(tuple_list))\n    \ndef tuple_in_memory(tuple_list):\n    '''\n    Write a function to find the number of bytes in the given tuple.\n    '''\n    #Your code goes here.\n    return len(tuple_list)\n    \ndef tuple_hash(tuple_list):\n    '''\n    Write a function to hash the given tuple.\n    '''\n    #Your code goes here.\n    return hash(tuple_list)\n    \ndef tuple_equal(tuple_list):\n    '''\n    Write a function to check if the given tuple is equal to the hash of the hash of the tuple.\n    '''\n    #Your code goes here.\n    return hash(tuple_list) == hash(tuple_list)\n    \ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_compare(tuple_list):\n    '''\n    Write a function to compare the tuple to the hash of the tuple.\n    '''\n    #Your code goes here.\n    return tuple_list == tuple_list\n    \ndef tuple_swap(tuple_list):\n    '''\n    Write a function to swap the first tuple in the tuple.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_generate(tuple_list):\n    '''\n    Write a function to generate a random tuple.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_remove(tuple_list):\n    '''\n    Write a function to remove an element from the tuple.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_to_string(tuple_list):\n    '''\n    Write a function to print the elements of a tuple.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_add(tuple_list):\n    '''\n    Write a function to add an element to the tuple.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_contains(tuple_list, item):\n    '''\n    Write a function to check if a tuple contains a given item.\n    '''\n    #Your code goes here.\n    return item in tuple_list\n    \ndef tuple_remove_item(tuple_list, item):\n    '''\n    Write a function to remove an element from the tuple and return it.\n    '''\n    #Your code goes here.\n    return tuple_list.pop(item)\n    \ndef tuple_remove_last_item(tuple_list):\n    '''\n    Write a function to remove the last item of a tuple.\n    '''\n    #Your code goes here.\n    return tuple_list.pop()\n    \ndef tuple_length(tuple_list):\n    '''\n    Write a function to find the length of the tuple.\n    '''\n    #Your code goes here.\n    return len(tuple_list)\n    \ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the elements of a tuple.\n    '''\n    #Your code goes here.\n    return tuple_list[::-1]\n    \ndef tuple_split(tuple_list):\n    '''\n    Write a function to split a tuple into a list.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_sum(tuple_list):\n    '''\n    Write a function to sum the given tuple.\n    '''\n    #Your code goes here.\n    return sum(tuple_list)\n    \ndef tuple_bool(tuple_list):\n    '''\n    Write a function to check if a tuple is boolean.\n    '''\n    #Your code goes here.\n    return len(tuple_list) == 2\n    \ndef tuple_getitem(tuple_list, index):\n    '''\n    Write a function to get the given tuple index.\n    '''\n    #Your code goes here.\n    return tuple_list[index]\n    \ndef tuple_slice(tuple_list):\n    '''\n    Write a function to return a tuple sliced from a given tuple.\n    '''\n    #Your code goes here.\n    return tuple_list[1:3]\n    \ndef tuple_str(tuple_list):\n    '''\n    Write a function to return the given tuple as a string.\n    '''\n    #Your code goes here.\n    return ''.join(tuple_list)\n    \ndef tuple_len(tuple_list):\n    '''\n    Write a function to find the length of a tuple.\n    '''\n    #Your code goes here.\n    return len(tuple_list)\n    \ndef tuple_hash(tuple_list):\n    '''\n    Write a function to hash the given tuple.\n    '''\n    #Your code goes here.\n    return hash(tuple_list)\n    \ndef tuple_hash(tuple_list):\n    '''\n    Write a function to hash the given tuple.\n    '''\n    #Your code goes here.\n    return hash(tuple_list)\n    \ndef tuple_equal(tuple_list):\n    '''\n    Write a function to check if the given tuple is equal to the hash of the hash of the tuple.\n    '''\n    #Your code goes here.\n    return hash(tuple_list) == hash(tuple_list)\n    \ndef tuple_compare(tuple_list):\n    '''\n    Write a function to compare the tuple to the hash of the hash of the tuple.\n    '''\n    #Your code goes here.\n    return hash(tuple_list) == hash(tuple_list)\n    \ndef tuple_add_second(tuple_list):\n    '''\n    Write a function to add an element to the tuple.\n    '''\n    #Your code goes here.\n    return tuple_list + tuple_list\n    \ndef tuple_tuple_append(tuple_list):\n    '''\n    Write a function to add an element to the tuple.\n    '''\n    #Your code goes here.\n    return tuple_list + tuple_list\n    \ndef tuple_tuple_extend(tuple_list):\n    '''\n    Write a function to add an element to the tuple.\n    '''\n    #Your code goes here.\n    return tuple_list + tuple_list\n    \ndef tuple_string_to_list(tuple_list):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_to_list(tuple_list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_list_to_string(tuple_list):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_list_to_string(tuple_list):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_int_to_string(tuple_list):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_int_to_string(tuple_list):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_int_to_string(tuple_list):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_int_to_string(tuple_list):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #Your code goes here.\n    return tuple_list\n    \ndef tuple_str_to"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Insert your code here\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    return arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left, right = 0, len(arr1) - 1\n    found = False\n    while not found:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr2[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k < 0:\n        return None\n    \n    if arr1 is None or arr2 is None or len(arr1) == 0 or len(arr2) == 0:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] > arr2[j]:\n            i += 1\n        elif arr1[i] < arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # First find the mid point\n    p1 = 0\n    p2 = len(arr1)-1\n    \n    while p1 <= p2:\n        # If mid point is smaller than arr1 or arr2,\n        # pick it and move to next index\n        if arr1[p1] > arr2[p2]:\n            p1 += 1\n        elif arr1[p1] < arr2[p2]:\n            p2 -= 1\n        # If there is no mid point, then move p1\n        # to the right boundary to get next mid point\n        else:\n            p1 += 1\n    return arr1[p1]"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def get_kth(arr1, arr2, k):\n        n = len(arr1)\n        k -= 1\n        for i in range(n):\n            if arr1[i] > arr2[k]:\n                return arr2[i]\n            elif arr1[i] < arr2[k]:\n                return arr1[i]\n        return arr2[k]\n    \n    return get_kth(arr1, arr2, k)\n    \ndef merge_sort(arr):\n    '''\n    Takes a sorted array arr as an argument and returns the sorted array.\n    '''\n    def merge_sort_rec(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort_rec(left)\n        right = merge_sort_rec(right)\n        return merge(left, right)\n        \n    def merge(left, right):\n        result = []\n        l = len(left)\n        r = len(right)\n        i = 0\n        j = 0\n        while i < l and j < r:\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        if i < l:\n            result += left[i:]\n        elif j < r:\n            result += right[j:]\n        return result\n        \n    return merge_sort_rec(arr)\n    \ndef merge_sort(arr):\n    '''\n    Takes a sorted array arr as an argument and returns the sorted array.\n    '''\n    def merge_sort_rec(arr):\n        def helper(left, right):\n            if len(left) == 0 or len(right) == 0:\n                return\n            if left[0] <= right[0]:\n                return\n            mid = (left[0] + right[0]) // 2\n            left_part = arr[:mid]\n            right_part = arr[mid:]\n            left_part = merge_sort_rec(left_part)\n            right_part = merge_sort_rec(right_part)\n            return merge(left_part, right_part)\n        return helper(arr, arr)\n        \n    def merge(left, right):\n        result = []\n        l = len(left)\n        r = len(right)\n        i = 0\n        j = 0\n        while i < l and j < r:\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        if i < l:\n            result += left[i:]\n        elif j < r:\n            result += right[j:]\n        return result\n        \n    return merge_sort_rec(arr)\n    \ndef merge_sort(arr):\n    '''\n    Takes a sorted array arr as an argument and returns the sorted array.\n    '''\n    def merge_sort_rec(arr):\n        def helper(arr):\n            if len(arr) <= 1:\n                return arr\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n            left = merge_sort_rec(left)\n            right = merge_sort_rec(right)\n            return merge(left, right)\n        \n        def merge(left, right):\n            result = []\n            l = len(left)\n            r = len(right)\n            i = 0\n            j = 0\n            while i < l and j < r:\n                if left[i] <= right[j]:\n                    result.append(left[i])\n                    i += 1\n                else:\n                    result.append(right[j])\n                    j += 1\n            if i < l:\n                result += left[i:]\n            elif j < r:\n                result += right[j:]\n            return result\n        \n        return helper(arr)\n        \n    return merge_sort_rec(arr)\n    \ndef main():\n    arr = [6,1,4,3,2,5,8,10,7,9,11]\n    arr = merge_sort(arr)\n    print(arr)\n    print(find_kth(arr, [7, 9, 10, 1], 4))\n    print(find_kth(arr, [3, 4, 7, 5, 6, 8, 11, 1], 5))\n    print(find_kth(arr, [6, 4, 3, 8, 9, 1, 2, 10, 11], 4))\n    \nmain()"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2 or not arr1[0] or not arr2[0]:\n        return None\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_lst = [int(i) for i in str(number)]\n    num_lst.sort()\n    if(len(num_lst) == 1):\n        return True\n    for i in range(len(num_lst)):\n        prev_num = num_lst[i-1]\n        next_num = num_lst[i+1]\n        if(prev_num == next_num):\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # 1. Your code here\n    # if number < 10:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    dic = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}\n    for i in range(1, number + 1):\n        if i in dic:\n            if dic[i] == 1:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 2:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 3:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 4:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 5:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 6:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 7:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 8:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 9:\n                if number % dic[i] == 0:\n                    return False\n            elif dic[i] == 10:\n                if number % dic[i] == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    converted_num = str(number)\n    num_lst = list(converted_num)\n    num_sum = 0\n    for i in range(len(num_lst)):\n        num_sum += int(num_lst[i])**len(num_lst)\n    if len(str(num_sum)) == len(converted_num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def count_digits(number):\n        '''\n        Count the number of digits of number using the math module\n        '''\n        # calculate the number of digits in number\n        digits = len(str(number))\n        # return the number of digits\n        return digits\n    \n    def number_is_armstrong(number):\n        '''\n        Function to check whether the given number is armstrong or not\n        '''\n        digits = count_digits(number)\n        # return False if there is only 1 digit\n        if digits == 1:\n            # if the number is armstrong\n            return True\n        # return false if there are more than 1 digit\n        else:\n            # iterate through the number\n            for i in range(1, digits):\n                # calculate the sum of digits\n                sum = 0\n                # i is the number\n                j = i\n                # j is the number\n                while j > 0:\n                    # add digit to sum\n                    sum += j % 10\n                    # increase the i by 1\n                    i = i * 10\n                    # i is the new number\n                    j //= 10\n                # the number is armstrong\n                if number == sum:\n                    # return True\n                    return True\n            # the number is not armstrong\n            return False\n        \n    # return True if number is armstrong\n    return number_is_armstrong(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = int(number)\n    for i in range(1,num+1):\n        digit = 0\n        while (i%10)!= 0:\n            digit = digit*10+int(str(i%10)[-1])\n            i = int(i/10)\n        if digit == num:\n            sum = sum + 1\n            if num == sum:\n                return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def count_digits(n):\n        count = 0\n        while n!= 0:\n            count += 1\n            n = n // 10\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Finding the power of a number\n    power = 0\n    while number > 0:\n        digit = number % 10\n        number = number // 10\n        power += digit ** power\n    # Calculating the sum of digits from 1 to the number\n    sum = 0\n    while number > 0:\n        digit = number % 10\n        number = number // 10\n        sum += digit ** power\n    # Checking if the number is armstrong or not\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if type(number)!= int:\n        raise TypeError('Please, type int only')\n    else:\n        if (number == 0):\n            return False\n        else:\n            count = 0\n            for x in str(number):\n                count += 1\n                if count > 2:\n                    break\n            else:\n                for i in str(number):\n                    if int(i) == 0:\n                        return False\n                else:\n                    return True"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(number))/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    number = int(input(\"Enter a number: \"))\n    for i in range(1, number+1):\n        sum += i\n        average = sum/number\n    print(\"The sum is {} and the average is {}\".format(sum, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0,number):\n        sum+=i\n    print(f'Sum of numbers is {sum}')\n    average = sum/number\n    print(f'Average of the numbers is {average}')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    number = range(1,number+1)\n    for i in number:\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(0, number):\n        total += 1\n        print(f'{total} :', end ='')\n    print('\\n')\n    sum = 0\n    for i in range(0, total):\n        sum += 1\n        print(f'{sum} :', end ='')\n    average = sum / total\n    print('\\n')\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(0,number+1):\n        total = total + i\n    return total\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # i is the index of natural number.\n    # 0 is a 0 natural number\n    # 1 is a 1 natural number\n    # 2 is a 2 natural numbers\n    #...\n    # n is the total number of natural numbers\n    # return sum and average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        number = number + i\n        sum = sum + number\n        i = i + 1\n    return sum/n\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for number in range(1, number + 1):\n        total += number\n    print(\"Sum of first \", number, \" natural numbers: \", total)\n    average = total / number\n    print(\"Average of first \", number, \" natural numbers: \", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0,number):\n        num = int(input())\n        sum = sum + num\n    avg = sum/number\n    print('The average is',avg)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return n, True\n    else : \n        return n, False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    if n%2==0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # Declaring an empty list\n    evens = []\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # If the number is odd, return false\n    if (n%2==0):\n        return False\n    # If the number is even, return true\n    else:\n        return True\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if(str1==\"\"):\n        return None\n    elif(str1[0]==str1[len(str1)-1]):\n        return str1[0]\n    else:\n        for i in range(len(str1)):\n            if str1[i]==str1[i+1]:\n                return str1[i]\n            else:\n                continue\n        return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet:\n        if str1.count(char) > 1:\n            return char\n    return ''\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    str1_count = str1.count('A')\n    if str1_count > 1:\n        return str1.find('A')\n    else:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = []\n    for i in str1:\n        if i in lst:\n            lst.remove(i)\n        else:\n            lst.append(i)\n    \n    if len(lst) == 0:\n        return 'No First Repeated Character'\n    else:\n        return lst[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #HINT: Hint: Use the built in function ord()\n    #HINT: Check out the string module to see how it's implemented\n    #HINT: Modify the string variable so that it starts at 0\n    #HINT: Modify the return value to be the character with the same index as the index\n    #HINT: Modify the return value to be the first repeated character\n    #HINT: Do not worry about a range that would give you an error\n    #HINT: Try to understand what it means\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    \ndef second_repeated_char(str1):\n    '''\n    Write a python function to find the second repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i+1] == str1[i]:\n            return str1[i+1]\n    \ndef third_repeated_char(str1):\n    '''\n    Write a python function to find the third repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i+2]:\n            return str1[i]\n    \ndef fourth_repeated_char(str1):\n    '''\n    Write a python function to find the fourth repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i+2] == str1[i]:\n            return str1[i+2]\n    \ndef fifth_repeated_char(str1):\n    '''\n    Write a python function to find the fifth repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i+3] == str1[i]:\n            return str1[i+3]\n    \ndef sixth_repeated_char(str1):\n    '''\n    Write a python function to find the sixth repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i+4] == str1[i]:\n            return str1[i+4]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # First approach\n    # Time Complexity = O(n)\n    # Space Complexity = O(1)\n    # Runtime: 48 ms (57.60%)\n    # Memory Usage: 14.9 MB (43.22%)\n    if len(str1) <= 1:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    '''\n    Write a python function that takes a string and return the first repeated character from the given string.\n    '''\n    def first_repeated_char2(str1):\n        '''\n        Write a python function to find the first repeated character in a given string.\n        '''\n        alpha = []\n        for i in str1:\n            if i in alphabet:\n                alpha.append(i)\n        if len(alpha) == len(str1):\n            return alpha\n    print(\"{}\".format(first_repeated_char2(str1)))\n    return \"\"\nfirst_repeated_char(str1)\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i]!= str1[i-1]:\n            new_str += str1[i]\n    return new_str\n    \ndef second_repeated_char(str1):\n    '''\n    Write a python function to find the second repeated character in a given string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i]!= str1[i-1]:\n            new_str += str1[i]\n    return new_str\n    \ndef last_repeated_char(str1):\n    '''\n    Write a python function to find the last repeated character in a given string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i]!= str1[i+1]:\n            new_str += str1[i]\n    return new_str\n    \ndef main():\n    string1 = input(\"Enter the string1: \")\n    print(first_repeated_char(string1))\n    print(second_repeated_char(string1))\n    print(last_repeated_char(string1))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code here\n    return str1[0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i <= n and i % 4 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    #declare an empty list to store the return values\n    ludic = []\n    #get the number of steps in a stepwise loop\n    for i in range(1,n+1):\n        #check if i is greater than or equal to the number\n        if i <= n:\n            #calculate the divisors of i\n            divisors = list(range(1,i+1))\n            #add the divisors to the list\n            ludic.append(divisors)\n            #iterate over the divisors\n            for j in divisors:\n                #check if j is in the list\n                if j in ludic:\n                    #add the number if it is\n                    #is divisible by j\n                    ludic.remove(j)\n                    ludic.append(j)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for n in range(2,n):\n        if n%2==0:\n            luc_list.append(n)\n    return luc_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(n+1):\n        for j in range(n+1):\n            if (i >= j):\n                res.append(i*j)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        if i<=n/2:\n            ludic.append(i)\n    print(ludic)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucides = []\n    for i in range(n):\n        lucides.append(int(input(\"Enter a number less than or equal to {}: \".format(i))))\n    print(\"The list is: {}\".format(lucides))\n    return lucides\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucky_numbers = []\n    for n in range(1,n+1):\n        if n > 1 and n % 2 == 0:\n            lucky_numbers.append(n)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1, n+1):\n        luc = 0\n        for j in range(1, i):\n            if i % j == 0:\n                luc += 1\n        if luc >= n:\n            luc_list.append(i)\n    return luc_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    # Write your code here\n    all_ludic = []\n    \n    for i in range(1, n+1):\n        if i > 5 and i % 2 == 0:\n            all_ludic.append(i)\n    \n    return all_ludic\n        \n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            ludic.append(i)\n    return ludic\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '''\n    '''\n    Write a function that reverses a string in place.\n    '"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split(' ')\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s==\"\": return \" \"\n    res = \"\"\n    if len(s)==1: return s\n    words = s.split(\" \")\n    for word in words:\n        res += word[::-1]+\" \"\n    return res[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return (s.split(' '))[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    string = s.split()\n    output = []\n    for word in string:\n        output.append(word[::-1])\n    return''.join(output)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    r = []\n    i = 0\n    while i < len(s):\n        if s[i]!='':\n            r.append(s[i])\n        i += 1\n    return \"\".join(r)\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    # return s[::-1]\n    \ndef reverse_words_with_punctuation(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return s[::-1]\n    \ndef reverse_words_without_punctuation(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef reverse_words_without_punctuation_2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_letter(s):\n    '''\n    Write a function to remove all letter from a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_letter_2(s):\n    '''\n    Write a function to remove all letter from a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_punctuation(s):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_punctuation_2(s):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_space_after_first_word(s):\n    '''\n    Write a function to remove all space after the first word.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_space_after_last_word(s):\n    '''\n    Write a function to remove all space after the last word.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_space_after_first_and_last_word(s):\n    '''\n    Write a function to remove all space after the first word and the last word.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \n    return [s[i:j] for i in range(0, len(s), 1) for j in range(i+1, len(s)+1, 1)]\n    \ndef remove_space_after_first_and_last_word_2(s):\n    '''\n    Write a function to remove all space after the first word and the last word.\n    '''\n    # C = []\n    # i = 0\n    # while i < len(s):\n    #     C.append(s[i])\n    #     i += 1\n    # return C[::-1]\n    \n    # return [s[i:j] for i in range(0, len(s), 1) fo"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s == '':\n        return ''\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return(s.split())"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if (num % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    assert num > 0, 'A number must be greater than 0'\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(num**0.5)+1,2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num == 4 or num == 5:\n        return False\n    elif num > 3 and num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num+1):\n        if num % i == 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    assert type(num) is int, 'Parameter must be integer'\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef is_prime(num):\n    '''\n    Write a function that returns whether the given integer is prime.\n    '''\n    \n    assert type(num) is int, 'Parameter must be integer'\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef check_prime(num):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    \n    assert type(num) is int, 'Parameter must be integer'\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef check_prime_v2(num):\n    '''\n    Return whether a given number is prime.\n    '''\n    \n    assert type(num) is int, 'Parameter must be integer'\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef is_prime_v2(num):\n    '''\n    Return whether a given number is prime.\n    '''\n    \n    assert type(num) is int, 'Parameter must be integer'\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef check_prime_v3(num):\n    '''\n    Return whether a given number is prime.\n    '''\n    \n    assert type(num) is int, 'Parameter must be integer'\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef is_prime_v3(num):\n    '''\n    Return whether a given number is prime.\n    '''\n    \n    assert type(num) is int, 'Parameter must be integer'\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef main():\n    '''\n    To run the program\n    '''\n    \n    print('1 - Check if a given number is a prime number')\n    print('2 - Check if a given number is prime')\n    print('3 - Check if a given number is a prime number')\n    print('4 - Check if a given number is prime')\n    print('5 - Check if a given number is prime')\n    print('6 - Check if a given number is prime')\n    print('7 - Check if a given number is prime')\n    print('8 - Check if a given number is prime')\n    print('9 - Check if a given number is prime')\n    print('10 - Check if a given number is prime')\n    print('11 - Check if a given number is prime')\n    print('12 - Check if a given number is prime')\n    print('13 - Check if a given number is prime')\n    print('14 - Check if a given number is prime')\n    print('15 - Check if a given number is prime')\n    print('16 - Check if a given number is prime')\n    print('17 - Check if a given number is prime')\n    print('18 - Check if a given number is prime')\n    print('19 - Check if a given number is prime')\n    print('20 - Check if a given number is prime')\n    print('21 - Check if a given number is prime')\n    print('22 - Check if a given number is prime')\n    print('23 - Check if a given number is prime')\n    print('24 - Check if a given number is prime')\n    print('25 - Check if a given number is prime')\n    print('26 - Check if a given number is prime')\n    print('27 - Check if a given number is prime')\n    print('28 - Check if a given number is prime')\n    print('29 - Check if a given number is prime')\n    print('30 - Check if a given number is prime')\n    print('31 - Check if a given number is prime')\n    print('32 - Check if a given number is prime')\n    print('33 - Check if a given number is prime')\n    print('34 - Check if a given number is prime')\n    print('35 - Check if a given number is prime')\n    print('36 - Check if a given number is prime')\n    print('37 - Check if a given number is prime')\n    print('38 - Check if a given number is prime')\n    print('39 - Check if a given number is prime')\n    print('40 - Check if a given number is prime')\n    print('41 - Check if a given number is prime')\n    print('42 - Check if a given number is prime')\n    print('43 - Check if a given number is prime')\n    print('44 - Check if a given number is prime')\n    print('45 - Check if a given number is prime')\n    print('46 - Check if a given number is prime')\n    print('47 - Check if a given number is prime')\n    print('48 - Check if a given number is prime')\n    print('49 - Check if a given number is prime')\n    print('50 - Check if a given number is prime')\n    print('51 - Check if a given number is prime')\n    print('52 - Check if a given number is prime')\n    print('53 - Check if a given number is prime')\n    print('54 - Check if a given number is prime')\n    print('55 - Check if a given number is prime')\n    print('56 - Check if a given number is prime')\n    print('57 - Check if a given number is prime')\n    print('58 - Check if a given number is prime')\n    print('59 - Check if a given number is prime')\n    print('60 - Check if a given number is prime')\n    print('61 - Check if a given number is prime')\n    print('62 - Check if a given number is prime')\n    print('63 - Check if a given number is prime')\n    print('64 - Check if a given number is prime')\n    print('65 - Check if a given number is prime')\n    print('66 - Check if a given number is prime')\n    print('67 - Check if a given number is prime')\n    print('68 - Check if a given number is prime')\n    print('69 - Check if a given number is prime')\n    print('70 - Check if a given number is prime')\n    print('71 - Check if a given number is prime')\n    print('72 - Check if a given number is prime')\n    print('73 - Check if a given number is prime')\n    print('74 - Check if a given number is prime')\n    print('75 - Check if a given number is prime')\n    print('76 - Check if a given number is prime')\n    print('77 - Check if a given number is prime')\n    print('78 - Check if a given number is prime')\n    print('79 - Check if a given number is prime')\n    print('80 - Check if a given number is prime')\n    print("
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    else:\n        for i in range(3,num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    if degree >= 0:\n        radian = degree *(3.14159/180)\n    else:\n        radian = degree *(-3.14159/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree*math.pi/180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * math.pi / 180\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    angle = degree * (math.pi / 180)\n    return angle\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180.0)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (3.14159265 / 180)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern.count('?') == 0:\n        pattern += '?'\n    i = 0\n    while i < len(text):\n        if text[i:i + len(pattern)] == pattern:\n            return i, i + len(pattern), i + len(pattern) - 1\n        i += 1\n    return -1, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_pattern = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = pattern\n    pattern = re.compile(pattern, re.IGNORECASE)\n    mo = pattern.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    length = len(pattern)\n    regex = re.compile(pattern, re.IGNORECASE)\n    match = regex.search(text)\n    if match:\n        return match.start(), match.end(), match.start() + length\n    return 0, 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    idx = 0\n    substr = ''\n    for c in text:\n        if c == pattern[0]:\n            idx = pattern.index(c) + 1\n            break\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = -1\n    end = -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    # print(text[match.start():match.end()])\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    # Find the start position of the pattern\n    while True:\n        match = re.search(pattern, text, re.IGNORECASE)\n        # Set the start position to the character before the pattern.\n        start = match.start()\n        # Check if the search is within the pattern.\n        if match:\n            # Return a match object.\n            return (match, start, end)\n        # If not, stop searching.\n        if re.search(pattern, '', re.IGNORECASE) is None:\n            # Return None if there are no matches.\n            return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index, end_index = 0, 0\n    match = re.search(pattern, text)\n    while match is not None:\n        # Find the start and end indices of the match.\n        start_index = match.start()\n        end_index = match.end()\n        # Return the matching substring.\n        return match.group(), start_index, end_index\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #if the text isn't a string, just return the original string\n    if type(text)!= str:\n        return text, -1, -1\n    #find all the literals\n    literals = re.findall(pattern, text)\n    #take the first index of the match and add it to the return value\n    start_index = literals.index(text[literals[0]:])\n    end_index = len(text) - start_index\n    return text[start_index:end_index], start_index, end_index\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(1, n + 1):\n        print(i, end=' ')\n        if i % 3 == 0:\n            print()\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    lst = [None] * n # lst = [None] * n\n    bell = 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) \n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    result = 1\n    while i < n:\n        result += i\n        i += 1\n    return result\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n==0 or n==1:\n        return n\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # P[k] = (k) \n    # n = 9 -> 3\n    # n = 3 -> 1\n    # n = 2 -> 2\n    # n = 1 -> 1\n    # k = 2 -> 1\n    # k = 1 -> 0\n    # k = 0 -> 0\n    # k = 1 -> 1\n    # k = 2 -> 3\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    arr = [1,2,3,4,5]\n    i = 0\n    while i < n:\n        print(arr[i])\n        i+=1\n    return arr[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return 2 ** n - 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    numbers = []\n    numbers = [1,1]\n    for i in range(2, n+1):\n        print (numbers)\n        numbers.append((numbers[-1] + numbers[-2]))\n    return numbers[n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= L:\n        return list1\n    return remove_kth_element(list1, L - 1) + [list1.pop()] + remove_kth_element(list1, L - 1)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L-1):\n        list1.pop(L-i-1)\n    return list1\n    \n    \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    while L and L[0] <= L[-1]:\n        L = L[1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #raise NotImplementedError\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l = []\n    for i in list1:\n        l.append(i)\n    k = 0\n    i = len(list1)-1\n    while(i>=k):\n        l[i],l[k] = l[k],l[i]\n        i = i-1\n        k = k-1\n    return l\n    \nlist1 = [3,1,3,2,3,3,2,1,2,1]\nprint(\"Original list:\")\nprint(list1)\nprint()\nprint(\"Kth element removed:\")\nprint(remove_kth_element(list1, len(list1)))\nprint()\nprint(\"Replaced list:\")\nprint(list1)\nprint("
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L.index(L[-1])\n    del L[-1]\n    return L"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Insert your code here\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    \n    return list1[L:]\n    \nlist1 = [1, 2, 3, 4, 5, 6]\nL = 3\nprint(remove_kth_element(list1, L))"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(list1)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return_list = []\n    for el in list1:\n        return_list.append(el)\n    return return_list[L:]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    return max(test_list, key=len)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) <= N:\n        return test_list[-1][N]\n    return max([max_of_nth(row, N-1) for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == N:\n        return test_list[N-1][0]\n    else:\n        return max_of_nth(test_list, N-1)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N-1] for i in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N-1] for i in range(N))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    import itertools\n    return max(list(itertools.chain(*test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) < N:\n        return None\n    l = []\n    for x in test_list:\n        l.append(x[N])\n    return max(l)"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    row_count = len(test_list)\n    \n    def check_row_sum(row):\n        total = 0\n        for i in row:\n            total += i\n            if total >= N:\n                return i\n    \n    return check_row_sum(test_list[row_count-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for x in test_list:\n        if x[N-1] > max_val:\n            max_val = x[N-1]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return test_list[0][N]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return merge_two_lists(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    elif len(lst) <= 1:\n        return lst\n    else:\n        newLst = []\n        currLst = lst[0]\n        for i in range(len(lst)):\n            if currLst:\n                newLst.append(currLst)\n                currLst = []\n            currLst.append(lst[i][0])\n        newLst.append(currLst)\n        return newLst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(a, b):\n        # Step 1: Define a new list that is the concatenation of the two lists.\n        final_list = []\n        # Step 2: Append the elements of the first list to the new list.\n        for i in range(0, len(a)):\n            final_list.append(a[i])\n        # Step 3: Append the elements of the second list to the new list.\n        for i in range(len(b)):\n            final_list.append(b[i])\n        # Step 4: Return the result.\n        return final_list\n    return merge_two_lists(lst[0], lst[1])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for element in lst:\n        for i in range(len(element)):\n            new_lst.append(element[i])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    n = len(lst)\n    if n == 1: return [lst[0]]\n    res = []\n    for i in range(0, n):\n        for j in range(0, n - i - 1):\n            if lst[j][0] > lst[j + 1][0]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    for i in range(0, n):\n        res.append(lst[i])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    \n    for x in lst:\n        for y in x:\n            result.append(y)\n    return result\n        \n    \n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        for j in i:\n            lst1.append(j)\n    for i in lst1:\n        for j in i:\n            lst2.append(j)\n    return lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Create an empty list\n    result = []\n    # Loop through each element in the list and add it to result list\n    for elem in lst:\n        result.append(elem[0])\n        result.append(elem[1])\n    # Return the list\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return lst\n    else:\n        return lst[:2] + lst[1:] \n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0], lst[1]]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # TODO\n    # your code here\n    res=0\n    for item in test_list:\n        res+=item\n    return res\ndef get_nth_element(test_list, n):\n    '''\n    Write a function that returns the nth element from the list.\n    '''\n    # TODO\n    # your code here\n    return test_list[n]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for val in test_list:\n        total += val\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    def cummulative_sum(test_list):\n        return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #create the empty list\n    sum_list = []\n    #iterate over the list\n    for item in test_list:\n        #iterate over the items in the list\n        for element in item:\n            #add element to sum_list\n            sum_list.append(element)\n    #return the sum\n    return sum(sum_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    def cummulative_sum_2(test_list):\n        return sum(sum(map(list, test_list)))\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = 0\n    for i in range(len(test_list)):\n        cum += test_list[i]\n    return cum\n    \n    \ndef min_max(test_list):\n    '''\n    Write a function to find the minimum and maximum values of all the values in the tuple list.\n    '''\n    min_val = test_list[0]\n    max_val = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n        elif test_list[i] > max_val:\n            max_val = test_list[i]\n    return min_val, max_val\n    \n    \ndef mean(test_list):\n    '''\n    Write a function to find the mean of all the values in the tuple list.\n    '''\n    return sum(test_list) / len(test_list)\n    \n    \ndef median(test_list):\n    '''\n    Write a function to find the median of all the values in the tuple list.\n    '''\n    length = len(test_list)\n    if length % 2 == 0:\n        median1 = test_list[int(length / 2)]\n        median2 = test_list[int(length / 2 - 1)]\n        return (median1 + median2) / 2.0\n    else:\n        return test_list[int(length / 2)]\n    \n    \ndef count_sort(test_list):\n    '''\n    Write a function to sort the given unsorted array in ascending order using the count sort.\n    '''\n    length = len(test_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i, length):\n            if test_list[j] < test_list[min_index]:\n                min_index = j\n        test_list[i], test_list[min_index] = test_list[min_index], test_list[i]\n    return test_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result_list = []\n    for item in nums:\n        result_list.append(item)\n    return result_list\n    #print(result_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Solve this problem by implementing a helper function to return the average of all the elements in a tuple.\n    # Call the function by calling the average_tuple function and passing the list of tuples as the first argument\n    # TODO: Add code in the function to return the average of all the tuples in the given list.\n    return [(sum(num[0])/len(num[0]), sum(num[1])/len(num[1])) for num in nums]"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for num in nums:\n        total.append(sum(num))\n    return total / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n        return [sum/len(nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tuple in nums:\n        temp = []\n        for item in tuple:\n            temp.append(item)\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for num in nums:\n        average.append(sum(num)/len(num))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = list(nums)\n    # Initialize the variables\n    total = 0\n    avg = []\n    # Iterate through the numbers\n    for i in range(len(nums)):\n        total = total + nums[i][0]\n        # Calculate the average for the current tuple\n        avg.append(nums[i][0] / nums[i][1])\n    # Return the average\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(nums)/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[i])/len(nums[i]) for i in range(len(nums))]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for item in nums:\n        total.append(sum(item))\n    print(total)\n    return total / len(nums)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Create a variable to store the result\n    mod_result = 0\n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        mod_result += test_tup1[i] * test_tup2[i]\n    return mod_result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tuple_modulo(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(f\"Modulo of {test_tup1} and {test_tup2} is {tuple_modulo(test_tup1, test_tup2)}\")\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup_modulo = tuple()\n    for i in range(len(test_tup1)):\n        tup_modulo += tuple(test_tup1[i] % test_tup2[i])\n    return tup_modulo\n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Use a return statement to get the final result of the function\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n    #return test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Add your Python code here\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                test_tup1[i] = 0\n            else:\n                test_tup1[i] = test_tup1[i] % test_tup2[i]\n        return test_tup1\n    else:\n        raise ValueError(\"Tuple length not equal.\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"ERROR: tuple size does not match\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                print(\"ERROR: first tuple does not contain the same value\")\n                return None\n        else:\n            for i in range(len(test_tup1)):\n                test_tup1[i] %= test_tup2[i]\n        return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return (\"Tuple must be same length!\")\n    else:\n        for i in range(len(test_tup1)):\n            if type(test_tup1[i])!= int or type(test_tup2[i])!= int:\n                return (\"One of the elements is not int!\")\n            elif test_tup1[i] % test_tup2[i]!= 0:\n                return (\"Element is not divisible by the other number!\")\n        else:\n            return (test_tup1, test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n    mod = 0\n    for i in range(n1):\n        mod += test_tup1[i]*test_tup2[i]\n    return (mod % 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # If a jump is necessary, return 1. If a jump is not necessary, return 0.\n    # Initialize the max jump and max jump in the bottom left corner to 0.\n    # max_jump = 0\n    # max_jump_in_bottom_left = 0\n    \n    # if length of the path is too short, the path is not found.\n    if d == 0: \n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Your code goes here.\n    # Write your code here.\n    return steps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 1\n    y = 0\n    while(x <= steps[-1]):\n        x = (x + d[y][0])\n        y = (y + d[y][1])\n    return (steps[-1] - x) \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # steps = input\n    # d = input\n    # return output\n    \n    #check if the input is a list of lists\n    if type(steps) is not list:\n        raise TypeError(\"Steps must be a list of lists\")\n        \n    #check if the steps input is a list\n    if len(steps)!= len(d):\n        raise ValueError(\"Steps must be a list of lists of floats\")\n        \n    #iterate through steps\n    for i in range(len(steps)):\n        #check if the list is a list\n        if type(steps[i]) is not list:\n            raise TypeError(\"Steps must be a list of lists\")\n            \n        #check if the steps[i] is a list\n        if len(steps[i])!= len(d):\n            raise ValueError(\"Steps must be a list of lists of floats\")\n            \n        #iterate through the steps\n        for j in range(len(steps[i])):\n            #check if the list is a list\n            if type(steps[i][j]) is not list:\n                raise TypeError(\"Steps must be a list of lists\")\n            #check if the steps[i][j] is a list\n            if len(steps[i][j])!= len(d):\n                raise ValueError(\"Steps must be a list of lists of floats\")\n    \n    #create an empty list\n    jumps = []\n    \n    #iterate through steps\n    for i in range(len(steps)):\n        #check if the list is a list\n        if type(steps[i]) is not list:\n            raise TypeError(\"Steps must be a list of lists\")\n            \n        #check if the steps[i] is a list\n        if len(steps[i])!= len(d):\n            raise ValueError(\"Steps must be a list of lists of floats\")\n        \n        #iterate through the steps\n        for j in range(len(steps[i])):\n            #check if the list is a list\n            if type(steps[i][j]) is not list:\n                raise TypeError(\"Steps must be a list of lists\")\n            #check if the steps[i][j] is a list\n            if len(steps[i][j])!= len(d):\n                raise ValueError(\"Steps must be a list of lists of floats\")\n            #add the current position to the list\n            jumps.append([i,j])\n            \n            #check if the current position is the same as the destination\n            if steps[i][j] == d:\n                #the destination has been reached\n                break\n    #create a return variable to store the number of jumps\n    return len(jumps)\n    \ndef path_between(start, end, steps):\n    '''\n    Write a function to print the path between start and end.\n    '''\n    #steps = input\n    #start = input\n    #end = input\n    #return output\n    \n    #check if the input is a list of lists\n    if type(steps) is not list:\n        raise TypeError(\"Steps must be a list of lists\")\n        \n    #check if the steps input is a list\n    if len(steps)!= len(steps[0]):\n        raise ValueError(\"Steps must be a list of lists of floats\")\n        \n    #iterate through steps\n    for i in range(len(steps)):\n        #check if the list is a list\n        if type(steps[i]) is not list:\n            raise TypeError(\"Steps must be a list of lists\")\n            \n        #check if the steps[i] is a list\n        if len(steps[i])!= len(steps[i][0]):\n            raise ValueError(\"Steps must be a list of lists of floats\")\n        \n        #iterate through the steps\n        for j in range(len(steps[i])):\n            #check if the list is a list\n            if type(steps[i][j]) is not list:\n                raise TypeError(\"Steps must be a list of lists\")\n            #check if the steps[i][j] is a list\n            if len(steps[i][j])!= len(steps[i][j][0]):\n                raise ValueError(\"Steps must be a list of lists of floats\")\n            \n            #create a variable to store the steps[i][j][k][l]\n            if j == 0:\n                start_steps = steps[i][j]\n            elif j == len(steps[i]) - 1:\n                end_steps = steps[i][j]\n            else:\n                temp = steps[i][j]\n                start_steps = steps[i][j - 1]\n                end_steps = steps[i][j + 1]\n            \n            #create a variable to store the steps[i][j][k][l][m]\n            start_steps_as_floats = [float(k) for k in start_steps]\n            end_steps_as_floats = [float(l) for l in end_steps]\n            \n            #iterate through the steps\n            for k in range(len(start_steps)):\n                #check if the list is a list\n                if type(start_steps[k]) is not list:\n                    raise TypeError(\"Start Steps must be a list of floats\")\n                #check if the start_steps[k] is a list\n                if len(start_steps[k])!= len(start_steps[k][0]):\n                    raise ValueError(\"Start Steps must be a list of floats\")\n                \n                #iterate through the steps\n                for l in range(len(start_steps[k])):\n                    #check if the list is a list\n                    if type(start_steps[k][l]) is not list:\n                        raise TypeError(\"Start Steps must be a list of floats\")\n                    #check if the start_steps[k][l] is a list\n                    if len(start_steps[k][l])!= len(start_steps[k][l][0]):\n                        raise ValueError(\"Start Steps must be a list of floats\")\n                    \n                    #create a variable to store the start_steps[k][l][k][l][m]\n                    start_steps_as_floats_k = [float(k) for k in start_steps[k][l][k]]\n                    start_steps_as_floats_l = [float(k) for k in start_steps[k][l][l]]\n                    \n                    #iterate through the steps\n                    for m in range(len(start_steps[k][l])):\n                        #check if the list is a list\n                        if type(start_steps[k][l][m]) is not list:\n                            raise TypeError(\"Start Steps must be a list of floats\")\n                        #check if the start_steps[k][l][m] is a list\n                        if len(start_steps[k][l][m])!= len(start_steps[k][l][m][0]):\n                            raise ValueError(\"Start Steps must be a list of floats\")\n                        \n                        #iterate through the steps\n                        for kk in range(len(start_steps[k][l][m])):\n                            #check if the list is a list\n                            if type(start_steps[k][l][m][kk]) is not list:\n                                raise TypeError(\"Start Steps must be a list of floats\")\n                            #check if the start_steps[k][l][m][kk] is a list\n                            if len(start_steps[k][l][m][kk])!= len(start_steps[k][l][m][kk][0]):\n                                raise ValueError(\"Start Steps must be a list of floats\")\n                            \n                            #create a variable to store the start_steps_as_floats_k[kk]\n                            start_steps_as_floats_k_new = [float(k) for k in start_steps[k][l][m][kk]]\n                            \n                            #iterate through the steps\n                            for lk in range(len(start_steps[k][l][m][kk])):\n                                #check if the list is a list\n                                if type(start_steps[k][l][m][kk][lk]) is not list:\n                                    raise TypeError(\"Start Steps must be a list of floats\")\n                                #check if the start_steps[k][l][m][kk][lk] is a list\n                                if len(start_steps[k][l][m][kk][lk])!= len(start_steps[k][l][m]"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def jumps(a, b, c):\n        jumps = 0\n        for x in range(a[0] - 1, a[2]):\n            for y in range(b[0] - 1, b[2]):\n                if x == a[0] or y == a[1]:\n                    jumps += 1\n        return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 1\n    if d < 0: return 0\n    if d == 0: return 0\n    if d == 1: return 0\n    if d == 2: return 1\n    if d == 3: return 2\n    if d == 4: return 3\n    if d == 5: return 4\n    if d == 6: return 5\n    if d == 7: return 6\n    if d == 8: return 7\n    if d == 9: return 8\n    if d == 10: return 9\n    if d == 11: return 10\n    if d == 12: return 11\n    if d == 13: return 12\n    if d == 14: return 13\n    if d == 15: return 14\n    if d == 16: return 15\n    if d == 17: return 16\n    if d == 18: return 17\n    if d == 19: return 18\n    if d == 20: return 19\n    if d == 21: return 20\n    if d == 22: return 21\n    if d == 23: return 22\n    if d == 24: return 23\n    if d == 25: return 24\n    if d == 26: return 25\n    if d == 27: return 26\n    if d == 28: return 27\n    if d == 29: return 28\n    if d == 30: return 29\n    if d == 31: return 30\n    if d == 32: return 31\n    if d == 33: return 32\n    if d == 34: return 33\n    if d == 35: return 34\n    if d == 36: return 35\n    if d == 37: return 36\n    if d == 38: return 37\n    if d == 39: return 38\n    if d == 40: return 39\n    if d == 41: return 40\n    if d == 42: return 41\n    if d == 43: return 42\n    if d == 44: return 43\n    if d == 45: return 44\n    if d == 46: return 45\n    if d == 47: return 46\n    if d == 48: return 47\n    if d == 49: return 48\n    if d == 50: return 49\n    if d == 51: return 50\n    if d == 52: return 51\n    if d == 53: return 52\n    if d == 54: return 53\n    if d == 55: return 54\n    if d == 56: return 55\n    if d == 57: return 56\n    if d == 58: return 57\n    if d == 59: return 58\n    if d == 60: return 59\n    if d == 61: return 60\n    if d == 62: return 61\n    if d == 63: return 62\n    if d == 64: return 63\n    if d == 65: return 64\n    if d == 66: return 65\n    if d == 67: return 66\n    if d == 68: return 67\n    if d == 69: return 68\n    if d == 70: return 69\n    if d == 71: return 70\n    if d == 72: return 71\n    if d == 73: return 72\n    if d == 74: return 73\n    if d == 75: return 74\n    if d == 76: return 75\n    if d == 77: return 76\n    if d == 78: return 77\n    if d == 79: return 78\n    if d == 80: return 79\n    if d == 81: return 80\n    if d == 82: return 81\n    if d == 83: return 82\n    if d == 84: return 83\n    if d == 85: return 84\n    if d == 86: return 85\n    if d == 87: return 86\n    if d == 88: return 87\n    if d == 89: return 88\n    if d == 90: return 89\n    if d == 91: return 90\n    if d == 92: return 91\n    if d == 93: return 92\n    if d == 94: return 93\n    if d == 95: return 94\n    if d == 96: return 95\n    if d == 97: return 96\n    if d == 98: return 97\n    if d == 99: return 98\n    if d == 100: return 99\n    if d == 101: return 100\n    if d == 102: return 101\n    if d == 103: return 102\n    if d == 104: return 103\n    if d == 105: return 104\n    if d == 106: return 105\n    if d == 107: return 106\n    if d == 108: return 107\n    if d == 109: return 108\n    if d == 110: return 109\n    if d == 111: return 110\n    if d == 112: return 111\n    if d == 113: return 112\n    if d == 114: return 113\n    if d == 115: return 114\n    if d == 116: return 115\n    if d == 117: return 116\n    if d == 118: return 117\n    if d == 119: return 118\n    if d == 120: return 119\n    if d == 121: return 120\n    if d == 122: return 121\n    if d == 123: return 122\n    if d == 124: return 123\n    if d == 125: return 124\n    if d == 126: return 125\n    if d == 127: return 126\n    if d == 128: return 127\n    if d == 129: return 128\n    if d == 130: return 129\n    if d == 131: return 130\n    if d == 132: return 131\n    if d == 133: return 132\n    if d == 134: return 133\n    if d == 135: return 134\n    if d == 136: return 135\n    if d == 137: return 136\n    if d == 138: return 137\n    if d == 139: return 138\n    if d == 140: return 139\n    if d == 141: return 140\n    if d == 142: return 141\n    if d == 143: return 142\n    if d == 144: return 143\n    if d == 145: return 144\n    if d == 146: return 145\n    if d == 147: return 146\n    if d == 148: return 147\n    if d == 149: return 148\n    if d == 150: return 149\n    if d == 151: return 150\n    if d == 152: return 151\n    if d == 153: return 152\n    if d == 154: return 153\n    if d == 155: return 154\n    if d == 156: return 155\n    if d == 157: return 156\n    if d == 158: return 157\n    if d == 159: return 158\n    if d == 160: return 159\n    if d == 161: return 160\n    if d == 162: return 161\n    if d == 163: return 162\n    if d == 164: return 163\n    if d == 165: return 164\n    if d == 166: return 165\n    if d == 167: return 166\n    if d == 168: return 167\n    if d == 169: return 168\n    if d == 170: return 169\n    if d == 171: return 170\n    if d == 172: return 171\n    if d == 173: return 172\n    if d == 174: return 173\n    if d == 175: return 174\n    if d == 176: return 175\n    if d == 177: return 176\n    if d == 178: return 177\n    if d == 179: return 178\n    if d == 180: return 179\n    if d == 181: return 180\n    if d == 182: return 181\n    if d == 183: return 182\n    if d == 184: return 183\n    if d == 185: return 184\n    if d == 186: return 185\n    if d == 187: return 186\n    if d == 188: return 187\n    if d == 189: return 188\n    if d == 190: return 189\n    if d == 191: return 190\n    if d == 192: return 191\n    if d == 193: return 192\n    if d == 194: return 193\n    if d == 195: return 194\n    if d == 196: return 195\n    if d == 197: return 196\n    if d == 198: return 197\n    if d == 199: return 198\n    if d == 200: return 199\n    if d == 201: return 200\n    if d == 202: return 201\n    if d == 203: return 202\n    if d == 204: return 203\n    if d == 205: return 204\n    if d == 206: return 205\n    if d == 207: return 206\n    if d == 208: return 207\n    if d == 209: return 208\n    if d == 210: return 209\n    if d == 211: return 210\n    if d == 212: return 211\n    if d == 213: return 212\n    if d == 214: return 213\n    if d == 215: return 214\n    if d == 216: return 215\n    if d == 217: return 216\n    if d == 218: return 217\n    if d ="
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check(x, y): \n        if x == 0 or y == 0: \n            return -1\n        if x < 0 or y < 0: \n            return 0\n        if x > d or y > d: \n            return 0\n        return 1 + check(x - 1, y) + check(x, y - 1)\n    return check(steps[0], steps[1])\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Implement Your Code Here\n    min_jumps = 0\n    return min_jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    d = abs(d)\n    if d == 0:\n        print('Jumps are feasible!')\n    else:\n        print(steps)\n        print(d)\n        print(steps[d])\n        jumps = steps[d]\n        for j in range(d, len(steps)):\n            if j!= d:\n                if j-d >= 0 and j-d <= len(steps) - 1:\n                    print('Found jumps')\n                    return jumps\n                else:\n                    print('Failed')\n                    return 0\n            else:\n                if j+d >= 0 and j+d <= len(steps) - 1:\n                    print('Found jumps')\n                    return jumps\n                else:\n                    print('Failed')\n                    return 0\n        print('Failed')\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    elif d == 1:\n        if steps % 2!= 0:\n            return min(steps, min_Jumps(steps - 2, d + 1))\n        else:\n            return min(steps, min_Jumps(steps - 1, d + 1))\n    else:\n        return min(steps, min_Jumps(steps - 1, d + 1))\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #declaring empty list for elements\n    list_1 = []\n    list_2 = []\n    #append the first list to the empty list\n    for i in nums1:\n        list_1.append(i)\n    #append the second list to the empty list\n    for i in nums2:\n        list_2.append(i)\n    #count the length of the lists\n    l1 = len(list_1)\n    l2 = len(list_2)\n    #printing the elements in the first list\n    print(\"list1:\",list_1)\n    print(\"list2:\",list_2)\n    #printing the list elements in the second list\n    print(\"list1 elements:\",l1)\n    print(\"list2 elements:\",l2)\n    #check if the length of the list are the same\n    if l1 == l2:\n        for i in list_1:\n            if i not in list_2:\n                print(i,\" not in list2\")\n                return\n        #removing the values from the list\n        list_1.clear()\n        list_2.clear()\n        #appending the elements to the empty list\n        for i in list_2:\n            list_1.append(i)\n        #returning the list in the correct format\n        print(\"list1 elements:\",list_1)\n        return list_1\n    #check if the length of the list are not the same\n    else:\n        print(\"the lists are not same\")\n        return\n    "
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    num_list = []\n    for i in range(len(nums1)):\n        if nums1[i] in num_list:\n            continue\n        else:\n            num_list.append(nums1[i])\n    for i in range(len(nums2)):\n        if nums2[i] in num_list:\n            continue\n        else:\n            num_list.append(nums2[i])\n    \n    #print(num_list)\n    nums1 = num_list\n    \n    return num_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    # Add your Python code here\n    \n    def add_numbers(nums1,nums2):\n        add_numbers = []\n        \n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                add_numbers.append(nums1[i]+nums2[j])\n                \n        return add_numbers\n    \n    def reverse_list(nums1,nums2):\n        reversed_nums1 = []\n        \n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                reversed_nums1.append(nums1[i]+nums2[j])\n        \n        return reversed_nums1\n        \n    def union_numbers(nums1,nums2):\n        union_numbers = []\n        \n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                union_numbers.append(nums1[i]+nums2[j])\n        \n        return union_numbers\n    \n    def lcm(nums1,nums2):\n        lcm_nums1 = []\n        \n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                lcm_nums1.append(nums1[i]*nums2[j])\n        \n        return lcm_nums1\n    \n    add_nums1 = add_numbers(nums1,nums2)\n    add_nums2 = add_numbers(nums2,nums1)\n    \n    nums1_reversed = reverse_list(add_nums1,nums2)\n    nums2_reversed = reverse_list(nums2,add_nums1)\n    \n    nums1_reversed.sort()\n    nums2_reversed.sort()\n    \n    if nums1_reversed[0]!= nums2_reversed[0]:\n        return nums1_reversed[0]\n    else:\n        return nums2_reversed[0]\n        \n    \n    # CODE TO TEST Your Code\n    \n    # Use the below given print statements to display the output\n    # Also, don't modify the code below this line\n    print(\"Divide list 1 by list 2: \")\n    print(div_list(nums1,nums2))\n    print(\"\\nAdd numbers list 1 by list 2: \")\n    print(add_numbers(nums1,nums2))\n    print(\"\\nCombine numbers list 1 by list 2: \")\n    print(union_numbers(nums1,nums2))\n    print(\"\\nReversed list 1 by list 2: \")\n    print(reverse_list(nums1,nums2))\n    print(\"\\nReversed list 2 by list 1: \")\n    print(reverse_list(nums2,nums1))\n    print(\"\\nLCM of the two lists: \")\n    print(lcm(nums1,nums2))\n    \n    # Do not modify any of the code below\n    \n    # Delete this line when you are done with the experiment\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    if len(nums1)!=len(nums2):\n        return \"Unequal length lists\"\n    \n    else:\n        temp_list=[]\n        for i in range(len(nums1)):\n            temp_list.append(nums1[i])\n            temp_list.append(nums2[i])\n            print(temp_list)\n        return temp_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append([nums1[i], nums2[i]])\n    return res\n    # return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Your code here\n    if len(nums1)==0:\n        return False\n    elif len(nums2)==0:\n        return False\n    else:\n        if nums1[0]==nums2[0]:\n            return [nums1[0]]+div_list(nums1[1:],nums2[1:])\n        else:\n            return [nums1[0]]+div_list(nums1[1:],nums2)\n        \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    for i in nums1:\n        result.append(i/nums2)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # remove duplicate element\n    nums1.sort()\n    nums2.sort()\n    # get len of both lists\n    len1 = len(nums1)\n    len2 = len(nums2)\n    \n    if len1 < len2:\n        return nums1\n    elif len2 < len1:\n        return nums2\n    else:\n        i = 0\n        j = 0\n        while i < len1 and j < len2:\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n        # while loop exit when len1 and len2 are not equal\n        if i < len1 and j < len2:\n            return nums1\n        elif j < len1 and i < len2:\n            return nums2\n        elif i == len1 and j == len2:\n            return nums1 + nums2\n        elif i == len2 and j == len1:\n            return nums2 + nums1\n        else:\n            return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = list(nums1)\n    l2 = list(nums2)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in test_str:\n        if i.isnumeric():\n            result = result + i\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # remove leading zeros from the given string\n    # write the result as a list\n    # for each index in the list of numbers, add the corresponding\n    # number to the given string\n    # for each index in the list of numbers, add the corresponding\n    # number to the given string\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of numbers\n    numbers = []\n    for i in range(len(test_str)):\n        numbers.append(int(test_str[i]))\n    \n    # print the list\n    print(numbers)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    for index, char in enumerate(test_str):\n        if char.isdigit():\n            test_str = test_str[:index] + str(int(char)+1) + test_str[index+1:]\n    return test_str\n    \ndef reverse_num(test_str):\n    '''\n    Write a function that reverses the numbers in the given string.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    reversed_list = []\n    \n    for i in range(len(test_str)-1,-1,-1):\n        reversed_list.append(test_str[i])\n    return \"\".join(reversed_list)\n    \ndef remove_vowel(test_str):\n    '''\n    Write a function that removes all vowels from the given string.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    new_string = \"\"\n    for char in test_str:\n        if char not in (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"):\n            new_string += char\n    return \"\".join(new_string)\n    \ndef is_palindrome(test_str):\n    '''\n    Write a function that checks if the given string is a palindrome.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    new_string = \"\"\n    for char in test_str:\n        if char not in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            new_string += char\n    if new_string == new_string[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_lucky_number(test_str):\n    '''\n    Write a function that checks if the given string is a lucky number.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    new_string = \"\"\n    for char in test_str:\n        if char not in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            new_string += char\n    if new_string == new_string[::-1]:\n        return True\n    else:\n        return False\n    \ndef count_numbers(test_str):\n    '''\n    Write a function that returns the number of times that a given\n    string occurs in the given string.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    lst = []\n    for char in test_str:\n        if char.isdigit():\n            lst.append(int(char))\n    count = 0\n    for i in range(len(lst)):\n        count += lst[i]\n    return count\n    \ndef count_vowels(test_str):\n    '''\n    Write a function that counts the number of vowels in the given string.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    lst = []\n    for char in test_str:\n        if char in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            lst.append(char)\n    count = 0\n    for i in range(len(lst)):\n        count += lst[i].count(\"a\") + lst[i].count(\"e\") + lst[i].count(\"i\") + lst[i].count(\"o\") + lst[i].count(\"u\")\n    return count\n    \ndef count_consonants(test_str):\n    '''\n    Write a function that counts the number of consonants in the given string.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    lst = []\n    for char in test_str:\n        if char in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            lst.append(char)\n    count = 0\n    for i in range(len(lst)):\n        count += lst[i].count(\"a\") + lst[i].count(\"e\") + lst[i].count(\"i\") + lst[i].count(\"o\") + lst[i].count(\"u\")\n    return count\n    \ndef is_ecsil_number(test_str):\n    '''\n    Write a function that checks if the given string is a \"ecsil\" number.\n    '''\n    if test_str == \"\":\n        return \"Error: String cannot be empty\"\n    \n    lst = []\n    for char in test_str:\n        if char in (\"A\", \"E\", \"I\", \"O\", \"U\"):\n            lst.append(char)\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Empty string\n    test_str_list = test_str.split()\n    for i in range(len(test_str_list)):\n        test_str_list[i] = int(test_str_list[i])\n    return test_str_list\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Your code here\n    temp=[]\n    for i in test_str:\n        if i.isnumeric():\n            temp.append(i)\n    nums=[]\n    for i in range(len(temp)):\n        nums.append(int(temp[i]))\n    nums.sort()\n    for i in range(len(nums)):\n        temp[i]=str(nums[i])\n    return ''.join(temp)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l=len(test_str)\n    for i in range(0,l):\n        if test_str[i].isnumeric() == True:\n            num = test_str[i]\n            test_str=test_str[0:i]\n            test_str+='0'\n            test_str+='0'\n            test_str+=str(num)\n            if test_str[-1] == '0':\n                test_str=test_str[0:-1]\n                test_str+='0'\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # remove whitespace\n    test_str = test_str.strip()\n    \n    # remove all integers\n    test_str = test_str.replace('-', '')\n    \n    # remove all non-numeric characters\n    test_str = re.sub('[^0-9]', '', test_str)\n    \n    # remove all duplicate characters\n    test_str = ''.join(sorted(set(test_str)))\n    \n    # remove all consecutive duplicates\n    test_str = test_str.replace('-', '')\n    \n    # convert to lowercase\n    test_str = test_str.lower()\n    \n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str[::-1]\n    test_str_list = test_str.split(\" \")\n    test_str_list.insert(0, test_str_list.pop(0))\n    test_str_list = test_str_list + test_str_list[1:]\n    test_str_list = \" \".join(test_str_list)\n    return test_str_list\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                return largest\n            if a[j] % a[i] == 0:\n                return largest\n        largest += 1\n    return largest\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    result = 0\n    for i in range(n):\n        for j in range(i,n):\n            temp = a[i]\n            a[i] = a[j]\n            a[j] = temp\n            if a[i] % a[j] == 0:\n                result = max(a[i],result)\n            else:\n                result = 0\n                break\n            a[i] = temp\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_set = 1\n    start = 1\n    end = len(a)\n    for i in range(len(a)):\n        if a[i] % start == 0 and a[i] % end == 0:\n            max_set += 1\n        else:\n            start = a[i]\n            end = a[i]\n    return max_set\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    for i in range(1, n):\n        if (a[i] % a[i - 1] == 0):\n            return a[i]\n    return -1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    nums = []\n    for i in range(n):\n        num = a[i]\n        while num % 2 == 0:\n            num /= 2\n            nums.append(num)\n        if num not in nums:\n            nums.append(num)\n    \n    def helper(s,p,t):\n        if s == t:\n            return 1\n        if t-s < 0 or p-t < 0:\n            return 0\n        if p-t < 0:\n            return 0\n        ans = float('inf')\n        for i in range(p,t+1):\n            ans = max(ans,helper(s,i,t))\n        return ans + helper(s,p,t)\n    return max(helper(0,0,n),helper(0,n,n))"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    f = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if a[i]%a[j]==0:\n                f = max(f,j-i)\n    return f\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    length_list = len(a)\n    if length_list == 1:\n        return length_list\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest_subset = 1\n    smallest_number = None\n    for x in range(len(a)):\n        for y in range(x, len(a)):\n            if a[y] % a[x] == 0:\n                if smallest_number == None or a[y] > smallest_number:\n                    smallest_number = a[y]\n                if smallest_number < a[x] and largest_subset < smallest_number:\n                    largest_subset = smallest_number\n    return largest_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    res = 1\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                res = max(res, j-i)\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    print('Solving problem 2:')\n    max_number = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0 and a[i] <= a[j]:\n                max_number = max(max_number,j-i)\n                print(f'a[i]: {a[i]}, a[j]: {a[j]}, max_number: {max_number}')\n    print(' ')\n    print('Largest subset is: ', a[max_number-1])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #write your code here\n    if (n <= 1):\n        return arr1[n-1]\n    else:\n        median = arr1[n//2]\n        return get_median(arr1[:n//2], arr2[:n//2], n//2)\n    \n    # write your code here\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if n%2 == 0:\n        return (arr1[n//2]+arr2[n//2])/2\n    else:\n        return (arr1[n//2]+arr2[n//2])//2\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if (n <= 1):\n        return arr1[n-1]\n    else:\n        return get_median(arr1[:n//2], arr2[:n//2], n//2)\n    \n    # write your code here\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if n%2 == 0:\n        return (arr1[n//2]+arr2[n//2])/2\n    else:\n        return (arr1[n//2]+arr2[n//2])//2\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if n % 2 == 0:\n        return (arr1[n//2]+arr2[n//2])/2\n    else:\n        return (arr1[n//2]+arr2[n//2])//2\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if n%2 == 0:\n        return (arr1[n//2]+arr2[n//2])/2\n    else:\n        return (arr1[n//2]+arr2[n//2])//2\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if n % 2 == 0:\n        return (arr1[n//2]+arr2[n//2])/2\n    else:\n        return (arr1[n//2]+arr2[n//2])//2\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if n % 2 == 0:\n        return (arr1[n//2]+arr2[n//2])/2\n    else:\n        return (arr1[n//2]+arr2[n//2])//2\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if n % 2 == 0:\n        return (arr1[n//2]+arr2[n//2])/2\n    else:\n        return (arr1[n//2]+arr2[n//2])//2\n    \ndef get_q1_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        count += 1\n    return count//len(arr)\n    \ndef get_q3_k(arr):\n    '''\n    Find the most common value in an array\n    '''\n    # write your code here\n    count = 0\n    for i in arr:\n        coun"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if list is empty or two elements long\n    if (len(arr1) < 2 or len(arr2) < 2):\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) >= len(arr2):\n        arr1, arr2 = arr2, arr1\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n    \ndef get_mode(arr1, arr2, n):\n    '''\n    Write a function that returns the mode of an array.\n    '''\n    count = {}\n    for i in range(n):\n        if arr1[i] in count:\n            count[arr1[i]] += 1\n        else:\n            count[arr1[i]] = 1\n    maximum = max(count.values())\n    # sort dictionary by value and print the key with largest value\n    for i in sorted(count.keys()):\n        if count[i] == maximum:\n            return i\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Use quick sort to sort the lists\n    if n == 1:\n        return arr1[0]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    \n    if len(arr1) == 0:\n        return arr2[n//2]\n    elif len(arr2) == 0:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    \n    if n % 2 == 0:\n        return (arr1[int(len(arr1)/2)] + arr2[int(len(arr2)/2)]) / 2\n    else:\n        return (arr1[int(len(arr1)/2)] + arr2[int(len(arr2)/2)])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1, l2 = 0, 0\n    while l1 < n and l2 < n:\n        if arr1[l1] < arr2[l2]:\n            l1 += 1\n        else:\n            l2 += 1\n            \n    if l1 == n:\n        return arr2[l2]\n    elif l2 == n:\n        return arr1[l1]\n    else:\n        return (arr1[l1] + arr2[l2]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        median = arr1\n        median.sort()\n        if len(median) % 2 == 0:\n            return median[len(median) // 2]\n        else:\n            return median[(len(median) // 2) - 1]\n    else:\n        median = arr2\n        median.sort()\n        if len(median) % 2 == 0:\n            return median[len(median) // 2]\n        else:\n            return median[(len(median) // 2) - 1"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    median = (arr1[n // 2] + arr2[n // 2]) / 2\n    # Finding the middle element\n    if n % 2 == 1:\n        median = arr1[n // 2] + arr2[n // 2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    \n    if len(arr1) == len(arr2):\n        if n % 2 == 0:\n            return (arr1[n//2] + arr2[n//2])/2\n        else:\n            return (arr1[n//2] + arr2[n//2])\n    \n    elif n == 1:\n        return arr1[0]\n    \n    elif n == 2:\n        return (arr1[0] + arr2[0])/2\n    \n    else:\n        return (arr1[n//2] + arr2[n//2])\n    \ndef get_median_index(arr, n):\n    '''\n    Write a function to get the index of the median from a sorted array.\n    '''\n    median_index = 0\n    for i in range(0, n):\n        if n % 2 == 0:\n            median_index = (n//2) + (i*2)\n        else:\n            median_index = (n//2) + i\n        if median_index == n // 2:\n            return median_index\n        \ndef get_mode(arr):\n    '''\n    Write a function to find the most common number.\n    '''\n    count = {}\n    for element in arr:\n        if element in count:\n            count[element] += 1\n        else:\n            count[element] = 1\n    \n    maximum = max(count.values())\n    \n    for key in count:\n        if count[key] == maximum:\n            return key\n        \ndef get_mode_index(arr):\n    '''\n    Write a function to get the index of the mode from a sorted array.\n    '''\n    mode_index = 0\n    for i in range(0, len(arr)):\n        if arr[i] == max(arr):\n            mode_index = i\n    return mode_index\n    \ndef get_median_grouped(arr, n):\n    '''\n    Write a function to get the median of a grouped array.\n    '''\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return (arr[0] + arr[1])/2\n    else:\n        return (arr[n//2] + arr[n//2])/2\n    \ndef get_median_grouped_index(arr, n):\n    '''\n    Write a function to get the index of the median from a grouped array.\n    '''\n    grouped = {}\n    \n    for i in range(0, n):\n        if i!= n//2:\n            grouped[arr[i]] = arr[i]\n        else:\n            grouped[arr[i]] = arr[i]\n    \n    return grouped\n    \ndef get_mean(arr):\n    '''\n    Write a function to find the mean of a sorted array.\n    '''\n    sum = 0\n    for element in arr:\n        sum += element\n    return sum/len(arr)\n    \ndef get_mean_index(arr, n):\n    '''\n    Write a function to get the index of the mean from a sorted array.\n    '''\n    mean = get_mean(arr)\n    return (n*len(arr))/mean\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = [1] * n\n    for i in range(1,n):\n        res[i] = res[i-1] * nums[i-1]\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [n,n]\n    elif n == 3:\n        return [n,n,n]\n    else:\n        result = []\n        for i in range(1,n):\n            result += [n]*i\n        return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return [nums[0]]\n    return [nums[0]**i for i in range(n+1)]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums)==1:\n        return nums\n    elif len(nums)==2:\n        return [nums[1]*nums[1]]\n    elif len(nums)==3:\n        return [nums[1]*nums[2]*nums[1]]\n    else:\n        power=[nums[0]*nums[1]*nums[2]]\n        for i in range(3,len(nums)):\n            power.append(nums[i]*nums[i-1]*nums[i-2])\n        return power\n    \n    \ndef count_numbers(n):\n    '''\n    Returns an integer given a positive integer n\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return 1+count_numbers(n-1)\n    \nprint(count_numbers(5))"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_str = map(str,nums)\n    new_nums_str = ''.join(nums_str)\n    nums_str_list = list(new_nums_str)\n    #print(nums_str_list)\n    result = 1\n    for i in range(len(nums_str_list)):\n        result = result*nums_str_list[i]\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = [1]*n\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pow=1\n    for i in range(n-1):\n        pow=pow*nums[i]\n    return pow\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(x, n) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    powers=[]\n    if len(nums)==0 or len(nums)<=1:\n        return [1]\n    else:\n        for i in range(len(nums)):\n            if nums[i]==n:\n                powers.append(nums[i])\n    return powers\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string,str):\n        return string.upper()\n    return string\n    \ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    if isinstance(string,str):\n        return string.lower()\n    return string\n    \ndef is_number(string):\n    '''\n    Write a python function to convert a given string to integer.\n    '''\n    if isinstance(string,str):\n        return int(string)\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == string:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if(string == None or type(string) is str):\n        return string.upper()\n    else:\n        return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    return False\n    "
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    converted_string = string.upper()\n    return converted_string\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.append(newList[0])\n    newList.append(newList[-1])\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # For loop to interchange the first element and the last element of the list.\n    for i in range(len(newList)-1):\n        newList[i], newList[i+1] = newList[i+1], newList[i]\n    # print(newList)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # first_element = newList[0]\n    # last_element = newList[-1]\n    # newList[0] = last_element\n    # newList[-1] = first_element\n    # return newList\n    \n    newList.reverse()\n    \n    return newList\n    \n    \ndef list_sum(a,b):\n    '''\n    Write a python function that returns the sum of the two given lists.\n    '''\n    \n    return sum(a) + sum(b)\n    \n    \ndef merge_sort(a):\n    '''\n    Write a python function to merge two sorted lists into a single sorted list.\n    '''\n    \n    # If the list is empty\n    if len(a) < 2:\n        return a\n    \n    # if a and b are both sorted, return the larger list\n    if a[0] <= b[0]:\n        return [a[0]] + merge_sort(a[1:])\n    else:\n        return [b[0]] + merge_sort(b[1:])\n    \n    \ndef bubble_sort(a):\n    '''\n    Write a python function to sort a list.\n    '''\n    \n    # If the list is empty\n    if len(a) < 1:\n        return a\n        \n    # For each element in the list,\n    for i in range(len(a)):\n        for j in range(len(a) - i - 1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return [newList[1], newList[0]]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Write your code here.\n    first = newList.pop(0)\n    last = newList.pop()\n    newList.insert(0, last)\n    newList.insert(0, first)\n    return newList \n    \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList.reverse()\n    first = newList.pop(0)\n    last = newList.pop()\n    \n    newList.append(last)\n    newList.append(first)\n    return newList\n    \n    "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #  if the lenght of the list is greater than 1, the function will print the lenght\n    if len(newList)>1:\n        #  swap the first and last element in the given list\n        print(\"The order of the given list: \", end=\"\")\n        print(newList, end=\" \")\n        #  create a temp variable with the last element of the given list\n        temp = newList[-1]\n        #  swap the first element with the last element of the given list\n        newList[-1] = newList[0]\n        #  add the temp to the end of the list\n        newList.append(temp)\n        #  delete the last element from the list\n        newList.pop(-1)\n        #  print the new list\n        print(\"The order of the new list: \", end=\"\")\n        print(newList)\n        #  else:\n        #    print the given list\n        #    print(newList)\n    else:\n        print(\"The given list is empty\")\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    '''\n    You may assume that the radius of a triangle is r.\n    '''\n    a = int(input(\"Enter a side length:\"))\n    b = int(input(\"Enter b side length:\"))\n    c = int(input(\"Enter c side length:\"))\n    '''\n    Write a python function to calculate the area of a triangle given a side length and side lengths, b side length, and c side length.\n    '''\n    def triangle_area(r) :\n        if r <= 0 :\n            print(\"Please enter a positive integer.\")\n            return\n        elif a <= 0 :\n            print(\"Please enter a positive integer.\")\n            return\n        elif b <= 0 :\n            print(\"Please enter a positive integer.\")\n            return\n        elif c <= 0 :\n            print(\"Please enter a positive integer.\")\n            return\n        else :\n            side_length = a + b + c\n            area = (side_length*(side_length-a)*(side_length-b)*(side_length-c))**0.5\n            print(\"Area of a triangle is: \", area)\n    triangle_area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 0:\n        return 0\n    elif r == 1:\n        return 3\n    elif r == 2:\n        return 4\n    elif r == 3:\n        return 5\n    elif r == 4:\n        return 6\n    elif r == 5:\n        return 7\n    elif r == 6:\n        return 8\n    elif r == 7:\n        return 9\n    elif r == 8:\n        return 10\n    elif r == 9:\n        return 11\n    elif r == 10:\n        return 12\n    elif r == 11:\n        return 13\n    elif r == 12:\n        return 14\n    elif r == 13:\n        return 15\n    elif r == 14:\n        return 16\n    elif r == 15:\n        return 17\n    elif r == 16:\n        return 18\n    elif r == 17:\n        return 19\n    elif r == 18:\n        return 20\n    elif r == 19:\n        return 21\n    elif r == 20:\n        return 22\n    elif r == 21:\n        return 23\n    elif r == 22:\n        return 24\n    elif r == 23:\n        return 25\n    elif r == 24:\n        return 26\n    elif r == 25:\n        return 27\n    elif r == 26:\n        return 28\n    elif r == 27:\n        return 29\n    elif r == 28:\n        return 30\n    elif r == 29:\n        return 31\n    elif r == 30:\n        return 32\n    elif r == 31:\n        return 33\n    elif r == 32:\n        return 34\n    elif r == 33:\n        return 35\n    elif r == 34:\n        return 36\n    elif r == 35:\n        return 37\n    elif r == 36:\n        return 38\n    elif r == 37:\n        return 39\n    elif r == 38:\n        return 40\n    elif r == 39:\n        return 41\n    elif r == 40:\n        return 42\n    elif r == 41:\n        return 43\n    elif r == 42:\n        return 44\n    elif r == 43:\n        return 45\n    elif r == 44:\n        return 46\n    elif r == 45:\n        return 47\n    elif r == 46:\n        return 48\n    elif r == 47:\n        return 49\n    elif r == 48:\n        return 50\n    elif r == 49:\n        return 51\n    elif r == 50:\n        return 52\n    elif r == 51:\n        return 53\n    elif r == 52:\n        return 54\n    elif r == 53:\n        return 55\n    elif r == 54:\n        return 56\n    elif r == 55:\n        return 57\n    elif r == 56:\n        return 58\n    elif r == 57:\n        return 59\n    elif r == 58:\n        return 60\n    elif r == 59:\n        return 61\n    elif r == 60:\n        return 62\n    elif r == 61:\n        return 63\n    elif r == 62:\n        return 64\n    elif r == 63:\n        return 65\n    elif r == 64:\n        return 66\n    elif r == 65:\n        return 67\n    elif r == 66:\n        return 68\n    elif r == 67:\n        return 69\n    elif r == 68:\n        return 70\n    elif r == 69:\n        return 71\n    elif r == 70:\n        return 72\n    elif r == 71:\n        return 73\n    elif r == 72:\n        return 74\n    elif r == 73:\n        return 75\n    elif r == 74:\n        return 76\n    elif r == 75:\n        return 77\n    elif r == 76:\n        return 78\n    elif r == 77:\n        return 79\n    elif r == 78:\n        return 80\n    elif r == 79:\n        return 81\n    elif r == 80:\n        return 82\n    elif r == 81:\n        return 83\n    elif r == 82:\n        return 84\n    elif r == 83:\n        return 85\n    elif r == 84:\n        return 86\n    elif r == 85:\n        return 87\n    elif r == 86:\n        return 88\n    elif r == 87:\n        return 89\n    elif r == 88:\n        return 90\n    elif r == 89:\n        return 91\n    elif r == 90:\n        return 92\n    elif r == 91:\n        return 93\n    elif r == 92:\n        return 94\n    elif r == 93:\n        return 95\n    elif r == 94:\n        return 96\n    elif r == 95:\n        return 97\n    elif r == 96:\n        return 98\n    elif r == 97:\n        return 99\n    elif r == 98:\n        return 100\n    elif r == 99:\n        return 101\n    elif r == 100:\n        return 102\n    elif r == 101:\n        return 103\n    elif r == 102:\n        return 104\n    elif r == 103:\n        return 105\n    elif r == 104:\n        return 106\n    elif r == 105:\n        return 107\n    elif r == 106:\n        return 108\n    elif r == 107:\n        return 109\n    elif r == 108:\n        return 110\n    elif r == 109:\n        return 111\n    elif r == 110:\n        return 112\n    elif r == 111:\n        return 113\n    elif r == 112:\n        return 114\n    elif r == 113:\n        return 115\n    elif r == 114:\n        return 116\n    elif r == 115:\n        return 117\n    elif r == 116:\n        return 118\n    elif r == 117:\n        return 119\n    elif r == 118:\n        return 120\n    elif r == 119:\n        return 121\n    elif r == 120:\n        return 122\n    elif r == 121:\n        return 123\n    elif r == 122:\n        return 124\n    elif r == 123:\n        return 125\n    elif r == 124:\n        return 126\n    elif r == 125:\n        return 127\n    elif r == 126:\n        return 128\n    elif r == 127:\n        return 129\n    elif r == 128:\n        return 130\n    elif r == 129:\n        return 131\n    elif r == 130:\n        return 132\n    elif r == 131:\n        return 133\n    elif r == 132:\n        return 134\n    elif r == 133:\n        return 135\n    elif r == 134:\n        return 136\n    elif r == 135:\n        return 137\n    elif r == 136:\n        return 138\n    elif r == 137:\n        return 139\n    elif r == 138:\n        return 140\n    elif r == 139:\n        return 141\n    elif r == 140:\n        return 142\n    elif r == 141:\n        return 143\n    elif r == 142:\n        return 144\n    elif r == 143:\n        return 145\n    elif r == 144:\n        return 146\n    elif r == 145:\n        return 147\n    elif r == 146:\n        return 148\n    elif r == 147:\n        return 149\n    elif r == 148:\n        return 150\n    elif r == 149:\n        return 151\n    elif r == 150:\n        return 152\n    elif r == 151:\n        return 153\n    elif r == 152:\n        return 154\n    elif r == 153:\n        return 155\n    elif r == 154:\n        return 156\n    elif r == 155:\n        return 157\n    elif r == 156:\n        return 158\n    elif r == 157:\n        return 159\n    elif r == 158:\n        return 160\n    elif r == 159:\n        return 161\n    elif r == 160:\n        return 162\n    elif r == 161:\n        return 163\n    elif r == 162:\n        return 164\n    elif r == 163:\n        return 165\n    elif r == 164:\n        return 166\n    elif r == 165:\n        return 167\n    elif r == 166:\n        return 16"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    if (r < 0) :\n        return 0\n    elif (r == 0) :\n        return 1\n    else :\n        d = (4 * math.pi) / 3\n        return (math.tan(d/2) * (r ** 2)) + (4 * math.pi * r ** 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r ** 2 - 2 * r * np.cos(np.pi / 2)) ** (1 / 2)\n    area = np.pi * (r ** 2)\n    if a <= 0:\n        print(f\"A {round(area, 3)}\")\n    else:\n        print(f\"Area of {r} x {a} is {round(area, 3)}\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # using for loop\n    area = 0\n    for i in range(1,r+1) :\n        for j in range(1,r+1) :\n            if (i*j) == r :\n                area = area + 1\n    return (area)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    a = (r ** 2) * 3\n    b = 2 * (r + 1)\n    c = (r ** 2) * (r + 1) - (r + 1) ** 2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r==0):\n        print(\"The triangle is already inscribed\")\n    elif (r<0):\n        print(\"The diameter of the triangle must be positive\")\n        return\n    elif (r>0):\n        pi = 3.14159\n        x = r * 0.5\n        phi = (pi * x) / (pi * x - 1)\n        print(\"The area of the triangle is : {:.6f}\".format(pi * (x - 1) * (x + 1) / 4))\n    else:\n        print(\"The radius must be positive\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = ((r ** 2) + (r ** 2) - 1) / 2\n    if a <= 0:\n        return \"The area of the triangle cannot be calculated because it is a zero value.\"\n    else:\n        return a\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    if r <= 0 :\n        return \"Invalid radius\"\n    if r < 1 :\n        return \"Invalid radius\"\n    \n    if (r == 0) :\n        return 3.14 * (1/2)\n        \n    if (r == 1) :\n        return 2 * 3.14 * (1/2)\n        \n    if (r == 2) :\n        return 3.14 * (1/2) * 2\n    \n    if (r == 3) :\n        return 3.14 * (1/2) * 3\n        \n    if (r == 4) :\n        return 6 * 3.14 * (1/2)\n    \n    if (r == 5) :\n        return 6 * 3.14 * (1/2) * 3\n        \n    if (r == 6) :\n        return 6 * 3.14 * (1/2) * 4\n        \n    if (r == 7) :\n        return 9 * 3.14 * (1/2) * 4\n        \n    if (r == 8) :\n        return 9 * 3.14 * (1/2) * 5\n        \n    if (r == 9) :\n        return 9 * 3.14 * (1/2) * 6\n        \n    if (r == 10) :\n        return 18 * 3.14 * (1/2) * 6\n        \n    if (r == 11) :\n        return 18 * 3.14 * (1/2) * 7\n        \n    if (r == 12) :\n        return 18 * 3.14 * (1/2) * 8\n        \n    if (r == 13) :\n        return 30 * 3.14 * (1/2) * 9\n        \n    if (r == 14) :\n        return 30 * 3.14 * (1/2) * 10\n        \n    if (r == 15) :\n        return 30 * 3.14 * (1/2) * 11\n        \n    if (r == 16) :\n        return 60 * 3.14 * (1/2) * 12\n        \n    if (r == 17) :\n        return 60 * 3.14 * (1/2) * 13\n        \n    if (r == 18) :\n        return 60 * 3.14 * (1/2) * 14\n        \n    if (r == 19) :\n        return 90 * 3.14 * (1/2) * 15\n        \n    if (r == 20) :\n        return 90 * 3.14 * (1/2) * 16\n        \n    if (r == 21) :\n        return 90 * 3.14 * (1/2) * 17\n        \n    if (r == 22) :\n        return 90 * 3.14 * (1/2) * 18\n        \n    if (r == 23) :\n        return 180 * 3.14 * (1/2) * 19\n        \n    if (r == 24) :\n        return 180 * 3.14 * (1/2) * 20\n        \n    if (r == 25) :\n        return 180 * 3.14 * (1/2) * 21\n        \n    if (r == 26) :\n        return 180 * 3.14 * (1/2) * 22\n        \n    if (r == 27) :\n        return 180 * 3.14 * (1/2) * 23\n        \n    if (r == 28) :\n        return 180 * 3.14 * (1/2) * 24\n        \n    if (r == 29) :\n        return 180 * 3.14 * (1/2) * 25\n        \n    if (r == 30) :\n        return 180 * 3.14 * (1/2) * 26\n        \n    if (r == 31) :\n        return 180 * 3.14 * (1/2) * 27\n        \n    if (r == 32) :\n        return 360 * 3.14 * (1/2) * 28\n        \n    if (r == 33) :\n        return 360 * 3.14 * (1/2) * 29\n        \n    if (r == 34) :\n        return 360 * 3.14 * (1/2) * 30\n        \n    if (r == 35) :\n        return 360 * 3.14 * (1/2) * 31\n        \n    if (r == 36) :\n        return 360 * 3.14 * (1/2) * 32\n        \n    if (r == 37) :\n        return 360 * 3.14 * (1/2) * 33\n        \n    if (r == 38) :\n        return 360 * 3.14 * (1/2) * 34\n        \n    if (r == 39) :\n        return 360 * 3.14 * (1/2) * 35\n        \n    if (r == 40) :\n        return 360 * 3.14 * (1/2) * 36\n        \n    if (r == 41) :\n        return 720 * 3.14 * (1/2) * 37\n        \n    if (r == 42) :\n        return 720 * 3.14 * (1/2) * 38\n        \n    if (r == 43) :\n        return 720 * 3.14 * (1/2) * 39\n        \n    if (r == 44) :\n        return 720 * 3.14 * (1/2) * 40\n        \n    if (r == 45) :\n        return 720 * 3.14 * (1/2) * 41\n        \n    if (r == 46) :\n        return 720 * 3.14 * (1/2) * 42\n        \n    if (r == 47) :\n        return 720 * 3.14 * (1/2) * 43\n        \n    if (r == 48) :\n        return 720 * 3.14 * (1/2) * 44\n        \n    if (r == 49) :\n        return 720 * 3.14 * (1/2) * 45\n        \n    if (r == 50) :\n        return 720 * 3.14 * (1/2) * 46\n        \n    if (r == 51) :\n        return 720 * 3.14 * (1/2) * 47\n        \n    if (r == 52) :\n        return 720 * 3.14 * (1/2) * 48\n        \n    if (r == 53) :\n        return 720 * 3.14 * (1/2) * 49\n        \n    if (r == 54) :\n        return 720 * 3.14 * (1/2) * 50\n        \n    if (r == 55) :\n        return 720 * 3.14 * (1/2) * 51\n        \n    if (r == 56) :\n        return 720 * 3.14 * (1/2) * 52\n        \n    if (r == 57) :\n        return 720 * 3.14 * (1/2) * 53\n        \n    if (r == 58) :\n        return 720 * 3.14 * (1/2) * 54\n        \n    if (r == 59) :\n        return 720 * 3.14 * (1/2) * 55\n        \n    if (r == 60) :\n        return 720 * 3.14 * (1/2) * 56\n        \n    if (r == 61) :\n        return 720 * 3.14 * (1/2) * 57\n        \n    if (r == 62) :\n        return 720 * 3.14 * (1/2) * 58\n        \n    if (r == 63) :\n        return 720 * 3.14 * (1/2) * 59\n        \n    if (r == 64) :\n        return 720 * 3.14 * (1/2) * 60\n        \n    if (r == 65) :\n        return 720 * 3.14 * (1/2) * 61\n        \n    if (r == 66) :\n        return 720 * 3.14 * (1/2) * 62\n        \n    if (r == 67) :\n        return 720 * 3.14 * (1/2) * 63\n        \n    if (r == 68) :\n        return 720 * 3.14 * (1/2) * 64\n        \n    if (r == 69) :\n        return 720 * 3.14 * (1/2) * 65\n        \n    if (r == 70) :\n        return 720 * 3.14 * (1/2) * 66\n        \n    if (r == 71) :\n        return 720 * 3.14 * (1/2) * 67\n        \n    if (r == 72) :\n        return 720 * 3.14 * (1/2) * 68\n        \n    if (r == 73) :\n        retur"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        return 0\n    else:\n        if start == end:\n            if array[start] == end:\n                return end\n            else:\n                return find_First_Missing(array,start+1,end)\n        elif array[start] < array[end]:\n            return end\n        else:\n            return start\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    # Find the position of the missing number\n    pos = end\n    while pos>=start:\n        if array[pos]==end:\n            pos-=1\n        else:\n            break\n    return array[pos]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    left = start\n    right = end-1\n    while(left <= right):\n        mid = (left + right)//2\n        if array[mid] < mid:\n            left = mid + 1\n        elif array[mid] > mid:\n            right = mid - 1\n        else:\n            return array[mid]\n    return array[left]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) -1\n    if start < 0 or end > len(array):\n        return None\n    \n    for i in range(start,end+1):\n        if i < end and array[i] == array[i+1]:\n            continue\n        \n        if i > start and array[i]!= array[i-1]:\n            continue\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    \n    p=start\n    i=0\n    while i<=end:\n        if array[p]>array[i]:\n            temp=array[p]\n            array[p]=array[i]\n            array[i]=temp\n            p+=1\n            i+=1\n        i+=1\n    return array[p]\n        \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start<=end:\n        p=array[start]\n        if array[start]>array[end]:\n            p=array[end]\n            if p<array[start]:\n                end-=1\n                p=array[start]\n            else:\n                return find_First_Missing(array,start+1,end)\n        if p==start:\n            p=array[end]\n            if p<array[start]:\n                p=array[start]\n                if p<array[end]:\n                    p=array[end]\n                    if p<array[start]:\n                        return find_First_Missing(array,start+1,end)\n                    else:\n                        return end\n                else:\n                    return start\n            else:\n                return end\n        else:\n            return end\n    else:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return start\n    mid = (start+end)//2\n    if array[mid] > array[mid+1]:\n        return find_First_Missing(array,start,mid)\n    elif array[mid] == array[mid+1]:\n        mid = (start+mid+1)//2\n        if array[mid] > array[mid+1]:\n            return mid\n        else:\n            return find_First_Missing(array,mid,end)\n    else:\n        return mid\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    low=0\n    high=len(array)-1\n    mid=int((high+low)/2)\n    if mid==0:\n        return 0\n    if array[mid]==start:\n        return 0\n    if array[mid]==end:\n        return end-mid+1\n    elif array[mid]>start:\n        low=mid\n    elif array[mid]<end:\n        high=mid\n    return find_First_Missing(array,start,high)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = ''\n    for c in string:\n        if c =='':\n            result += '%20'\n        else:\n            result += c\n    return result\n    \ndef replace_digits(string):\n    '''\n    Write a function to replace all digits in the given string with '%10'.\n    '''\n    result = ''\n    for c in string:\n        if c.isdigit():\n            result += '%10'\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20'"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n    \ndef load_file(file_name):\n    '''\n    Write a function to load a file.\n    '''\n    with open(file_name, 'r') as f:\n        data = f.readlines()\n    return data\n        \ndef save_file(data, file_name):\n    '''\n    Write a function to save a file.\n    '''\n    with open(file_name, 'w') as f:\n        for line in data:\n            f.write(line)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n    \ndef main():\n    test_string = 'Hello world'\n    print(replace_spaces(test_string))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return re.sub(' +','%20',string)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list=[]\n    for item in list: \n        if item%2==0: \n            new_list.append(item) \n    return new_list\n    \nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [] \n    odd = [] \n    for num in list: \n        if num % 2 == 0: \n            even.append(num) \n        else: \n            odd.append(num) \n    return even, odd \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [number for number in list if number % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list: \n        if number % 2 == 0: \n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list=[]\n    odd_list=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even_list.append(list[i])\n        else:\n            odd_list.append(list[i])\n    print(even_list)\n    print(odd_list)\n    \nSplit([1,2,3,4,5,6,7,8,9,10])\nSplit([1,2,3,4,5,6,7,8,9,10])\nSplit([])\nSplit([])\nSplit([])\nSplit([]"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = list[::2] \n    even.remove(0) \n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i)\n    return even\ndef Sum_Even_Numbers(list): \n    '''\n    Write a python function to get sum of even numbers from a list.\n    '''\n    total = 0\n    for i in list: \n        total += i \n    return total\nprint (\"SUM OF EVEN NUMBERS\")\nprint (Sum_Even_Numbers(numbers))\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        return ele\n    elif ele < 0:\n        ele = (ele + sub[-1]) % len(sub)\n    elif ele > len(sub)-1:\n        ele = (ele - sub[0]) % len(sub)\n    return sub[ele]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #print(type(sub))\n    if ele == (0, 0):\n        return sub\n    if ele == (0, 1):\n        return [(0,0),(0,1),(1,0),(1,1)]\n    if ele == (1, 0):\n        return [(0,1),(1,1),(0,2),(1,2)]\n    if ele == (1, 1):\n        return [(0,2),(1,2),(0,3),(1,3)]\n    if ele == (2, 0):\n        return [(0,3),(1,3),(0,4),(1,4)]\n    if ele == (2, 1):\n        return [(0,4),(1,4),(0,5),(1,5)]\n    if ele == (2, 2):\n        return [(0,5),(1,5),(0,6),(1,6)]\n    if ele == (3, 0):\n        return [(0,6),(1,6),(0,7),(1,7)]\n    if ele == (3, 1):\n        return [(0,7),(1,7),(0,8),(1,8)]\n    if ele == (3, 2):\n        return [(0,8),(1,8),(0,9),(1,9)]\n    if ele == (3, 3):\n        return [(0,9),(1,9),(0,10),(1,10)]\n    if ele == (3, 4):\n        return [(0,10),(1,10),(0,11),(1,11)]\n    if ele == (3, 5):\n        return [(0,11),(1,11),(0,12),(1,12)]\n    if ele == (3, 6):\n        return [(0,12),(1,12),(0,13),(1,13)]\n    if ele == (3, 7):\n        return [(0,13),(1,13),(0,14),(1,14)]\n    if ele == (3, 8):\n        return [(0,14),(1,14),(0,15),(1,15)]\n    if ele == (3, 9):\n        return [(0,15),(1,15),(0,16),(1,16)]\n    if ele == (3, 10):\n        return [(0,16),(1,16),(0,17),(1,17)]\n    if ele == (3, 11):\n        return [(0,17),(1,17),(0,18),(1,18)]\n    if ele == (3, 12):\n        return [(0,18),(1,18),(0,19),(1,19)]\n    if ele == (3, 13):\n        return [(0,19),(1,19),(0,20),(1,20)]\n    if ele == (3, 14):\n        return [(0,20),(1,20),(0,21),(1,21)]\n    if ele == (3, 15):\n        return [(0,21),(1,21),(0,22),(1,22)]\n    if ele == (3, 16):\n        return [(0,22),(1,22),(0,23),(1,23)]\n    if ele == (3, 17):\n        return [(0,23),(1,23),(0,24),(1,24)]\n    if ele == (3, 18):\n        return [(0,24),(1,24),(0,25),(1,25)]\n    if ele == (3, 19):\n        return [(0,25),(1,25),(0,26),(1,26)]\n    if ele == (3, 20):\n        return [(0,26),(1,26),(0,27),(1,27)]\n    if ele == (3, 21):\n        return [(0,27),(1,27),(0,28),(1,28)]\n    if ele == (3, 22):\n        return [(0,28),(1,28),(0,29),(1,29)]\n    if ele == (3, 23):\n        return [(0,29),(1,29),(0,30),(1,30)]\n    if ele == (3, 24):\n        return [(0,30),(1,30),(0,31),(1,31)]\n    if ele == (3, 25):\n        return [(0,31),(1,31),(0,32),(1,32)]\n    if ele == (3, 26):\n        return [(0,32),(1,32),(0,33),(1,33)]\n    if ele == (3, 27):\n        return [(0,33),(1,33),(0,34),(1,34)]\n    if ele == (3, 28):\n        return [(0,34),(1,34),(0,35),(1,35)]\n    if ele == (3, 29):\n        return [(0,35),(1,35),(0,36),(1,36)]\n    if ele == (3, 30):\n        return [(0,36),(1,36),(0,37),(1,37)]\n    if ele == (3, 31):\n        return [(0,37),(1,37),(0,38),(1,38)]\n    if ele == (3, 32):\n        return [(0,38),(1,38),(0,39),(1,39)]\n    if ele == (3, 33):\n        return [(0,39),(1,39),(0,40),(1,40)]\n    if ele == (3, 34):\n        return [(0,40),(1,40),(0,41),(1,41)]\n    if ele == (3, 35):\n        return [(0,41),(1,41),(0,42),(1,42)]\n    if ele == (3, 36):\n        return [(0,42),(1,42),(0,43),(1,43)]\n    if ele == (3, 37):\n        return [(0,43),(1,43),(0,44),(1,44)]\n    if ele == (3, 38):\n        return [(0,44),(1,44),(0,45),(1,45)]\n    if ele == (3, 39):\n        return [(0,45),(1,45),(0,46),(1,46)]\n    if ele == (3, 40):\n        return [(0,46),(1,46),(0,47),(1,47)]\n    if ele == (3, 41):\n        return [(0,47),(1,47),(0,48),(1,48)]\n    if ele == (3, 42):\n        return [(0,48),(1,48),(0,49),(1,49)]\n    if ele == (3, 43):\n        return [(0,49),(1,49),(0,50),(1,50)]\n    if ele == (3, 44):\n        return [(0,50),(1,50),(0,51),(1,51)]\n    if ele == (3, 45):\n        return [(0,51),(1,51),(0,52),(1,52)]\n    if ele == (3, 46):\n        return [(0,52),(1,52),(0,53),(1,53)]\n    if ele == (3, 47):\n        return [(0,53),(1,53),(0,54),(1,54)]\n    if ele == (3, 48):\n        return [(0,54),(1,54),(0,55),(1,55)]\n    if ele == (3, 49):\n        return [(0,55),(1,55),(0,56),(1,56)]\n    if ele == (3, 50):\n        return [(0,56),(1,56),(0,57),(1,57)]\n    if ele == (3, 51):\n        return [(0,57),(1,57),(0,58),(1,58)]\n    if ele == (3, 52):\n        return [(0,58),(1,58),(0,59),(1,59)]\n    if ele == (3, 53):\n        return [(0,59),(1,59),(0,60),(1,60)]\n    if ele == (3, 5"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele \n    if x == 0:\n        if y == 0:\n            sub.append((x+1,y+1))\n        elif y == (len(sub)-1):\n            sub.append((x+1,y-1))\n        else:\n            sub.append((x+1,y-1))\n            sub.append((x+1,y+1))\n        return sub\n    elif x == (len(sub)-1):\n        sub.append((x-1,y-1))\n        sub.append((x-1,y+1))\n        return sub\n    else:\n        sub.append((x-1,y-1))\n        sub.append((x-1,y+1))\n        sub.append((x+1,y-1))\n        sub.append((x+1,y+1))\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = []\n    if ele not in sub:\n        sub.append(ele)\n    for i in [x for x in sub if x not in sub]:\n        if x[0] > ele[0] and x[1] > ele[1]:\n            adjac(x)\n        elif x[0] > ele[0] and x[1] < ele[1]:\n            adjac(x)\n        elif x[0] < ele[0] and x[1] > ele[1]:\n            adjac(x)\n        elif x[0] < ele[0] and x[1] < ele[1]:\n            adjac(x)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0: \n        sub.append((ele[0], ele[1] - 1)) \n        sub.append((ele[0], ele[1] + 1)) \n        sub.append((ele[0] - 1, ele[1])) \n        sub.append((ele[0] + 1, ele[1])) \n    if ele[0] == ele[1] - 1: \n        sub.append((ele[0] - 1, ele[1])) \n    if ele[0] == ele[1] + 1: \n        sub.append((ele[0] + 1, ele[1])) \n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = sub + [ele]\n    for i in range(len(ele) - 1):\n        if ele[i] not in sub:\n            adjac(ele[i + 1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ([[ele[0] + i, ele[1] + j] for i in range(-1, 2) for j in range(-1, 2) if not i or not j])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == 0:\n        return sub\n    if ele < 0 or ele >= len(coordinates):\n        return sub\n    if sub == []:\n        sub.append(coordinates[ele])\n    else:\n        adjac(coordinates[ele][0], sub)\n        adjac(coordinates[ele][1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0]!= ele[1]: \n        return adjac(ele, sub)\n    if ele[0] == ele[1]: \n        sub.append(ele) \n    if ele[1] == ele[0]: \n        sub.append(ele) \n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub: \n        sub = (1, 1) \n    if ele == 'X': \n        return (sub[1] + 1, sub[0] + 1) \n    elif ele == 'Y': \n        return (sub[1] + 1, sub[0] + 1, sub[1] + 1, sub[0]) \n    elif ele == 'Z': \n        return (sub[1] + 1, sub[0] + 1, sub[1] + 1, sub[0] + 1, sub[1] + 1, sub[0]) \n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    text = text.replace('*', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('-', '_')\n    text = text.replace('_', '-')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('  ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('    ', '_')\n    text = text.replace('     ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('   ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return''.join(text.replace(' ', '_') for text in text.split())\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('-', '_')\n    text = text.replace('.', '_')\n    text = text.replace(';', '_')\n    text = text.replace(':', '_')\n    text = text.replace('!', '_')\n    text = text.replace('?', '_')\n    text = text.replace('*', '_')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\t', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(re.sub(\" +\", \"_\", text).split())\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    underscore_text = ''\n    for char in text:\n        if char =='':\n            underscore_text += '_'\n        else:\n            underscore_text += char\n    return underscore_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'*len(text)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ',' ')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace('  ','_')\n    text = text.replace("
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[i] + num_list[i]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    sum = 0\n    for i in range(0, len(num_list)):\n        if num_list[i]!= 0:\n            sum = sum + num_list[i]\n    return sum\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            num_list.pop(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(0, num_list.pop(i))\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            pass\n        else:\n            i = str(i)\n            num_list = num_list.replace(i, '')\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n    \ndef move_ones(num_list):\n    '''\n    Write a python function to move all ones to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 1:\n            num_list.remove(1)\n            num_list.append(1)\n    return num_list\n    \ndef move_zeros(num_list):\n    '''\n    Write a python function to move all zeros to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # list_to_check = list(str(num_list))\n    # for index in range(len(list_to_check)):\n    #     if list_to_check[index] == '0':\n    #         list_to_check[index] = '1'\n    #     else:\n    #         list_to_check[index] = '0'\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            new_list.append(num_list[i+1])\n            num_list.remove(num_list[i+1])\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # find length of the list\n    num_len = len(num_list)\n    \n    # find index of 0\n    zero_ind = num_len - num_list[num_len-1]\n    \n    # make a copy of the list\n    zero_copy = num_list[:]\n    \n    # place 0 in the end\n    zero_copy[zero_ind] = 0\n    \n    # return the copy\n    return zero_copy\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for n in num_list:\n        if n == 0:\n            new_list.append(n)\n    return new_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum=0\n    for i in range(n-1):\n        xor_sum=xor_sum^arr[i]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Code here\n    if len(arr) == 0 : return 0\n    c = 0\n    if arr[0] == 0 : return 0\n    # iterate through list and return sum of all xor pairs of the last element\n    for i in range(1,len(arr)):\n        c = c + arr[i] ^ arr[i-1]\n    return c\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        for j in range(i,n) : \n            s = s + arr[i] & arr[j] \n    return s \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j] : \n                sum += pow(arr[i],2) + pow(arr[j],2)\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pairs = 0\n    temp = 0\n    for i in range(n):\n        temp += arr[i]\n    for i in range(n):\n        temp ^= arr[i]\n    pairs = temp\n    return pairs\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    result = 0\n    for i in range(n) : \n        for j in range(i + 1, n) : \n            result += arr[i] ^ arr[j]\n    return resul"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if (n<=0) : return 0\n    elif (n<=1) : return arr[0]\n    else :\n        x = pair_xor_Sum(arr,n//2)\n        y = pair_xor_Sum(arr,n//2-1)\n        return x+y\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    out = []\n    \n    for i in range(n):\n        xor = 0\n        for j in range(n):\n            if i!=j:\n                xor ^=arr[i][j]\n        out.append(xor)\n    \n    return sum(out)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) : \n        result = result + arr[i]\n    return result \n    \ndef left_join(list_of_nums, pair_sum) : \n    '''\n    Given a list of numbers, create a list of tuples by concatenating them together, then return this list.\n    '''\n    result = []\n    for i in range(len(list_of_nums)) : \n        result.append((list_of_nums[i], pair_sum[i]))\n    return result \n    \ndef find_xor_Sum(arr,n) : \n    '''\n    Given a list of numbers, find the sum of xor of all pairs of numbers in the list.\n    '''\n    result = 0\n    for i in range(len(arr)) : \n        result = result + arr[i]\n    return result \n    \ndef euclid_solve(list_of_nums, result, m): \n    '''\n    Given a list of numbers and a result, create a list of tuples by concatenating them together, then return this list.\n    '''\n    result = [0] * (m+1)\n    for i in range(len(list_of_nums)) : \n        for j in range(i, len(list_of_nums)) : \n            result[list_of_nums[i]^list_of_nums[j]] = list_of_nums[i]^list_of_nums[j] \n    return result \n    \ndef hcf(n, m): \n    '''\n    Returns the highest multiple of n that divides evenly into m.\n    '''\n    while(n % m!= 0) : \n        n = n + m\n    return n \n    \ndef is_prime(n): \n    '''\n    Returns true if n is prime.\n    '''\n    for i in range(2,n) : \n        if (n % i == 0) : \n            return False\n    return True \n    \ndef generate_prime_list(m): \n    '''\n    Creates a list of primes until the number m.\n    '''\n    lst = []\n    for i in range(2,m) : \n        if is_prime(i) : \n            lst.append(i)\n    return lst \n    \ndef find_prime(list_of_nums): \n    '''\n    Given a list of numbers, find the prime numbers.\n    '''\n    result = []\n    for num in list_of_nums : \n        if is_prime(num) : \n            result.append(num)\n    return result \n    \ndef find_prime_Sum(list_of_nums) : \n    '''\n    Given a list of numbers, find the sum of prime numbers.\n    '''\n    result = 0\n    for num in list_of_nums : \n        result = result + num\n    return result \n    \ndef fibonacci_series(n): \n    '''\n    Given an integer, return the series of fibonacci numbers, starting with 1.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1 \n    else : \n        return fibonacci_series(n-1) + fibonacci_series(n-2) \n    \ndef fibonacci_series_Sum(n): \n    '''\n    Given an integer, return the series of fibonacci numbers, starting with 1.\n    '''\n    result = 0\n    for i in range(n+1) : \n        result = result + fibonacci_series(i) \n    return result \n    \ndef search_index(list_of_nums, num): \n    '''\n    Given a list of numbers, find the index of a value, starting at 0.\n    '''\n    for i in range(len(list_of_nums)) : \n        if list_of_nums[i] == num : \n            return i \n    return -1 \n    \ndef search_Sum(list_of_nums, num): \n    '''\n    Given a list of numbers, find the sum of a value, starting at 0.\n    '''\n    result = 0\n    for i in range(len(list_of_nums)) : \n        result = result + list_of_nums[i]\n    return result \n    \ndef main() : \n    '''\n    The main function.\n    '''\n    print(\"Input number of elements:\")\n    n = int(input())\n    print(\"Input list of elements:\")\n    list_of_nums = list(map(int, input().split()))\n    print(\"Input list of list of numbers:\")\n    list_of_nums = list(map(int, input().split()))\n    print(\"Input result:\")\n    pair_sum = list(map(int, input().split()))\n    print(\"Input m:\")\n    m = int(input())\n    print(\"Input n:\")\n    n = int(input())\n    print(\"Output:\")\n    result = pair_xor_Sum(list_of_nums, pair_sum)\n    print(result)\n    \nif __name__ == \"__main__\" : \n    main("
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    temp_arr = []\n    for i in range(len(arr)) :\n        temp_arr.append((arr[i]^arr[i+1],arr[i]) )\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    hq.heapify(h)\n    for i in iterable:\n        hq.heappushpop(h, i)\n    return hq.heappop(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for elem in iterable:\n        if not hq or elem > hq[-1]:\n            hq.append(elem)\n        else:\n            hq[-1] = elem\n            heapq.heapify(hq)\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq_container = []\n    for element in iterable:\n        hq_container.append((element, hq.heappushpop(hq_container, element)))\n    return [item for _, item in hq_container]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=heapq.heapify)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a minheap.\n    heap = [x for x in iterable]\n    # Move the first item to the top of the minheap.\n    for i in range(len(heap)):\n        heapq.heapreplace(heap, heapq.heappop(heap))\n    # Loop through and print the items in heap.\n    for i in range(len(heap)):\n        print(heapq.heappop(heap))\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        for j in range(len(iterable) - 1):\n            if iterable[j] > iterable[j + 1]:\n                iterable[j], iterable[j + 1] = iterable[j + 1], iterable[j]\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # If we want a sorted list, return it in sorted order\n    # We assume that an array is monotonic, e.g.\n    # in the list [3, 1, 6, 2, 0, 5],\n    # the elements of the array must be sorted in\n    # lexicographic order.\n    \n    # We could sort using a binary search:\n    # https://en.wikipedia.org/wiki/Binary_search\n    \n    # We have to handle case when the list contains a single element,\n    # e.g. [1]. The easiest way is to sort by the\n    # last element.\n    \n    # We have to initialize the heap with the first element of the list\n    # as this will be the smallest element in the list.\n    #\n    # We can define the heap as a sorted list of tuples (from lowest to highest),\n    # where tuples are ordered by first element of the list.\n    #\n    # We can use a heapq module to accomplish this.\n    \n    heap = []\n    for el in iterable:\n        heapq.heappush(heap, (el, el))\n    \n    # the max heapify function is a modified version of heapq.heappush\n    # from the original heapq module.\n    \n    # Step 1: initialize max heap.\n    # We are going to sort the elements of the list by the last element\n    # of the list.\n    #\n    # In other words, we want to sort the list in decreasing order,\n    # from the highest element to the lowest.\n    #\n    # Step 2: create an empty heap of items in the list.\n    # We are going to sort the list by the last element of the list.\n    #\n    # Step 3: we add the elements of the list to the heap.\n    # We are going to sort the list in decreasing order, from the highest\n    # element to the lowest.\n    \n    # Step 4: the max heapify function will tell us, if we need to\n    # sort the list by the last element.\n    \n    # Step 5: For each element of the list, heapify the element.\n    # This will use heapq module.\n    \n    # Step 6: to sort the elements in the heap, we need to insert them\n    # into the heap first.\n    \n    # Step 7: Now we need to sort the elements of the heap, in order.\n    \n    # Step 8: for each element, we insert it into the heap.\n    \n    # Step 9: We know that it is not in the heap, so we can not remove\n    # the smallest element from the heap.\n    \n    # Step 10: We also have to remove the largest element from the heap.\n    \n    # Step 11: We can delete the element, which will be the largest element in the heap.\n    # Remember that we have to keep track of the last element of the list,\n    # because we want to sort the list in the order of decreasing\n    # elements.\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(0, len(iterable)):\n        heapq.heapify(iterable)\n        while len(iterable) > 1:\n            heapq.heappop(iterable)\n        yield heapq.heappop(iterable)\n    \n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in range(len(iterable)):\n        hq.heappush(h, iterable[i])\n    for i in range(len(h)):\n        hq.heappop(h)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=cmp_to_key(lambda x,y: cmp(x,y)))\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Declare variables\n    profit = 0\n    loss = 0\n    #Calculate the profit and loss for this sale\n    #Check if the sale's amount is less than the sale price\n    if sale_amount<=actual_cost:\n        profit = sale_amount - actual_cost\n        loss = 0\n    else:\n        profit = 0\n        loss = sale_amount - actual_cost\n    #Check if profit is less than the sale's amount\n    if profit<=0:\n        print('ERROR')\n        return False\n    #Check if loss is less than the sale's amount\n    if loss<=0:\n        print('ERROR')\n        return False\n    else:\n        print('profit: ', profit)\n        print('loss: ', loss)\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost<=sale_amount):\n        profit=actual_cost\n    else:\n        profit=sale_amount\n    return profit\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    # using the bitwise operations\n    # if profit <= 0: \n    #     return False\n    # if profit > sale_amount: \n    #     return False\n    # if profit > sale_amount: \n    #     return True\n    # if profit > sale_amount: \n    #     return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    expected_profit = 0\n    expected_loss = 0\n    for i in range(len(actual_cost)):\n        if actual_cost[i] > sale_amount[i]:\n            expected_profit += actual_cost[i] - sale_amount[i]\n        elif actual_cost[i] < sale_amount[i]:\n            expected_loss += actual_cost[i] - sale_amount[i]\n    if expected_profit == 0:\n        return True\n    if expected_loss == 0:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    noprob = profit/sale_amount\n    if noprob < 0:\n        noprob = 0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # 1. Assign profit and loss values\n    profit_value = actual_cost * 0.2\n    loss_value = actual_cost - sale_amount\n    \n    # 2. Check profit and loss values\n    if profit_value > sale_amount or loss_value < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    noprofit = 0\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        noprofit = actual_cost - sale_amount\n        return noprofit\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if(sale_amount>actual_cost):\n        print(\"The cost has no profit, you need to get a loss\")\n    else:\n        print(\"The cost has no profit, you need to get a profit\")\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost/sale_amount <= 0.05\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # See if the amount is larger than 0\n    if sale_amount > actual_cost:\n        print('this is not a profit')\n    else:\n        print('this is a profit')\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = ((v**2)/(4.65 - 1.8 * t) + 4.74)\n    return round(wc)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    try:\n        wind_chill = (4.0 * v*v)/(v + 0.0005)\n        print(round(wind_chill,2))\n    except:\n        print('Error')\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v*0.621371*t + 0.5,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Convert the wind speed in km/h and convert the temperature in celsius to KF\n    wind_chill_int = round((v*9.81)/(t-32))\n    #Get the wind chill index\n    wind_chill_index = (wind_chill_int - 32.0) * (5.0/9.0)\n    return round(wind_chill_index,3)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # wind chill index\n    wc = (9.0 / 5.0) + (v/3.6) + (t/10.0)\n    # wind chill temperature\n    ct = 27.0 + (v/3.6) + (t/10.0)\n    \n    return round(wc,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    z_1 = ((v/5)*(9/5))+(5/16)\n    z_2 = ((v/6)*(9/5))+(4/16)\n    z_3 = ((v/8)*(9/5))+(3/16)\n    z_4 = ((v/9)*(9/5))+(2/16)\n    z_5 = ((v/10)*(9/5))+(1/16)\n    z_6 = ((v/11)*(9/5))+(0/16)\n    z_7 = ((v/12)*(9/5))+(0/16)\n    z_8 = ((v/14)*(9/5))+(0/16)\n    z_9 = ((v/15)*(9/5))+(0/16)\n    z_10 = ((v/17)*(9/5))+(0/16)\n    z_11 = ((v/18)*(9/5))+(0/16)\n    z_12 = ((v/20)*(9/5))+(0/16)\n    z_13 = ((v/22)*(9/5))+(0/16)\n    z_14 = ((v/24)*(9/5))+(0/16)\n    z_15 = ((v/26)*(9/5))+(0/16)\n    z_16 = ((v/28)*(9/5))+(0/16)\n    z_17 = ((v/30)*(9/5))+(0/16)\n    z_18 = ((v/32)*(9/5))+(0/16)\n    z_19 = ((v/34)*(9/5))+(0/16)\n    z_20 = ((v/36)*(9/5))+(0/16)\n    z_21 = ((v/38)*(9/5))+(0/16)\n    z_22 = ((v/40)*(9/5))+(0/16)\n    z_23 = ((v/42)*(9/5))+(0/16)\n    z_24 = ((v/44)*(9/5))+(0/16)\n    z_25 = ((v/46)*(9/5))+(0/16)\n    z_26 = ((v/48)*(9/5))+(0/16)\n    z_27 = ((v/50)*(9/5))+(0/16)\n    z_28 = ((v/52)*(9/5))+(0/16)\n    z_29 = ((v/54)*(9/5))+(0/16)\n    z_30 = ((v/56)*(9/5))+(0/16)\n    z_31 = ((v/58)*(9/5))+(0/16)\n    z_32 = ((v/60)*(9/5))+(0/16)\n    z_33 = ((v/62)*(9/5))+(0/16)\n    z_34 = ((v/64)*(9/5))+(0/16)\n    z_35 = ((v/66)*(9/5))+(0/16)\n    z_36 = ((v/68)*(9/5))+(0/16)\n    z_37 = ((v/70)*(9/5))+(0/16)\n    z_38 = ((v/72)*(9/5))+(0/16)\n    z_39 = ((v/74)*(9/5))+(0/16)\n    z_40 = ((v/76)*(9/5))+(0/16)\n    z_41 = ((v/78)*(9/5))+(0/16)\n    z_42 = ((v/80)*(9/5))+(0/16)\n    z_43 = ((v/82)*(9/5))+(0/16)\n    z_44 = ((v/84)*(9/5))+(0/16)\n    z_45 = ((v/86)*(9/5))+(0/16)\n    z_46 = ((v/88)*(9/5))+(0/16)\n    z_47 = ((v/90)*(9/5))+(0/16)\n    z_48 = ((v/92)*(9/5))+(0/16)\n    z_49 = ((v/94)*(9/5))+(0/16)\n    z_50 = ((v/96)*(9/5))+(0/16)\n    z_51 = ((v/98)*(9/5))+(0/16)\n    z_52 = ((v/100)*(9/5))+(0/16)\n    z_53 = ((v/102)*(9/5))+(0/16)\n    z_54 = ((v/104)*(9/5))+(0/16)\n    z_55 = ((v/106)*(9/5))+(0/16)\n    z_56 = ((v/108)*(9/5))+(0/16)\n    z_57 = ((v/110)*(9/5))+(0/16)\n    z_58 = ((v/112)*(9/5))+(0/16)\n    z_59 = ((v/114)*(9/5))+(0/16)\n    z_60 = ((v/116)*(9/5))+(0/16)\n    z_61 = ((v/118)*(9/5))+(0/16)\n    z_62 = ((v/120)*(9/5))+(0/16)\n    z_63 = ((v/122)*(9/5))+(0/16)\n    z_64 = ((v/124)*(9/5))+(0/16)\n    z_65 = ((v/126)*(9/5))+(0/16)\n    z_66 = ((v/128)*(9/5))+(0/16)\n    z_67 = ((v/130)*(9/5))+(0/16)\n    z_68 = ((v/132)*(9/5))+(0/16)\n    z_69 = ((v/134)*(9/5))+(0/16)\n    z_70 = ((v/136)*(9/5))+(0/16)\n    z_71 = ((v/138)*(9/5))+(0/16)\n    z_72 = ((v/140)*(9/5))+(0/16)\n    z_73 = ((v/142)*(9/5))+(0/16)\n    z_74 = ((v/144)*(9/5))+(0/16)\n    z_75 = ((v/146)*(9/5))+(0/16)\n    z_76 = ((v/148)*(9/5))+(0/16)\n    z_77 = ((v/150)*(9/5))+(0/16)\n    z_78 = ((v/152)*(9/5))+(0/16)\n    z_79 = ((v/154)*(9/5))+(0/16)\n    z_80 = ((v/156)*(9/5))+(0/16)\n    z_81 = ((v/158)*(9/5))+(0/16)\n    z_82 = ((v/160)*(9/5))+(0/16)\n    z_83 = ((v/162)*(9/5))+(0/16)\n    z_84 = ((v/164)*(9/5))+(0/16)\n    z_85 = ((v/166)*(9/5))+(0/16)\n    z_86 = ((v/168)*(9/5))+(0/16)\n    z_87 = ((v/170)*(9/5))+(0/16)\n    z_88 = ((v/172)*(9/5))+(0/16)\n    z_89 = ((v/174)*(9/5))+(0/16)\n    z_90 = ((v/176)*(9/5))+(0/16)\n    z_91 = ((v/178)*(9/5))+(0/16)\n    z_92 = ((v/180)*(9/5))+(0/16)\n    z_93 = ((v/182)*(9/5))+(0/16)\n    z_94 = ((v/184)*(9/5))+(0/16)\n    z_95 = ((v/186)*(9/5))+(0/16)"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # get the wind speed and temperature\n    wind_speed = v\n    wind_temp = t\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill =  v/3.6 + 0.6215*(t+273.15) + 0.44*(v**2) + (35.75*v)\n    wind_chill = round(wind_chill)\n    return wind_chill\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v*(1+(0.6215*t+273.15))\n    wind_speed = round(wind_speed)\n    return wind_speed\ndef wind_direction(v,t):\n    '''\n    Write a function to calculate the wind direction given the wind speed in km/h and a temperature in celsius.\n    '''\n    wind_dir = -v*(0.6215*t) + (35.75*v)\n    wind_dir = round(wind_dir)\n    return wind_dir\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Write a function to convert the celsius temperature to fahrenheit temperature\n    '''\n    return (celsius*1.8)+32\ndef fahrenheit_to_celsius(fahrenheit):\n    '''\n    Write a function to convert the fahrenheit temperature to celsius temperature\n    '''\n    return (fahrenheit-32)*(5/9)\ndef acceleration(v,t):\n    '''\n    Write a function to calculate the acceleration of the wind in m/s^2.\n    '''\n    acceleration = v/t\n    acceleration = round(acceleration)\n    return acceleration\ndef radians_to_degrees(angle):\n    '''\n    Convert angle from degrees to radians\n    '''\n    return angle * (180 / 3.14)\ndef degrees_to_radians(angle):\n    '''\n    Convert angle from radians to degrees\n    '''\n    return angle * (180 / 3.14)\ndef wind_angle(v,t):\n    '''\n    Convert the wind speed to angle\n    '''\n    wind_angle = wind_speed(v,t)\n    wind_angle = radians_to_degrees(wind_angle)\n    wind_angle = degrees_to_radians(wind_angle)\n    return wind_angle\ndef wind_direction_to_degree(wind_dir):\n    '''\n    Convert the wind direction to angle\n    '''\n    wind_dir = wind_direction(wind_dir,0)\n    wind_dir = radians_to_degrees(wind_dir)\n    return wind_dir\ndef magnitude(v,t):\n    '''\n    Convert the wind speed to m/s^2\n    '''\n    return (v*t)*(3.6/11)\ndef wind_speed_to_magnitude(v,t):\n    '''\n    Convert the wind speed to m/s^2\n    '''\n    return (v*t)*(3.6/11)\ndef normalize(v,t):\n    '''\n    Convert the wind speed to m/s^2\n    '''\n    return (v*t)/(v*t+0.00001)\ndef distance(v1,t1,v2,t2):\n    '''\n    Convert the wind speed to m/s^2\n    '''\n    return (v1*t1)+(v2*t2)\ndef normalize_to_unit_magnitude(magnitude):\n    '''\n    Normalize the magnitude given by the wind speed to 1\n    '''\n    if magnitude < 0:\n        magnitude = magnitude*-1\n    return magnitude\ndef distance_to_unit_magnitude(distance):\n    '''\n    Normalize the distance given by the wind speed to 1\n    '''\n    return distance\ndef angle_to_unit_radians(angle):\n    '''\n    Normalize the angle given by the wind speed to 1\n    '''\n    return angle*(180/3.14)\ndef normalize_to_angle(angle):\n    '''\n    Normalize the angle given by the wind speed to 1\n    '''\n    return angle*(180/3.14)\ndef angle_to_radians(angle):\n    '''\n    Normalize the angle given by the wind speed to 1\n    '''\n    return angle*(180/3.14)\ndef normalize_to_angle_to_unit_magnitude(angle):\n    '''\n    Normalize the angle given by the wind speed to 1\n    '''\n    return angle\ndef normalize_to_angle_to_distance(angle):\n    '''\n    Normalize the angle given by the wind speed to 1\n    '''\n    return angle\ndef air_density(v,t,T):\n    '''\n    Convert the wind speed and temperature to density\n    '''\n    air_density = v*(3.6/(T*T))\n    air_density = round(air_density)\n    return air_density\ndef air_density_to_unit_magnitude(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))\ndef air_density_to_unit_angle(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))\ndef air_density_to_angle(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_degrees(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(180/(3.14*T*T))\ndef air_density_to_magnitude(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_magnitude_to_unit_magnitude(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_magnitude_to_angle(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_angle_to_unit_magnitude(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_angle_to_angle(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_degrees(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(180/(3.14*T*T))\ndef air_density_to_magnitude(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_magnitude_to_unit_magnitude(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*(3.6/(T*T))*(180/3.14)\ndef air_density_to_magnitude_to_angle(air_density):\n    '''\n    Normalize the density given by the wind speed to 1\n    '''\n    return air_density*"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert the wind velocity and temperature to a float for use in a function\n    v = float(v)\n    t = float(t)\n    # convert the wind chill to a float\n    wind_chill = (9 * v ** 4) + (17.1 * v ** 3) + (0.621371 * v ** 2) + (35.74 * t)\n    # return the rounded wind chill value\n    return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = v*(9/5) + 32\n    if chill > 100:\n        chill = 100\n    elif chill < 0:\n        chill = 0\n    return chill\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #initialize an empty list\n    list_of_names = []\n    #create a list with the names\n    for name in sample_names:\n        if(name[0] in 'a'):\n            list_of_names.append(name)\n    #sort the list\n    list_of_names.sort()\n    #print out the list\n    print(list_of_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for n in sample_names:\n        if n[0].islower():\n            name_list.append(len(n))\n    return sum(name_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0]!='a'])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sum_nam(names):\n        '''\n        Do the same as in the sample_nam() function.\n        '''\n        out = 0\n        for name in names:\n            if name.startswith(\"a\"):\n                out += len(name)\n        return out\n    \n    return sum_nam(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for i in range(len(sample_names)):\n        if len(sample_names[i].lower()) > 0:\n            names.append(sample_names[i])\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].lower() == name[0]:\n            result += len(name)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].islower():\n            result = result + len(name)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Return the number of names in the sample names\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a dictionary for the names\n    nam_dict = {}\n    # loop through the names\n    for name in sample_names:\n        # remove the first letter\n        nam_dict[name.lower()] = len(name)\n    # return the dictionary\n    return nam_dict\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        elif item[-1] == \")\":\n            result.pop()\n        else:\n            pass\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis = re.compile(r'\\([^)]*\\)')\n    \n    items = re.sub(parenthesis, '', items)\n    items = re.sub('[^a-zA-Z]', '', items)\n    \n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    i = 0\n    while i < len(items):\n        item = items[i]\n        j = i + 1\n        while j < len(items):\n            if items[j] == '(':\n                break\n            j += 1\n        result.append(item)\n        i = j\n    return result\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis from the list of items, which is a string, and return the resulting list.\n    '''\n    result = []\n    i = 0\n    while i < len(items):\n        item = items[i]\n        j = i + 1\n        while j < len(items):\n            if items[j] == '(':\n                break\n            j += 1\n        if j == len(items):\n            result.append(item)\n        else:\n            result.append(items[i:j])\n        i = j\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # initializing empty string\n    string = ''\n    # creating a loop to remove all the parenthesis\n    for item in items:\n        string = string + item\n    # if there are any parenthesis left in the string\n    if string!= '':\n        # returning the string without the parenthesis\n        return string\n    else:\n        # returning the empty string\n        return ''\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    cleaned_string = \"\"\n    for i in items:\n        if(i == \"(\"):\n            cleaned_string = cleaned_string + i\n            if(i == \")\"):\n                cleaned_string = cleaned_string + i\n            elif(i == \")\"):\n                cleaned_string = cleaned_string + i\n                cleaned_string = cleaned_string[:-1]\n        else:\n            cleaned_string = cleaned_string + i\n    return cleaned_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # print(items)\n    new_string = []\n    for item in items:\n        # print(item)\n        if '(' in item:\n            new_string.append(item[:item.find('(')])\n            new_string.append(item[item.find('(')+1:])\n        else:\n            new_string.append(item)\n    # print(new_string)\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == \"(\":\n            items[i] = \")\"\n        elif items[i] == \")\":\n            items[i] = \"(\"\n        else:\n            continue\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    final_list = []\n    for i in items:\n        if len(i) > 1:\n            if i[-1] == \"(\":\n                final_list.append(i[:-1])\n            elif i[-1] == \")\" and i[-2] == \"(\":\n                final_list.append(i[:-2])\n        else:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = [x.strip() for x in items]\n    for i in range(len(items)):\n        items[i] = re.sub(\"[()[]{}|,<>;:\\\\\\\\\\|'~]\", \"\", items[i])\n    for i in range(len(items)):\n        if(items[i] == \"\"):\n            items[i] = \" \"\n    return \"\".join(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ans = ''\n    for i in items:\n        if i[-1] == '(':\n            ans += i\n        elif i[-1] == ')':\n            ans += i[:-1]\n    return ans\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 6\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        raise ValueError('n must be an integer ')\n    if n % 2!= 0:\n        return n + is_nonagonal(n - 1)\n    else:\n        return n - is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # define a variable to store the count of non-diagonal numbers.\n    count = 0\n    # define a variable to store the values of the diagonal elements.\n    value = 0\n    # for loop to find the count of the diagonal numbers.\n    for i in range(n):\n        # sum of the diagonal elements are 0, 1, 2.\n        if(i == 0):\n            value = 0\n        elif(i == 1):\n            value = 1\n        elif(i == 2):\n            value = 2\n        # condition to be satisfied.\n        else:\n            # while loop to find the value of diagonal elements.\n            while (i < n):\n                # sum of the diagonal elements are 0, 1, 2.\n                value += n - i\n                # if i is equal to n-1.\n                if(i == n-1):\n                    # if the value of the diagonal elements is 1, then return 1.\n                    if (value == 1):\n                        return 1\n                    # if the value of the diagonal elements is 2, then return 2.\n                    if (value == 2):\n                        return 2\n                # if the value of the diagonal elements is 0, 1, or 2, then return 0.\n                elif(i == 0):\n                    if (value == 0):\n                        return 0\n                    elif (value == 1):\n                        return 1\n                    else:\n                        return 2\n                # if the value of the diagonal elements is 1, 0, or 2, then return 0.\n                else:\n                    if (value == 1):\n                        return 0\n                    elif (value == 2):\n                        return 1\n                    else:\n                        return 2\n        # if the count of non-diagonal elements is greater than the value of the diagonal elements.\n        if(count > value):\n            count = value\n            # assign the value of the diagonal elements to the variable.\n            value = i\n    # if the count of non-diagonal elements is greater than 0.\n    if(count > 0):\n        return count"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        i = n//2\n        while i>0:\n            if n%i == 0:\n                return i\n            i-=1\n        return 0"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = []\n    for i in range(n+1):\n        if (i+1)%2!= 0:\n            a.append(i)\n    return a[n]\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n-1):\n        if(n%2 == 0 and n % 3 == 0):\n            return True\n    return False\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2!= 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0: \n        return \n    for i in range(2*n): \n        if i + n >= (2 * n) or i + n < 0: \n            break\n        if (i + n) % 2 == 0: \n            return i + n\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return n\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = False\n    text = text.lower()\n    text = text.replace(' ', '')\n    text = re.sub('[^\\w]', '', text)\n    if len(text) <= 2:\n        result = True\n    return result\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = False\n    text = text.lower()\n    text = text.replace(' ', '')\n    text = re.sub('[^\\w]', '', text)\n    if len(text) <= 3:\n        result = True\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text =='':\n        return False\n    if text == 'z':\n        return False\n    if text[0] =='':\n        return False\n    if text[-1] =='':\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    new_text = \"\"\n    pos_check = 0\n    # pos_check = 0\n    pos_check_zero_index = 0\n    for i in range(len(text)):\n        if text[i] == \" \":\n            pos_check_zero_index = i\n            # print(pos_check_zero_index)\n            break\n    pos_check = pos_check + pos_check_zero_index\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    # First, get rid of punctuation and not using lower()\n    text = text.lower()\n    text = re.sub('\\W','', text)\n    \n    # Second, get rid of most repeated words\n    words = text.split()\n    num_words = len(words)\n    \n    # Third, check for word with z\n    start_word = 'z'\n    end_word = 'y'\n    if start_word in words and end_word in words:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'(?:z\\d+)', text)\n    if match:\n        print(text)\n    else:\n        print('Not an integer')\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search('z', text)\n    if match!= None:\n        return \"z\"\n    else:\n        match = re.search('\\s', text)\n        if match!= None:\n            return \"z\"\n        else:\n            match = re.search('\\W', text)\n            if match!= None:\n                return \"z\"\n            else:\n                match = re.search('\\W', text.lower())\n                if match!= None:\n                    return \"z\"\n                else:\n                    match = re.search('\\w', text)\n                    if match!= None:\n                        return \"z\"\n                    else:\n                        return \"z\"\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_words = text.split(' ')\n    text_match_word = ''\n    for word in text_words:\n        if 'z' in word:\n            continue\n        else:\n            text_match_word = word\n            break\n    if text_match_word == '':\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(\"[a-z]+$\")\n    match = pattern.search(text)\n    return match is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z','')\n    text = re.sub('^(.|\\n)*', '', text)\n    text = re.sub('(.|\\n)*$', '', text)\n    text = re.sub('(.|\\n)*\\s*$', '', text)\n    text = re.sub('\\s{2,}','', text)\n    text = re.sub('(?<=[^\\w\\s])\\w+','', text)\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'z',text)!= None:\n        return re.search(r'z',text)\n    else:\n        return re.search(r'[a-zA-Z]',text)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (k > 0):\n        for i in range(k, len(input)):\n            output_list = input[i:] + input[:i]\n            input = output_list\n    else:\n        print(\"invalid k\")\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_input = input[::-1] \n    # A recursive function to reverse an array \n    def recurr_reverse_Array(input, k): \n        if input[k]!= '0': \n            # Recursively call the function on all elements \n            # less than or equal to k \n            recurr_reverse_Array(input, k + 1) \n            # Recursively call the function on all \n            # elements greater than or equal to k \n            recurr_reverse_Array(input, k - 1) \n            # Swapping the two elements equal to \n            # the current element \n            input[k], input[k + 1] = input[k + 1], input[k] \n    # Function to reverse an array \n    recurr_reverse_Array(new_input, 0) \n    return new_input \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(0, len(input)):\n        output.append(input[len(input) - 1 - i])\n    for i in range(k, len(input)):\n        output[i] = input[i]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (len(input) < 2): \n        return input\n    \n    i = 0\n    tmp = input[0]\n    for j in range(1, len(input)):\n        tmp = input[j]\n        input[i] = input[j]\n        input[j] = tmp\n        i += 1\n    \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    \n    if k == 0:\n        return\n    elif k == l:\n        return input\n    else:\n        print(\"the k value is not valid\")\n        return reverse_Array_Upto_K(input, k - 1)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    k = k % len(arr)\n    if k == 0:\n        print(arr)\n    else:\n        arr[k:k+1] = arr[k:k+1][::-1]\n        print(arr)"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[0:k]\n    input[0:k] = input[k+1:]\n    input[k+1:] = temp\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #Python list is indexed as [Index, Element]\n    l = list(input)\n    l.reverse()\n    l[k] = input[k]\n    return l\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # input parameter\n    input_length = len(input)\n    if input_length < k:\n        return None\n    if input_length == k:\n        return input\n    # initialize the output array\n    output = []\n    # loop through the input\n    for i in range(input_length-k):\n        output.append(input[i])\n    # repeat the loop for the input\n    for i in range(k):\n        output.append(input[i])\n    return output\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    if type(test_dict) is not dict:\n        return f\"{type(test_dict).__name__} is not a dictionary\"\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_add = test_tup\n    for k,v in test_dict.items():\n        tuple_add = tuple_add[0] + k + v\n    return tuple_add\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_tup)!= tuple or type(test_dict)!= dict:\n        return None\n    for key in test_dict:\n        test_tup.append((key, test_dict[key]))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + test_dict\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.append(test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # tup_1 = test_dict\n    # tup_2 = test_tup\n    #\n    # for key, val in test_dict.items():\n    #     tup_2[key] = val\n    #\n    # return tup_2\n    \n    return tuple([test_dict[key] if key in test_dict else test_dict[str(key)] for key in test_dict.keys()])\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (key,)\n        test_tup = test_tup + (test_dict[key],)\n    return test_tup\n    \ntest_tup = ('a', 'b', 'c', 'd')\ntest_dict = {'a': 'x', 'b': 'y', 'c': 'z'}\ntest_tuple = add_dict_to_tuple(test_tup, test_dict)\nprint(test_tuple)"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup += test_dict\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    sum = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                sum += cost[i][j]\n    return sum / N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    if m == 0: return 0\n    n = len(cost[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n    for i in range(1, m):\n        dp[i][0] = cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1] // 2\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    path = []\n    average = []\n    \n    for i in range(len(cost)):\n        path.append(cost[i])\n    \n    # path traversal\n    while(len(path) > 0):\n        current = path.pop(0)\n        current_row = current[0]\n        current_column = current[1]\n        \n        # calculate remaining cells\n        for i in range(len(cost)):\n            \n            if current_row == cost[i][0] and current_column == cost[i][1]:\n                path.append(cost.pop(i))\n                \n                # calculate average of path\n                avg = 0\n                \n                for j in range(len(cost)):\n                    avg += cost[j][2]\n                \n                avg /= len(cost)\n                \n                average.append(avg)\n                \n                # return the path\n                return path\n                \n    # if no path found\n    return path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # 1. Initialize matrix\n    N = len(cost)\n    matrix = [[0 for i in range(N)] for j in range(N)]\n    \n    # 2. Initialize indexes\n    i = 0\n    j = 0\n    \n    # 3. Initialize path to take care of indexing\n    path = []\n    \n    # 4. Find the starting cell and store in matrix\n    for row in range(N):\n        for col in range(N):\n            if cost[row][col]!= 0:\n                matrix[row][col] = cost[row][col]\n                i = row\n                j = col\n    \n    # 5. Start with the cell at top-left and move down the row until we reach bottom right cell\n    while i > 0 and j < N-1:\n        if cost[i][j]!= 0:\n            matrix[i][j] = cost[i][j]\n            i = i - 1\n        else:\n            break\n    \n    # 6. Start with the cell at bottom-right and move up the row until we reach top-left cell\n    while j < N-1 and i > 0:\n        if cost[i][j]!= 0:\n            matrix[i][j] = cost[i][j]\n            j = j + 1\n        else:\n            break\n    \n    # 7. Fill in path\n    path.append(matrix[i][j])\n    path.append(matrix[i][j+1])\n    \n    # 8. Return path\n    return path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n=len(cost)\n    maxAverage=0\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if i==0:\n                if j==0:\n                    continue\n                else:\n                    if cost[i][j]!=cost[i-1][j]:\n                        count+=1\n                    if cost[i][j]!=cost[i][j-1]:\n                        count+=1\n            if i==n-1:\n                if j==n-1:\n                    continue\n                else:\n                    if cost[i][j]!=cost[i+1][j]:\n                        count+=1\n                    if cost[i][j]!=cost[i-1][j]:\n                        count+=1\n            if j==0:\n                if i==n-1:\n                    continue\n                else:\n                    if cost[i][j]!=cost[i][j+1]:\n                        count+=1\n                    if cost[i][j]!=cost[i-1][j]:\n                        count+=1\n            if j==n-1:\n                if i==n-1:\n                    continue\n                else:\n                    if cost[i][j]!=cost[i+1][j]:\n                        count+=1\n                    if cost[i][j]!=cost[i-1][j]:\n                        count+=1\n    for i in range(n):\n        for j in range(n):\n            if cost[i][j]!=cost[i][j]:\n                count+=1\n    if count==n*n:\n        return 0\n    else:\n        return (count/n*maxAverage/n)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    row = 0\n    col = 0\n    total = 0\n    max = 0\n    while (col < N):\n        col += 1\n        total += cost[row][col]\n        row += 1\n        if (row == N):\n            row = 0\n        while (col < N):\n            col += 1\n            if (col == N):\n                col = 0\n            total += cost[row][col]\n            row += 1\n            if (row == N):\n                row = 0\n            if (row < N and col < N):\n                if (col == N and row < N):\n                    total -= cost[row][col]\n                    row += 1\n                else:\n                    total -= cost[row][col]\n                    col += 1\n            else:\n                total -= cost[row][col]\n                col += 1\n    return total/N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # A 1D array of the cost for each cell\n    costArray = []\n    for i in range(len(cost)):\n        costArray.append(cost[i][0])\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Init\n    numOfCells = len(cost)\n    paths = []\n    totalCost = 0\n    for i in range(numOfCells):\n        path = []\n        for j in range(numOfCells):\n            path.append(cost[i][j])\n        paths.append(path)\n    # Path by path\n    for i in range(numOfCells):\n        for j in range(numOfCells):\n            if i == 0 or i == numOfCells - 1 or j == 0 or j == numOfCells - 1:\n                totalCost += paths[i][j]\n            else:\n                totalCost += paths[i][j] / 2\n    return totalCost / numOfCells\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    #Initialize the results dictionary\n    results = {}\n    \n    #Create a path\n    path = [cell for cell in range(N)]\n    path.append(0)\n    \n    #Find the maximum\n    def maxAverage(total_cells, path):\n        if path == []:\n            return 0\n        current_cell = path[-1]\n        total_cells -= current_cell\n        \n        #if the cell is in the path, return the cell with the maximum value\n        if current_cell in path:\n            return max(path, key=lambda x: total_cells-x)\n        \n        #Otherwise, find the maximum and add it to the path\n        max_cell = max(path)\n        total_cells -= max_cell\n        path.append(max_cell)\n        \n        #for each cell of the path\n        for cell in path:\n            max_cell = max(path, key=lambda x: total_cells-x)\n            total_cells -= max_cell\n            path.append(max_cell)\n        \n        return path\n    \n    #This is the main algorithm\n    for cell in cost:\n        path = maxAverage(total_cells, path)\n    \n    #Return the path\n    return path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total_cost = 0\n    visited = []\n    path = []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height = min(h.values())\n    min_weight = min(w.values())\n    if min_height > h[min_height]:\n        print(f'{students[h[min_height]]} is below the minimum height. ')\n        return filter_data(students,h,w)\n    else:\n        print(f'{students[min_height]} is below the minimum height. ')\n        return filter_data(students,h,w)\n        \ndef main():\n    students = {}\n    print('Welcome to the students filter system!')\n    while True:\n        print('Menu:')\n        print('a) Add student')\n        print('b) List students')\n        print('c) Delete student')\n        print('d) Edit student')\n        print('e) Quit')\n        choice = input('Enter your choice: ')\n        if choice == 'a':\n            print('Enter student name: ')\n            name = input()\n            print('Enter the student height and weight: ')\n            height = float(input())\n            print('Enter the student height and weight: ')\n            weight = float(input())\n            print(f'{name} is added to the list!')\n            students[name] = (height,weight)\n        elif choice == 'b':\n            print(f'{len(students)} students have been entered.')\n            print('Enter the student name: ')\n            name = input()\n            print('Enter the student height and weight: ')\n            height = float(input())\n            print('Enter the student height and weight: ')\n            weight = float(input())\n            print('Filtering...')\n            filtered_data = filter_data(students,height,weight)\n            print('Filtering results')\n            for student in filtered_data:\n                print(f'{student} is the student.')\n        elif choice == 'c':\n            print('Enter student name: ')\n            name = input()\n            print('Enter the student height and weight: ')\n            height = float(input())\n            print('Enter the student height and weight: ')\n            weight = float(input())\n            print(f'{name} has been deleted from the list. ')\n            del(students[name])\n        elif choice == 'd':\n            print('Enter student name: ')\n            name = input()\n            print('Enter the student height and weight: ')\n            height = float(input())\n            print('Enter the student height and weight: ')\n            weight = float(input())\n            print(f'{name} has been edited to {height} and {weight}.')\n            students[name] = (height,weight)\n        elif choice == 'e':\n            print('Program has been terminated.')\n            break\n        else:\n            print('Sorry, invalid choice. Please try again.')\n            \nmain()"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # add your code here\n    return students"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if students[student][1] > h and students[student][1] < w:\n            students[student][0] = 1\n        else:\n            students[student][0] = 0\n    print(students)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #in case we have a student with a student_height > min_height and a student_weight > min_weight\n    if h > h_min and w > w_min:\n        return students\n    else:\n        return []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    ret_dict = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            ret_dict[student] = students[student]\n    return ret_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filt_stud = {}\n    for student in students:\n        if student[1]>h and student[2]>w:\n            filt_stud[student[0]] = student\n    return filt_stud\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Creating an empty list called students_sorted\n    students_sorted = []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # calculate the number of students in the dataset\n    N = len(students)\n    \n    # sort the dictionary by the height\n    students = sorted(students.items(), key=lambda x: x[1][0])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #create new dict for students with heights and weight below the minimum\n    new_dict = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            new_dict[key] = value\n    #create new dict for students with height and weight above the minimum\n    new_dict2 = {}\n    for key, value in new_dict.items():\n        if value[0] > h and value[1] > w:\n            new_dict2[key] = value\n    #return dict\n    return new_dict2\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for i in students:\n        if (i['height'] > h and i['weight'] > w):\n            filtered_students.append(i)\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_same = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums2):\n            if value1 == value2:\n                count_same += 1\n    return count_same\n    \ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_same = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums2):\n            if value1 == value2:\n                count_same += 1\n    return count_same\n    \ndef find_contains(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list which are also in the second list.\n    '''\n    count_same = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums2):\n            if value1 == value2:\n                count_same += 1\n    return count_same\n    \ndef find_contains_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list which are also in the second list.\n    '''\n    count_same = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums2):\n            if value1 == value2:\n                count_same += 1\n    return count_same\n    \ndef count_unique(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_unique = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 not in nums1:\n            count_unique += 1\n    return count_unique\n    \ndef count_unique_2(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_unique = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums1:\n            count_unique += 1\n    return count_unique\n    \ndef find_dups(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list that are duplicated.\n    '''\n    count_dups = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums1):\n            if index1!= index2 and value1 == value2:\n                count_dups += 1\n    return count_dups\n    \ndef find_dups_2(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list that are duplicated.\n    '''\n    count_dups = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums1:\n            count_dups += 1\n    return count_dups\n    \ndef find_occurence_count(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to count the number of occurrences of each value in the first list.\n    '''\n    count_occurence = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums1):\n            if value1 == value2:\n                count_occurence += 1\n    return count_occurence\n    \ndef find_occurence_count_2(nums1):\n    '''\n    The input is defined as two lists of the same length. Write a function to count the number of occurrences of each value in the first list.\n    '''\n    count_occurence = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums1):\n            if value1 == value2:\n                count_occurence += 1\n    return count_occurence\n    \ndef find_range_in_range(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:\n            count_range += 1\n    return count_range\n    \ndef find_range_in_range_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:\n            count_range += 1\n    return count_range\n    \ndef find_range_in_range_3(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:\n            count_range += 1\n    return count_range\n    \ndef find_range_in_range_4(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:\n            count_range += 1\n    return count_range\n    \ndef find_range_in_range_5(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:\n            count_range += 1\n    return count_range\n    \ndef find_range_in_range_6(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:\n            count_range += 1\n    return count_range\n    \ndef find_range_in_range_7(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:\n            count_range += 1\n    return count_range\n    \ndef find_range_in_range_8(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to find the indices of elements in the first list, in which the first value appears in the second list.\n    '''\n    count_range = 0\n    for index1, value1 in enumerate(nums1):\n        if value1 in nums2:"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    c1 = 0\n    c2 = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            if eq(num1, num2):\n                c1 += 1\n    for num1 in nums2:\n        for num2 in nums1:\n            if eq(num1, num2):\n                c2 += 1\n    return (c1, c2)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # There are no duplicates in the input lists.\n    if len(nums1)!= len(nums2):\n        return 0\n    # For each of the lists\n    for i in range(len(nums1)):\n        # Check if the lists are the same.\n        # If the lists are the same, then it will be the same number of indices.\n        if nums1[i]!= nums2[i]:\n            return 1\n    # If both lists have the same number of indices.\n    return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Your code here\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, value in enumerate(nums1):\n        if value == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            for j in range(i + 1, len(nums1)):\n                if nums1[i] == nums1[j] and nums2[i] == nums2[j]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_count = 0\n    nums2_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            nums1_count += 1\n        else:\n            nums2_count += 1\n    return nums1_count, nums2_count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef is_pair_duplicate(nums):\n    '''\n    The input is a list of numbers. Write a function that returns True if and only if the list contains at least one duplicate number.\n    '''\n    return count_same_pair(nums, nums) >= 2\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    base = int(base)\n    #base = base * 10\n    #base = base * 10\n    \n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    return base * (10 ** power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # you can write your code here\n    power_list = list(str(power))\n    power_list.reverse()\n    return int(''.join(power_list)) + base\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    base_num = base\n    power_num = power\n    sum = 0\n    \n    while power_num > 0:\n        digit = base_num % 10\n        base_num = base_num // 10\n        sum = sum + digit\n        \n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(d) for d in str(base) if d.isdigit())\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n    if (base < 0) or (power < 0):\n        return 0\n    else:\n        base_power = pow(base,power)\n        return base_power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base >= 1, \"base must be positive\"\n    assert power >= 1, \"power must be positive\"\n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power if type(power) is int else int(power)\n    if base == 2:\n        return int(base)**power\n    else:\n        return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += power % 10\n        power //= 10\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #get rid of whitespace\n    text = re.sub(' +','', text1)\n    #get rid of punctuation marks\n    text = re.sub('[^\\w]','', text)\n    #get rid of single characters\n    text = re.sub('\\s+','', text)\n    #get rid of punctuation marks\n    text = re.sub('[{}]'.format(re.escape('\\n')),'', text)\n    #get rid of single characters\n    text = re.sub('\\s+','', text)\n    #strip whitespace\n    text = text.strip()\n    #split text into words\n    text = text.split()\n    #reversed list of words\n    text = list(reversed(text))\n    #get rid of duplicates\n    text = list(dict.fromkeys(text))\n    #get rid of words with numbers in them\n    text = list(filter(lambda x: len(x) >= 2, text))\n    #get rid of words that dont include numbers\n    text = list(filter(lambda x: len(x) > 1, text))\n    #get rid of words with numbers in them\n    text = list(map(lambda x: x.lower(), text))\n    #get rid of words that do not have a certain meaning\n    text = list(filter(lambda x: 'features' not in x, text))\n    #get rid of words with the same meaning\n    text = list(dict.fromkeys(text))\n    #get rid of words that do not include the word's'\n    text = list(filter(lambda x:'s' not in x, text))\n    #get rid of words that have the word's' in it\n    text = list(filter(lambda x:'s' in x, text))\n    #get rid of words that contain the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words that contain 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words that have 'the' in the middle\n    text = list(filter(lambda x: 'the' in x[:len(x)//2], text))\n    #get rid of words that have 'the' in the middle\n    text = list(filter(lambda x: 'the' in x[:len(x)//2], text))\n    #get rid of words that have 'the' in the end\n    text = list(filter(lambda x: 'the' in x[len(x)-len(x)//2:], text))\n    #get rid of words that have 'the' in the end\n    text = list(filter(lambda x: 'the' in x[len(x)-len(x)//2:], text))\n    #get rid of words that contain the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words that have the word 'the' in the middle\n    text = list(filter(lambda x: 'the' in x[:len(x)//2], text))\n    #get rid of words that have the word 'the' in the middle\n    text = list(filter(lambda x: 'the' in x[:len(x)//2], text))\n    #get rid of words that have 'the' in the end\n    text = list(filter(lambda x: 'the' in x[len(x)-len(x)//2:], text))\n    #get rid of words that have the word 'the' in the end\n    text = list(filter(lambda x: 'the' in x[len(x)-len(x)//2:], text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word 'the'\n    text = list(filter(lambda x: 'the' in x, text))\n    #get rid of words with the word "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if len(text1) <= 0:\n        return ''\n    quote_pos = 0\n    for i in range(len(text1)):\n        if text1[i] == '\"':\n            if quote_pos!= 0:\n                quote_pos += 1\n            else:\n                quote_pos = 0\n            quote_pos += 1\n            end_quote = 0\n            if i == len(text1) - 1:\n                end_quote = 1\n            else:\n                end_quote = 0\n            quote_tokens = text1[quote_pos:i + end_quote]\n            if quote_tokens == '':\n                continue\n            quote_tokens = quote_tokens.replace(\"'\", \"\")\n            return quote_tokens\n    return ''\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = []\n    for i in range(len(text1)):\n        if text1[i] =='':\n            if i+1 < len(text1):\n                if text1[i+1] == '\"' or text1[i+1] == \"'\":\n                    values.append(text1[i:i+1])\n                    i+=1\n                    continue\n    return values\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Start with a copy of the string\n    quotation = text1.replace('\\n', '')\n    # Split up the quotation\n    quotation_list = quotation.split('\"')\n    # Check if the quotation contains all the numbers and check for a list of the correct values\n    for i in range(len(quotation_list)):\n        if not (re.findall('\\d', quotation_list[i])):\n            continue\n        # Remove the quotation mark\n        quotation_list[i] = quotation_list[i][1:]\n        # Check the values\n        if quotation_list[i].startswith('\"') and quotation_list[i].endswith('\"'):\n            # Split the list of values and remove the first and the last quotation mark\n            quotation_list[i] = quotation_list[i][1:-1]\n    # Remove the quotation from the end of the string\n    quotation_list = quotation_list[:-1]\n    # Remove the quotation mark from the start of the string\n    quotation_list = quotation_list[1:]\n    # Join the list of values together\n    quotation_list = '\".join(quotation_list)\n    # Return the list\n    return quotation_list\ndef extract_case_values(quotation):\n    '''\n    Write a function to extract all the values for the \"case\" attribute of a quote\n    '''\n    case_value_list = []\n    # Check if the quotation contains all the numbers and check for a list of the correct values\n    for i in range(len(quotation)):\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:]\n        if quotation.startswith(\"'\") and quotation.endswith('\"'):\n            quotation = quotation[1:]\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:-1]\n        # Split the list of values and remove the first and the last quotation mark\n        case_value_list = quotation.split('\"')\n        case_value_list[i] = case_value_list[i][1:]\n        # Check the values\n        if case_value_list[i].startswith('\"') and case_value_list[i].endswith('\"'):\n            case_value_list[i] = case_value_list[i][1:-1]\n    return case_value_list\ndef find_quote_mark(quotation):\n    '''\n    Write a function to find a quoted string containing the value of the given string \"quotation\".\n    '''\n    quote_mark = '\"'\n    for i in range(len(quotation)):\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:]\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:]\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:-1]\n        # Check if quotation contains all the quotes\n        if quotation.startswith(quote_mark):\n            # Remove the quote from the end of the string\n            quotation = quotation[:-1]\n            # Check the quote marks\n            if quotation.startswith(quote_mark) and quotation.endswith(quote_mark):\n                quotation = quotation[1:-1]\n    # Return the quoted string\n    return quotation\ndef find_case_values(quotation):\n    '''\n    Write a function to find all the values for the \"case\" attribute of a quote\n    '''\n    case_value_list = []\n    # Check if the quotation contains all the numbers and check for a list of the correct values\n    for i in range(len(quotation)):\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:]\n        if quotation.startswith(\"'\") and quotation.endswith('\"'):\n            quotation = quotation[1:]\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:-1]\n        if quotation.startswith('\"') and quotation.endswith('\"'):\n            quotation = quotation[1:-1]\n        # Split the list of values and remove the first and the last quotation mark\n        case_value_list = quotation.split('\"')\n        case_value_list[i] = case_value_list[i][1:]\n        # Check the values\n        if case_value_list[i].startswith('\"') and case_value_list[i].endswith('\"'):\n            case_value_list[i] = case_value_list[i][1:-1]\n    # Remove the quotation mark from the end of the string\n    case_value_list = case_value_list[:-1]\n    # Remove the quotation mark from the start of the string\n    case_value_list = case_value_list[1:]\n    # Join the list of values together\n    case_value_list = '\".join(case_value_list)\n    # Return the list\n    return case_value_list\ndef extract_quotation_and_case(quotation):\n    '''\n    Write a function to extract values between quotation and case.\n    '''\n    quotation_list = extract_quotation(quotation)\n    case_values = extract_case_values(quotation_list)\n    quote_mark_list = find_quote_mark(quotation_list)\n    case_values = find_case_values(quote_mark_list)\n    return quotation_list, case_values\ndef add_quotation(quotation, case):\n    '''\n    Write a function to add quotation and case to a given string.\n    '''\n    # If the quotation is empty\n    if quotation == '':\n        quotation = quotation\n    # If the quotation contains only quotes\n    if quotation.startswith('\"'):\n        quotation = quotation[1:]\n    # If the quotation does not contains any quotes\n    if quotation.endswith('\"'):\n        quotation = quotation[:-1]\n    # Check if the case is empty\n    if case == '':\n        case = case\n    # If the case is empty\n    if case.startswith('\"'):\n        case = case[1:]\n    # If the case contains only quotes\n    if case.endswith('\"'):\n        case = case[:-1]\n    # Add the quotation to the end of the string\n    quotation += case\n    return quotation\ndef remove_quotation(quotation):\n    '''\n    Write a function to remove quotation from a given string.\n    '''\n    # Check if the quotation contains only quotes\n    if quotation.startswith('\"'):\n        quotation = quotation[1:]\n    if quotation.endswith('\"'):\n        quotation = quotation[:-1]\n    # Check if the case contains only quotes\n    if quotation.startswith('\"'):\n        quotation = quotation[1:]\n    # Remove the quotation from the end of the string\n    quotation = quotation[:-1]\n    # Remove the quotation from the start of the string\n    quotation = quotation[1:]\n    # Return the list\n    return quotation\ndef check_if_quote_mark(quote):\n    '''\n    Write a function to check if the given quote contains the quote mark and check whether it is a case value\n    '''\n    # Check if the quotation contains all the quotes\n    if quotation.startswith('\"'):\n        if quotation.endswith('\"'):\n            return True\n    # If the quotation does not contains any quotes\n    if quotation.endswith('\"'):\n        return False\n    # Check if the quotation contains a case value\n    if quotation.startswith('\"'):\n        if quotation.endswith('\"'):\n            return True\n    # If the quotation contains a case value\n    if quotation.startswith('\"'):\n        if quotation.endswith('\"'):\n            return False\n    return False\ndef remove_case_value(quote):\n    '''\n    Write a function to remove case values from a given string.\n    '''\n    # Check if the quotation contains case values\n    if quotation.startswith('\"'):\n        quote = quotation[1:]\n    if quotation.endswith('\"'):\n        quote = quotation[:-1]\n    # Check if the case contains cases\n    i"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_regex = re.compile(r'\\b(?=(?<=\\\")|(?<=[!-]))(?:(?=\\\")|\\')|(?<=[!-])(?=\\\")|\\b(?<=[!-]))[\\w\\W]+|(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\b(?<=[!-])(?=\\\")|\\"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = ''.join(text1.split('\"'))\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"&quot;\", \"\")\n    text = text.replace(\"&amp;\", \"\")\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #for example:\n    #    \"I love you\"\n    #    \"I am tired of waiting\"\n    #    \"You can ask me to read my book\"\n    #    \"I am tired of waiting\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\"\n    #    \"I am tired of reading\""
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.split(' ')\n    values = []\n    for word in text:\n        if re.match(r\"[A-Z]\", word):\n            values.append(word)\n    return values\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"\u201c\", '\"').replace('\u2019', \"'\").replace(\"\u2018\", \"'\")\n    text1 = re.sub(\"(?:\\\u201c|\\\u2019|\\\u2018)(.+?)\\\u201d|(?:\\\u201d|\\\u201c)(.+?)\\\u201d\", \"\\\"\\1\\\"\", text1)\n    text1 = re.sub('(?<!^)([?!])\\r', \"\", text1)\n    text1 = text1.replace(\"\\n\", \"\").replace(\"\\t\", \"\").replace(\"\\r\", \"\").replace(\"\\u2019\", \"'\")\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = re.sub(\"( ){2,}\", \" \", text1)\n    text1 = re.sub(\"([`])\", \"\\\\1\", text1)\n    text1 = re.sub(\"( ){2,}\", \" \", text1)\n    #print(\"Extracting quotation marks: \" + text1)\n    text1 = re.sub(\"(.)\", \"\\\\1\", text1)\n    #print(\"Extracting closing quotation marks: \" + text1)\n    text1 = text1.split()\n    return text1\n    #return text1\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = len(test_tup)\n    for i in range(1,t_N):\n        t_i = test_tup[i]\n        t_i_1 = t_1*t_i\n        t_1 = t_i_1\n    return t_1\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # For the last element\n    res = test_tup\n    # For the second last element\n    for i in range(len(test_tup)-1):\n        res[i] = test_tup[i]*test_tup[i+1]\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if test_tup == ():\n        return(())\n    elif len(test_tup) < 3:\n        return(test_tup)\n    else:\n        return(test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)):\n        res += test_tup[i] * test_tup[i + 1]\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_i = test_tup[0]\n    t_j = test_tup[1]\n    if t_i > t_j:\n        t = (t_i, t_j)\n    else:\n        t = (t_j, t_i)\n    return t\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2 = test_tup\n    \n    return (t_1, t_2)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    lst = []\n    \n    for i in test_tup:\n        lst.append(i * test_tup[i+1])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] * test_tup[i + 1]\n    return (total)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = []\n    for i in range(len(test_tup)):\n        t_list.append(test_tup[i]*test_tup[i+1])\n    return t_list\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum = sum + test_tup[i+1] * t_1\n    return (sum, t_2)\n    \ndef combine_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    sum = 0\n    for i in range(len(test_tup)):\n        sum = sum + t_1 * t_2\n        t_2 = t_2 * test_tup[i+1]\n    return (sum, t_2)\n    \ndef find_duplicate_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N where the i-th element of the tuple is not equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum = sum + t_1 * t_2\n        t_2 = t_2 * test_tup[i+1]\n    return (sum, t_2)\n    \ndef make_inverted_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1} * t_{i+2}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    sum = 0\n    for i in range(len(test_tup)-2):\n        sum = sum + t_1 * t_2\n        t_2 = t_2 * test_tup[i+2]\n        t_1 = t_1 * test_tup[i+1]\n    return (sum, t_2)\n    \ndef extend_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1} * t_{i+2} + t_i * t_{i+2} * t_{i+3} + t_i * t_{i+3} * t_{i+4}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    sum = 0\n    for i in range(len(test_tup)-3):\n        sum = sum + t_1 * t_2\n        t_2 = t_2 * t_3\n        t_3 = t_3 * t_4\n        t_1 = t_1 * t_2\n        t_2 = t_2 * t_3\n        t_3 = t_3 * t_4\n    return (sum, t_2)\n    \ndef multiply_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1} * t_{i+2} * t_{i+3} * t_{i+4}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    sum = 0\n    for i in range(len(test_tup)-5):\n        sum = sum + t_1 * t_2\n        t_2 = t_2 * t_3\n        t_3 = t_3 * t_4\n        t_1 = t_1 * t_2\n        t_2 = t_2 * t_3\n        t_3 = t_3 * t_4\n    return (sum, t_3)\n    \ndef divide_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1} * t_{i+2} * t_{i+3} * t_{i+4}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    sum = 0\n    for i in range(len(test_tup)-5):\n        sum = sum + t_1 * t_2\n        t_2 = t_2 * t_3\n        t_3 = t_3 * t_4\n        t_1 = t_1 * t_2\n        t_2 = t_2 * t_3\n        t_3 = t_3 * t_4\n    return (sum, t_3)\n    \ndef count_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N where the i-th element of the tuple is equal to t_i * count_tuple(t_{i+1}) + count_tuple(t_{i+2}) + count_tuple(t_{i+3}) + count_tuple(t_{i+4}) + count_tuple(t_{i+5}) + count_tuple(t_{i+6}) + count_tuple(t_{i+7}) + count_tuple(t_{i+8}) + count_tuple(t_{i+9}) + count_tuple(t_{i+10}) + count_tuple(t_{i+11}) + count_tuple(t_{i+12}) + count_tuple(t_{i+13}) + count_tuple(t_{i+14}) + count_tuple(t_{i+15}) + count_tuple(t_{i+16}) + count_tuple(t_{i+17}) + count_tuple(t_{i+18}) + count_tuple(t_{i+19}) + count_tuple(t_{i+20}) + count_tuple(t_{i+21}) + count_tuple(t_{i+22}) + count_tuple(t_{i+23}) + count_tuple(t_{i+24}) + count_tuple(t_{i+25}) + count_tuple(t_{i+26}) + count_tuple(t_{i+27}) + count_tuple(t_{i+28}) + count_tuple(t_{i+29}) + count_tuple(t_{i+30}) + count_tuple(t_{i+31}) + count_tuple(t_{i+32}) + count_tuple(t_{i+33}) + count_tuple(t_{i+34}) + count_tuple(t_{i+35}) + count_tuple(t_{i+36}) + count_tuple(t_{i+37}) + count_tuple(t_{i+38}) + count_tuple(t_{i+39}) + count_tuple(t_{i+40}) + count_tuple(t_{i+41}) + count_tuple(t_{i+42}) + count_tuple(t_{i+43}) + count_tuple(t_{i+44}) + count_tuple(t_{i+45}) + count_tuple(t_{i+46}) + count_tuple(t_{i+47}) + count_tuple(t_{i+48}) + count_tuple(t_{i+4"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = [0]*len(lst1[0])\n    for i in range(len(lst1[0])):\n        for j in range(len(lst1)):\n            new_list[i] += lst1[j][i]\n    for i in range(len(lst2[0])):\n        for j in range(len(lst2)):\n            new_list[i] += lst2[j][i]\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return list(map(lambda x: x[0]+x[1], zip(lst1,lst2)))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [item + item for item in lst1 for item in lst2]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in lst1:\n        sum += lst2[i]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1)+sum(lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum += lst1[i]\n    for j in range(len(lst2)):\n        sum += lst2[j]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in lst1:\n        sum+=i\n    for j in lst2:\n        sum+=j\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum = []\n    for i in range(len(lst1)):\n        lst_sum.append(lst1[i]+lst2[i])\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if not lst1 and not lst2:\n        raise Exception(\"Input parameters are not valid\")\n    if not lst1 or not lst2:\n        raise Exception(\"Input parameters are not valid\")\n    if len(lst1)==1:\n        return [lst1[0]+lst2[0]]\n    else:\n        return [sum_list(lst1[1:],lst2[1:])]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # get the list and calculate the number of consecutive duplicates\n    consec_duplicates = dict()\n    for i in nums:\n        if i not in consec_duplicates:\n            consec_duplicates[i] = 1\n        else:\n            consec_duplicates[i] += 1\n    # save the unique numbers in a dict\n    unique_nums = list(set(nums))\n    for i, j in groupby(consec_duplicates.items(), lambda x: x[0]):\n        if len(j) > 1:\n            for k in j:\n                if k not in unique_nums:\n                    unique_nums.append(k)\n    return unique_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = set(nums)\n    return list(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # We will use groupby to handle multiple repeats and we will use set so that there won't be duplicate values\n    return list(set(g) for k, g in groupby(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    a = nums\n    i = 0\n    for k, v in groupby(nums):\n        if v == a[i]:\n            i += 1\n            a[i] = None\n    return a\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Write your code here.\n    duplicates = []\n    lst = []\n    for element in nums:\n        if element not in lst:\n            duplicates.append(element)\n        else:\n            lst.append(element)\n    return duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(nums)\n    new_list = list(grouped)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums == []:\n        return []\n    else:\n        last_element = nums[0]\n        current_element = nums[0]\n        prev_element = nums[0]\n        prev_list = []\n        for element in nums[1:]:\n            if element!= last_element:\n                if current_element!= element:\n                    prev_list.append((prev_element, prev_element))\n                    prev_element = element\n                    prev_element = last_element\n                    last_element = element\n                else:\n                    prev_element = element\n                    prev_element = last_element\n            current_element = element\n            last_element = element\n        return prev_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            yield num\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for x, y in groupby(nums) if x!= y]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    for i in range(len(nums)-1):\n        if nums[i]==nums[i+1] and nums[i] not in lst:\n            lst.append(nums[i])\n    return lst\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    from maya import cmds\n    from maya.api import OpenMaya as om\n    from maya.api import OpenMayaUI as api\n    from maya.cmds import createNode\n    import pymel.core as pm\n    from vp import project as vp\n    from vp.ui import ui\n    import traceback\n    try:\n        if r >= 1.0:\n            raise ValueError('radius must be greater than 0')\n        elif r >= 0.5:\n            r = 0.5*r\n        elif r >= 0.4:\n            r = 0.4*r\n        elif r >= 0.3:\n            r = 0.3*r\n        elif r >= 0.2:\n            r = 0.2*r\n        elif r >= 0.1:\n            r = 0.1*r\n        elif r >= 0.05:\n            r = 0.05*r\n        elif r >= 0.02:\n            r = 0.02*r\n        elif r >= 0.01:\n            r = 0.01*r\n        elif r >= 0.01:\n            r = 0.01*r\n        else:\n            r = 0.01*r\n        \n        if h <= 0.01:\n            raise ValueError('height must be greater than 0')\n        elif h <= 0.1:\n            h = 0.1*h\n        elif h <= 0.2:\n            h = 0.2*h\n        elif h <= 0.3:\n            h = 0.3*h\n        elif h <= 0.4:\n            h = 0.4*h\n        elif h <= 0.5:\n            h = 0.5*h\n        elif h <= 0.6:\n            h = 0.6*h\n        elif h <= 0.7:\n            h = 0.7*h\n        elif h <= 0.8:\n            h = 0.8*h\n        elif h <= 0.9:\n            h = 0.9*h\n        elif h <= 0.95:\n            h = 0.95*h\n        elif h <= 0.99:\n            h = 0.99*h\n        elif h <= 1.0:\n            h = 1.0*h\n        else:\n            h = 1.0*h\n    except ValueError as e:\n        print('ValueError: ', e)\n        ui.error('ValueError: ', e)\n        traceback.print_exc()\n    except Exception as e:\n        print('Exception: ', e)\n        traceback.print_exc()\n        ui.error('Exception: ', e)\n        ui.error('Exception: ', e)\n        raise ValueError('Error: ', e)\n    try:\n        coneDirection = om.MVector(0,0,0)\n        coneDirection.normalize()\n        coneDirection.multiply(math.pi/180.0)\n        \n        middleDirection = om.MVector(r*math.cos(coneDirection),r*math.sin(coneDirection),0)\n        \n        r = r*math.cos(coneDirection)\n        h = h*math.sin(coneDirection)\n        \n        cone = om.MPlane(om.MPoint(r*math.cos(coneDirection),r*math.sin(coneDirection),0), om.MVector(0,0,0), om.MVector(0,0,1))\n        \n        cube = om.MPlane(om.MPoint(0,0,h), om.MVector(0,0,0), om.MVector(0,0,1))\n        \n        cubePos = om.MPoint(0,0,0)\n        cubePos.setX(r*math.cos(coneDirection))\n        cubePos.setY(r*math.sin(coneDirection))\n        \n        n = om.MNormal(0,0,0)\n        n.normalize()\n        n.multiply(h*r)\n        \n        normal = om.MVector(n.x,n.y,n.z)\n        \n        conePos = om.MVector(0,0,0)\n        conePos.setX(h*math.sin(coneDirection))\n        conePos.setY(h*math.cos(coneDirection))\n        \n        coneM = om.MVector(0,0,0)\n        coneM.setX(0)\n        coneM.setY(0)\n        coneM.setZ(0)\n        \n        #Find the point of the cone.\n        conePos = om.MVector(0,0,0)\n        conePos.setX(r*math.cos(coneDirection))\n        conePos.setY(r*math.sin(coneDirection))\n        \n        #Find the point of the cube.\n        cubePos = om.MVector(0,0,0)\n        cubePos.setX(0)\n        cubePos.setY(0)\n        \n        #Find the normal vector of the cone.\n        n = om.MVector(0,0,0)\n        n.normalize()\n        n.multiply(h*r)\n        coneNormal = om.MVector(n.x,n.y,n.z)\n        \n        coneM.setX(coneNormal.x)\n        coneM.setY(coneNormal.y)\n        coneM.setZ(coneNormal.z)\n        \n        coneM.normalize()\n        coneM.multiply(h*r)\n        \n        cone = om.MPlane(om.MPoint(conePos.x,conePos.y,conePos.z), om.MVector(0,0,0), om.MVector(0,0,1))\n        \n        #Get the vertex normal.\n        normal = om.MVector(n.x,n.y,n.z)\n        normal.normalize()\n        normal.multiply(h*r)\n        \n        #Create a normal vector of the cone.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + coneNormal\n        \n        #Create a vector of normal to the cone.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + coneM\n        \n        #Create a normal vector of the cube.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + cubeM\n        \n        #Create a vector of normal to the cube.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + cubePos\n        \n        #Create a normal vector of the cone.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + coneNormal\n        \n        #Create a normal vector of the cube.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + cubePos\n        \n        #Create a normal vector of the cone.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + coneM\n        \n        #Create a normal vector of the cube.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + cubePos\n        \n        #Create a normal vector of the cone.\n        #Normal is one-sided:\n        #Normal = normal + vector of direction of normal.\n        #Normal is clockwise:\n        #Normal = normal + direction of normal.\n        normal = normal + coneM\n        \n        #Create "
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r*r)*h*2/3\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    x = r*math.cos(math.radians(45))\n    y = r*math.sin(math.radians(45))\n    return math.sqrt(x*x + y*y)\ndef cone_to_surface(a,b,c):\n    '''\n    Write a function that converts the ray described by a,b,c from\n    a cone to a surface of a height of h.\n    '''\n    x = a*c/b\n    return x\ndef surface_to_cone(a,b,c):\n    '''\n    Write a function that converts the ray described by a,b,c from a surface to a cone of\n    a height of h.\n    '''\n    x = c*a/b\n    return x\ndef ray_to_surface(a,b,c):\n    '''\n    Write a function that converts a ray described by a,b,c from\n    a cone to a surface of a height of h.\n    '''\n    x = b*c/a\n    return x\ndef surface_to_ray(a,b,c):\n    '''\n    Write a function that converts a surface to a ray described by a,b,c\n    from a cone to a surface of a height of h.\n    '''\n    x = b*c/a\n    return x\ndef is_convex(a,b,c):\n    '''\n    Write a function that determines whether an equation is convex or not\n    '''\n    return (a*c - b*b*math.sin(math.radians(45)))/(2*b*a*math.cos(math.radians(45)))\ndef is_reflective(a,b,c):\n    '''\n    Write a function that determines whether an equation is reflective or not\n    '''\n    return (b*c - a*math.sin(math.radians(45)))/math.cos(math.radians(45))\ndef is_parallel(a,b,c):\n    '''\n    Write a function that determines whether an equation is parallel or not\n    '''\n    return (c*math.cos(math.radians(45)) - b*math.sin(math.radians(45)))/a\ndef is_implicit(a,b,c):\n    '''\n    Write a function that determines whether an equation is implicit or not\n    '''\n    return (b*c - a*math.sin(math.radians(45)))/a\ndef is_perpendicular(a,b,c):\n    '''\n    Write a function that determines whether an equation is perpendicular or not\n    '''\n    return (a*math.cos(math.radians(45)) + b*math.sin(math.radians(45)))/c\ndef is_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is surface or not\n    '''\n    return (a*math.cos(math.radians(45))*math.sin(math.radians(45)) + b*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_perpendicular_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is perpendicular to a surface or not\n    '''\n    return (b*math.sin(math.radians(45))*math.cos(math.radians(45)) - a*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_surface_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surface or not\n    '''\n    return (a*math.cos(math.radians(45))*math.sin(math.radians(45)) + b*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_perpendicular_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surface or not\n    '''\n    return (b*math.sin(math.radians(45))*math.cos(math.radians(45)) - a*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_surface_cone(a,b,c):\n    '''\n    Write a function that determines whether an equation is a cone or not\n    '''\n    return (a*math.cos(math.radians(45)) + b*math.sin(math.radians(45)))/c\ndef is_perpendicular_cone(a,b,c):\n    '''\n    Write a function that determines whether an equation is a cone or not\n    '''\n    return (b*math.sin(math.radians(45)) - a*math.cos(math.radians(45)))/c\ndef is_surface_cone(a,b,c):\n    '''\n    Write a function that determines whether an equation is a cone or not\n    '''\n    return (a*math.cos(math.radians(45))*math.sin(math.radians(45)) - b*math.sin(math.radians(45)))/c\ndef is_perpendicular_cone(a,b,c):\n    '''\n    Write a function that determines whether an equation is a cone or not\n    '''\n    return (b*math.sin(math.radians(45))*math.cos(math.radians(45)) - a*math.cos(math.radians(45)))/c\ndef is_surface_cone(a,b,c):\n    '''\n    Write a function that determines whether an equation is a cone or not\n    '''\n    return (a*math.cos(math.radians(45))*math.sin(math.radians(45))*math.sin(math.radians(45)) - b*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_surface_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surface or not\n    '''\n    return (a*math.cos(math.radians(45))*math.sin(math.radians(45)) - b*math.cos(math.radians(45))*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_surface_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surface or not\n    '''\n    return (a*math.cos(math.radians(45))*math.sin(math.radians(45)) - b*math.cos(math.radians(45))*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_perpendicular_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surface or not\n    '''\n    return (b*math.sin(math.radians(45))*math.sin(math.radians(45)) + a*math.cos(math.radians(45))*math.sin(math.radians(45)))/c\ndef is_surface_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surface or not\n    '''\n    return (a*math.cos(math.radians(45))*math.cos(math.radians(45)) + b*math.cos(math.radians(45))*math.sin(math.radians(45))*math.sin(math.radians(45)))/c\ndef is_perpendicular_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surface or not\n    '''\n    return (b*math.sin(math.radians(45))*math.sin(math.radians(45)) + a*math.cos(math.radians(45))*math.sin(math.radians(45))*math.cos(math.radians(45)))/c\ndef is_perpendicular_surface(a,b,c):\n    '''\n    Write a function that determines whether an equation is a surfac"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def part_of_cylinder(r,h):\n        if r <= 0.1:\n            return 0.05*r**2\n        else:\n            return 0.5*(r**2 - 1)\n    def surface_area(r,h):\n        return r**2 * (1 + math.cos(math.pi * h / 2) - 2*math.cos(math.pi * (r - 0.1) / 0.8) - 2*math.cos(math.pi * (r - 0.1) / 0.5))\n    def area(r,h):\n        return surface_area(r,h) * part_of_cylinder(r,h)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    sin_t = math.sin(math.radians(t))\n    cos_t = math.cos(math.radians(t))\n    return (r*h*(1-2*sin_t)/(1-cos_t))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return ((3.14159265359/180)*(h**2))*math.pi*r**2\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*math.pi*r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    M = 2*math.pi*r\n    a = (1/math.tan(h/2))*M\n    b = (a*r*(math.sin(h/2)))\n    C = (1/M)*(math.tan(h/2))*(a*r*(math.sin(h/2)))\n    return b,C\ndef topography(z,z1,z2):\n    '''\n    Write a function to calculate the height of the topography.\n    '''\n    z2=z2*(math.tan(z/2))\n    x1 = math.sqrt((1-z2)/z)\n    x2 = math.sqrt((1-z2)/z1)\n    return x1, x2\ndef hg2polygon(h,x):\n    '''\n    Write a function to convert the height of a polygons to polygon.\n    '''\n    x1 = x*(math.tan(h/2))\n    x2 = x*(1-math.tan(h/2))\n    return x1,x2\ndef polygon(x):\n    '''\n    Write a function to convert polygon to coordinates in a tuple.\n    '''\n    return x[0][0],x[0][1]\ndef polygon_normal(poly):\n    '''\n    Write a function to calculate the normal of a polygon.\n    '''\n    x=poly[0]\n    y=poly[1]\n    n = (y[1] - y[0])/(x[1] - x[0])\n    m = (x[1] - x[0])/(y[1] - y[0])\n    return n, m\ndef bbox_to_polygon(bbox):\n    '''\n    Write a function to convert the bounding box coordinates into polygon.\n    '''\n    return [polygon(bbox[0:2]),polygon(bbox[2:4]),polygon(bbox[4:6])]\ndef polygon_from_bbox(poly,bbox):\n    '''\n    Write a function to convert polygon coordinates to bounding box coordinates.\n    '''\n    x1=bbox[0][0]\n    y1=bbox[0][1]\n    x2=bbox[1][0]\n    y2=bbox[1][1]\n    z=bbox[2][2]\n    return [x1,y1,z,x2,y2,z]\ndef polygon_to_bbox(poly,bbox):\n    '''\n    Write a function to convert polygon coordinates to bounding box coordinates.\n    '''\n    x1=poly[0][0]\n    y1=poly[0][1]\n    z=poly[2][2]\n    x2=poly[1][0]\n    y2=poly[1][1]\n    x=bbox[0][0]\n    y=bbox[0][1]\n    z1=bbox[0][2]\n    z2=bbox[2][2]\n    return [x,y,z,x1,y1,z,x2,y2,z2]\ndef polygon_dist(p1,p2):\n    '''\n    Write a function to calculate the distance between two polygons.\n    '''\n    return math.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)\ndef polygon_perimeter(poly):\n    '''\n    Write a function to calculate the perimeter of a polygon.\n    '''\n    n=len(poly)\n    p=0\n    for i in range(n-1):\n        p+=2*poly[i][0] + poly[i][1]\n    p+=2*poly[n-1][0]\n    return p\ndef polygon_area(poly):\n    '''\n    Write a function to calculate the area of a polygon.\n    '''\n    n=len(poly)\n    a=0\n    for i in range(n-1):\n        a+=poly[i][2]*poly[i][1]\n    a+=poly[n-1][2]*poly[n-1][1]\n    return a\ndef polygon_parallel(poly1,poly2):\n    '''\n    Write a function to calculate the parallel of two polygons.\n    '''\n    n1=len(poly1)\n    n2=len(poly2)\n    a1=0\n    a2=0\n    for i in range(n1-1):\n        a1+=poly1[i][2]*poly1[i][1]\n        a2+=poly2[i][2]*poly2[i][1]\n    a1+=poly1[n1-1][2]*poly1[n1-1][1]\n    a2+=poly2[n2-1][2]*poly2[n2-1][1]\n    return a1,a2\ndef polygon_side_perimeter(poly):\n    '''\n    Write a function to calculate the perimeter of a polygon.\n    '''\n    n=len(poly)\n    p=0\n    for i in range(n-1):\n        p+=2*poly[i][0] + poly[i][1]\n    p+=2*poly[n-1][0]\n    return p\ndef polygon_normal_to_line(poly):\n    '''\n    Write a function to calculate the normal to the line that connects two polygons.\n    '''\n    n=len(poly)\n    n_poly=poly[0]\n    for i in range(1,n):\n        n_poly=n_poly*poly[i]\n    return n_poly\ndef polygon_opposite(poly):\n    '''\n    Write a function to calculate the opposite polygon to another polygon.\n    '''\n    n=len(poly)\n    n_poly=poly[0]\n    for i in range(1,n):\n        n_poly=n_poly*poly[i]\n    return n_poly\ndef polygon_covers(poly1,poly2):\n    '''\n    Write a function to determine if two polygons are covers.\n    '''\n    n=len(poly1)\n    c=0\n    for i in range(n-1):\n        if poly1[i][0]!=poly2[i][0] or poly1[i][1]!=poly2[i][1] or poly1[i][2]!=poly2[i][2]:\n            c+=1\n    return c\ndef polygon_area_perimeter(poly):\n    '''\n    Write a function to calculate the area of a polygon.\n    '''\n    n=len(poly)\n    a=0\n    for i in range(n-1):\n        a+=poly[i][0]*poly[i][1]\n        a+=poly[n-1][0]*poly[n-1][1]\n    a+=poly[n-1][0]*poly[n-1][1]\n    return a\ndef polygon_area_perimeter_2(poly):\n    '''\n    Write a function to calculate the area of a polygon.\n    '''\n    n=len(poly)\n    a=0\n    for i in range(n-1):\n        a+=poly[i][0]*poly[i][1]*poly[i][2]\n        a+=poly[n-1][0]*poly[n-1][1]*poly[n-1][2]\n    a+=poly[n-1][0]*poly[n-1][1]*poly[n-1][2]\n    return a\ndef polygon_length(poly):\n    '''\n    Write a function to calculate the length of a polygon.\n    '''\n    n=len(poly)\n    l=0\n    for i in range(n-1):\n        l+=math.sqrt((poly[i][0]-poly[i][1])**2+(poly[i][2]-poly[i][3])**2)\n    return l\ndef polygon_length_2(poly):\n    '''\n    Write a function to calculate the length of a polygon.\n    '''\n    n=len(poly)\n    l=0"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = h * math.pi * r * r\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*h*math.sqrt(3)*math.cos(math.radians(90-r))\n    return s\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace('-', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('$', ':')\n    text = text.replace('&', ':')\n    text = text.replace(';', ':')\n    text = text.replace('?', ':')\n    text = text.replace('%', ':')\n    text = text.replace('_', ':')\n    text = text.replace('=', ':')\n    text = text.replace('*', ':')\n    text = text.replace('%', ':')\n    text = text.replace('$', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\n', ':')\n    text = text.replace('\\t', ':')\n    text = text.replace('\\r', ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace('[', ':')\n    text = text.replace(']', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('{}', ':')\n    text = text.replace('{[', ':')\n    text = text.replace('}', ':')\n    text = text.replace('{}[', ':')\n    text = text.replace('{}{', ':')\n    text = text.replace('}]', ':')\n    text = text.replace('}]', ':')\n    text = text.replace('}]', ':')\n    text = text.replace('[{', ':')\n    text = text.replace('}]', ':')\n    text = text.replace(']{', ':')\n    text = text.replace(']}', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\"'\",\":\")\n    text = text.replace('\"',\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\"'\",\":\")\n    text = text.replace('\"',\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\""
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"\\s+\",\":\",text)\n    text = re.sub(r\"[\\n]+\",\":\",text)\n    text = re.sub(r\"\\n\",\":\",text)\n    text = re.sub(r\"\\,\",\":\",text)\n    text = re.sub(r\"\\.\",\":\",text)\n    text = re.sub(r\"\\;\",\":\",text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\!', ':', text)\n    text = re.sub(r'\\?', ':', text)\n    text = re.sub(r'\\*', ':', text)\n    text = re.sub(r'\\&', ':', text)\n    text = re.sub(r'\\(', ':', text)\n    text = re.sub(r'\\)', ':', text)\n    text = re.sub(r'\\[', ':', text)\n    text = re.sub(r']', ':', text)\n    text = re.sub(r'<', ':', text)\n    text = re.sub(r'>', ':', text)\n    text = re.sub(r'\\_', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\s.,;:_]')\n    text = pattern.sub(':', text)\n    pattern = re.compile(r'[^\\s.,;:_]')\n    text = pattern.sub(':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^A-Za-z0-9_\\. ]+', ':', text)\n    text = re.sub(r'(\\.|\\!|\\?|\\:|\\;|\\>|\\n|\\r|\\t)+', ':', text)\n    text = re.sub(r'(?:(?<=[a-zA-Z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-zA-Z])[\\s]+(?=[A-Za-z])|(?<=[A-Za-z])[\\s]+(?=[^\\w\\s])|(?<=[^\\w\\s])[\\s]+(?=[^\\w\\s])', r':', text)\n    text = re.sub(r'(?:(?<=[0-9])[0-9]+(?=[0-9]))|(?<=[0-9])[0-9]{2,3}(?=[0-9])', r':', text)\n    text = re.sub(r'(?:(?<=[a-zA-Z])[^0-9A-Za-z])|(?<=[^0-9A-Za-z])[^0-9A-Za-z]', r':', text)\n    text = re.sub(r'(?:(?<=[A-Za-z])[^0-9A-Za-z])|(?<=[^0-9A-Za-z])[^0-9A-Za-z]', r':', text)\n    text = re.sub(r'(?:[^\\s])\\1+', r':', text)\n    text = re.sub(r'\\s+', r':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_list = text.split(',')\n    for i in range(len(text_list)):\n        if text_list[i].count(' ') > 0:\n            text_list[i] = ':' + text_list[i]\n    return ''.join(text_list)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s+\", \":\", text) # remove spaces\n    text = re.sub(r\",\", \":\", text) # replace commas\n    text = re.sub(r\"\\.\", \":\", text) # replace periods with colon\n    text = re.sub(r\"\\;\", \";\", text) # replace semicolons with colon\n    text = re.sub(r\"\\:\", \":\", text) # replace : with colon\n    text = re.sub(r\"\\s+\", \":\", text) # remove spaces\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[ \\n\\t\\r]')\n    result = pattern.sub(':', text)\n    return result\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #1. Initialize the counter to zero\n    counter = 0\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #Your code here\n    \n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    min_idx = None\n    max_idx = None\n    idx = 0\n    while idx < len(A):\n        if A[idx] == x:\n            if min_idx == None:\n                min_idx = idx\n            elif A[min_idx] == x:\n                if max_idx == None or A[max_idx] > x:\n                    max_idx = idx\n            idx += 1\n        elif A[idx] < x:\n            idx += 1\n        elif A[idx] > x:\n            min_idx = idx\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Dictionary to store the index of the first occurrence of the number\n    # O(n log n)\n    counter = dict()\n    for i in range(len(A)):\n        if A[i] == x:\n            if i in counter:\n                counter[i] += 1\n            else:\n                counter[i] = 1\n    # Search for the x in the index\n    j = 0\n    while j < len(counter):\n        if x in counter and counter[x] > j:\n            return j\n        j += 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A)-1\n    while first <= last:\n        mid = (first + last)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            last = mid-1\n        else:\n            first = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    i = 1\n    while (i < len(A) and index < len(A)-1):\n        if A[i] == x:\n            index = i\n        i += 1\n    return index\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_subarrays = []\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum_of_subarrays.append(arr[i] * arr[j])\n    for i in range(len(sum_of_subarrays)):\n        sum += sum_of_subarrays[i]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    summ=0\n    sublist=[]\n    for i in range(len(arr)):\n        if arr[i]!=0:\n            sublist.append(arr[i])\n    if len(sublist)==0:\n        return 0\n    else:\n        summ+=sum(sublist)\n        for i in range(len(sublist)):\n            summ+=sublist[i]*len(sublist)\n    return summ\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return arr[0]+arr[1]\n    if arr[0]!=0:\n        return arr[0]\n    sum_of_subarrays=0\n    for i in range(1,len(arr)):\n        for j in range(i):\n            sum_of_subarrays+=arr[i]*arr[j]\n    return sum_of_subarrays\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            s += arr[i]*arr[j]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 0\n    for i in arr:\n        for j in range(1, len(i)+1):\n            ans += i[:j]\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([arr[i] * (i + 1) for i in range(len(arr))])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # initialise the list to store sum of products of all possible subarrays\n    result = 0\n    \n    # iterate through all possible subarrays\n    for i in range(len(arr)):\n        \n        # find the sum of all subarrays\n        result += arr[i] * sum_Of_Subarray_Prod(arr[i+1:])\n    \n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    products = [1 for i in range(n)]\n    currProduct = 1\n    sumProd = 0\n    \n    #Start from every sublist and calculate each product\n    #The values of a sublist are then multiplied with currProduct\n    #The product is then added to the sum of products of all sublists\n    for i in range(0, n - 1):\n        product = arr[i] * currProduct\n        sumProd = sumProd + product\n        currProduct *= product\n        products[i] = currProduct\n    \n    return sumProd\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==1:\n        return arr[0]\n    else:\n        return sum_Of_Subarray_Prod(arr[1:])+sum_Of_Subarray_Prod(arr[:-1])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    sum = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            sum += arr[j] * sum_Of_Subarray_Prod(arr[i:j])\n    return sum\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n\n    count = 0\n    while(count<len(x)-1):\n        if(x[count]==0):\n            x[count] = 1\n        else:\n            x[count] = 0\n        count += 1\n    return x\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n % 2\n    n = n // 2\n    last_bit = n % 2\n    n = n // 2\n    result = first_bit << 1 | n >> 1 | last_bit\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(bin(n))\n    print(bin(int(bin(n)[2:])[::-1]))\n    n = int(bin(int(bin(n)[2:])[::-1])[2:])\n    n = 0xffffffff & n\n    print(n)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    Approach 1:\n    1. Number has to be odd.\n    2. Each pair of bits in one number is swapped.\n    3. Each pair of bits in the other number is swapped.\n    4. There is no need to swap any pair of bits.\n    5. Time complexity = O(n)\n    '''\n    # Algorithm 2\n    while n:\n        if (n & 0x01) == 0x01:\n            n = n << 1\n        else:\n            n = n >> 1\n    # Algorithm 3\n    n = n ^ 0x01\n    # Algorithm 4\n    n = n ^ 0x80\n    # Algorithm 5\n    n = n ^ 0xC0\n    # Algorithm 6\n    n = n ^ 0x40\n    # Algorithm 7\n    n = n ^ 0x20\n    # Algorithm 8\n    n = n ^ 0x10\n    # Algorithm 9\n    n = n ^ 0x08\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n\n    # Check if the first bit is set\n    if n & 1:\n        x = n >> 1\n    # Check if the last bit is set\n    if x & 1:\n        x = x >> 1\n    # Toggle the first bit\n    x = x ^ 1\n    # Toggle the last bit\n    x = x ^ 1\n    return x\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n & 0x80000000:\n        n |= 0x00000000\n    else:\n        n &= 0xFFFFFFFF\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    return [n[i:i+2] for i in range(0, len(n), 2)]"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n - n & 1 | (n - 1) >> 1\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    result = ''\n    for i in range(len(n)):\n        if n[i] == '1':\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bin = bin(n)[2:]\n    count = 0\n    for i in range(len(bin)-1):\n        if bin[i] == '1':\n            count += 1\n    bin[len(bin)-1] = '0'\n    for i in range(len(bin)-1,len(bin)):\n        if bin[i] == '0':\n            count += 1\n    return bin[:count],bin[count:]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return left\n    elif a[left] == x:\n        return left + 1\n    else:\n        return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find where x lies and return its index\n    # Then search for x in sorted order and place it there\n    # returns -1 if the x doesn't exist, and its index\n    if x in a:\n        return a.index(x)\n    else:\n        i = bisect.bisect(a,x)\n        return i - 1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find where x lies and return its index\n    # Then search for x in sorted order and place it there\n    # returns -1 if the x doesn't exist, and its index\n    if x in a:\n        return a.index(x)\n    else:\n        i = bisect.bisect_right(a, x)\n        return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    p = bisect.bisect_left(a, x)\n    if p > n:\n        return -1\n    if p == n:\n        return n\n    elif a[p] > x:\n        return p\n    else:\n        return p + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    pos = bisect_left(a, x)\n    if pos < n:\n        return pos\n    else:\n        return n\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x, lo = 0, hi = n)\n    if i == n:\n        return n\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Write your code here\n    left_list = len(a)\n    #print(f'List: {a}')\n    i = bisect.bisect_left(a, x)\n    #print(f'i: {i}')\n    if i < len(a):\n        return i\n    else:\n        return left_list\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #insertion_point = bisect.bisect_left(a, x)\n    insertion_point = bisect.bisect_right(a, x)\n    if insertion_point == len(a):\n        return len(a)\n    else:\n        return insertion_point\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #insertion_point = bisect.bisect_right(a, x)\n    insertion_point = bisect.bisect_left(a, x)\n    if insertion_point == len(a):\n        return len(a)\n    else:\n        return insertion_point\n    \ndef right_deletion(a, x):\n    '''\n    Write a function to locate the right deletion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #insertion_point = bisect.bisect_right(a, x)\n    insertion_point = bisect.bisect_left(a, x)\n    if insertion_point == len(a):\n        return len(a)\n    else:\n        return insertion_point\n    \ndef insertion_sort(a):\n    '''\n    Write a function to sort a sequence in place. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #insertion_point = bisect.bisect_left(a, x)\n    insertion_point = bisect.bisect_right(a, x)\n    if insertion_point == len(a):\n        return a\n    else:\n        return insertion_point\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i < len(a):\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x in a:\n        left = a.index(x)\n        right = bisect.bisect_left(a, x) - 1\n        return a[left + 1:right]\n    else:\n        return [-1, -1]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex, string)\n    if result is None:\n        return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if string[0] in vowels:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.findall(regex, string)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    check = re.search(regex, string)\n    return check is not None\n    \ndef main():\n    print(\"Hello! This program allows you to enter words and check if they start with a vowel or not.\")\n    word_list = input(\"Enter a list of words separated by a comma (,): \").split(',')\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for word in word_list:\n        if check_str(word) == True:\n            print(word)\n        else:\n            print('Error: word must start with either A, E, I, O, U')\n            \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU]'\n    flag = False\n    for letter in string:\n        if re.match(regex, letter) or re.match(regex, letter.upper()):\n            flag = True\n        else:\n            flag = False\n            break\n    if flag == True:\n        print(\"Yes, '\",string, \"' is starting with a vowel.\")\n    else:\n        print(\"'\",string,\"' is not starting with a vowel.\")\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        pattern = re.compile(regex)\n        return pattern.match(string)!= None\n    except Exception:\n        return False\ndef capitalize(s):\n    '''\n    Write a function to capitalize the first letter of the given string. \n    '''\n    return s.upper()[0] + s.upper()[1:]\ndef is_capital(s):\n    '''\n    Write a function to check whether the given string is capitalized or not using regex.\n    '''\n    return check_str(s) and re.search('[A-Z]', s)!= None\ndef is_vowel(s):\n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return check_str(s) and re.search('[a-z]', s)!= None\ndef is_num(s):\n    '''\n    Write a function to check whether the given string is a number or not using regex.\n    '''\n    return check_str(s) and re.search('[0-9]', s)!= None\ndef is_space(s):\n    '''\n    Write a function to check whether the given string is a space or not using regex.\n    '''\n    return check_str(s) and re.search('[\\s]', s)!= None\ndef is_cap(s):\n    '''\n    Write a function to check whether the given string is capitalized or not using regex.\n    '''\n    return check_str(s) and re.search('[A-Z]', s)!= None\ndef is_num_capital(s):\n    '''\n    Write a function to check whether the given string is a number capitalized or not using regex.\n    '''\n    return check_str(s) and re.search('[0-9]', s)!= None\ndef is_special(s):\n    '''\n    Write a function to check whether the given string is special or not using regex.\n    '''\n    return check_str(s) and re.search('[!@#$%^&*_]', s)!= None\ndef split(s):\n    '''\n    Split the given string using the given regex to split it into a list of strings.\n    '''\n    return re.split(regex, s)\ndef is_word(s):\n    '''\n    Write a function to check whether the given string is a word or not using regex.\n    '''\n    return re.search('[a-zA-Z]', s)!= None\ndef is_word_capital(s):\n    '''\n    Write a function to check whether the given string is a word capitalized or not using regex.\n    '''\n    return re.search('[A-Z]', s)!= None\ndef is_num_word(s):\n    '''\n    Write a function to check whether the given string is a word number or not using regex.\n    '''\n    return re.search('[0-9]', s)!= None\ndef split_word(s):\n    '''\n    Split the given string using the given regex to split it into a list of strings.\n    '''\n    return re.split(regex, s)\ndef get_space(s):\n    '''\n    Write a function to get a given string as a space and return it.\n    '''\n    return'' + s\ndef join(s):\n    '''\n    Join a given string using the given regex to join it into a string.\n    '''\n    return ''.join(s)\ndef strip(s):\n    '''\n    Write a function to get a given string as a whitespace separated string and return it.\n    '''\n    return''.join(s.split())\ndef replace(s, old, new):\n    '''\n    Write a function to get a given string as a whitespace separated string and return it.\n    '''\n    return s.replace(old, new)\ndef fix_space(s):\n    '''\n    Write a function to get a given string as a whitespace separated string and return it.\n    '''\n    return s.replace(' ','')\ndef lower(s):\n    '''\n    Write a function to get a given string as a string and return it.\n    '''\n    return s.lower()\ndef upper(s):\n    '''\n    Write a function to get a given string as a string and return it.\n    '''\n    return s.upper()\ndef get_split_words(s):\n    '''\n    Split the given string using the given regex and return a list of strings.\n    '''\n    return re.split(regex, s)\ndef reverse(s):\n    '''\n    Write a function to get a given string as a reversed string and return it.\n    '''\n    return s[::-1]\ndef in_lower_case(s):\n    '''\n    Write a function to check whether the given string is in lower case or not using regex.\n    '''\n    return check_str(s) and re.search('[a-z]', s)!= None\ndef is_vowel_or_upper(s):\n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return check_str(s) and re.search('[a-z]', s)!= None and re.search('[A-Z]', s)!= None\ndef is_digit(s):\n    '''\n    Write a function to check whether the given string is a digit or not using regex.\n    '''\n    return check_str(s) and re.search('[0-9]', s)!= None\ndef is_alpha(s):\n    '''\n    Write a function to check whether the given string is a alphabet or not using regex.\n    '''\n    return check_str(s) and re.search('[a-zA-Z]', s)!= None\ndef is_space_or_cap(s):\n    '''\n    Write a function to check whether the given string is a space or a capitalized string or not using regex.\n    '''\n    return check_str(s) and re.search('[\\s]', s)!= None\ndef is_num_capital(s):\n    '''\n    Write a function to check whether the given string is a number capitalized or not using regex.\n    '''\n    return check_str(s) and re.search('[0-9]', s)!= None\ndef is_special_or_num(s):\n    '''\n    Write a function to check whether the given string is a special or number or not using regex.\n    '''\n    return check_str(s) and re.search('[!@#$%^&*_]', s)!= None\ndef is_cap_special(s):\n    '''\n    Write a function to check whether the given string is a capitalized special string or not using regex.\n    '''\n    return check_str(s) and re.search('[A-Z]', s)!= None\ndef is_word_cap(s):\n    '''\n    Write a function to check whether the given string is a capitalized word or not using regex.\n    '''\n    return check_str(s) and re.search('[A-Z]', s)!= None and re.search('[A-Z]', s)!= None\ndef is_num_special(s):\n    '''\n    Write a function to check whether the given string is a number capitalized or not using regex.\n    '''\n    return check_str(s) and re.search('[0-9]', s)!= None\ndef is_num_capital_special(s):\n    '''\n    Write a function to check whether the given string is a number capitalized special or not using regex.\n    '''\n    return check_str(s) and re.search('[0-9]', s)!= None and re.search('[0-9]', s)!= None and re.search('[A-Z]', s)!= None\ndef is_num_vowel(s):\n    '''\n    Write a function to check whether the given string is a number vowel or not using regex.\n    '''\n    return check_str(s) and re.search('[a-zA-Z]', s)!= Non"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)!= None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowel_re = re.compile(regex)\n    result = vowel_re.match(string)\n    if result:\n        print(string +'is starting with vowel.')\n    else:\n        print(string +'is not starting with vowel.')\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\ndef check_str_2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if not re.match(regex,string):\n        return False\n    return True\ndef number_of_brackets(string): \n    '''\n    Write a function to count the number of brackets.\n    '''\n    brackets = 0\n    for i in string:\n        if i in [\"(\",\"[\",\"{\"]:\n            brackets+=1\n    return brackets\ndef close_brackets(string): \n    '''\n    Write a function to count the number of closing brackets.\n    '''\n    brackets = 0\n    for i in string:\n        if i in [\"]\",\"]\",\"}\",\"]\"]:\n            brackets+=1\n    return brackets\ndef alphabet_value(string): \n    '''\n    Write a function to count the number of different letters in the given string.\n    '''\n    value = 0\n    for i in string:\n        if i not in [\"(\",\"[\",\"{\"]:\n            value+=1\n    return value\ndef is_perfect_number(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str_2(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_2(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_3(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = close_brackets(string)\n    return value == 1\ndef is_perfect_number_4(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_5(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_6(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = close_brackets(string)\n    return value == 1\ndef is_perfect_number_7(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_8(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_9(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = close_brackets(string)\n    return value == 1\ndef is_perfect_number_10(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_11(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_12(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = close_brackets(string)\n    return value == 1\ndef is_perfect_number_13(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_14(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_15(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = close_brackets(string)\n    return value == 1\ndef is_perfect_number_16(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_17(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_18(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = close_brackets(string)\n    return value == 1\ndef is_perfect_number_19(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_20(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_21(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = close_brackets(string)\n    return value == 1\ndef is_perfect_number_22(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = alphabet_value(string)\n    return value == 10\ndef is_perfect_number_23(string): \n    '''\n    Write a function to check whether the given string is a perfect number or not using regex.\n    '''\n    if not check_str(string):\n        return False\n    value = number_of_brackets(string)\n    return value == 2\ndef is_perfect_number_24(string): \n    '''\n    Write a function to check whether the given strin"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = re.findall(regex, string)\n    return len(vowels) > 0\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    return n * geometric_sum(n-1)\n    \n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    #HINT: You may not use list comprehension\n    #E.g. add_one([1, 2, 3]) --> [1, 2, 3]\n    #HINT: you may not modify the argument list\n    #E.g. add_one(n=1) --> 1\n    #HINT: Think about the complexity of the recursive function\n    #E.g. add_one(n=4) --> 12\n    #HINT: You may not modify the argument list\n    #E.g. add_one(n=4, x=8) --> 8 8 8\n    #HINT: You may not modify the argument list\n    #E.g. add_one(n=4, x=8, y=9) --> 9 9 9 9 9 9 9 9 9\n    #HINT: You may not modify the argument list\n    #E.g. add_one(n=4, x=8, y=9, z=10) --> 10 10 10 10 10 10 10 10 10 10 10 10 10\n    #HINT: You may not modify the argument list\n    #E.g. add_one(n=4, x=8, y=9, z=10, xy=11, xz=12, xyz=13, xyz=14, xyzz
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    s=0\n    if n<=1:\n        return n\n    else:\n        s=n*geometric_sum(n-1)\n        return s\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # check if number is positive \n    if(n<0): \n        return -1 \n    # set maximum value to infinity \n    maxi = 10000000000\n    \n    # find the sum of the factors \n    for i in range(1, int(math.sqrt(n))+1): \n        if(n%i == 0): \n            if(n//i == i): \n                return int(math.floor(n/i))\n            else: \n                if(n//i < i): \n                    return int(math.floor(n/i))+1\n                else: \n                    return int(math.floor(n/i)) \n    return -1 \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 0:\n        print(\"ERROR\")\n    elif n == 0:\n        print(0)\n    elif n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n > 2:\n        print(\"ERROR\")\n    else:\n        r = 1\n        while r <= n:\n            mid = (r + n // r) // 2\n            print(mid)\n            if n % mid == 0:\n                n = mid\n            else:\n                n = mid - 1\n        print(n)\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n_digits=int(n)\n    count=0\n    #for i in range(1,n+1):\n    for i in range(1,n_digits+1):\n        for j in range(n_digits-i):\n            if (n_digits-i)%j==0:\n                count+=1\n        if count==0:\n            return i\n        count=0\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # get the number of digits\n    dig = len(str(n))\n    \n    # return the index of smallest triangular number \n    return math.ceil((dig-1)/2) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Given a string, return the index of the first index in that string whose digits \n    # are a multiple of 3. For example, '212' should return 3, which is the third \n    # index of the string '212'.\n    # Return the index of the first index in that string whose digits are a multiple \n    # of 3, which is the first index of the string in that string whose digits \n    # are a multiple of 3. For example, '212' should return 2, which is the second \n    # index of the string '212'.\n    # Return -1 if there is no such index.\n    # Use this function to find the index of a triangular number with n digits.\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    n = int(n)\n    i = 1\n    while i <= n:\n        j = 1\n        while j < n/i:\n            print(i,end=\" \")\n            j += 1\n        print(\"\\n\")\n        i += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    if count > 1:\n        return -1\n    else:\n        return count \nn = int(input(\"Enter a number: \"))\nx = int(math.sqrt(n))"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Step 1: Find the starting index \n    idx = 0\n    # Step 2: Calculate the sum of all digits of n-th index\n    i = 1\n    j = 1\n    while i < n:\n        j = 1\n        sum = 0\n        while j < i:\n            sum += int(math.sqrt(i))\n            j += 1\n        i += 1\n        idx = sum\n    return idx\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                break\n        else:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n    \ndef get_min(dict):\n    '''\n    Write a function to find the minimum value in a dictionary.\n    '''\n    min_dict = dict.copy()\n    for key, value in dict.items():\n        if value < min_dict[key]:\n            min_dict[key] = value\n    return min_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for item in test_tup:\n        if item in new_dict:\n            new_dict[item] += 1\n        else:\n            new_dict[item] = 1\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == test_tup[i][1]:\n            test_tup[i] = test_tup[i][0]\n        else:\n            test_tup[i] = test_tup[i][0] + '-' + test_tup[i][1]\n    return test_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tuple = {}\n    for i in test_tup:\n        dict_tuple[i] = test_tup.index(i)\n    return dict_tuple\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output = {}\n    for k,v in test_tup:\n        output[k] = v\n    return output"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {tup[i]:tup[(i+1) % len(tup)] for i in range(len(tup) // 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for index in range(len(test_tup) - 1):\n        dct[test_tup[index]] = test_tup[index + 1]\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for k,v in test_tup:\n        d[k] = v\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(char.isalpha() for char in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    temp = [chr(x) for x in range(ord('a'),ord('z')+1)]\n    letters = []\n    for i in range(len(s)):\n        letters.append(s[i])\n    for i in temp:\n        if i not in letters:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    assert len(s) == len(set(s))\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    counter = 0\n    for char in s :\n        if char.isalpha() :\n            counter += 1\n    return counter == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    All_char = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for char in s :\n        if char not in All_char :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    d = {}\n    for i in s :\n        d[i] = 1\n    return d == d\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if(s[i].islower() and s[i].isupper() and s[i].isdigit()) :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize count to zero\n    count = 0\n    # Iterate through each letter\n    for i in s :\n        # Check if the letter is an alpha\n        if(i.isalpha()):\n            # Increment the count of the letter\n            count = count + 1\n    # Return the number of alpha characters\n    return (count == len(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    count = 0\n    for i in s :\n        if i not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\":\n            count += 1\n    return count == len(s)\n        \nprint(all_Characters_Same('abcd'))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = list(s)\n    for i in range(len(s)) :\n        if s[i]!= s[i+1] :\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'a':\n        return math.pi * (3 ** 2)\n    elif side == 'b':\n        return math.pi * (3 ** 3)\n    else:\n        return math.pi * (3 ** 4)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #calculate base side\n    base_side=math.sqrt(side/4)\n    #calculate dimension\n    dimension=math.pow(base_side,2)\n    #calculate volume\n    volume=4*math.pi*(base_side*dimension)\n    return volume\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return 7.8\n    elif side == 2:\n        return 2.34\n    elif side == 3:\n        return 2.75\n    elif side == 4:\n        return 5.2\n    elif side == 5:\n        return 5.61\n    elif side == 6:\n        return 7.5\n    else:\n        return\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_square=side**2\n    side_squared_sum=side_square\n    for i in range(1,side_square,1):\n        side_squared_sum=side_squared_sum+i**2\n    return side_squared_sum\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side[0]\n    b = side[1]\n    c = side[2]\n    d = side[3]\n    return (a * d) / 2 + (b * c) / 2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = (2*side - 1)\n    c = (side - 1)\n    d = (side*(side - 1))\n    e = (side*(side - 1) - 1)\n    f = (side*(side - 1))\n    g = (side - 1)\n    h = (side*(side - 1))\n    i = (side*(side - 1) - 1)\n    j = (side*(side - 1) - 1)\n    k = (side - 1)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side < 0:\n        return 0\n    else:\n        return side**3/3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side**2 * 4 / 3\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    # try:\n    #     side = int(side)\n    # except ValueError:\n    #     print(\"Side must be a number\")\n    #     return -1\n    \n    if side == 0 or side == 1:\n        return side**2\n    else:\n        # assume sides are multiples\n        return side**2 * math.sqrt(3)\n    # except:\n    #     return -1\n    \ndef parallelogram(side1, side2, side3):\n    '''\n    Write a function to calculate the parallelogram area.\n    '''\n    return side1 * side2 * side3\n    \ndef parallelogram_check(side1, side2, side3):\n    '''\n    Write a function to check if a parallelogram is in triangle.\n    '''\n    \n    if side1 == side2 or side2 == side3 or side3 == side1:\n        return True\n    else:\n        return False\n    \ndef triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    \n    if parallelogram_check(side1, side2, side3):\n        return parallelogram(side1, side2, side3)\n    else:\n        return -1\n    \ndef pascal(n):\n    '''\n    Write a function to calculate the area of a parallelogram\n    '''\n    \n    area = n * parallelogram(n, n, n)\n    return area\n    \ndef lcm(a, b):\n    '''\n    Write a function to calculate the LCM of two numbers.\n    '''\n    \n    if a > b:\n        return lcm(a, b)\n    else:\n        return (a * b) // math.gcd(a, b)\n    \ndef power(a, b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    \n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n    \ndef gcd(a, b):\n    '''\n    Write a function to calculate the greatest common denominator.\n    '''\n    \n    if a == 0:\n        return b\n    else:\n        return gcd(b%a, a)\n    \ndef fact(a):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    \n    if a == 0:\n        return 1\n    else:\n        return a * fact(a - 1)\n    \ndef prime(n):\n    '''\n    Write a function to determine if a number is a prime number.\n    '''\n    \n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        return True\n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is a prime number.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n        \ndef is_fib(n):\n    '''\n    Write a function to determine if a number is a fibonacci number.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        return (is_prime(n-1) and is_prime(n-2) and is_prime(n-3) and is_prime(n-4) and is_prime(n-5))\n    \ndef is_cof(n):\n    '''\n    Write a function to determine if a number is a concave number.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        return (is_prime(n-1) and is_prime(n-2) and is_prime(n-3) and is_prime(n-4) and is_prime(n-5))\n    \ndef is_hermitian(n):\n    '''\n    Write a function to determine if a number is hermitian.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        return (is_prime(n-1) and is_prime(n-2) and is_prime(n-3) and is_prime(n-4) and is_prime(n-5))\n    \ndef is_tetrahedron(n):\n    '''\n    Write a function to determine if a number is a tetrahedron.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        return (is_prime(n-1) and is_prime(n-2) and is_prime(n-3) and is_prime(n-4) and is_prime(n-5))\n    \ndef is_triangle(n):\n    '''\n    Write a function to determine if a number is a triangle.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n    \ndef is_square(n):\n    '''\n    Write a function to determine if a number is a square.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n    \ndef is_square_prime(n):\n    '''\n    Write a function to determine if a number is a square prime.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n        \ndef is_square_fibonacci(n):\n    '''\n    Write a function to determine if a number is a square fibonacci.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n        \ndef is_triangle_prime(n):\n    '''\n    Write a function to determine if a number is a triangle prime.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n    \ndef is_square_prime_small(n):\n    '''\n    Write a function to determine if a number is a square prime small.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n    \ndef is_power(n):\n    '''\n    Write a function to determine if a number is a power of 2.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n    \ndef is_power_prime(n):\n    '''\n    Write a function to determine if a number is a power of 2 prime.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n % i) == 0:\n                return False\n        return True\n    \ndef is_square_sqrt(n):\n    '''\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    size = len(list)\n    k = size // 2\n    for i in range(k):\n        list[i], list[size - i - 1] = list[size - i - 1], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m % 2 == 1:\n        n = m//2\n        for i in range(n):\n            tmp = list.pop()\n            list.insert(0,tmp)\n    else:\n        n = m//2\n        for i in range(n):\n            tmp = list.pop()\n            list.insert(len(list),tmp)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list = list[-m:] + new_list[:-m]\n    return new_list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list = new_list[-m:] + new_list[:-m]\n    return new_list\n    \ndef invert(list):\n    '''\n    Write a function to invert a given list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list = new_list[::-1]\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    if m == 1:\n        return list\n    \n    if m == 2:\n        return rotate_left(list, m)\n    \n    return rotate_left(list, m-1) + rotate_right(list, m-1)\n    \ndef rotate_right_rec(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    if m == 1:\n        return rotate_left(list, m)\n    \n    return rotate_left(list, m-1) + rotate_right(list, m-1)\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    if m == 1:\n        return rotate_right(list, m)\n    \n    return rotate_right(list, m-1) + rotate_left(list, m-1)\n    \ndef rotate_right_rec(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    if m == 1:\n        return rotate_right(list, m)\n    \n    return rotate_right(list, m-1) + rotate_left(list, m-1)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialise end index and size of list \n    end = len(list) - 1\n    size = end\n    i = 0\n    # find the last index of the list\n    while i < size:\n        if end == i:\n            break\n        if list[i] == end:\n            end = end - 1\n        i = i + 1\n    # copy the list to the right by swapping in the middle element\n    # at the end\n    list[i], list[end] = list[end], list[i]\n    # swap left and right side\n    list[i], list[start] = list[start], list[i]\n    # recurse\n    rotate_right(list, m)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(len(list) - m):\n        list[i], list[i + m] = list[i + m], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    newlist = []\n    for elem in list:\n        newlist.append(elem)\n    for _ in range(m):\n        i = len(newlist) - 1\n        while i > 0:\n            newlist[i - 1], newlist[i] = newlist[i], newlist[i - 1]\n            i -= 1\n    return newlist"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return (list[n-1:0:-1] + list[0:n-1:1])\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    l = n - m\n    return list[l:] + list[:l"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m % 2 == 0:\n        return list[::-1]\n    else:\n        return list[:-1] + list[1:]\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if test_tup else False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None or test_tup[1] is None or test_tup[2] is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup_flag = False\n    if test_tup is None or test_tup == ():\n        test_tup_flag = True\n    return test_tup_flag\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    digits = (int(startnum) % 10) + (int(endnum) % 10)\n    if (int(endnum) % 10) == 0:\n        digits = 0\n    startnum = int(startnum)\n    endnum = int(endnum)\n    if digits < 0 or digits > 9:\n        return \n    for num in range(startnum, endnum + 1):\n        if num % digits == 0:\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    # set the parameters to the function\n    startnum = int(startnum)\n    endnum = int(endnum)\n    \n    # set the function name\n    name = \"divisible_by_digits\"\n    \n    # create a lambda expression\n    result = lambda a: a % 10\n    \n    # check if startnum is greater than endnum\n    if startnum > endnum:\n        raise ValueError(\"startnum is greater than endnum\")\n    \n    # check if startnum is not less than or equal to endnum\n    if startnum <= 0:\n        raise ValueError(\"startnum is less than or equal to endnum\")\n    \n    # check if endnum is greater than startnum\n    if endnum >= 10:\n        raise ValueError(\"endnum is greater than startnum\")\n    \n    # check if endnum is not less than 0\n    if endnum <= 0:\n        raise ValueError(\"endnum is less than 0\")\n    \n    # find all digits in the given numbers\n    digits = range(startnum, endnum)\n    \n    # iterate through digits from startnum to endnum\n    for digit in digits:\n        # check if digit is divisible by any of the digits\n        if result(digit) == 0:\n            continue\n        \n        # find the factorial of that digit\n        factorial = result(digit) * result(digit-1)\n        \n        # check if factorial is divisible by the number of digits\n        if factorial % 10 == digit:\n            print(\"{} is divisible by {}\".format(digit, factorial))\n    \n    # if startnum and endnum were divisible by each other\n    # then the function should return True\n    # otherwise it should return False\n    return (startnum + endnum) % 10 == "
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Declare a new list\n    digit_list = []\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    answer = []\n    num = startnum\n    for i in range(startnum, endnum+1):\n        if num % 10 == 0:\n            answer.append(num)\n        else:\n            num += 1\n    return answer\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num):\n        temp = str(num)\n        for i in range(0,len(temp)):\n            if temp[i] == \"0\":\n                return False\n        return True\n    \n    count = 0\n    for i in range(startnum,endnum):\n        if is_divisible(i):\n            count += 1\n            \n    print(count)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # your code goes here\n    # note the \"%s\" is for the string, not the variable\n    # keep this format!\n    # example:\n    # for start in range(startnum, endnum+1):\n    #    num = sum([int(digit) for digit in str(start)])\n    #    if num % 10 == 0:\n    #        print(start)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # For every number within the range between the parameters startnum and endnum.\n    digits = lambda x: [str(num) for num in range(1,10)]\n    print(digits(startnum))\n    print(digits(endnum))\n    \n    # First check if the number is divisible by every digit of it.\n    # If it is, return True, if it is not divisible by every digit, return False.\n    def divisible_by_digits(startnum, endnum):\n        digits = lambda x: [str(num) for num in range(1,10)]\n        print(digits(startnum))\n        print(digits(endnum))\n        \n        if endnum % startnum == 0:\n            return True\n        else:\n            return False\n    \n    print(divisible_by_digits(startnum, endnum))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(num):\n        return num % 10 == 0\n    def is_divisible_by_digit_lst(lst):\n        return all(is_divisible_by_digit(num) for num in lst)\n    lst = [int(i) for i in str(startnum)]\n    \n    # print(is_divisible_by_digit_lst(lst))\n    # print(is_divisible_by_digit_lst([4,2,0]))\n    \n    return is_divisible_by_digit_lst(lst)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numlist = []\n    for i in range(startnum,endnum+1):\n        if i % 10 == 0:\n            numlist.append(i)\n    return numlist\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = {\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n        \"ten\": 10,\n        \"eleven\": 11,\n        \"twelve\": 12,\n        \"thirteen\": 13,\n        \"fourteen\": 14,\n        \"fifteen\": 15,\n        \"sixteen\": 16,\n        \"seventeen\": 17,\n        \"eighteen\": 18,\n        \"nineteen\": 19,\n        \"twenty\": 20,\n        \"twentyone\": 21,\n        \"twentytwo\": 22,\n        \"twentynet\": 23,\n        \"twentythree\": 24,\n        \"twentyfour\": 25,\n        \"twentysix\": 26,\n        \"twentyseven\": 27,\n        \"twentyswenty\": 28,\n        \"twentythree\": 29,\n        \"twentyfour\": 30,\n        \"twentysix\": 31,\n        \"twentyseven\": 32,\n        \"twentyswenty\": 33,\n        \"twentythree\": 34,\n        \"twentyfour\": 35,\n        \"twentysix\": 36,\n        \"twentyseven\": 37,\n        \"twentyswenty\": 38,\n        \"twentythree\": 39,\n        \"twentyfour\": 40,\n        \"twentysix\": 41,\n        \"twentyseven\": 42,\n        \"twentyswenty\": 43,\n        \"thirty\": 44,\n        \"thirtyone\": 45,\n        \"thirtytwo\": 46,\n        \"thirtythree\": 47,\n        \"thirtyfour\": 48,\n        \"thirtysix\": 49,\n        \"thirtyseven\": 50,\n        \"thirtyeight\": 51,\n        \"thirtynine\": 52,\n        \"thirtyten\": 53,\n        \"thirtyeleven\": 54,\n        \"thirtytwelve\": 55,\n        \"thirtythree\": 56,\n        \"thirtyfour\": 57,\n        \"thirtysix\": 58,\n        \"thirtyseven\": 59,\n        \"thirtyeight\": 60,\n        \"thirtynine\": 61,\n        \"thirtyten\": 62,\n        \"thirtyeleven\": 63,\n        \"thirtytwelve\": 64,\n        \"thirtythree\": 65,\n        \"thirtyfour\": 66,\n        \"thirtysix\": 67,\n        \"thirtyseven\": 68,\n        \"thirtyeight\": 69,\n        \"thirtynine\": 70,\n        \"thirtyten\": 71,\n        \"thirtyeleven\": 72,\n        \"thirtytwelve\": 73,\n        \"thirtythree\": 74,\n        \"thirtyfour\": 75,\n        \"thirtysix\": 76,\n        \"thirtyseven\": 77,\n        \"thirtyeight\": 78,\n        \"thirtynine\": 79,\n        \"thirtyten\": 80,\n        \"thirtyeleven\": 81,\n        \"thirtytwelve\": 82,\n        \"thirtythree\": 83,\n        \"thirtyfour\": 84,\n        \"thirtysix\": 85,\n        \"thirtyseven\": 86,\n        \"thirtyeight\": 87,\n        \"thirtynine\": 88,\n        \"thirtyten\": 89,\n        \"thirtyeleven\": 90,\n        \"thirtytwelve\": 91,\n        \"thirtythree\": 92,\n        \"thirtyfour\": 93,\n        \"thirtysix\": 94,\n        \"thirtyseven\": 95,\n        \"thirtyeight\": 96,\n        \"thirtynine\": 97,\n        \"thirtyten\": 98,\n        \"thirtyeleven\": 99,\n        \"thirtytwelve\": 100,\n        \"thirtythree\": 101,\n        \"thirtyfour\": 102,\n        \"thirtysix\": 103,\n        \"thirtyseven\": 104,\n        \"thirtyeight\": 105,\n        \"thirtynine\": 106,\n        \"thirtyten\": 107,\n        \"thirtyeleven\": 108,\n        \"thirtytwelve\": 109,\n        \"thirtythree\": 110,\n        \"thirtyfour\": 111,\n        \"thirtysix\": 112,\n        \"thirtyseven\": 113,\n        \"thirtyeight\": 114,\n        \"thirtynine\": 115,\n        \"thirtyten\": 116,\n        \"thirtyeleven\": 117,\n        \"thirtytwelve\": 118,\n        \"thirtythree\": 119,\n        \"thirtyfour\": 120,\n        \"thirtysix\": 121,\n        \"thirtyseven\": 122,\n        \"thirtyeight\": 123,\n        \"thirtynine\": 124,\n        \"thirtyten\": 125,\n        \"thirtyeleven\": 126,\n        \"thirtytwelve\": 127,\n        \"thirtythree\": 128,\n        \"thirtyfour\": 129,\n        \"thirtysix\": 130,\n        \"thirtyseven\": 131,\n        \"thirtyeight\": 132,\n        \"thirtynine\": 133,\n        \"thirtyten\": 134,\n        \"thirtyeleven\": 135,\n        \"thirtytwelve\": 136,\n        \"thirtythree\": 137,\n        \"thirtyfour\": 138,\n        \"thirtysix\": 139,\n        \"thirtyseven\": 140,\n        \"thirtyeight\": 141,\n        \"thirtynine\": 142,\n        \"thirtyten\": 143,\n        \"thirtyeleven\": 144,\n        \"thirtytwelve\": 145,\n        \"thirtythree\": 146,\n        \"thirtyfour\": 147,\n        \"thirtysix\": 148,\n        \"thirtyseven\": 149,\n        \"thirtyeight\": 150,\n        \"thirtynine\": 151,\n        \"thirtyten\": 152,\n        \"thirtyeleven\": 153,\n        \"thirtytwelve\": 154,\n        \"thirtythree\": 155,\n        \"thirtyfour\": 156,\n        \"thirtysix\": 157,\n        \"thirtyseven\": 158,\n        \"thirtyeight\": 159,\n        \"thirtynine\": 160,\n        \"thirtyten\": 161,\n        \"thirtyeleven\": 162,\n        \"thirtytwelve\": 163,\n        \"thirtythree\": 164,\n        \"thirtyfour\": 165,\n        \"thirtysix\": 166,\n        \"thirtyseven\": 167,\n        \"thirtyeight\": 168,\n        \"thirtynine\": 169,\n        \"thirtyten\": 170,\n        \"thirtyeleven\": 171,\n        \"thirtytwelve\": 172,\n        \"thirtythree\": 173,\n        \"thirtyfour\": 174,\n        \"thirtysix\": 175,\n        \"thirtyseven\": 176,\n        \"thirtyeight\": 177,\n        \"thirtynine\": 178,\n        \"thirtyten\": 179,\n        \"thirtyeleven\": 180,\n        \"thirtytwelve\": 181,\n        \"thirtythree\": 182,\n        \"thirtyfour\": 183,\n        \"thirtysix\": 184,\n        \"thirtyseven\": 185,\n        \"thirtyeight\": 186,\n        \"thirtynine\": 187,\n        \"thirtyten\": 188,\n        \"thirtyeleven\": 189,\n        \"thirtytwelve\": 190,\n        \"thirtythree\": 191,\n        \"thirtyfour\": 192,\n        \"thirtysix\": 193,\n        \"thirtyseven\": 194,\n        \"thirtyeight\": 195,\n        \"thirtynine\": 196,\n        \"thirtyten\": 197,\n        \"thirtyeleven\": 198,\n        \"thirtytwelve\": 199,\n        \"thirtythree\": 200,\n        \"thirtyfour\": 201,\n        \"thirtysix\": 202,\n        \"thirtyseven\": 203,\n        \"thirtyeight\": 204,\n        \"thirtynine\": 205,\n        \"thirtyten\": 206,\n        \"thirtyeleven\": 207,\n        \"thirtytwelve\": 208,\n        \"thirtythree\": 209,\n        \"thirtyfour\": 210,\n        \"thirtysix\": 211,\n        \"thirtyseven\": 212,\n        \"thirtyeight\": 213,\n        \"thirtynine\": 214,\n        \"thirtyten\": 215,\n        "
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == 0:\n        return 0\n    if r > 0:\n        theta = (math.acos(a/r))*360/2\n        if theta > 180:\n            theta = theta - 360\n        if theta > 0:\n            return theta\n        else:\n            return theta + 180\n    else:\n        return 0\ndef euler_angle(phi,theta,psi):\n    '''\n    Use euler formula to find angle between two quaternions\n    '''\n    if phi > 0 or theta > 0:\n        phi = phi * 180 / math.pi\n        theta = theta * 180 / math.pi\n        psi = psi * 180 / math.pi\n    return (math.acos(math.sin(theta) / math.sin(phi)) + math.pi)\ndef projection(t,r,n):\n    '''\n    Use forward projection algorithm to calculate the position of the point on the curve.\n    '''\n    if r == 0:\n        if n == 0:\n            return math.inf\n        else:\n            return (t[n] + n)\n    if r > 0:\n        return (t[0] * projection(t, r, n-1)) + (t[n] * projection(t, r, n-1))\n    else:\n        return (t[0] * projection(t, r, n)) + (t[n] * projection(t, r, n))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Set the x and y coordinates\n    x = (a * math.cos(r))\n    y = (a * math.sin(r))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    n = len(r)\n    for i in range(n):\n        if r[i] < a:\n            return None\n        if r[i] >= a:\n            r[i] = a + r[i] - a\n    for i in range(n):\n        if r[i] <= 0:\n            area += 0\n            return None\n        area += r[i] * math.tan(math.radians(360 / n))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 1) or (r > 3):\n        return None\n    if (a < 1) or (a > 360):\n        return None\n    if (r*r + a*a) <= (a*a*a) or (r*r + a*a) <= (a*a):\n        return None\n    if r * r + a*a < (a*a*a)/2:\n        return None\n    else:\n        x = r*math.cos(math.radians(a))\n        y = r*math.sin(math.radians(a))\n        return x*y\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # 1. Write your code here\n    if a<0:\n        return None\n    elif a==0:\n        return 0\n    elif math.fabs(a)>180:\n        return None\n    elif a==0:\n        return math.sin(math.radians(a))*r**2\n    else:\n        return (1-math.cos(math.radians(a)))*r**2\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = math.pi * r * r\n        else:\n            if a > math.pi * r:\n                area = 2 * math.pi * r * r - (2 * math.pi * r)\n            else:\n                area = 2 * math.pi * r * math.tan(a)\n    return area\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_3(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_4(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_5(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_6(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_7(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_8(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_9(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_10(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_11(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_12(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_13(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_14(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_15(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_16(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    if r > 0:\n        if a > 0:\n            area = (2 * math.pi * r * r - (2 * math.pi * r))\n        else:\n            area = (2 * math.pi * r * math.tan(a))\n    return area\ndef sector_area_17(r,a):\n    '''\n    Write a function to find are"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>180:\n        return None\n    if r>0.5:\n        return 0.5*(math.tan(math.radians(a))**2)*r**2\n    else:\n        return math.tan(math.radians(a))**2*r**2\ndef p_sector(r,a):\n    '''\n    Write a function to find the probability that a sector is open. The function takes the radius, angle and number of sectors as inputs. Function should return None if the number of sectors is larger than number of sectors already.\n    '''\n    if a>18:\n        return 0\n    if r>0.5:\n        return 0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5\n    else:\n        return math.tan(math.radians(a))**2*(2*r**2*(3*math.pi*r/2))**0.5\ndef sector_bruteforce(r,a,b,c,d,e):\n    '''\n    Write a function to find the probability that a sector is open by brute force. The function takes the radius, angle and number of sectors as inputs. Function should return None if the number of sectors is larger than number of sectors already.\n    '''\n    if a>18:\n        return 0\n    if r>0.5:\n        return (0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5)**0.5\n    else:\n        return math.tan(math.radians(a))**2*(2*r**2*(3*math.pi*r/2))**0.5\ndef p_bruteforce(r,a,b,c,d,e,f):\n    '''\n    Write a function to find the probability that a sector is open by brute force. The function takes the radius, angle and number of sectors as inputs. Function should return None if the number of sectors is larger than number of sectors already.\n    '''\n    if a>18:\n        return 0\n    if r>0.5:\n        return (0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5)**0.5\n    else:\n        return math.tan(math.radians(a))**2*(2*r**2*(3*math.pi*r/2))**0.5\ndef sector_cover(r,a):\n    '''\n    Write a function to find the probability that a sector is open. The function takes the radius, angle and number of sectors as inputs. Function should return None if the number of sectors is larger than number of sectors already.\n    '''\n    if a>18:\n        return 0\n    if r>0.5:\n        return (0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5)**0.5\n    else:\n        return math.tan(math.radians(a))**2*(2*r**2*(3*math.pi*r/2))**0.5\ndef p_cover(r,a,b,c,d,e,f):\n    '''\n    Write a function to find the probability that a sector is open by cover. The function takes the radius, angle and number of sectors as inputs. Function should return None if the number of sectors is larger than number of sectors already.\n    '''\n    if a>18:\n        return 0\n    if r>0.5:\n        return (0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5)**0.5\n    else:\n        return math.tan(math.radians(a))**2*(2*r**2*(3*math.pi*r/2))**0.5\ndef sector_areas(r,a):\n    '''\n    Write a function to find the area of sectors. The function takes the radius and angle as inputs. Function should return the area of each sector.\n    '''\n    if a>18:\n        return [0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5,math.pi*r**2]\n    else:\n        return [sector_area(r,a),sector_area(r,a+360)]\ndef p_sector_areas(r,a):\n    '''\n    Write a function to find the area of sectors. The function takes the radius, angle and number of sectors as inputs. Function should return the area of each sector.\n    '''\n    if a>18:\n        return [0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5,math.pi*r**2]\n    else:\n        return [sector_area(r,a),sector_area(r,a+360)]\ndef sector_cover_areas(r,a):\n    '''\n    Write a function to find the area of sectors. The function takes the radius, angle and number of sectors as inputs. Function should return the area of each sector.\n    '''\n    if a>18:\n        return [0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5,math.pi*r**2]\n    else:\n        return [sector_cover(r,a),sector_cover(r,a+360)]\ndef p_sector_areas(r,a):\n    '''\n    Write a function to find the area of sectors. The function takes the radius, angle and number of sectors as inputs. Function should return the area of each sector.\n    '''\n    if a>18:\n        return [0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5,math.pi*r**2]\n    else:\n        return [sector_area(r,a),sector_area(r,a+360)]\ndef sector_cover_areas(r,a):\n    '''\n    Write a function to find the area of sectors. The function takes the radius, angle and number of sectors as inputs. Function should return the area of each sector.\n    '''\n    if a>18:\n        return [0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5,math.pi*r**2]\n    else:\n        return [sector_cover(r,a),sector_cover(r,a+360)]\ndef p_sector_areas(r,a):\n    '''\n    Write a function to find the area of sectors. The function takes the radius, angle and number of sectors as inputs. Function should return the area of each sector.\n    '''\n    if a>18:\n        return [0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5,math.pi*r**2]\n    else:\n        return [sector_area(r,a),sector_area(r,a+360)]\ndef p_sector_cover_areas(r,a):\n    '''\n    Write a function to find the area of sectors. The function takes the radius, angle and number of sectors as inputs. Function should return the area of each sector.\n    '''\n    if a>18:\n        return [0.5*(math.tan(math.radians(a))**2)*(2*r**2*(3*math.pi*r/2))**0.5,math.pi*r**2]\n    else:\n        return [sector_cover(r,a),sector_cover(r,a+360)]\ndef p_sector"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = (math.sin(math.radians(a)))*(r**2)\n    area = area*math.cos(math.radians(a))\n    print(\"Area of sector is: \" + str(area))\n    \n    return area\n    \ndef p_p_area(r,a):\n    '''\n    Write a function to find area of a semi-major axis, a p-p semi-major axis, and a quarter angle. A quarter angle is a value that is 360/4.\n    '''\n    #p_p_area function\n    \n    \n    area = (math.sin(math.radians(a)))*(r**2)\n    area = area*math.cos(math.radians(a))\n    print(\"Area of sector is: \" + str(area))\n    \n    return area\n    \n    \ndef are_inside(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector but is not completely inside.\n    '''\n    #are_inside function\n    \n    \n    area = sector_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside2(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector but NOT completely inside.\n    '''\n    #are_inside2 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside3(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector but NOT completely inside.\n    '''\n    #are_inside3 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside4(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside4 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside5(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside5 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside6(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside6 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside7(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside7 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside8(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside8 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside9(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside9 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside10(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside10 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside11(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside11 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside12(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside12 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside13(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside13 function\n    \n    \n    area = p_p_area(r,a)\n    if area<(0.1*(r+r)):\n        print(\"The point is inside the sector\")\n    else:\n        print(\"The point is NOT inside the sector\")\n        \n    return area\n    \n    \ndef are_inside14(r,a):\n    '''\n    Write a function to determine whether a point (x,y) lies inside the sector. A point is inside if it lies within sector and NOT completely inside.\n    '''\n    #are_inside14 function\n    \n    \n    area = p_p_area(r,a)"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a<0):\n        return None\n    if (math.pi<math.radians(a)<math.pi+math.radians(a)):\n        return r*math.sin(math.radians(a))\n    elif (math.pi<math.radians(a)<math.pi+math.radians(a)):\n        return r*math.cos(math.radians(a))\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return a*math.pi/180*((r**2)*math.sin(a))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # declaring variables\n    LCS_X = [0] * (len(X) + 1)\n    LCS_Y = [0] * (len(Y) + 1)\n    LCS_Z = [0] * (len(Z) + 1)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    c = len(Z)\n    dp = [[0 for _ in range(c+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1] == Z[c-j]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_len = 0\n    lcs_table = [[0 for i in range(len(Z)+1)] for j in range(len(X)+1)]\n    print(lcs_table)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialize the res array to 0\n    res = 0\n    # Loop through the string\n    for i in range(0, len(X)):\n        # Initialize the start and end indexes\n        start = i\n        end = i\n        # Loop through the string\n        for j in range(i, len(Y)):\n            # If the string is longer than the current longest common subsequence\n            if len(X[i:j+1]) > len(Y[i:j+1]):\n                # Update the start and end indexes\n                start = i\n                end = j\n        # Add one to the length of the current longest common subsequence\n        res += 1\n        # If the current longest common subsequence is longer than the current longest common subsequence and is only a substring of itself\n        if len(X[start:end+1]) > len(Y[start:end+1]):\n            # Update the start and end indexes\n            start = start + 1\n            end = end + 1\n    # Return the res\n    return res\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if there is only one string in the given array\n    if len(set(X) & set(Y)) == 1: \n        return 0\n    # if there is only one string in the given array\n    if len(set(X) & set(Z)) == 1: \n        return 0\n    # if there is only one string in the given array\n    if len(set(Y) & set(Z)) == 1: \n        return 0\n    # return the longest common subsequence\n    return max(lcs_of_three(X[1:], Y[1:], Z[1:]), lcs_of_three(X, Y, Z[1:]))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    LCS = [[0]*(len(Z)+1) for i in range(len(X)+1)] \n    \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Z)+1):\n            if X[i-1] == Z[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n                \n    return LCS[-1][-1]\n    "
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_of_three = [[0 for i in range(len(Z)+1)] for j in range(len(X)+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Set of indexes\n    LCS_list = []\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_length = len(X)\n    Y_length = len(Y)\n    Z_length = len(Z)\n    m = [[0] * (Z_length + 1) for _ in range(X_length + 1)]\n    for i in range(1, X_length + 1):\n        for j in range(1, Y_length + 1):\n            k = i - j\n            if m[i][j]!= 0:\n                continue\n            m[i][j] = k\n            if m[i][k]!= 0:\n                continue\n            m[i][k] = m[i][k] + 1\n    \n    i = X_length + 1\n    j = Y_length + 1\n    k = Z_length + 1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'^\\s+', '', str1.lower())\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    return''.join(words)\ndef no_double_spaces(str1):\n    '''\n    Write a function to remove all double spaces from a given string.\n    '''\n    str2 = str1.replace('  ','')\n    str2 = str2.replace('  ','')\n    str2 = str2.replace('  ','')\n    str2 = str2.replace('  ','')\n    str2 = str2.replace('  ','')\n    return str2\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove all non alphanumeric characters from a given string.\n    '''\n    str3 = str1.replace('  ','')\n    str3 = str3.replace('!','')\n    str3 = str3.replace('$','')\n    str3 = str3.replace(':','')\n    str3 = str3.replace('@','')\n    str3 = str3.replace('!','')\n    str3 = str3.replace('$','')\n    str3 = str3.replace(':','')\n    str3 = str3.replace('@','')\n    str3 = str3.replace('!','')\n    str3 = str3.replace('$','')\n    return str3\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove all non ascii characters from a given string.\n    '''\n    str4 = str1.replace('!','')\n    str4 = str4.replace('$','')\n    str4 = str4.replace(':','')\n    str4 = str4.replace('@','')\n    str4 = str4.replace('!','')\n    str4 = str4.replace('$','')\n    str4 = str4.replace(':','')\n    str4 = str4.replace('@','')\n    str4 = str4.replace('!','')\n    return str4\ndef remove_non_sentences(str1):\n    '''\n    Write a function to remove all non sentences from a given string.\n    '''\n    str5 = str1.replace('!','')\n    str5 = str5.replace('$','')\n    str5 = str5.replace(':','')\n    str5 = str5.replace('@','')\n    str5 = str5.replace('!','')\n    str5 = str5.replace('$','')\n    str5 = str5.replace(':','')\n    str5 = str5.replace('@','')\n    str5 = str5.replace('!','')\n    return str5\ndef remove_non_words(str1):\n    '''\n    Write a function to remove all non words from a given string.\n    '''\n    str6 = str1.replace('!','')\n    str6 = str6.replace('$','')\n    str6 = str6.replace(':','')\n    str6 = str6.replace('@','')\n    str6 = str6.replace('!','')\n    str6 = str6.replace('$','')\n    str6 = str6.replace(':','')\n    str6 = str6.replace('@','')\n    str6 = str6.replace('!','')\n    return str6\ndef remove_non_emojis(str1):\n    '''\n    Write a function to remove all non emojis from a given string.\n    '''\n    str7 = str1.replace('!','')\n    str7 = str7.replace('$','')\n    str7 = str7.replace(':','')\n    str7 = str7.replace('@','')\n    str7 = str7.replace('!','')\n    str7 = str7.replace('$','')\n    str7 = str7.replace(':','')\n    str7 = str7.replace('@','')\n    str7 = str7.replace('!','')\n    str7 = str7.replace('$','')\n    return str7\ndef remove_non_urls(str1):\n    '''\n    Write a function to remove all non URLs from a given string.\n    '''\n    str8 = str1.replace('!','')\n    str8 = str8.replace('$','')\n    str8 = str8.replace(':','')\n    str8 = str8.replace('@','')\n    str8 = str8.replace('!','')\n    str8 = str8.replace('$','')\n    str8 = str8.replace(':','')\n    str8 = str8.replace('@','')\n    str8 = str8.replace('!','')\n    str8 = str8.replace('$','')\n    return str8\ndef remove_non_numbers(str1):\n    '''\n    Write a function to remove all non numbers from a given string.\n    '''\n    str9 = str1.replace('!','')\n    str9 = str9.replace('$','')\n    str9 = str9.replace(':','')\n    str9 = str9.replace('@','')\n    str9 = str9.replace('!','')\n    str9 = str9.replace('$','')\n    str9 = str9.replace(':','')\n    str9 = str9.replace('@','')\n    str9 = str9.replace('!','')\n    str9 = str9.replace('$','')\n    return str9\ndef remove_non_caps_words(str1):\n    '''\n    Write a function to remove all non caps words from a given string.\n    '''\n    str10 = str1.replace('!','')\n    str10 = str10.replace('$','')\n    str10 = str10.replace(':','')\n    str10 = str10.replace('@','')\n    str10 = str10.replace('!','')\n    str10 = str10.replace('$','')\n    str10 = str10.replace(':','')\n    str10 = str10.replace('@','')\n    str10 = str10.replace('!','')\n    str10 = str10.replace('$','')\n    return str10\ndef remove_non_letters(str1):\n    '''\n    Write a function to remove all non letters from a given string.\n    '''\n    str11 = str1.replace('!','')\n    str11 = str11.replace('$','')\n    str11 = str11.replace(':','')\n    str11 = str11.replace('@','')\n    str11 = str11.replace('!','')\n    str11 = str11.replace('$','')\n    str11 = str11.replace(':','')\n    str11 = str11.replace('@','')\n    str11 = str11.replace('!','')\n    str11 = str11.replace('$','')\n    return str11\ndef remove_non_punctuation(str1):\n    '''\n    Write a function to remove all non punctuation from a given string.\n    '''\n    str12 = str1.replace('!','')\n    str12 = str12.replace('$','')\n    str12 = str12.replace(':','')\n    str12 = str12.replace('@','')\n    str12 = str12.replace('!','')\n    str12 = str12.replace('$','')\n    str12 = str12.replace(':','')\n    st"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(\" \", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\"-\", \"\").replace(\"'\", \"\").replace(\"!\", \"\")\n    print(str1.upper())\n    return str1.upper()\n    \ndef multiple_word_capital_words(str1):\n    '''\n    Write a function to make sure that multiple words in a string are capitalized. \n    '''\n    str1 = str1.upper()\n    str1 = str1.replace(\" \", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\"-\", \"\").replace(\"'\", \"\").replace(\"!\", \"\")\n    print(str1.upper())\n    return str1.upper()\n    \ndef multiple_word_capital_words_2(str1):\n    '''\n    Write a function to make sure that multiple words in a string are capitalized. \n    '''\n    str1 = str1.upper()\n    str1 = str1.replace(\" \", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\"-\", \"\").replace(\"'\", \"\").replace(\"!\", \"\")\n    print(str1.upper())\n    return str1.upper()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'([A-Z])(\\w{2,})')\n    new_str = str1\n    for word in pattern.findall(str1):\n        new_str = new_str.replace(word[0] + word[1] + word[2] +'', word[1] + word[0] + word[2])\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1=str1.split()\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i].isupper() and list1[j].islower():\n                list1[i]=list1[i].capitalize()\n            elif list1[i].islower() and list1[j].isupper():\n                list1[j]=list1[j].capitalize()\n    return \" \".join(list1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = '((?=[A-Z])(?=[A-Z][a-z])|(?=[A-Z][A-Z][a-z])|(?=[^a-z]))'\n    return re.sub(pattern,'', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.title().strip().replace('  ',' ').replace('  ','')\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef capital_letters_words(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef numbers_words(str1):\n    '''\n    Write a function to put spaces between words starting with numbers in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[0-9]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef double_words(str1):\n    '''\n    Write a function to put spaces between words starting with double letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+[a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef double_numbers_words(str1):\n    '''\n    Write a function to put spaces between words starting with double letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[0-9]+[0-9]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef stop_words(str1):\n    '''\n    Write a function to put spaces between words starting with stop words in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef lower_words(str1):\n    '''\n    Write a function to put spaces between words starting with lower case in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef numbers(str1):\n    '''\n    Write a function to put spaces between words starting with numbers in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[0-9]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef numbers_upper(str1):\n    '''\n    Write a function to put spaces between words starting with numbers in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[0-9]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef capital_letters_words_upper(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef capital_words_spaces_upper(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef words_caps_letters(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef words_lower_letters(str1):\n    '''\n    Write a function to put spaces between words starting with lower case letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef numbers_caps_words(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[0-9]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef upper_letters(str1):\n    '''\n    Write a function to put spaces between words starting with upper letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef upper_letters_words(str1):\n    '''\n    Write a function to put spaces between words starting with upper letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef capital_letters_words_upper_and_words(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef words_lower_uppercase_letters(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef capitals_words_upper_and_words(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef lower_and_upper_words(str1):\n    '''\n    Write a function to put spaces between words starting with lower and upper case letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall('[A-Z][a-z]+[A-Z][a-z]+',str1)\n    for word in words:\n        str1 = str1.replace(word,' ')\n    return str1\n    \n    \ndef upper_and_lower_words(str1):\n    '''\n    Writ"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_string = ''\n    for word in str1:\n        if word[0].isupper():\n            new_string += word.capitalize() +''\n        else:\n            new_string += word.capitalize()\n    return new_string\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    output=str1.lower()\n    output1=''\n    for i in output:\n        if (i.isalpha() or i==''or i=='\\n'):\n            output1=output1+i\n    output2=''\n    for i in output1:\n        if (i.isalpha() or i==''or i=='\\n'):\n            output2=output2+i\n    return output2\ndef  cap_word_and_spaces(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            if(i.isalpha() or i==''or i=='\\n'):\n                output2=output2+i\n    return output2\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize words starting with capital letters in a given string.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            if(i.isalpha() or i==''or i=='\\n'):\n                output2=output2+i.capitalize()\n    return output2\ndef remove_extra_spaces(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    return output2\ndef remove_extra_words(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace('.','')\n    return output2\ndef remove_extra_spaces_and_lower(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_words_and_lower(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace('.','')\n    output2=output2.lower()\n    return output2\ndef capitalize_word_and_lower(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.capitalize()\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters_and_lower(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters_and_lower_and_spaces(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters_and_lower_and_spaces_and_upper(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters_and_lower_and_spaces_and_upper_and_spaces(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_words_and_lower_and_spaces_and_upper(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_words_and_lower_and_spaces_and_upper_and_spaces(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters_and_lower_and_spaces_and_upper_and_spaces_and_spaces(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters_and_lower_and_spaces_and_upper_and_spaces_and_spaces(str1):\n    '''\n    Write a function that turns a string into a list of words.\n    '''\n    output=str1.lower().split()\n    output2=''\n    for i in output:\n        if(i==''):\n            output2=output2+i\n        else:\n            output2=output2+i.replace(' ','')\n    output2=output2.lower()\n    return output2\ndef remove_extra_letters_and_lower_and_spaces_and_upper_and_spaces_and_s"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=nums_str.index)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list to a string\n    nums_str = str(nums_str)\n    # build a dictionary to convert the list into a string\n    nums_dict = dict(enumerate(nums_str))\n    # sort the dictionary\n    nums_sorted = sorted(nums_dict.values())\n    # convert the dictionary to a string\n    nums_str = str(nums_sorted)\n    # convert the string back to a list\n    nums_str_list = list(nums_str)\n    # return the sorted list\n    return nums_str_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        if num.isnumeric():\n            nums.append(num)\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    temp = []\n    for i in range(len(nums_str)):\n        if nums_str[i] == \".\":\n            temp.append(nums_str[i])\n            temp.sort()\n            nums_str = \"\".join(temp)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # sort the string in order of numerically\n    nums_str.sort()\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # create an empty list to add strings to\n    new_list = []\n    # convert the list into a string and remove the empty list items\n    for num in nums_str:\n        new_list.append(num)\n    # Sort the list\n    new_list = sorted(new_list, reverse=True)\n    # Convert the string back into a list\n    return new_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = list(map(int, nums_str))\n    nums.sort()\n    return nums_str\n    # nums = sorted(nums)\n    # return ','.join(map(str, nums))\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = sorted(nums_str)\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_list = list(map(str, nums_str))\n    nums_str_list.sort(key=lambda x: x.isdigit())\n    return ''.join(nums_str_list)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return []\n    nums_str.sort()\n    sort_numeric_strings(nums_str[1:])\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    temp_list = []\n    if not test_list:\n        return temp_list\n    for x in test_tup:\n        temp_list.append(x)\n    temp_list.sort()\n    test_list.append(tuple(temp_list))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tup_list = []\n    for item in test_tup:\n        tup_list.append(item)\n    test_list.append(tup_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i])\n    for j in range(len(test_tup)):\n        new_list.append(test_tup[j])\n    return new_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_tup = tuple(test_tup)\n    test_list.append(new_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr):\n        return True\n    \n    # If not the left child\n    if arr[i] >= arr[2 * i + 1]:\n        return check_min_heap_helper(arr, 2 * i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= len(arr)//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr)-1:\n        return True\n    if arr[i] >= arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return check_min_heap_helper(arr, i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[0]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return False\n    return check_min_heap_helper(arr, i//2) or check_min_heap_helper(arr, (i//2)+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # try to extract the minimum element\n    try:\n        if arr[i] < arr[2*i+1]:\n            return False\n    except IndexError:\n        return False\n    \n    # if the smallest element is greater than the parent,\n    # then it must be a min heap.\n    if arr[i] < arr[2*i+2]:\n        return True\n    \n    # if there is no parent, then it must be a min heap.\n    return check_min_heap_helper(arr, 2*i+2)\n    \n    "
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i < len(arr):\n        if arr[i] < arr[2 * i] or arr[2 * i] < arr[2 * i + 1]:\n            return False\n        return check_min_heap_helper(arr, 2 * i)\n    return True\n    \ndef check_min_heap(arr, heap_size):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    \n    if heap_size < len(arr) - 1:\n        \n        # If the given array is a min heap, return True\n        return True\n    \n    # If the given array is a max heap, return False\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i == len(arr) - 1:\n        return True\n    # pointer to the next smaller element\n    next_smaller = i * 2 + 1\n    if next_smaller >= len(arr) or arr[next_smaller] < arr[i]:\n        return False\n    # case 1: last element\n    if arr[i] < arr[next_smaller] and arr[next_smaller] < arr[i]:\n        return check_min_heap_helper(arr, next_smaller)\n    # case 2: first element\n    else:\n        return check_min_heap_helper(arr, i)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    else:\n        return 0\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 1\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 1\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 1\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 1\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 1\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 1\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 1\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 1\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 1\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 1\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 1\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 1\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 1\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 1\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 1\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 1\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 1\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 1\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 1\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 1\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 1\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 1\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 1\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 1\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 1\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 1\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 1\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 1\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 1\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 1\n    elif n == 72:\n        return 1\n    elif n == 73:\n        return 1\n    elif n == 74:\n        return 1\n    elif n == 75:\n        return 1\n    elif n == 76:\n        return 1\n    elif n == 77:\n        return 1\n    elif n == 78:\n        return 1\n    elif n == 79:\n        return 1\n    elif n == 80:\n        return 1\n    elif n == 81:\n        return 1\n    elif n == 82:\n        return 1\n    elif n == 83:\n        return 1\n    elif n == 84:\n        return 1\n    elif n == 85:\n        return 1\n    elif n == 86:\n        return 1\n    elif n == 87:\n        return 1\n    elif n == 88:\n        return 1\n    elif n == 89:\n        return 1\n    elif n == 90:\n        return 1\n    elif n == 91:\n        return 1\n    elif n == 92:\n        return 1\n    elif n == 93:\n        return 1\n    elif n == 94:\n        return 1\n    elif n == 95:\n        return 1\n    elif n == 96:\n        return 1\n    elif n == 97:\n        return 1\n    elif n == 98:\n        return 1\n    elif n == 99:\n        return 1\n    elif n == 100:\n        return 1\n    elif n == 101:\n        return 1\n    elif n == 102:\n        return 1\n    elif n == 103:\n        return 1\n    elif n == 104:\n        return 1\n    elif n == 105:\n        return 1\n    elif n == 106:\n        return 1\n    elif n == 107:\n        return 1\n    elif n == 108:\n        return 1\n    elif n == 109:\n        return 1\n    elif n == 110:\n        return 1\n    elif n == 111:\n        return 1\n    elif n == 112:\n        return 1\n    elif n == 113:\n        return 1\n    elif n == 114:\n        return 1\n    elif n == 115:\n        return 1\n    elif n == 116:\n        return 1\n    elif n == 117:\n        return 1\n    elif n == 118:\n        return 1\n    elif n == 119:\n        return 1\n    elif n == 120:\n        return 1\n    elif n == 121:\n        return 1\n    elif n == 122:\n        return 1\n    elif n == 123:\n        return 1\n    elif n == 124:\n        return 1\n    elif n == 125:\n        return 1\n    elif n == 126:\n        return 1\n    elif n == 127:\n        return 1\n    elif n == 128:\n        return 1\n    elif n == 129:\n        return 1\n    elif n == 130:\n        return 1\n    elif n == 131:\n        return 1\n    elif n == 132:\n        return 1\n    elif n == 133:\n        return 1\n    elif n == 134:\n        return 1\n    elif n == 135:\n        return 1\n    elif n == 136:\n        return 1\n    elif n == 137:\n        return 1\n    elif n == 138:\n        return 1\n    elif n == 139:\n        return 1\n    elif n == 140:\n        return 1\n    elif n == 141:\n        return 1\n    elif n == 142:\n        return 1\n    elif n == 143:\n        return 1\n    elif n == 144:\n        return 1\n    elif n == 145:\n        return 1\n    elif n == 146:\n        return 1\n    elif n == 147:\n        return 1\n    elif n == 148:\n        return 1\n    elif n == 149:\n        return 1\n    elif n == 150:\n        return 1\n    elif n == 151:\n        return 1\n    elif n == 152:\n        return 1\n    elif n == 153:\n        return 1\n    elif n == 154:\n        return 1\n    elif n == 155:\n        return 1\n    elif n == 156:\n        return 1\n    elif n == 157:\n        return 1\n    elif n == 158:\n        return 1\n    elif n == 159:\n        return 1\n    elif n == 160:\n        return 1\n    elif n == 161:\n        return 1\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    nth_jacobsthal_num = 0\n    if n < 0: \n        raise Exception('You cannot use negative numbers as n')\n    elif n == 0: \n        nth_jacobsthal_num = 1\n    elif n == 1: \n        nth_jacobsthal_num = 3\n    elif n == 2: \n        nth_jacobsthal_num = 5\n    elif n == 3: \n        nth_jacobsthal_num = 11\n    elif n == 4: \n        nth_jacobsthal_num = 21\n    elif n == 5: \n        nth_jacobsthal_num = 43\n    elif n == 6: \n        nth_jacobsthal_num = 85\n    elif n == 7: \n        nth_jacobsthal_num = 171\n    elif n == 8: \n        nth_jacobsthal_num = 341\n    elif n == 9: \n        nth_jacobsthal_num = 683\n    elif n == 10: \n        nth_jacobsthal_num = 1365\n    elif n == 11: \n        nth_jacobsthal_num = 2731\n    return nth_jacobsthal_num\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    elif n == 13:\n        return 4321\n    else:\n        return 0\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 1): \n        return 1 \n    elif (n == 2): \n        return 2 \n    elif (n == 3): \n        return 3 \n    elif (n == 4): \n        return 4 \n    elif (n == 5): \n        return 5 \n    elif (n == 6): \n        return 6 \n    elif (n == 7): \n        return 7 \n    elif (n == 8): \n        return 8 \n    elif (n == 9): \n        return 9 \n    elif (n == 10): \n        return 10 \n    elif (n == 11): \n        return 11 \n    elif (n == 12): \n        return 12 \n    elif (n == 13): \n        return 13 \n    elif (n == 14): \n        return 14 \n    elif (n == 15): \n        return 15 \n    elif (n == 16): \n        return 16 \n    elif (n == 17): \n        return 17 \n    elif (n == 18): \n        return 18 \n    elif (n == 19): \n        return 19 \n    elif (n == 20): \n        return 20 \n    elif (n == 21): \n        return 21 \n    elif (n == 22): \n        return 22 \n    elif (n == 23): \n        return 23 \n    elif (n == 24): \n        return 24 \n    elif (n == 25): \n        return 25 \n    elif (n == 26): \n        return 26 \n    elif (n == 27): \n        return 27 \n    elif (n == 28): \n        return 28 \n    elif (n == 29): \n        return 29 \n    elif (n == 30): \n        return 30 \n    elif (n == 31): \n        return 31 \n    elif (n == 32): \n        return 32 \n    elif (n == 33): \n        return 33 \n    elif (n == 34): \n        return 34 \n    elif (n == 35): \n        return 35 \n    elif (n == 36): \n        return 36 \n    elif (n == 37): \n        return 37 \n    elif (n == 38): \n        return 38 \n    elif (n == 39): \n        return 39 \n    elif (n == 40): \n        return 40 \n    elif (n == 41): \n        return 41 \n    elif (n == 42): \n        return 42 \n    elif (n == 43): \n        return 43 \n    elif (n == 44): \n        return 44 \n    elif (n == 45): \n        return 45 \n    elif (n == 46): \n        return 46 \n    elif (n == 47): \n        return 47 \n    elif (n == 48): \n        return 48 \n    elif (n == 49): \n        return 49 \n    elif (n == 50): \n        return 50 \n    elif (n == 51): \n        return 51 \n    elif (n == 52): \n        return 52 \n    elif (n == 53): \n        return 53 \n    elif (n == 54): \n        return 54 \n    elif (n == 55): \n        return 55 \n    elif (n == 56): \n        return 56 \n    elif (n == 57): \n        return 57 \n    elif (n == 58): \n        return 58 \n    elif (n == 59): \n        return 59 \n    elif (n == 60): \n        return 60 \n    elif (n == 61): \n        return 61 \n    elif (n == 62): \n        return 62 \n    elif (n == 63): \n        return 63 \n    elif (n == 64): \n        return 64 \n    elif (n == 65): \n        return 65 \n    elif (n == 66): \n        return 66 \n    elif (n == 67): \n        return 67 \n    elif (n == 68): \n        return 68 \n    elif (n == 69): \n        return 69 \n    elif (n == 70): \n        return 70 \n    elif (n == 71): \n        return 71 \n    elif (n == 72): \n        return 72 \n    elif (n == 73): \n        return 73 \n    elif (n == 74): \n        return 74 \n    elif (n == 75): \n        return 75 \n    elif (n == 76): \n        return 76 \n    elif (n == 77): \n        return 77 \n    elif (n == 78): \n        return 78 \n    elif (n == 79): \n        return 79 \n    elif (n == 80): \n        return 80 \n    elif (n == 81): \n        return 81 \n    elif (n == 82): \n        return 82 \n    elif (n == 83): \n        return 83 \n    elif (n == 84): \n        return 84 \n    elif (n == 85): \n        return 85 \n    elif (n == 86): \n        return 86 \n    elif (n == 87): \n        return 87 \n    elif (n == 88): \n        return 88 \n    elif (n == 89): \n        return 89 \n    elif (n == 90): \n        return 90 \n    elif (n == 91): \n        return 91 \n    elif (n == 92): \n        return 92 \n    elif (n == 93): \n        return 93 \n    elif (n == 94): \n        return 94 \n    elif (n == 95): \n        return 95 \n    elif (n == 96): \n        return 96 \n    elif (n == 97): \n        return 97 \n    elif (n == 98): \n        return 98 \n    elif (n == 99): \n        return 99 \n    elif (n == 100): \n        return 100 \n    elif (n == 101): \n        return 101 \n    elif (n == 102): \n        return 102 \n    elif (n == 103): \n        return 103 \n    elif (n == 104): \n        return 104 \n    elif (n == 105): \n        return 105 \n    elif (n == 106): \n        return 106 \n    elif (n == 107): \n        return 107 \n    elif (n == 108): \n        return 108 \n    elif (n == 109): \n        return 109 \n    elif (n == 110): \n        return 110 \n    elif (n == 111): \n        return 111 \n    elif (n == 112): \n        return 112 \n    elif (n == 113): \n        return 113 \n    elif (n == 114): \n        return 114 \n    elif (n == 115): \n        return 115 \n    elif (n == 116): \n        return 116 \n    elif (n == 117): \n        return 117 \n    elif (n == 118): \n        return 118 \n    elif (n == 119): \n        return 119 \n    elif (n == 120): \n        return 120 \n    elif (n == 121): \n        return 121 \n    elif (n == 122): \n        return 122 \n    elif (n == 123): \n        return 123 \n    elif (n == 124): \n        return 124 \n    elif (n == 125): \n        return 125 \n    elif (n == 126): \n        return 126 \n    elif (n == 127): \n        return 127 \n    elif (n == 128): \n        return 128 \n    elif (n == 129): \n        return 129 \n    elif (n == 130): \n        return 130"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 8191, 24141, 83793, 182824, 423734, 74518, 115052, 251586, 644527, 746499, 7489904,\n        1213561, 297907, 3147609, 295244, 4493606, 6422372, 497957, 768059, 8462766, 141955, 3923851, 475906, 8149573, 2049505,\n        4006273, 7896929, 9294626, 4143857, 2577473, 2926894, 453211, 7316307, 8589028, 1519265, 2952556, 4039652, 4498921,\n        4926117, 7847074, 9556953, 3143551, 3902596, 4849537, 8854827, 1533029, 3183535, 4349858, 8783016, 1617002,\n        3217928, 3932427, 4889477, 6438814, 9156445, 3177344, 4302737, 6658317, 9185904, 3087958, 4380705, 8174621,\n        1737663, 3793981, 4793747, 7989419, 9248263, 2991693, 4797816, 7779879, 8762798, 1559966, 3676457, 5187332,\n        3986966, 7213088, 9146937, 3312855, 4926604, 8348411, 1597411, 4073809, 4997817, 8309674, 1529503, 3442781,\n        5646651, 9310257, 1722233, 4008031, 7391917, 9565771, 2163339, 4579949, 7864081, 1529235, 3336226, 4396727,\n        7995263, 9982647, 2659079, 4400507, 7278316, 9172036, 1603504, 4128556, 7416813, 9916488, 2163538, 5306759,\n        5920444, 8833838, 1615817, 3672797, 7616261, 9135649, 2140119, 4458099, 8826262, 1748116, 3483733, 5417804,\n        7343332, 9844441, 1690478, 3599894, 5260933, 8515462, 1379806, 2798479, 4681689, 9610405, 1852102, 3582032,\n        4692712, 8267555, 1588409, 2621042, 4528841, 7079102, 9232562, 2138657, 4782927, 9128207, 2277905, 4834247,\n        7434512, 9098459, 1530787, 2793902, 4405214, 7781654, 9617234, 1997043, 4375081, 8970598, 2114605, 4085671,\n        6494866, 8496617, 1134983, 2550158, 3726763, 4673926, 9098482, 2057435, 3678854, 5772361, 9927254, 2151421,\n        4145576, 7408315, 9289833, 2532279, 4882078, 8168865, 1361033, 3879211, 5974835, 9192979, 2367379, 4549343,\n        7913134, 8556581, 1380595, 2925204, 4039531, 5963624, 9284793, 2206879, 4591669, 8331608, 1742135, 3686897,\n        6363534, 9146631, 2248059, 4129281, 7175949, 9501645, 2221727, 4686724, 9572318, 2335431, 4617366, 8386678,\n        1777982, 3130241, 4471045, 7177527, 9174857, 2338425, 4629755, 8275873, 1597397, 3405154, 4687895, 9851403,\n        2392827, 4533455, 7440159, 9082601, 2269202, 4682641, 9460044, 2331617, 4661836, 9511249, 2425923, 4786651,\n        8721482, 1709615, 2900793, 4624109, 8296855, 2083251, 4695851, 9486615, 2274182, 4691513, 9538154, 2226152,\n        4540798, 8753742, 10416933, 2277653, 4473653, 9162652, 2269181, 4556813, 8919454, 2316426, 4537845, 8885746,\n        1595148, 2769165, 4979322, 8578555, 1248259, 2369676, 4819177, 8563958, 1574757, 3102475, 4401643, 8904446,\n        1361688, 3026671, 4925759, 8965159, 2579609, 4580346, 8882646, 1527693, 2385251, 4790713, 9852721, 2249167,\n        4655096, 8952795, 1482742, 2988243, 4784902, 9073328, 1615642, 2855339, 4985829, 1028101, 1459195, 2256169,\n        4561737, 8636665, 1763207, 3329243, 4933143, 10432949, 1681552, 2827042, 4886842, 9623915, 1954379, 3291518,\n        4406822, 1067907, 1459668, 1515732, 1588372, 1201061, 1812247, 1883242, 2247598, 3081295, 4913491, 10369637,\n        1578101, 1485897, 1374426, 2147714, 4368423, 123522, 1806123, 8847037, 9336633, 2487713, 4874681, 1017898,\n        1908658, 3248546, 5221617, 11348117, 2243336, 4962334, 12551056, 2501777, 4867961, 10131995, 2437251, 4827147,\n        9845461, 2091507, 4513402, 8691478, 1246044, 2207743, 4562611, 12058164, 1551857, 3618029, 5139024, 10882568,\n        1963342, 2595418, 4582955, 9428571, 1746147, 3600797, 5131873, 1060103, 1514215, 2525223, 4964992, 10200774,\n        157728, 2380878, 4522223, 9629653, 1624836, 3610671, 5451392, 9099707, 1695952, 3625356, 5097382, 1129061,\n        1217706, 2111854, 4783391, 10897358, 1364317, 2276227, 4762096, 9916097, 1460512, 2250355, 4528545, 9047047,\n        2259816, 4769913, 9836263, 1818256, 3881118, 1007602, 1629887, 2525208, 4701196, 9190943, 1346674, 2597485,\n        5019048, 121468, 2066987, 3083113, 5087426, 1111214, 1623474, 2313194, 4578394, 1003517, 1877459, 2970348,\n        4948724, 1138932, 1709356, 1691726, 2106927, 4236734, 1191156, 1660942, 1114597, 1425537, 1622797, 2180252,\n        4259211, 8781355, 1684812, 2036351, 3512334, 5200227, 1003837, 1908833, 1408607"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        print('Input must be a non-negative integer')\n        return\n    elif n == 0:\n        return 0\n    else:\n        return int(n * ((n-1)/2))\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0.5\n    elif n == 3:\n        return 0.25\n    elif n == 4:\n        return 0.125\n    elif n == 5:\n        return 0.0625\n    elif n == 6:\n        return 0.03125\n    elif n == 7:\n        return 0.0175\n    elif n == 8:\n        return 0.0390625\n    elif n == 9:\n        return 0.021875\n    elif n == 10:\n        return 0.01\n    elif n == 11:\n        return 0.00875\n    elif n == 12:\n        return 0.020833333333333333\n    elif n == 13:\n        return 0.020833333333333333\n    elif n == 14:\n        return 0.03125\n    elif n == 15:\n        return 0.03125\n    elif n == 16:\n        return 0.0390625\n    elif n == 17:\n        return 0.021875\n    elif n == 18:\n        return 0.0175\n    elif n == 19:\n        return 0.01\n    elif n == 20:\n        return 0.0075\n    elif n == 21:\n        return 0.00625\n    elif n == 22:\n        return 0.0015625\n    elif n == 23:\n        return 0.00125\n    elif n == 24:\n        return 0.001\n    elif n == 25:\n        return 0.01\n    elif n == 26:\n        return 0.0175\n    elif n == 27:\n        return 0.0175\n    elif n == 28:\n        return 0.0015625\n    elif n == 29:\n        return 0.00625\n    elif n == 30:\n        return 0.00625\n    elif n == 31:\n        return 0.01\n    elif n == 32:\n        return 0.00140625\n    elif n == 33:\n        return 0.0009523809523809523\n    elif n == 34:\n        return 0.00140625\n    elif n == 35:\n        return 0.0009523809523809523\n    elif n == 36:\n        return 0.0175\n    elif n == 37:\n        return 0.0175\n    elif n == 38:\n        return 0.01\n    elif n == 39:\n        return 0.00875\n    elif n == 40:\n        return 0.021875\n    elif n == 41:\n        return 0.021875\n    elif n == 42:\n        return 0.03125\n    elif n == 43:\n        return 0.03125\n    elif n == 44:\n        return 0.0475\n    elif n == 45:\n        return 0.0475\n    elif n == 46:\n        return 0.05\n    elif n == 47:\n        return 0.05\n    elif n == 48:\n        return 0.0625\n    elif n == 49:\n        return 0.0625\n    elif n == 50:\n        return 0.0625\n    elif n == 51:\n        return 0.0390625\n    elif n == 52:\n        return 0.0390625\n    elif n == 53:\n        return 0.0390625\n    elif n == 54:\n        return 0.0390625\n    elif n == 55:\n        return 0.021875\n    elif n == 56:\n        return 0.0390625\n    elif n == 57:\n        return 0.021875\n    elif n == 58:\n        return 0.021875\n    elif n == 59:\n        return 0.021875\n    elif n == 60:\n        return 0.03125\n    elif n == 61:\n        return 0.03125\n    elif n == 62:\n        return 0.03125\n    elif n == 63:\n        return 0.03125\n    elif n == 64:\n        return 0.03125\n    elif n == 65:\n        return 0.03125\n    elif n == 66:\n        return 0.03125\n    elif n == 67:\n        return 0.03125\n    elif n == 68:\n        return 0.03125\n    elif n == 69:\n        return 0.03125\n    elif n == 70:\n        return 0.03125\n    elif n == 71:\n        return 0.03125\n    elif n == 72:\n        return 0.03125\n    elif n == 73:\n        return 0.03125\n    elif n == 74:\n        return 0.03125\n    elif n == 75:\n        return 0.03125\n    elif n == 76:\n        return 0.03125\n    elif n == 77:\n        return 0.03125\n    elif n == 78:\n        return 0.03125\n    elif n == 79:\n        return 0.03125\n    elif n == 80:\n        return 0.03125\n    elif n == 81:\n        return 0.03125\n    elif n == 82:\n        return 0.03125\n    elif n == 83:\n        return 0.03125\n    elif n == 84:\n        return 0.03125\n    elif n == 85:\n        return 0.03125\n    elif n == 86:\n        return 0.03125\n    elif n == 87:\n        return 0.03125\n    elif n == 88:\n        return 0.03125\n    elif n == 89:\n        return 0.03125\n    elif n == 90:\n        return 0.03125\n    elif n == 91:\n        return 0.03125\n    elif n == 92:\n        return 0.03125\n    elif n == 93:\n        return 0.03125\n    elif n == 94:\n        return 0.03125\n    elif n == 95:\n        return 0.03125\n    elif n == 96:\n        return 0.03125\n    elif n == 97:\n        return 0.03125\n    elif n == 98:\n        return 0.03125\n    elif n == 99:\n        return 0.03125\n    elif n == 100:\n        return 0.03125\n    elif n == 101:\n        return 0.03125\n    elif n == 102:\n        return 0.03125\n    elif n == 103:\n        return 0.03125\n    elif n == 104:\n        return 0.03125\n    elif n == 105:\n        return 0.03125\n    elif n == 106:\n        return 0.03125\n    elif n == 107:\n        return 0.03125\n    elif n == 108:\n        return 0.03125\n    elif n == 109:\n        return 0.03125\n    elif n == 110:\n        return 0.03125\n    elif n == 111:\n        return 0.03125\n    elif n == 112:\n        return 0.03125\n    elif n == 113:\n        return 0.03125\n    elif n == 114:\n        return 0.03125\n    elif n == 115:\n        return 0.03125\n    elif n == 116:\n        return 0.03125\n    elif n == 117:\n        return 0.03125\n    elif n == 118:\n        return 0.03125\n    elif n == 119:\n        return 0.03125\n    elif n == 120:\n        return 0.03125\n    elif n == 121:\n        return 0.03125\n    elif n == 122:\n        return 0.03125\n    elif n == 123:\n        return 0.03125\n    elif n == 124:\n        return 0.03125\n    elif n == 125:\n        return 0.03125\n    elif n == 126:\n        return 0.03125\n    elif n == 127:\n        retur"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # make a copy of the input list to be tested\n    test_list_k = test_list[:]\n    # sort the list\n    test_list_k.sort()\n    # find minimum k and iterate through the list until we get to k\n    while test_list_k:\n        # find k by summing all values from the remaining list\n        min_k = sum(test_list_k[:K])\n        # stop if we get to k\n        while test_list_k[0] <= min_k:\n            # remove the first item from the list\n            test_list_k.pop(0)\n        # increment k by 1\n        K -= 1\n    # return the value\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = 0\n    for i in range(0, len(test_list)):\n        if k < K:\n            k += 1\n        else:\n            break\n    return k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return 1\n    else:\n        return (min(map(len, test_list)))\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    res = []\n    for i in range(0, len(test_list) - K + 1):\n        res.append(test_list[i: i+K])\n    return res\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    L = list(test_list)\n    L_sort = sorted(L)\n    min_k = 0\n    for i in range(len(L_sort)):\n        if i+1 < len(L_sort):\n            if L_sort[i+1] < L_sort[i]:\n                min_k += 1\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    if n < K:\n        return None\n    if n == K:\n        return len(test_list)\n    mid = int(n/2)\n    for i in range(mid):\n        val_lst = test_list[i]\n        val_rst = test_list[mid]\n        val_lst_K = val_lst[:K]\n        val_rst_K = val_rst[:K]\n        res = len(val_lst_K)\n        for k in range(1,K):\n            if val_lst_K[k] < val_rst_K[k]:\n                res = k\n                break\n        if res:\n            return res\n    return None\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list_k = test_list[:K]\n    \n    #print(test_list)\n    #print(test_list_k)\n    \n    return min(test_list_k)\n    \n    \ndef max_k(test_list, K):\n    '''\n    Write a function to find maximum k records from tuple list. https://www.geeksforgeeks.org/python-find-maximum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list_k = test_list[:K]\n    \n    #print(test_list)\n    #print(test_list_k)\n    \n    return max(test_list_k)\n    \n    \ndef sort_records(train_list):\n    '''\n    Write a function to sort training records by class value.\n    '''\n    \n    #print(train_list)\n    \n    # Sort records based on class values\n    train_list_sorted = sorted(train_list, key=lambda item: item[0], reverse=True)\n    \n    #print(train_list_sorted)\n    \n    # Return the sorted list\n    return train_list_sorted\n    \n    \ndef get_test_records(train_list, test_records, K):\n    '''\n    Return test records based on input parameters\n    '''\n    #print(train_list)\n    #print(test_records)\n    #print(K)\n    \n    # Get test records\n    test_records = []\n    \n    # Get test records\n    for i in range(K):\n        for item in test_records:\n            #print(item[0])\n            #print(item[1])\n            if item[0] == test_records[i][0] and item[1] == test_records[i][1]:\n                #print(test_records[i])\n                #print(\"Yes\")\n                test_records.remove(item)\n    \n    # Sort the test records\n    test_records_sorted = sort_records(test_records)\n    \n    #print(test_records_sorted)\n    \n    #return test_records_sorted\n    \n    return test_records_sorted\n    \n    \n    \n    \ndef test(train_list, test_records, K):\n    '''\n    Function to test different inputs\n    '''\n    \n    #print(train_list)\n    #print(test_records)\n    #print(K)\n    \n    # Run k-records test on given records\n    test_records_sorted = get_test_records(train_list, test_records, K)\n    \n    #print(test_records_sorted)\n    \n    # Print expected result\n    print(\"The expected results are: \")\n    print(test_records_sorted)\n    \n    # Return the test results\n    return test_records_sorted\n    \n    \n    \n    \n    \ndef main():\n    '''\n    Run the program and print the expected results\n    '''\n    \n    # Test record\n    train_records = [[2, 1], [3, 5], [3, 8], [3, 7], [4, 2], [4, 6], [4, 9]]\n    \n    # Test record\n    test_records = [[2, 1], [3, 8], [3, 7], [4, 2], [4, 6], [4, 9]]\n    \n    # Return test results\n    test_records = get_test_records(train_records, test_records, 4)\n    \n    # Return the expected results\n    print(\"The expected results are: \")\n    print(test_records)\n    \n    \nif __name__ == \"__main__\":\n    main()\n    "
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    min_k = 0\n    min_k_index = 0\n    test_list_copy = []\n    \n    # TODO: Implement this function\n    pass\n    \n    # Min k:\n    # return the minimum number of records that need to be inserted at index'min_k_index' in the list\n    # EXAMPLE\n    # Test Cases:\n    # Input: \n    # test_list = (1, 2, 4, 4, 6, 8, 12)\n    # K = 2\n    # Output: 4\n    # Explanation:\n    # Test Case 1:\n    # Input: test_list = (1, 2, 4, 4, 6, 8, 12)\n    # K = 2\n    # Output: 4\n    # Explanation:\n    # Test Case 2:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 3\n    # Explanation:\n    # Test Case 3:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 1\n    # Explanation:\n    # Test Case 4:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 1\n    # Explanation:\n    # Test Case 5:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 1\n    # Explanation:\n    # Test Case 6:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 1\n    # Output: 1\n    # Explanation:\n    # Test Case 7:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 1\n    # Explanation:\n    # Test Case 8:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 1\n    # Explanation:\n    # Test Case 9:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 0\n    # Explanation:\n    # Test Case 10:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 0\n    # Explanation:\n    # Test Case 11:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 0\n    # Explanation:\n    # Test Case 12:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 0\n    # Explanation:\n    # Test Case 13:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 0\n    # Explanation:\n    # Test Case 14:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 0\n    # Explanation:\n    # Test Case 15:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 0\n    # Explanation:\n    # Test Case 16:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 0\n    # Explanation:\n    # Test Case 17:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 0\n    # Explanation:\n    # Test Case 18:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 1\n    # Output: 0\n    # Explanation:\n    # Test Case 19:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 0\n    # Explanation:\n    # Test Case 20:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 1\n    # Explanation:\n    # Test Case 21:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 1\n    # Explanation:\n    # Test Case 22:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 1\n    # Output: 1\n    # Explanation:\n    # Test Case 23:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 1\n    # Explanation:\n    # Test Case 24:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 1\n    # Explanation:\n    # Test Case 25:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 0\n    # Explanation:\n    # Test Case 26:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 1\n    # Output: 0\n    # Explanation:\n    # Test Case 27:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 0\n    # Explanation:\n    # Test Case 28:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 0\n    # Explanation:\n    # Test Case 29:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 0\n    # Explanation:\n    # Test Case 30:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 1\n    # Output: 1\n    # Explanation:\n    # Test Case 31:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 1\n    # Explanation:\n    # Test Case 32:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 1\n    # Explanation:\n    # Test Case 33:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 0\n    # Explanation:\n    # Test Case 34:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 1\n    # Output: 0\n    # Explanation:\n    # Test Case 35:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 0\n    # Explanation:\n    # Test Case 36:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 0\n    # Explanation:\n    # Test Case 37:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Output: 0\n    # Explanation:\n    # Test Case 38:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 1\n    # Output: 0\n    # Explanation:\n    # Test Case 39:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 4\n    # Output: 0\n    # Explanation:\n    # Test Case 40:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 3\n    # Output: 0\n    # Explanation:\n    # Test Case 41:\n    # Input: test_list = (1, 4, 6, 8, 12)\n    # K = 2\n    # Outpu"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for item in test_list:\n        temp = item[:]\n        temp.sort()\n        min_k.append(temp[:K])\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    list_length = len(test_list)\n    if list_length == 0 or list_length == 1:\n        return 0\n    elif list_length == 2:\n        if test_list[0][0] == test_list[1][0]:\n            return K - test_list[0][1]\n        else:\n            return K - test_list[1][1]\n    else:\n        min_k = 0\n        for i in range(list_length-1):\n            for j in range(i+1, list_length):\n                if test_list[i][0] == test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                    min_k = min(min_k, K - test_list[j][1])\n        return min_k\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #get common elements of l1 and l2\n    common_list = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common_list.append(i)\n    return common_list\n    \n    \ndef get_element_in_a_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #get common elements of l1 and l2\n    common_list = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common_list.append(i)\n    #get common elements of l3\n    common_list_3 = []\n    for i in l3:\n        if i in common_list:\n            common_list_3.append(i)\n    return common_list_3\n    \n    \ndef find_in_a_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #get common elements of l1 and l2\n    common_list = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common_list.append(i)\n    #get common elements of l3\n    common_list_3 = []\n    for i in l3:\n        if i in common_list:\n            common_list_3.append(i)\n    return common_list_3\n    \n    \ndef solution(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #get common elements of l1 and l2\n    common_list = extract_index_list(l1, l2, l3)\n    #get common elements of l3\n    common_list_3 = get_element_in_a_list(l1, l2, l3)\n    return common_list_"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            index.append(l2.index(l1[i]))\n        elif l1[i] in l3:\n            index.append(l3.index(l1[i]))\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    index_list = []\n    for i in range(len(l1)):\n        index_list.append(l1[i][l2[i]])\n        index_list.append(l1[i][l3[i]])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Write your code here.\n    return list(set(l1 + l2 + l3) - set(l1 + l2))\n    \n    \n    \ndef find_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Write your code here.\n    return extract_index_list(l1, l2, l3)\n    \n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in range(len(l1)):\n        if l1[index] in l2 and l2[l1.index(l1[index])] in l3:\n            index_list.append(l1[index])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements_list = []\n    \n    for index in range(len(l1)):\n        for element in l1:\n            if element in l2:\n                if element in l3:\n                    common_elements_list.append(element)\n            if element in l3:\n                common_elements_list.append(element)\n            \n    return common_elements_list\n    \n    \ndef get_common_lists(l1, l2, l3):\n    '''\n    We assume that the lists l1, l2, and l3 contain only unique elements.\n    Write a function that takes two lists and returns a list of common elements between the two lists.\n    '''\n    \n    common_elements_list = []\n    \n    for index in range(len(l1)):\n        if l1[index] in l2:\n            if l1[index] in l3:\n                common_elements_list.append(l1[index])\n        if l3[index] in l1:\n            if l3[index] in l2:\n                common_elements_list.append(l3[index])\n        \n    return common_elements_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(0, len(l1)):\n        if l1[i] not in l2:\n            index_list.append(l1[i])\n        if l2[i] not in l3:\n            index_list.append(l2[i])\n        if l3[i] not in l1:\n            index_list.append(l3[i])\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    lst = []\n    temp_lst = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l2[i])\n        if l2[i] in l1 and l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l2[i] in l1 and l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l2[i] in l1 and l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l2[i] in l1 and l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l2[i] in l1 and l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n        if l2[i] in l1 and l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            lst.append(l1[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l1[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l3:\n            lst.append(l3[i])\n        if l3[i] in l1 and l1[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1 and l3[i] in l3:\n            lst.append(l1[i])\n        if l3[i] in l1 and l1[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n        if l3[i] in l1 and l1[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1 and l3[i] in l1 and l3[i] in l1:\n            lst.append(l1[i])\n    return lst\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j and i == k:\n                    index_list.append(i)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for l in range(3):\n        for i in range(len(l1)):\n            if l1[i] == l2[i] and l2[i] == l3[i]:\n                index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lst = sorted(numbers)\n    i = 0\n    while i < len(lst) - 1:\n        if lst[i] == lst[i+1]:\n            break\n        i += 1\n    return lst[i]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = numbers[1]\n    index_second_smallest = 0\n    for index in range(1,len(numbers)):\n        if numbers[index] < second_smallest:\n            index_second_smallest = index\n            second_smallest = numbers[index]\n    return second_smallest, index_second_smallest\n    \ndef second_biggest(numbers):\n    '''\n    Write a function to find the second biggest number in a list.\n    '''\n    second_biggest = numbers[1]\n    index_second_biggest = 0\n    for index in range(1,len(numbers)):\n        if numbers[index] > second_biggest:\n            index_second_biggest = index\n            second_biggest = numbers[index]\n    return second_biggest, index_second_biggest\n    \ndef third_smallest(numbers):\n    '''\n    Write a function to find the third smallest number in a list.\n    '''\n    third_smallest = numbers[2]\n    index_third_smallest = 0\n    for index in range(1,len(numbers)):\n        if numbers[index] < third_smallest:\n            index_third_smallest = index\n            third_smallest = numbers[index]\n    return third_smallest, index_third_smallest\n    \ndef third_biggest(numbers):\n    '''\n    Write a function to find the third biggest number in a list.\n    '''\n    third_biggest = numbers[2]\n    index_third_biggest = 0\n    for index in range(1,len(numbers)):\n        if numbers[index] > third_biggest:\n            index_third_biggest = index\n            third_biggest = numbers[index]\n    return third_biggest, index_third_biggest\n    \ndef fourth_smallest(numbers):\n    '''\n    Write a function to find the fourth smallest number in a list.\n    '''\n    fourth_smallest = numbers[3]\n    index_fourth_smallest = 0\n    for index in range(1,len(numbers)):\n        if numbers[index] < fourth_smallest:\n            index_fourth_smallest = index\n            fourth_smallest = numbers[index]\n    return fourth_smallest, index_fourth_smallest\n    \ndef fourth_biggest(numbers):\n    '''\n    Write a function to find the fourth biggest number in a list.\n    '''\n    fourth_biggest = numbers[3]\n    index_fourth_biggest = 0\n    for index in range(1,len(numbers)):\n        if numbers[index] > fourth_biggest:\n            index_fourth_biggest = index\n            fourth_biggest = numbers[index]\n    return fourth_biggest, index_fourth_biggest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_num = numbers[0]\n    second_smallest_num = numbers[0]\n    for num in numbers:\n        if num < smallest_num:\n            second_smallest_num = num\n            smallest_num = num\n        elif smallest_num == num:\n            pass\n        else:\n            second_smallest_num = smallest_num\n    return second_smallest_num\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return numbers[1]\n    else:\n        for i in range(len(numbers) - 1):\n            if numbers[i] < numbers[i + 1]:\n                return numbers[i + 1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = numbers[0]\n    smallest_number_index = 0\n    for index, num in enumerate(numbers):\n        if num < smallest_number:\n            smallest_number = num\n            smallest_number_index = index\n    return smallest_number_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Find the second smallest number\n    second_smallest = sorted(numbers)[1]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for i in range(0, len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return numbers[i]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lst = [num for num in numbers]\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # I could have used the regular expressions to replace 'b' with 'a' but I couldn't think of a readable way to do it. \n    # I tried a lot of stuff, and got a blank match, so I'm not sure if a match was really done.\n    # So, I'll do a search here and find the first match, and if there is one, then it's a zero or one, and return that. \n    # We can do this because 'b' is the first character in 'b'oup.\n    # This is not the most beautiful, but it seems to be a useful solution to the regexp.\n    #\n    # I could write a pattern so that if I try to match a string with any of the characters 'b', it would return a match, but\n    # I couldn't find a way to do that without having to worry about the order of the characters.\n    #\n    # I could add a regexp to a regular expression library called re, but this would have been much more effective.\n    #\n    # I used it for both the search and match. The search function was an example of an awesome pattern matching a string with a\n    # zero or one. I believe this is good enough to include a pattern for matching strings that are non-zero or one.\n    # It's the exact same as the string search, and so, it's pretty simple.\n    #\n    # Here's what it looks like in this case:\n    #\n    # text = 'aab'\n    # pattern = 'a'\n    #\n    # so it matches the pattern, and returns that. If it doesn't match, it returns False\n    #\n    # I'll have to write some code here to do that.\n    #\n    # The search function checks whether a string is a zero or one. If it's a zero or one, then it returns True.\n    #\n    # If it's a string, then it returns a match, if it doesn't match, it returns False.\n    #\n    # I did this for you. So, you can see that you're doing the search a little bit easier than just the string search,\n    # but I think I can't be bothered with that for the regex. I just use the group() function. I'm pretty sure this\n    # is a very useful function.\n    #\n    # It's a very useful function, because I think the search function is so complicated. I'm already trying to make a\n    # useful search function in python, so I might be better off implementing it in a very basic way.\n    #\n    # I would be smart enough to write a regex, but I'm not sure how to do it. So, I'm not sure if a pattern can be found.\n    #\n    # If I could do the search with the group() function, it could be slightly faster than the search() function.\n    #\n    # So, for example, if I wanted to search for 'a', the regexp would be a 'b' followed by one or more 'b's.\n    #\n    # I can find a pattern match with a regexp, but it's not very useful for the search, because the regexp can be very\n    # complex and this doesn't do it well.\n    #\n    # So, I've tried to have it match something like this:\n    #\n    # text = 'aab'\n    # pattern = 'a'\n    #\n    # but this can't do it well because it's not very complex. It's just a little bit better than the search.\n    #\n    # I could use the group() function to get the group, instead of just a string.\n    #\n    # That's probably a good idea, but I'm a bit lazy because the regexp can't do it well.\n    #\n    # I did that in the search function. It's great, because it's a lot simpler.\n    #\n    # So, I'm not sure if this is what it needs to look like in the search function, so I'm going to try it out.\n    #\n    # All that is left to do is to write a regexp, and I could try that. I would have to rewrite the search function\n    # to deal with regexp patterns that I've already written.\n    #\n    # I would have done a couple of different things. First, I could check if the search result was a match, and if it was\n    # a match, then it would return True, and if it didn't, it would return False. I should probably use a bool here.\n    #\n    # I thought the more specific case is better because the search function takes the group as an argument. This is so\n    # it's a very useful one, because the group is a string, and you need to be able to write regexp function for it.\n    #\n    # I didn't want to use the group function, so I could only do it with one for now. I hope you can take it out and\n    # maybe try it out again.\n    #\n    # The regexp itself is complicated. I'm pretty sure this is pretty complicated, but I have some logic to get the\n    # group, and then just write a regexp.\n    #\n    # The only thing I could think of is that the regexp can take a group as an argument, so it could be useful for\n    # the search.\n    #\n    # In real life, it would be rather complex. I've tried this before, and it's better to have it just print the search\n    # result, and not run it.\n    #\n    # I'd like to see the search result, and then try to get the group. I've tried using the group() function, and I'd\n    # want to get the group, and then run the search on it. I've tried using the group function, and it's also worth\n    # it's a bit more complicated. But in the end, I'm still on the same problem, so I'm just going to try to use the\n    # group() function. I've never seen it fit.\n    #\n    # It would be nice if I could do it in the search, and then I'd have to look at the group before trying to get\n    # the group.\n    #\n    # So, I'd like to add some extra logic to the search function. I would like to have it return a match, if it\n    # doesn't match, or if it doesn't match the search result.\n    #\n    # I knew I could add some more logic to the search function. It would return True if it doesn't match, False if\n    # it doesn't match the search result, and True if it matches. I'd like to use this when I want to get the group, but\n    # I'm not sure it'll be right.\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text == \"\":\n        return False\n    elif text[0] == 'a':\n        text = text[1:].upper()\n        return text_match_zero_one(text)\n    elif text[0] == 'b':\n        text = text[1:].lower()\n        return text_match_zero_one(text)\n    else:\n        return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match=text_pattern.search(text)\n    if match:\n        print(\"\\n\\tText contains a, b\")\n        return match\n    else:\n        print(\"\\n\\tText does not contain any a, b\")\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('\\n','')\n    text = re.sub('a', '', text)\n    text = re.sub('b', '', text)\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b].*'\n    # pattern = r'[a]*[b]*'\n    return re.match(pattern,text)\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[a]*[b].*'\n    # pattern = r'[a]*[a]*[b]*'\n    return re.match(pattern,text)\ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c].*'\n    # pattern = r'[a]*[a]*[b][c]*'\n    return re.match(pattern,text)\ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d].*'\n    # pattern = r'[a]*[a]*[b][c][d]*'\n    return re.match(pattern,text)\ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e].*'\n    # pattern = r'[a]*[a]*[b][c][d][e]*'\n    return re.match(pattern,text)\ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f]*'\n    return re.match(pattern,text)\ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f' or 'g'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f][g].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f][g]*'\n    return re.match(pattern,text)\ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f][g][h].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f][g][h]*'\n    return re.match(pattern,text)\ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h' or 'i'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f][g][h][i].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f][g][h][i]*'\n    return re.match(pattern,text)\ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h' or 'i' or 'j'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f][g][h][i][j].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f][g][h][i][j]*'\n    return re.match(pattern,text)\ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h' or 'i' or 'j' or 'k'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f][g][h][i][j][k].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f][g][h][i][j][k]*'\n    return re.match(pattern,text)\ndef text_match_zero_twelve(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h' or 'i' or 'j' or 'k' or 'l'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f][g][h][i][j][k][l].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f][g][h][i][j][k][l]*'\n    return re.match(pattern,text)\ndef text_match_zero_thirteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h' or 'i' or 'j' or 'k' or 'l' or'm'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b(a)*[b][c][d][e][f][g][h][i][j][k][l][m].*'\n    # pattern = r'[a]*[a]*[b][c][d][e][f][g][h][i]"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\"\\n\",\" \")\n    text = re.findall(\"\\w+a\\w+\", text)\n    text = re.findall(\"\\w+b\\w+\", text)\n    return text\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall(\"\\w+a\\w+\", text)\n    text = re.findall(\"\\w+b\\w+\", text)\n    return text\ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall(\"\\w+a\\w+\", text)\n    text = re.findall(\"\\w+b\\w+\", text)\n    text = re.findall(\"\\w+c\\w+\", text)\n    text = re.findall(\"\\w+d\\w+\", text)\n    text = re.findall(\"\\w+e\\w+\", text)\n    text = re.findall(\"\\w+f\\w+\", text)\n    text = re.findall(\"\\w+g\\w+\", text)\n    text = re.findall(\"\\w+h\\w+\", text)\n    text = re.findall(\"\\w+i\\w+\", text)\n    text = re.findall(\"\\w+j\\w+\", text)\n    text = re.findall(\"\\w+k\\w+\", text)\n    text = re.findall(\"\\w+l\\w+\", text)\n    text = re.findall(\"\\w+m\\w+\", text)\n    text = re.findall(\"\\w+n\\w+\", text)\n    text = re.findall(\"\\w+o\\w+\", text)\n    text = re.findall(\"\\w+p\\w+\", text)\n    text = re.findall(\"\\w+q\\w+\", text)\n    text = re.findall(\"\\w+r\\w+\", text)\n    text = re.findall(\"\\w+s\\w+\", text)\n    text = re.findall(\"\\w+t\\w+\", text)\n    text = re.findall(\"\\w+u\\w+\", text)\n    text = re.findall(\"\\w+v\\w+\", text)\n    text = re.findall(\"\\w+w\\w+\", text)\n    text = re.findall(\"\\w+x\\w+\", text)\n    text = re.findall(\"\\w+y\\w+\", text)\n    text = re.findall(\"\\w+z\\w+\", text)\n    text = re.findall(\"\\w+A\\w+\", text)\n    text = re.findall(\"\\w+B\\w+\", text)\n    text = re.findall(\"\\w+C\\w+\", text)\n    text = re.findall(\"\\w+D\\w+\", text)\n    text = re.findall(\"\\w+E\\w+\", text)\n    text = re.findall(\"\\w+F\\w+\", text)\n    text = re.findall(\"\\w+G\\w+\", text)\n    text = re.findall(\"\\w+H\\w+\", text)\n    text = re.findall(\"\\w+I\\w+\", text)\n    text = re.findall(\"\\w+J\\w+\", text)\n    text = re.findall(\"\\w+K\\w+\", text)\n    text = re.findall(\"\\w+L\\w+\", text)\n    text = re.findall(\"\\w+M\\w+\", text)\n    text = re.findall(\"\\w+N\\w+\", text)\n    text = re.findall(\"\\w+O\\w+\", text)\n    text = re.findall(\"\\w+P\\w+\", text)\n    text = re.findall(\"\\w+Q\\w+\", text)\n    text = re.findall(\"\\w+R\\w+\", text)\n    text = re.findall(\"\\w+S\\w+\", text)\n    text = re.findall(\"\\w+T\\w+\", text)\n    text = re.findall(\"\\w+U\\w+\", text)\n    text = re.findall(\"\\w+V\\w+\", text)\n    text = re.findall(\"\\w+W\\w+\", text)\n    text = re.findall(\"\\w+X\\w+\", text)\n    text = re.findall(\"\\w+Y\\w+\", text)\n    text = re.findall(\"\\w+Z\\w+\", text)\n    text = re.findall(\"\\w+a\\w+\", text)\n    text = re.findall(\"\\w+b\\w+\", text)\n    text = re.findall(\"\\w+c\\w+\", text)\n    text = re.findall(\"\\w+d\\w+\", text)\n    text = re.findall(\"\\w+e\\w+\", text)\n    text = re.findall(\"\\w+f\\w+\", text)\n    text = re.findall(\"\\w+g\\w+\", text)\n    text = re.findall(\"\\w+h\\w+\", text)\n    text = re.findall(\"\\w+i\\w+\", text)\n    text = re.findall(\"\\w+j\\w+\", text)\n    text = re.findall(\"\\w+k\\w+\", text)\n    text = re.findall(\"\\w+l\\w+\", text)\n    text = re.findall(\"\\w+m\\w+\", text)\n    text = re.findall(\"\\w+n\\w+\", text)\n    text = re.findall(\"\\w+o\\w+\", text)\n    text = re.findall(\"\\w+p\\w+\", text)\n    text = re.findall(\"\\w+q\\w+\", text)\n    text = re.findall(\"\\w+r\\w+\", text)\n    text = re.findall(\"\\w+s\\w+\", text)\n    text = re.findall(\"\\w+t\\w+\", text)\n    text = re.findall(\"\\w+u\\w+\", text)\n    text = re.findall(\"\\w+v\\w+\", text)\n    text = re.findall(\"\\w+w\\w+\", text)\n    text = re.findall(\"\\w+x\\w+\", text)\n    text = re.findall(\"\\w+y\\w+\", text)\n    text = re.findall(\"\\w+z\\w+\", text)\n    text = re.findall(\"\\w+A\\w+\", text)\n    text = re.findall(\"\\w+B\\w+\", text)\n    text = re.findall(\"\\w+C\\w+\", text)\n    text = re.findall(\"\\w+D\\w+\", text)\n    text = re.findall(\"\\w+E\\w+\", text)\n    text = re.findall(\"\\w+F\\w+\", text)\n    text = re.findall(\"\\w+G\\w+\", text)\n    text = re.findall(\"\\w+H\\w+\", text)\n    text = re.findall(\"\\w+I\\w+\", text)\n    text = re.findall(\"\\w+J\\w+\", text)\n    text = re.findall(\"\\w+K\\w+\", text)\n    text = re.findall(\"\\w+L\\w+\", text)\n    text = re.findall(\"\\w+M\\w+\", text)\n    text "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"(a|b)\")\n    if not pattern.search(text):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('(a.*b)',text, flags=re.DOTALL)\n    "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.endswith('a'):\n        text = text[:-1]\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.endswith('b'):\n        text = text[:-1]\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.endswith('b'):\n        text = text[:-1]\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.endswith('b'):\n        text = text[:-1]\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'b':\n        return False\n    return True\ndef text_match_zero_one_19(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text) > 1 and text[0] == 'a':\n        return False\n    return True\ndef text_match_zero_one_20(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    # Set up a regular expression\n    regex = '^(([a-zA-Z0-9]|([-+])|([0-9])))\\s*([a-zA-Z0-9]|([-+])|([0-9]))\\s*$'\n    match = re.search(regex, text)\n    if match is None:\n        return False\n    if match.group(2) == \"\":\n        return False\n    if match.group(1) == \"a\":\n        return True\n    if match.group(1) == \"b\":\n        return True\n    return False\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # Create a list of pairs\n    pairs = []\n    # Loop through the strings and find the reverse strings\n    for i in test_list:\n        # Find the reverse string\n        pairs.append(i[::-1])\n    for i in pairs:\n        if i == i[::-1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i,len(test_list)-1):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_string = ''\n    for i in test_list:\n        test_string += i\n    counter = {}\n    test_string_list = test_string.split(' ')\n    for i in test_string_list:\n        if i not in counter:\n            counter[i] = 1\n        else:\n            counter[i] += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    i = 0\n    for j in range(len(test_list)-1):\n        if test_list[i] == test_list[j]:\n            count = count + 1\n        i = i + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count=0\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            if test_list[i][::-1]==test_list[j][::-1] and test_list[i][::-1] not in test_list[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    temp_list = []\n    for i in test_list:\n        temp_list.append(i)\n    print(temp_list)\n    temp_list.sort()\n    count = 0\n    for i in range(len(temp_list)-1):\n        if temp_list[i] == temp_list[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pairs = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict(Counter(list1))"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for x in range(0, len(list1)):\n        for y in range(0, len(list1)):\n            if list1[y] not in d:\n                d[list1[y]] = 1\n            else:\n                d[list1[y]] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d.keys():\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in list1:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        t = (list1[i], tuple(list1))\n        if t in d:\n            d[t] += 1\n        else:\n            d[t] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #nested_dict = {}\n    dict_counter = {}\n    for item in list1:\n        if not dict_counter:\n            dict_counter[tuple(item)] = 0\n        else:\n            dict_counter[tuple(item)] += 1\n    return dict_counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for i in list1:\n        if i in unique_dict:\n            unique_dict[i] = unique_dict[i] + 1\n        else:\n            unique_dict[i] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] not in d:\n            d[list1[i]] = [i]\n        else:\n            d[list1[i]].append(i)\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(0,len(list1)):\n        count[list1[i]] = count.get(list1[i],0)+1\n    return count\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # your code goes here\n    return '0' not in str(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num)==0:\n        return False\n    elif num.endswith('.'):\n        num=num[:-1]\n    elif num.endswith('e'):\n        num=num[:-1]\n    elif num.endswith('E'):\n        num=num[:-1]\n    return eval(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num)<=4:\n        return 'not a decimal number'\n    else:\n        if num[-1]!='.':\n            return 'not a decimal number'\n        else:\n            if num[-3]=='.':\n                num=num[:-3]\n            if num[-1]=='.':\n                num=num[:-1]\n            if num[-1]!='0' and num[-2]!='0':\n                return 'not a decimal number'\n            else:\n                if num[-3]=='0':\n                    num=num[:-3]\n                else:\n                    num=num[:-2]\n                if num[-1]=='0':\n                    num=num[:-1]\n                else:\n                    num=num[:-1]\n                if num[-1]!='0':\n                    return 'not a decimal number'\n                else:\n                    return num\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] in '+-':\n        return False\n    if num[0] in '123456789':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num[-1] == '.':\n        return False\n    if num[-2] == '.':\n        return False\n    if num[-3] == '.':\n        return False\n    if num[-4] == '.':\n        return False\n    if num[-5] == '.':\n        return False\n    if num[-6] == '.':\n        return False\n    if num[-7] == '.':\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if type(num) is str:\n        if '.' in num:\n            return False\n        num = num.replace('.', '')\n        numbers = num.split('e')\n        \n        if len(numbers) == 1:\n            return True\n        \n        if '-' in numbers[1] or '+' in numbers[1]:\n            return False\n        \n        for i in range(2, len(numbers)):\n            if numbers[i].isdigit() or numbers[i] in ['.', 'e']:\n                return False\n        \n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-']:\n        num = '0' + num\n    if len(num) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    p = 2\n    if len(str(num)) >= p:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        n = float(num)\n        if n.is_integer() == False:\n            print('The number is not a decimal number')\n            return False\n        n = n if n.is_integer() == True else n + 0.0001\n        return True\n    except Exception as e:\n        print(e)\n        print('The number is not a decimal number')\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 10:\n        num = num[:-2]\n        num = float(num)\n        return num > 0.0 and num % 1.0 == 0.0\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return False\n    dic = {}\n    for i in arr:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for key, value in dic.items():\n        if value == 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in range(0,len(arr)):\n        if arr[i] in unique:\n            return True\n        else:\n            unique.append(arr[i])\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return True\n    else:\n        # check for 1st and 2nd elemtn\n        if arr[0]!=arr[1]:\n            return False\n    \n    # check for last elemnt in the list\n    if arr[-1]!=arr[-2]:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    a = []\n    for i in range(len(arr)):\n        a.append(arr[i])\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_sorted = sorted(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the list of numbers contains only one distinct element\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if(arr[i] == arr[i]):\n            count += 1\n    if(count == len(arr)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp = []\n    for i in arr:\n        if i not in temp:\n            temp.append(i)\n    if len(temp) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 in range(1,13)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    month_numbers = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # to check whether a given month number contains 30 days or not\n    if monthnum3 == 1:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 31 days or not\n    elif monthnum3 == 2:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 32 days or not\n    elif monthnum3 == 4:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 33 days or not\n    elif monthnum3 == 5:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 34 days or not\n    elif monthnum3 == 6:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 35 days or not\n    elif monthnum3 == 7:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 36 days or not\n    elif monthnum3 == 8:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 37 days or not\n    elif monthnum3 == 9:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 38 days or not\n    elif monthnum3 == 10:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 39 days or not\n    elif monthnum3 == 11:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 40 days or not\n    elif monthnum3 == 12:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 41 days or not\n    elif monthnum3 == 13:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 42 days or not\n    elif monthnum3 == 14:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 43 days or not\n    elif monthnum3 == 15:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 44 days or not\n    elif monthnum3 == 16:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 45 days or not\n    elif monthnum3 == 17:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 46 days or not\n    elif monthnum3 == 18:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 47 days or not\n    elif monthnum3 == 19:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 48 days or not\n    elif monthnum3 == 20:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 49 days or not\n    elif monthnum3 == 21:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 50 days or not\n    elif monthnum3 == 22:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 51 days or not\n    elif monthnum3 == 23:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 52 days or not\n    elif monthnum3 == 24:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 53 days or not\n    elif monthnum3 == 25:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 54 days or not\n    elif monthnum3 == 26:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 55 days or not\n    elif monthnum3 == 27:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 56 days or not\n    elif monthnum3 == 28:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 57 days or not\n    elif monthnum3 == 29:\n        if (monthnum3 == 12) or (monthnum3 == 3) or (monthnum3 == 6) or (monthnum3 == 9):\n            return True\n        else:\n            return False\n    # checking whether a given month number contains 58 days or not\n    elif monthnum3 == 30:\n        if (monthnum3 == 12) or (monthnum3 ="
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n        \n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber = monthnum3.split('/')\n    if len(monthnumber)!= 3:\n        return False\n    else:\n        if int(monthnumber[0]) < 1 or int(monthnumber[0]) > 12 or int(monthnumber[1]) < 1 or int(monthnumber[1]) > 31:\n            return False\n        else:\n            if int(monthnumber[1]) == 29:\n                if int(monthnumber[0]) == 12:\n                    return False\n                else:\n                    if int(monthnumber[0]) == 1:\n                        return False\n                    else:\n                        return True\n            else:\n                if int(monthnumber[0]) == 1 or int(monthnumber[0]) == 2:\n                    return False\n                else:\n                    if int(monthnumber[0]) == 12:\n                        return True\n                    else:\n                        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3)<1 or int(monthnum3)>12:\n        return'month number should be from 1 to 12'\n    elif int(monthnum3)<=29:\n        return'month number should not contain 30 days'\n    else:\n        return 'the month number is correct'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check_month = int(monthnum3) - 1\n    return monthnum3 > 31 and monthnum3 < 13\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month3_mongo=mongo_collection.find_one({\"month_number\":int(monthnum3)})\n    if month3_mongo:\n        if month3_mongo[\"days\"] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 == 3:\n        return False\n    elif monthnum3 == 4:\n        return False\n    elif monthnum3 == 5:\n        return False\n    elif monthnum3 == 6:\n        return False\n    elif monthnum3 == 7:\n        return False\n    elif monthnum3 == 8:\n        return False\n    elif monthnum3 == 9:\n        return False\n    elif monthnum3 == 10:\n        return False\n    elif monthnum3 == 11:\n        return False\n    elif monthnum3 == 12:\n        return False\n    else:\n        print('Invalid input')\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    m = 0\n    for i in range(n-1):\n        m = max(m,arr[i] - arr[i+1])\n    return m\ndef main(): \n    arr = [1, 2, 3, 4, 5]\n    print(find_min_diff(arr,5))\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a,b=0,0\n    while b < n:\n        a = arr[a]\n        b = arr[b]\n    return a\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i = 0\n    j = 0\n    # check if all elements are present in array\n    if len(arr) == 0:\n        return 0\n    # return the minimum\n    while i < len(arr):\n        while j < len(arr) and arr[i] < arr[j]:\n            j += 1\n        if j == i:\n            return arr[i]\n        i += 1\n    return 0\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    min_index = 0\n    for i in range(2,n):\n        min_diff = min(min_diff,arr[i]-arr[i-1])\n        if min_diff == arr[i]:\n            min_index = i+1\n    return min_diff,min_index\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return abs(arr[0] - arr[1])\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = 0\n    for i in range(n-1):\n        for j in range(i, n):\n            diff = arr[i] - arr[j]\n            if(diff!= 0):\n                return diff\n    return -1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i,j=0,0\n    while i<n:\n        if arr[i]==arr[j]:\n            i+=1\n            j+=1\n        else:\n            return arr[i]-arr[j]\n    return arr[i]\n    \n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return arr[1]-arr[0]\n    min_diff=arr[0]\n    min_ind=0\n    for i in range(1,n):\n        if arr[i]!=arr[i-1]:\n            if min_diff>arr[i]-min_diff:\n                min_diff=arr[i]-min_diff\n                min_ind=i\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        low = arr[0]\n        high = arr[0]\n        i = 1\n        j = 1\n        while i < len(arr):\n            if arr[i] < low:\n                low = arr[i]\n            if arr[i] > high:\n                high = arr[i]\n            i += 1\n        return high - low\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #Store the result\n    minimum = arr[0] - arr[1]\n    \n    # Iterate over the array \n    for i in range(2, n): \n        # If the current element is less than the previous, \n        # then store the result \n        if arr[i] < minimum: \n            minimum = arr[i] - arr[i - 1] \n        # Else increment the result \n        else: \n            minimum = minimum + arr[i] - arr[i - 1] \n    # Return the minimum \n    return minimum "
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num = num + 1\n    print(num)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char == '0':\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n    \ndef type_of_num(num):\n    '''\n    Write a python function to determine the type of a number.\n    '''\n    types = ['int', 'float','str']\n    for i in types:\n        if type(num) == i:\n            return i\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    total=0\n    for i in str:\n        if i.isdigit():\n            total+=1\n    return total\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # write your code here\n    lst = list(str)\n    ctr = 0\n    for i in lst:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    assert type(n) == int\n    assert n > 0\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_polite(3*n+1)\n    else:\n        return is_polite(3*n+2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 1\n    while n > 0:\n        if n % 2 == 1:\n            n = n/2\n            polite_count += 1\n        else:\n            n = (n-1)/2\n            polite_count += 1\n    return polite_count\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        return 0 \n    if n == 1: \n        return 1 \n    a = n%10\n    if n%2 == 0 and a == 0: \n        return n//10 + 1\n    else: \n        return n//10\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return 2\n    else: \n        return 3\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n <= 0): \n        raise Exception(\"invalid input\")\n    if (n == 1): \n        return True\n    if (n%2 == 0): \n        return (is_polite(n-1) and is_polite(n-2)) or (is_polite(n-1) and is_polite(n-3))\n    else: \n        return is_polite(n-1) and is_polite(n-2) or is_polite(n-2) and is_polite(n-3)\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if (n <= 0): \n        raise Exception(\"invalid input\")\n    if (n == 1): \n        return True\n    if (n == 2): \n        return True\n    if (n%2 == 0): \n        return (is_prime(n-1) and is_prime(n-2)) or (is_prime(n-1) and is_prime(n-3))\n    else: \n        return is_prime(n-1) and is_prime(n-2) or is_prime(n-2) and is_prime(n-3)\ndef is_perfect_square(n):\n    '''\n    Write a function to check if n is a perfect square. geeksforgeeks.org/n-th-perfect-square-number/\n    '''\n    if (n < 0): \n        raise Exception(\"invalid input\")\n    if (n == 0): \n        return True\n    if (n == 1): \n        return False\n    if (n%2 == 0): \n        return ((n + 1)%10 == 0) or ((n + 1)%10 == 1) or ((n + 1)%10 == 3) or ((n + 1)%10 == 5) or ((n + 1)%10 == 7) or ((n + 1)%10 == 9)\n    else: \n        return is_perfect_square(n//2) and is_perfect_square(n//3) and is_perfect_square(n//5) and is_perfect_square(n//7) and is_perfect_square(n//9)\ndef is_prime_number(n):\n    '''\n    Write a function to check if n is a prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if (n < 0): \n        raise Exception(\"invalid input\")\n    if (n == 0): \n        return True\n    if (n == 1): \n        return False\n    if (n%2 == 0): \n        return (is_prime_number(n-1) and is_prime_number(n-2)) or (is_prime_number(n-1) and is_prime_number(n-3))\n    else: \n        return is_prime_number(n-1) and is_prime_number(n-2) or is_prime_number(n-2) and is_prime_number(n-3)\ndef is_nth_prime(n,k):\n    '''\n    Given a number n, return whether n is a prime number. \n    '''\n    if (n < 0): \n        raise Exception(\"invalid input\")\n    if (n == 0): \n        return True\n    if (n == 1): \n        return False\n    if (n%2 == 0): \n        return (is_nth_prime(n-1,k) and is_nth_prime(n-2,k)) or (is_nth_prime(n-1,k) and is_nth_prime(n-3,k)) or (is_nth_prime(n-2,k) and is_nth_prime(n-3,k))\n    else: \n        return is_nth_prime(n-1,k) and is_nth_prime(n-2,k) or is_nth_prime(n-2,k) and is_nth_prime(n-3,k)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return 0 \n    elif n % 2 == 0: \n        return n/2 \n    else: \n        return 3*n+1 \ndef is_zero(x): \n    ''' \n    Take an integer as an argument and return True if the argument is 0 \n    '''\n    return math.isclose(x,0)\ndef is_prime(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a prime number \n    '''\n    if x<=1: \n        return False\n    elif x<=3: \n        return True\n    else: \n        for i in range(2,int(math.sqrt(x))+1): \n            if x%i==0: \n                return False\n        return True\ndef is_negative(x): \n    ''' \n    Take an integer as an argument and return True if the argument is negative \n    '''\n    return x<0\ndef is_positive(x): \n    ''' \n    Take an integer as an argument and return True if the argument is positive \n    '''\n    return x>0\ndef is_large(x): \n    ''' \n    Take an integer as an argument and return True if the argument is positive \n    '''\n    return x<0\ndef is_prime_and_not_divisible_by_2(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 2 and is not a prime number \n    '''\n    return is_prime(x) and not is_divisible_by_2(x) and not is_large(x)\ndef is_prime_and_divisible_by_2(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 2 and is divisible by 2 \n    '''\n    return is_prime(x) and is_divisible_by_2(x) and is_divisible_by_2(x)\ndef is_prime_and_divisible_by_3(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 3 and is divisible by 3 \n    '''\n    return is_prime(x) and is_divisible_by_3(x) and is_divisible_by_3(x)\ndef is_prime_and_divisible_by_4(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 4 and is divisible by 4 \n    '''\n    return is_prime(x) and is_divisible_by_4(x) and is_divisible_by_4(x)\ndef is_prime_and_divisible_by_5(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 5 and is divisible by 5 \n    '''\n    return is_prime(x) and is_divisible_by_5(x) and is_divisible_by_5(x)\ndef is_prime_and_divisible_by_6(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 6 and is divisible by 6 \n    '''\n    return is_prime(x) and is_divisible_by_6(x) and is_divisible_by_6(x)\ndef is_prime_and_divisible_by_7(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 7 and is divisible by 7 \n    '''\n    return is_prime(x) and is_divisible_by_7(x) and is_divisible_by_7(x)\ndef is_prime_and_divisible_by_8(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 8 and is divisible by 8 \n    '''\n    return is_prime(x) and is_divisible_by_8(x) and is_divisible_by_8(x)\ndef is_prime_and_divisible_by_9(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 9 and is divisible by 9 \n    '''\n    return is_prime(x) and is_divisible_by_9(x) and is_divisible_by_9(x)\ndef is_prime_and_divisible_by_10(x): \n    ''' \n    Take an integer as an argument and return True if the argument is a positive integer \n    and divisible by 10 and is divisible by 10 \n    '''\n    return is_prime(x) and is_divisible_by_10(x) and is_divisible_by_10(x)\ndef is_divisible_by_1(x): \n    ''' \n    Take an integer as an argument and return True if the argument is divisible by 1 and is divisible by 1 \n    '''\n    return is_divisible_by_2(x) and is_divisible_by_3(x) and is_divisible_by_4(x) and is_divisible_by_5(x) and is_divisible_by_6(x) and is_divisible_by_7(x) and is_divisible_by_8(x) and is_divisible_by_9(x) and is_divisible_by_10(x)\ndef is_divisible_by_2(x): \n    ''' \n    Take an integer as an argument and return True if the argument is divisible by 2 and is divisible by 2 \n    '''\n    return is_divisible_by_3(x) and is_divisible_by_4(x) and is_divisible_by_5(x) and is_divisible_by_6(x) and is_divisible_by_7(x) and is_divisible_by_8(x) and is_divisible_by_9(x) and is_divisible_by_10(x)\ndef is_divisible_by_3(x): \n    ''' \n    Take an integer as an argument and return True if the argument is divisible by 3 and is divisible by 3 \n    '''\n    return is_divisible_by_4(x) and is_divisible_by_5(x) and is_divisible_by_6(x) and is_divisible_by_7(x) and is_divisible_by_8(x) and is_divisible_by_9(x) and is_divisible_by_10(x)\ndef is_divisible_by_4(x): \n    ''' \n    Take an integer as an argument and return True if the argument is divisible by 4 and is divisible by 4 \n    '''\n    return is_divisible_by_5(x) and is_divisible_by_6(x) and is_divisible_by_7(x) and is_divisible_by_8(x) and is_divisible_by_9(x) and is_divisible_by_10(x)\ndef is_divisible_by_5(x): \n    ''' \n    Take an integer as an argument and return True if the argument is divisible by 5 and is divisible by 5 \n    '''\n    return is_divisible_by_6(x) and is_divisible_by_7(x) and is_divisible_by_8(x) and is_divisible_by_9(x) and is_divisible_by_10(x)\ndef is_divisible_by_6(x): \n    ''' \n    Take an integer as an argument and return True if the argument is divisible by 6 and is divisible by 6 \n    '''\n    return is_divisible_by_7(x) and is_divisible_by"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    else:\n        return math.factorial(n)//(math.factorial(n-1)*math.factorial(n-2))\n    \ndef highest_fib_number(n):\n    '''\n    Return the highest number in the Fibonacci sequence. geeksforgeeks.org/fibonacci-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_fib_number(n-1) + highest_fib_number(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = math.log(n, 10)\n    for i in range(a, -1, -1):\n        if n % 10 ** i == 0:\n            return n // 10 ** i\n    return -1"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=int(n)\n    if n<=0: \n        return False\n    if n==0:\n        return True\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 4\n    if n == 5: return 5\n    if n == 6: return 6\n    if n == 7: return 7\n    if n == 8: return 8\n    if n == 9: return 9\n    if n == 10: return 10\n    if n == 11: return 11\n    if n == 12: return 12\n    if n == 13: return 13\n    if n == 14: return 14\n    if n == 15: return 15\n    if n == 16: return 16\n    if n == 17: return 17\n    if n == 18: return 18\n    if n == 19: return 19\n    if n == 20: return 20\n    if n == 21: return 21\n    if n == 22: return 22\n    if n == 23: return 23\n    if n == 24: return 24\n    if n == 25: return 25\n    if n == 26: return 26\n    if n == 27: return 27\n    if n == 28: return 28\n    if n == 29: return 29\n    if n == 30: return 30\n    if n == 31: return 31\n    if n == 32: return 32\n    if n == 33: return 33\n    if n == 34: return 34\n    if n == 35: return 35\n    if n == 36: return 36\n    if n == 37: return 37\n    if n == 38: return 38\n    if n == 39: return 39\n    if n == 40: return 40\n    if n == 41: return 41\n    if n == 42: return 42\n    if n == 43: return 43\n    if n == 44: return 44\n    if n == 45: return 45\n    if n == 46: return 46\n    if n == 47: return 47\n    if n == 48: return 48\n    if n == 49: return 49\n    if n == 50: return 50\n    if n == 51: return 51\n    if n == 52: return 52\n    if n == 53: return 53\n    if n == 54: return 54\n    if n == 55: return 55\n    if n == 56: return 56\n    if n == 57: return 57\n    if n == 58: return 58\n    if n == 59: return 59\n    if n == 60: return 60\n    if n == 61: return 61\n    if n == 62: return 62\n    if n == 63: return 63\n    if n == 64: return 64\n    if n == 65: return 65\n    if n == 66: return 66\n    if n == 67: return 67\n    if n == 68: return 68\n    if n == 69: return 69\n    if n == 70: return 70\n    if n == 71: return 71\n    if n == 72: return 72\n    if n == 73: return 73\n    if n == 74: return 74\n    if n == 75: return 75\n    if n == 76: return 76\n    if n == 77: return 77\n    if n == 78: return 78\n    if n == 79: return 79\n    if n == 80: return 80\n    if n == 81: return 81\n    if n == 82: return 82\n    if n == 83: return 83\n    if n == 84: return 84\n    if n == 85: return 85\n    if n == 86: return 86\n    if n == 87: return 87\n    if n == 88: return 88\n    if n == 89: return 89\n    if n == 90: return 90\n    if n == 91: return 91\n    if n == 92: return 92\n    if n == 93: return 93\n    if n == 94: return 94\n    if n == 95: return 95\n    if n == 96: return 96\n    if n == 97: return 97\n    if n == 98: return 98\n    if n == 99: return 99\n    if n == 100: return 100\n    if n == 101: return 101\n    if n == 102: return 102\n    if n == 103: return 103\n    if n == 104: return 104\n    if n == 105: return 105\n    if n == 106: return 106\n    if n == 107: return 107\n    if n == 108: return 108\n    if n == 109: return 109\n    if n == 110: return 110\n    if n == 111: return 111\n    if n == 112: return 112\n    if n == 113: return 113\n    if n == 114: return 114\n    if n == 115: return 115\n    if n == 116: return 116\n    if n == 117: return 117\n    if n == 118: return 118\n    if n == 119: return 119\n    if n == 120: return 120\n    if n == 121: return 121\n    if n == 122: return 122\n    if n == 123: return 123\n    if n == 124: return 124\n    if n == 125: return 125\n    if n == 126: return 126\n    if n == 127: return 127\n    if n == 128: return 128\n    if n == 129: return 129\n    if n == 130: return 130\n    if n == 131: return 131\n    if n == 132: return 132\n    if n == 133: return 133\n    if n == 134: return 134\n    if n == 135: return 135\n    if n == 136: return 136\n    if n == 137: return 137\n    if n == 138: return 138\n    if n == 139: return 139\n    if n == 140: return 140\n    if n == 141: return 141\n    if n == 142: return 142\n    if n == 143: return 143\n    if n == 144: return 144\n    if n == 145: return 145\n    if n == 146: return 146\n    if n == 147: return 147\n    if n == 148: return 148\n    if n == 149: return 149\n    if n == 150: return 150\n    if n == 151: return 151\n    if n == 152: return 152\n    if n == 153: return 153\n    if n == 154: return 154\n    if n == 155: return 155\n    if n == 156: return 156\n    if n == 157: return 157\n    if n == 158: return 158\n    if n == 159: return 159\n    if n == 160: return 160\n    if n == 161: return 161\n    if n == 162: return 162\n    if n == 163: return 163\n    if n == 164: return 164\n    if n == 165: return 165\n    if n == 166: return 166\n    if n == 167: return 167\n    if n == 168: return 168\n    if n == 169: return 169\n    if n == 170: return 170\n    if n == 171: return 171\n    if n == 172: return 172\n    if n == 173: return 173\n    if n == 174: return 174\n    if n == 175: return 175\n    if n == 176: return 176\n    if n == 177: return 177\n    if n == 178: return 178\n    if n == 179: return 179\n    if n == 180: return 180\n    if n == 181: return 181\n    if n == 182: return 182\n    if n == 183: return 183\n    if n == 184: return 184\n    if n == 185: return 185\n    if n == 186: return 186\n    if n == 187: return 187\n    if n == 188: return 188\n    if n == 189: return 189\n    if n == 190: return 190\n    if n == 191: return 191\n    if n == 192: return 192\n    if n == 193: return 193\n    if n == 194: return 194\n    if n == 195: return 195\n    if n == 196: return 196\n    if n == 197: return 197\n    if n == 198: return 198\n    if n == 199: return 199\n    if n == 200: return 200\n    if n == 201: return 201\n    if n == 202: return 202\n    if n == 203: return 203\n    if n == 204: return 204\n    if n == 205: return 205\n    if n == 206: return 206\n    if n == 207: return 207\n    if n == 208: return 208\n    if n == 209: return 209\n    if n == 210: return 210\n    if n == 211: return 211\n    if n == 212: return 212\n    if n == 213: return 213\n    if n == 214: return 214\n    if n == 215: return 215\n    if n == 216: return 216\n    if n == 217: return 217\n    if n == 218: return 218\n    if n == 219: return 219\n    if n == 220: return 220\n    if n == 221: return 221\n    if n == 222: return 222"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1] and l1[i] == l1[i+2]:\n            pass\n        else:\n            pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(i, i+1) for i in range(len(l1)-1) if l1[i] == l1[i+1]]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in l1:\n        result.append((i, i+1))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if i == 0 or (i+1)%2 == 0:\n            l.append((l1[i],l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for item in l1:\n        if item + 1 in l1:\n            l2.append([item, item+1])\n        else:\n            l2.append([item])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    i = 0\n    while i < len(l1):\n        res.append((l1[i],l1[i+1]))\n        i = i + 1\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = list(map(list,zip(*l1)))\n    return l1\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    for i in range(len(l1) - 1):\n        if (l1[i]!= l1[i+1]):\n            out.append([l1[i], l1[i+1]])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1[:-1],l1[1:]))\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len(set(arr)-set(arr))\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr) - 1):\n        if arr[i] + arr[i + 1] == sum:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # TODO: Write your solution here\n    dic = {}\n    count = 0\n    for i in arr:\n        if i in dic:\n            dic[i] = dic[i] + 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i] == sum:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    numbers = []\n    for x in arr:\n        if x + sum in numbers:\n            numbers.append(x + sum)\n        else:\n            numbers.append(x)\n    return len(numbers)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j]==sum:\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #Start writing your code here\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            # print(i, j)\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if sum == arr[j] - arr[i]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in arr:\n        if i == sum:\n            pairs.append(arr.index(i))\n    return len(pairs)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    difference=[]\n    for i in li1:\n        if i not in li2:\n            difference.append(i)\n    return difference\n        "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    ans=[]\n    for i in li1:\n        ans.append(i)\n    for j in li2:\n        ans.append(j)\n    return ans\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1=li1[1:len(li1)]\n    li2=li2[1:len(li2)]\n    return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif = []\n    for i in li1:\n        if i not in dif:\n            dif.append(i)\n    return dif\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=0\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff+=1\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1_res=[]\n    for item in li1:\n        li1_res.append(item)\n    li2_res=[]\n    for item in li2:\n        li2_res.append(item)\n    return li1_res-li2_res\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1=list(li1)\n    l2=list(li2)\n    l3=[]\n    for i in range(len(l1)):\n        if l1[i]!=l2[i]:\n            l3.append(l1[i])\n    return l3\n    \ndef Merge(li1,li2):\n    '''\n    Write a python function to merge two lists into one.\n    '''\n    l1=list(li1)\n    l2=list(li2)\n    new_list=[]\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            new_list.append(l1[i])\n    return new_list\n    \ndef MergeSort(li):\n    '''\n    Write a python function to merge sort a list.\n    '''\n    if len(li)==1:\n        return li\n    mid=len(li)//2\n    li1=li[:mid]\n    li2=li[mid:]\n    MergeSort(li1)\n    MergeSort(li2)\n    li3=Merge(li1,li2)\n    return li3\n    \ndef BucketSort(li):\n    '''\n    Write a python function to sort a list in a bucket manner.\n    '''\n    bucket=[]\n    for i in range(len(li)):\n        bucket.append([])\n    for i in range(len(li)):\n        for j in range(len(li)):\n            if li[i]>li[j]:\n                bucket[i].append(j)\n    for i in range(len(bucket)):\n        li[i]=bucket[i]\n    return li\n    \ndef count_trees(d,i):\n    '''\n    Write a python function to count the number of trees on a given level.\n    '''\n    total=0\n    if d==0:\n        return 0\n    for i in range(i,len(d[0])):\n        if d[0][i]==0:\n            total+=count_trees(d,i-1)\n    return total\n    \ndef maxSum(li):\n    '''\n    Write a python function to find the maximum sum of a given list.\n    '''\n    sum=0\n    for i in range(len(li)):\n        sum=max(sum,li[i])\n    return sum\n    \ndef kth_smallest(arr,k):\n    '''\n    Write a python function to find the kth smallest element in a given list.\n    '''\n    if len(arr)<=k:\n        return arr[0]\n    s=arr[0]\n    for i in range(1,k):\n        s=min(s,arr[i])\n    return s\n    \ndef avg(li):\n    '''\n    Write a python function to calculate the average of a given list.\n    '''\n    sum=0\n    for i in range(len(li)):\n        sum+=li[i]\n    return sum/len(li)\n    \ndef median(li):\n    '''\n    Write a python function to find the median element of a given list.\n    '''\n    s=len(li)\n    if len(li)%2==0:\n        return (li[(s+1)//2]+li[(s-1)//2])/2\n    else:\n        return li[s//2]\n    \ndef mode(li):\n    '''\n    Write a python function to determine the most common element of a given list.\n    '''\n    c=0\n    for i in range(len(li)):\n        if li[i]==max(li):\n            c+=1\n    return c\n    \ndef mod(li):\n    '''\n    Write a python function to calculate the mod of a given list.\n    '''\n    sum=0\n    for i in range(len(li)):\n        sum+=li[i]\n    return sum%len(li)\n    \ndef count_negatives(li):\n    '''\n    Write a python function to count the number of negative numbers in a given list.\n    '''\n    count=0\n    for i in range(len(li)):\n        if li[i]<0:\n            count+=1\n    return count\n    \ndef bin_search(arr,val):\n    '''\n    Write a python function to search a given list for a given number.\n    '''\n    l,r=0,len(arr)-1\n    while l<=r:\n        m=(l+r)//2\n        if arr[m]<val:\n            l=m+1\n        else:\n            r=m-1\n    return l\n    \ndef quad_search(arr,val):\n    '''\n    Write a python function to search a given list for a given number.\n    '''\n    l,r=0,len(arr)-1\n    while l<=r:\n        mid=l+(r-l)//2\n        if arr[mid]<val:\n            l=mid+1\n        else:\n            r=mid-1\n    return l\n    \ndef quick_sort(li):\n    '''\n    Write a python function to sort a given list.\n    '''\n    if len(li)<=1:\n        return li\n    p=li[0]\n    l=0\n    r=len(li)-1\n    while l<=r:\n        m=bin_search(li,p)\n        if li[m]<p:\n            li[m],p=p,li[m]\n            l+=1\n        else:\n            r=m-1\n    li[0],li[r]=li[r],li[0]\n    return li\n    \ndef radix_sort(li):\n    '''\n    Write a python function to sort a given list using a given number of buckets.\n    '''\n    if len(li)<=1:\n        return li\n    def count_digits(num):\n        num=str(num)\n        sum=0\n        for i in range(len(num)):\n            sum+=int(num[i])\n        return sum\n    for i in range(len(li)):\n        max_number=li[i]\n        max_digit=0\n        for j in range(len(str(max_number))):\n            if count_digits(max_number)>max_digit:\n                max_digit=count_digits(max_number)\n        #print(max_digit)\n        if max_digit<10:\n            li[i]=li[i]\n        else:\n            for j in range(max_digit-1,-1,-1):\n                if count_digits(max_number)>j:\n                    li[i]=max_number\n                    break\n    return li\n    \ndef merge(li):\n    '''\n    Write a python function to merge two lists into one.\n    '''\n    li1=[]\n    li2=[]\n    for i in range(len(li)):\n        if li[i]!=None:\n            li1.append(li[i])\n    for i in range(len(li)):\n        if li[i]!=None:\n            li2.append(li[i])\n    for i in range(len(li1)):\n        if li1[i]!=None:\n            li1[i]=li1[i]+li2[i]\n    for i in range(len(li)):\n        li[i]=li1[i]\n    return li\n    \ndef mod_find(li):\n    '''\n    Write a python function to find the modular representation of a given number.\n    '''\n    mod=[]\n    for i in range(len(li)):\n        if li[i]%2==0:\n            mod.append(li[i])\n    for i in range(len(mod)):\n        mod[i]=mod[i]*2\n    return mod\n    \ndef list_join(li):\n    '''\n    Write a python function to join a list into a given string.\n    '''\n    new_str=''\n    for i in range(len(li)):\n        new_str+=str(li[i])\n        if i!=len(li)-1:\n            new_str+=', '\n    retur"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1.sort()\n    li2.sort()\n    diff = 0\n    #for i in range(len(li1)):\n        #if li1[i]!= li2[i]:\n            #diff += 1\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list1 = list(li1)\n    list2 = list(li2)\n    result = 0\n    for x in range(len(list1)):\n        result += abs(list1[x] - list2[x])\n    return result\n    "
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n_even = 0\n    for i in range(n) : \n        if i%2 == 0 : \n            n_even = n_even + (n_even * 4)\n    return n_even"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(n, 0, -2):\n        sum += num**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n) : \n        sum += i ** 4\n    return sum\n    "
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum += i * i * i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    if n < 0 : \n        return 0\n    elif n % 2 == 0 : \n        return odd_num_sum(n-1)\n    elif n % 2 == 1 : \n        return odd_num_sum(n+1)\n    else : \n        return odd_num_sum(n//2) + odd_num_sum(n//4)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    # start with 1 and iterate throught the number of times\n    for i in range(1, n+1) :\n        # add 1 to the current value of i\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 2 : \n        return 0\n    elif n == 2 :\n        return 3\n    else :\n        x = n + 1\n        for i in range (3, int(n**0.5)+1, 2) :\n            if n%i == 0 :\n                return n**2\n        return n+1\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n > 2 :\n        odd_sum = 0\n        for i in range(1, n) :\n            if i % 2 == 1 :\n                odd_sum += n - i \n        return odd_sum\n    else : \n        return 0\n    \nn = int(input(\"Enter a number : \"))\nprint(odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        print (\"Input must be a positive integer.\")\n        return None \n    else: \n        x = 0\n        for x in range (0, n) : \n            if x % 2 == 1 : \n                x = x * 3 \n        return x \n        \n    \n    \ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of third power of first n even natural numbers.\n    '''\n    if n <= 0 : \n        print (\"Input must be a positive integer.\")\n        return None \n    else: \n        x = 0\n        for x in range (0, n) : \n            if x % 2 == 0 : \n                x = x * 3 \n        return x \n    \n    \n    \ndef third_power_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n third natural numbers.\n    '''\n    if n <= 0 : \n        print (\"Input must be a positive integer.\")\n        return None \n    else: \n        x = 0\n        for x in range (0, n) : \n            if x % 3 == 0 : \n                x = x * 4 \n        return x \n    \n    \n    \n    \ndef main() : \n    n = input (\"Enter a positive integer: \")\n    if n.isdigit() == False : \n        print (\"Only digits are allowed.\")\n        return None \n    else : \n        n = int (n)\n        if n < 0 : \n            print (\"Only positive integers are allowed.\")\n            return None \n        else : \n            print (\"Enter sum of all first n natural numbers: \")\n            sum = sum_n_sum(n)\n            print (sum)\n            print (\"Enter sum of all third natural numbers: \")\n            sum = sum_n_sum(n)\n            print (sum)\n            print (\"Enter sum of all fourth natural numbers: \")\n            sum = sum_n_sum(n)\n            print (sum)\n            \nmain()\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #Your code here\n    s = 0\n    for i in range(n,0,-2):\n        if(i%2 == 1):\n            s = s + pow(i,2)\n    return s\n    \n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2 == 0:\n        if exp[0] == '(' and exp[len(exp)-1] == ')':\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque()\n    queue.append(exp)\n    open_tokens = ['(', '[', '{', ')']\n    closed_tokens = [']', '}', ')']\n    operators = ['+', '-', '*', '/']\n    op_count = 0\n    token_list = []\n    while queue:\n        this_exp = queue.popleft()\n        if this_exp in open_tokens:\n            token_list.append(this_exp)\n        elif this_exp in closed_tokens:\n            if this_exp == '(' or this_exp == '[' or this_exp == '{':\n                if token_list == []:\n                    return False\n                elif this_exp == '(' or this_exp == '[':\n                    if op_count == 0:\n                        return False\n                    else:\n                        if this_exp == '(' or this_exp == '[' or this_exp == '{':\n                            op_count += 1\n                        else:\n                            op_count -= 1\n                        if op_count == 0:\n                            return False\n                else:\n                    if op_count == 0:\n                        return False\n                    else:\n                        if this_exp == '(' or this_exp == '[' or this_exp == '{':\n                            op_count += 1\n                        else:\n                            op_count -= 1\n                        if op_count == 0:\n                            return False\n            else:\n                if token_list == []:\n                    return False\n                elif this_exp == '(' or this_exp == '[':\n                    if op_count == 0:\n                        return False\n                    else:\n                        if this_exp == '(' or this_exp == '[':\n                            op_count += 1\n                        else:\n                            op_count -= 1\n                        if op_count == 0:\n                            return False\n                else:\n                    if op_count == 0:\n                        return False\n                    else:\n                        if this_exp == '(' or this_exp == '[' or this_exp == '{':\n                            op_count += 1\n                        else:\n                            op_count -= 1\n                        if op_count == 0:\n                            return False\n        else:\n            if this_exp == '(' or this_exp == '[':\n                if op_count == 0:\n                    return False\n                else:\n                    if this_exp == '(' or this_exp == '[':\n                        op_count += 1\n                    else:\n                        op_count -= 1\n                    if op_count == 0:\n                        return False\n            else:\n                if this_exp == '(' or this_exp == '[' or this_exp == '{':\n                    op_count += 1\n                else:\n                    op_count -= 1\n                if op_count == 0:\n                    return False\n    if token_list == []:\n        return True\n    elif this_exp == '(' or this_exp == '[':\n        if op_count == 0:\n            return False\n        else:\n            if this_exp == '(' or this_exp == '[' or this_exp == '{':\n                op_count += 1\n            else:\n                op_count -= 1\n            if op_count == 0:\n                return False\n    else:\n        if this_exp == '(' or this_exp == '[' or this_exp == '{':\n            op_count += 1\n        else:\n            op_count -= 1\n        if op_count == 0:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp_stack = deque(exp)\n    op = ['+','-','*','/','^']\n    exp_stack.reverse()\n    check = False\n    while(exp_stack and not check):\n        e = exp_stack.pop()\n        if e in op:\n            if e == '+':\n                check = check_plus(e)\n            elif e == '-':\n                check = check_minus(e)\n            elif e == '*':\n                check = check_multi(e)\n            elif e == '/':\n                check = check_div(e)\n            elif e == '^':\n                check = check_exp_parentheses(e)\n            else:\n                check = False\n        else:\n            check = False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    for c in exp:\n        if c in '(':\n            stack.append(c)\n        else:\n            if not stack:\n                return False\n            popped = stack.pop()\n            if popped!= c:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brackets = {'(': ')', '[': ']', '{': '}'}\n    open_brackets_count = 0\n    for char in exp:\n        if char in open_brackets.values():\n            open_brackets_count += 1\n        if open_brackets_count == 0 and char not in open_brackets:\n            return False\n        if char in open_brackets and open_brackets[char] == char:\n            open_brackets_count -= 1\n    return open_brackets_count == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    op = ['+', '-', '*', '/']\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=[]\n    queue=deque()\n    for i in range(len(exp)):\n        if exp[i]==\"(\":\n            queue.append(i)\n        elif exp[i]==\")\":\n            if len(queue)==0:\n                return False\n            elif exp[i-1]!=\"(\":\n                return False\n            else:\n                stack.pop()\n                queue.append(i)\n    if len(queue)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=deque([])\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            top=stack[len(stack)-1]\n            if top == '(':\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Fill in this method\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output = []\n    len_dict = {}\n    \n    for char in test_str:\n        if len(char) <= K:\n            output.append(char)\n        else:\n            if char in len_dict:\n                len_dict[char] += 1\n            else:\n                len_dict[char] = 1\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(test_str)\n    removed_words = []\n    for i in range(len(test_str) - K + 1):\n        if test_str[i : i + K] not in removed_words:\n            removed_words.append(test_str[i : i + K])\n    return \" \".join(removed_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    test_str_length = [len(i) for i in test_str]\n    remove = 0\n    for i in range(len(test_str_length)):\n        if test_str_length[i] <= K:\n            remove += 1\n    test_str_length.remove(remove)\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    assert(isinstance(test_str, str))\n    assert(isinstance(K, int))\n    assert(isinstance(K, int))\n    assert(isinstance(test_str, str))\n    assert(isinstance(test_str, str))\n    \n    word_list = list(test_str)\n    remove_list = []\n    \n    for i in range(len(word_list)):\n        for j in range(len(word_list)):\n            if word_list[i] == word_list[j]:\n                word_list[i] =''\n    \n    for i in range(len(word_list)):\n        if len(word_list[i])!= K:\n            remove_list.append(word_list[i])\n    \n    for i in range(len(remove_list)):\n        word_list.remove(remove_list[i])\n    \n    return ''.join(word_list)"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for word in test_str.split():\n        if len(word) == K:\n            new_str += word +''\n    return new_str.strip()\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    end_word = ''\n    word_list = []\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.split()[:-K]\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Code here\n    word_list = test_str.split(\" \")\n    for i in range(len(word_list)):\n        word_list[i] = word_list[i].strip()\n    word_list = [x for x in word_list if len(x) == K]\n    return \" \".join(word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) <= K:\n        return None\n    elif len(test_str) == K:\n        return test_str.replace(' ','')\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace(',', '')\n    pattern = pattern.replace(' ', '')\n    pattern = pattern.replace('\\'', '')\n    pattern = pattern.replace('\\n', '')\n    \n    if '{' not in pattern:\n        pattern = pattern.replace('{', '')\n    if '}' not in pattern:\n        pattern = pattern.replace('}', '')\n    \n    substrings = re.findall(pattern, text)\n    \n    return substrings\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all the occurrences in text\n    matches = re.finditer(pattern,text)\n    # find the first occurence\n    i = 0\n    while i < len(text):\n        if text[i:i+len(pattern)] == pattern:\n            # return i and len(pattern) as the position of the occurrence\n            return (i,len(pattern))\n        i += 1\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    assert isinstance(text,str), 'text must be a string.'\n    assert isinstance(pattern,str), 'pattern must be a string.'\n    assert isinstance(text,str), 'text must be a string.'\n    assert isinstance(pattern,str), 'pattern must be a string.'\n    \n    pattern_pattern = re.compile(pattern)\n    \n    # build a regular expression \n    regex = re.compile(pattern)\n    \n    # pattern matched\n    m = regex.search(text)\n    if m == None:\n        return None\n    # pattern matched \n    pos = m.start()\n    # start index of pattern matched\n    #print('start index: ', pos)\n    # end index of pattern matched\n    end = m.end()\n    # end of pattern matched\n    #print('end index: ', end)\n    # position of pattern matched\n    p = pos\n    # position of the matched sub-string\n    sub_pos = p\n    while end <= len(text):\n        # find the match\n        match = regex.search(text,pos,end)\n        # if match is found\n        if match:\n            #print(match)\n            # match.group()\n            #print(match.group())\n            pos = match.start()\n            sub_pos = pos\n            #print(pos)\n            #print(sub_pos)\n        # else:\n        #    sub_pos += 1\n        end = match.end()\n        # print('end: ', end)\n    # if no match\n    if sub_pos == -1:\n        return None\n    # end of match\n    #print('end of match: ', end)\n    # start position of matched sub-string\n    s = pos + 1\n    # end position of matched sub-string\n    e = end - 1\n    # print('s: ', s)\n    # print('e: ', e)\n    \n    # find the matched sub-string within the start index and end index\n    sub = text[s:e+1]\n    # print('sub: ', sub)\n    return sub\ndef solve_1(s):\n    '''\n    Given an input string s, return the longest palindromic substring\n    '''\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    \n    # build a regular expression \n    regex = re.compile(r'(.)\\1+')\n    \n    # pattern matched\n    m = regex.search(s)\n    if m == None:\n        return None\n    \n    # position of the pattern matched\n    pos = m.start()\n    # end position of pattern matched\n    end = m.end()\n    \n    # find the matched sub-string within the start index and end index\n    sub = s[pos:end+1]\n    #print('sub: ', sub)\n    # find the longest palindromic substring within the start index and end index\n    #if it is palindromic return the substring\n    max_len = 0\n    pal_sub = ''\n    for i in range(pos,end):\n        #print('sub: ', sub)\n        #print('i: ', i)\n        # find the longest palindromic substring within the start index and end index\n        m = occurance_substring(sub,s[i:i+2])\n        #print('m: ', m)\n        #if the substring is palindromic\n        if m!= None:\n            pal_sub = sub[:m]\n            #print('pal_sub: ', pal_sub)\n            # break\n            #print('pal_sub: ', pal_sub)\n            #print('pal_sub: ', pal_sub.lower())\n            #print('max_len: ', max_len)\n            #print('pos: ', pos)\n            #print('end: ', end)\n            return pal_sub\n        # else:\n        #    continue\n        # end of pattern matched\n        end = m.end()\n        #print('end: ', end)\n        # start position of matched sub-string\n        s = pos + 1\n        # end position of matched sub-string\n        e = end - 1\n        #print('s: ', s)\n        #print('e: ', e)\n    return None\ndef solve_2(s):\n    '''\n    Given an input string s, return the longest palindromic substring\n    '''\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    \n    # build a regular expression \n    regex = re.compile(r'(.)\\1+')\n    \n    # pattern matched\n    m = regex.search(s)\n    if m == None:\n        return None\n    \n    # position of the pattern matched\n    pos = m.start()\n    # end position of pattern matched\n    end = m.end()\n    \n    # find the matched sub-string within the start index and end index\n    sub = s[pos:end+1]\n    #print('sub: ', sub)\n    # find the longest palindromic substring within the start index and end index\n    max_len = 0\n    pal_sub = ''\n    for i in range(pos,end):\n        #print('sub: ', sub)\n        # find the longest palindromic substring within the start index and end index\n        m = occurance_substring(sub,s[i:i+2])\n        #print('m: ', m)\n        #if the substring is palindromic\n        if m!= None:\n            pal_sub = sub[:m]\n            #print('pal_sub: ', pal_sub)\n            # break\n            #print('pal_sub: ', pal_sub.lower())\n            #print('max_len: ', max_len)\n            #print('pos: ', pos)\n            #print('end: ', end)\n            return pal_sub\n        # else:\n        #    continue\n        # end of pattern matched\n        end = m.end()\n        #print('end: ', end)\n        # start position of matched sub-string\n        s = pos + 1\n        # end position of matched sub-string\n        e = end - 1\n        #print('s: ', s)\n        #print('e: ', e)\n    return None\ndef solve_3(s):\n    '''\n    Given an input string s, return the longest palindromic substring\n    '''\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    assert isinstance(s,str),'s must be a string.'\n    \n    # build a regular expression \n    regex = re.compile(r'(.)\\1+')\n    \n    # pattern matched\n    m = regex.search(s)\n    if m == None:\n        return None\n    \n    # position of the pattern matched\n    pos = m.start()\n    # end position of pattern matched\n    end = m.end()\n    \n    # find the matched sub-string within the start index and end index\n    sub = s[pos:end+1]\n    #print('sub: ', sub)\n    # find the longest palindromic substring within the start index and end index\n    max_len = 0\n    pal_sub = ''\n    for i in range(pos,end):\n        #print('sub: ', sub)\n        # find the longest palindromic substring within the start index and end index\n        m = occurance_substring(sub,s[i:i+2])\n        #print('m: ', m)\n        #if the substring is palindromic\n        if m!= None:\n            pal_sub = sub[:m]\n            #print('pal_sub: ', pal_sub)\n            # break\n            #print('pal_su"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    matcher = re.search(pattern,text)\n    if matcher is None:\n        return None\n    if matcher.start()>0:\n        #print(\"Bruh\")\n        return None,matcher.start()\n    if matcher.end()<len(text):\n        #print(\"Bruh\")\n        return None,matcher.end()\n    else:\n        #print(\"Good\")\n        return matcher.span()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Split the string into a list of words\n    text = text.split()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Iterate through the list of characters and find the start position of the match\n    for i in range(len(pattern)):\n        # Check if the pattern matches the text\n        if pattern[i] in text:\n            # Check if the index of the match is between the start and end positions\n            if i>0 and pattern[i-1]==pattern[i]:\n                # If not return the match\n                return None\n            else:\n                # Check if the index of the match is at the end of the string\n                if i+len(pattern)<len(text):\n                    # If not return the match\n                    return None\n                else:\n                    # If the index of the match is at the end of the string\n                    # Return the position and position of the match\n                    return i, i+len(pattern)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    str_pos = 0\n    str_match = re.findall(pattern, text)\n    for s in str_match:\n        if s not in text:\n            str_pos = text.index(s)\n            break\n    return str_pos\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    start_index = 0\n    end_index = len(text) - 1\n    found_index = -1\n    for i in range(len(pattern)):\n        if pattern[i] in text:\n            start_index = text.index(pattern[i])\n            if start_index == i:\n                found_index = i\n        else:\n            continue\n    if found_index == -1:\n        return\n    return found_index,start_index,end_index\ndef find_in_string(input_string,input_string_to_search):\n    '''\n    Write a function to find the positions where a substring appears within a string. Return None if there is no match.\n    '''\n    m = re.search(input_string_to_search,input_string)\n    if m == None:\n        return None\n    return m.start(),m.end()\ndef find_repeated_substring(input_string,input_string_to_search):\n    '''\n    Write a function to find the positions where a substring occurs more than once within a string. Return None if there is no match.\n    '''\n    m = re.search(input_string_to_search,input_string)\n    if m == None:\n        return None\n    return m.end()\ndef find_unique_substring(input_string,input_string_to_search):\n    '''\n    Write a function to find the unique occurrences of a substring within a string. Return None if there is no match.\n    '''\n    m = re.search(input_string_to_search,input_string)\n    if m == None:\n        return None\n    return m.end()\ndef main():\n    print(\"Find the Occurence Substring\")\n    print(\"A. Search for a substring \\nB. Find the positions where a substring occurs\")\n    print(\"C. Find the unique occurrences of a substring \\nD. Find the number of occurrences of a substring\")\n    print(\"Example :\")\n    print(\"A. A A is repeated 4 times, 5 times, 6 times, 4 times and 3 times\")\n    print(\"B. A occurs when the substring is A and 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 3\")\n    print(\"Example\")\n    print(\"A. A A occurs 3 times\")\n    print(\"B. A occurs 5 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 3\")\n    print(\"Example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 3 times\")\n    print(\"B. A occurs 5 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")\n    print(\"example\")\n    print(\"A. A occurs 5 times\")\n    print(\"B. A occurs 6 times\")\n    print(\"C. The number of occurrences of A occurs is 3\")\n    print(\"D. 6\")"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length = len(pattern)\n    for i in range(len(text)-(pattern_length+1)):\n        if pattern[:pattern_length] in text[i:(i+pattern_length)]:\n            if i!= (len(text)-(pattern_length+1)):\n                if text[i:i+pattern_length] == pattern:\n                    return [i,i+pattern_length]\n            else:\n                if text[i:i+pattern_length] == pattern:\n                    return [i,i+pattern_length]\n    return None\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            odd.append(nums[i])\n    print(odd)\n    print(nums)\n    return len(odd)==0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = 0\n    for i in range(len(nums)):\n        if nums[i % len(nums)] % 2!= 0:\n            odds += 1\n    return odds\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # return True if every index has odd numbers\n    \n    if len(nums) % 2 == 0:\n        # return True if the list has even length\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # create an empty array\n    odd_array = []\n    # iterate through the given list\n    for number in nums:\n        # if the odd index contains odd numbers\n        if number % 2!= 0:\n            # add it to the empty array\n            odd_array.append(number)\n    # return the array\n    return odd_array"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    index_of_odd = [i for i in range(len(nums)) if i % 2!= 0]\n    odd_position = 0\n    for i in index_of_odd:\n        if nums[i] % 2 == 0:\n            odd_position += 1\n    return odd_position\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == []:\n        return False\n    return odd_index(nums, 0, len(nums) - 1)\n    \ndef even_index(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == []:\n        return False\n    return even_index(nums, 0, len(nums) - 1)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    l = []\n    cnt = 0\n    # input - string\n    for i in test_str:\n        if i.lower() in 'aeiou':\n            l.append(i)\n    # do count\n    for i in l:\n        if i.lower() in 'aeiou':\n            cnt += 1\n    # return count\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    num_vowels = 0\n    for char in test_str:\n        if char in vowels:\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # your code goes here\n    vowels = ['A','E','I','O','U']\n    num_vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(0, len(test_str)):\n        for j in range(i, len(test_str)):\n            if test_str[i] == test_str[j] and test_str[i] not in ('a', 'e', 'i', 'o', 'u'):\n                count += 1\n    return count\n    \ntest_str = 'abca'\ncount_vowels(test_str"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Create the count variable\n    count = 0\n    \n    # Loop through each letter in the string\n    for char in test_str:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                count += 1\n        # Check if the letter is a vowel\n        if char.lower() in \"aeiou\":\n            count += 1\n        # Check if the letter is a consonant\n        else:\n            count += 0\n    # Return the count\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # build the map of vowels\n    vowels_map = build_vowels_map(test_str)\n    # initialize counter\n    vowels_counter = 0\n    # iterate over each char\n    for char in test_str:\n        # if char is in the map, increment count\n        if char in vowels_map:\n            vowels_counter += 1\n    return vowels_counter\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    \n    for letter in test_str:\n        if letter in \"aeiou\":\n            if letter.lower() in \"aeiou\":\n                count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return sum(list(count.values()))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    n = len(arr)\n    sum = 0\n    \n    for i in range(0, n):\n        if arr[i]!= arr[i]:\n            sum = sum + arr[i]\n            \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s=set()\n    n=len(arr)\n    if n==0:\n        return 0\n    for i in range(n):\n        if arr[i] not in s:\n            s.add(arr[i])\n    return sum(s)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for item in arr:\n        if arr.count(item)>1:\n            total += item\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    newlist=[]\n    for i in arr:\n        if i not in newlist:\n            newlist.append(i)\n    return(sum(newlist))\n    #print(sum(newlist))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # your code goes here\n    l = []\n    for i in range(len(arr)):\n        if(arr[i] not in l):\n            l.append(arr[i])\n    return sum(l)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!=arr[i] and arr[i]!=0:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x)>1]) \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    for i in range(len(arr)): \n        if arr[i] == 0: \n            arr[i] = 0\n        else: \n            arr[i] = arr[i] + arr[i] \n    return sum(arr) \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list1[0:1]+[list1[0]]+list1[1:]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(set(list1))\n    #l = []\n    #for i in range(0, len(list1)):\n    #    if list1[i] not in l:\n    #        l.append(list1[i])\n    #return l\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # [1, 1, 2, 3, 3, 3]\n    list1.sort()\n    # [1, 2, 3, 3, 3, 4]\n    list2 = []\n    # for i, el in enumerate(list1):\n    #     if list1[i] == list1[i+1]:\n    #         list2.append(list1[i])\n    #     else:\n    #         list2.append(list1[i])\n    #         list1[i+1] = list1[i]\n    #     if i!= len(list1)-1:\n    #         list1[i+1] = list1[i+1] + list1[i]\n    # return list2\n    return [list1[i] for i in range(len(list1)) if list1[i] not in list1[i+1:]]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_copy = list1.copy()\n    i = 0\n    while i < len(list1_copy):\n        if list1_copy[i] == list1_copy[i-1] and i < len(list1):\n            list1_copy[i], list1_copy[i-1] = list1_copy[i-1], list1_copy[i]\n            i += 1\n        else:\n            i += 1\n    return list1_copy\n    \n    \ndef find_positions(list1):\n    '''\n    Write a function to find the positions of duplicates of a given list elements.\n    '''\n    return [index for index, x in enumerate(list1) if x == list1[index] and x!= list1[index-1]]\n    \n    \ndef pair_stretch_list(list1):\n    '''\n    Write a function to stretch list elements by the smallest and greatest element.\n    '''\n    return [list1[i] + list1[i+1] for i in range(len(list1)-1) if list1[i] + list1[i+1] == list1[i+1]][0]\n    \n    \ndef is_subsequence(list1, list2):\n    '''\n    Write a function to test if a given list of integers is subsequence of another given list of integers.\n    '''\n    return [x in list1 for x in list2]\n    \n    \ndef count_subsequences(list1, list2):\n    '''\n    Write a function to count the number of sublists such that the contents of the sublists are consecutive.\n    '''\n    return len([x for x in groupby(list2)])\n    \n    \ndef is_valid_string(s):\n    '''\n    Write a function to test if a given string is a valid string.\n    '''\n    return not any(not any(c.isdigit() for c in i) for i in s) and len(s) == len(set(s))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    index=0\n    for item in list1:\n        if index==0:\n            new_list=[]\n            new_list.append(item)\n        elif index==len(list1)-1:\n            new_list.append(item)\n        else:\n            if list1[index+1]==item:\n                new_list.append(item)\n            else:\n                new_list.append(list1[index+1])\n        index+=1\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) <= 1:\n        return list1\n    if len(list1) > 2:\n        return []\n    elif len(list1) == 2:\n        return [list1[:1]] + [list1[1:]]\n    return []\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_length = len(list1)\n    list_grouped = list(groupby(list1))\n    final_list = []\n    for key, group in list_grouped:\n        if len(group) > 1:\n            final_list.append(group)\n        else:\n            final_list.append(group)\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #Might want to use a library?\n    #Functions for this problem:\n    #1. count_occurances(list1)\n    #2. reverse_and_count(list1)\n    #3. find_repeat_elements(list1)\n    \n    if list1 == []:\n        return []\n    count_occurances = {}\n    repeat_elements = []\n    for element in list1:\n        if element not in count_occurances:\n            count_occurances[element] = 1\n        else:\n            count_occurances[element] += 1\n    #loop through the dictionary and pull out the item with the maximum number of times its occurrences is 1\n    #then add it to the group of repeat elements\n    for k,v in count_occurances.items():\n        if v == 1:\n            repeat_elements.append(k)\n    return repeat_elements\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) > 1:\n        # For iterating through the list and comparing each element in the list\n        # with the next element in the list\n        for i in range(len(list1)-1):\n            # If the previous element is equal to the next element, we'll store this element as a sublist\n            # and we'll store the first element as a sublist\n            # If the current element is not equal to the next element, we'll store this element in the next sublist and set the previous element to the current element\n            if list1[i] == list1[i+1]:\n                for k in range(len(list1)-i):\n                    list1[k] = list1[k+1]\n                    list1[k+1] = list1[k]\n                list1[-1] = list1[-2]\n                list1[-2] = list1[-1]\n            # If the current element is not equal to the next element, we'll store this element as a sublist\n            # and we'll store the first element as a sublist\n            elif list1[i]!= list1[i+1]:\n                list1[-1] = list1[-2]\n                list1[-2] = list1[-1]\n                for k in range(len(list1)-i):\n                    list1[k] = list1[k+1]\n                    list1[k+1] = list1[k]\n                list1[-1] = list1[-2]\n                list1[-2] = list1[-1]\n            # If the current element is equal to the next element, we'll set the previous element to the current element\n            elif list1[i] == list1[i+1]:\n                list1[-1] = list1[-2]\n                list1[-2] = list1[-1]\n        return list1\n    return list1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = {}\n    for i in range(0,len(list1)):\n        if list1[i] in counter:\n            counter[list1[i]] += 1\n        else:\n            counter[list1[i]] = 1\n    return counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = dict()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in list(d.keys()):\n                d[list1[i][j]]+=1\n            else:\n                d[list1[i][j]]=1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for x in list1:\n        for y in list1:\n            if x!= y and x in dict1:\n                dict1[x] += 1\n            else:\n                dict1[x] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    a={}\n    for x in range(len(list1)):\n        for y in list1[x]:\n            a[y]=a.get(y,0)+1\n    return a\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in list1:\n        i = tuple(i)\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    return dict\n    \ndef delete_word_from_dict(dict, word):\n    '''\n    Given a dictionary and a word, return a new dictionary with the word removed from it. The word will only be there if it is not present in the dictionary.\n    '''\n    for key, value in dict.items():\n        if word in key:\n            dict[key] = value - 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for item in list1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists = {}\n    for i in range(0,len(list1)):\n        list2 = []\n        for j in range(0,len(list1)):\n            if list1[j] not in list2:\n                list2.append(list1[j])\n        unique_sublists[tuple(list2)] = len(list2)\n    return unique_sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        if list1[i] not in count.keys():\n            count[list1[i]] = 1\n        else:\n            count[list1[i]] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    tuple_count = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            tuple_count[tuple(list1[i][j])] = list1[i].count(list1[i][j])\n    return tuple_count\n    \n    \nlist1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combos = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combos.append(list(test_list[i] + test_list[j]))\n    return combos\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in test_list:\n        for j in i:\n            sums.append(j)\n    return set(combinations(sums, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = 0\n    for value in test_list:\n        total += value\n    return combinations(test_list, total)\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    l=[]\n    for i in test_list:\n        l.append(tuple(i))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations3(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations4(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations5(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations6(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations7(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations8(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations9(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations10(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations11(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations12(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations13(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations14(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations15(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations16(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            comb_list.append(j)\n    return comb_list\ndef find_combinations17(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list_of_tuples = []\n    test_list_of_sum = []\n    test_list_of_sum_others = []\n    for i in range(len(test_list)):\n        test_list_of_tuples.append(test_list[i] + test_list[i+1])\n        test_list_of_sum.append(test_list[i]+test_list[i+1])\n        test_list_of_sum_others.append(test_list[i]+test_list[i+1] + test_list[i+2])\n    test_list_of_sum.sort()\n    test_list_of_sum_others.sort()\n    return(list(combinations(test_list_of_tuples, 2)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(test_list)\n    test_list.sort()\n    comb_set = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            print(test_list[i], test_list[j])\n            comb_set.append(test_list[i] + test_list[j])\n    return comb_set\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == []:\n        return [[]]\n    \n    if len(test_list) <= 2:\n        return [[]]\n    else:\n        return [list(x) for x in combinations(test_list, 2)]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    result = []\n    for tup in test_list:\n        for i in range(len(tup)-1):\n            for j in range(i+1,len(tup)):\n                sum = tup[i] + tup[j]\n                if sum in tup:\n                    result.append((tup[i],tup[j],sum))\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            count += 1\n            if count % 2 == 0 :\n                return \"No\"\n            else :\n                return \"Yes\"\n    return \"Yes\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            divisors += 2\n            if divisors > n / i : \n                divisors = n / i \n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate number of divisors\n    divs = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if (n % i == 0) :\n            divs += 1\n    return divs\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if n % i == 0 :\n            count = count + 1\n    return count == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n % 2 == 0) : \n        return \"even\"\n    else : \n        return \"odd\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [1,n]\n    for i in range(2,int(math.sqrt(n)) + 1) :\n        if (n % i == 0) :\n            if (n // i == i) :\n                divisors.append(i)\n            else :\n                divisors.append(n//i)\n    return (len(divisors))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if ( n % i == 0 ) : \n            count += 1\n    if count == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [] \n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            divisors.append(i) \n    if len(divisors) == 2 : \n        return '%d is an even number' %n \n    else : \n        return '%d is not even' %n \n        \ndef sum_of_even_divisors(n) : \n    '''\n    Return sum of even numbers from a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\n    '''\n    sum = 0 \n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            sum += i \n    if sum == 0 : \n        return \"0 is a prime number\"\n    else : \n        return \"{} is a prime number\".format(sum)\n    \ndef factorial(n) : \n    '''\n    Return factorial of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-6.php\n    '''\n    factorial = 1\n    for i in range(1, n+1) : \n        factorial = factorial * i \n    return factorial\n    \ndef prime_factor(n) : \n    '''\n    Return number of prime factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-7.php\n    '''\n    prime = [] \n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            prime.append(i) \n    if len(prime) == 2 : \n        return \"0 is a prime number\"\n    else : \n        return \"{} is a prime number\".format(prime)\n    \ndef is_prime(n) : \n    '''\n    Check if a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-8.php\n    '''\n    if n == 1 or n == 0 : \n        return '%d is not a prime number' %n \n    elif n == 2 : \n        return '%d is a prime number' %n \n    else : \n        if n % 2 == 0 : \n            return '%d is not a prime number' %n \n        else : \n            return '%d is a prime number' %n \n        \ndef is_palindrome(n) : \n    '''\n    Check if a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-9.php\n    '''\n    if n =='' or n == '.' : \n        return \"0 is a palindrome number\"\n    elif n == '!' or n == '?' : \n        return \"0 is not a palindrome number\"\n    elif n == '+' or n == '-' or n == '*' or n == '/' or n == '^' or n == '=' or n == '<' or n == '>' or n == '>=' : \n        return \"0 is not a palindrome number\"\n    else : \n        return '%s is not a palindrome number' %n \n        \ndef is_square(n) : \n    '''\n    Check if a number is square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-10.php\n    '''\n    if n =='' or n == '.' : \n        return \"0 is a square number\"\n    elif n == '!' or n == '?' : \n        return \"0 is not a square number\"\n    elif n == '+' or n == '-' or n == '*' or n == '/' or n == '^' or n == '=' or n == '<' or n == '>' or n == '>=' : \n        return \"0 is not a square number\"\n    else : \n        return '%s is not a square number' %n \n        \ndef is_in_bounds(x, y) : \n    '''\n    Check if a point is in bounds. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-11.php\n    '''\n    if x < 0 or x > 1000 or y < 0 or y > 1000 : \n        return \"x or y is outside the bounds\"\n    else : \n        return '%d and %d is not in bounds' %(x, y) \n        \ndef is_valid(x, y, n) : \n    '''\n    Check if a point is valid. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-12.php\n    '''\n    if x < 0 or x > 1000 or y < 0 or y > 1000 : \n        return \"x or y is outside the bounds\"\n    elif n < 0 or n > 1000 : \n        return \"n is out of bounds\"\n    else : \n        return '%d and %d are not valid' %(x, y) \n        \ndef is_valid2(x, y, n) : \n    '''\n    Check if a point is valid. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-13.php\n    '''\n    if x < 0 or x > 1000 or y < 0 or y > 1000 : \n        return \"x or y is outside the bounds\"\n    elif n < 0 or n > 1000 : \n        return \"n is out of bounds\"\n    else : \n        return '%d and %d are not valid' %(x, y) \n        \ndef is_valid3(x, y, n) : \n    '''\n    Check if a point is valid. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-14.php\n    '''\n    if x < 0 or x > 1000 or y < 0 or y > 1000 : \n        return \"x or y is outside the bounds\"\n    elif n < 0 or n > 1000 : \n        return \"n is out of bounds\"\n    else : \n        return '%d and %d are not valid' %(x, y) \n        \ndef is_divisible(n) : \n    '''\n    Check if a number is divisible or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\n    '''\n    if n == 0 : \n        return \"0 is a divisible number\"\n    elif n % 2 == 0 : \n        return \"0 is an even number\"\n    elif n % 3 == 0 : \n        return \"0 is an odd number\"\n    elif n % 5 == 0 : \n        return \"0 is an odd number\"\n    elif n % 7 == 0 : \n        return \"0 is an odd number\"\n    else : \n        return '%d is not divisible' %n \n        \ndef is_prime(n) : \n    '''\n    Check if a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\n    '''\n    if n == 0 : \n        return \"0 is a prime number\"\n    elif n % 2 == 0 : \n        return \"0 is not a prime number\"\n    elif n % 3 == 0 : \n        return \"0 is not a prime number\"\n    elif n % 5 == 0 : \n        return \"0 is not a prime number\"\n    elif n % 7 == 0 : \n        return \"0 is not a prime number\"\n    else : \n        return '%"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if( n % 2 == 0 ) : \n        return print( n, \"is an even number.\")\n    elif( n > 1 ) : \n        for i in range(3, int(math.sqrt(n)) + 1, 2) : \n            if(n % i == 0 ) : \n                return print( n, \"is an even number.\")\n        else : \n            return print( n, \"is an odd number.\")\n    else : \n        return print( n, \"is an even number.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 :\n        return False\n    divisors = 1\n    while (n % divisors!= 0) : \n        divisors += 1 \n        n = (n / divisors) \n    return divisors > 2\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    k = 0\n    for i in range(len(arr)):\n        if k == 0:\n            k = i\n        else:\n            if arr[k] % 2 == 0:\n                res += arr[k]\n            k += 1\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    else:\n        return sum(arr[0:len(arr)//2])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n    start, end = 0, 0\n    while end < len(arr):\n        while arr[start] % 2 == 0 and start < end:\n            start += 1\n        end += 1\n        if end - start > 2:\n            sum_of_odd_length_subarrays += (end - start)\n        if end - start > 1:\n            sum_of_odd_length_subarrays += (end - start) - 1\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Set the starting value as zero and iterate through each element in the array\n    #     Each iteration, add the value of the index it's in to the sum\n    #     Return the sum\n    total = 0\n    for x in range(0, len(arr), 2):\n        total += arr[x]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # O(n) time | O(1) space\n    sum_of_subarrays = 0\n    \n    # loop through arr\n    for i in range(0, len(arr)):\n        # if odd length subarrays, update sum\n        if (i % 2 == 1):\n            sum_of_subarrays += arr[i]\n        \n    return sum_of_subarrays\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # The length of the array\n    n = len(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    arr_size = len(arr)\n    for i in range(0,arr_size):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r / 255.0\n    G = g / 255.0\n    B = b / 255.0\n    #Convert color to hsv\n    #https://stackoverflow.com/questions/24617554/python-program-to-convert-rgb-color-to-hsv-color-for-video\n    #https://www.geeksforgeeks.org/convert-rgb-to-hsv-color-for-video/\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    if R > 1.0:\n        h = (1.0 - R)\n    else:\n        h = 1 - R\n    if G > 1.0:\n        s = (1.0 - G)\n    else:\n        s = 1 - G\n    if B > 1.0:\n        v = (1.0 - B)\n    else:\n        v = 1 - B\n    # convert hsv to hsv\n    h = h * 360\n    s = s * 100\n    v = v * 100\n    #if red < 0.5 and g < 0.5:\n    #    h = h * 0.7\n    #    s = s * 0.7\n    #    v = v * 0.7\n    #elif 0.5 <= red < 0.75:\n    #    h = h * 0.6\n    #    s = s * 0.6\n    #    v = v * 0.6\n    #elif 0.75 <= red < 1.0:\n    #    h = h * 0.5\n    #    s = s * 0.5\n    #    v = v * 0.5\n    #elif 1.0 <= red < 2.0:\n    #    h = h * 0.4\n    #    s = s * 0.4\n    #    v = v * 0.4\n    #elif 2.0 <= red < 3.0:\n    #    h = h * 0.3\n    #    s = s * 0.3\n    #    v = v * 0.3\n    #elif 3.0 <= red < 4.0:\n    #    h = h * 0.2\n    #    s = s * 0.2\n    #    v = v * 0.2\n    #elif 4.0 <= red < 5.0:\n    #    h = h * 0.1\n    #    s = s * 0.1\n    #    v = v * 0.1\n    #else:\n    #    h = h * 0.0\n    #    s = s * 0.0\n    #    v = v * 0.0\n    h = h * 360.0\n    s = s * 100.0\n    v = v * 100.0\n    #convert to rgb\n    #return H,S,V\n    return h, s, v\n    # return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = (r+g+b)/3\n    delta_b = c*(180/255)\n    delta_g = 255 - c*(180/255)\n    delta_r = c*(180/255)\n    h = 0\n    \n    if delta_r > 0:\n        h = (delta_r / delta_b) * (180/delta_g)\n    elif delta_r == 0:\n        h = (delta_g) / delta_b\n    elif delta_g > 0:\n        h = (delta_g / delta_b) * (180/delta_r)\n    else:\n        h = (delta_b / delta_r) * (180/delta_g)\n    \n    if h >= 1:\n        h = 1\n        s = 0\n    elif h < 0:\n        h = -1\n        s = 0\n    else:\n        s = 0.5 * h * (1 - abs(h))\n        \n    h = h * (1 - abs(s))\n    \n    return h, s, c\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Note: If color is red, get the color from the r,g,b value\n    r = int(r * 255)\n    g = int(g * 255)\n    b = int(b * 255)\n    # get the hsv\n    h,s,v = rgb_to_hsv(r,g,b)\n    # get the required hue angle\n    # 255 to 0 (0 is transparent)\n    a = (1.0 - (h + 2.0) / 360.0) * (1.0 - s) + (h + 2.0) / 360.0\n    # 0.0 to 1.0\n    return round(a * 255.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_in_min = min(r, 255)\n    r_in_max = max(r, 0)\n    g_in_min = min(g, 255)\n    g_in_max = max(g, 0)\n    b_in_min = min(b, 255)\n    b_in_max = max(b, 0)\n    r_in = int((r_in_min + r_in_max)/2)\n    g_in = int((g_in_min + g_in_max)/2)\n    b_in = int((b_in_min + b_in_max)/2)\n    hue = int(b_in/b_in_max*(360) - b_in/g_in_max*(360))\n    saturation = int((b_in_max + b_in_min)/(b_in_max+b_in_min))\n    value = int((r_in_max + r_in_min)/(r_in_max+r_in_min) + (g_in_max + g_in_min)/(g_in_max+g_in_min) + (b_in_max + b_in_min)/(b_in_max+b_in_min))\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0.299\n    s = 0.587\n    v = 0.114\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    red = r\n    green = g\n    blue = b\n    # color = [red, green, blue]\n    # h, s, v = np.zeros(3), np.zeros(3), np.zeros(3)\n    # h, s, v = np.zeros(3), np.zeros(3), np.zeros(3)\n    # h[0] = (red + green + blue) // 3\n    # s[0] = (red - green + blue) // 3\n    # v[0] = (red - s[0]) // 2\n    # h[1] = (green - blue + red) // 3\n    # s[1] = (green - blue + red) // 3\n    # v[1] = (green - s[1]) // 2\n    # h[2] = (blue - red + green) // 3\n    # s[2] = (blue - red + green) // 3\n    # v[2] = (blue - s[2]) // 2\n    h = 0\n    s = 0\n    v = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    x = int(r)\n    y = int(g)\n    z = int(b)\n    if x > 255 or y > 255 or z > 255:\n        print('Color value out of range')\n        return\n    try:\n        r_h = x / 255.0\n        g_h = y / 255.0\n        b_h = z / 255.0\n        r_h, g_h, b_h = r_h * 360, g_h * 360, b_h * 360\n        r_h = int(r_h)\n        g_h = int(g_h)\n        b_h = int(b_h)\n    except ZeroDivisionError as e:\n        print('Division by zero error:', e)\n        return\n    max_r, max_g, max_b = max(r_h, g_h, b_h), max(0, r_h, g_h), max(0, b_h, g_h)\n    min_r, min_g, min_b = min(r_h, g_h, b_h), min(0, r_h, g_h), min(0, b_h, g_h)\n    min_r, min_g, min_b = min(min_r, min_g, min_b), min(0, min_r, min_g), min(0, 0, min_b)\n    max_r, max_g, max_b = max(max_r, max_g, max_b), max(0, max_r, max_g), max(0, 0, max_b)\n    hsv_hue = max_r + (min_r - max_r) * (max_g - min_g) / max_r\n    hsv_saturation = max_g + (min_g - max_g) * (max_b - min_b) / max_g\n    hsv_value = max_b + (min_b - max_b) * (max_r - min_r) / max_b\n    return hsv_hue, hsv_saturation, hsv_value\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    try:\n        R = r / 255\n        G = g / 255\n        B = b / 255\n    except:\n        R = 0.0\n        G = 0.0\n        B = 0.0\n    h, s, v = 0.0, 0.0, 0.0\n    # h, s, v = r, g, b\n    if R > 0.0 and G > 0.0 and B > 0.0:\n        h = 1.0 / (1 + abs(0.00390625 * R) + abs(0.0078125 * G) + abs(0.00390625 * B))\n        s = 0.229 * R + 0.356 * G + 0.168 * B\n        v = 0.55 * R + 0.621 * G + 0.112 * B\n    if h > 1.0:\n        h = 1.0\n    if s > 1.0:\n        s = 1.0\n    if v > 1.0:\n        v = 1.0\n    if h < 0.0:\n        h = 0.0\n    if s < 0.0:\n        s = 0.0\n    if v < 0.0:\n        v = 0.0\n    if h < 0.0:\n        h = 0.0\n    if s < 0.0:\n        s = 0.0\n    if v < 0.0:\n        v = 0.0\n    h = h * 6.283185307179586\n    s = s * 6.283185307179586\n    v = v * 6.283185307179586\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n    import colorsys\n    #convert rgb to hsv\n    r=int(r)\n    g=int(g)\n    b=int(b)\n    #calculate hue\n    hue=0.299*r + 0.59*g + 0.11*b\n    #calculate saturation\n    saturation=0.6*r + 0.21*g + 0.5*b\n    #calculate value\n    v=0.33*r + 0.71*g + 0.11*b\n    #convert to hsv\n    h=int(hue)\n    s=int(saturation)\n    v=int(v)\n    h=int(h)\n    s=int(s)\n    #calculate output\n    if h==0:\n        h=0.6*r + 0.5*g + 0.21*b\n    elif h<0:\n        h=0.5*r + 0.41*g + 0.6*b\n    elif h>=0 and h<=1:\n        h=0.4*r + 0.39*g + 0.58*b\n    elif h>=1 and h<=1.5:\n        h=0.3*r + 0.28*g + 0.69*b\n    elif h>=1.5 and h<=2:\n        h=0.28*r + 0.66*g + 0.2*b\n    elif h>=2 and h<=2.5:\n        h=0.22*r + 0.45*g + 0.54*b\n    elif h>=2.5 and h<=3:\n        h=0.24*r + 0.4*g + 0.68*b\n    elif h>=3 and h<=3.5:\n        h=0.23*r + 0.35*g + 0.9*b\n    elif h>=3.5 and h<=4:\n        h=0.21*r + 0.4*g + 0.8*b\n    else:\n        h=0.25*r + 0.3*g + 0.7*b\n    if s==0:\n        s=0.6*r + 0.5*g + 0.21*b\n    elif s<0:\n        s=0.5*r + 0.41*g + 0.6*b\n    elif s>=0 and s<=1:\n        s=0.4*r + 0.39*g + 0.58*b\n    elif s>=1 and s<=1.5:\n        s=0.3*r + 0.28*g + 0.69*b\n    elif s>=1.5 and s<=2:\n        s=0.28*r + 0.66*g + 0.2*b\n    elif s>=2 and s<=2.5:\n        s=0.22*r + 0.45*g + 0.54*b\n    elif s>=2.5 and s<=3:\n        s=0.24*r + 0.4*g + 0.68*b\n    elif s>=3 and s<=3.5:\n        s=0.23*r + 0.35*g + 0.9*b\n    elif s>=3.5 and s<=4:\n        s=0.21*r + 0.4*g + 0.8*b\n    else:\n        s=0.25*r + 0.3*g + 0.7*b\n    return colorsys.hsv_to_rgb(h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    #return (\n    #    r,\n    #    g,\n    #    b,\n    #    0.5*(max(r, g, b) + min(r, g, b)),\n    #    0.5*(max(r, g, b) + min(r, g, b))\n    #    )\n    #return (\n    #    0.5*(max(r, g, b) + min(r, g, b))\n    #    )\n    #return (\n    #    max(r, g, b),\n    #    0.5*(max(r, g, b) + min(r, g, b)),\n    #    0.5*(max(r, g, b) + min(r, g, b))\n    #    )\n    return (\n        0.5*(max(r, g, b) + min(r, g, b)),\n        0.5*(max(r, g, b) + min(r, g, b))\n        )\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0]*list1[0]\n    else:\n        if list1[0] % 2 == 0:\n            return mul_even_odd(list1[1:])\n        else:\n            return mul_even_odd(list1[1:])*list1[0]\n    \ndef is_palindrome(list):\n    '''\n    Write a function to check if a list is palindrome. \n    '''\n    for i in range(len(list)//2):\n        if list[i]!= list[len(list)-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum=0\n    for i in list1:\n        if i%2==0:\n            sum+=i\n        else:\n            sum*=i\n    return sum\ndef product_sum(list1):\n    '''\n    Write a function that takes a list of integers and returns the sum of those elements.\n    '''\n    sum=0\n    for i in list1:\n        sum+=i\n    return sum\ndef even_odd_list(list1):\n    '''\n    Write a function that takes a list of integers and returns the sum of those numbers that are divisible by 2 and are odd.\n    '''\n    sum=0\n    for i in list1:\n        if i%2==0 and i%4==0:\n            sum+=i\n    return sum\ndef even_odd_list_2(list1):\n    '''\n    Write a function that takes a list of integers and returns the sum of those numbers that are divisible by 2 and are odd.\n    '''\n    sum=0\n    for i in list1:\n        if i%2==0 and i%4!=0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    if len(list1)%2==0:\n        for i in range(0,len(list1),2):\n            prod=prod*list1[i]\n        return prod\n    else:\n        for i in range(0,len(list1),2):\n            prod=prod*list1[i]\n        return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            count = count + list1[i]\n        else:\n            count = count + list1[i]\n    return count\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for number in list1:\n        if number % 2 == 0:\n            product *= number\n        else:\n            product *= number\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # write your code here\n    product = 1\n    for i in list1:\n        if i%2==0:\n            product *= i\n        else:\n            product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 0\n    if len(list1) % 2 == 0:\n        for i in range(0, len(list1)):\n            product += list1[i] * list1[i]\n        print(product)\n    else:\n        for i in range(0, len(list1)):\n            product += list1[i] * list1[i]\n        print(product)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    if len(list1) % 2 == 0:\n        for i in range(len(list1)):\n            if i % 2 == 0:\n                even_sum += list1[i]\n            else:\n                odd_sum += list1[i]\n        return even_sum*odd_sum\n    else:\n        return None\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    i = 0\n    while (i < len(list1)):\n        if (list1[i] % 2 == 0):\n            prod *= list1[i]\n        else:\n            prod /= list1[i]\n        i += 1\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = list()\n    for i in list1:\n        if i%2 == 0:\n            even_odd.append(i)\n        else:\n            even_odd.append(i)\n    even_odd = len(even_odd)\n    if even_odd%2 == 0:\n        even_odd = len(even_odd)\n    else:\n        even_odd = len(even_odd)\n    print(f'The product of the first even number is: {even_odd}')\n    if even_odd%2 == 0:\n        even_odd = len(even_odd)\n    else:\n        even_odd = len(even_odd)\n    print(f'The product of the first odd number is: {even_odd}')\n    if even_odd%2 == 0:\n        even_odd = len(even_odd)\n    else:\n        even_odd = len(even_odd)\n    return even_odd\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def convert_tuple_to_int(tuple):\n        '''\n        Convert a tuple of strings to a tuple of integers.\n        '''\n        return tuple\n    return convert_tuple_to_int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    for i in range(len(test_list)):\n        test_list[i] = int(test_list[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res = []\n    for i in test_str:\n        res.append(int(i))\n    return tuple(res)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    integer_tuple = []\n    for item in test_str:\n        integer_tuple.append(int(item))\n    return tuple(integer_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #remove spaces\n    test_str = test_str.replace(\" \",\"\")\n    #if first part is 0\n    if test_str[0] == \"0\":\n        #second part is 0\n        if test_str[2] == \"0\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 1\n    elif test_str[0] == \"1\":\n        #second part is 0\n        if test_str[2] == \"1\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 2\n    elif test_str[0] == \"2\":\n        #second part is 0\n        if test_str[2] == \"2\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 3\n    elif test_str[0] == \"3\":\n        #second part is 0\n        if test_str[2] == \"3\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 4\n    elif test_str[0] == \"4\":\n        #second part is 0\n        if test_str[2] == \"4\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 5\n    elif test_str[0] == \"5\":\n        #second part is 0\n        if test_str[2] == \"5\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 6\n    elif test_str[0] == \"6\":\n        #second part is 0\n        if test_str[2] == \"6\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 7\n    elif test_str[0] == \"7\":\n        #second part is 0\n        if test_str[2] == \"7\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 8\n    elif test_str[0] == \"8\":\n        #second part is 0\n        if test_str[2] == \"8\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 9\n    elif test_str[0] == \"9\":\n        #second part is 0\n        if test_str[2] == \"9\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 10\n    elif test_str[0] == \"10\":\n        #second part is 0\n        if test_str[2] == \"10\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 11\n    elif test_str[0] == \"11\":\n        #second part is 0\n        if test_str[2] == \"11\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 12\n    elif test_str[0] == \"12\":\n        #second part is 0\n        if test_str[2] == \"12\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 13\n    elif test_str[0] == \"13\":\n        #second part is 0\n        if test_str[2] == \"13\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 14\n    elif test_str[0] == \"14\":\n        #second part is 0\n        if test_str[2] == \"14\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 15\n    elif test_str[0] == \"15\":\n        #second part is 0\n        if test_str[2] == \"15\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part is 0\n                        return test_str, 0\n    #if first part is 16\n    elif test_str[0] == \"16\":\n        #second part is 0\n        if test_str[2] == \"16\":\n            #third part is 0\n            if test_str[3] == \"0\":\n                #fourth part is 0\n                if test_str[4] == \"0\":\n                    #fifth part is 0\n                    if test_str[5] == \"0\":\n                        #sixth part i"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, tuple):\n        print('TypeError: Input is not a tuple.')\n        return None\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str is None:\n        return None\n    return tuple(map(int, test_str))\n    \ndef tuple_str_int_to_tuple(test_str):\n    '''\n    Write a function to convert string tuple to tuple.\n    '''\n    if test_str is None:\n        return None\n    return tuple(map(tuple_str_int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(lambda x: int(x), test_str.split('-')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    try:\n        return tuple(map(float, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    try:\n        return tuple(map(bool, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef dict_str_str(test_str):\n    '''\n    Write a function to convert dictionary string to dictionary.\n    '''\n    try:\n        return dict(map(str, test_str.split('-')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef dict_str_int(test_str):\n    '''\n    Write a function to convert dictionary string to dictionary.\n    '''\n    try:\n        return dict(map(int, test_str.split('-')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef dict_str_float(test_str):\n    '''\n    Write a function to convert dictionary string to dictionary.\n    '''\n    try:\n        return dict(map(float, test_str.split('-')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef dict_str_bool(test_str):\n    '''\n    Write a function to convert dictionary string to dictionary.\n    '''\n    try:\n        return dict(map(bool, test_str.split('-')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef dict_str_str(test_str):\n    '''\n    Write a function to convert dictionary string to dictionary.\n    '''\n    try:\n        return dict(map(str, test_str.split('-')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_int(test_str):\n    '''\n    Write a function to convert list string to integer tuple.\n    '''\n    try:\n        return list(map(int, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_float(test_str):\n    '''\n    Write a function to convert list string to float tuple.\n    '''\n    try:\n        return list(map(float, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_bool(test_str):\n    '''\n    Write a function to convert list string to boolean tuple.\n    '''\n    try:\n        return list(map(bool, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_str(test_str):\n    '''\n    Write a function to convert list string to string tuple.\n    '''\n    try:\n        return list(map(str, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_int(test_str):\n    '''\n    Write a function to convert list string to integer tuple.\n    '''\n    try:\n        return list(map(int, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_float(test_str):\n    '''\n    Write a function to convert list string to float tuple.\n    '''\n    try:\n        return list(map(float, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_bool(test_str):\n    '''\n    Write a function to convert list string to boolean tuple.\n    '''\n    try:\n        return list(map(bool, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_str(test_str):\n    '''\n    Write a function to convert list string to string tuple.\n    '''\n    try:\n        return list(map(str, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_int(test_str):\n    '''\n    Write a function to convert list string to integer tuple.\n    '''\n    try:\n        return list(map(int, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_float(test_str):\n    '''\n    Write a function to convert list string to float tuple.\n    '''\n    try:\n        return list(map(float, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_bool(test_str):\n    '''\n    Write a function to convert list string to boolean tuple.\n    '''\n    try:\n        return list(map(bool, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_str(test_str):\n    '''\n    Write a function to convert list string to string tuple.\n    '''\n    try:\n        return list(map(str, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_int_str(test_str):\n    '''\n    Write a function to convert list string to integer tuple.\n    '''\n    try:\n        return list(map(int, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_float_str(test_str):\n    '''\n    Write a function to convert list string to float tuple.\n    '''\n    try:\n        return list(map(float, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_bool_str(test_str):\n    '''\n    Write a function to convert list string to boolean tuple.\n    '''\n    try:\n        return list(map(bool, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_int(test_str):\n    '''\n    Write a function to convert list string to integer tuple.\n    '''\n    try:\n        return list(map(int, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_float(test_str):\n    '''\n    Write a function to convert list string to float tuple.\n    '''\n    try:\n        return list(map(float, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_bool(test_str):\n    '''\n    Write a function to convert list string to boolean tuple.\n    '''\n    try:\n        return list(map(bool, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_str(test_str):\n    '''\n    Write a function to convert list string to string tuple.\n    '''\n    try:\n        return list(map(str, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_int(test_str):\n    '''\n    Write a function to convert list string to integer tuple.\n    '''\n    try:\n        return list(map(int, test_str.split(',')))\n    except:\n        raise ValueError('Not a valid list of strings')\n        \ndef list_str_float(test"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l, r = 0, len(a) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if a[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a==None:\n        return None\n    \n    left = bisect.bisect_left(a, x)\n    if left==0:\n        return None\n    \n    # The current index is the right of the given value, so we can start at that index and at that index\n    # plus one.\n    right = bisect.bisect_right(a, x) - 1\n    \n    # Return the index, which is the last index before or equal to the given value, that is,\n    # the index of the rightmost index that is greater than or equal to the given value\n    return right\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # the same logic as binary search is used\n    # find the right position\n    i = bisect.bisect_right(a, x)\n    # if no insertion position found, return an empty list\n    if i==len(a):\n        return []\n    # if found insertion point, return it\n    if a[i-1]<=x:\n        return a[i-1]\n    # otherwise, insert x at position i-1\n    return a[i-1]+1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left_index = bisect.bisect_left(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[-1]:\n        return len(a)\n    for i in range(len(a) - 1, -1, -1):\n        if a[i] < x:\n            a.insert(i + 1, x)\n            return i + 1\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x in a:\n        i = a.index(x)\n        return len(a)-1-i\n    else:\n        return 0\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a,x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    i = bisect.bisect_right(a, x)\n    return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        return a.insert(i, x)\n    elif i == len(a):\n        return right_insertion(a, x)\n    else:\n        return a.insert(i, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # TODO: Implement the insertion algorithm, for example to locate\n    # the right insertion point for x in sorted order.\n    #\n    # TODO: If a value is already present, do not increment x.\n    #\n    # TODO: Return the index of the last item in the sorted array that is larger than\n    # x. Return -1 if the item is not present.\n    #\n    # If the array is empty, return 0.\n    #\n    # Note: The array is always sorted.\n    #\n    # NOTE: This is O(log n), since we are trying to scan the array in O(1) time\n    # and the worst case is that we iterate through the array twice, since the\n    # array is guaranteed to be sorted.\n    #\n    # Hint: If you're using linear search, you can't get the index of the\n    # last item in the array to be greater than the item you're looking for.\n    #\n    if a == -1:\n        return 0\n    if a >= x:\n        return a\n    last = a\n    j = a\n    for i in range(a, len(a)):\n        if a > i:\n            if a < a[i] + 1:\n                if a > a[i] + 1:\n                    return a[i]\n                else:\n                    a = a[i]\n                    j = i\n                    break\n            if a > a[i] + 1:\n                a = a[i]\n                j = i\n                break\n    return a[j]\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^[a-zA-z0-9_]{3,}'\n    return re.match(pattern, text)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an an followed by four 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{4,}'\n    return re.match(pattern, text)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an an followed by five 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{5,}'\n    return re.match(pattern, text)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an an followed by six 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{6,}'\n    return re.match(pattern, text)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an an followed by seven 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{7,}'\n    return re.match(pattern, text)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an an followed by eight 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{8,}'\n    return re.match(pattern, text)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an an followed by nine 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{9,}'\n    return re.match(pattern, text)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an an followed by ten 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{10,}'\n    return re.match(pattern, text)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an an followed by eleven 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{11,}'\n    return re.match(pattern, text)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an an followed by twelve 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{12,}'\n    return re.match(pattern, text)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an an followed by thirteen 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{13,}'\n    return re.match(pattern, text)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an an followed by fourteen 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{14,}'\n    return re.match(pattern, text)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an an followed by fifteen 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{15,}'\n    return re.match(pattern, text)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an an followed by sixteen 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{16,}'\n    return re.match(pattern, text)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an an followed by seventeen 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{17,}'\n    return re.match(pattern, text)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an an followed by eighteen 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{18,}'\n    return re.match(pattern, text)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an an followed by nineteen 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{19,}'\n    return re.match(pattern, text)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an an followed by twenty 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{20,}'\n    return re.match(pattern, text)\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an an followed by twenty-one 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{21,}'\n    return re.match(pattern, text)\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an an followed by twenty-two 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{22,}'\n    return re.match(pattern, text)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an an followed by thirty 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{30,}'\n    return re.match(pattern, text)\ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string that has an an followed by thirty-one 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{31,}'\n    return re.match(pattern, text)\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an an followed by forty 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{32,}'\n    return re.match(pattern, text)\ndef text_match_forty_one(text):\n    '''\n    Write a function that matches a string that has an an followed by forty-one 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{33,}'\n    return re.match(pattern, text)\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an an followed by fifty 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{50,}'\n    return re.match(pattern, text)\ndef text_match_fifty_one(text):\n    '''\n    Write a function that matches a string that has an an followed by fifty-one 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{51,}'\n    return re.match(pattern, text)\ndef text_match_hundred(text):\n    '''\n    Write a function that matches a string that has an an followed by hundred 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{100,}'\n    return re.match(pattern, text)\ndef text_match_hundred_one(text):\n    '''\n    Write a function that matches a string that has an an followed by hundred-one 'b'.\n    '''\n    pattern = r'[a-zA-z0-9_]{101,}'\n    return re.match(pattern, text)\ndef text_match_one_hundred(tex"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.match(r'(?i)^(a|b)(?:\\s\\w+)?$', text)\n    if m:\n        return m.group(1)\n    return None\ndef test():\n    print('All three text match:')\n    test_case = [\n        ('a b c', 'a b c'),\n        ('a b b b', 'a b b b'),\n        ('a b c b', 'a b c b'),\n    ]\n    for t in test_case:\n        print('{} -> {}'.format(t[0], text_match_three(t[0])))\n        print('{} -> {}'.format(t[1], text_match_three(t[1])))\n    print('\\n\\n')\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = 'a(?P<a>\\w+)\\b(?P<b>\\w+)\\b'\n    text = re.sub(regex,'',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2 or not text.startswith('a'): return False\n    elif len(text) > 1:\n        if not text.startswith('b'): return False\n        elif not text.startswith('a'): return False\n        else: return True\n    else: return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2 or not text.startswith('a'): return False\n    elif len(text) > 1:\n        if not text.startswith('b'): return False\n        elif not text.startswith('a'): return False\n        else: return True\n    else: return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2 or not text.startswith('a'): return False\n    elif len(text) > 1:\n        if not text.startswith('b'): return False\n        elif not text.startswith('a'): return False\n        else: return True\n    else: return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2 or not text.startswith('a'): return False\n    elif len(text) > 1:\n        if not text.startswith('b'): return False\n        elif not text.startswith('a'): return False\n        else: return True\n    else: return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2 or not text.startswith('a'): return False\n    elif len(text) > 1:\n        if not text.startswith('b'): return False\n        elif not text.startswith('a'): return False\n        else: return True\n    else: return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2 or not text.startswith('a'): return False\n    elif len(text) > 1:\n        if not text.startswith('b'): return False\n        elif not text.startswith('a'): return False\n        else: return True\n    else: return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2 or not text.startswith('a'): return False\n    elif len(text) > 1:\n        if not text.startswith('b'): return False\n        elif not text.startswith('a'): return False\n        else: return True\n    else: return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    my_regex = re.compile('a(b)?b?')\n    match = my_regex.search(text)\n    if match:\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a three followed by four 'c'.\n    '''\n    my_regex = re.compile('a(c)?c?')\n    match = my_regex.search(text)\n    if match:\n        return True\n    return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has three followed by five 'c'.\n    '''\n    my_regex = re.compile('a(c)?c?')\n    match = my_regex.search(text)\n    if match:\n        return True\n    return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has three followed by six 'c'.\n    '''\n    my_regex = re.compile('a(c)?c?')\n    match = my_regex.search(text)\n    if match:\n        return True\n    return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has three followed by seven 'c'.\n    '''\n    my_regex = re.compile('a(c)?c?')\n    match = my_regex.search(text)\n    if match:\n        return True\n    return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has three followed by eight 'c'.\n    '''\n    my_regex = re.compile('a(c)?c?')\n    match = my_regex.search(text)\n    if match:\n        return True\n    return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has three followed by nine 'c'.\n    '''\n    my_regex = re.compile('a(c)?c?')\n    match = my_regex.search(text)\n    if match:\n        return True\n    return False\ndef test_text_match_three():\n    assert text_match_three('This is a text.') == True\ndef test_text_match_four():\n    assert text_match_four('This is a text.') == True\ndef test_text_match_five():\n    assert text_match_five('This is a text.') == True\ndef test_text_match_six():\n    assert text_match_six('This is a text.') == True\ndef test_text_match_seven():\n    assert text_match_seven('This is a text.') == True\ndef test_text_match_eight():\n    assert text_match_eight('This is a text.') == True\ndef test_text_match_nine():\n    assert text_match_nine('This is a text.') == True\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef test_text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_match_fail():\n    assert text_match_five('This is a text.') == False\ndef test_text_match_fail():\n    assert text_match_six('This is a text.') == False\ndef text_match_fail():\n    assert text_match_seven('This is a text.') == False\ndef test_text_match_fail():\n    assert text_match_eight('This is a text.') == False\ndef test_text_match_fail():\n    assert text_match_nine('This is a text.') == False\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_match_fail():\n    assert text_match_five('This is a text.') == False\ndef text_match_fail():\n    assert text_match_six('This is a text.') == False\ndef text_match_fail():\n    assert text_match_seven('This is a text.') == False\ndef text_match_fail():\n    assert text_match_eight('This is a text.') == False\ndef text_match_fail():\n    assert text_match_nine('This is a text.') == False\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_match_fail():\n    assert text_match_five('This is a text.') == False\ndef text_match_fail():\n    assert text_match_six('This is a text.') == False\ndef text_match_fail():\n    assert text_match_seven('This is a text.') == False\ndef text_match_fail():\n    assert text_match_eight('This is a text.') == False\ndef text_match_fail():\n    assert text_match_nine('This is a text.') == False\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_match_fail():\n    assert text_match_five('This is a text.') == False\ndef text_match_fail():\n    assert text_match_six('This is a text.') == False\ndef text_match_fail():\n    assert text_match_seven('This is a text.') == False\ndef text_match_fail():\n    assert text_match_eight('This is a text.') == False\ndef text_match_fail():\n    assert text_match_nine('This is a text.') == False\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_match_fail():\n    assert text_match_five('This is a text.') == False\ndef text_match_fail():\n    assert text_match_six('This is a text.') == False\ndef text_match_fail():\n    assert text_match_seven('This is a text.') == False\ndef text_match_fail():\n    assert text_match_eight('This is a text.') == False\ndef text_match_fail():\n    assert text_match_nine('This is a text.') == False\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_match_fail():\n    assert text_match_five('This is a text.') == False\ndef text_match_fail():\n    assert text_match_six('This is a text.') == False\ndef text_match_fail():\n    assert text_match_seven('This is a text.') == False\ndef text_match_fail():\n    assert text_match_eight('This is a text.') == False\ndef text_match_fail():\n    assert text_match_nine('This is a text.') == False\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_match_fail():\n    assert text_match_five('This is a text.') == False\ndef text_match_fail():\n    assert text_match_six('This is a text.') == False\ndef text_match_fail():\n    assert text_match_seven('This is a text.') == False\ndef text_match_fail():\n    assert text_match_eight('This is a text.') == False\ndef text_match_fail():\n    assert text_match_nine('This is a text.') == False\ndef text_match_fail():\n    assert text_match_three('This is a text.') == False\ndef text_match_fail():\n    assert text_match_four('This is a text.') == False\ndef text_matc"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.replace('a', '1')\n    text = text.replace('b', '3')\n    text = text.replace('a', '1')\n    return text\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by one 'b'.\n    '''\n    text = text.replace('o', '2')\n    return text\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b'.\n    '''\n    text = text.replace('o', '1')\n    text = text.replace('b', '2')\n    text = text.replace('o', '1')\n    return text\n    \ndef text_match_one_two(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by one and two 'b'.\n    '''\n    text = text.replace('o', '2')\n    text = text.replace('b', '1')\n    text = text.replace('o', '1')\n    return text\n    \ndef text_match_one_two_one(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by one and two 'b' followed by one '1'.\n    '''\n    text = text.replace('o', '2')\n    text = text.replace('b', '1')\n    text = text.replace('o', '1')\n    text = text.replace('1', '1')\n    return text\n    \ndef text_match_two_one_two(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b' followed by one '1'.\n    '''\n    text = text.replace('o', '1')\n    text = text.replace('b', '2')\n    text = text.replace('o', '1')\n    text = text.replace('1', '2')\n    return text\n    \ndef text_match_two_one_two_one(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b' followed by one and two '1'.\n    '''\n    text = text.replace('o', '1')\n    text = text.replace('b', '2')\n    text = text.replace('o', '1')\n    text = text.replace('1', '2')\n    text = text.replace('1', '1')\n    return text\n    \ndef text_match_one_two_one_two(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by one 'b' followed by two and two '1'.\n    '''\n    text = text.replace('o', '2')\n    text = text.replace('b', '1')\n    text = text.replace('o', '1')\n    text = text.replace('1', '2')\n    text = text.replace('1', '1')\n    text = text.replace('1', '2')\n    return text\n    \ndef text_match_two_one_two_one_two(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b' followed by two '1' followed by two and two '1'.\n    '''\n    text = text.replace('o', '1')\n    text = text.replace('b', '2')\n    text = text.replace('o', '1')\n    text = text.replace('1', '2')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '2')\n    text = text.replace('2', '2')\n    text = text.replace('2', '2')\n    return text\n    \ndef text_match_two_one_two_one_two_one(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b' followed by two '1' followed by two and two '1' followed by two '1'.\n    '''\n    text = text.replace('o', '1')\n    text = text.replace('b', '2')\n    text = text.replace('o', '1')\n    text = text.replace('1', '2')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '2')\n    text = text.replace('2', '2')\n    text = text.replace('2', '2')\n    text = text.replace('2', '2')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('2', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('2', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    return text\n    \ndef text_match_one_two_one_two_two(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b' followed by one '2'.\n    '''\n    text = text.replace('o', '2')\n    text = text.replace('b', '1')\n    text = text.replace('o', '1')\n    text = text.replace('2', '2')\n    text = text.replace('2', '1')\n    text = text.replace('1', '2')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    return text\n    \ndef text_match_two_one_two_two_one(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b' followed by one '2' followed by one '2' followed by one '1'.\n    '''\n    text = text.replace('o', '1')\n    text = text.replace('b', '2')\n    text = text.replace('o', '1')\n    text = text.replace('2', '2')\n    text = text.replace('2', '1')\n    text = text.replace('1', '2')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '1')\n    text = text.replace('1', '2')\n    text = text.replace('2', '2')\n    text = text.replace('2', '2')\n    text = text.replace('2', '2')\n    text = text.replace('2', '2')\n    return text\n    \ndef text_match_two_one_two_two_one_two(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by two 'b' followed by one '2' followed by two '2' followed by two '1'.\n    '''\n    text = text.replace('o', '2')\n    text = text.replace('b', '1')\n    text = text.replace('o', '1')\n    text = text.replace('2', '2')\n    text = text.replace('2', '1')\n    text = text.replace('1', '2')\n    text = text.replace('1', '1')\n    text = text.replace("
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text_to_match = text.strip()\n    text_to_match = text_to_match.lower()\n    text_to_match = text_to_match.replace(\" \", \"\")\n    text_to_match = text_to_match.replace(\" \", \"\")\n    if len(text_to_match) == 0:\n        return \"No match\"\n    else:\n        return re.search(r'a(\\w+)b', text_to_match)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r\"^(a|b)(?=b(?!r))\", text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.replace('.', '\\.')\n    text = re.sub('\\D', '', text)\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('+', '\\+')\n    text = text.replace('*', '\\*')\n    text = text.replace('-', '\\-' )\n    text = text.replace(':', '\\:')\n    text = text.replace(';', '\\;')\n    text = text.replace('!', '\\!')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('@', '@')\n    text = text.replace('$', '\\$')\n    text = text.replace('%', '\\%')\n    text = text.replace('^', '\\^')\n    text = text.replace('&', '\\&')\n    text = text.replace('*', '\\*')\n    text = text.replace('+', '\\+')\n    text = text.replace('=', '\\=')\n    text = text.replace('{', '\\{')\n    text = text.replace('}', '\\}')\n    text = text.replace(';', '\\;')\n    text = text.replace(',', '\\,')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('|', '\\|')\n    text = text.replace('@', '\\@')\n    text = text.replace('$', '\\$')\n    text = text.replace('%', '\\%')\n    text = text.replace('^', '\\^')\n    text = text.replace('&', '\\&')\n    text = text.replace('*', '\\*')\n    text = text.replace('+', '\\+')\n    text = text.replace('<', '\\<')\n    text = text.replace('>', '\\>')\n    text = text.replace('<=', '\\<=')\n    text = text.replace('>=', '\\>=')\n    text = text.replace('=>', '\\=>')\n    text = text.replace('=', '\\=')\n    text = text.replace('{', '\\{')\n    text = text.replace('}', '\\}')\n    text = text.replace('.', '\\.')\n    text = text.replace('+', '\\+')\n    text = text.replace('-', '\\-')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('+', '\\+')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('-', '\\-')\n    text = text.replace('!', '\\!')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('|', '\\|')\n    text = text.replace('@', '\\@')\n    text = text.replace('$', '\\$')\n    text = text.replace('%', '\\%')\n    text = text.replace('^', '\\^')\n    text = text.replace('&', '\\&')\n    text = text.replace('*', '\\*')\n    text = text.replace('+', '\\+')\n    text = text.replace('<', '\\<')\n    text = text.replace('>', '\\>')\n    text = text.replace('<=', '\\<=')\n    text = text.replace('>=', '\\>=')\n    text = text.replace('=>', '\\=>')\n    text = text.replace('=', '\\=')\n    text = text.replace('{', '\\{')\n    text = text.replace('}', '\\}')\n    text = text.replace('.', '\\.')\n    text = text.replace('+', '\\+')\n    text = text.replace('-', '\\-')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('+', '\\+')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('-', '\\-')\n    text = text.replace('!', '\\!')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('|', '\\|')\n    text = text.replace('@', '\\@')\n    text = text.replace('$', '\\$')\n    text = text.replace('%', '\\%')\n    text = text.replace('^', '\\^')\n    text = text.replace('&', '\\&')\n    text = text.replace('*', '\\*')\n    text = text.replace('+', '\\+')\n    text = text.replace('<', '\\<')\n    text = text.replace('>', '\\>')\n    text = text.replace('<=', '\\<=')\n    text = text.replace('>=', '\\>=')\n    text = text.replace('=>', '\\=>')\n    text = text.replace('=', '\\=')\n    text = text.replace('{', '\\{')\n    text = text.replace('}', '\\}')\n    text = text.replace('.', '\\.')\n    text = text.replace('+', '\\+')\n    text = text.replace('-', '\\-')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('+', '\\+')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('-', '\\-')\n    text = text.replace('!', '\\!')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('|', '\\|')\n    text = text.replace('@', '\\@')\n    text = text.replace('$', '\\$')\n    text = text.replace('%', '\\%')\n    text = text.replace('^', '\\^')\n    text = text.replace('&', '\\&')\n    text = text.replace('*', '\\*')\n    text = text.replace('+', '\\+')\n    text = text.replace('<', '\\<')\n    text = text.replace('>', '\\>')\n    text = text.replace('<=', '\\<=')\n    text = text.replace('>=', '\\>=')\n    text = text.replace('=>', '\\=>')\n    text = text.replace('=', '\\=')\n    text = text.replace('{', '\\{')\n    text = text.replace('}', '\\}')\n    text = text.replace('.', '\\.')\n    text = text.replace('+', '\\+')\n    text = text.replace('-', '\\-')\n    text = text.replace('?', '\\?')\n    text = text.replace('(', '\\(')\n    text = text.replace(')', '\\)')\n    text = text.replace('|', '\\|')\n    text = text.replace('@', '\\@')\n    text = text.replace('$', '\\$')\n    text = text.replace('%', '\\%')\n    text "
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_str = \"(.*?)((a)|(b))\"\n    # split the string into an array\n    # an array of all of the strings\n    # note that split() splits at the first space, so you can pass in a string that is not whitespace\n    m = re.findall(match_str, text)\n    if m!= []:\n        # the pattern variable contains a pattern\n        # it is all the groups matched in the pattern\n        pattern = m[0][1]\n        # if this pattern matches the string,\n        # return the index of that group\n        index = 0\n        # iterate over the pattern\n        for match in re.finditer(pattern, text):\n            # get the group value\n            # and remove the leading 'b'\n            # group = m[0][2]\n            # print(group)\n            # print(match.group(0))\n            # print(match.group(1))\n            # print(match.group(2))\n            # return the index for the group\n            index += match.start(0)\n            # return the index for the group\n            # print(index)\n        # print(m[0][2])\n        # return the index of the pattern\n        return index\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = list(test_list)\n    for i in range(len(test_list)):\n        if test_list[i] == \" \":\n            test_list.insert(i, \"\")\n            continue\n        if test_list[i] in test_str:\n            test_list.insert(i, \"\")\n            continue\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str == \"\":\n        return (())\n    else:\n        test_list = test_list.split(\" \")\n        return tuple(map(int,test_list))\n    "
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = list(test_str.split(\",\"))\n    print(tuple_list)\n    new_tuple = tuple(tuple_list)\n    new_tuple = tuple(new_tuple)\n    print(new_tuple)\n    return new_tuple\n    \ndef read_tuple(test_str, test_list):\n    '''\n    Write a function to read a tuple from the given string and list.\n    '''\n    tuple_list = list(test_str.split(\",\"))\n    print(tuple_list)\n    new_tuple = tuple(tuple_list)\n    new_tuple = tuple(new_tuple)\n    print(new_tuple)\n    return new_tuple\n    \n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([test_str.lower().replace(\",\", \"\").replace(\"'\", \"\") for test_str in test_list])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str = test_str.split('|')\n    test_str = [int(i) for i in test_str]\n    test_list = [int(i) for i in test_list]\n    return tuple(test_list), test_str\n    \n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    test_str = test_str.split('|')\n    test_str = [int(i) for i in test_str]\n    test_list = [int(i) for i in test_list]\n    return test_list\n    \n    \ndef swap_ele(list, index1, index2):\n    '''\n    Swap the elements of the list at the index given by index1 and index2.\n    '''\n    test_list = list[index1: index2 + 1]\n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    test_list.append(0)\n    return test_list\n    \n    \ndef swap_indices(list, index1, index2):\n    '''\n    Swap the indices of the list at the index given by index1 and index2.\n    '''\n    test_list = list[index1: index2 + 1]\n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    test_list.append(0)\n    return test_list\n    \n    \ndef swap_1(list):\n    '''\n    Swap the elements of the list at the index given by index1.\n    '''\n    test_list = list[:len(list) - 1]\n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    test_list.append(0)\n    return test_list\n    \n    \ndef swap_2(list):\n    '''\n    Swap the elements of the list at the index given by index1 and index2.\n    '''\n    test_list = list[:len(list) - 1]\n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    test_list.append(0)\n    return test_list\n    \n    \ndef swap_3(list, index1, index2):\n    '''\n    Swap the elements of the list at the index given by index1 and index2.\n    '''\n    test_list = list[index1: index2 + 1]\n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    test_list.append(0)\n    return test_list\n    \n    \ndef swap_4(list, index1, index2):\n    '''\n    Swap the elements of the list at the index given by index1 and index2.\n    '''\n    test_list = list[index1: index2 + 1]\n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    test_list.append(0)\n    return test_list\n    \n    \ndef swap_5(list, index1, index2):\n    '''\n    Swap the elements of the list at the index given by index1 and index2.\n    '''\n    test_list = list[index1: index2 + 1]\n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    test_list.append(0)\n    return test_list\n    \n    \ndef main(test_str, test_list):\n    '''\n    Write a main function which accepts the string of the test case and returns\n    a new string of the test case with all its elements swapped.\n    '''\n    return test_str.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6')\n    \n    \nif __name__ == \"__main__\":\n    print(main(input(), input()))\n    \n    "
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    while i < len(test_list) or j < len(test_str):\n        if i < len(test_list):\n            result.append(test_list[i])\n            i += 1\n        else:\n            result.append(test_str[j])\n            j += 1\n            i += 1\n    return tuple(result)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = []\n    for i in test_list:\n        tup.append(i)\n    return tup\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        if i % 2 == 0:\n            sum += i\n    if sum % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    j = len(nums)-1\n    while i<j:\n        if nums[i]%2==0 and nums[j]%2==0:\n            return False\n        i+=1\n        j-=1\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n    \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    check = [0 for i in range(0, len(nums))]\n    for i in range(0, len(nums)):\n        check[i] = nums[i] % 2 == 0\n    for i in range(0, len(nums)):\n        if check[i] == False:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count_even = 0\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            count_even += 1\n            if count_even%2==0:\n                count_even = 0\n    if count_even%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # mark variable\n    even_index = 0\n    # iterate through the given list\n    for i in range(len(nums)):\n        # check if i is even\n        if i % 2 == 0:\n            # increment even index\n            even_index += 1\n            # if even index is even\n            # if even index is even then check if even index is even of the list\n            if even_index % 2 == 0:\n                # if even index is even print the correct number of even indexes\n                print(even_index)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            evens.append(nums[i])\n    if len(evens) == len(nums):\n        print('Even numbers in list are present in the list')\n    else:\n        print('Even numbers not present in the list')\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n        \n    return False\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0], test_tup[1], test_tup[2]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    return\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([item for item in test_tup[0] if item not in test_tup[1]])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # pass\n    # raise NotImplementedError(\"Remove not implemented for tuples\")\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (x for x in test_tup if x[1]!= '')\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is not tuple:\n        raise TypeError('tuple required')\n    elif len(test_tup) == 0:\n        raise ValueError('tuple can not be empty')\n    elif type(test_tup[0]) is not tuple:\n        raise TypeError('each element of the tuple should be a tuple')\n    else:\n        list_tup = []\n        for i in test_tup:\n            list_tup.append(i)\n        list_tup.pop(0)\n        return list_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    try:\n        t = test_tup\n        l = len(t)\n        # print(t)\n        # print(l)\n        if l == 0:\n            return None\n        if l == 1:\n            return t[0]\n        # print(t[0][0])\n        # print(t[0][1])\n        n = t[0][0]\n        # print(t[0][1])\n        # print(t[1][0])\n        # print(t[1][1])\n        if n == t[0][1]:\n            t[0] = t[0][0]\n            del t[0]\n        elif n == t[1][0]:\n            t[1] = t[1][1]\n            del t[1]\n        else:\n            return remove_nested(t[0])\n        # print(t)\n        return remove_nested(t)\n    except:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) <= 2:\n        return None\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0,len(input_list)): \n        for j in range(0,len(input_list)): \n            if input_list[i][j] == 1: \n                count += 1\n    print(count)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in input_list:\n        if type(i) == list:\n            result += len(i)\n    return result\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] == \"[\":\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # number of lists\n    n = len(input_list)\n    # the number of elements in each list\n    m = len(input_list[0])\n    # the counter variable \n    count = 0\n    # for the lists\n    for x in range(n):\n        # for each element in the current list\n        for y in range(m):\n            # if the elements are equal\n            if input_list[x][y] == input_list[x][y]:\n                # add one to the counter\n                count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #Code here\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # your code here\n    count_list = 0\n    for i in range(0, len(input_list)):\n        for j in range(0, len(input_list)):\n            if input_list[i][j] =='' or input_list[i][j] == ',':\n                count_list += 1\n    return count_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list), 2): \n        count += len(input_list[i])\n        print(input_list[i])\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total_list = 0\n    for sub_list in input_list:\n        total_list = total_list + len(sub_list)\n    return total_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Edge case\n    if input_list == []:\n        return 0\n    \n    # Edge case 1\n    if input_list[0] == \"\":\n        return 0\n    \n    # Edge case 2\n    if input_list[0] == \"{\" or input_list[0] == \"}\" or input_list[0] == \"[\" or input_list[0] == \"]\":\n        return 0\n    \n    # Edge case 3\n    if input_list[0] == \",\" or input_list[0] == \"]\" or input_list[0] == \";\":\n        return 0\n    \n    # Edge case 4\n    if input_list[0] == \"{\":\n        return 0\n    \n    # Edge case 5\n    if input_list[0] == \"}\":\n        return 0\n    \n    # Edge case 6\n    if input_list[0] == \"[\":\n        return 0\n    \n    # Edge case 7\n    if input_list[0] == \"]\":\n        return 0\n    \n    # Edge case 8\n    if input_list[0] == \",\":\n        return 0\n    \n    # Edge case 9\n    if input_list[0] == \";\":\n        return 0\n    \n    # Edge case 10\n    if input_list[0] == \"{\":\n        return 1\n    \n    # Edge case 11\n    if input_list[0] == \"}\":\n        return 1\n    \n    # Edge case 12\n    if input_list[0] == \"[\":\n        return 1\n    \n    # Edge case 13\n    if input_list[0] == \"]\":\n        return 1\n    \n    # Edge case 14\n    if input_list[0] == \";\":\n        return 1\n    \n    # Edge case 15\n    if input_list[0] == \"{\" or input_list[0] == \"}\":\n        return 1\n    \n    # Edge case 16\n    if input_list[0] == \",\":\n        return 1\n    \n    # Edge case 17\n    if input_list[0] == \";\":\n        return 1\n    \n    # Edge case 18\n    if input_list[0] == \"{\":\n        return 2\n    \n    # Edge case 19\n    if input_list[0] == \"}\":\n        return 2\n    \n    # Edge case 20\n    if input_list[0] == \"[\":\n        return 2\n    \n    # Edge case 21\n    if input_list[0] == \"]\":\n        return 2\n    \n    # Edge case 22\n    if input_list[0] == \";\":\n        return 2\n    \n    # Edge case 23\n    if input_list[0] == \"{\":\n        return 3\n    \n    # Edge case 24\n    if input_list[0] == \"}\":\n        return 3\n    \n    # Edge case 25\n    if input_list[0] == \"[\":\n        return 3\n    \n    # Edge case 26\n    if input_list[0] == \"]\":\n        return 3\n    \n    # Edge case 27\n    if input_list[0] == \";\":\n        return 3\n    \n    # Edge case 28\n    if input_list[0] == \"{\":\n        return 4\n    \n    # Edge case 29\n    if input_list[0] == \"}\":\n        return 4\n    \n    # Edge case 30\n    if input_list[0] == \"[\":\n        return 4\n    \n    # Edge case 31\n    if input_list[0] == \"]\":\n        return 4\n    \n    # Edge case 32\n    if input_list[0] == \";\":\n        return 4\n    \n    # Edge case 33\n    if input_list[0] == \"{\":\n        return 5\n    \n    # Edge case 34\n    if input_list[0] == \"}\":\n        return 5\n    \n    # Edge case 35\n    if input_list[0] == \"[\":\n        return 5\n    \n    # Edge case 36\n    if input_list[0] == \"]\":\n        return 5\n    \n    # Edge case 37\n    if input_list[0] == \";\":\n        return 5\n    \n    # Edge case 38\n    if input_list[0] == \"{\":\n        return 6\n    \n    # Edge case 39\n    if input_list[0] == \"}\":\n        return 6\n    \n    # Edge case 40\n    if input_list[0] == \"[\":\n        return 6\n    \n    # Edge case 41\n    if input_list[0] == \"]\":\n        return 6\n    \n    # Edge case 42\n    if input_list[0] == \";\":\n        return 6\n    \n    # Edge case 43\n    if input_list[0] == \"{\":\n        return 7\n    \n    # Edge case 44\n    if input_list[0] == \"}\":\n        return 7\n    \n    # Edge case 45\n    if input_list[0] == \"[\":\n        return 7\n    \n    # Edge case 46\n    if input_list[0] == \"]\":\n        return 7\n    \n    # Edge case 47\n    if input_list[0] == \";\":\n        return 7\n    \n    # Edge case 48\n    if input_list[0] == \"{\":\n        return 8\n    \n    # Edge case 49\n    if input_list[0] == \"}\":\n        return 8\n    \n    # Edge case 50\n    if input_list[0] == \"[\":\n        return 8\n    \n    # Edge case 51\n    if input_list[0] == \"]\":\n        return 8\n    \n    # Edge case 52\n    if input_list[0] == \";\":\n        return 8\n    \n    # Edge case 53\n    if input_list[0] == \"{\":\n        return 9\n    \n    # Edge case 54\n    if input_list[0] == \"}\":\n        return 9\n    \n    # Edge case 55\n    if input_list[0] == \"[\":\n        return 9\n    \n    # Edge case 56\n    if input_list[0] == \"]\":\n        return 9\n    \n    # Edge case 57\n    if input_list[0] == \";\":\n        return 9\n    \n    # Edge case 58\n    if input_list[0] == \"{\":\n        return 10\n    \n    # Edge case 59\n    if input_list[0] == \"}\":\n        return 10\n    \n    # Edge case 60\n    if input_list[0] == \"[\":\n        return 10\n    \n    # Edge case 61\n    if input_list[0] == \"]\":\n        return 10\n    \n    # Edge case 62\n    if input_list[0] == \";\":\n        return 10\n    \n    # Edge case 63\n    if input_list[0] == \"{\":\n        return 11\n    \n    # Edge case 64\n    if input_list[0] == \"}\":\n        return 11\n    \n    # Edge case 65\n    if input_list[0] == \"[\":\n        return 11\n    \n    # Edge case 66\n    if input_list[0] == \"]\":\n        return 11\n    \n    # Edge case 67\n    if input_list[0] == \";\":\n        return 11\n    \n    # Edge case 68\n    if input_list[0] == \"{\":\n        return 12\n    \n    # Edge case 69\n    if input_list[0] == \"}\":\n        return 12\n    \n    # Edge case 70\n    if input_list[0] == \"[\":\n        return 12\n    \n    # Edge case 71\n    if input_list[0] == \"]\":\n        return 12\n    \n    # Edge case 72\n    if input_list[0] == \";\":\n        return 12\n    \n    # Edge case 73\n    if input_list[0] == \"{\":\n        return 13\n    \n    # Edge case 74\n    if input_list[0] == \"}\":\n        return 13\n    \n    # Edge case 75\n    if input_list[0] == \"[\":\n        return 13\n    \n    # Edge case 76\n    if input_list[0] == \"]\":\n        return 13\n    \n    # Edge case 77\n    if input_list[0] == \";\":\n        return 13\n    \n    # Edge case 78\n    if input_list[0] == \"{\":\n        return 14\n    \n    # Edge case 79\n    if input"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    # if x is not in array\n    if arr[l-1]>x:\n        return l-1\n    # if x is in array\n    if x<arr[l-1]:\n        return l-2\n    # if x is in array\n    if x==arr[l-1]:\n        return l-1\n    return l-1\ndef last_in_order(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    # if x is not in array\n    if arr[l-1]>x:\n        return l-1\n    # if x is in array\n    if arr[l-1]==x:\n        return l-1\n    # if x is in array\n    if x<arr[l-1]:\n        return l-2\n    # if x is in array\n    return l-2\ndef last_pre_order(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if arr[l-1]>x:\n        return l-1\n    # if x is not in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    if x==arr[l-1]:\n        return l-1\n    return l-1\ndef pre_order(arr, x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if arr[l-1]>x:\n        return l-1\n    # if x is not in array\n    if arr[l-1]==x:\n        return l-1\n    # if x is in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    return l-2\ndef pre_order_recursive(arr, x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if arr[l-1]>x:\n        return l-1\n    # if x is not in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    if arr[l-1]>x:\n        return l-2\n    # if x is in array\n    return l-1\ndef pre_order_recursive_no_x(arr, x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if arr[l-1]>x:\n        return l-1\n    # if x is not in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    if arr[l-1]>x:\n        return l-2\n    # if x is in array\n    return l-1\ndef pre_order_recursive_x(arr, x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    l = len(arr)\n    # if x is not in array\n    if arr[l-1]>x:\n        return l-1\n    # if x is in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    if arr[l-1]>x:\n        return l-2\n    # if x is in array\n    return l-1\ndef reverse_recursive(arr, l, x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if l==0:\n        return x\n    # if x is not in array\n    if arr[l-1]>x:\n        return l-1\n    # if x is in array\n    if arr[l-1]==x:\n        return l-1\n    # if x is in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    return l-2\ndef reverse_recursive_no_x(arr, l, x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if l==0:\n        return x\n    # if x is not in array\n    if arr[l-1]>x:\n        return l-1\n    # if x is in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    return l-2\ndef reverse_recursive_x(arr, l, x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if l==0:\n        return x\n    # if x is not in array\n    if arr[l-1]>x:\n        return l-1\n    # if x is in array\n    if arr[l-1]<x:\n        return l-2\n    # if x is in array\n    return l-2\ndef find_parent(parent, x):\n    '''\n    Write a python function to find the parent of an element.\n    '''\n    if parent[x]!=x:\n        parent[x]=find_parent(parent,parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    '''\n    Write a python function to union a node from a binary tree into another tree.\n    '''\n    a=find_parent(parent,a)\n    b=find_parent(parent,b)\n    if a<b:\n        parent[b]=a\n    else:\n        parent[a]=b\ndef get_edges(g,s):\n    '''\n    Write a python function to find the number of edges of a graph.\n    '''\n    edges=0\n    for i in range(len(g)):\n        for j in range(len(g)):\n            if g[i][j]==1:\n                edges+=1\n    return edges\ndef make_set(g,s):\n    '''\n    Write a python function to insert a vertex to a binary tree.\n    '''\n    a=find_parent(g,s)\n    g[s]=[[s,a]]\ndef spanning_tree(g,s):\n    '''\n    Write a python function to find the minimum spanning tree of a graph.\n    '''\n    if g==[[[0]],[]]:\n        return [[s]]\n    if s==0:\n        return spanning_tree(g,s)\n    x=find_parent(g,s)\n    g[s].append([x,s])\n    g=spanning_tree(g,x)\n    return spanning_tree(g,s)\ndef in_order(arr):\n    '''\n    Write a python function to find the minimum spanning tree of a graph.\n    '''\n    l=len(arr)\n    if l==0:\n        return arr\n    if l==1:\n        return arr\n    if arr[l-1]<arr[l-2]:\n        return arr\n    else:\n        return in_order(arr[:l-1])+[arr[l-1]]+in_order(arr[l-2:])\ndef in_order_recursive(arr):\n    '''\n    Write a python function to find the minimum spanning tree of a graph.\n    '''\n    if l==0:\n        return arr\n    if arr[l-1]<arr[l-2]:\n        return in_order_recursive(arr[:l-1])+[arr[l-1]]+in_order_recursive(arr[l-2:])\n    else:\n        return in_order_recursive(arr[:l-1])+[arr[l-1]]\ndef in_order_recursive_no_x(arr,l,x):\n    '''\n    Write a python function to find the minimum spanning tree of a graph.\n    '''\n    if l==0:\n        return arr\n    if arr[l-1]<x:"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j=len(arr)-1\n    while arr[j]<x:\n        j-=1\n    return j\n    \ndef min_value(arr):\n    '''\n    Write a python function to find the minimum element of a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    if len(arr)==1:\n        if arr[0]<arr[0]:\n            return arr[0]\n        else:\n            return arr[0]\n    \n    j=0\n    min_val=arr[0]\n    for i in range(len(arr)):\n        if arr[i]<min_val:\n            min_val=arr[i]\n            j=i\n    return min_val\n    \ndef max_value(arr):\n    '''\n    Write a python function to find the maximum element of a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    if len(arr)==1:\n        if arr[0]>arr[0]:\n            return arr[0]\n        else:\n            return arr[0]\n    \n    j=0\n    max_val=arr[0]\n    for i in range(len(arr)):\n        if arr[i]>max_val:\n            max_val=arr[i]\n            j=i\n    return max_val\n    \ndef count_inversions(arr):\n    '''\n    Write a python function to count inversions in a sorted array.\n    '''\n    if len(arr)==0:\n        return 0\n    j=0\n    count_inv=0\n    i=0\n    \n    while j<len(arr):\n        if arr[j]>arr[j+1]:\n            count_inv+=1\n            arr[j],arr[j+1]=arr[j+1],arr[j]\n        if j+2<len(arr) and arr[j+2]>arr[j+1]:\n            count_inv+=1\n            arr[j],arr[j+1]=arr[j+1],arr[j+2]\n        j+=1\n    return count_inv\n    \n    \ndef count_bucket_tree_node(arr,bucket):\n    '''\n    Write a python function to count the number of bucktets in a sorted array.\n    '''\n    if len(arr)==0:\n        return 0\n    \n    if arr[0]>arr[1]:\n        return 1+count_bucket_tree_node(arr[1:],bucket+1)\n    else:\n        return count_bucket_tree_node(arr[1:],bucket+1)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Binary Search\n    l = 0\n    r = len(arr) - 1\n    if arr[l] == x :\n        return l\n    if arr[r] == x :\n        return r\n    while l<=r:\n        mid = (l+r)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid]<x:\n            l = mid +1\n        else:\n            r = mid -1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return (len(arr)-1)-max(arr[:x],key=arr.count)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] == x:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(0,len(arr)-1):\n        if arr[i] > x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 1:\n        return 0\n    \n    return last_pos(arr,x,len(arr)-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)+1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the length of the array\n    length = len(arr)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_regex = re.compile(r'a\\b')\n    match = a_regex.search(text)\n    print(match)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'a\\b', text)\n    if match is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    count = 0\n    \n    while True:\n        count += 1\n        text = re.sub('a+', '', text)\n        if text.endswith('b'):\n            return count\n            break\n        \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    count = 0\n    \n    while True:\n        count += 1\n        text = re.sub('b+', '', text)\n        if text.endswith('a'):\n            return count\n            break\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'\\s+a\\s+b',text)!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = re.search('a', text)\n    if a:\n        print('a found')\n        print(a.group())\n    else:\n        print('a not found')\n    a = re.search('b', text)\n    if a:\n        print('b found')\n        print(a.group())\n    else:\n        print('b not found')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.search('a*', text, re.M)\n    if x is None:\n        return 0\n    else:\n        return x.group(0)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w\\b\\s?\\w"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)(?=[bcdfgh])')\n    result = pattern.search(text)\n    if result:\n        return result.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.sub(\"\\n\", \"\", text)\n    text = re.sub(\"\\s\", \"\", text)\n    text = re.sub(\"[^a-zA-Z0-9 ]+\", \" \", text)\n    text = text.replace(\"  \", \" \")\n    text = re.sub(\"\\s+\", \" \", text)\n    text = text.strip()\n    text = text.replace(\"  \", \" \")\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a\\b', text)!= None\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, val in dict.items():\n        total += val\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # if there are no items in the dictionary\n    if len(dict) == 0:\n        return 0\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict) == 0:\n        return 0\n    else:\n        return dict.get(sum(dict))\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.items():\n        total = total + item[1]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for key in dict:\n        sum_dict[key] = 0\n        for item in dict[key]:\n            sum_dict[key] += item\n    return sum_dict\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            total += i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    while (l < r):\n        if (l % 2!= 0):\n            sum += l\n            l += 1\n        else:\n            sum += r\n            r -= 1\n        if (r % 2!= 0):\n            r -= 1\n        else:\n            r -= 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code goes here\n    pass\n    \n    \n    pass\n    "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2!= 0:\n            s += n\n    return s\ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\ndef even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef sum_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef even_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef even_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef even_all(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 0:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l, r + 1):\n        if n%2 == 1:\n            s += n\n    return s\n    \ndef odd_all(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for n in range(l"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    def sum_odd_list(l, r):\n        if l > r:\n            return 0\n        else:\n            return (l + r) * sum_odd(l - 1) + sum_odd(r - 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    numbers = []\n    for i in range(0,n):\n        numbers.append(i+1)\n    numbers.sort()\n    odd_num = 0\n    for i in numbers:\n        if (i%2!= 0):\n            odd_num = odd_num + i\n    return odd_num\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n < 0):\n        print('Enter a positive number')\n        return \n    else:\n        s = 0\n        while (n > 0):\n            if (n % 2 == 1):\n                s = s + n\n                n = n/2\n            else:\n                n = n -1\n        return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    def sum_odd_rec(n,l,r):\n        '''\n        Write a python function that takes a number as an input and prints its sum.\n        Input:\n            n: int\n            l: int\n            r: int\n        Output:\n            s: int\n        '''\n        if l < r:\n            print(sum_odd_rec(n,l+1,r))\n        else:\n            print(n)\n    sum_odd_rec(n,1,100)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n    \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in range(0,len(arr)):\n        result = result + arr[i]\n    return result\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    import math\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    sum = 0\n    for element in arr:\n        sum += element\n    return sum\n    \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # TODO: Write your solution here\n    s = 0\n    for x in arr:\n        s += x\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (n==0):\n        return 0\n    if (n==1):\n        return 1\n    if (n>1):\n        num = ((n>>1)&1) | (d&1)\n        return ((num>>1)&1) | (num<<1)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l=len(n)\n    d=d%32\n    l+=d\n    f=0\n    c=1\n    x=0\n    for i in range(l,0,-1):\n        x+=c\n        if(x==d):\n            f+=1\n        else:\n            f=0\n        c=c<<1\n    for i in range(0,f):\n        x+=c\n        if(x==l):\n            c+=1\n        else:\n            c=0\n    f=c\n    x=0\n    for i in range(0,f):\n        x+=c\n        if(x==l):\n            c+=1\n        else:\n            c=0\n    m=n[0:32-d]\n    n=n[32-d:]+m\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n + 1    \n    if n % 2 == 1:\n        n = n - 1\n        return n\n    else:\n        return n + 1\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n>>32\n    # print(\"left rotate {}\".format(l))\n    n = (n<<d)-1\n    # print(\"n: {}\".format(n))\n    l = (l<<d)+1\n    # print(\"l: {}\".format(l))\n    # print(\"left rotate {}\".format(l))\n    return l\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n1 = n%(2**32)\n    n2 = (n-n1)%(2**32)\n    n3 = (n-n2)%(2**32)\n    n4 = (n-n3)%(2**32)\n    n = n1+n2+n3+n4\n    n = n%(2**32)\n    return n\n    \ndef right_rotate(n,d):\n    '''\n    Write a function that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n1 = n%(2**32)\n    n2 = (n-n1)%(2**32)\n    n3 = (n-n2)%(2**32)\n    n4 = (n-n3)%(2**32)\n    n = n1+n2+n3+n4\n    n = n%(2**32)\n    return n\n    \ndef xor(a,b):\n    '''\n    Write a function to compute the XOR of two numbers.\n    '''\n    return int(str(a)^str(b),16)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    result=n\n    while n:\n        if n & 1:\n            result=result << (32-d)\n        d+=1\n        if d==32:\n            d=0\n            d+=1\n        n=n>>1\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = n\n    temp = temp << d\n    temp = temp + n >> d\n    return temp\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n_str=bin(n)[2:]\n    d_str=bin(d)[2:]\n    result=''\n    for i in range(len(d_str)):\n        if d_str[i]=='1':\n            result+=n_str[i]+'1'\n        else:\n            result+=n_str[i]+'0'\n    return int(result,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    x = n\n    y = n & (n-1)\n    z = n >> 1\n    x &= z\n    y &= z\n    z &= ~x\n    z &= ~y\n    z |= x\n    z |= y\n    z |= n\n    return z\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = re.sub(' +',' ',text)\n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    string = ''\n    for i in text:\n        string = string + i\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ', '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    text = re.sub(r'\\W+','', text)\n    return text\ndef tokenize_string(text):\n    '''\n    tokenize_string returns a list of words in the given string.\n    '''\n    tokens = re.split('\\W+', remove_all_punctuation(remove_all_spaces(text)))\n    return tokens\ndef get_stop_words():\n    '''\n    get_stop_words returns a set of stop words.\n    '''\n    stop_words = set()\n    with open('stopwords.txt', 'r') as f:\n        for line in f:\n            stop_words.add(line.strip().lower())\n    return stop_words\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_space_char(text):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\ndef remove_space_char_r(text):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    return re.sub(\" \", \"\", text.rstrip())\ndef remove_chars(text, ch):\n    '''\n    Write a function to remove characters in a string.\n    '''\n    return text.translate(str.maketrans('', '', ch))\ndef remove_all_chars(text):\n    '''\n    Write a function to remove all characters from a string.\n    '''\n    return text.translate(str.maketrans('', '',''))\ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\ndef remove_spaces_r(text):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    return re.sub(\" \", \"\", text.rstrip())\ndef remove_l_space(text):\n    '''\n    Write a function to remove the last space of a string.\n    '''\n    return re.sub(\" \", \"\", text[:-1])\ndef remove_r_space(text):\n    '''\n    Write a function to remove the last space of a string.\n    '''\n    return re.sub(\" \", \"\", text[-1:])\ndef replace_all_spaces(text):\n    '''\n    Write a function to replace all whitespaces in a string.\n    '''\n    return re.sub(\" \", \" \", text)\ndef replace_space_char(text):\n    '''\n    Write a function to replace spaces with a single space.\n    '''\n    return re.sub(\" \", \" \", text.replace(\" \", \" \"))\ndef replace_space_char_r(text):\n    '''\n    Write a function to replace spaces with a single space.\n    '''\n    return re.sub(\" \", \" \", text.replace(\" \", \" \").rstrip())\ndef replace_chars(text, ch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return re.sub(\" \", \"\", text.translate(str.maketrans(ch, \"\", \"\")))\ndef replace_spaces(text):\n    '''\n    Write a function to replace spaces in a string.\n    '''\n    return re.sub(\" \", \"\", text)\ndef replace_spaces_r(text):\n    '''\n    Write a function to replace spaces in a string.\n    '''\n    return re.sub(\" \", \"\", text.replace(\" \", \" \").rstrip())\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +',' ',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # your code here\n    \n    return re.sub(\"[^A-Za-z0-9]+\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    import re\n    import string\n    return re.sub('\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y + z == x * y * z\n    assert x + y "
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if len(x)!= len(y) or len(x)!= len(z):\n        return None\n    if x == y == z:\n        return 3\n    elif x!= y!= z:\n        return None\n    return None\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x>y and x>z:\n        return x\n    if y>x and y>z:\n        return y\n    if z>x and z>y:\n        return z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = count + 1\n    elif x == y or x == z:\n        count = count + 1\n    elif x == z or y == z:\n        count = count + 1\n    print(count)\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Add your code here\n    # Read the input parameters\n    a = int(input(\"Enter the first integer: \"))\n    b = int(input(\"Enter the second integer: \"))\n    c = int(input(\"Enter the third integer: \"))\n    # Complete the function\n    if a == b == c:\n        print(\"Your number of equal integers: {}\".format(a))\n    elif a == b:\n        print(\"Your number of equal integers: {}\".format(a))\n    elif a == c:\n        print(\"Your number of equal integers: {}\".format(a))\n    else:\n        print(\"Your number of equal integers: {}\".format(a))\n    pass\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x,y,z = sorted(x),sorted(y),sorted(z)\n    x_cnt = 0\n    y_cnt = 0\n    z_cnt = 0\n    for i in range(len(x)):\n        if x[i] == x[i-1] and x[i] == x[i+1] and x[i] == x[i-2] and x[i] == x[i+2]:\n            x_cnt += 1\n    for i in range(len(y)):\n        if y[i] == y[i-1] and y[i] == y[i+1] and y[i] == y[i-2] and y[i] == y[i+2]:\n            y_cnt += 1\n    for i in range(len(z)):\n        if z[i] == z[i-1] and z[i] == z[i+1] and z[i] == z[i-2] and z[i] == z[i+2]:\n            z_cnt += 1\n    return x_cnt,y_cnt,z_cnt\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #declare variable\n    print('Number of equal numbers in the three number.')\n    #create an empty list\n    list=[]\n    #iterate through the lists and insert the number of equal numbers in the list\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                #if the elements are the same\n                if(x[i]==y[j] and y[j]==z[k]):\n                    list.append(x[i])\n    #count the number of equal numbers in the list\n    print(len(list))\n    print(list)\n    \n    #tell the variable\n    return list\n    \n    \n    \n    \ndef test_four_zero_zero(x,y,z):\n    '''\n    Write a python function to count the number of zero numbers in four given integers.\n    '''\n    #declare variable\n    print('Number of zero numbers in the four number.')\n    #create an empty list\n    list=[]\n    #iterate through the lists and insert the number of zero numbers in the list\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                #if the elements are the same\n                if(x[i]==y[j] and y[j]==z[k]):\n                    list.append(x[i])\n    #count the number of zero numbers in the list\n    print(len(list))\n    print(list)\n    \n    #tell the variable\n    return list\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    if x>y and y>z:\n        print(\"Number of equal numbers: \",x-y+z)\n    elif y>x and x>z:\n        print(\"Number of equal numbers: \",y-x+z)\n    else:\n        print(\"Number of equal numbers: \",z-y+x)\n    \n    # else:\n    #     print(\"Number of equal numbers: \",z-y+x)\n        \n    \nx=int(input(\"Enter a number: \"))\ny=int(input(\"Enter another number: \"))\nz=int(input(\"Enter a third number: \"))\ntest_three_equal(x,y,z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        print(x,\" and \",y,\" and \",z,\" are equal\")\n    elif x!=y!=z:\n        print(x,\" and \",y,\" and \",z,\" are not equal\")\n    else:\n        print(x,\" and \",y,\" and \",z,\" are equal\")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x\n    b = y\n    c = z\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) <= 2:\n        return 0\n    \n    rotations = 0\n    \n    i = 1\n    while i <= len(arr):\n        arr[i] = arr[i-1]\n        rotations += 1\n        i += 1\n    \n    arr[i] = arr[0]\n    \n    for i in range(len(arr) - 1):\n        arr[i + 1] = arr[i]\n        \n    arr[len(arr) - 1] = arr[len(arr) - 2]\n    \n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    c = n // 2\n    \n    left = count_rotation(arr[:c])\n    right = count_rotation(arr[c:])\n    \n    return max(left, right) + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #for i in range(len(arr)):\n    #    arr[i], arr[i+1] = arr[i+1], arr[i]\n    #\n    #return arr.count(arr)\n    #  return sum(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    a = n//2\n    result = 0\n    i = 0\n    j = 0\n    while i < a and j < a:\n        if arr[i] < arr[j]:\n            i+=1\n        else:\n            j+=1\n        result += j - i\n    return result\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotation_count = 0 \n    for i in range(len(arr)-1):\n        arr[i+1],arr[i] = arr[i],arr[i+1]\n        rotation_count += 1\n        \n    return rotation_count\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return 2 if arr[0] >= arr[1] else 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    c = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            c += 1\n    return c\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    if l <= 1:\n        return 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotated_arr = []\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            rotated_arr.append(arr[i])\n            rotated_arr.append(arr[i+1])\n        else:\n            rotated_arr.append(arr[i+1])\n    return rotated_arr\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n    num_of_rotations = 0\n    current_rot_idx = 0\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = n\n    if n < 0:\n        return False\n    # step 1\n    if n == 0 or n == 1:\n        return True\n    # step 2\n    # if n > 1 and n%2 == 0:\n    #     return False\n    # step 3\n    while s % 2 == 0:\n        s = s // 2\n        if s == n:\n            return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n == 0) :\n        return True\n    if(n == 1) :\n        return False\n    \n    divisors = []\n    for i in range(1,int(n**0.5)+1) :\n        if(n % i == 0) :\n            divisors.append(i)\n    \n    if(n == int(n**0.5)) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return is_square(n) and is_perfect_square_recursive(n, 0, n)\n    \ndef is_square(n) :\n    '''\n    https://www.geeksforgeeks.org/is-a-square-number/\n    '''\n    return n == n\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(n**0.5)\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(n**0.5)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    elif n == 1 :\n        return False\n    elif n%2 == 0 :\n        return False\n    else :\n        for i in range(3,int(math.sqrt(n) + 1)) :\n            if n%i == 0 :\n                return False\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=0 :\n        return False\n    if n==2 :\n        return True\n    if n%2==0 :\n        return False\n    for i in range (1,int(math.sqrt(n) + 1)) :\n        if (n % i == 0) :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 0\n    while n>=i:\n        if (n%10)**2 == (i)**2:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n%2 == 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 2:\n        return True\n    \n    if (n % 2) == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef is_perfect_square_in_array(a) :\n    '''\n    Write a function to check whether the given array contains a perfect square or not. https://www.geeksforgeeks.org/check-if-given-array-contains-a-perfect-square-in-python/\n    '''\n    if a == []:\n        return True\n    \n    if a[0] == a[-1]:\n        return True\n    \n    if a[0] < a[-1]:\n        return False\n    \n    for i in range(0, len(a)-1, 2):\n        if a[i] < a[i+1]:\n            return False\n    \n    return True\n    \ndef is_prime(n) :\n    '''\n    Write a function to check whether given number is a prime or not.\n    https://www.geeksforgeeks.org/check-if-number-is-a-prime-in-python/\n    '''\n    if n == 2 or n == 3 or n % 2 == 0:\n        return True\n    \n    if n % 2 == 0 or n <= 2:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef is_prime_in_array(a) :\n    '''\n    Write a function to check whether the given array contains a prime or not.\n    https://www.geeksforgeeks.org/check-if-given-array-contains-a-prime-in-python/\n    '''\n    if a == []:\n        return True\n    \n    if a[0] == a[-1]:\n        return True\n    \n    if a[0] < a[-1]:\n        return False\n    \n    for i in range(0, len(a)-1, 2):\n        if a[i] < a[i+1]:\n            return False\n    \n    return True\n    \ndef is_power_of_two(n) :\n    '''\n    Write a function to check whether given number is a power of two or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-a-power-of-two-or-not-in-python/\n    '''\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return False\n    \n    if n & (n - 1) == 0:\n        return True\n    \n    return False\n    \ndef is_power_of_two_in_array(a) :\n    '''\n    Write a function to check whether the given array contains a power of two or not.\n    https://www.geeksforgeeks.org/check-if-given-array-contains-a-power-of-two-or-not-in-python/\n    '''\n    if a == []:\n        return True\n    \n    for i in range(0, len(a)-1, 2):\n        if a[i] & a[i+1] == 0:\n            return False\n    \n    return True\n    \ndef is_square(n) :\n    '''\n    Write a function to check whether given number is a square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-a-square-or-not-in-python/\n    '''\n    if n == 0:\n        return True\n    \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef is_prime_square(n) :\n    '''\n    Write a function to check whether the given number is a square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-a-square-or-not-in-python/\n    '''\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return False\n    \n    if n % 2 == 0 or n <= 2:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef is_prime_square_in_array(a) :\n    '''\n    Write a function to check whether the given array contains a square or not.\n    https://www.geeksforgeeks.org/check-if-given-array-contains-a-square-or-not-in-python/\n    '''\n    if a == []:\n        return True\n    \n    if a[0] == a[-1]:\n        return True\n    \n    for i in range(0, len(a)-1, 2):\n        if a[i] == a[i+1]:\n            return False\n    \n    return True\n    \ndef is_cube(n) :\n    '''\n    Write a function to check whether given number is a cube or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-a-cube-or-not-in-python/\n    '''\n    if n == 0:\n        return True\n    \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef is_cube_in_array(a) :\n    '''\n    Write a function to check whether the given array contains a cube or not.\n    https://www.geeksforgeeks.org/check-if-given-array-contains-a-cube-or-not-in-python/\n    '''\n    if a == []:\n        return True\n    \n    if a[0] == a[-1]:\n        return True\n    \n    for i in range(0, len(a)-1, 2):\n        if a[i] == a[i+1]:\n            return False\n    \n    return True\n    \ndef is_cube_in_array_in_array(a) :\n    '''\n    Write a function to check whether the given array contains a cube or not.\n    https://www.geeksforgeeks.org/check-if-given-array-contains-a-cube-or-not-in-python/\n    '''\n    if a == []:\n        return True\n    \n    for i in range(0, len(a)-1, 2):\n        if a[i] == a[i+1]:\n            return False\n    \n    return True\n    \ndef is_tetrahedron(n) :\n    '''\n    Write a function to check whether given number is a tetrahedron or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-a-tetrahedron-or-not-in-python/\n    '''\n    if n == 0:\n        return True\n    \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef is_tetrahedron_in_array(a) :\n    '''\n    Write a function to check whether the given array contains a tetrahedron or not.\n    https://www.geeksforgeeks.org/check-if-given-array-contains-a-tetrahedron-or-not-in-python/\n    '''\n    if a == []:\n        return True\n    \n    for i in range(0, len(a)-1, 2):\n        if a[i] == a[i+1]:\n            return False\n    \n    return True\n    \ndef is_cube_tetrahedron(n) :\n    '''\n    Write a function to check whether the given number is a cube of tetrahedron or not.\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 3:\n        return False\n    return arr[0] % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return True if len(arr)%2==0 else False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(i * i for i in arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for num in arr:\n        if num%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)%2==0:\n        even=False\n    else:\n        even=True\n    return even\narr=[2,4,6,8,10]\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return int(arr[0]*int(arr[1]))==0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)-1): \n        if arr[i] % 2 == 0: \n            return False \n    return True "
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even_product = 1\n    for i in arr: \n        even_product *= i\n    if even_product % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return sorted(lists, key = lambda x: x[-1], reverse = True)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_element = []\n    max_element.append([])\n    for index in range(len(lists)):\n        max_element.append([])\n        for item in lists[index]:\n            max_element[index].append(item)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n    elif len(lists) == 2:\n        return [max(lists[0]), max(lists[1])]\n    else:\n        max_l = []\n        max_l.append(max(lists[0]))\n        max_l.append(max(lists[1]))\n        for i in range(2, len(lists)):\n            max_l.append(max(max_l[i-1], max_l[i-2]))\n        return max_l\n    \nprint(max_sum_list([[2, 2], [3, 3]])"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == None or len(lists) == 0:\n        return None\n    max_elements = []\n    i = 0\n    for item in lists:\n        if item in max_elements:\n            i += 1\n        else:\n            max_elements.append(item)\n            i = 0\n    if i!= 0:\n        max_elements = max_elements[::-1]\n    return max_elements\n    \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in range(len(lists)):\n        if lists[i] > 0:\n            max_sum.append(lists[i])\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = [0,0]\n    for i in lists:\n        if max_sum[1] < sum(i):\n            max_sum = i\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # TODO: Replace this with your code\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max(max_list):\n                max_list = lists[i][j]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the highest sum in a list of lists\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > lists[i][j] :\n                lists[i][j] = lists[i][j]\n    return lists\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_list = []\n    \n    for i in range(len(lists)):\n        list_to_add = lists[i]\n        sum_of_list = 0\n        for item in list_to_add:\n            sum_of_list += item\n        new_list.append([list_to_add, sum_of_list])\n    new_list.sort(key = lambda x: x[1])\n    return new_list[-1]\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #initialize max value as 0\n    max_value = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    u_c = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            u_c += 1\n    return u_c\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    for char in test_str:\n        if char.isupper():\n            if len(char) > max_len:\n                max_len = len(char)\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # TODO: Write your code here\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            if char > max_run:\n                max_run = char\n        else:\n            if char < max_run:\n                max_run = char\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    num_of_upper = 0\n    num_of_lower = 0\n    for i in test_str:\n        if i.isupper():\n            num_of_upper += 1\n        else:\n            num_of_lower += 1\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def check(s, i):\n        if s[i].isupper():\n            return True\n        elif s[i].islower():\n            return False\n        else:\n            return False\n    max_u = 0\n    for i in range(len(test_str)):\n        if check(test_str, i):\n            max_u = max(max_u, i)\n    return max_u\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in test_str:\n        if i.isupper():\n            if max_run < i.upper():\n                max_run = i.upper()\n            if max_run < i.lower():\n                max_run = i.lower()\n        else:\n            if max_run < i.lower():\n                max_run = i.lower()\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            if max_run < char.upper():\n                max_run = char.upper()\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    index = 0\n    odd = nums[0]\n    while index < len(nums):\n        if nums[index] % 2!= 0:\n            index += 1\n        else:\n            index = index + 1\n            odd = odd\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    if len(odds) > 0:\n        return odds[0]\n    else:\n        return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return -1\n    \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fifth_odd(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef sixth_odd(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef seventh_odd(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef eighth_odd(nums):\n    '''\n    Write a python function to find the eighth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef ninth_odd(nums):\n    '''\n    Write a python function to find the ninth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef tenth_odd(nums):\n    '''\n    Write a python function to find the tenth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    # Your code here\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return nums[i]\n    return -1\n    \ndef second_even(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef third_even(nums):\n    '''\n    Write a python function to find the third even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fourth_even(nums):\n    '''\n    Write a python function to find the fourth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fifth_even(nums):\n    '''\n    Write a python function to find the fifth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef sixth_even(nums):\n    '''\n    Write a python function to find the sixth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef seventh_even(nums):\n    '''\n    Write a python function to find the seventh even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef eighth_even(nums):\n    '''\n    Write a python function to find the eighth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef ninth_even(nums):\n    '''\n    Write a python function to find the ninth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef tenth_even(nums):\n    '''\n    Write a python function to find the tenth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef first_odd_s(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return -1\n    \ndef second_odd_s(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef third_odd_s(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fourth_odd_s(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fifth_odd_s(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef sixth_odd_s(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef seventh_odd_s(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef eighth_odd_s(nums):\n    '''\n    Write a python function to find the eighth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef ninth_odd_s(nums):\n    '''\n    Write a python function to find the ninth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef tenth_odd_s(nums):\n    '''\n    Write a python function to find the tenth odd number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef first_even_s(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    # Your code here\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return nums[i]\n    return -1\n    \ndef second_even_s(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef third_even_s(nums):\n    '''\n    Write a python function to find the third even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fourth_even_s(nums):\n    '''\n    Write a python function to find the fourth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef fifth_even_s(nums):\n    '''\n    Write a python function to find the fifth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef sixth_even_s(nums):\n    '''\n    Write a python function to find the sixth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef seventh_even_s(nums):\n    '''\n    Write a python function to find the seventh even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef eighth_even_s(nums):\n    '''\n    Write a python function to find the eighth even number in a given list of numbers.\n    '''\n    # Your code here\n    return -1\n    \ndef ninth_even_s(nums):\n    ''"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return None\n    \n    nums.sort()\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n            if count % 2 == 0:\n                return nums[i]\n        \n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    num_list=nums\n    if num_list==[]:\n        return None\n    \n    # if there are no odd numbers in the list\n    if len(num_list)<=1:\n        return num_list[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if (nums[i]%2)!= 0:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n    if len(nums)<2:\n        return \"Please enter two numbers in a list.\"\n    else:\n        return nums[0]\n    #raise NotImplementedError\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    \n    return None\n    \n    \n    \n    \n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    result = True\n    for i in range(len(test_tup)):\n        if test_tup[i] not in range(1, K+1):\n            result = False\n    return result\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i in K:\n            return True\n        return False\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return sorted(test_tup, key=lambda x: x[1])[:K]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > 1:\n        for i in range(0, len(test_tup) - 1):\n            if test_tup[i][0] > test_tup[i][1]:\n                return False\n    return True\n    \ndef count_K(test_tup, K):\n    '''\n    Write a function to count the number of the number of\n    values that are greater than K.\n    '''\n    count = 0\n    for i in range(0, len(test_tup) - 1):\n        if test_tup[i][0] > test_tup[i][1]:\n            count += 1\n    if K >= count:\n        print(K, 'is the largest number in tuple.')\n    else:\n        print(K, 'is not the largest number in tuple.')\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= 2:\n        raise TypeError('k must be a 2-tuple.')\n    if isinstance(K, int):\n        if K < 1:\n            raise ValueError('k must be positive.')\n    else:\n        raise TypeError('k must be a 2-tuple.')\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return 'K is already present.'\n    return 'K does not contain the word.'\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # check if the given list contains the k\n    if test_tup[0] not in K:\n        return False\n    # check if the k is greater than the length of the given list\n    elif K.index(test_tup[0]) < len(K) - 1:\n        # check if the k is in the given list, if not return false\n        return check_K(test_tup, K[K.index(test_tup[0]) + 1:])\n    # check if the k is in the given list, if not return false\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (len(test_tup) % 2!= 0):\n        return False\n    count = 0\n    if(len(test_tup) == 2):\n        count = 1\n    else:\n        count = 0\n        for i in range(1, len(test_tup) - 1):\n            if test_tup[i][0] == test_tup[i + 1][0]:\n                if (count == 0):\n                    count = 1\n                    continue\n                elif (count == 1):\n                    count = 0\n                    continue\n                else:\n                    return False\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    lst = list(test_tup)\n    for i in range(len(lst)):\n        if lst[i] in K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all([test_tup[i] == K[i] for i in range(len(test_tup))])\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x, y in zip(test_tup1, test_tup2):\n        if x < y:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i,j in zip(test_tup2, test_tup1):\n        if i < j:\n            print(\"The tuple is not ordered!\")\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            print(f'{test_tup1[i]} is smaller than {test_tup2[i]}')\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n    \ntest_tup1 = (20, 30, 40)\ntest_tup2 = (10, 20, 30, 40)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    # check if second tuple contains duplicate elements\n    check_duplicates = []\n    for item in test_tup2:\n        if item in test_tup1:\n            check_duplicates.append(item)\n        else:\n            pass\n    \n    # check if there is any duplicate elements in second tuple\n    if len(check_duplicates) > 0:\n        print(\"ERROR! duplicate elements in the second tuple!\")\n    else:\n        print(\"Both tuples contain the same elements!\")\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            print(i)\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # add code here\n    '''\n    * for i in range(1, len(test_tup1)):\n        for j in range(1, len(test_tup2)):\n            if test_tup1[i] < test_tup2[j]:\n                return True\n        return False\n    '''\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[1] < test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1_sum = 0\n    test_tup2_sum = 0\n"
    }
]