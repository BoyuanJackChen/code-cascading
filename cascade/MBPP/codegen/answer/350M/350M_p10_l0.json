[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n            \n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set()\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.add(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a,b = test_tup1\n    c,d = test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    result = []\n    \n    for tup in test_tup1:\n        if tup in test_tup2:\n            result.append(tup)\n            \n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #create empty list for the shared elements\n    shared = []\n    #convert tuples to list\n    a = list(test_tup1)\n    b = list(test_tup2)\n    #create a list of tuples with the tuples as elements\n    shared.extend(a)\n    shared.extend(b)\n    #return the list of tuples with the shared elements\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # using a set data structure\n    \n    # Create a set with the first inputted list as its key\n    # Create a set with the second inputted list as its value\n    \n    # Create a set with the first inputted list as its key\n    # Create a set with the second inputted list as its value\n    \n    shared_set = set(test_tup1) & set(test_tup2)\n    \n    # return the elements of the shared set\n    return list(shared_set)\n    \n    # Write your code here\n    \n    \n    "
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(dict(Counter(test_tup1) & Counter(test_tup2)).values())\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup = test_tup1 + test_tup2\n    test_tup_set = set(test_tup)\n    return test_tup_set\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n in range(2, int(math.sqrt(n) + 1)):\n        return False\n    elif n in range(int(math.sqrt(n)), 2*int(math.sqrt(n))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n)+1),2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    if n>=3:\n        if n==3:\n            return True\n        else:\n            for i in range(3,int(math.sqrt(n)+1),2):\n                if n%i==0:\n                    return False\n            return True\ndef is_pentagonal(n):\n    '''\n    Write a python function to identify pentagonal numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n==3:\n        return True\n    if n%2==0:\n        if n%6==0:\n            return True\n        if n%3==0:\n            return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        if n%12==0:\n            return True\n    if n%12==0:\n        return False\n    if n>=4:\n        if n%6==0:\n            if n%3==0:\n                if n%2==0:\n                    return True\n                else:\n                    return False\n            if n%2==0:\n                if n%4==0:\n                    if n%12==0:\n                        return True\n                else:\n                    return False\n            else:\n                if n%12==0:\n                    return True\n                else:\n                    return False\ndef is_triangular(n):\n    '''\n    Write a python function to identify triangular numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_circle(n):\n    '''\n    Write a python function to identify circle numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_square(n):\n    '''\n    Write a python function to identify square numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_square_roots(n):\n    '''\n    Write a python function to identify square roots.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_even_square(n):\n    '''\n    Write a python function to identify even square numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_square_progression(n):\n    '''\n    Write a python function to identify square progression numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_prime_progression(n):\n    '''\n    Write a python function to identify prime progression numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_prime_factor(n):\n    '''\n    Write a python function to identify prime factors.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_fibonacci(n):\n    '''\n    Write a python function to identify fibonacci numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_triangular_progression(n):\n    '''\n    Write a python function to identify triangular progression numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n    else:\n        if n%4==0:\n            if n%12==0:\n                return True\n            else:\n                return False\n        else:\n            if n%12==0:\n                return True\n            else:\n                return False\ndef is_square_progression_roots(n):\n    '''\n    Write a python function to identify square progression roots.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    if n % 3 == 0:\n        return False\n    \n    if n % 5 == 0:\n        return False\n    \n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return False\n    if n==4 or n==5:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    \n    return is_prime(n//2)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # put the values in a heap\n    nums.sort(reverse=True)\n    # return the largest values\n    return heapq.nlargest(n,nums)\n    # O(n log n)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while n>0:\n        val = hq.heappop(nums)\n        n -= 1\n        return val\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 1:\n        return nums\n    if n == 2:\n        return sorted(nums, reverse=True)\n    else:\n        q = []\n        heapq.heapify(q)\n        # iterate through the list and add the largest value\n        for i in range(n):\n            heapq.heappush(q,nums[i])\n        # remove the first item\n        nums.remove(q[0])\n        # iterate through the list and add the values\n        for i in range(n):\n            heapq.heappush(q,heapq.heappop(q)+nums[i])\n        # return the reversed list\n        return heapq.heapify(q)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    heap = []\n    heapq.heapify(heap)\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n    result = []\n    while heap:\n        value = heapq.heappop(heap)\n        result.append(value)\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==1: return nums\n    if n==2: return sorted(nums, reverse=True)\n    if n==3: return sorted(nums, reverse=True, key=lambda x:x[1])\n    # return [sorted(nums,reverse=True) for x in nums]\n    return hq.nlargest(n,nums)\n    # return [heapq.nlargest(n,nums) for x in nums]\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==1: return nums\n    if n==2: return sorted(nums, reverse=True)\n    if n==3: return sorted(nums, reverse=True, key=lambda x:x[0])\n    return hq.nsmallest(n,nums)\n    # return [heapq.nsmallest(n,nums) for x in nums]\ndef heap_queue_heapify(nums,n):\n    '''\n    Write a function to return a heap with the largest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n)\n    # return [hq.heapify(nums,n) for x in nums]\ndef heap_queue_build_heap(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_max(nums,n):\n    '''\n    Write a function to return a heap with the largest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_max_max(nums,n):\n    '''\n    Write a function to return a heap with the largest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_min(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_max(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_min_max(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_max_max(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_max_min(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,nums[x])\n    print(\"heap: \",heap)\n    for y in range(n-1,0,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    print(\"heap: \",heap)\n    for y in range(n-1,0,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_smallest_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    print(\"heap: \",heap)\n    for y in range(n-1,0,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_smallest_desc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    print(\"heap: \",heap)\n    for y in range(n-1,0,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted_desc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted_reverse(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted_reverse_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted_reverse_desc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted_reverse_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_sorted_reverse_desc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in sorted order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_smallest_rev(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in reverse order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n-1,-1,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_smallest_rev_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in reverse order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n-1,-1,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_smallest_rev_desc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in reverse order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n-1,-1,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n    print(\"heap: \",heap)\ndef heap_queue_smallest_rev_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in reverse order.\n    '''\n    heap=[]\n    for x in range(n):\n        heapq.heappush(heap,-nums[x])\n    for y in range(n-1,-1,-1):\n        print(\"y: \",y,\":\",heapq.heappop(heap))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for num in nums:\n        heapq.heappush(q,(-num,num))\n    if len(q) < n:\n        heapq.heappop(q)\n    return hq.nlargest(n,q)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    # create a heap of size n\n    heap = []\n    \n    # make all numbers in the list as negative\n    for x in nums:\n        heapq.heappush(heap,-x)\n    \n    # print the elements of the heap\n    print(heap)\n    \n    # loop until heap is empty\n    while heap:\n        # pop the smallest element and append it to the queue\n        # put the smallest element in the heap if there are still elements in the queue\n        temp_element = heapq.heappop(heap)\n        print(temp_element)\n        nums.append(temp_element)\n        \n        # check if the popped element is the last element\n        if temp_element == n:\n            break\n            \n        # check the next elements\n        for next in range(len(nums)):\n            if nums[next] <= temp_element:\n                # if the popped element is smaller than the next element, increase its priority by 1\n                heapq.heapify(heap)\n                heapq.heappush(heap,num)\n                heapq.heapify(heap)\n                break\n            \n    print(nums)\n    \nnums = [-10,12,34,56,78,90,90,88,90,45,56,90,90,90,90,90]\nnums = [10,12,34,56,78,90,90,88,90,45,56,90,90,90,90,90]\nheap_queue_largest(nums,90)\n    "
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #If the list is empty, return None.\n    if len(nums)==0:\n        return None\n    heapq.heapify(nums)\n    #The smallest element is stored in first position, so put it in the list.\n    smallest=nums[0]\n    for i in range(len(nums)):\n        if smallest<nums[i]:\n            heapq.heapreplace(nums,nums[i])\n            heapq.heapify(nums)\n            smallest=nums[0]\n    return smallest\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 10:\n        return False\n    elif x % 10!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x % 2\n    if y == 0:\n        return 0\n    else:\n        return 1\n        "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & x - 1) == 0"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return True\n    if x!= 2:\n        return False\n    if x == 3:\n        return False\n    if x == 4:\n        return False\n    if x == 5:\n        return False\n    if x == 6:\n        return False\n    if x == 7:\n        return False\n    if x == 8:\n        return False\n    if x == 9:\n        return False\n    if x == 10:\n        return False\n    if x == 11:\n        return False\n    if x == 12:\n        return False\n    if x == 13:\n        return False\n    if x == 14:\n        return False\n    if x == 15:\n        return False\n    if x == 16:\n        return False\n    if x == 17:\n        return False\n    if x == 18:\n        return False\n    if x == 19:\n        return False\n    if x == 20:\n        return False\n    if x == 21:\n        return False\n    if x == 22:\n        return False\n    if x == 23:\n        return False\n    if x == 24:\n        return False\n    if x == 25:\n        return False\n    if x == 26:\n        return False\n    if x == 27:\n        return False\n    if x == 28:\n        return False\n    if x == 29:\n        return False\n    if x == 30:\n        return False\n    if x == 31:\n        return False\n    if x == 32:\n        return False\n    if x == 33:\n        return False\n    if x == 34:\n        return False\n    if x == 35:\n        return False\n    if x == 36:\n        return False\n    if x == 37:\n        return False\n    if x == 38:\n        return False\n    if x == 39:\n        return False\n    if x == 40:\n        return False\n    if x == 41:\n        return False\n    if x == 42:\n        return False\n    if x == 43:\n        return False\n    if x == 44:\n        return False\n    if x == 45:\n        return False\n    if x == 46:\n        return False\n    if x == 47:\n        return False\n    if x == 48:\n        return False\n    if x == 49:\n        return False\n    if x == 50:\n        return False\n    if x == 51:\n        return False\n    if x == 52:\n        return False\n    if x == 53:\n        return False\n    if x == 54:\n        return False\n    if x == 55:\n        return False\n    if x == 56:\n        return False\n    if x == 57:\n        return False\n    if x == 58:\n        return False\n    if x == 59:\n        return False\n    if x == 60:\n        return False\n    if x == 61:\n        return False\n    if x == 62:\n        return False\n    if x == 63:\n        return False\n    if x == 64:\n        return False\n    if x == 65:\n        return False\n    if x == 66:\n        return False\n    if x == 67:\n        return False\n    if x == 68:\n        return False\n    if x == 69:\n        return False\n    if x == 70:\n        return False\n    if x == 71:\n        return False\n    if x == 72:\n        return False\n    if x == 73:\n        return False\n    if x == 74:\n        return False\n    if x == 75:\n        return False\n    if x == 76:\n        return False\n    if x == 77:\n        return False\n    if x == 78:\n        return False\n    if x == 79:\n        return False\n    if x == 80:\n        return False\n    if x == 81:\n        return False\n    if x == 82:\n        return False\n    if x == 83:\n        return False\n    if x == 84:\n        return False\n    if x == 85:\n        return False\n    if x == 86:\n        return False\n    if x == 87:\n        return False\n    if x == 88:\n        return False\n    if x == 89:\n        return False\n    if x == 90:\n        return False\n    if x == 91:\n        return False\n    if x == 92:\n        return False\n    if x == 93:\n        return False\n    if x == 94:\n        return False\n    if x == 95:\n        return False\n    if x == 96:\n        return False\n    if x == 97:\n        return False\n    if x == 98:\n        return False\n    if x == 99:\n        return False\n    if x == 100:\n        return False\n    if x == 101:\n        return False\n    if x == 102:\n        return False\n    if x == 103:\n        return False\n    if x == 104:\n        return False\n    if x == 105:\n        return False\n    if x == 106:\n        return False\n    if x == 107:\n        return False\n    if x == 108:\n        return False\n    if x == 109:\n        return False\n    if x == 110:\n        return False\n    if x == 111:\n        return False\n    if x == 112:\n        return False\n    if x == 113:\n        return False\n    if x == 114:\n        return False\n    if x == 115:\n        return False\n    if x == 116:\n        return False\n    if x == 117:\n        return False\n    if x == 118:\n        return False\n    if x == 119:\n        return False\n    if x == 120:\n        return False\n    if x == 121:\n        return False\n    if x == 122:\n        return False\n    if x == 123:\n        return False\n    if x == 124:\n        return False\n    if x == 125:\n        return False\n    if x == 126:\n        return False\n    if x == 127:\n        return False\n    if x == 128:\n        return False\n    if x == 129:\n        return False\n    if x == 130:\n        return False\n    if x == 131:\n        return False\n    if x == 132:\n        return False\n    if x == 133:\n        return False\n    if x == 134:\n        return False\n    if x == 135:\n        return False\n    if x == 136:\n        return False\n    if x == 137:\n        return False\n    if x == 138:\n        return False\n    if x == 139:\n        return False\n    if x == 140:\n        return False\n    if x == 141:\n        return False\n    if x == 142:\n        return False\n    if x == 143:\n        return False\n    if x == 144:\n        return False\n    if x == 145:\n        return False\n    if x == 146:\n        return False\n    if x == 147:\n        return False\n    if x == 148:\n        return False\n    if x == 149:\n        return False\n    if x == 150:\n        return False\n    if x == 151:\n        return False\n    if x == 152:\n        return False\n    if x == 153:\n        return False\n    if x == 154:\n        return False\n    if x == 155:\n        return False\n    if x == 156:\n        return False\n    if x == 157:\n        return False\n    if x == 158:\n        return False\n    if x == 159:\n        return False\n    if x == 160:\n        return False\n    if x == 161:\n        return False\n    if x == 162:\n        return False\n    if x == 163:\n        return False\n    if x == 164:\n        return False\n    if x == 165:\n        return False\n    if x == 166:\n        return False\n    if x == 167:\n        return False\n    if x == 168:\n        return False\n    if x == 169:\n        return False\n    if x == 170:\n        return False\n    if x == 171:\n        return False\n    if x == 172:\n        return False\n    if x == 173:\n        return False\n    if x == 174:\n        return False\n    if x == 175:\n        return False\n    if x == 176:\n        return False\n    if x == 177:\n        return False\n    if x == 178:\n        return False\n    if x == 179:\n        return False\n    if x == 180:\n        return False\n    if x == 181:\n        return False\n    if x == 182:\n        return False\n    if x ="
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # create a variable for both x and y, then compare them \n    # the first element to the variable\n    # and if the first value is less than the second, then x is less than y \n    # while the second value is greater than the first, then y is greater than x\n    if x > y:\n        return True\n    elif x < y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x >= 2: \n        if x%2 == 1: \n            return True\n        x = x//2\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x > 0): \n        if (x % 2 == 0): \n            return True\n        else: \n            return False\n    else: \n        if (x % 2 == 0): \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        return (x & 1) == 1\n    else:\n        return (x & 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power_of_2 = x.bit_length()\n    return power_of_2 == 2\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    search_string = []\n    for word in text.split():\n        search_string.append(len(word))\n    return search_string\ndef find_words_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    search_string = []\n    for word in text.split():\n        if len(word) >= 4:\n            search_string.append(word)\n    return search_string\ndef find_longest_first(text):\n    '''\n    Write a function to find the longest first word in a string.\n    '''\n    words = text.split()\n    longest = -1\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n    return longest_word\ndef find_longest_last(text):\n    '''\n    Write a function to find the longest last word in a string.\n    '''\n    words = text.split()\n    longest = -1\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n    return longest_word\ndef find_longest_middle(text):\n    '''\n    Write a function to find the longest middle word in a string.\n    '''\n    words = text.split()\n    longest = -1\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n    return longest_word\ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    words = text.split()\n    longest = -1\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n    return longest_word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #Split string by spaces\n    space = re.compile('\\s+')\n    #Create a space-cleaned version of the string\n    space_cleaned = space.sub(' ', text)\n    #Find all words which are at least 4 characters long in the string\n    char_long = []\n    for word in space_cleaned.split():\n        if len(word) >= 4:\n            char_long.append(word)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Create an empty list to append the words to.\n    long_words = []\n    # Create an empty string to contain the word of interest.\n    found_word = ''\n    # Loop through each character in the string and check for a minimum of 4 characters.\n    for i in text:\n        if len(i) >= 4 and re.match('[a-zA-Z]+', i):\n            if re.match('[a-zA-Z]+', i):\n                found_word += i\n                # If the word found is not empty print it.\n                if found_word!= '':\n                    print(found_word)\n                    # Loop through all the remaining characters of the string and append them to the list.\n                    for j in range(len(text) - 1):\n                        if re.match('[a-zA-Z]+', text[j:j+4]):\n                            # If the word found is not empty print it.\n                            if found_word!= '':\n                                print(found_word)\n                                # Append the word to the list.\n                                long_words.append(found_word)\n                                # Go back to the starting position of the string and print the word found.\n                                text = text[:j] + text[j+4:]\n                            # If the word found is empty print it.\n                            if found_word == '':\n                                print(text[j:])\n    return long_words\ndef main():\n    input_str = \"Hello World\"\n    print(find_char_long(input_str))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_regex = re.compile(r'[^\\w]')\n    return char_regex.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    char_count = {}\n    for word in text.split():\n        if len(word) >= 4:\n            if word in char_count:\n                char_count[word] += 1\n            else:\n                char_count[word] = 1\n    return char_count\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # TODO: Write a function to find all words which are at least 4 characters long in a string.\n    words = re.findall('[a-zA-Z][a-zA-Z0-9]*', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"[^a-zA-Z0-9\\']+\"\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #pattern = re.compile('[a-zA-Z0-9 _\\-/\\!\\:\\;\\?\\=\\,\\.\\:\\\\]')\n    pattern = re.compile('[a-zA-Z0-9 _\\-/\\!\\:\\;\\?\\=\\,\\.\\:\\\\]')\n    res = pattern.findall(text)\n    #print(res)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters short in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters short in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_short_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters short and at least 3 characters short in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters short and at least 3 characters long and at least 3 characters short in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters short and at least 3 characters long and at least 3 characters long and at least 3 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long_and_long_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long in a string.\n    '''\n    pattern = re.compile(\"\\w+\\w+\")\n    wordlist = []\n    for line in text.split(\"\\n\"):\n        wordlist.extend(pattern.findall(line))\n    return wordlist\ndef find_char_long_and_short_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long_and_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long and at least 3 characters long an"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # text = text.lower()\n    regex_pattern = r'[^a-zA-Z0-9\\s]'\n    result = re.findall(regex_pattern, text)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num ** 2\n    return sum"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    lst = []\n    for i in nums:\n        lst.append(i**2)\n    return lst\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums = list(nums)\n    squared = []\n    for n in nums:\n        squared.append(n*n)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i]**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for element in nums:\n        squares.append(element**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        num**2\n    "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # string checking\n    if not str: return 'Empty String'\n    \n    # if string is palindrome, return 1\n    if str == str[::-1]: return 1\n    \n    # if string is not palindrome, return 0\n    if str[::-1]!= str: return 0\n    \n    # if the string is a palindrome\n    d={'a':2,'b':2,'c':2,'d':2,'e':2,'f':2,'g':2,'h':2,'i':2,'j':2,'k':2,'l':2,'m':2,'n':2,'o':2,'p':2,'q':2,'r':2,'s':2,'t':2,'u':2,'v':2,'w':2,'x':2,'y':2,'z':2}\n    \n    # store the length of string\n    len_string=len(str)\n    \n    # store the starting index\n    i=0\n    \n    # store the ending index\n    j=len_string-1\n    \n    # iterate while len_string is less than the minimum lenght required to get the same string\n    while i<j:\n        # number of rotations required\n        count=0\n        \n        # if string is palindrome, return 1\n        if str[i:j]==str[::-1]:\n            count+=1\n            \n            # if the number of rotations is more than the minimum required, return 0\n            if count > d[str[i:j]]:\n                return 0\n            \n            # if the number of rotations is less than the minimum required, return 0\n            if count < d[str[i:j]]:\n                return 0\n            \n            # increment j to increase the index\n            j-=1\n            \n            # increment i to increase the index\n            i+=1\n        \n        # if string is not palindrome\n        else:\n            # increment j to increase the index\n            j-=1\n            \n            # increment i to increase the index\n            i+=1\n        \n    # if all rotations are complete, return 1\n    return 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    lst = list(str)\n    rotations = 0\n    i = 0\n    while i < len(lst):\n        j = i\n        while j < len(lst):\n            #print(lst[j])\n            lst[j],lst[j+1] = lst[j+1],lst[j]\n            j += 2\n        i += 1\n    #print(lst)\n    if len(set(lst))!= len(lst):\n        rotations = 1\n    else:\n        rotations = 0\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    from itertools import cycle\n    rotations = []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # YOUR CODE HERE\n    pass\n    \nprint(find_Rotations('''GACGT'''))\nprint(find_Rotations('GACGT'))\nprint(find_Rotations('TACATGTTAG'))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    rotations = 0\n    # 2nd step\n    for i in range(1, len(str)):\n        rotations += int(str[i-1]) * 2\n    # 3rd step\n    rotations += int(str[-1]) * 2\n    # 4th step\n    rotations += int(str[-2]) * 2\n    # 5th step\n    rotations += int(str[-3]) * 2\n    # 6th step\n    rotations += int(str[-4]) * 2\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def count(s, n): \n        '''\n        Count the number of rotations \n        '''\n        if len(s) == 0: \n            return 0\n        count = 0\n        for i in range(n): \n            if s[i] == s[-1]: \n                count += 1\n        return count \n        \n    if len(str) < 3: \n        return 0\n    \n    rotations = [] \n    min_rot = 0\n    \n    for i in range(len(str)): \n        rotations.append(str[i]) \n        \n    for i in range(len(rotations)): \n        if rotations[i]!= str[i]: \n            rotations[i] = str[i] + rotations[i] \n        \n        if count(str, i) < min_rot: \n            min_rot = count(str, i) \n    \n    return min_rot \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    occurences = {}\n    # Iterate through each character in the string \n    for char in str: \n        # Check if the character is already in the dictionary \n        if char in occurences: \n            occurences[char] += 1\n        # If the character is not in the dictionary, increment by one \n        else: \n            occurences[char] = 1\n    # Iterate through the dictionary to find the key \n    for key, value in occurences.items(): \n        # If the value is greater than the key value, then return 0 (no rotations) \n        if value > 1: \n            return 0\n    # Return the minimum number of rotations \n    return occurences.items().count(1) \n        \nprint(find_Rotations(\"abcdefg\" ))"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)): \n        rotations = rotations + 1\n        for j in range(i+1, len(str)): \n            if str[i] == str[j]: \n                rotations = rotations - 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == \"\":\n        return 0\n    if len(str) == 1:\n        return 1\n    if len(str) == 2:\n        if str[0]!= str[1]:\n            return 1 + find_Rotations(str[1:])\n        else:\n            return 1\n    if str[0]!= str[1]:\n        if len(str) >=3:\n            if str[2] == str[3]:\n                return 1 + find_Rotations(str[1:3])\n            else:\n                return 1 + find_Rotations(str[1:4])\n        else:\n            if str[0] == str[1]:\n                return 1 + find_Rotations(str[1:2])\n            else:\n                return 1 + find_Rotations(str[1:3])\n    else:\n        if len(str) >=3:\n            if str[2] == str[3]:\n                return 1 + find_Rotations(str[1:2])\n            else:\n                return 1 + find_Rotations(str[1:4])\n        else:\n            if str[0] == str[1]:\n                return 1 + find_Rotations(str[1:3])\n            else:\n                return 1 + find_Rotations(str[1:4])\n            \n    \ndef FindRotations(str, rotations):\n    '''\n    Write a python function to find the minimum number of rotations required to get the same string.\n    '''\n    if rotations == 0:\n        return 0\n    if rotations < 0:\n        return 1 + FindRotations(str, -rotations)\n    if rotations > 0:\n        return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if(str[i]>str[i-1]):\n            count+=1\n    return count\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    res = ''\n    s = s.replace(ch,'')\n    s = s.replace(ch,'')\n    return res + s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # code here\n    if len(s) == 0:\n        return ''\n    elif len(s) > 0 and s[0] == ch:\n        return s[1:]\n    else:\n        return s[:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    while (i < len(s)):\n        if (s[i] == ch):\n            s = s[:i] + s[i+1:]\n            i = 0\n        else:\n            i += 1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,\"\")\n    if len(s)==0:\n        return s\n    s.replace(\" \",\"\")\n    return s[0:len(s)-1]\n    \ndef main():\n    print(\"Enter a string\")\n    s=input()\n    print(\"Enter a character to be removed\")\n    ch=input()\n    s=remove_Occ(s,ch)\n    print(\"After removing first and last occurence of the character\",ch,\"of the given string\",s)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    occ_start = 0\n    occ_end = s.find(ch)\n    if occ_start == -1:\n        return s\n    if occ_end == -1:\n        return s[:occ_start] + s[occ_end + 1:]\n    else:\n        return s[:occ_start] + s[occ_end:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch)\n    if s == \"\":\n        return \"\"\n    if len(s) == 1:\n        return s\n    return s[0:-1] + s[-1]\ndef remove_ch(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch)\n    if s == \"\":\n        return \"\"\n    if len(s) == 1:\n        return s\n    return s[0:-1] + s[-1]\ndef reverse(s): \n    '''\n    Write a python function to reverse the string.\n    '''\n    s = s[::-1]\n    if s == \"\":\n        return \"\"\n    return s\ndef remove_space(s): \n    '''\n    Write a python function to remove spaces from the string.\n    '''\n    s = s.strip()\n    if s == \"\":\n        return \"\"\n    return s\ndef remove_punct(s): \n    '''\n    Write a python function to remove punctuations from the string.\n    '''\n    s = s.replace(\",\",\" \")\n    s = s.replace(\".\",\" \")\n    s = s.replace(\"(\",\" \")\n    s = s.replace(\")\",\" \")\n    s = s.replace(\"'\",\" \")\n    s = s.replace(\"\u2019\",\" \")\n    s = s.replace(\"'\",\" \")\n    s = s.replace('\"', \" \")\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = s.replace('&',' ')\n    s = s.replace('\\n',' ')\n    s = s.replace('\\t',' ')\n    s = s.replace('\\r',' ')\n    s = s.replace('|',' ')\n    s = s.replace('_',' ')\n    s = s.replace('+',' ')\n    s = s.replace('*',' ')\n    s = s.replace('=',' ')\n    s = s.replace('~',' ')\n    s = s.replace('!',' ')\n    s = s.replace('@',' ')\n    s = s.replace('#',' ')\n    s = s.replace('$',' ')\n    s = s.replace(':',' ')\n    s = s.replace(';',' ')\n    s = "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # If the string is empty, return 0\n    if s == \"\":\n        return 0\n    # If the character is not present in the string, return -1\n    if ch not in s:\n        return -1\n    # If the character is present, return -1\n    if s.find(ch)!= -1:\n        return -1\n    # Otherwise, return the index of the character\n    return s.index(ch)\n    "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch_set = set(s)\n    index = 0\n    for i in range(len(s)):\n        if s[i] not in ch_set:\n            index = i\n            break\n    if index == 0:\n        print(\"First occurrence was not removed\")\n    else:\n        print(s[:index] + s[index+1:])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    '''\n    s = \"Python is a widely used word game. It was mainly used in many places throughout the world, in many contexts, to represent the whole world and also some other languages. It is a very natural language used in many places as well as in other languages.\"\n    ch = \"h\"\n    '''\n    # remove first occurrence of \"h\" and last occurrence of \"t\"\n    s = s.replace(\"h\",\"\")\n    s = s.replace(\"t\",\"\")\n    # print(s)\n    # remove all occurrences of \"h\" and \"t\"\n    s = s.replace(\"h\",\"\")\n    s = s.replace(\"t\",\"\")\n    # print(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,\"\")\n    return s\ndef main():\n    '''\n    Main function to call both functions.\n    '''\n    str = input(\"Enter a string: \")\n    if len(str) >0:\n        print(remove_Occ(str, '$'))\n        print(remove_Occ(str, '%'))\n        print(remove_Occ(str, '#'))\n        print(remove_Occ(str, '&'))\n        print(remove_Occ(str, '?'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '\\''))\n        print(remove_Occ(str, '\"'))\n        print(remove_Occ(str, '\"'))\n        print(remove_Occ(str, '\"'))\n        print(remove_Occ(str, '#'))\n        print(remove_Occ(str, '#'))\n        print(remove_Occ(str, '#'))\n        print(remove_Occ(str, '!'))\n        print(remove_Occ(str, '!'))\n        print(remove_Occ(str, '.'))\n        print(remove_Occ(str, '('))\n        print(remove_Occ(str, ')'))\n        print(remove_Occ(str, ')'))\n        print(remove_Occ(str, '('))\n        print(remove_Occ(str, ')'))\n        print(remove_Occ(str, '('))\n        print(remove_Occ(str, ')'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Occ(str, '-'))\n        print(remove_Oc"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    i = 0\n    j = n-1\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    count = 0\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M)):\n            sum += M[i][j]\n        print(sum)\n        print(count)\n        count+=1\n    return count\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # use a heap\n    arr = [0] * len(M)\n    for i in range(len(M)):\n        arr[i] = M[i][0]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1,len(M)):\n            sum = M[i][j] + M[j][i]\n            M[i][j] = sum\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = []\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            l.append(sum(M[i:j+1]))\n    sorted_l = sorted(l)\n    return (l, sorted_l)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of the rows of the matrix\n    rows = []\n    for i in range(len(M)):\n        rows.append(M[i][len(M[0]) - 1])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for k in range(N):\n        M[k] = M[k].sort()\n        for i in range(N):\n            if M[k][i] == 0:\n                M[k][i] = -1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = []\n    \n    for i in range(len(M[0])):\n        l.append(0)\n    \n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            l[j] += M[i][j]\n    \n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] > l[j]:\n                l[i], l[j] = l[j], l[i]\n    \n    return l\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #O(n^2)\n    rows = len(M)\n    sums = [0 for i in range(rows)]\n    for i in range(rows):\n        for j in range(i, rows):\n            sums[i] += M[j]\n    sums.sort()\n    for i in range(rows):\n        M[i] = sums[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M[0])\n    for i in range(0,n):\n        for j in range(n-i-1):\n            if M[j][j] > M[j+1][j+1]:\n                M[j][j], M[j+1][j+1] = M[j+1][j+1], M[j][j]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if b == 0 : \n        return (l * h) / 3\n    elif h == 0 :\n        return l * l * b \n    else : \n        return h * h * (l * b) * (l + b) * (b + h) / 6\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def area(l,b,h) : \n        '''\n        Write a python function to find the volume of a triangular prism.\n        '''\n        return 4*(b*l)**2 \n    #Use logic to calculate volume of a rectangular prism.\n    return area(l,b,h)"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prisms\n    A=b*b*h/3\n    # Calculate the volume\n    return A*A*A*A"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    import math\n    a = (b*h)/2\n    b = (l*h)/2\n    c = (l*h)/2\n    if math.sqrt(a**2+b**2+c**2) < a**2+b**2+c**2 :\n        volume = math.sqrt(a**2+b**2+c**2)\n        print(volume)\n    else :\n        print(\"volume of the triangle cannot be calculated\")\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l * b\n    b = h * 2 * l\n    h = b / 2\n    volume = a * h**3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/2\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #declare variables\n    l=l\n    b=b\n    h=h\n    v=h/2\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    if l<h :\n        return (b*h)\n    else :\n        return (b*(h-l))\n    \ndef find_Triangle_volume(l,h,s) : \n    '''\n    Write a python function to find the volume of a triangle.\n    '''\n    return h*s\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def find_volume(l,b,h) :\n        vol = (4*(l**2))+(2*l*(h**2))\n        return vol\n    \n    vol = find_volume(l,b,h)\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    m = l*b\n    if(h>=m):\n        return(0)\n    else : \n        return(b*h*l)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'[^a-z0-9]', '', text)\n    for c in text:\n        if c.isupper():\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    pattern = r'[a-zA-Z]{1,}[a-zA-Z_0-9]+'\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n    \ndef text_normalized(text):\n    '''\n    Write a function that takes in the string as input and normalizes it.\n    '''\n    \n    pattern = r\"[A-Z]{1,}\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n    \ndef text_swapcase(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in lower case.\n    '''\n    \n    pattern = r\"[a-zA-Z]{1,}\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n    \ndef text_capitalize(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in capitalized form.\n    '''\n    \n    pattern = r\"[A-Z]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n    \ndef text_remove(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any characters removed from it.\n    '''\n    \n    pattern = r\"[a-zA-Z]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n    \ndef text_remove_vowels(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any vowels removed from it.\n    '''\n    \n    pattern = r\"[A-Za-z]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n    \ndef text_remove_punctuation(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any punctuation removed from it.\n    '''\n    \n    pattern = r\"[^a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_numbers(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any numbers removed from it.\n    '''\n    \n    pattern = r\"[0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_symbols(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any symbols removed from it.\n    '''\n    \n    pattern = r\"[^a-zA-Z]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n    \ndef text_remove_punctuation_and_numbers(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any punctuation removed from it.\n    '''\n    \n    pattern = r\"[^a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_replace(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any characters replaced with other characters.\n    '''\n    \n    pattern = r\"[^a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_symbols_and_numbers(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any symbols replaced with other characters.\n    '''\n    \n    pattern = r\"[^a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_removing_symbols(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any symbols removed from it.\n    '''\n    \n    pattern = r\"[a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_punctuation_and_numbers_and_symbols(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any punctuation removed from it.\n    '''\n    \n    pattern = r\"[^a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_numbers_and_symbols(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any numbers replaced with other characters.\n    '''\n    \n    pattern = r\"[0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_concatenation(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any characters concatenated.\n    '''\n    \n    pattern = r\"[A-Za-z]+\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_removal_symbols_and_numbers(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any symbols replaced with other characters.\n    '''\n    \n    pattern = r\"[a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_punctuation_and_numbers_and_symbols(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any symbols replaced with other characters.\n    '''\n    \n    pattern = r\"[a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_punctuation_and_numbers_and_symbols_and_punctuation(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any symbols replaced with other characters.\n    '''\n    \n    pattern = r\"[a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) is not None:\n        print('yes')\n    else:\n        print('no')\n        \ndef text_remove_symbols_and_numbers_and_symbols_and_punctuation(text):\n    '''\n    Write a function that takes in the string as input and returns the same string in the same format with any symbols replaced with other characters.\n    '''\n    \n    pattern = r\"[a-zA-Z_0-9]\"\n    \n    if re.search(pattern, text) i"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return ''.join(c.lower() if c.islower() else c.upper() for c in text) == text.lower()\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[^A-Za-z0-9_]+\"\n    return bool(re.search(pattern, text))\n    \ndef text_upper_lowercase_underscore(text):\n    '''\n    Write a function that takes a string as an input and returns true if all characters in the input are upper-case letters and false otherwise.\n    '''\n    pattern = r\"[A-Za-z]+(?![a-z])\"\n    return bool(re.search(pattern, text))\n    \ndef text_lowercase(text):\n    '''\n    Write a function that returns true if the input string contains all lowercase letters.\n    '''\n    pattern = r\"[^A-Za-z]']\"\n    return bool(re.search(pattern, text))\n    \ndef text_upper_lowercase(text):\n    '''\n    Write a function that returns true if the input string contains all upper case letters.\n    '''\n    pattern = r\"[A-Za-z]\"\n    return bool(re.search(pattern, text))\n    \ndef text_special_characters(text):\n    '''\n    Write a function that returns true if all characters in the input string are special characters.\n    '''\n    pattern = r\"[!#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\u2014]\"\n    return bool(re.search(pattern, text))\n    \ndef text_spaces(text):\n    '''\n    Write a function that returns true if all characters in the input string are spaces.\n    '''\n    pattern = r\"[\\s]\"\n    return bool(re.search(pattern, text))\n    \ndef text_capitalization(text):\n    '''\n    Write a function that returns true if all characters in the input string are capitalized.\n    '''\n    pattern = r\"[A-Z]\"\n    return bool(re.search(pattern, text))\n    \ndef text_small_words(text):\n    '''\n    Write a function that returns true if all characters in the input string are lowercase and lowercase letters.\n    '''\n    pattern = r\"[a-z]+(?![a-z])\"\n    return bool(re.search(pattern, text))\n    \ndef text_caps_and_lowercase(text):\n    '''\n    Write a function that returns true if all characters in the input string are upper case and lower case letters.\n    '''\n    pattern = r\"[A-Z]+(?![A-Z])\"\n    return bool(re.search(pattern, text))\n    \ndef text_all_characters_non_digit(text):\n    '''\n    Write a function that returns true if all characters in the input string are digits or all characters in the input string are letters.\n    '''\n    pattern = r\"[^0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_digit_numbers(text):\n    '''\n    Write a function that returns true if all characters in the input string are digits.\n    '''\n    pattern = r\"[0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_non_digit_numbers(text):\n    '''\n    Write a function that returns true if all characters in the input string are digits.\n    '''\n    pattern = r\"[^0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_special_characters(text):\n    '''\n    Write a function that returns true if all characters in the input string are special characters.\n    '''\n    pattern = r\"[!#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\u2014]\"\n    return bool(re.search(pattern, text))\n    \ndef text_counting(text):\n    '''\n    Write a function that returns true if the input string contains any numbers.\n    '''\n    pattern = r\"[0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_counting_with_duplicates(text):\n    '''\n    Write a function that returns true if the input string contains any numbers and contains at least two unique numbers.\n    '''\n    pattern = r\"[0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_only_numbers(text):\n    '''\n    Write a function that returns true if the input string only contains numbers.\n    '''\n    pattern = r\"[0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_only_digits(text):\n    '''\n    Write a function that returns true if the input string only contains digits.\n    '''\n    pattern = r\"[^0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_only_chars(text):\n    '''\n    Write a function that returns true if the input string only contains letters.\n    '''\n    pattern = r\"[a-z]\"\n    return bool(re.search(pattern, text))\n    \ndef text_only_special_characters(text):\n    '''\n    Write a function that returns true if the input string only contains special characters.\n    '''\n    pattern = r\"[!#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\u2014]\"\n    return bool(re.search(pattern, text))\n    \ndef text_only_spaces(text):\n    '''\n    Write a function that returns true if the input string only contains spaces.\n    '''\n    pattern = r\"[\\s]\"\n    return bool(re.search(pattern, text))\n    \ndef text_case_sensitive(text):\n    '''\n    Write a function that returns true if the input string is case-sensitive.\n    '''\n    pattern = r\"[^A-Za-z0-9_]\"\n    return bool(re.search(pattern, text))\n    \ndef text_all_characters(text):\n    '''\n    Write a function that returns true if all characters in the input string are lowercase and lowercase letters.\n    '''\n    pattern = r\"[A-Za-z]\"\n    return bool(re.search(pattern, text))\n    \ndef text_capitalization_with_lowercase(text):\n    '''\n    Write a function that returns true if all characters in the input string are capitalized.\n    '''\n    pattern = r\"[A-Z]\"\n    return bool(re.search(pattern, text))\n    \ndef text_count_duplicates(text):\n    '''\n    Write a function that returns true if all characters in the input string contain at least two unique characters.\n    '''\n    pattern = r\"[A-Z]\"\n    return bool(re.search(pattern, text))\n    \ndef text_all_digits(text):\n    '''\n    Write a function that returns true if all characters in the input string contain numbers.\n    '''\n    pattern = r\"[0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_digits_only(text):\n    '''\n    Write a function that returns true if all characters in the input string contain digits.\n    '''\n    pattern = r\"[^0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_special_characters_with_lowercase(text):\n    '''\n    Write a function that returns true if all characters in the input string contain special characters.\n    '''\n    pattern = r\"[!#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\u2014]\"\n    return bool(re.search(pattern, text))\n    \ndef text_digits_only_with_lowercase(text):\n    '''\n    Write a function that returns true if all characters in the input string contain digits and contains at least two unique digits.\n    '''\n    pattern = r\"[0-9]\"\n    return bool(re.search(pattern, text))\n    \ndef text_special_characters_with_uppercase(text):\n    '''\n    Write a function that returns true if all characters in the input string contain special characters.\n    '''\n    pattern = r\"[A-Z]\"\n    return bool(re.search(pattern, text))\n    \ndef text_digits_only_with_up"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"^[a-z0-9]*$\"\n    if re.search(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s = re.findall(\"[A-Za-z0-9]\",text)\n    for i in s:\n        if i[0].islower():\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    t_text = text.lower()\n    for i in t_text:\n        if i in ['a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z',' ','/','-']:\n            return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower().replace('_','').replace('-','').replace('.','').replace(' ', '').replace('-','')!= text.lower().replace('_','').replace('-','').replace('.','').replace(' ', '')\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b\\w+_\\w+\\b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    input_lower = text.lower()\n    output_lower = \"\"\n    for char in input_lower:\n        if char.isalpha():\n            output_lower += char.lower() + \"_\"\n        else:\n            output_lower += char\n    if output_lower.count(\"_\") >= 2:\n        return False\n    return True\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4/3)*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_area = a * a\n    square_perimeter = 2 * (a * a + square_area)\n    return square_perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a**2 + (a**2 + 1)*a)\ndef square_volume(a):\n    '''\n    Write a function that returns the volume of a cube given its base as input.\n    '''\n    return (3*(a**3))\ndef cube_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a cube given its base as input.\n    '''\n    return (a**3 + 3*a**2)\ndef cube_volume(a):\n    '''\n    Write a function that returns the volume of a cube given its base as input.\n    '''\n    return (a**3 + 3*a**2 + (a**3 + 1)**2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = len(a)\n    return s * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    # TODO: Write the body of the function\n    perimeter = a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a > 0:\n        return 2*(a**2)\n    else:\n        print('Invalid input.')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return sum(a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_out = \"\"\n    for i in range(len(string)):\n        if(string[i] in string[i+1:]):\n            str_out += string[i]\n    return str_out\ndef remove_set(string):\n    '''\n    Write a function that takes a string as input and return the string with all the unique characters removed.\n    '''\n    str_out = \"\"\n    for i in string:\n        if i not in str_out:\n            str_out += i\n    return str_out\ndef test_remove_set(string, char):\n    '''\n    Write a function to test if a character is present in a string.\n    '''\n    if char in string:\n        return True\n    else:\n        return False\ndef main():\n    string = input()\n    test_string = input()\n    char = input()\n    test = test_remove_set(string, char)\n    if(test):\n        print(\"true\")\n    else:\n        print(\"false\")\nmain("
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_char = list()\n    for char in string:\n        if char in list_of_char:\n            list_of_char.remove(char)\n        else:\n            list_of_char.append(char)\n    return list_of_char\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string.replace(' ', ''))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            lst.append(string[i])\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initializing the variable\n    result = []\n    # Looping through the string \n    for i in range(len(string)): \n        # If the character is found then add it to the result \n        if string[i] in string.replace(string[i], \"\").replace(\"-\", \"\").replace(\",\", \"\").replace(\".\", \"\").replace(\" \", \"\") and string[i] in result: \n            pass \n        else: \n            result.append(string[i]) \n    # Return the result \n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(map(str.strip, string.split(\" \")))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result_string = []\n    i = 0\n    for x in string:\n        if x!='':\n            i += 1\n            result_string.append(x)\n        else:\n            pass\n    return result_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp = []\n    for i in string:\n        if i in temp:\n            continue\n        else:\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    n = 0\n    lst = []\n    while n < len(string):\n        if string[n] in string[0:len(string) - 1]:\n            lst.append(string[n])\n            n += 1\n        else:\n            n += 1\n    return lst\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    if len(arraynums) < 2:\n        duplicate = True\n        print(\"{} is not a duplicate\".format(arraynums))\n    else:\n        for num in arraynums:\n            if arraynums.count(num) > 1:\n                duplicate = True\n                print(\"{} is not a duplicate\".format(num))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums_set = set(arraynums)\n    duplicate = False\n    for i in arraynums_set:\n        if arraynums.count(i) > 1:\n            duplicate = True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    test = []\n    for i in arraynums:\n        if i not in test:\n            test.append(i)\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    ans = 0\n    for num in arraynums:\n        count = 0\n        for i in range(len(arraynums)):\n            if num == arraynums[i]:\n                count += 1\n        if count!= len(arraynums):\n            ans = 1\n            break\n    return ans\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Write your code here\n    # Write your code here\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print('Test case 1')\n    print(arraynums)\n    arr = []\n    for i in arraynums:\n        arr.append(i)\n    print(arr)\n    print(arr[0])\n    print(arr[0] == arr[1])\n    print('------------')\n    print(arr[0] in arr)\n    print(arr[1] in arr)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return [int(i) for i in arraynums if i not in arraynums[:i+1]]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    def checkDuplicate(num):\n        if len(set(num))!= len(num):\n            print(\"No Duplicate\")\n        else:\n            print(\"Yes Duplicate\")\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    result = False\n    for i in range(len(arraynums)):\n        if i!= arraynums[i]:\n            if arraynums[i] in arraynums[i+1:]:\n                result = True\n    return result\n    \n    \n    \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 4 == 0:\n        print(f'{x} is woodball')\n    else:\n        print(f'{x} is not woodball')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 2:\n        return False\n    elif x <=5:\n        return True\n    elif x <=10:\n        return True\n    else:\n        return False\n    \ndef check_if_root(x,y):\n    '''\n    Write a function to check if the given number is root or not.\n    '''\n    if x==y:\n        return True\n    elif x*y == x+y:\n        return True\n    else:\n        return False\n    \ndef is_leaf(x):\n    '''\n    Write a function to check if the given number is a leaf or not.\n    '''\n    if x==0:\n        return True\n    elif x%2 == 0:\n        return False\n    else:\n        return True\n    \ndef is_trees(x):\n    '''\n    Write a function to check if the given number is a tree or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        if x%2 == 0:\n            return False\n        else:\n            return True\n    \ndef is_primes(x):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    if x==1:\n        return True\n    elif x%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(x))+1,2):\n            if x%i == 0:\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    result = x%2\n    if result==0:\n        return True\n    else:\n        return False\n    \nprint(is_woodall(13))\nprint(is_woodall(12))\nprint(is_woodall(6))\nprint(is_woodall(5))\nprint(is_woodall(3))\nprint(is_woodall(0))\nprint(is_woodall(1))"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 4 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 7: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return(is_digits(x) and is_digits(x[::-1]) and x[0]==x[-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x>0 and x<18\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num\n    rev_num_list = list(str(num))\n    rev_num_list.reverse()\n    rev_num_int = int(''.join(rev_num_list))\n    rev_num_str = str(rev_num_int)\n    for i in range(len(rev_num_list)):\n        if rev_num_int == int(rev_num_list[i]):\n            break\n    else:\n        return True\n    rev_num_str = rev_num_str[1:]\n    rev_num_str = rev_num_str + rev_num_str[0]\n    rev_num_str = rev_num_str[::-1]\n    rev_num = int(''.join(rev_num_str))\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revnum = 0\n    n = num\n    while(n!=0):\n        digit = n % 10\n        revnum = revnum * 10 + digit\n        n = n // 10\n    if revnum == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # print(\"num:\",num)\n    revNum = int(str(num)[::-1])\n    # print(\"revNum:\",revNum)\n    if num == revNum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return \"Invalid Number\"\n    elif num == 0:\n        return 0\n    else:\n        num_1 = num%10\n        num_2 = (num//10)%10\n        num_3 = num//100\n        num_4 = (num//100)%10\n        num_5 = num//1000\n        num_6 = (num//1000)%10\n        num_7 = num//10000\n        num_8 = (num//10000)%10\n        num_9 = num//100000\n        num_10 = (num//100000)%10\n        num_11 = num//1000000\n        num_12 = (num//1000000)%10\n        if num_1 < num_2 and num_1 < num_3 and num_1 < num_4 and num_1 < num_5 and num_1 < num_6 and num_1 < num_7 and num_1 < num_8 and num_1 < num_9 and num_1 < num_10 and num_1 < num_11 and num_1 < num_12:\n            return \"Valid\"\n        else:\n            return \"Invalid\""
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = -num\n    if num % 2 == 0:\n        num = num // 2\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = num - 1\n    return num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    num_rev = num_str[::-1]\n    \n    if (int(num_rev) == int(num_str)):\n        return True\n    return False\n    \ndef main():\n    num = input(\"Enter a number: \")\n    rev = rev(num)\n    if(rev):\n        print(\"The number is one less than twice its reverse\")\n    else:\n        print(\"The number is not one less than twice its reverse\")\n        \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s1 = str(num)\n    s2 = s1[::-1]\n    if s1 == s2:\n        return 'Not one'\n    return 'One' if s1 == s2 else 'Two'\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_list = [str(num) for num in range(num+1, num+2)]\n    return num_list\n    # return []\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Declare a variable to store the current max value of each digit.\n    current_max_val = [0] * 10\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0 \n    else : \n        max_num = arr[0]\n        for i in range (len(arr)-1) : \n            if arr[i] > arr[i+1] : \n                max_num = arr[i] \n        return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(set(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    nums = []\n    for i in range(0,10):\n        nums.append(i)\n    result = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]+arr[j]>result):\n                result = arr[i]+arr[j]\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = int(''.join(sorted(str(arr))))\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Your code here\n    Max_Num = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > Max_Num : \n            Max_Num = arr[i]\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = 0\n    for element in arr : \n        if (len(str(element)) < len(str(largest_num))) : \n            largest_num = element\n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr : \n        temp_num = i\n        while temp_num > 0 : \n            remainder = temp_num % 10 \n            if remainder > max_num : \n                max_num = remainder \n            temp_num = temp_num // 10\n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = int(''.join(str(i) for i in arr))\n    # we will convert the largest number in array to int so that it can be found with our function.\n    # i used string formating to avoid the problem of digits being out of range.\n    largest = num\n    for i in range(len(arr)):\n        num = num * 10 + int(''.join(str(i) for i in arr))\n        if num > largest:\n            largest = num\n    return largest\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for num in arr :\n        if arr.count(num) > max_num :\n            max_num = arr.count(num)\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    if x < y:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return sign(x) == sign(y) and -sign(x) == sign(y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0:\n        return \"Positive\"\n    else:\n        return \"Negative\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<y:\n        return True\n    elif x>y:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    print(\"The signs of numbers are:\")\n    if(x<0): \n        print(\"Negative numbers are positive.\")\n    elif(x>0): \n        print(\"Positive numbers are positive.\")\n    else: \n        print(\"Positive numbers are negative.\")\n    if(y<0): \n        print(\"Negative numbers are positive.\")\n    elif(y>0): \n        print(\"Positive numbers are positive.\")\n    else: \n        print(\"Positive numbers are negative.\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign = 0\n    if x > 0 and y > 0:\n        sign = 1\n    elif x < 0 and y > 0:\n        sign = -1\n    elif x < 0 and y < 0:\n        sign = -1\n    else:\n        sign = 0\n    return sign\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return -1\n    if x < y:\n        return 1\n    return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return \"sign of x is greater than sign of y\"\n    if x<y:\n        return \"sign of x is less than sign of y\"\n    return \"sign of x and y are equivalent\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 or y < 0: \n        return False\n    elif x > 0 and y > 0: \n        return True\n    elif x > 0 and y < 0: \n        return False\n    elif x < 0 and y > 0: \n        return True\n    else: \n        return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0: \n        return None\n    if n == 0: \n        return 1\n    else: \n        return n * n + is_octagonal(n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # declare the sum of the digits\n    s = 0\n    \n    # do this for each number\n    while n > 0:\n        \n        # do this while the number is less than 10\n        while n > 0:\n            \n            # if the number is more than 10, set it as 1\n            if n >= 10:\n                s += 1\n                \n            # do the same for the next number\n            n -= 10\n        \n        # do this for the next number\n        n -= 1\n    \n    # return the number\n    return s"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #First, find the number of sub-octagons in a square of length n:\n    #Recursively call it self, subtracts the number of the left side\n    #Subtracts the number of the right side\n    #Recursively call it self, subtracts the number of the top side\n    #Subtracts the number of the bottom side\n    #Add the two numbers together\n    #If the next number is not a multiple of both numbers, divide them\n    #If the next number is a multiple of both numbers, divide them\n    #If next number is a multiple of both numbers, divide them\n    #If next number is a multiple of both numbers, divide them\n    #Add the remaining two numbers together\n    #Return the next number\n    if n<0: return 'Invalid number'\n    if n==0: return 0\n    if n==1: return 1\n    remainder = n%10\n    return is_octagonal(remainder//2)+is_octagonal(remainder%10)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    sum = 1\n    while i < n:\n        sum = i*(2*i-1)\n        i = i+1\n    return sum\nprint(is_octagonal(10)) # should return 15\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<= 0:\n        raise ValueError('n must be >= 0')\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return 5*(3*(n-1)**2) + n*(n-2)**2 + 3*n**2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    f = []\n    for i in range(1, n+1):\n        # print(i)\n        if n % i == 0:\n            f.append(i)\n    # print(f)\n    f[-1] = n // f[-1]\n    # print(f)\n    return f[-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==0 or n==1 or n==2: return n\n    else: return is_octagonal(n//2)+1"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # For the first quadrant\n    if n == 0:\n        return 1\n    \n    # For the second quadrant\n    elif n == 1:\n        return 2\n    \n    # For the third quadrant\n    elif n == 2:\n        return 3\n    \n    # For the fourth quadrant\n    elif n == 3:\n        return 4\n    \n    else:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = n\n    while b - a > 1:\n        mid = (b + a)//2\n        if (mid - mid) % 7 == 0:\n            return mid\n        else:\n            a = mid\n    return "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Write your code here\n    # we check whether the n is an odd number or even number \n    if n % 2 == 0: # n is even \n        return int(n / 10) + 1 # n is odd\n    else: # n is odd \n        return int(n / 10) + 1 + int(n % 10) / 2 # n is even and 1 + 1/2 - n is odd \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # creating the hash table for the letters\n    alphabets = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # checking if the input string has duplicate characters\n    duplicate_check = []\n    # looping through the characters of the input string\n    for i in range(len(s)):\n        # checking if the input string has duplicate characters\n        if s[i] in duplicate_check:\n            # checking if the duplicate character in the input string is already seen\n            continue\n        else:\n            # adding it to the dictionary of unique characters\n            duplicate_check.append(s[i])\n            # checking if the total number of characters of the input string is equal to the length of the dictionary\n            if len(s) == len(duplicate_check):\n                alphabets[s[i]] += 1\n    \n    # printing the total number of characters of the input string\n    print(\"Total number of unique characters:\", len(alphabets))\n    \n    # printing the total number of characters with each unique character\n    for i in range(len(alphabets)):\n        print(\"Total characters of unique character:\", alphabets[i])\n        \n    # printing the total number of unique characters\n    print(\"Total unique characters:\", len(alphabets))\n    \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n        # printing the total number of distinct characters\n        print(\"Total unique characters with each unique character:\")\n        \n    # printing the unique characters with each unique character\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct characters of the input string\n        print(\"Number of distinct characters of unique character:\", alphabets[i])\n        \n    # printing the total number of distinct characters\n    print(\"Total unique characters with each unique character:\")\n    \n    # printing the unique characters with each unique character\n    print(\"Unique characters with each unique character:\")\n    \n    # looping through the unique characters of the input string\n    for i in range(len(alphabets)):\n        # printing the number of distinct character"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if int(s[i:j]) == int(s[i:j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        # checking if the digits are same\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    #set the length of string as the size of the substring\n    size=len(s)\n    #we will store the substrings\n    sub_strings=[]\n    #traverse all the letters of the string\n    for i in range(size):\n        #if the length of the substring is greater than the length of the string\n        if size-i>0:\n            #if the sum of the digits of the characters equals the length of the substring\n            if s[i]==s[i+1]:\n                #we will count it as 1\n                count=count+1\n                #traverse all the substrings\n                for j in range(i,size):\n                    #if the sum of the digits of the characters equals the length of the substring\n                    if s[j]==s[j+1]:\n                        #we will count it as 1\n                        count=count+1\n    return count\ns=input()\nprint(count_Substrings(s))"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += len(s) - i - 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # your code here\n    cnt = 0\n    for i in range(len(s)-1):\n        if int(s[i]) + int(s[i+1]) == int(s[i+1]):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum_digits = 0\n    for i in range(len(s)):\n        sum_digits += s[i]\n        if sum_digits % 10 == 0:\n            length_of_substring = (sum_digits // 10) + 1\n            return length_of_substring\n    return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for char in s:\n        if char in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) < 2 or len(s) > 10000:\n        return 0\n    \n    count = 0\n    d = defaultdict(int)\n    d[0] = 1\n    for i in range(len(s)):\n        count += d[s[i]]\n        d[s[i]] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    k = 0\n    for i in range(len(s)):\n        k += s[i]\n        if k == s[i]:\n            res += 1\n            k = 0\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = 1\n    min = xs[0]\n    for i in range(0,len(xs)):\n        if xs[i] < min:\n            num = xs[i]\n            min = xs[i]\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lowest = float('inf')\n    for num in xs:\n        if num < lowest:\n            lowest = num\n    return lowest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # find the minimum number in the list\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    # return the smallest number\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < minimum:\n            minimum = xs[i]\n    return minimum\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls = []\n    for i in range(0,len(xs)):\n        ls.append(xs[i])\n    ls.sort()\n    return ls[-1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = test_list[0][1] - test_list[1][1]\n    for item in test_list:\n        if item[1] - max_diff > 0:\n            max_diff = item[1] - max_diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    l = len(test_list)\n    if l == 1:\n        return test_list[0] - test_list[1]\n    elif l == 2:\n        return max(test_list[0] - test_list[1], test_list[1] - test_list[0])\n    elif l == 3:\n        return max(test_list[0] - test_list[1], test_list[1] - test_list[2], test_list[2] - test_list[0])\n    elif l == 4:\n        return max(max(test_list[0] - test_list[1], test_list[1] - test_list[2], test_list[2] - test_list[3])\n                   , max(test_list[0] - test_list[3], test_list[3] - test_list[1], test_list[1] - test_list[2]))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if (len(test_list)<2):\n        return None\n    else:\n        max_diff = 0\n        for i in range(1,len(test_list)):\n            if test_list[i][0]>test_list[i-1][1]:\n                max_diff = max(max_diff,abs(test_list[i][0]-test_list[i-1][1]))\n        return max_diff\n        \n    \ndef min_difference(test_list):\n    '''\n    Write a function to find the minimum difference between available pairs in the given tuple list.\n    '''\n    if (len(test_list)<2):\n        return None\n    else:\n        min_diff = 0\n        for i in range(1,len(test_list)):\n            if test_list[i][0]<test_list[i-1][1]:\n                min_diff = min(min_diff,abs(test_list[i][0]-test_list[i-1][1]))\n        return min_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    max_value = test_list[0][0]\n    for i in range(0, len(test_list)):\n        if test_list[i][0] > max_value:\n            max_value = test_list[i][0]\n    return max_value\n    \n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for pair in test_list:\n        if pair[0] > pair[1]:\n            diff = pair[1] - pair[0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # If there are two instances of the same value\n    if len(test_list) == 1:\n        return test_list[0] - test_list[1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst = []\n    if type(test_list) is not tuple:\n        raise TypeError('input must be a tuple')\n    if len(test_list) < 2:\n        raise ValueError('tuple size must be more than two')\n    for x in test_list:\n        lst.append(x)\n    return(max(abs(lst[0] - lst[1]), abs(lst[1] - lst[0])))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference_list = []\n    for item in test_list:\n        difference_list.append(abs(item[0] - item[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: (x[1],x[0]))\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key= lambda x : x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = []\n    for subject in subjectmarks:\n        if subject[1] > 45:\n            result.append((subject[0],subject[1]))\n        else:\n            result.append((subject[0],45))\n    return sorted(result)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # get a list\n    lst = []\n    # get a list of lists\n    li = []\n    # convert each element of the list to a list\n    for x in subjectmarks:\n        lst.append(list(x))\n    # get a copy of the first element in the list\n    first = lst[0]\n    # remove the first element from the list\n    lst.pop(0)\n    # add the second element to the list\n    lst.append(first)\n    # convert each list to a list\n    for x in lst:\n        li.append(list(x))\n    # sort the lists in ascending order\n    li.sort(reverse=True)\n    # return the sorted list\n    return li\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_elements = 0\n    for data in data_list:\n        sum_of_elements += data\n    return sum_of_elements\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    for index, item in enumerate(data_list):\n        data_list[index] = item + data_list[index]\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for item in data_list:\n        total_sum += item\n    return total_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return\n    for element in data_list:\n        if isinstance(element, list):\n            flattened_data = recursive_list_sum(element)\n            data_list.append(flattened_data)\n    return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    sum = 0\n    for element in data_list:\n        sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_list = 0\n    for item in data_list:\n        sum_list += item\n    return sum_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Input: [1,2,[1,2]]\n    # Output: [1,1,2,1,2,1]\n    # Output: 0\n    # Return Value: -1\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write your code here\n    sum = 0\n    for x in data_list:\n        sum += x\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    lst = []\n    for i in data_list:\n        if type(i) == list:\n            lst = lst + recursive_list_sum(i)\n        else:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    s=0\n    for i in list:\n        if i>0:\n            s=s+1\n    return s\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    print(sum(map(int,list)))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    print(\"Positive number count is {}\".format(count))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    my_list = []\n    for i in list:\n        if i > 0:\n            my_list.append(i)\n    print(\"The positive number is \" + str(len(my_list)))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum=0\n    for i in list:\n        if i>0:\n            sum+=1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(filter(lambda x:x > 0, list))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for item in list:\n        if item > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Initiate empty list\n    pos = []\n    # Loop through the list\n    for i in range(0, len(list)):\n        # If the number is positive\n        if list[i] > 0:\n            pos.append(list[i])\n    # return number of positive numbers\n    return len(pos)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    res = {}\n    for i in list:\n        if i > 0:\n            if i in res:\n                res[i] += 1\n            else:\n                res[i] = 1\n    return len(res)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Divide the numbers into two sublists\n    \n    # Number of ways for the first sublist\n    ways = n * (n + 1) // 2\n    \n    # Number of ways for the second sublist\n    ways2 = n * (n - 1) // 2\n    \n    # Add a variable to represent the value of the first sublist\n    # The variable is used to keep track of the number of sublists\n    ways1 = ways // 2\n    \n    # Add a variable to represent the value of the second sublist\n    ways2 = ways2 // 2\n    \n    # If the number of sublists is one, return 1\n    if n == 1:\n        return 1\n    \n    # If the number of sublists is two, return two ways\n    if ways2 == n and ways == n:\n        return 2\n    \n    # Return the number of ways\n    return ways1 + ways2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<2:\n        return n\n    elif n==2:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    else:\n        total = 2 * bell_number(n-1)\n        return total"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return bell_number(n - 1) + bell_number(n - 2) + (2 * bell_number(n - 3))\n    \ndef bell_number_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (bell_number_n(n - 1) + bell_number_n(n - 2) + (2 * bell_number_n(n - 3)))\n    \ndef bell_number_r(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r(n - 2) + 2 * bell_number_r(n - 1))\n    \ndef bell_number_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_n(n - 2) + 2 * bell_number_r_n(n - 1))\n    \ndef bell_number_r_r(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return 2 * bell_number_r_r(n - 2) + 2 * bell_number_r_r(n - 1)\n    \ndef bell_number_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return 2 * bell_number_r_r_n(n - 2) + 2 * bell_number_r_r_n(n - 1)\n    \ndef bell_number_r_r_r(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r(n - 2) + 2 * bell_number_r_r_r(n - 1))\n    \ndef bell_number_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r(n - 2) + 2 * bell_number_r_r_r_r(n - 1))\n    \ndef bell_number_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r(n - 2) + 2 * bell_number_r_r_r_r(n - 1))\n    \ndef bell_number_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r(n - 2) + 2 * bell_number_r_r_r_r(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_n(n - 2) + 2 * bell_number_r_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_n(n - 2) + 2 * bell_number_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_r_r_r_r_r_r_n(n):\n    '''\n    Write a function to calculate the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return (2 * bell_number_r_r_r_n(n - 2) + 2 * bell_number_r_r_n(n - 1))\n    \ndef bell_number_r_r_r_r_r_r_r_r_r_r_r_r_r_n(n):\n    '''"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # define the number of ways to partition the set of numbers\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check for arrays of equal length\n    if len(A) <= 2:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    result = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            result = False\n        elif A[i] > A[i-1]:\n            result = False\n    return result\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    for i in range(1,len(A)):\n        if A[i]>A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if all elements are the same\n    if len(A) <= 2:\n        return True\n    \n    if A[0] == A[-1]:\n        return True\n    \n    # if the first and last elements are not the same\n    if A[0]!= A[-1]:\n        return False\n    \n    # find the lowest element\n    lowest_element = min(A[1:-1])\n    \n    # if the lowest element is less than the first element\n    if lowest_element < A[0]:\n        # compare the first and last elements\n        for i in range(2, len(A)):\n            if A[i] < A[i - 1]:\n                return False\n            \n    # if the lowest element is less than or equal to the first element\n    elif lowest_element <= A[0]:\n        return False\n    \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] == A[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==1:\n        return A[0]==A[0]\n    for i in range(len(A)-1):\n        if A[i]!=A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    b=True\n    c=True\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            b=False\n        if A[i]<A[i+1]:\n            c=False\n    return b and c\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return False\n    else:\n        L = 0\n        R = 1\n        for i in range(1, len(A)):\n            if A[i] < A[L]:\n                L += 1\n                if L == i:\n                    return False\n            elif A[i] > A[R]:\n                R += 1\n                if R == i:\n                    return False\n            else:\n                if L == i:\n                    return False\n                elif R == i:\n                    return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is monotonic\n    for k in range(0,len(A)-1):\n        if A[k] < A[k+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    A = sorted(A)\n    if (n==1):\n        return True\n    elif (A[0]>A[1]):\n        return False\n    else:\n        for i in range(1, n):\n            if A[i] > A[i-1] and A[i] < A[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if(s[i:i+len(l)] == l):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return None\n    if len(l) == 1:\n        return l[0] == s\n    return l[0] in s and is_sublist(l[1:], s + [l[0]])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # remove duplicates\n    l = list(set(l))\n    # remove numbers from l\n    l = [x for x in l if x.isnumeric()]\n    # check for each element\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] == l[j]:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # if s is a sublist of l then return True\n    # else return False\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(i in l for i in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if not (l[i:i+len(s)] == s):\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < 2:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Case 0: Empty list\n    if len(l) == 0:\n        return True\n    \n    # Case 1: Sublist a,b\n    if len(l) == 1 and l[0] == s:\n        return True\n    \n    # Case 2: Sublist a,b,c\n    if len(l) == 1 and l[0] == s and l[1] == s:\n        return True\n    \n    # Case 3: Sublist a,b,c,d\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s:\n        return True\n    \n    # Case 4: Sublist a,b,c,d,e\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s:\n        return True\n    \n    # Case 5: Sublist a,b,c,d,e,f\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s:\n        return True\n    \n    # Case 6: Sublist a,b,c,d,e,f,g\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s:\n        return True\n    \n    # Case 7: Sublist a,b,c,d,e,f,g,h\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s:\n        return True\n    \n    # Case 8: Sublist a,b,c,d,e,f,g,h,i\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s:\n        return True\n    \n    # Case 9: Sublist a,b,c,d,e,f,g,h,i,j\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s:\n        return True\n    \n    # Case 10: Sublist a,b,c,d,e,f,g,h,i,j,k\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s:\n        return True\n    \n    # Case 11: Sublist a,b,c,d,e,f,g,h,i,j,k,l\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s:\n        return True\n    \n    # Case 12: Sublist a,b,c,d,e,f,g,h,i,j,k,l,m\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s and l[11] == s:\n        return True\n    \n    # Case 13: Sublist a,b,c,d,e,f,g,h,i,j,k,l,m,n\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s and l[11] == s and l[12] == s:\n        return True\n    \n    # Case 14: Sublist a,b,c,d,e,f,g,h,i,j,k,l,m,n,o\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s and l[11] == s and l[12] == s and l[13] == s:\n        return True\n    \n    # Case 15: Sublist a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s and l[11] == s and l[12] == s and l[13] == s and l[14] == s:\n        return True\n    \n    # Case 16: Sublist a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s and l[11] == s and l[12] == s and l[13] == s and l[14] == s and l[15] == s:\n        return True\n    \n    # Case 17: Sublist a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s and l[11] == s and l[12] == s and l[13] == s and l[14] == s and l[15] == s and l[16] == s:\n        return True\n    \n    # Case 18: Sublist a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s\n    if len(l) == 1 and l[0] == s and l[1] == s and l[2] == s and l[3] == s and l[4] == s and l[5] == s and l[6] == s and l[7] == s and l[8] == s and l[9] == s and l[10] == s and l[11] == s and l[12] == s and l[13] == s and l[14] == s and l[15] == s and l[16] == s and l[17] == s:\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)!= len(s):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l[i]:\n            return False\n    return True\n    \ndef get_sublist_index(l, s):\n    '''\n    Return the index of the first occurence of the given sublist in the given list.\n    '''\n    #return -1 if there is no sublist, \n    #if the sublist starts with the given word, \n    #the index of the first occurrence is returned\n    if s[0] not in l:\n        return -1\n    for i in range(len(l)):\n        if s[i] == s[0]:\n            if s[i] in l[i]:\n                return i\n    return -1\n    \ndef get_sublist_occurence(l, s):\n    '''\n    Return the number of sublists that start with the given sublist.\n    '''\n    return sum([len(s[i:i+len(l[i])]) for i in range(0, len(l), len(l[i]))])\n    \ndef get_index_of_sublist(l, s):\n    '''\n    Return the index of the first occurence of the given sublist in the given list.\n    '''\n    for i in range(len(l)):\n        if s[0:len(l[i])] == l[i]:\n            return i\n    return -1\n    \ndef get_sublist_type(l, s):\n    '''\n    Return the type of the given sublist.\n    '''\n    if l == [] or len(l) == 0:\n        return \"empty\"\n    if s[0] in l:\n        return \"sublist\"\n    return \"list\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    t = tuple(Input)\n    if len(t) == 0:\n        return True\n    else:\n        if len(t) == 1:\n            return t[0] == t[0]\n        else:\n            if t[0]!= t[-1]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_set = set(Input)\n    for item in tuple_set:\n        for i in range(len(Input) - 1):\n            if Input[i] == item and Input[i + 1]!= item:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    p1 = tuple(Input[0])\n    p2 = tuple(Input[1])\n    if len(p1) == len(p2):\n        for i in range(len(p1)):\n            if p1[i]!= p2[i]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(n):\n        for j in range(i,n):\n            if(Input[i][0]!= Input[j][0]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple1 = ()\n    tuple2 = ()\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def count(Input):\n        '''\n        Return the number of tuple in given list.\n        '''\n        return len(Input)\n    \n    def find_equal_tuple(Input):\n        '''\n        Return the length of given list if all the given tuples have equal length or not.\n        '''\n        # TODO: complete this function\n        return count(Input)\n    \n    if len(Input) < 3:\n        return True\n    \n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i] == Input[j]:\n                return False\n    \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_equal = False\n    for index in range(0, len(Input)-1):\n        if Input[index] == Input[index+1]:\n            length_equal = True\n            break\n        else:\n            length_equal = False\n    return length_equal\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # i=1,j=0\n    # p1=p2=0\n    for i in range(1,n):\n        p1 = i\n        for j in range(i,n):\n            # p1, p2 = p1+1, p2-1\n            if nums[p1] > nums[p2]:\n                # p1, p2 = p2, p1\n                p2 = p1\n                p1 = j\n                \n            elif nums[p1] < nums[p2]:\n                # p1, p2 = p2, p1\n                p1, p2 = p2, p1\n                \n            # else:\n            #     print(nums[p1], nums[p2])\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(0,i):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n        print(nums)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[len(nums) // 2]\n        for i in range(len(nums) - 1):\n            if nums[i] > pivot:\n                nums[i + 1] = nums[i]\n                nums[i] = pivot\n            else:\n                nums[i + 1] = nums[i]\n                nums[i] = pivot\n        nums[len(nums) - 1] = pivot\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        # swap if element is less than the minimum element in the list\n        # then remove minimum element from the list\n        for i in range(len(nums)):\n            for j in range(len(nums) - 1):\n                if nums[j] < nums[j + 1]:\n                    # swap if element is less than the minimum element in the list\n                    # then remove minimum element from the list\n                    nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # get the length of the array\n    length = len(nums)\n    # if the length is one, return it\n    if length == 1:\n        return nums\n    # find the position where the number is missing\n    position = length - 1\n    # check the values are in order and sort them\n    for i in range(length):\n        # find the next smallest number\n        for j in range(position, 0, -1):\n            # if the number at the position is greater than the next smallest number, swap them\n            if nums[j] > nums[j - 1]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n                position -= 1\n        # if we reach this point, the number at the position is less than the first number\n        # return it\n        if i == position:\n            nums[position] = nums[0]\n            position -= 1\n    # return the sorted array\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                temp = nums[j]\n                nums[j] = nums[j + 1]\n                nums[j + 1] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    pivot = nums[0]\n    small, big = [], []\n    \n    # Find minimum element\n    for num in nums:\n        if num < pivot:\n            small.append(num)\n        else:\n            big.append(num)\n    \n    # Sort the small to the left\n    return comb_sort(small) + [pivot] + comb_sort(big)\n    \n    \n    "
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    new_nums = []\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Apply the bubble sort function\n    n = len(nums)\n    for i in range(n-1):\n        # Compare values in each position of the list\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                # swap the values\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if (n == 0): \n        return n \n    if (n % 3 == 0): \n        return n - 1 \n    return n - 1 \n \n \ndef test_square(): \n    assert dif_Square(10) == 1 \n \ndef main(): \n    print('Starting of testing') \n \n    # writing the tests \n    test_square() \n \n    print('All passed!') \n \nif __name__ == '__main__': \n    main() "
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n%4==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    print('\\n***********************1. Check whether the given number can be represented as the difference of two squares or not**********')\n    if n == (1+1):\n        print('The number you are looking for must be a negative number.')\n    else:\n        if n < 0:\n            print('Please enter a positive number.')\n        else:\n            if n % 2 == 0:\n                print('The number you are looking for must be a positive number and it must be odd.')\n            else:\n                print('The number you are looking for must be a positive number and it must be odd.')\n    print('\\n')\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return (n%2!=0)\n    else:\n        dif_square=n//2\n        if dif_square==n:\n            return False\n        else:\n            if dif_square%2==0:\n                return dif_square==(n//2)\n            else:\n                return dif_square==(n//2)+1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return '0'\n    elif n == 1: \n        return '1'\n    elif n == 2: \n        return '2'\n    else: \n        return dif_Square(n - 1) + dif_Square(n - 2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # write your code here\n    square_n = []\n    for i in range(1, n+1):\n        square_n.append(i*i)\n    square_n.remove(1)\n    if len(square_n)%2 == 1:\n        return 'Not possible'\n    else:\n        return square_n\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x, y = n\n    if (x*x == y*y):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n\n    y = n\n    for i in range(n - 1):\n        x = x - 1\n        y = y - 1\n        if x < 0 or y < 0 or x > n - 1 or y > n - 1:\n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Write your code here.\n    square_difference = abs(n[0] - n[1])\n    if square_difference == 0:\n        return True\n    elif square_difference == 1:\n        return False\n    else:\n        return dif_Square(square_difference)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # you can change the following line to use a regex\n    # for pattern in patterns:\n    #     if len(pattern)==3 and pattern[0]=='#':\n    #         if pattern[1]=='#':\n    #             if pattern[2]=='#':\n    #                 return True\n    #         elif pattern[1]=='0':\n    #             if pattern[2]=='0':\n    #                 return True\n    #     elif len(pattern)==2 and pattern[0]=='0':\n    #         if pattern[1]=='0':\n    #             return True\n    #     elif len(pattern)==1 and pattern[0]=='0':\n    #         return True\n    # return False\n    \n    # could you use a loop to check each colors\n    # and then check for identical patterns?\n    # or check the final one\n    \n    def check_samepattern(color):\n        '''\n        color: string\n        '''\n        \n        i=0\n        while i<len(colors):\n            if colors[i]==color:\n                return False\n            i+=1\n        \n        return True\n    \n    return check_samepattern(colors[0]) and check_samepattern(colors[1]) and check_samepattern(colors[2])\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = True\n    for color in colors:\n        for pattern in patterns:\n            if color not in pattern:\n                result = False\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # create a set of all the patterns\n    patterns_set = set(patterns)\n    # initialize a count to 0\n    count = 0\n    # iterate over the patterns set to create a set of all the colors\n    for color in colors:\n        # if the color is in the set of patterns, increment the count\n        if color in patterns_set:\n            count += 1\n    # return true if the count of colors is equal to the total number of colors\n    return count == len(colors)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    is_same = True\n    for i in range(len(colors)):\n        if len(colors[i])!= len(patterns[i]):\n            is_same = False\n            break\n        else:\n            for j in range(len(colors[i])):\n                if colors[i][j]!= patterns[i][j]:\n                    is_same = False\n                    break\n                else:\n                    is_same = True\n                    break\n    return is_same\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return False if set(colors).issubset(set(patterns)) else True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    d = {}\n    for k,v in colors.items():\n        d[k] = v\n    for p in patterns:\n        if d.get(p[0]) == p[1]:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for pattern, color in zip(patterns, colors):\n        if not check_pattern(pattern, color):\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index = 0\n    while index < len(colors) and index < len(patterns):\n        if colors[index] == patterns[index]:\n            index += 1\n        else:\n            break\n    return index == len(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = sorted(patterns)\n    for i in range(len(colors)):\n        if patterns[i] == colors[i]:\n            continue\n        else:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_str = \"\"\n    pattern_str = \"\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    # define a list of tuples \n    # use recursion\n    # first find the length\n    # if length is 0 then it can't be a tuple \n    # if the number of elements is a divisor then it can be a tuple \n    # if it can't be a tuple then it can't be a tuple \n    # return the tuple \n    \n    if len(test_list) == 0:\n        return None\n    length = len(test_list)\n    if length == 0:\n        return None\n    if length % K!= 0:\n        return None\n    \n    for i in range(0, length, K):\n        t = test_list[i:i+K]\n        if len(t) == K:\n            print(t)\n            return t\n    return None\n    \n    \n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for x in test_list:\n        if len(x[1]) % K == 0:\n            tuples.append(x)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # your code goes here\n    tuples = []\n    for t in test_list:\n        if len(t) % K == 0:\n            tuples.append(t)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[j][0]%K==0:\n                print(test_list[i],\"-\",test_list[j])\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [elem for elem in test_list if any(x%K==0 for x in elem)]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for item in test_list:\n        if(item[1]%K == 0):\n            result.append(item)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tup for tup in test_list if all(x % K for x in tup)]\n    \ndef test_suite():\n    '''\n    Test suite.\n    '''\n    print('Testing suite')\n    print('Tests for find_tuples')\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=2))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=1))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2,3),(4,5,6),(7,8,9),(10,11,12)]\n    print(find_tuples(test_list,K=1))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=4))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2,3),(4,5,6),(7,8,9),(10,11,12)]\n    print(find_tuples(test_list,K=1))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=2))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=1))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2,3),(4,5,6),(7,8,9),(10,11,12)]\n    print(find_tuples(test_list,K=4))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=1))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2,3),(4,5,6),(7,8,9),(10,11,12)]\n    print(find_tuples(test_list,K=4))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=2))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=1))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=2))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=4))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=1))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=4))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=4))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    print(find_tuples(test_list,K=2))\n    print(find_tuples(test_list,K=3))\n    print(find_tuples(test_list,K=5))\n    print(find_tuples(test_list,K=10))\n    print('--------')\n    test_list = [(1,2),(3,4),(5,6),(7,8),(9"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    answer = []\n    for i in test_list:\n        if i[0] % K == 0:\n            answer.append(i)\n    return answer\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i][0] % test_list[j][0] == 0 and test_list[i][1] % test_list[j][1] == 0):\n                test_list.append(test_list[i])\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # input check\n    if type(n)!= int: \n        print(\"Please input a number\")\n        return False\n    else: \n        if n % 11 == 0: \n            return True\n        else: \n            return False\n    "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2,n//2+1):\n        if (n%i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%10==11): \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    div = n//11\n    if div%10 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(n, 0, -1):\n        if (n%i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    elif n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    \n    \ndef is_possible(words):\n    '''\n    Check whether a word is possible or not.\n    Input:\n    - A list of words:\n    \n    Output:\n    - True if the word is possible, otherwise False\n    '''\n    possible = True\n    for word in words:\n        if not word_len(word):\n            possible = False\n            break\n    return possible\n    \n    \ndef common_letters(s1, s2):\n    '''\n    Find all letters in the string that are not present in the string s2.\n    '''\n    return set(s1).intersection(set(s2))\n    \n    \ndef words_in_common(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef uniques_in_common(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words except for those in the list of words that are not present in the\n    list of words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef one_to_n(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words except for those in the list of words that are not present in the\n    list of words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef all_words_in_common(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words except for those in the list of words that are not present in the\n    list of words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef words_with_length(words, n):\n    '''\n    Find all words with the given length, excluding words whose lengths are not\n    greater than n.\n    '''\n    result = []\n    for word in words:\n        if len(word) <= n:\n            result.append(word)\n    return result\n    \n    \ndef count_letters(s):\n    '''\n    Count the frequency of each letter in the string s.\n    '''\n    char_freq = {}\n    for char in s:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    return char_freq\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    length = len(s)\n    if length%2 == 1:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Note: O(n) time complexity and O(n) space complexity\n    # s = 'HACK!'\n    # return len(s) % 2\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    check_word = set(s.split())\n    if len(check_word)%2!=0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return \"Odd\"\n    else: \n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    try:\n        if len(s) % 2 == 1: \n            return \"the word is not odd\"\n        else:\n            return \"the word is odd\"\n    except Exception:\n        return \"the word is not a string\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    c = 0\n    for i in range(len(s)): \n        c += 1\n        if c % 2 == 1: \n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) < 2: \n        return False\n    if len(s) % 2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n % 2 * 4 - 3 * n \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    counter = 0 \n    for i in range(1, n + 1): \n        if (n % i == 0): \n            counter += i \n    return counter \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    start = 1\n    end = n + 1\n    while end < n:\n        if n % start == 0 and n % (end + start) == 0:\n            start = start + 1\n            end = end + 1\n            if start == end:\n                return n\n        else:\n            start = start + 1\n            end = end + 1\n    return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if (n == 1 or n == 0): \n        return n \n    else: \n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) \n \ndef dfs(v, cnt): \n    global ans\n    if v == n: \n        ans += 1\n        return\n    for i in range(v, n+1): \n        dfs(i, cnt) \n \ndef find_tetrahedral_number(n): \n    '''\n    Find the nth tetrahedral number.\n    '''\n    if (n == 1 or n == 0): \n        return n \n    else: \n        return find_tetrahedral_number(n-1) + find_tetrahedral_number(n-2) \n \n \ndef solve(): \n    '''\n    Solve the problem. \n    '''\n    global ans, nums, nums_sol, rows, cols, cols_sol, tetra, tetra_sol\n    print(\"Tetrahedral number:\")\n    ans = 0\n    nums = list(range(1, n+1))\n    nums_sol = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    rows = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    cols = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    cols_sol = [2, 3, 4, 5, 6, 7, 8, 9]\n    tetra = [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = 1\n    while True:\n        t = n * (n+1) // 6\n        if t > i:\n            return t - i\n        i += 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = 0\n    while i < n:\n        x = (n - i - 1) // 3\n        y = (n - i - 1) % 3\n        z = n - (i + 1)\n        if (z == 1 or z == 2) and (x == y):\n            i += 1\n        else:\n            if z == 1:\n                y = y - 1\n            elif z == 2:\n                z = z - 1\n            else:\n                x = x - 1\n    return (n - (i + 1) * 3 - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 21\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 25\n    elif n == 13:\n        return 27\n    elif n == 14:\n        return 29\n    elif n == 15:\n        return 31\n    elif n == 16:\n        return 33\n    elif n == 17:\n        return 35\n    elif n == 18:\n        return 37\n    elif n == 19:\n        return 39\n    elif n == 20:\n        return 41\n    elif n == 21:\n        return 43\n    elif n == 22:\n        return 45\n    elif n == 23:\n        return 47\n    elif n == 24:\n        return 49\n    elif n == 25:\n        return 51\n    elif n == 26:\n        return 53\n    elif n == 27:\n        return 55\n    elif n == 28:\n        return 57\n    elif n == 29:\n        return 59\n    elif n == 30:\n        return 61\n    elif n == 31:\n        return 63\n    elif n == 32:\n        return 65\n    elif n == 33:\n        return 67\n    elif n == 34:\n        return 69\n    elif n == 35:\n        return 71\n    elif n == 36:\n        return 73\n    elif n == 37:\n        return 75\n    elif n == 38:\n        return 77\n    elif n == 39:\n        return 79\n    elif n == 40:\n        return 81\n    elif n == 41:\n        return 83\n    elif n == 42:\n        return 85\n    elif n == 43:\n        return 87\n    elif n == 44:\n        return 89\n    elif n == 45:\n        return 91\n    elif n == 46:\n        return 93\n    elif n == 47:\n        return 95\n    elif n == 48:\n        return 97\n    elif n == 49:\n        return 99\n    elif n == 50:\n        return 101\n    elif n == 51:\n        return 103\n    elif n == 52:\n        return 105\n    elif n == 53:\n        return 107\n    elif n == 54:\n        return 109\n    elif n == 55:\n        return 111\n    elif n == 56:\n        return 113\n    elif n == 57:\n        return 115\n    elif n == 58:\n        return 117\n    elif n == 59:\n        return 119\n    elif n == 60:\n        return 121\n    elif n == 61:\n        return 123\n    elif n == 62:\n        return 125\n    elif n == 63:\n        return 127\n    elif n == 64:\n        return 129\n    elif n == 65:\n        return 131\n    elif n == 66:\n        return 133\n    elif n == 67:\n        return 135\n    elif n == 68:\n        return 137\n    elif n == 69:\n        return 139\n    elif n == 70:\n        return 141\n    elif n == 71:\n        return 143\n    elif n == 72:\n        return 145\n    elif n == 73:\n        return 147\n    elif n == 74:\n        return 149\n    elif n == 75:\n        return 151\n    elif n == 76:\n        return 153\n    elif n == 77:\n        return 155\n    elif n == 78:\n        return 157\n    elif n == 79:\n        return 159\n    elif n == 80:\n        return 161\n    elif n == 81:\n        return 163\n    elif n == 82:\n        return 165\n    elif n == 83:\n        return 167\n    elif n == 84:\n        return 169\n    elif n == 85:\n        return 171\n    elif n == 86:\n        return 173\n    elif n == 87:\n        return 175\n    elif n == 88:\n        return 177\n    elif n == 89:\n        return 179\n    elif n == 90:\n        return 181\n    elif n == 91:\n        return 183\n    elif n == 92:\n        return 185\n    elif n == 93:\n        return 187\n    elif n == 94:\n        return 189\n    elif n == 95:\n        return 191\n    elif n == 96:\n        return 193\n    elif n == 97:\n        return 195\n    elif n == 98:\n        return 197\n    elif n == 99:\n        return 199\n    elif n == 100:\n        return 201\n    elif n == 101:\n        return 203\n    elif n == 102:\n        return 205\n    elif n == 103:\n        return 207\n    elif n == 104:\n        return 209\n    elif n == 105:\n        return 211\n    elif n == 106:\n        return 213\n    elif n == 107:\n        return 215\n    elif n == 108:\n        return 217\n    elif n == 109:\n        return 219\n    elif n == 111:\n        return 221\n    elif n == 112:\n        return 223\n    elif n == 113:\n        return 225\n    elif n == 114:\n        return 227\n    elif n == 115:\n        return 229\n    elif n == 116:\n        return 231\n    elif n == 117:\n        return 233\n    elif n == 118:\n        return 235\n    elif n == 119:\n        return 237\n    elif n == 120:\n        return 239\n    elif n == 121:\n        return 241\n    elif n == 122:\n        return 243\n    elif n == 123:\n        return 245\n    elif n == 124:\n        return 247\n    elif n == 125:\n        return 249\n    elif n == 126:\n        return 251\n    elif n == 127:\n        return 253\n    elif n == 128:\n        return 255\n    elif n == 129:\n        return 257\n    elif n == 130:\n        return 259\n    elif n == 131:\n        return 261\n    elif n == 132:\n        return 263\n    elif n == 133:\n        return 265\n    elif n == 134:\n        return 267\n    elif n == 135:\n        return 269\n    elif n == 136:\n        return 271\n    elif n == 137:\n        return 273\n    elif n == 138:\n        return 275\n    elif n == 139:\n        return 277\n    elif n == 140:\n        return 279\n    elif n == 141:\n        return 281\n    elif n == 142:\n        return 283\n    elif n == 143:\n        return 285\n    elif n == 144:\n        return 287\n    elif n == 145:\n        return 289\n    elif n == 146:\n        return 291\n    elif n == 147:\n        return 293\n    elif n == 148:\n        return 295\n    elif n == 149:\n        return 297\n    elif n == 150:\n        return 299\n    elif n == 151:\n        return 301\n    elif n == 152:\n        return 303\n    elif n == 153:\n        return 305\n    elif n == 154:\n        return 307\n    elif n == 155:\n        return 309\n    elif n == 156:\n        return 311\n    elif n == 157:\n        return 313\n    elif n == 158:\n        return 315\n    elif n == 159:\n        return 317\n    elif n == 160:\n        return 319\n    elif n == 161:\n        return 321\n    elif n == 162:\n        return 323\n    elif n == 163:\n        return 325\n    elif n == 164:\n        return 327\n    elif n == 165:\n        return 329\n    elif n == 166:\n        return 331\n    elif n == 167:\n        return 333\n    elif n == 168:\n        return 33"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    k = 3\n    while (k * k + 1) * (k + 1) < n: \n        k = 3 * k + 1\n    return k \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def get_tetra(n):\n        return n**2\n    n = 1\n    for i in range(n):\n        if get_tetra(i) % 2!= 0:\n            n += 1\n    return n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if (n < 1):\n        return None\n    elif (n == 1):\n        return 1\n    elif (n == 2):\n        return 2\n    elif (n == 3):\n        return 4\n    elif (n == 4):\n        return 8\n    elif (n == 5):\n        return 16\n    elif (n == 6):\n        return 32\n    elif (n == 7):\n        return 64\n    elif (n == 8):\n        return 128\n    elif (n == 9):\n        return 256\n    elif (n == 10):\n        return 512\n    elif (n == 11):\n        return 1024\n    elif (n == 12):\n        return 2048\n    elif (n == 13):\n        return 4096\n    elif (n == 14):\n        return 8192\n    elif (n == 15):\n        return 16384\n    elif (n == 16):\n        return 32768\n    elif (n == 17):\n        return 65536\n    elif (n == 18):\n        return 131072\n    elif (n == 19):\n        return 262144\n    elif (n == 20):\n        return 524288\n    elif (n == 21):\n        return 1048576\n    elif (n == 22):\n        return 2097152\n    elif (n == 23):\n        return 4194304\n    elif (n == 24):\n        return 8388608\n    elif (n == 25):\n        return 16777216\n    elif (n == 26):\n        return 33554432\n    elif (n == 27):\n        return 67108864\n    elif (n == 28):\n        return 134217728\n    elif (n == 29):\n        return 268435456\n    elif (n == 30):\n        return 536870912\n    elif (n == 31):\n        return 1073741824\n    elif (n == 32):\n        return -2147483648\n    elif (n == 33):\n        return -9223372036854775808\n    elif (n == 34):\n        return -2147483648\n    elif (n == 35):\n        return -9223372036854775807\n    elif (n == 36):\n        return -2147483648\n    elif (n == 37):\n        return -2147483648\n    elif (n == 38):\n        return -2147483648\n    elif (n == 39):\n        return -9223372036854775808\n    elif (n == 40):\n        return -2147483648\n    elif (n == 41):\n        return -9223372036854775807\n    elif (n == 42):\n        return -2147483648\n    elif (n == 43):\n        return -9223372036854775808\n    elif (n == 44):\n        return -2147483648\n    elif (n == 45):\n        return -2147483648\n    elif (n == 46):\n        return -9223372036854775808\n    elif (n == 47):\n        return -2147483648\n    elif (n == 48):\n        return -9223372036854775807\n    elif (n == 49):\n        return -2147483648\n    elif (n == 50):\n        return -9223372036854775808\n    elif (n == 51):\n        return -2147483648\n    elif (n == 52):\n        return -2147483648\n    elif (n == 53):\n        return -9223372036854775807\n    elif (n == 54):\n        return -2147483648\n    elif (n == 55):\n        return -2147483648\n    elif (n == 56):\n        return -9223372036854775808\n    elif (n == 57):\n        return -2147483648\n    elif (n == 58):\n        return -9223372036854775807\n    elif (n == 59):\n        return -2147483648\n    elif (n == 60):\n        return -2147483648\n    elif (n == 61):\n        return -9223372036854775808\n    elif (n == 62):\n        return -2147483648\n    elif (n == 63):\n        return -2147483648\n    elif (n == 64):\n        return -9223372036854775808\n    elif (n == 65):\n        return -2147483648\n    elif (n == 66):\n        return -2147483648\n    elif (n == 67):\n        return -9223372036854775808\n    elif (n == 68):\n        return -2147483648\n    elif (n == 69):\n        return -2147483648\n    elif (n == 70):\n        return -9223372036854775807\n    elif (n == 71):\n        return -2147483648\n    elif (n == 72):\n        return -2147483648\n    elif (n == 73):\n        return -9223372036854775808\n    elif (n == 74):\n        return -2147483648\n    elif (n == 75):\n        return -2147483648\n    elif (n == 76):\n        return -9223372036854775807\n    elif (n == 77):\n        return -2147483648\n    elif (n == 78):\n        return -2147483648\n    elif (n == 79):\n        return -9223372036854775808\n    elif (n == 80):\n        return -2147483648\n    elif (n == 81):\n        return -2147483648\n    elif (n == 82):\n        return -9223372036854775807\n    elif (n == 83):\n        return -2147483648\n    elif (n == 84):\n        return -2147483648\n    elif (n == 85):\n        return -9223372036854775808\n    elif (n == 86):\n        return -2147483648\n    elif (n == 87):\n        return -2147483648\n    elif (n == 88):\n        return -9223372036854775807\n    elif (n == 89):\n        return -2147483648\n    elif (n == 90):\n        return -2147483648\n    elif (n == 91):\n        return -9223372036854775808\n    elif (n == 92):\n        return -2147483648\n    elif (n == 93):\n        return -2147483648\n    elif (n == 94):\n        return -9223372036854775807\n    elif (n == 95):\n        return -2147483648\n    elif (n == 96):\n        return -2147483648\n    elif (n == 97):\n        return -9223372036854775808\n    elif (n == 98):\n        return -2147483648\n    elif (n == 99):\n        return -2147483648\n    elif (n == 100):\n        return -9223372036854775807\n    elif (n == 101):\n        return -2147483648\n    elif (n == 102):\n        return -2147483648\n    elif (n == 103):\n        return -9223372036854775808\n    elif (n == 104):\n        return -2147483648\n    elif (n == 105):\n        return -2147483648\n    elif (n == 106):\n        return -9223372036854775807\n    elif (n == 107):\n        return -2147483648\n    elif (n == 108):\n        return -2147483648\n    elif (n == 109):\n        return -9223372036854775808\n    elif (n == 110):\n        return -2147483648\n    elif (n == 111):\n        return -2147483648\n    elif (n == 112):"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3 * math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=math.radians(r)\n    a=math.pi*r*r\n    volume=4*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 3.14*r*r*r\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4*math.pi*(r**2)*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 5*math.pi*(r**2)*(2*h)\n    return volume\ndef volume_square(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = 4*math.pi*(r**2)\n    return volume\ndef volume_triangle(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_tetrahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    volume = 4*math.pi*(r**2)\n    return volume\ndef volume_hexahedron(r):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    volume = 4*math.pi*(r**2)\n    return volume\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = 4*math.pi*(r**3)\n    return volume\ndef volume_traingle(r):\n    '''\n    Write a function to find the volume of a traingle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_rhombus(r):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 2*math.pi*r**2\n    return volume\ndef volume_pentagon(r):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    volume = 2*math.pi*r**2*(2*r+1)\n    return volume\ndef volume_hexagon(r):\n    '''\n    Write a function to find the volume of a hexaagon.\n    '''\n    volume = 2*math.pi*r**2*(3*r+1)\n    return volume\ndef volume_octagon(r):\n    '''\n    Write a function to find the volume of a octagon.\n    '''\n    volume = 2*math.pi*r**2*(6*r+1)\n    return volume\ndef volume_dodecagon(r):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    volume = 2*math.pi*r**2*(8*r+1)\n    return volume\ndef volume_heptagon(r):\n    '''\n    Write a function to find the volume of a heptagon.\n    '''\n    volume = 2*math.pi*r**2*(16*r+1)\n    return volume\ndef volume_octagon_double(r):\n    '''\n    Write a function to find the volume of a octagon.\n    '''\n    volume = 2*math.pi*r**2*(32*r+1)\n    return volume\ndef volume_heptagon_double(r):\n    '''\n    Write a function to find the volume of a heptagon.\n    '''\n    volume = 2*math.pi*r**2*(64*r+1)\n    return volume\ndef volume_rhombus_double(r):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 2*math.pi*r**2*(32*r+1)\n    return volume\ndef volume_dodecagon_double(r):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    volume = 2*math.pi*r**2*(16*r+1)\n    return volume\ndef volume_rhombus_triangle(r):\n    '''\n    Write a function to find the volume of a rhombus triangle.\n    '''\n    volume = 4*math.pi*r**2*(r+1)\n    return volume\ndef volume_hexagon_triangle(r):\n    '''\n    Write a function to find the volume of a hexagon triangle.\n    '''\n    volume = 4*math.pi*(r**2)\n    return volume\ndef volume_octagon_triangle(r):\n    '''\n    Write a function to find the volume of a octagon triangle.\n    '''\n    volume = 4*math.pi*(r**2)\n    return volume\ndef volume_dodecagon_triangle(r):\n    '''\n    Write a function to find the volume of a dodecagon triangle.\n    '''\n    volume = 4*math.pi*(r**2)\n    return volume\ndef volume_heptahedron_triangle(r):\n    '''\n    Write a function to find the volume of a heptahedron triangle.\n    '''\n    volume = 4*math.pi*(r**3)\n    return volume\ndef volume_cube_triangle(r):\n    '''\n    Write a function to find the volume of a cube triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_traingle_triangle(r):\n    '''\n    Write a function to find the volume of a traingle triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_rhombus_triangle(r):\n    '''\n    Write a function to find the volume of a rhombus triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_pentagon_triangle(r):\n    '''\n    Write a function to find the volume of a pentagon triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_hexagon_triangle(r):\n    '''\n    Write a function to find the volume of a heptahedron triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_octagon_triangle(r):\n    '''\n    Write a function to find the volume of a octagon triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_dodecagon_triangle(r):\n    '''\n    Write a function to find the volume of a dodecagon triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_heptahedron_triangle(r):\n    '''\n    Write a function to find the volume of a heptahedron triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_octagon_triangle_double(r):\n    '''\n    Write a function to find the volume of a octagon triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_heptahedron_triangle_double(r):\n    '''\n    Write a function to find the volume of a heptahedron triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_rhombus_triangle_double(r):\n    '''\n    Write a function to find the volume of a rhombus triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_dodecagon_triangle_double(r):\n    '''\n    Write a function to find the volume of a dodecagon triangle.\n    '''\n    volume = 3*math.pi*(r**2)\n    return volume\ndef volume_rhombus_triangle_triangle(r):\n    '''\n    Write a function to find the volume of a rhombus triangle.\n    '''\n    volume = 3*math.pi*(r**2)"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #print(type(r))\n    volume = 4/3 * math.pi * (r**3)\n    #print(volume)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Your code here\n    #This is the equation\n    c = r**3\n    #Note the %-sign\n    return c\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 3.141592654\n    l = 2*c*r\n    vol = l*l*l\n    return vol\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 3.141592654\n    l = 2*c*r\n    vol = l*l\n    return vol\ndef area_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 3.141592654\n    l = 2*c*r\n    vol = l*l\n    return vol\ndef volume_of_cylinder(diameter, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = diameter/2\n    vol = math.sqrt(r*r - height*height)\n    return vol\ndef cylinder_volume(diameter, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = diameter/2\n    vol = math.sqrt(r*r - height*height)\n    return vol\ndef volume_of_rectangle(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = length*height\n    return vol\ndef rectangle_volume(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = length*height\n    return vol\ndef volume_of_doughnut(num):\n    '''\n    Write a function to find the volume of a doughnut.\n    '''\n    vol = math.pi*num*num*num\n    return vol\ndef doughnut_volume(num):\n    '''\n    Write a function to find the volume of a doughnut.\n    '''\n    vol = math.pi*num*num\n    return vol\ndef volume_of_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = side_a*side_a\n    b = side_b*side_b\n    c = side_c*side_c\n    vol = (a+b+c)/2\n    return vol\ndef triangle_volume(side_a, side_b, side_c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = side_a*side_a\n    b = side_b*side_b\n    c = side_c*side_c\n    vol = (a+b+c)/2\n    return vol\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = volume_sphere(r)\n    return vol\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = sphere_volume(r)\n    return vol\ndef volume_of_cylinder(d, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = cylinder_volume(d, h)\n    return vol\ndef cylinder_volume(d, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = volume_of_cylinder(d, h)\n    return vol\ndef volume_of_rectangle(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = length*height\n    return vol\ndef rectangle_volume(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = length*height\n    return vol\ndef volume_of_doughnut(num):\n    '''\n    Write a function to find the volume of a doughnut.\n    '''\n    vol = math.pi*num*num*num\n    return vol\ndef doughnut_volume(num):\n    '''\n    Write a function to find the volume of a doughnut.\n    '''\n    vol = math.pi*num*num\n    return vol\ndef volume_of_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = side_a*side_a\n    b = side_b*side_b\n    c = side_c*side_c\n    vol = (a+b+c)/2\n    return vol\ndef triangle_volume(side_a, side_b, side_c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = side_a*side_a\n    b = side_b*side_b\n    c = side_c*side_c\n    vol = (a+b+c)/2\n    return vol\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = sphere_volume(r)\n    return vol\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = volume_sphere(r)\n    return vol\ndef volume_of_cylinder(d, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = cylinder_volume(d, h)\n    return vol\ndef cylinder_volume(d, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = volume_of_cylinder(d, h)\n    return vol\ndef volume_of_rectangle(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = length*height\n    return vol\ndef rectangle_volume(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = length*height\n    return vol\ndef volume_of_doughnut(num):\n    '''\n    Write a function to find the volume of a doughnut.\n    '''\n    vol = math.pi*num*num*num\n    return vol\ndef doughnut_volume(num):\n    '''\n    Write a function to find the volume of a doughnut.\n    '''\n    vol = math.pi*num*num\n    return vol\ndef volume_of_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = side_a*side_a\n    b = side_b*side_b\n    c = side_c*side_c\n    vol = (a+b+c)/2\n    return vol\ndef triangle_volume(side_a, side_b, side_c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    a = side_a*side_a\n    b = side_b*side_b\n    c = side_c*side_c\n    vol = (a+b+c)/2\n    return vol\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = volume_sphere(r)\n    return vol\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = sphere_volume(r)\n    return vol\ndef volume_of_cylinder(d, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = cylinder_volume(d, h)\n    return vol\ndef cylinder_volume(d, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = volume_of_cylinder(d, h)\n    return vol\ndef volume_of_rectangle(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = length*height\n    return vol\ndef rectangle_volume(length, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = lengt"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4 * math.pi * r**2\n    return V\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = ''\n    for i in range(len(strr)):\n        res = res + chr(ord(strr[i]) % 26 + ord('A'))\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 1:\n        return chr(ord(strr) % 26)\n    else:\n        return get_Char(strr[0]) + get_Char(strr[1:])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if(strr == ''):\n        return ''\n    else:\n        char = ''\n        for i in range(ord(strr[0]) - ord('a')):\n            char += '0'\n        for i in range(ord(strr[-1]) - ord('z')):\n            char += '1'\n        return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x = 0\n    for i in strr:\n        x = x + ord(i)\n    return x % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    a = ord(strr[0])\n    for i in range(1, len(strr)):\n        a += ord(strr[i])\n    return a % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in strr:\n        if ord(i)%26 == ord(i):\n            char += i\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    return ord(strr[0]) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list_of_char = []\n    for i in strr:\n        list_of_char.append(ord(i))\n    list_of_char_mod_26 = []\n    for j in list_of_char:\n        list_of_char_mod_26.append(j % 26)\n    return(list_of_char_mod_26)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = list(strr)\n    for i in range(len(strr)):\n        strr[i] = chr(ord(strr[i]) - 65)\n    return ''.join(strr)"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod = 26\n    res = 0\n    s = ''\n    for i in strr:\n        res += ord(i) * mod\n        mod -= 1\n    return res % mod\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        raise Exception(\"n is less than 1\")\n    if n == 1:\n        return '1'\n    else:\n        return ''.join([str(x) for x in newman[n - 1:n + 1]])\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # get the number of elements in newman\n    length = len(newman)\n    # use a while loop to find the nth element\n    while n > 0:\n        # add one to n\n        n = n - 1\n        # add the nth element to the new man\n        newman.append(n)\n    # return the newman\n    return newman"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 1 + sequence(n-2) + sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n=n+1\n    sequence=0\n    seq=list(newman[n])\n    seq.reverse()\n    seq=seq[::-1]\n    for i in range(len(seq)):\n        sequence+=newman[seq[i]]\n    return sequence\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    seq = [a, b]\n    n = n % 10\n    if n == 0:\n        print(\"The newman sequence is\", seq)\n        return\n    while n!= 0:\n        if n % 2 == 0:\n            a = seq[a]\n        else:\n            b = seq[b]\n        n = n // 2\n        seq = [a, b]\n    print(seq)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return n + sequence(n-1)\ndef main():\n    '''\n    To run the program\n    '''\n    n = int(input())\n    assert n >= 1\n    print(n)\n    print(sequence(n))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return (n-1) * sequence(n-1) + sequence(n-2)\n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    print(n)\n    if n >= 1:\n        return sequence(n - 1) + sequence(n - 2)\n    else:\n        return 0\nprint(sequence(12))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    total = n*n+1\n    end = (n+1)*n-1\n    mid = int(total/2)\n    # print(total, end, mid)\n    if(mid <= end): \n        for i in range(mid, end, -1): \n            if(n % n == 0): \n                return i \n    else: \n        return 0\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #Write your code here.\n    return (4/3)*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (4/3)*math.pi*(r**3)\n    return a\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a = surfacearea_sphere(r)\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = (4/3)*math.pi*(r**3)\n    return a\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = surfacearea_sphere(r)\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere4(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere5(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef surface_volume_sphere(r):\n    '''\n    Write a function to find the surface volume of a sphere.\n    '''\n    a = surfacearea_sphere(r)\n    return a\ndef surface_volume_sphere2(r):\n    '''\n    Write a function to find the surface volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef surface_volume_sphere3(r):\n    '''\n    Write a function to find the surface volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef surface_volume_sphere4(r):\n    '''\n    Write a function to find the surface volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef surface_volume_sphere5(r):\n    '''\n    Write a function to find the surface volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_area(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_area_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_area_sphere3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_area_sphere4(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_area_sphere5(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_volume_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_volume_sphere3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_volume_sphere4(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_volume_sphere5(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere4(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere5(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere6(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere7(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere8(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere9(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere10(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere11(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere12(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere13(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere14(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere15(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_sphere(r)\n    return a\ndef volume_sphere_surface_volume_sphere16(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = surface_volume_spher"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #Convert the radius into a list\n    r = r[:]\n    #Check that the radius is not zero\n    if r[0]!= 0:\n        #Loop through all the coordinates\n        for i in range(len(r)):\n            #Calculate the distance\n            d = math.sqrt(r[i][0]**2 + r[i][1]**2 + r[i][2]**2)\n            #Calculate the area\n            area = (4/3)*math.pi*d*r[i][0]\n            #Return the result\n            return area\n    else:\n        #Return 0 if the radius is 0\n        return 0\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = (4 * math.pi * r**3)\n    print('The surface area is %.2f'%surface)\ndef area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4 / 3) * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef length_sphere(r):\n    '''\n    Write a function to find the length of a sphere.\n    '''\n    volume = (4 / 3) * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    volume = (4 / 3) * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    surface = (4 / 3) * math.pi * (r**3)\n    print('The volume is %.2f'%surface)\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    surface = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%surface)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    surface = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%surface)\ndef sphere_volume_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef area_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef length_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef perimeter_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    surface = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%surface)\ndef sphere_volume_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef surface_area_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    surface = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%surface)\ndef area_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef volume_of_sphere_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef sphere_volume_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef sphere_volume_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef sphere_volume_square_square(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    print('The volume is %.2f'%volume)\ndef area_of_sphere_square"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = (4.0 * math.pi * r**3)\n    return S\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * (r ** 3))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 0.5 * math.pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    center_hex_number = 0\n    while (n!= 0 and n!= 4):\n        center_hex_number += 2\n        n -= 2\n    return center_hex_number\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = (n+1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n >= 0:\n        return n**3 + n**2\n    else:\n        return n**3 - n**2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = 0\n    for x in range(0,n):\n        if x <= 1:\n            result += x*6\n        else:\n            result += x*3\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n -= 1\n    while n > 0:\n        n = n - 2\n    \n    return n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = n\n    while result <= n:\n        result = result + n\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**2 - n + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(f\"n must be nonnegative integer\")\n    if n <= 2:\n        return n\n    return (centered_hexagonal_number(n - 1) + 2 * n + 1) // 3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_keys = dict1.keys()\n    dict2_keys = dict2.keys()\n    dict3_keys = dict3.keys()\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Dictionaries are dictionaries ordered by key\n    merged_dict = dict()\n    \n    # Add elements from dict1 to dict2\n    for item in dict1.items():\n        if item[0] in dict2:\n            merged_dict[item[0]] = dict1[item[0]] + dict2[item[0]]\n        else:\n            merged_dict[item[0]] = dict1[item[0]]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if value in dict3:\n            result[key] = dict3[value]\n        else:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {key:dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict2 and key in dict1 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 else dict2[key] if key in dict1 and key in dict2 and key in dict3 else dict1[key] if key in dict1 and key in dict2 and key in dict3 els"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merge = dict1.copy()\n    dict_merge.update(dict2)\n    dict_merge.update(dict3)\n    return dict_merge\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key, val in dict1.items():\n        if key in dict2.keys():\n            dict2[key].update(val)\n        elif key in dict3.keys():\n            dict3[key].update(val)\n        else:\n            dict3[key] = val\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # TODO: Return the merged dictionary\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary\n    merged_dict = {}\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = collections.defaultdict(int)\n    for i in list1:\n        dictionary[i] += 1\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.Counter(list1)\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1= collections.Counter(list1)\n    freq={}\n    for i in dict1:\n        freq[i]=dict1[i]\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=dict(collections.Counter(list1))\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in range(len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]]+=1\n        else:\n            freq[list1[i]]=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dic = collections.Counter(list1)\n    return freq_dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    return dic\n    #dic = {}\n    #for i in list1:\n        #dic[i] = dic[i] + 1\n    #return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq_dict = {}\n    \n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    closest = N\n    while(N!= 1):\n        if (N % 2) == 1:\n            n = n // 2\n            N = N // 2\n        else:\n            n = 3 * (n // 2)\n            N = 3 * (N // 2)\n    return(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = -1\n    smallest_num_2 = -1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    elif N == 0:\n        return 1\n    elif N == 1:\n        return 0\n    elif N % 2 == 0:\n        return 1 + closest_num(N//2)\n    else:\n        return 1 + closest_num(N-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if (N == 1):\n        return N\n    if (N == 2):\n        return 1\n    return closest_num(N//2)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lst = []\n    for i in range(0, N):\n        if i == N - 1:\n            lst.append(i)\n        elif i < N - 1:\n            if lst[i+1] - lst[i] > lst[i+1] - lst[i-1]:\n                lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(closest_num(x) for x in range(1, N + 1)"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N in range(1,1000):\n        return N\n    \n    smallest = 0\n    smallest_num = N\n    for num in range(N,1001):\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n    \nprint(closest_num(20000))\nprint(closest_num(1000))\nprint(closest_num(1000000000000)"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    \n    if N % 10 == 0:\n        return N // 10\n    \n    # get all the possible numbers below N\n    # print(N)\n    # print(N // 10)\n    \n    lower = N // 10\n    \n    if N % 10 > lower:\n        return closest_num(N % 10)\n    else:\n        return lower\n    \ndef closest_num2(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    \n    if N % 10 == 0:\n        return N // 10\n    \n    # get all the possible numbers below N\n    # print(N)\n    # print(N // 10)\n    \n    lower = N // 10\n    \n    if N % 10 > lower:\n        return closest_num2(N % 10)\n    else:\n        return lower\n        \ndef closest_num3(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    \n    if N % 10 == 0:\n        return N // 10\n    \n    # get all the possible numbers below N\n    # print(N)\n    # print(N // 10)\n    \n    lower = N // 10\n    \n    if N % 10 > lower:\n        return closest_num3(N % 10)\n    else:\n        return lower\n        \nprint(closest_num(20))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = abs(N)\n    if N == 1:\n        return 1\n    elif N == 0:\n        return 0\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    elif N == 4:\n        return 3\n    elif N == 5:\n        return 4\n    elif N == 6:\n        return 5\n    elif N == 7:\n        return 6\n    elif N == 8:\n        return 7\n    elif N == 9:\n        return 8\n    elif N == 10:\n        return 9\n    elif N == 11:\n        return 10\n    elif N == 12:\n        return 11\n    elif N == 13:\n        return 12\n    elif N == 14:\n        return 13\n    elif N == 15:\n        return 14\n    elif N == 16:\n        return 15\n    elif N == 17:\n        return 16\n    elif N == 18:\n        return 17\n    elif N == 19:\n        return 18\n    elif N == 20:\n        return 19\n    elif N == 21:\n        return 20\n    elif N == 22:\n        return 21\n    elif N == 23:\n        return 22\n    elif N == 24:\n        return 23\n    elif N == 25:\n        return 24\n    elif N == 26:\n        return 25\n    elif N == 27:\n        return 26\n    elif N == 28:\n        return 27\n    elif N == 29:\n        return 28\n    elif N == 30:\n        return 29\n    elif N == 31:\n        return 30\n    elif N == 32:\n        return 31\n    elif N == 33:\n        return 32\n    elif N == 34:\n        return 33\n    elif N == 35:\n        return 34\n    elif N == 36:\n        return 35\n    elif N == 37:\n        return 36\n    elif N == 38:\n        return 37\n    elif N == 39:\n        return 38\n    elif N == 40:\n        return 39\n    elif N == 41:\n        return 40\n    elif N == 42:\n        return 41\n    elif N == 43:\n        return 42\n    elif N == 44:\n        return 43\n    elif N == 45:\n        return 44\n    elif N == 46:\n        return 45\n    elif N == 47:\n        return 46\n    elif N == 48:\n        return 47\n    elif N == 49:\n        return 48\n    elif N == 50:\n        return 49\n    elif N == 51:\n        return 50\n    elif N == 52:\n        return 51\n    elif N == 53:\n        return 52\n    elif N == 54:\n        return 53\n    elif N == 55:\n        return 54\n    elif N == 56:\n        return 55\n    elif N == 57:\n        return 56\n    elif N == 58:\n        return 57\n    elif N == 59:\n        return 58\n    elif N == 60:\n        return 59\n    elif N == 61:\n        return 60\n    elif N == 62:\n        return 61\n    elif N == 63:\n        return 62\n    elif N == 64:\n        return 63\n    elif N == 65:\n        return 64\n    elif N == 66:\n        return 65\n    elif N == 67:\n        return 66\n    elif N == 68:\n        return 67\n    elif N == 69:\n        return 68\n    elif N == 70:\n        return 69\n    elif N == 71:\n        return 70\n    elif N == 72:\n        return 71\n    elif N == 73:\n        return 72\n    elif N == 74:\n        return 73\n    elif N == 75:\n        return 74\n    elif N == 76:\n        return 75\n    elif N == 77:\n        return 76\n    elif N == 78:\n        return 77\n    elif N == 79:\n        return 78\n    elif N == 80:\n        return 79\n    elif N == 81:\n        return 80\n    elif N == 82:\n        return 81\n    elif N == 83:\n        return 82\n    elif N == 84:\n        return 83\n    elif N == 85:\n        return 84\n    elif N == 86:\n        return 85\n    elif N == 87:\n        return 86\n    elif N == 88:\n        return 87\n    elif N == 89:\n        return 88\n    elif N == 90:\n        return 89\n    elif N == 91:\n        return 90\n    elif N == 92:\n        return 91\n    elif N == 93:\n        return 92\n    elif N == 94:\n        return 93\n    elif N == 95:\n        return 94\n    elif N == 96:\n        return 95\n    elif N == 97:\n        return 96\n    elif N == 98:\n        return 97\n    elif N == 99:\n        return 98\n    elif N == 100:\n        return 99\n    elif N == 101:\n        return 100\n    elif N == 102:\n        return 101\n    elif N == 103:\n        return 102\n    elif N == 104:\n        return 103\n    elif N == 105:\n        return 104\n    elif N == 106:\n        return 105\n    elif N == 107:\n        return 106\n    elif N == 108:\n        return 107\n    elif N == 109:\n        return 108\n    elif N == 110:\n        return 109\n    elif N == 111:\n        return 110\n    elif N == 112:\n        return 111\n    elif N == 113:\n        return 112\n    elif N == 114:\n        return 113\n    elif N == 115:\n        return 114\n    elif N == 116:\n        return 115\n    elif N == 117:\n        return 116\n    elif N == 118:\n        return 117\n    elif N == 119:\n        return 118\n    elif N == 120:\n        return 119\n    elif N == 121:\n        return 120\n    elif N == 122:\n        return 121\n    elif N == 123:\n        return 122\n    elif N == 124:\n        return 123\n    elif N == 125:\n        return 124\n    elif N == 126:\n        return 125\n    elif N == 127:\n        return 126\n    elif N == 128:\n        return 127\n    elif N == 129:\n        return 128\n    elif N == 130:\n        return 129\n    elif N == 131:\n        return 130\n    elif N == 132:\n        return 131\n    elif N == 133:\n        return 132\n    elif N == 134:\n        return 133\n    elif N == 135:\n        return 134\n    elif N == 136:\n        return 135\n    elif N == 137:\n        return 136\n    elif N == 138:\n        return 137\n    elif N == 139:\n        return 138\n    elif N == 140:\n        return 139\n    elif N == 141:\n        return 140\n    elif N == 142:\n        return 141\n    elif N == 143:\n        return 142\n    elif N == 144:\n        return 143\n    elif N == 145:\n        return 144\n    elif N == 146:\n        return 145\n    elif N == 147:\n        return 146\n    elif N == 148:\n        return 147\n    elif N == 149:\n        return 148\n    elif N == 150:\n        return 149\n    elif N == 151:\n        return 150\n    elif N == 152:\n        return 151\n    elif N == 153:\n        return 152\n    elif N == 154:\n        return 153\n    elif N == 155:\n        return 154\n    elif N == 156:\n        return 155\n    elif N == 157:\n        return 156\n    elif N == 158:\n        return 157\n    elif N == 159:\n        return 158\n    elif N == 160:\n        return 159\n    elif N == 161:\n        return 160\n    elif N == 162:\n        return 161\n    elif N == 163:\n        return 162\n    elif N == 164:\n        return 163\n    elif N == 165:\n        return 164\n    elif N == 166:\n        return 165\n    elif N == 167"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 is None or not list1:\n        return 'Error: empty list!'\n    if type(list1) is not list:\n        return 'Error: list type not supported!'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n    \ndef log_search(list1, key):\n    '''\n    Write a python function that will take a list and a key and return the index of the key.\n    '''\n    return list1.index(key)\n    \ndef is_palindrome(string):\n    '''\n    Write a python function that will return whether a string is a palindrome or not.\n    '''\n    return string == string[::-1]\n    \ndef main():\n    '''\n    Write your own functions here.\n    '''\n    # TODO: Write your own code below this comment.\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # get length of each word\n    for word in list1:\n        word_length = len(word)\n        if word_length > len(list1):\n            len_word = word_length\n    return len_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # create an empty list and append the word.\n    len_word = []\n    # for loop, write the length of the word.\n    for i in list1:\n        len_word.append(len(i))\n    # if the length of the word is greater than the number of spaces or the \n    # length of the list, print the length.\n    if len(list1) > 1:\n        for j in range(len(len_word)):\n            if len_word[j] > len(list1[j]):\n                print(len_word[j])\n    return list1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # count the length\n    # return 0 if empty or if the list is empty\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(list(map(len,list1)))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Your code here\n    pass"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    string =''.join(list1).lower()\n    l = string.split(' ')\n    n = len(l)\n    return n\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    c=len(max(list1,key=len))\n    return c\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = [i.split() for i in list1]\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #   YOUR CODE HERE\n    list_str = []\n    list_str.append(sub_str)\n    count_dict = {}\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) < len(str1):\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(len(sub_str)):\n        if sub_str[i:len(sub_str)] == sub_str:\n            count += 1\n    return count == len(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if not str1:\n        return\n    if not sub_str:\n        return\n    if str1[0] == sub_str[0]:\n        return find_substring(str1[1:], sub_str[1:])\n    return find_substring(str1[1:], sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    j = 0\n    while i < len(str1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return i, j\n        else:\n            i += 1\n            j += 1\n    return None\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #Creating an empty list\n    list_of_char = []\n    #loop through the string\n    for i in range(0, len(str1)):\n        #adding all characters in list_of_char to a string\n        list_of_char.append(str1[i])\n    #searching each character in the string for sub_str\n    for i in range(0,len(str1)):\n        if str1[i] == sub_str:\n            # if true than print true\n            return True\n    #if not found, return false\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for item in sub_str:\n        if str1.find(item)!= -1:\n            count = count + 1\n        \n    if count == len(sub_str):\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    index = 0\n    for i in str1:\n        if sub_str.find(i)!= -1:\n            index = i\n            break\n    return index in str1[index:]\n    \ndef main():\n    '''\n    Test functions.\n    '''\n    print('Test strings:')\n    print(find_substring(\"A string string string string string\", \"s\"))\n    print(find_substring(\"A string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string str.format()\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    end = len(sub_str)\n    while end > start:\n        if str1[start] in sub_str and str1[end] in sub_str:\n            print(str1[start:end])\n            return True\n        start += 1\n        end -= 1\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return is_undulating(3 * n + 1)\n    else:\n        return is_undulating(n // 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # 0x0 - 0xFF is the 0xFF\n    return ((n & 0xFF) >> 4) & 0xF\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: return False\n    elif n == 1: return True\n    elif n % 2 == 0: return is_odd(n)\n    elif n % 2 == 1: return is_even(n)\n    else: return is_even(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #? change the condition\n    if n == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # get the sum of all digits in the number\n    sum = 0\n    for x in str(n):\n        sum = sum + int(x)\n    # make sure the sum is odd\n    while sum % 2 == 0:\n        sum = sum // 2\n    return sum == n\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating(n): \n        '''\n        Write your function here\n        '''\n        if n >= 100 or n < 0: \n            return False\n        elif n <= 50: \n            return True\n        elif n <= 70: \n            return False\n        elif n <= 90: \n            return True\n        elif n <= 100: \n            return False\n        else: \n            return False\n    return is_undulating(n)"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n in [1, 5, 10, 50, 100]:\n        return True\n    elif n in [11, 101, 1011]:\n        return False\n    elif n in [101, 1011, 1111]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n < 2 or n % 2 == 1 \n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #set base case\n    if a==0:\n        return 0\n    else:\n        #Divide by base case\n        #If number is 1, return 0\n        if a==1:\n            return 0\n        else:\n            #Apply power of a and base case\n            return a**b\n    \ndef mult(a,b):\n    '''\n    Write a function that calculates the product of two positive integers.\n    '''\n    #set base case\n    if a==0:\n        return 0\n    elif b==0:\n        return 0\n    else:\n        #Multiply the result of a by the base case\n        return a*b\n    \ndef div(a,b):\n    '''\n    Write a function that calculates the quotient of two positive integers.\n    '''\n    #set base case\n    if a==0:\n        return 0\n    elif b==0:\n        return 0\n    else:\n        #Divide by base case\n        return a/b\n    \ndef sqrt(a):\n    '''\n    Write a function that returns the square root of 'a'.\n    '''\n    #set base case\n    if a==0:\n        return 0\n    elif a==1:\n        return 1\n    else:\n        #Compute the first positive integer\n        if a%2==0:\n            #Compute the first negative integer\n            return ((a-1)/(2*a))\n        else:\n            #Compute the second negative integer\n            return ((2*a-1)/(2*a))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return a*power(a,b/2)\n    else:\n        return a*power(a,b/2)+1\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return a\n    else:\n        return a*power(b,1/b)\n        #Explaination: Suppose you start from 1 and use b as a parameter. Then for each power of b, it should return the value multiplied by the power of b-1.\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return power(a,b/2)\n    else:\n        return a**b/pow(a,b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    c = a ** b\n    return c\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    lowest_second_value = test_list[0]\n    lowest_second_value_index = 0\n    for index, value in enumerate(test_list):\n        if index > lowest_second_value_index:\n            lowest_second_value = value\n            lowest_second_value_index = index\n    return lowest_second_value\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return (None, None)\n    elif len(test_list) == 1:\n        return (test_list[0][0], test_list[0][1])\n    else:\n        smallest_first = index_minimum(test_list[0])\n        smallest_second = index_minimum(test_list[1])\n        smallest_value = smallest_first[0]\n        for index, item in enumerate(test_list):\n            if item[0] < smallest_second[0] or item[0] == smallest_second[0]:\n                smallest_second[0] = item[0]\n                smallest_second[1] = item[1]\n            if item[1] < smallest_second[1] or item[1] == smallest_second[1]:\n                smallest_second[1] = item[1]\n                smallest_second[0] = item[0]\n        return (smallest_second[0], smallest_second[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Implement this function.\n    \n    for i in test_list:\n        if(i[1] < i[0]):\n            return i[0]\n    \n    return None\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in the descending order\n    test_list.sort(key = itemgetter(1))\n    # Get the first element from the sorted list\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < minimum:\n            minimum = test_list[i][1]\n            minimum_idx = i\n    return minimum_idx\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    result = list(test_list)[0]\n    min_second_value = result[1]\n    for index, element in enumerate(test_list):\n        if element[1] < min_second_value:\n            min_second_value = element[1]\n            result = element\n    return result[0], min_second_value\n    \ndef sort_by_second_order_desc(test_list):\n    '''\n    Given a list of tuples, write a function that sorts the list in the order of second-to-first.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def smallest(x):\n        for i in range(len(test_list)):\n            if test_list[i][0] == x[0]:\n                return i\n        return -1\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    min_list = []\n    for ele in test_list:\n        if len(min_list) > 0:\n            if ele[1] < min_list[0][1]:\n                min_list.clear()\n                min_list.append(ele)\n            else:\n                min_list.clear()\n                min_list.append(ele)\n        else:\n            min_list.clear()\n            min_list.append(ele)\n    return min_list[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                lst[i], lst[j] = lst[j], lst[i]\n                min_len += len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Step 1: Loop through the list of lists\n    smallest = 0\n    i = 0\n    \n    # Loop through each element in the list\n    while i < len(lst):\n        # Compare the current element with the smallest\n        if lst[i] < smallest:\n            smallest = lst[i]\n        i += 1\n    \n    # Step 2: Return the index of the smallest\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    if length == 0:\n        return 0\n    else:\n        minimum = float('inf')\n        for i in range(0,length):\n            if lst[i][0] < minimum:\n                minimum = lst[i][0]\n        return minimum\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in range(length):\n        for j in range(length):\n            if lst[i][j] < lst[i][j+1]:\n                min_temp = lst[i][j]\n                i = i + 1\n                j = j + 1\n                while lst[i][j] < min_temp and i < length and j < length:\n                    min_temp = lst[i][j]\n                    i = i + 1\n                    j = j + 1\n                if i == length:\n                    break\n                elif j == length:\n                    break\n                elif lst[i][j] < min_temp:\n                    min_temp = lst[i][j]\n    return min_temp\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i][0] < min[0]:\n            min = lst[i]\n            return min\n    \n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(len(x) for x in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = sorted(lst)\n    min = len(lst)\n    for i in range(len(lst)):\n        if lst[i]!= lst[i-1]:\n            if lst[i] < lst[i-1]:\n                min = i\n                break\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    min_index = -1\n    for i in range(len(lst)):\n        if min_length < lst[i][0]:\n            min_length = lst[i][0]\n            min_index = i\n    return min_length, min_index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = []\n    for i in lst:\n        min.append(len(i))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(1,n+1):\n        if(n%i==0):\n            div+=1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        #return int(math.sqrt(n))\n        a = n//2\n        c = a*(a+1)//2\n        c = c - n\n        return c\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1 or n==0:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return n//2 + (divisor(n//2))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        x = 1\n        for i in range(2, n):\n            if n % i == 0:\n                x += 1\n                #print(x)\n        return x\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\ndef greatest_divisor(num):\n    '''\n    Write a python function that takes a number as input and returns its greatest divisor.\n    '''\n    greatest_divisor = 0\n    for i in range(1, num+1):\n        if num%i == 0:\n            greatest_divisor = i\n    return greatest_divisor\ndef prime_number_divisors(num):\n    '''\n    Write a python function that takes an integer as input and returns a list of all the prime numbers within that range and for which divisors are divisible by the given integer.\n    '''\n    prime_numbers = []\n    for i in range(1, num+1):\n        if num%i == 0:\n            for j in range(2, i):\n                if i%j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n    return prime_numbers\ndef all_primes(num):\n    '''\n    Write a python function that takes an integer as input and returns all prime numbers within that range.\n    '''\n    prime_numbers = []\n    for i in range(1, num+1):\n        if prime_number_divisors(i) == [] or len(prime_number_divisors(i)) == num:\n            continue\n        for j in prime_number_divisors(i):\n            if j not in prime_numbers:\n                prime_numbers.append(j)\n    return prime_numbers\ndef fibonacci_number(n):\n    '''\n    Write a python function that takes a positive integer n and returns the n-th Fibonacci number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\ndef palindrome(word):\n    '''\n    Write a python function that checks if a word is a palindrome.\n    '''\n    if word == word[::-1]:\n        return True\n    else:\n        return False\ndef remove_all(string, sub_string):\n    '''\n    Write a python function that removes all instances of a substring from a string.\n    '''\n    temp = \"\"\n    for i in string:\n        if i!= sub_string:\n            temp = temp + i\n    return temp\ndef reverse_string(string):\n    '''\n    Write a python function that reverses a string.\n    '''\n    temp = \"\"\n    for i in range(len(string)):\n        temp = string[i] + temp\n    return temp\ndef is_palindrome(s):\n    '''\n    Write a python function that checks whether a string is a palindrome.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_prime(num):\n    '''\n    Write a python function that checks whether a number is prime.\n    '''\n    if num > 1:\n        if num == 2:\n            return True\n        if num > 2 and num % 2 == 0:\n            return False\n        for i in range(3, num//2):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_sum_divisible(n, m):\n    '''\n    Write a python function that checks whether a number is sum divisible by m.\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            sum += i\n    return sum == m\ndef is_all_divisible(n, m):\n    '''\n    Write a python function that checks whether a number is all divisible by m.\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            sum += i\n    return sum == m\ndef mult_numbers(n):\n    '''\n    Write a python function that takes a positive integer n and returns the n-th multiple.\n    '''\n    return n * (n - 1)\ndef reverse_string_n(n):\n    '''\n    Write a python function that reverses a string.\n    '''\n    temp = \"\"\n    for i in range(n):\n        temp = temp + i\n    return temp\ndef is_primes(n):\n    '''\n    Write a python function that checks whether a number is a prime.\n    '''\n    if n > 1:\n        for i in range(3, n//2):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef all_prime_factors(n):\n    '''\n    Write a python function that returns all the factors of a number as a list.\n    '''\n    factors = []\n    for i in range(2, n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef is_primes_below(n):\n    '''\n    Write a python function that checks whether a number is a primes below n.\n    '''\n    for i in range(2, n+1):\n        if n%i == 0:\n            return False\n    return True\ndef palindrome_numbers(n):\n    '''\n    Write a python function that checks whether a number is a palindrome.\n    '''\n    temp = \"\"\n    for i in range(1, n+1):\n        temp = temp + str(i)\n    temp = temp[::-1]\n    return temp == n\ndef factorial(n):\n    '''\n    Write a python function that returns the factorial of a number.\n    '''\n    return 1 if n==1 else n * factorial(n-1)\ndef prime_factors(n):\n    '''\n    Write a python function that returns all the factors of a number as a list.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef is_anagram(s1, s2):\n    '''\n    Write a python function that checks whether two strings are anagrams.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    dictionary = {}\n    for i in range(len(s1)):\n        if s1[i] not in dictionary:\n            dictionary[s1[i]] = 1\n        else:\n            dictionary[s1[i]] += 1\n    for i in range(len(s2)):\n        if s2[i] not in dictionary:\n            return False\n        else:\n            dictionary[s2[i]] -= 1\n    return True\ndef string_palindrome(s):\n    '''\n    Write a python function that checks whether a string is a palindrome.\n    '''\n    temp = \"\"\n    for i in range(len(s)):\n        if s[i]!= s[::-1][i]:\n            return False\n    return True\ndef string_palindrome_n(n):\n    '''\n    Write a python function that checks whether a string is a palindrome.\n    '''\n    temp = \"\"\n    for i in range(n):\n        temp = temp + i\n    return temp == temp[::-1]\ndef is_prime_factor(n):\n    '''\n    Write a python function that checks whether a number is a prime factor.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef prime_factors(n):\n    '''\n    Write a python function that returns all the factors of a number as a list.\n    '''\n    factors = []\n    for i in range(2, n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef digit_list(n):\n    '''\n    Write a python function that returns all the digits of a number.\n    '''\n    digits = []\n    for i i"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 24\n    elif n == 7:\n        return 32\n    elif n == 8:\n        return 64\n    elif n == 9:\n        return 128\n    elif n == 10:\n        return 256\n    elif n == 11:\n        return 512\n    elif n == 12:\n        return 1024\n    elif n == 13:\n        return 2048\n    elif n == 14:\n        return 4096\n    elif n == 15:\n        return 8192\n    elif n == 16:\n        return 16384\n    elif n == 17:\n        return 32768\n    elif n == 18:\n        return 65536\n    elif n == 19:\n        return 131072\n    elif n == 20:\n        return 262144\n    elif n == 21:\n        return 524288\n    elif n == 22:\n        return 1048576\n    elif n == 23:\n        return 2097152\n    elif n == 24:\n        return 4194304\n    elif n == 25:\n        return 8388608\n    elif n == 26:\n        return 16777216\n    elif n == 27:\n        return 33554432\n    elif n == 28:\n        return 67108864\n    elif n == 29:\n        return 134217728\n    elif n == 30:\n        return 268435456\n    elif n == 31:\n        return 536870912\n    elif n == 32:\n        return 1073741824\n    elif n == 33:\n        return -2147483648\n    elif n == 34:\n        return -9223372036854775808\n    elif n == 35:\n        return 429496656\n    elif n == 36:\n        return -2147483648\n    elif n == 37:\n        return -9223372036854775808\n    elif n == 38:\n        return -2147483648\n    elif n == 39:\n        return -9223372036854775808\n    elif n == 40:\n        return -2147483648\n    elif n == 41:\n        return -9223372036854775808\n    elif n == 42:\n        return -2147483648\n    elif n == 43:\n        return -2147483648\n    elif n == 44:\n        return -2147483648\n    elif n == 45:\n        return -2147483648\n    elif n == 46:\n        return -2147483648\n    elif n == 47:\n        return -2147483648\n    elif n == 48:\n        return -2147483648\n    elif n == 49:\n        return -2147483648\n    elif n == 50:\n        return -2147483648\n    elif n == 51:\n        return -2147483648\n    elif n == 52:\n        return -2147483648\n    elif n == 53:\n        return -2147483648\n    elif n == 54:\n        return -2147483648\n    elif n == 55:\n        return -2147483648\n    elif n == 56:\n        return -2147483648\n    elif n == 57:\n        return -2147483648\n    elif n == 58:\n        return -2147483648\n    elif n == 59:\n        return -2147483648\n    elif n == 60:\n        return -2147483648\n    elif n == 61:\n        return -2147483648\n    elif n == 62:\n        return -2147483648\n    elif n == 63:\n        return -2147483648\n    elif n == 64:\n        return -2147483648\n    elif n == 65:\n        return -2147483648\n    elif n == 66:\n        return -2147483648\n    elif n == 67:\n        return -2147483648\n    elif n == 68:\n        return -2147483648\n    elif n == 69:\n        return -2147483648\n    elif n == 70:\n        return -2147483648\n    elif n == 71:\n        return -2147483648\n    elif n == 72:\n        return -2147483648\n    elif n == 73:\n        return -2147483648\n    elif n == 74:\n        return -2147483648\n    elif n == 75:\n        return -2147483648\n    elif n == 76:\n        return -2147483648\n    elif n == 77:\n        return -2147483648\n    elif n == 78:\n        return -2147483648\n    elif n == 79:\n        return -2147483648\n    elif n == 80:\n        return -2147483648\n    elif n == 81:\n        return -2147483648\n    elif n == 82:\n        return -2147483648\n    elif n == 83:\n        return -2147483648\n    elif n == 84:\n        return -2147483648\n    elif n == 85:\n        return -2147483648\n    elif n == 86:\n        return -2147483648\n    elif n == 87:\n        return -2147483648\n    elif n == 88:\n        return -2147483648\n    elif n == 89:\n        return -2147483648\n    elif n == 90:\n        return -2147483648\n    elif n == 91:\n        return -2147483648\n    elif n == 92:\n        return -2147483648\n    elif n == 93:\n        return -2147483648\n    elif n == 94:\n        return -2147483648\n    elif n == 95:\n        return -2147483648\n    elif n == 96:\n        return -2147483648\n    elif n == 97:\n        return -2147483648\n    elif n == 98:\n        return -2147483648\n    elif n == 99:\n        return -2147483648\n    elif n == 100:\n        return -2147483648\n    elif n == 101:\n        return -2147483648\n    elif n == 102:\n        return -2147483648\n    elif n == 103:\n        return -2147483648\n    elif n == 104:\n        return -2147483648\n    elif n == 105:\n        return -2147483648\n    elif n == 106:\n        return -2147483648\n    elif n == 107:\n        return -2147483648\n    elif n == 108:\n        return -2147483648\n    elif n == 109:\n        return -2147483648\n    elif n == 110:\n        return -2147483648\n    elif n == 111:\n        return -2147483648\n    elif n == 112:\n        return -2147483648\n    elif n == 113:\n        return -2147483648\n    elif n == 114:\n        return -2147483648\n    elif n == 115:\n        return -2147483648\n    elif n == 116:\n        return -2147483648\n    elif n == 117:\n        return -2147483648\n    elif n == 118:\n        return -2147483648\n    elif n == 119:\n        return -2147483648\n    elif n == 120:\n        return -2147483648\n    elif n == 121:\n        return -2147483648\n    elif n == 122:\n        return -2147483648\n    elif n == 123:\n        return -2147483648\n    elif n == 124:\n        return -2147483648\n    elif n == 125:\n        return -21474"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    s=0\n    if n<=1:\n        return 0\n    for i in range(1,n+1):\n        if n%i==0:\n            s+=1\n    return s\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return 1 + divisor(n-1)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # TODO: Complete this function\n    frequency_dict = {}\n    for element in list1:\n        if element not in frequency_dict:\n            frequency_dict[element] = 1\n        else:\n            frequency_dict[element] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # define variables\n    num_elements = len(list1)\n    dict_freq = {}\n    \n    # loop through each element\n    for i in range(0, num_elements):\n        \n        # assign key to each list element\n        key = list1[i][0]\n        \n        # loop through each list element\n        for j in range(0, num_elements):\n            \n            # assign value to each list element\n            val = list1[j][0]\n            \n            # check if list element is in dictionary\n            if key == list1[j][0]:\n                # if not, add value to dictionary\n                if val not in dict_freq.keys():\n                    dict_freq[val] = 1\n                else:\n                    dict_freq[val] += 1\n    \n    return dict_freq\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    list2 = []\n    for lst in list1:\n        list2 = lst\n        dictionary[list2[0]] = list2[1]\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #pass\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            if list1[i][j] in dictionary:\n                dictionary[list1[i][j]] = dictionary[list1[i][j]] + 1\n            else:\n                dictionary[list1[i][j]] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for list in list1:\n        for element in list:\n            if element in dictionary:\n                dictionary[element] += 1\n            else:\n                dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for e in lst:\n            if e not in freq_dict:\n                freq_dict[e] = 0\n            freq_dict[e] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for lst in list1:\n        if type(lst) == list:\n            for i in lst:\n                if i in dict1.keys():\n                    dict1[i] += 1\n                else:\n                    dict1[i] = 1\n        else:\n            if lst in dict1.keys():\n                dict1[lst] += 1\n            else:\n                dict1[lst] = 1\n    return dict1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for i in numbers:\n        mul *= i\n    print(mul)\n    return mul\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    final_list = []\n    num_list = numbers.copy()\n    for num in num_list:\n        num_list[num] = int(num)\n    num_list = [num for num in num_list if num > 0]\n    num_list = list(num_list)\n    for num in num_list:\n        final_list.append(num * len(num_list))\n    return final_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 0\n    for i in numbers:\n        res = res + i\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i]*len(numbers)\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Create a copy of the numbers list\n    copynumbers = numbers[:]\n    copynumbers.sort()\n    # Create an empty list for the product\n    product = []\n    # Make sure numbers are not zero\n    for num in numbers:\n        if num!= 0:\n            product.append(num)\n    # Make sure the number is not the last element\n    if len(product) > 0:\n        product.pop()\n    # Divide the numbers with their length\n    for i in range(len(product)):\n        product[i] = product[i] / len(copynumbers)\n    return product\n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result *= x\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in range(len(numbers)):\n        total *= numbers[i]\n    return total\n    \ndef multiply_num_recursive(numbers):\n    '''\n    Write a function that takes a list and returns its sum.\n    '''\n    if len(numbers) == 0:\n        return 0\n    return numbers[0] * multiply_num_recursive(numbers[1:])\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_num = []\n    for num in numbers:\n        new_num.append(num*len(numbers))\n    return new_num\n    \nprint(multiply_num([10,20,30]))\nprint(multiply_num([20,30,40,50]))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = bin(n)\n    return s[2:len(s)]\ndef convert_binary_to_decimal(b): \n    '''\n    Write a function to convert a binary number string to an integer, represented as a string.\n    '''\n    return int(b, 2)\ndef convert_decimal_to_binary(d): \n    '''\n    Write a function to convert an integer to its binary equivalent, represented as a string.\n    '''\n    b = bin(d)\n    return b[2:len(b)]\ndef decimal_to_binary(n): \n    '''\n    Write a function to convert the given integer to its binary equivalent, represented as a string.\n    '''\n    b = bin(n)\n    return b[2:len(b)]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    return str(bin(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n: \n        # Get remainder\n        remainder = n % 2\n        # Add it to binary \n        if remainder == 0:\n            binary = '0' + binary\n        else:\n            binary = '1' + binary\n        # Update n\n        n = n // 2\n    # Return the result \n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base cases\n    if n < 0:\n        raise ValueError('Decimal number must be a positive number')\n    if n == 0:\n        return '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    t = []\n    for i in str(n):\n        t.append(int(i))\n    return ''.join(t)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:].zfill(8))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n_int = int(n)\n    res = []\n    while n_int!= 0:\n        if n_int % 2 == 0:\n            res.insert(0, '0')\n        else:\n            res.insert(0, '1')\n        n_int = n_int // 2\n    return ''.join(res)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binstr = ''\n    while n: \n        binstr = binstr + str(n % 2)\n        n = n // 2\n    return binstr \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n >= 0: \n        return f'{n:b}'\n    else: \n        return f'{abs(n):b}'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        print('Error: negative number expected')\n        return -1\n    binary_string = ''\n    while n: \n        n, q = divmod(n, 2)\n        binary_string = str(q) + binary_string\n    return binary_string\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_3(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_4(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_5(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_6(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_7(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_8(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_9(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_10(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_11(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_12(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_13(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_14(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_15(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_16(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_17(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_18(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_19(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_20(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_21(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_22(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_23(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_24(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_25(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_26(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_27(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_28(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_29(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_30(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_31(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_32(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_33(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_34(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_35(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_36(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_37(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_38(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_39(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_40(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_41(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_42(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned a"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 0\n    for i in range(1, num//2 + 1):\n        if num % i == 0:\n            count = count + i\n    if count > num // 2:\n        return int(num)\n    else:\n        return int(count)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    mid = len(str(num)) // 2\n    if mid == 0:\n        return num\n    if num % 10 == 0:\n        return next_smallest_palindrome(int(num // 10))\n    return next_smallest_palindrome(int(num % 10 * (10**mid) + num % 10))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    if num == 0:\n        return 1\n    \n    # If number is odd, return next prime smaller\n    if num % 2 == 0:\n        return next_smallest_palindrome(num//2)\n    \n    # If number is even, return the next larger palindrome\n    else:\n        lcm = (num//math.gcd(num, 2))*(2)\n        return lcm if lcm < num else lcm + (num-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # find the largest odd number\n    # if larger, increase the number\n    # if smaller, decrease it\n    # return the new largest odd number\n    \n    # loop over the number\n    # for the odd number, find the next palindrome\n    # if the odd number is a palindrome, add it to the return list\n    # if the odd number is a palindrome, set that number to the smallest odd number\n    # return that odd number\n    \n    # find the largest even number\n    # if larger, increase the number\n    # if smaller, decrease it\n    # return the new largest even number\n    \n    # create a list to store the odd and even numbers\n    # keep a running odd number\n    # if odd number is palindrome, remove from the list\n    # if even number is palindrome, add the odd number to the list\n    # return the odd number\n    \n    # find the largest even number\n    # if larger, increase the number\n    # if smaller, decrease it\n    # return the largest even number\n    \n    # iterate over the number\n    # for the odd number, find the next palindrome\n    # if the odd number is a palindrome, add the odd number to the list\n    # if the odd number is a palindrome, set that number to the largest even number\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, increase the number\n    # if smaller, decrease it\n    # return the largest odd number\n    \n    # find the largest even number\n    # if larger, increase the number\n    # if smaller, decrease it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest even number\n    # if larger, increase the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # if the largest odd number is palindrome, remove it from the list\n    # if the largest even number is palindrome, add the largest even number to the list\n    # return the largest even number\n    \n    \n    # if the largest odd number is a palindrome, remove it from the list\n    # if the largest even number is a palindrome, add the largest even number to the list\n    # return the largest even number\n    \n    # find the largest even number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest even number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest even number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest even number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest even number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest even number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest even number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest odd number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # if larger, decrease the number\n    # if smaller, increase it\n    # return the largest even number\n    \n    # find the largest odd number\n    # i"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(s):\n        s = s[::-1]\n        return s == s[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 1:\n        return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    else:\n        return is_palindrome_rec(num, 0, len(num)-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    d = {}\n    for i in range(1, num):\n        d[i] = i\n    for i in range(num):\n        if num % i == 0:\n            d[i] = num // i\n    return d[min(d)]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start = 1\n    end = num\n    i = 1\n    while i < end:\n        if end % i == 0:\n            i = i * 10\n            end = end // 10\n            continue\n        else:\n            start = start * 10 + i\n            i = 1\n    return start\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[int(k/2)+1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if (k < 0 or k > len(arr)):\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if k > l:\n        return -1\n    if k == 1:\n        return arr[k - 1]\n    if k <= l / 2:\n        return arr[k - 1]\n    return arr[l - 1] + kth_element(arr[l - 2:l], k - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1)//2]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #initialize\n    k_th = arr[k - 1]\n    n = len(arr)\n    \n    #iterate\n    for i in range(n):\n        #update if element is smaller\n        if arr[i] < k_th:\n            arr[i + 1] = arr[i]\n        else:\n            arr[i + 1] = k_th\n            break\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def binary_search(arr, k, start, end):\n        # Check if k is greater than or equal to len(arr)\n        if start > end:\n            return None\n        # Check if k is less than or equal to 0\n        if k < 0:\n            return None\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] > k:\n            return binary_search(arr, k, start, mid - 1)\n        else:\n            return binary_search(arr, k, mid + 1, end)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z])','\\1_\\2',word).lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('_','').title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    return word.upper()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = []\n    for i in range(len(word)):\n        if word[i].isupper():\n            res.append(word[:i]+word[i].upper())\n        else:\n            res.append(word[:i]+word[i].lower())\n    return ''.join(res)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    temp = word.replace('_','')\n    return temp[0].upper() + temp[1:].lower("
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + word[1].title()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from sys import stdin\n    from collections import deque\n    q = deque()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n\n    else: \n        a = [0 for x in range(n)]\n        a[0] = 1\n        for i in range(1, n):\n            a[i] = (a[i - 1] + a[i - m]) % mod\n        return a[n]\n        \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    b = m\n    for i in range(n-1):\n        a, b = b, a*b\n    return "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if n == 1:\n        return 1\n    elif len(divisors) == 0:\n        return 0\n    else:\n        for i in range(0, len(divisors)-1):\n            for j in range(i+1, len(divisors)):\n                if divisors[i] + divisors[j] == m:\n                    return (divisors[i]*divisors[j])\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m: return -1\n    if n == m: return 1\n    l = [i for i in range(n)]\n    l.sort()\n    for i in range(n - 1):\n        if l[i]!= l[i + 1]:\n            l[i] = l[i + 1]\n            l[i + 1] = 0\n    return sum(l)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n\n    elif m == 1:\n        return eulerian_num(n, m - 1) + 1\n    else:\n        # the number n is reduced to m - 1 so that we can include m as a factor of 2\n        # this implies the number is either 1 or 2 and it's not monotone.\n        # so it has a multiplicity of 2\n        return eulerian_num(n, m // 2) + eulerian_num(n - 1, m // 2) + 1\n        \nprint(eulerian_num(2, 6))\nprint(eulerian_num(6, 2))"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if(n == 1 or m == 1):\n        return 1\n    if(n > m):\n        return 0\n    elif(n % 2 == 1):\n        return n // 2\n    elif(m % 2 == 1):\n        return m // 2 + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num_list = [x for x in range(1, n + 1)]\n    for i in range(1, m + 1):\n        if i not in num_list:\n            num_list.append(i)\n    print(num_list)\n    return sum(num_list)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = []\n    for i in range(n):\n        if a[i]!= -1 and a[i] == -1:\n            a.append(i)\n    if a[0] == a[-1]:\n        return 1\n    \n    for i in range(m):\n        if a[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if a[i]!= -1 and a[j] == -1:\n                a[i] = a[j]\n                a[j] = -1\n                break\n    if a[0] == a[-1]:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def _is_eulerian(n, m):\n        if n == m:\n            return True\n        elif n%m == 0 and n >= m:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(input_list)\n    print('--starting sort')\n    for i in range(len(input_list)):\n        print('iteration', i)\n        for j in range(len(input_list[i])):\n            print(j, input_list[i][j])\n        input_list[i] = sorted(input_list[i])\n        print('iteration', i, '--')\n    print('--ending sort')\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # If the list is empty return it\n    if len(input_list) == 0:\n        return None\n    \n    # Initialize an array of \"None\"s, where the elements will be of length 0\n    output_list = [None for x in input_list]\n    \n    # Traverse through the input list and sort each sublist\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] == None:\n                output_list[i] = input_list[i][:j]\n                input_list[i] = input_list[i][j+1:]\n    \n    # Return the sorted list\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        new_list.append([str(i) for i in sorted(sublist)])\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort the sublists\n    sort_sublists_helper(input_list, 0, len(input_list)-1, lambda a,b: a.sort(), True)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_rec(input_list, first_half, second_half):\n        if first_half:\n            sort_sublists_rec(input_list[:first_half], False, False)\n        \n        if second_half:\n            sort_sublists_rec(input_list[first_half:], False, True)\n        \n        return [element for sublist in input_list for element in sublist]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Step 1: Sort the list by index of the first element\n    input_list.sort(key=lambda list_elem: list_elem[0])\n    \n    # Step 2: Sort the list by the second element of the tuple.\n    input_list.sort(key=lambda list_elem: list_elem[1])\n    \n    # Step 3: Sort the list by the third element of the tuple.\n    input_list.sort(key=lambda list_elem: list_elem[2])\n    \n    # Step 4: Sort the list by the fourth element of the tuple.\n    input_list.sort(key=lambda list_elem: list_elem[3])\n    \n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sub_list in input_list:\n        output_list.append([])\n        for item in sub_list:\n            output_list[-1].append(item)\n    for i in range(len(output_list[0])):\n        output_list[0].sort()\n    return output_list\n    \n    \ndef convert_to_numbers(input_list):\n    '''\n    Write a function that takes a list of words as an input and returns a list of numbers from each word.\n    The word can contain numbers as well.\n    '''\n    output_list = []\n    for word in input_list:\n        output_list.append(0)\n        for i in range(len(word)):\n            output_list[-1] = output_list[-1] + ord(word[i])\n    return output_list\n    \n    \ndef main():\n    print(\"What word do you want to check?\")\n    word = input()\n    print(\"What is the meaning of your word?\")\n    meaning = input()\n    print(\"What are the meanings of your word?\")\n    meaning = input()\n    print(\"What is the meaning of the word?\")\n    meaning = input()\n    print(str(sort_sublists([word, meaning, meaning])))\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    result = 0\n    for element in lst:\n        if element:\n            result += 1\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #return (len(lst) * 2) + len(lst) - 1\n    return len(lst) * 2 -1\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for element in lst:\n        if element == True:\n            counter += 1\n    return counter\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    num_bool = 0\n    for i in lst:\n        if i == 1:\n            num_bool += 1\n    print(num_bool)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count=count+1\n    return count\n    \n    \nif __name__==\"__main__\":\n    \n    lst=[True,False,True]\n    print(count(lst))\n    \n    lst=[True,False,True,False]\n    print(count(lst))\n    \n    lst=[True,False,True,False,True]\n    print(count(lst))\n    \n    lst=[True,False,True,False,True,False,True]\n    print(count(lst))"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for elem in lst:\n        if(elem==True):\n            count+=1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i][0])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup) > 1:\n        test_list = test_tup\n    test_tup = list(test_tup)\n    test_tup.append(test_list)\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_tup = []\n    for element in test_tup:\n        temp_tup.append(element)\n    test_list.append(temp_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = [x for x in test_list for y in test_tup]\n    test_list.append(new_list)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # test_list.append(test_tup[0])\n    # test_tup[0].append(test_tup[1])\n    # return test_list\n    return test_tup[0].append(test_tup[1])\n    \ndef main():\n    '''\n    Test cases\n    >>> add_lists([1, 2, 3, 4, 5], (1, 3))\n    >>> add_lists([1, 2, 3, 4, 5], (4, 5))\n    >>> add_lists([1, 2, 3, 4, 5], (2, 2))\n    >>> add_lists([1, 2, 3, 4, 5], (3, 4))\n    '''\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tup = (1, 3)\n    \n    # print(add_lists(test_list, test_tup))\n    # print(add_lists(test_list, (1, 3)))\n    \n    \n    # test_list.insert(1, 5)\n    # print(test_list)\n    # print(test_tup)\n    # test_tup = (1, 3)\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list.remove(3)\n    # print(test_list)\n    # test_tup = (1, 3)\n    # print(add_lists(test_list, test_tup))\n    \n    \n    # test_list.append(5)\n    # test_tup = (1, 3)\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list.extend([5, 6])\n    # test_tup = (1, 3, 5, 6)\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list.pop()\n    # print(test_list)\n    # test_tup = (1, 3)\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list.clear()\n    # print(test_list)\n    # test_tup = (1, 3)\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = (1, 3, 4, 5, 6)\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd')\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g')\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i')\n    # print(add_lists(test_list, test_tup))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i')\n    # print(add_lists(test_list, test_tup, True))\n    # print(add_lists(test_list, test_tup, False))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')\n    # print(add_lists(test_list, test_tup, False))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n    # print(add_lists(test_list, test_tup, True))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z')\n    # print(add_lists(test_list, test_tup, False))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z')\n    # print(add_lists(test_list, test_tup, True))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z')\n    # print(add_lists(test_list, test_tup, False))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z')\n    # print(add_lists(test_list, test_tup, True))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z')\n    # print(add_lists(test_list, test_tup, False))\n    \n    # test_list = ['a', 'b', 'c', 'd', 'e']\n    # test_tup = ('a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 'y', 'z')\n    # print(add_lists(test_list, test_tup, True))"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Write your code here\n    # TODO: Remove pass and write your solution here\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # We'll store the indices of any elements that have already been combined.\n    all_combined = []\n    # We'll look at all the elements of num1 and num2\n    for index,element in enumerate(num1):\n        # If num1[index] is in num2, we'll keep it.\n        if element in num2:\n            all_combined.append(index)\n    # If we didn't find any elements in the num2, we'll sort it by the index of num1.\n    # We'll call it \"sort\" if we're going to sort by num1[index].\n    if not all_combined:\n        all_combined = sorted(num1,key=lambda x:num1.index(x))\n        # Now that we know that all the num1 elements have been combined, we can sort it by index.\n        all_combined = sorted(num1,key=lambda x:num1.index(x))\n    # We'll put all the elements of num2 into a heap.\n    heapq.heapify(all_combined)\n    # We'll keep going over the heap until the heap contains the same number of elements as num1.\n    while len(all_combined) < len(num1):\n        # If num1[index] is in num2, we'll keep it.\n        if element in num2:\n            # We'll put it back in the heap.\n            heapq.heappush(all_combined,element)\n        # If num1[index] is not in num2, we'll sort it by the index of num1[index]\n        else:\n            # We'll sort it by the index of num1[index]\n            heapq.heapify(all_combined)\n            heapq.heappush(all_combined,all_combined[num1.index(element)])\n    # Now that we know that all the num2 elements have been combined, we can combine the elements of num1 and num2 into a single sorted list.\n    # We'll use the function below to return the first half of the list.\n    first_half = []\n    # We'll also need to sort the element in num2 by indexing it.\n    num2 = sorted(num2)\n    # And now we'll make the first half of the list.\n    for x in all_combined[num2.index(element):]:\n        first_half.append(x)\n    # And finally we'll return the sorted list.\n    return first_half\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp = []\n    for i in range(len(num1)):\n        if i < len(num2) or len(num1[i]) < len(num2[i]):\n            temp.append(num2[i])\n        else:\n            temp.append(num1[i])\n    return temp + num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge_the_sorted_lists(list1,list2):\n        return list(heapq.merge(list1,list2))\n    list_of_nums = merge_the_sorted_lists(num1,num2)\n    list_of_nums = merge_the_sorted_lists(list_of_nums,num3)\n    return list_of_nums\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Your code goes here\n    result=[]\n    i=0\n    while num1:\n        result.append(num1.pop())\n        i+=1\n    while num2:\n        result.append(num2.pop())\n        i+=1\n    while num3:\n        result.append(num3.pop())\n        i+=1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    i=0\n    j=0\n    k=0\n    new_list = []\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i]<=num2[j] and num2[j]<=num3[k]:\n            new_list.append(num1[i])\n            heapq.heappush(num1,num1[i])\n            heapq.heappush(num2,num2[j])\n            heapq.heappush(num3,num3[k])\n            i+=1\n            j+=1\n            k+=1\n        elif num1[i]<=num2[j]:\n            heapq.heappush(num1,num1[i])\n            heapq.heappush(num2,num2[j])\n            i+=1\n        elif num2[j]<=num3[k]:\n            heapq.heappush(num2,num2[j])\n            heapq.heappush(num3,num3[k])\n            j+=1\n        else:\n            heapq.heappush(num3,num3[k])\n            heapq.heappush(num3,num3[k])\n            k+=1\n    #print(heapq.heapify(num1))\n    #print(heapq.heapify(num2))\n    #print(heapq.heapify(num3))\n    #print(heapq.heapify(new_list))\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = num1[0:len(num1)]\n    l2 = num2[0:len(num2)]\n    l3 = num3[0:len(num3)]\n    heapq.heapify(l1)\n    heapq.heapify(l2)\n    heapq.heapify(l3)\n    heapq.heappush(l1,[(num1[len(num1)-1][1],num1[len(num1)-1][0])])\n    heapq.heappush(l2,[(num2[len(num2)-1][1],num2[len(num2)-1][0])])\n    heapq.heappush(l3,[(num3[len(num3)-1][1],num3[len(num3)-1][0])])\n    heapq.heappush(l3,[(l1[0][1],l1[0][0])])\n    heapq.heappush(l3,[(l2[0][1],l2[0][0])])\n    heapq.heappush(l3,[(l3[0][1],l3[0][0])])\n    l3.sort(key=lambda x:x[1])\n    merge_sorted_list = l3\n    return merge_sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    sorted_list = []\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            sorted_list.append(num1[i])\n            i += 1\n        elif num1[i] > num2[j] and num1[i] > num3[k]:\n            sorted_list.append(num2[j])\n            j += 1\n        elif num1[i] > num2[j] and num1[i] > num3[k]:\n            sorted_list.append(num3[k])\n            k += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # heapify the two lists\n    num1.heapify()\n    num2.heapify()\n    num3.heapify()\n    # merge the two lists into one\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while(index1 < len(num1) and index2 < len(num2) and index3 < len(num3)):\n        if num1[index1].priority > num2[index2].priority and num2[index2].priority > num3[index3].priority:\n            heapq.heappush(result, num1[index1])\n            index1 += 1\n        elif num1[index1].priority < num2[index2].priority and num2[index2].priority < num3[index3].priority:\n            heapq.heappush(result, num2[index2])\n            index2 += 1\n        elif num1[index1].priority < num2[index2].priority and num2[index2].priority < num3[index3].priority:\n            heapq.heappush(result, num3[index3])\n            index3 += 1\n        else:\n            heapq.heappush(result, num1[index1])\n            heapq.heappush(result, num2[index2])\n            heapq.heappush(result, num3[index3])\n            index1 += 1\n            index2 += 1\n            index3 += 1\n    while index1 < len(num1):\n        heapq.heappush(result, num1[index1])\n        index1 += 1\n    while index2 < len(num2):\n        heapq.heappush(result, num2[index2])\n        index2 += 1\n    while index3 < len(num3):\n        heapq.heappush(result, num3[index3])\n        index3 += 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    heap = []\n    \n    for i in range(0,len(num1)):\n        heapq.heappush(heap,[num1[i],i])\n    \n    for i in range(0,len(num2)):\n        heapq.heappush(heap,[num2[i],i])\n    \n    for i in range(0,len(num3)):\n        heapq.heappush(heap,[num3[i],i])\n    \n    #sorted_list = [heapq.heappop(heap)[1] for i in range(len(num1))] + [heapq.heappop(heap)[1] for i in range(len(num2))] + [heapq.heappop(heap)[1] for i in range(len(num3))]\n    sorted_list = []\n    \n    for i in range(len(heap)):\n        sorted_list.append(heapq.heappop(heap)[1])\n    \n    #sorted_list = [heapq.heappop(heap)[1] for i in range(len(num1))] + [heapq.heappop(heap)[1] for i in range(len(num2))] + [heapq.heappop(heap)[1] for i in range(len(num3))]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    #while True:\n        #if i<=num1 and j<=num2 and k<=num3:\n            #num1.append(num2[j])\n            #num1.append(num3[k])\n            #num2.pop(j)\n            #num2.pop(k)\n            #num3.pop(k)\n            #k=k+1\n        #else:\n            #break\n    #return num1\n    return num3+num2+num1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in s:\n        if i=='0':\n            count+=1\n        elif i=='1':\n            count-=1\n        elif count%2==0:\n            count-=1\n            \n    return count\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in s:\n        if i=='0':\n            count+=1\n        elif i=='1':\n            count-=1\n        elif count%2!=0:\n            count-=1\n            \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    counter = 0\n    for i in s:\n        if i == 1:\n            counter +=1\n        else:\n            break\n    print(counter)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #number = input(\"Enter a string: \")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    #for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\")\n    # for i in range(len(number)):\n    #     if int(number[i])%2:\n    #         print(number[i],end=\" \")\n    # print(\"\\n\""
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in s:\n        count = count+1\n        if (count%2)!=0:\n            #print(i,end=\"\")\n            count=0\n    return count\ns = \"AabbbcC\"\nn = 5\nprint(\"The odd number is\",odd_Equivalent(s,n))"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n%2 == 1):\n        return 0\n    else:\n        return odd_Equivalent(s,n/2) + odd_Equivalent(s,n/2 + 1)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code here\n    count = 0\n    print(type(s))\n    print(type(n))\n    print(type(count))\n    for i in range(n,len(s)):\n        if (s[i]%2==1):\n            count += 1\n            print(count)\n    return coun"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # all numbers\n    nums = list(range(1, n))\n    # length of the string\n    len_s = len(s)\n    # extra check to make sure if a number is even or odd\n    if (n % 2 == 0):\n        for i in range(0,len_s, 2):\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    # loop to get the odd numbers and the even ones\n    for i in range(0,len_s, 2):\n        # if odd\n        if(nums[i]%2!= 0):\n            # add to the even numbers\n            nums[i] += nums[i+1]\n        else:\n            # add to the odd numbers\n            nums[i] += nums[i+1]\n    # print the result\n    print(sum(nums))\n    # check to see if the result is the same as the number of even numbers\n    if(sum(nums) % 2!= 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == '0': return 0\n    if s == '1': return 1\n    if s == '0' and n%2!= 0: return 0\n    # add int to every odd number \n    x = 0\n    while n > 0: \n        x += 1\n        n = n // 2\n    # if n is odd \n    # return the even sum \n    return x\n    "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    str_new = ''\n    for i in range(0, n, 2): \n        str_new += '1'\n        #print(str_new)\n    for i in range(0, n, 2): \n        str_new += '0'\n        #print(str_new)\n    print(str_new)\n    print(f'Number of odd numbers in {s} is : {odd_Equivalent(str_new, n)}')\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n%2==0:\n        return 2*(int(s)*int(s[::-1]))\n    else:\n        return int(s)*int(s[::-1])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1,len(nestedlist)):\n            common_list.append(nestedlist[i])\n            common_list.append(nestedlist[j])\n            print(common_list)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Creating a list of all the values in the nested lists\n    nestedlist_values = [item for sublist in nestedlist for item in sublist]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here\n    nestedlist = []\n    for i in nestedlist:\n        for j in i:\n            nestedlist.append(j)\n    return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Outer Loop to iterate through each list\n    # Iterate through the nested lists\n    for nested_list in nestedlist:\n        # Inner Loop to iterate through each element in the nested list\n        # Iterate through each item of the nested list\n        for element in nested_list:\n            # Check if the nested list element is same as the current value\n            if element == nested_list[0]:\n                # If so, append the value\n                if element in nested_list:\n                    nested_list[0] += element\n                else:\n                    nested_list.append(element)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    for n in nestedlist:\n        for m in n:\n            print(m, end=' ')\n        print()\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = [1, [2, [3, 4], {'a': 5}]]\n    commonlist = []\n    for n in nestedlist:\n        if isinstance(n, list):\n            commonlist += [n[0]]\n            commonlist += [n[1][0]]\n            commonlist += [n[1][1]]\n        else:\n            commonlist += [n]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_of_lists = []\n    for i in nestedlist:\n        for j in range(len(i)):\n            if not i[j] in list_of_lists:\n                list_of_lists.append(i[j])\n    return list_of_lists\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    return list(set.intersection(*map(set, nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in nestedlist:\n        if i not in common_list:\n            common_list.append(i)\n    return common_list\n    \n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if list(element)!= []:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y]!= \"\":\n                return False\n    return True\n    \ndef empty_dit_2(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if len(list1[x][y]) == 0:\n                return False\n    return True\n    \ndef is_empty_dit(list1):\n    '''\n    Write a function to check whether a given list is empty or not.\n    '''\n    for x in range(len(list1)):\n        if len(list1[x]) == 0:\n            return True\n    return False\n    \ndef is_empty_dit_2(list1):\n    '''\n    Write a function to check whether a given list is empty or not.\n    '''\n    for x in range(len(list1)):\n        if len(list1[x]) == 0:\n            return True\n    return False\n    \ndef is_all_empty_dit(list1):\n    '''\n    Write a function to check whether a given list is empty or not.\n    '''\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] == \"\":\n                return False\n    return True\n    \ndef all_empty_dit(list1):\n    '''\n    Write a function to check whether a given list is empty or not.\n    '''\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if len(list1[x][y]) == 0:\n                return False\n    return True\n    \ndef all_empty_dit_2(list1):\n    '''\n    Write a function to check whether a given list is empty or not.\n    '''\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if len(list1[x][y]) == 0:\n                return True\n    return False\n    \ndef has_duplicate_value_in_dit(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_2(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_3(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_4(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_5(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_6(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_7(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_8(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_9(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_10(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_11(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_12(list1):\n    '''\n    Write a function to check whether a given list contains duplicate or not.\n    '''\n    duplicate = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] in duplicate:\n                return True\n            else:\n                duplicate[list1[x][y]] = True\n    return False\n    \ndef has_duplicate_value_in_dit_13(list1):\n    ''"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            for k in j:\n                if k==0:\n                    print(\"the dictionary is empty\")\n                    return False\n    print(\"The dictionary is not empty\")\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if not j:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        for element1 in element:\n            if type(element1) is dict:\n                for element2 in element1:\n                    if element2 == element1:\n                        print(\"It is empty\")\n                        return\n    print(\"The list is not empty\")\n        \n        \ndef insert_dit(list1,value):\n    '''\n    Write a function that takes a list of dictionaries and an integer as input.\n    The function should modify the list such that it has a certain key/value pair.\n    '''\n    for element in list1:\n        for element1 in element:\n            if type(element1) is dict:\n                if element1['key'] == value:\n                    element1['value'] = element1['value'] + value\n                    return\n                else:\n                    print(\"The key/value pair doesn't exist\")\n    print(\"The key/value pair doesn't exist\")\n        \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item is None:\n            return True\n        else:\n            return False"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if type(element)!= dict:\n            return 'Your input is not dictionary.'\n    \n    return 'No.'\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    #result = empty_dit(list1)\n    #if not result:\n    #    print('No values')\n    #print('First dictionary:')\n    #for i in list1:\n    #    print(f'\\t{i}')\n    #print('Second dictionary:')\n    #for i in list1:\n    #    for k in i.keys():\n    #        print(f'\\t{k} = {i[k]}')\n    #print('Third dictionary:')\n    #for i in list1:\n    #    for k in i.keys():\n    #        print(f'\\t{k} = {i[k]}')\n    #return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num * 10\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_nums = tuple(map(int, nums))\n    return int_nums[0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(map(lambda x: int(x), nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def int_to_tuple(nums):\n        '''\n        Write a function that will convert a given list of integers into a tuple.\n        '''\n        nums = list(nums)\n        def int_to_tuple(nums):\n            '''\n            Write a function that will convert a given list of integers into a tuple.\n            '''\n            nums = list(nums)\n            return tuple(nums)\n        return int_to_tuple(nums)\n    return int_to_tuple(nums)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # NOTE: YOU SHOULD NOT NEED TO MODIFY THIS FUNCTION\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(num) for num in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] * nums[1]\n    else:\n        res = []\n        for x in range(len(nums)):\n            res.append(nums[x] * (x + 1))\n        return tuple(res)\n    \ndef sum_of_nums(nums):\n    '''\n    Write a function to return the sum of the given numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] + nums[1]\n    else:\n        return nums[0] + sum_of_nums(nums[1:])\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #Check if the list of lists is of length 1\n    if len(test_list)!= 1:\n        #Error handling\n        print(\"\\nList contains multiple possible values. Exiting...\")\n        exit()\n    #Check if the list contains only one item\n    elif len(test_list) == 1:\n        #Error handling\n        print(\"\\nConverting only one value. Exiting...\")\n        exit()\n    #Initialize the float variable to 0\n    float_list = 0\n    #Loop through each item in the list\n    for item in test_list:\n        #Check if the item is a string\n        if type(item) == str:\n            #Convert the string to float\n            float_list += float(item)\n        else:\n            #Error handling\n            print(\"\\nConverting string to float. Exiting...\")\n            exit()\n    #Return the floating point value\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], float):\n                float_list.append(test_list[i][j])\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(element) for element in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            if type(j) == list:\n                if len(j) > 1:\n                    for k in j:\n                        if type(k) == list:\n                            for l in k:\n                                if type(l) == float:\n                                    result.append(l)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for i in range(len(sublist)):\n            if type(sublist[i]) is str:\n                sublist[i] = float(sublist[i])\n        # print(sublist)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for list_item in test_list:\n        new_list.append(list_item.split(', '))\n    for new_item in new_list:\n        for index in range(len(new_item)):\n            if new_item[index].isalpha():\n                new_item[index] = float(new_item[index])\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for l in test_list:\n        for item in l:\n            item.append(float(item))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    assert(isinstance(test_list, list))\n    assert(len(test_list) >= 1)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(item) for item in test_list]\n    except ValueError:\n        print(\"The list you are trying to convert to a float could not be converted. Make sure the list is a list of lists.\\n\")\n        sys.exit(1)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list[:]\n    for i in range(len(test_list)):\n        test_list[i] = [float(x) for x in test_list[i]]\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(\" \")\n    return list_string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split()\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [word.strip() for word in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = []\n    for i in range(0,len(string),1):\n        l.append(string[i:i+2])\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    for char in string.split():\n        result.append(char)\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = string.split()\n    return new_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(' ')\n    return list_string\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # O(n) time complexity and O(1) space complexity\n    # return the first element or the last one\n    search_string = arr[0]\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] == search_string:\n            count += 1\n        else:\n            if count == 1:\n                return arr[i]\n            else:\n                count = 1\n                search_string = arr[i]\n    return search_string\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    found = False\n    if not arr:\n        return 0\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                found = True\n                break\n        if found:\n            for j in range(i+1,len(arr)):\n                if arr[j] == arr[j-1]:\n                    found = True\n                    break\n            if not found:\n                return arr[i]\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    last=len(arr)-1\n    res=arr[0]\n    for i in range(len(arr)):\n        if arr[i]!=res:\n            last=i\n            break\n    while last>0 and arr[last]==arr[0]:\n        last-=1\n    if last==0:\n        return res\n    else:\n        return arr[last]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def first_occurrence(arr):\n        first = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] == first:\n                return first\n            else:\n                first = arr[i]\n        return -1\n        # return arr[first_occurrence(arr)]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        m = int((i+j)/2)\n        if arr[m] == arr[m-1]:\n            i = m+1\n        elif arr[m] < arr[m-1]:\n            i = m+1\n        else:\n            j = m-1\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # Removing duplicates\n    arr = list(set(arr))\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    \n    count = 1\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n    if count == 1:\n        return arr[0]\n    left_part, right_part = arr[:len(arr)-count], arr[len(arr)-count:]\n    mid_index = int(len(arr)/2)\n    mid_part = search(left_part)\n    mid_part2 = search(right_part)\n    return mid_part if mid_part!= mid_part2 else mid_part2\n    \n    "
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for index in range(len(arr)):\n        if arr[index] == arr[count]:\n            count += 1\n        else:\n            count = 0\n    if count == len(arr):\n        return arr[0]\n    else:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # iterate through the array, and check if it contains an element that is not in array\n    # if so, the element is not there, return None\n    # else return the element found in array\n    \n    # sort the array\n    arr = sorted(arr)\n    \n    # find the index of the first element that is not in array\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # define a helper function to find the position of the first occurence of a value\n    def search_first_occurence(arr, value):\n        for i in range(0,len(arr)):\n            if arr[i] == value:\n                return i\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0][0]\n    for i in range(1,len(list1)):\n        if max_product < list1[i][0]:\n            max_product = list1[i][0]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = max(list1)\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                max_product = max(list1[i][0],max_product)\n                max_product = max(list1[j][0],max_product)\n            elif list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                max_product = max(list1[i][0],max_product)\n                max_product = max(list1[j][0],max_product)\n            elif list1[i][0] == list1[j][0] and list1[i][1] < list1[j][1]:\n                max_product = max(list1[i][0],max_product)\n            elif list1[i][0] < list1[j][0] and list1[i][1] == list1[j][1]:\n                max_product = max(list1[i][0],max_product)\n            elif list1[i][0] > list1[j][0] and list1[i][1] == list1[j][1]:\n                max_product = max(list1[j][0],max_product)\n    return max_product\ndef main():\n    '''\n    Write a function that takes a list of tuples and returns the maximum product.\n    '''\n    list1 = [(1,2), (4,5), (6,7), (9,10)]\n    print(max_product_tuple(list1))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            if list1[i] > list1[j]:\n                temp = list1[i]\n                list1[i] = list1[j]\n                list1[j] = temp\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            pairs.append(list1[i] * list1[j])\n    return max(pairs)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            # print(f\"i: {i}, j: {j}\")\n            # print(list1[i] * list1[j])\n            if(list1[i] * list1[j]) > max_num:\n                max_num = list1[i] * list1[j]\n    return max_num\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            max_product=max(max_product,list1[i][0]*list1[j][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(tuple(map(lambda x: max(x), list(zip(*list1)))))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    temp = 0\n    index = 0\n    for i in range(len(list1)-1):\n        if list1[i] < list1[i+1]:\n            temp += list1[i]\n            index = i\n    return temp,index\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product=list1[i][1]*list1[j][1]\n            max_product=max(max_product,product)\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    summation = 0\n    for i in range(limit+1):\n        if check_amicable(i, summation):\n            print(i)\n            summation += i\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    sum = 0\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        if i == 2:\n            if i not in amicable_numbers:\n                amicable_numbers.add(i)\n        elif i == 3:\n            if i not in amicable_numbers:\n                amicable_numbers.add(i)\n        else:\n            if i % 2 == 0 and i % 3 == 0:\n                amicable_numbers.add(i)\n            if i % 2 == 0:\n                sum += i\n            elif i % 3 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    \n    def sum_all_amicable_numbers(n):\n        '''\n        A number is amicable if it is equal to the sum of its factors (excluding itself).\n        '''\n        amicable.append(n)\n        numbers = [x for x in range(1, n + 1) if factorial(x) == n]\n        for i in numbers:\n            if factorial(i) == i:\n                for j in numbers:\n                    if i == j:\n                        continue\n                    if i!= j and i!= factorial(j):\n                        amicable.append(i)\n            else:\n                sum_all_amicable_numbers(i)\n    \n    sum_all_amicable_numbers(limit)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for num in range(1, limit + 1):\n        if (num % 2 == 0):\n            x = num\n        else:\n            x = num * 3 + 1\n            while x % 2 == 0:\n                x = x // 2\n        if x not in amicable_numbers:\n            amicable_numbers.append(x)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    numbers = []\n    for number in range(1, limit + 1):\n        if number not in numbers:\n            numbers.append(number)\n            amicable_numbers.append(number)\n        else:\n            value = amicable_numbers[numbers.index(number)]\n            numbers.remove(value)\n            amicable_numbers.remove(value)\n    print(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    def sum_amicable(number):\n        if number < 2:\n            return number\n        else:\n            amicable.append(number)\n            sum_amicable(number - 1)\n            sum_amicable(number - 2)\n    sum_amicable(limit)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_set = set()\n    limit = abs(limit)\n    for n in range(1, limit):\n        is_amicable = True\n        for i in range(n):\n            if n % i == 0 and n not in amicable_numbers:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_numbers.append(n)\n            amicable_numbers_set.add(n)\n    return sum(amicable_numbers_set)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_sum = 0\n    \n    for n in range(1, limit):\n        # if n in amicable_numbers:\n        #     continue\n        numbers = get_amicable_numbers(n)\n        if len(numbers) == 1:\n            amicable_sum += n\n        else:\n            for n_1 in numbers:\n                for n_2 in numbers:\n                    if n_1!= n_2 and n_1!= n_2:\n                        amicable_sum += (n_1 + n_2)\n                        break\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    nums = list(range(1, limit+1))\n    for num in nums:\n        if num <= 1:\n            continue\n        for i in range(1,num):\n            if num%i == 0:\n                sum += num\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0:\n        return angle_radians(a)\n    else:\n        return angle_degrees(a,b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return round(a.real*b.imag - a.imag*b.real,3)\ndef is_complex(x):\n    '''\n    Return True if x is a complex number.\n    '''\n    return (type(x) == complex)\ndef is_fraction(x):\n    '''\n    Return True if x is a fraction.\n    '''\n    return (type(x) == float)\ndef is_numeric(x):\n    '''\n    Return True if x is a numeric value.\n    '''\n    return (type(x) == int)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real == 0:\n        a = 0j\n    if b.real == 0:\n        b = 0j\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(cmath.ccos(a*b/complex(abs(a),abs(b))))\n    if cmath.isnan(angle):\n        return angle\n    else:\n        return angle*180/cmath.pi\ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    angle = cmath.phase(cmath.ccos(complex(a,0)))\n    if cmath.isnan(angle):\n        return angle\n    else:\n        return angle*180/cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if abs(b)>1:\n        #print(\"Angle is less than 2 radians\")\n        return -cmath.acos(cmath.sin(a)*cmath.sin(b))\n    else:\n        #print(\"Angle is equal to 0 radians\")\n        return 0\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.acos(complex(a,b).real)/(math.pi)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b).imag)\n    angle = angle * 180 / math.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        print(\"the angle of \",a,\"is\",cmath.phase(a))\n    else:\n        a_p=cmath.phase(a)\n        b_p=cmath.phase(b)\n        print(\"the angle of \",a,\"is\",cmath.phase(a),\"and the angle of \",b,\"is\",a_p,\"and the angle of \",b_p)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if a.imag == 0:\n        angle = cmath.phase(b.real)\n        if angle > 0:\n            angle = angle*2\n    else:\n        angle = cmath.phase(b.imag)\n        if angle > 0:\n            angle = angle*2\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == b:\n        return 0\n    elif a.imag > 0 and b.imag > 0:\n        angle = 2* cmath.asin(a.imag) + cmath.asin(b.imag)\n    elif a.imag > 0 and b.imag < 0:\n        angle = 2* cmath.asin(a.imag) + cmath.asin(b.imag)\n    else:\n        angle = 0\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            num_zeros += 1\n        if string[i] == '1':\n            num_ones += 1\n    if num_zeros!= num_ones:\n        return max(num_zeros, num_ones)\n    else:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        if string[i] == '1':\n            count_1 += 1\n    return max(count_0 - count_1, len(string) - count_0 - count_1)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: \n        return 0\n    # print(string)\n    count = 1\n    i = 0\n    # print(\"string[i]\", string[i])\n    while i < len(string): \n        # print(i)\n        if string[i] == '0':\n            # print(string[i])\n            # print(\"string[i + 1]\", string[i + 1])\n            count += 1\n            i += 1\n        if string[i] == '1':\n            count += 1\n            # print(string[i])\n        # print(i)\n        i += 1\n    print(\"count\", count)\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in range(len(string)):\n        if (string[i] == \"0\"):\n            result += 1\n        else:\n            result -= 1\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    count_array = []\n    i = 0\n    j = 0\n    while i < len(string):\n        if string[i] == \"0\":\n            count += 1\n            i += 1\n        else:\n            count_array.append(count)\n            count = 0\n            i += 1\n    return max(count_array)\n    \n    \n    "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_counter = 0\n    one_counter = 0\n    zero_counter = 0\n    one_counter = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i,len(string)):\n            if (string[j] == '0'):\n                count += 1\n            elif (string[j] == '1'):\n                count -= 1\n        if(count > max):\n            max = count\n    return max\n    \nstring = \"1011111000111111111111111111111111111111\"\nprint(find_length(string))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 1:\n        return 0\n    elif len(string) == 0:\n        return 1\n    else:\n        if string[0] == '0':\n            result = find_length(string[1:])\n        else:\n            result = find_length(string[1:])\n        return max(result, find_length(string[1:]))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    for i in string:\n        if i == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    \n    return zero_count - one_count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total_zeros = 0\n    total_ones = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            total_zeros += 1\n        else:\n            total_ones += 1\n    return max(total_zeros, total_ones)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # your code goes here\n    if a==0:\n        return b\n    if b==0:\n        return a\n    if a%b==0:\n        return a+b\n    else:\n        return a-b\n    \ndef divisors(num):\n    '''\n    Write a python function that takes a positive integer as input and returns the number of divisors for the given integer.\n    '''\n    # your code goes here\n    if num<2:\n        return 0\n    if num==2:\n        return 1\n    if num%2==0:\n        return 3\n    if num%2==1:\n        return 4\n    else:\n        return 3+4+5\n        \ndef count(a,b):\n    '''\n    Write a python function that takes two integers as input and returns the number of divisors of the two given integers.\n    '''\n    # your code goes here\n    if a>b:\n        return 2*count(a,b)\n    if a<b:\n        return 2+count(a,b)\n    return 1\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0: \n        return a \n    return a+sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    while a%b:\n        a,b=b,a%b\n    return a\ndef isprime(num):\n    '''\n    A function to check if a given number is prime.\n    '''\n    if num==2 or num==3:\n        return True\n    if num%2==0 or num%3==0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1,6):\n        if num%i==0:\n            return False\n    return True\ndef primeFactors(num):\n    '''\n    A function to find the prime factors of a given number.\n    '''\n    while num%2==0:\n        num=num//2\n    for i in range(5, int(math.sqrt(num))+1, 6):\n        if num%i==0:\n            num=num//i\n    if num==1:\n        return [2]\n    if num==3:\n        return [1]\n    if num==4:\n        return [2,3]\n    if num==5:\n        return [2,3,5]\n    if num==6:\n        return [2,3,5,7]\n    if num==7:\n        return [2,3,5,7,11]\n    if num==8:\n        return [2,3,5,7,11,13]\n    if num==9:\n        return [2,3,5,7,11,13,17]\n    if num==10:\n        return [2,3,5,7,11,13,17,19]\n    if num==11:\n        return [2,3,5,7,11,13,17,19,23]\n    if num==12:\n        return [2,3,5,7,11,13,17,19,23,31]\n    if num==13:\n        return [2,3,5,7,11,13,17,19,23,31,37]\n    if num==14:\n        return [2,3,5,7,11,13,17,19,23,31,37,41]\n    if num==15:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43]\n    if num==16:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47]\n    if num==17:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51]\n    if num==18:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63]\n    if num==19:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69]\n    if num==20:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71]\n    if num==21:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73]\n    if num==22:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77]\n    if num==23:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81]\n    if num==24:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83]\n    if num==25:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85]\n    if num==26:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87]\n    if num==27:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91]\n    if num==28:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93]\n    if num==29:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97]\n    if num==30:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99]\n    if num==31:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101]\n    if num==32:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101,103]\n    if num==33:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101,103,107]\n    if num==34:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101,103,107,113]\n    if num==35:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101,103,107,113,117]\n    if num==36:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101,103,107,113,117,121]\n    if num==37:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101,103,107,113,117,121,133]\n    if num==38:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,71,73,77,81,83,85,87,91,93,97,99,101,103,107,113,117,121,133,145]\n    if num==39:\n        return [2,3,5,7,11,13,17,19,23,31,37,41,43,47,51,63,69,7"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # set the result\n    result = 0\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 'error'\n    if a%b==0:\n        return a//b\n    else:\n        return b//a\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def divisors(n): \n        # initializing a list with all the divisors \n        divisors = [] \n        i = 1\n        while (i < n): \n            if (n % i == 0): \n                divisors.append(i) \n            i = i + 1\n        # returning the list as an array \n        return divisors \n    # calculating the common divisors \n    common = divisors(a) + divisors(b) \n    # returning the common divisors \n    return sum(common) \n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = a + b\n    if c % 2 == 0:\n        return c//2\n    if c % 2 == 1:\n        if c < 13:\n            return c + 13\n        elif c == 13:\n            return c\n        else:\n            return c - 2\n    return c\ndef main():\n    a = int(input('Enter first number: '))\n    b = int(input('Enter second number: '))\n    print(sum(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum(x for x in range(min(a,b),0,-1) if a%x == 0 and b%x == 0)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Calculate all the common divisors \n    divisors = [i for i in range(1,a) if a%i == 0]\n    divisors.extend([i for i in range(1,b) if b%i == 0])\n    # Return the sum of the common divisors\n    return sum(divisors)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError('x and y should be ints')\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # your code goes here\n    if x > y:\n        return multiply_int(y, x)\n    elif x == y:\n        return x\n    else:\n        result = 1\n        for i in range(abs(x-y)):\n            result *= x\n        return result"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x * multiply_int(x,y-1)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    try:\n        return int(x) * int(y)\n    except:\n        print('Invalid input. Must be an integer')\n        return None\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x*y\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    mylist=[]\n    for i in range(len(str)):\n        mylist.append(str[i])\n    if n>len(mylist):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str:\n        if len(word) >= n:\n            print(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = str.lower()\n    my_list = [i for i in str]\n    my_list_len = len(my_list)\n    my_list_max = max(my_list)\n    if my_list_len < n:\n        return \"No words are longer than n characters from the list.\"\n    elif my_list_len == n:\n        for i in range(my_list_len):\n            if my_list[i] > my_list_max:\n                return \"The word '{}' is longer than {} characters.\".format(my_list[i], my_list_max)\n            else:\n                return \"The word '{}' is not longer than {} characters.\".format(my_list[i], my_list_max)\n    else:\n        my_list_max_index = my_list.index(my_list_max)\n        for i in range(my_list_len - n):\n            if my_list[my_list_max_index] > my_list_max:\n                return \"The word '{}' is longer than {} characters.\".format(my_list[my_list_max_index], my_list_max)\n            else:\n                return \"The word '{}' is not longer than {} characters.\".format(my_list[my_list_max_index], my_list_max)\n            \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        words.append(word)\n    if len(words) >= n:\n        return words\n    return []\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return''.join(word for word in str.split() if len(word)>=n)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = set(str)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import string\n    my_str = ''.join(str)\n    return list(set(string.ascii_lowercase)-set(my_str.split()))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Declare variables\n    long_words = []\n    for i in range(len(str)):\n        if len(str) - i >= n:\n            long_words.append(str[i])\n    \n    # Print the list\n    print(''.join(long_words))\n    \nif __name__ == '__main__':\n    # Get words\n    words = ['cats', 'dog', 'car', 'catg', 'catn', 'catf']\n    \n    # Long words\n    long_words(6, words)\n    \n    # Long words with \"y\"\n    long_words(10, words, 'y'"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(' ') if len(word)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest = 0\n    for word in str:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # find size\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # compare size\n    if rows!= cols:\n        return False\n    # magic square\n    if rows == cols:\n        # check 1\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 2\n        for i in range(rows):\n            for j in range(rows):\n                if my_matrix[j][i]!= 0:\n                    return False\n        # check 3\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 4\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[j][i]!= 0:\n                    return False\n        # check 5\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 6\n        for i in range(rows):\n            for j in range(rows):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 7\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 8\n        for i in range(rows):\n            for j in range(rows):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 9\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 10\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 11\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 12\n        for i in range(rows):\n            for j in range(rows):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 13\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 14\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 15\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 16\n        for i in range(rows):\n            for j in range(rows):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 17\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 18\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 19\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 20\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 21\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 22\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 23\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 24\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 25\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 26\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 27\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 28\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 29\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 30\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 31\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 32\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 33\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 34\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 35\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 36\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 37\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 38\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 39\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 40\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 41\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 42\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 43\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 44\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 45\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= 0:\n                    return False\n        # check 46\n        for i in range(rows):\n            for j in range(col"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # You should use the \"for\" loop for this.\n    for row in my_matrix:\n        for element in row:\n            if element == 1:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (not isinstance(my_matrix, list)):\n        return \"Not a list\"\n    for row in my_matrix:\n        for element in row:\n            if (element == element):\n                return \"Equilateral\"\n            elif (element == 0):\n                return \"Is a square\"\n            elif (element == 1):\n                return \"Is a diagonal\"\n            elif (element == -1):\n                return \"Is a off-diagonal\"\n    return \"Not a square\"\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] == 1:\n                # print(i,j)\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic_square = True\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        is_magic_square = False\n    \n    if len(my_matrix)!= len(my_matrix[-1]):\n        is_magic_square = False\n    \n    if my_matrix[0][0]!= 0:\n        is_magic_square = False\n    \n    return is_magic_square\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if all the elements are positive integers or false\n    if all(map(lambda x: type(x) is int, my_matrix)):\n        if all(i >= 0 for i in my_matrix):\n            if my_matrix[0][0] == 0:\n                return False\n        return False\n    \n    # check if all the elements are integers\n    if all(map(lambda x: type(x) is int, my_matrix[0])):\n        if all(i >= 0 for i in my_matrix[0]):\n            if my_matrix[0][0] == 0:\n                return False\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Use nested loops to check row and column boundaries\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[0])):\n            # Check if the row and column boundary are in bounds\n            if row < 0 or row > len(my_matrix) - 1 or col < 0 or col > len(my_matrix[0]) - 1:\n                return False\n            else:\n                if my_matrix[row][col]!= 1:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if(my_matrix[i][j] == my_matrix[j][i]):\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n <= 2:\n        return True\n    sum_squares = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            sum_squares += my_matrix[i][j]\n    sum_squares = sum_squares - my_matrix[0][0]\n    return sum_squares <= 1\n    #return sum_squares <= 1\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    columns = len(my_matrix[0])\n    for i in range(rows):\n        for j in range(columns):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n    \n    # print(freq_map)\n    for key, value in freq_map.items():\n        if value == max(freq_map.values()):\n            return key\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_map = defaultdict(list)\n    for i in nums:\n        hash_map[i].append(nums.count(i))\n    \n    maximum_frequency = max(hash_map.values())\n    maximum_frequency_idx = hash_map[maximum_frequency].index(True)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    d.update(zip(nums, nums))\n    # {'1': 1, '2': 2, '3': 3, '4': 4}\n    # iterate through dict values\n    for num in d:\n        # value of dict value for num\n        freq = d[num]\n        # if dict value is the most frequent\n        if freq > d[num]:\n            return num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_freq_idx = 0\n    for i in range(len(nums)):\n        if nums[i] > max_freq:\n            max_freq = nums[i]\n            max_freq_idx = i\n    return max_freq_idx\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    for key in d:\n        if d[key] == 1:\n            return key\n    return -1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    print('Start: ',nums)\n    max_freq = defaultdict(int)\n    for num in nums:\n        max_freq[num] += 1\n    return max(max_freq, key=max_freq.get)\ndef max_occurrences_key(nums):\n    '''\n    Use a key function to group the nums and return the max frequency.\n    '''\n    print('Start: ',nums)\n    max_freq = defaultdict(int)\n    for num in nums:\n        max_freq[num] += 1\n    return max(max_freq, key=max_freq.get)\ndef count_occurrences(nums):\n    '''\n    Use a counter function to group the nums and return the number of occurrences.\n    '''\n    print('Start: ',nums)\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    return count_dict\ndef order_occurrences(nums):\n    '''\n    Use a counter function to group the nums and return the count of occurrence.\n    '''\n    print('Start: ',nums)\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    return count_dict\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # if the list is empty\n    if not nums:\n        return 'No item in the list'\n    \n    # initialize an array to save the frequency of each number\n    frequency = []\n    # save the number in a list\n    for num in nums:\n        frequency.append(nums.count(num))\n        \n    # if the number is not in the list then it will return that number.\n    # otherwise, return it.\n    if frequency[-1] == 1:\n        return nums[frequency.index(max(frequency))]\n    \n    else:\n        return nums[frequency.index(max(frequency))]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create an empty dictionary\n    frequency = {}\n    # iterate over the list of numbers\n    for num in nums:\n        # if the number is already present in dictionary\n        if num in frequency:\n            frequency[num] += 1\n        # else if it is not, add it to the dictionary\n        else:\n            frequency[num] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # we sort the nums so that the most frequently occured item is first\n    # create a dictionary to count the number of occurrences of each element\n    # store the count in a dictionary\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    # if the dictionary has an item with a value of 1, then return it\n    # if the dictionary has an item with a value of 0, then return an empty list\n    return max(counts, key=counts.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequent_items = []\n    for num in nums:\n        if num not in frequent_items:\n            frequent_items.append(num)\n    \n    maximum = 0\n    max_num = -1\n    for num in frequent_items:\n        if num > maximum:\n            maximum = num\n        if num == maximum:\n            if num > max_num:\n                max_num = num\n                \n    return max_num\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    str1_reversed = ''\n    for char in str1:\n        if char in vowels:\n            str1_reversed += char\n        else:\n            str1_reversed += char[::-1]\n    return str1_reversed\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['A','E','I','O','U']\n    string = str1\n    result = \"\"\n    for i in range(len(string)):\n        if string[i] in vowels:\n            result += string[i].upper()\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = ''\n    for char in str1:\n        if char not in ['a','e','i','o','u']:\n            new_str += char\n        else:\n            print('Not an available character!')\n            new_str = ''\n    print(new_str)\n    #Remove all non vowels\n    \n    for char in str1:\n        if char in ['a','e','i','o','u']:\n            new_str += char\n    \n    print(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join(str1[0::-1].lower())\n    "
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = list(str1)\n    str1.reverse()\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    lst = list(str1)\n    new_str = \"\"\n    for i in lst:\n        if i in vowels:\n            new_str += i\n        else:\n            continue\n    return new_str\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1.lower().replace('a','e').replace('i','o').replace('u','a').replace('y','i').replace('A','E').replace('I','O').replace('U','A')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i not in vowels:\n            new_str += i\n    return new_str\nprint(reverse_vowels(\"hello\"))"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Implement your function here\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    ans = \"\"\n    for c in str1:\n        if c in vowels:\n            ans += c\n    return ans\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = str1.lower()\n    vowels_ordered = sorted(str2)\n    reversed_str = ''\n    for i in range(len(str2)):\n        if i % 2!= 0:\n            if str2[i] in vowels:\n                reversed_str += str2[i]\n            else:\n                continue\n    return reversed_str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"(\"\n    for i in tup1:\n        s += \"(\"\n        s += str(i)\n        s += \",\"\n        s += \")\"\n        s += \" \"\n    s = s[:-2]\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = '('\n    for tup in tup1:\n        string = string + str(tup[0]) + \",\" + str(tup[1]) + \",\"\n    string = string + ')'\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"tup_string(%s)\" %(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join([str(x) for x in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) + ','\n    return string[:-1]\n    \ndef tup_concat(tup1, tup2):\n    '''\n    Write a function to concatenate a tuple to another tuple\n    '''\n    return tuple(tup1) + tuple(tup2)\n    \ndef tup_bool(tup1):\n    '''\n    Write a function to convert a tuple to a boolean.\n    '''\n    return len(tup1)!= 0\n    \ndef tup_length(tup1):\n    '''\n    Write a function to calculate the length of a tuple.\n    '''\n    return len(tup1)\n    \ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to an integer.\n    '''\n    return int(tup1[0])\n    \ndef tup_float(tup1):\n    '''\n    Write a function to convert a tuple to a float.\n    '''\n    return float(tup1[0])\n    \ndef tup_none(tup1):\n    '''\n    Write a function to convert a tuple to None.\n    '''\n    return None\n    \ndef tup_str(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ndef tup_convert(tup1, tup2):\n    '''\n    Convert a tuple to another tuple.\n    '''\n    return tup1 + tup2\n    \ndef tup_zip(*args):\n    '''\n    Write a function to zip a list.\n    '''\n    return tuple(tup for tup in args)\n    \ndef tup_zip_dict(tup1, tup2):\n    '''\n    Write a function to zip a dictionary.\n    '''\n    return tup1.union(tup2)\n    \ndef tup_zip_dict2(tup1, tup2):\n    '''\n    Write a function to zip a dictionary.\n    '''\n    return tup1.update(tup2)\n    \ndef tup_zip_list(tup1, tup2):\n    '''\n    Write a function to zip a list.\n    '''\n    return tup1 + tup2\n    \ndef tup_zip_dict_exception(tup1, tup2):\n    '''\n    Write a function to zip a dictionary.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_list_exception(tup1, tup2):\n    '''\n    Write a function to zip a list.\n    '''\n    return tup1 + tup2\n    \ndef tup_zip_tuple_exception(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception2(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception3(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception4(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception5(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception6(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception7(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception8(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception9(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception10(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception11(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception12(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception13(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception14(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception15(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception16(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception17(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception18(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception19(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception20(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception21(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception22(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception23(tup1, tup2):\n    '''\n    Write a function to zip a tuple.\n    '''\n    return tup1.update({tup2:None})\n    \ndef tup_zip_tuple_exception24(tup"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if tup1:\n        return '('+','.join(map(str,tup1))+')'\n    else:\n        return '()'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = tuple(map(str,tup1))\n    return '(' + ','.join(tup2) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    output = ''\n    for ele in tup1:\n        output += str(ele) + ','\n    return output[:-1]\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    def isNegative(n):\n        if n < 0:\n            return True\n        else:\n            return False\n    \n    def sumNegative(nums):\n        if isNegative(nums[0]):\n            sumNegative(nums[1:])\n            sum = 0\n            for i in range(len(nums) - 1):\n                sum += nums[i]\n            return sum\n        else:\n            return nums[0]\n    \n    return sumNegative(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #return sum(nums) - sum(nums)\n    result = 0\n    for num in nums:\n        if num < 0:\n            result -= num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Your code here\n    # for i in range(0, len(nums)):\n    #     nums[i] = nums[i] if nums[i] < 0 else 0\n    # return sum(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_sum = 0\n    for num in nums:\n        if num < 0:\n            num_sum += num\n    return num_sum"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for num in nums:\n        if num < 0:\n            negative_num += num\n    return negative_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negativ = 0\n    for num in nums:\n        if num < 0:\n            sum_negativ += num\n    return sum_negativ\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in nums:\n        if i<0:\n            result = result + i\n    return result\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums is None or len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums.sort()\n    sum=0\n    for i in range(len(nums)):\n        if i > 0 and nums[i] < 0:\n            sum = sum + nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s=0\n    for i in range(len(nums)):\n        s=s+nums[i]\n    return s\n    \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    while i**2 < n: \n        if i**2 % 2 == 0: \n            j = (i**2 + i)%2\n            while j**2 < n:\n                if j**2 % 2 == 0:\n                    k = j**2 + j\n                    if k**2 % 2 == 0: \n                        return n + k + i\n                j = (j + 1)%2\n                k = j**2 + j\n        i += 1\n    \n    \nprint(hexagonal_num(10))\nprint(hexagonal_num(20))\nprint(hexagonal_num(40))\nprint(hexagonal_num(60))\nprint(hexagonal_num(80))\nprint(hexagonal_num(100))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    import math\n    a = int(math.sqrt(n))\n    b = int(a + (a + 1) / 2)\n    c = int(math.sqrt(n - (a + 1) / 2))\n    return b + a * c\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        left = n - 1\n        right = n \n        while left >= 0 and right < 6: \n            if left % 2 == 0 and right % 2 == 1: \n                return 3 \n            elif left % 2 == 1 and right % 2 == 0: \n                return 3 \n            elif left % 2 == 0 and right % 2 == 0: \n                return 3 \n            elif left % 2 == 0: \n                return 3 \n            elif right % 2 == 1: \n                return 3 \n            elif right % 2 == 0: \n                return 3 \n            left -= 1\n            right += 1 \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 0\n    while i <= n :\n        j = 0\n        while j <= n -i :\n            if j == n -i:\n                return n\n            else :\n                j += 1\n        i += 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    if (n%4) == 0:\n        while n >= 4:\n            num += 4\n            n = n//4\n        return num\n    else:\n        while n >= 4:\n            num += 4\n            n = n//4 + 1\n        return num\n    "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * n + (n+1) * n * n - n * n * n \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_list = []\n    for n in range (n):\n        hexagonal_list.append(n*(n+1)//2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # 0,0 is a corner\n    if n == 0:\n        return 0\n    # If 0 or -1, just return it\n    if n < 0 or n == -1:\n        return -1\n    # If 0 or 2, return the cube root of 2, 3, and 5\n    elif n == 0 or n == 2 or n == 3 or n == 5:\n        return 6\n    # if n is even, return the square root of the cube root of 2\n    elif n % 2 == 0:\n        return hexagonal_num(n // 2) ** 2\n    # if n is odd, return the cube root of 3\n    elif n % 2 == 1:\n        return hexagonal_num(n // 3) ** 3\n    else:\n        return hexagonal_num(n // 5) ** 5\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n > 8: \n        raise Exception('n can be less than 8')\n    if n < 2: \n        return 0\n    for i in range(1, n + 1): \n        x = i * 2 \n        if x + 1 >= n: \n            break\n        if i + x >= n: \n            break\n        if x + 2 >= n: \n            break\n        if n - i - x - 1 >= 0: \n            break\n        if n - i - x - 2 >= 0: \n            break\n        if n - i - x - 3 >= 0: \n            break\n        if n - i - x - 4 >= 0: \n            break\n        if n - i - x - 5 >= 0: \n            break\n        if n - i - x - 6 >= 0: \n            break\n        if n - i - x - 7 >= 0: \n            break\n    if n - i - x - 8 >= 0: \n        return x\n    else: \n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    for i in range(0, n):\n        result = result + 2 * (i+1)\n    return result\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create list of zeroes and nonzeros\n    z = 0\n    n = len(nums)\n    # iterate over the array\n    for i in range(0,n):\n        # if the number is zero, add it to the zeroes\n        if nums[i] == 0:\n            z = z + 1\n    # return the ratio of zeroes to non-zeroes\n    return (z/n)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    i = 0\n    n = len(nums)\n    count = 0\n    \n    while i < n:\n        if nums[i] == 0:\n            count += 1\n        i += 1\n    \n    return count / n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # fill an empty array with zeroes\n    zeros = array('i', [0])\n    # fill an empty array with non-zeroes\n    non_zeroes = array('i', [0])\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # code here\n    return round((len(nums) - nums.count(0)) / len(nums), 2)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    c=0\n    for i in nums:\n        if i==0:\n            c+=1\n    return c/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    \n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n    \n    return zeroes/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return False\n    elif (n == 1):\n        return True\n    else:\n        if (n%2 == 0):\n            return True\n        else:\n            return False\n    \n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    else:\n        x = n % 2\n        y = n // 2\n        return is_Sum_Of_Powers_Of_Two(y) and x!= 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    '''\n    \n    :param n: number\n    :type n: int\n    :return: boolean\n    :rtype: boolean\n    '''\n    \n    #count = 0\n    #for i in range(1, n + 1):\n    #    if n % i == 0:\n    #        count += 1\n    #        if count == 2:\n    #            return True\n    #return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    num = str(n)\n    \n    if len(num)!= 1:\n        return False\n    \n    if n == 0:\n        return False\n    \n    for i in range(2, int(len(num)**0.5)+1):\n        if num.count(str(i)) == 0:\n            return False\n        \n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    print(n)\n    pow=0\n    while(n!=0):\n        if n%2==0:\n            pow=pow+2\n            n=n//2\n        else:\n            n=n//2+1\n    print(pow)\n    return pow==1\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n in range(1, 41):\n        if n in range(2, 41) or n in range(3,41):\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #raise NotImplementedError\n    if n <= 0:\n        raise ValueError(\"Value must be greater than zero.\")\n    else:\n        return n == sum([int(x)**2 for x in str(n)])\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power=1\n    sum_pow=0\n    while n>0:\n        if n%2==0:\n            power*=2\n            n=n//2\n            sum_pow+=power\n        else:\n            power=power+1\n            sum_pow+=power\n        n=n//2\n    return sum_pow==sum(range(0,sum_pow))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*(r**2)\n    \ndef circle_circle_intersection(r1, r2, r3):\n    '''\n    Write a function that returns the coordinates of the intersection\n    of the circles.\n    '''\n    return (r1*(r2-r1)) + (r2*(r3-r2)) + (r3*(r1-r3))\n    \ndef print_circle(radius):\n    '''\n    Print a circumference of a circle with a given radius.\n    '''\n    print(circle_circumference(radius))\n    \ndef print_area(radius):\n    '''\n    Print the area of a circle with a given radius.\n    '''\n    print(circle_area(radius))\n    \ndef print_circle_intersection(radius1, radius2, radius3):\n    '''\n    Print the intersection of two circles given the two circles'\n    radii.\n    '''\n    print(circle_circle_intersection(radius1, radius2, radius3))\n    \ndef area_circle(radius):\n    '''\n    Compute the area of a circle given its radius.\n    '''\n    return circle_area(radius)\n    \ndef perimeter_circle(radius):\n    '''\n    Compute the perimeter of a circle given its radius.\n    '''\n    return circle_circumference(radius)\n    \ndef main():\n    print_circle(1)\n    print_area(1)\n    print_circle_intersection(1, 2, 3)\n    print_circle_intersection(2, 3, 1)\n    print_circle_intersection(3, 1, 2)\n    print_area(1)\n    print_area(1)\n    print_area(2)\n    print_area(3)\n    print_circle_intersection(1, 2, 2)\n    print_circle_intersection(3, 2, 1)\n    print_circle_intersection(1, 2, 3)\n    \nmain("
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*(3.14)*(r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    area = pi * r * r\n    print(\"Circumference of circle is :\", area)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum = 2 * 3.14 * r * r\n    return(circum)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    circumference = 2 * pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of a circle is:\", circumference)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    \n    for i in test_list:\n        if type(i) is list:\n            result += extract_singly(i)\n        else:\n            result.append(i)\n    \n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.extend(test_list[i])\n    return temp_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # get the length of the list\n    length = len(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def sift_up(lst):\n        '''\n        Search the list from the front one up.\n        '''\n        def reverse(lst):\n            '''\n            Recursively reverse the list.\n            '''\n            lst2 = []\n            for el in lst:\n                lst2.append(el)\n                lst2.extend(reverse(el))\n            return lst2\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_numbers = list()\n    for element in test_list:\n        if type(element)!= list:\n            singly_numbers.append(element)\n        else:\n            for element2 in element:\n                singly_numbers.append(element2)\n    return singly_numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # YOUR CODE HERE\n    temp = []\n    for n in test_list:\n        if type(n)!= list:\n            temp.append(n)\n        else:\n            for i in n:\n                temp.append(i)\n    return temp\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list_1 = []\n    test_list_2 = []\n    test_list_3 = []\n    test_list_4 = []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for i in test_list:\n        num_list += i\n    return num_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for i in test_list:\n        for j in i:\n            flatten.append(j)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def in_order(arr):\n        if len(arr) == 0:\n            return\n        in_order(arr[1:])\n        print(arr[0])\n        in_order(arr[1:])\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sort_index = 0\n    #L[i] is the starting index of the elems\n    #L[i] - 1 because it is the last elem of the list\n    for i in range(len(nums)):\n        #Swap the i+1 with i\n        nums[i], nums[pancake_sort_index] = nums[pancake_sort_index], nums[i]\n        #Move the index pointer to its next position\n        pancake_sort_index += 1\n    #The last index is the last elem\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    mid = length // 2\n    pancake_sort_left = nums[:mid]\n    pancake_sort_right = nums[mid:]\n    pancake_sort_left_sorted = []\n    pancake_sort_right_sorted = []\n    pancake_sort_left_sorted.append(pancake_sort_left)\n    pancake_sort_right_sorted.append(pancake_sort_right)\n    for i in range(0, length, 2):\n        pancake_sort_left_sorted[i] = pancake_sort_left_sorted[i][::-1]\n        pancake_sort_right_sorted[i] = pancake_sort_right_sorted[i][::-1]\n    \n    pancake_sort_left_sorted.append(nums[:mid])\n    pancake_sort_right_sorted.append(nums[mid:])\n    return pancake_sort_left_sorted, pancake_sort_right_sorted\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_array(arr):\n        n = len(arr)\n        if n < 2:\n            return arr\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swap = True\n    \n    for i in range(n-1):\n        if swap:\n            for j in range(n-1-i):\n                if nums[j] > nums[j+1]:\n                    temp = nums[j]\n                    nums[j] = nums[j+1]\n                    nums[j+1] = temp\n                swap = False\n        else:\n            for j in range(n-1-i):\n                if nums[j] > nums[j+1]:\n                    temp = nums[j]\n                    nums[j] = nums[j+1]\n                    nums[j+1] = temp\n            swap = True\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # find smallest\n        for j in range(len(nums)):\n            if i >= j:\n                break\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    def sort(nums, start, end):\n        if start >= end:\n            return \n        \n        pivot = nums[start]\n        low = start + 1\n        high = end\n        \n        while low <= high:\n            \n            if nums[low] > pivot:\n                nums[high], nums[low] = nums[low], nums[high]\n                high -= 1\n            \n            elif nums[high] > pivot:\n                nums[low], nums[high] = nums[high], nums[low]\n                low += 1\n            \n            else:\n                high -= 1\n                \n    \n    def reverse_sort(nums, start, end):\n        if start >= end:\n            return \n        \n        pivot = nums[start]\n        low = start + 1\n        high = end\n        \n        while low <= high:\n            \n            if nums[low] < pivot:\n                nums[high], nums[low] = nums[low], nums[high]\n                high -= 1\n                \n            elif nums[high] < pivot:\n                nums[low], nums[high] = nums[high], nums[low]\n                low += 1\n            \n            else:\n                high -= 1\n    \n    sort(nums, 0, len(nums)-1)\n    reverse_sort(nums, 0, len(nums)-1)\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # n = len(nums)\n    # for i in range(n-1):\n    #     for j in range(n-i-1):\n    #         if nums[j] > nums[j+1]:\n    #             temp = nums[j]\n    #             nums[j] = nums[j+1]\n    #             nums[j+1] = temp\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i==j and list1[i]==list2[j]:\n                count+=1\n    for i in range(len(list2)):\n        for j in range(len(list2)):\n            if i==j and list2[i]==list3[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c = 0\n    for item in list1:\n        if item in list2:\n            c+=1\n    for item in list3:\n        if item in list1:\n            c+=1\n    for item in list3:\n        if item in list2:\n            c+=1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if (list1[i] == list2[j] and list2[i] == list3[j] and list3[i]!= 0):\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i in list2:\n            c=c+1\n    for i in list3:\n        if i in list1:\n            c=c+1\n    return c\ndef count_diffpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i in list2:\n            c=c+1\n    for i in list3:\n        if i not in list1:\n            c=c+1\n    return c\ndef count_symupair(list1,list2,list3):\n    '''\n    Write a function to count number of symmetric items that are common in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i in list2:\n            c=c+1\n    for i in list3:\n        if i in list3:\n            c=c+1\n    return c\ndef count_mirrorpair(list1,list2,list3):\n    '''\n    Write a function to count number of symmetric items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i in list3:\n            c=c+1\n    for i in list2:\n        if i not in list3:\n            c=c+1\n    return c\ndef count_purepair(list1,list2,list3):\n    '''\n    Write a function to count number of pure (identical) items that are common in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2:\n            c=c+1\n    for i in list3:\n        if i in list3:\n            c=c+1\n    return c\ndef count_simplepair(list1,list2,list3):\n    '''\n    Write a function to count number of pure (identical) items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2:\n            c=c+1\n    for i in list3:\n        if i not in list2:\n            c=c+1\n    return c\ndef count_bothpair(list1,list2,list3):\n    '''\n    Write a function to count number of pure (identical) items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2:\n            c=c+1\n    for i in list3:\n        if i not in list3:\n            c=c+1\n    return c\ndef count_dominantpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are common in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i in list2:\n            c=c+1\n    for i in list3:\n        if i not in list2 and i not in list3:\n            c=c+1\n    return c\ndef count_divpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2:\n            c=c+1\n    for i in list3:\n        if i not in list2:\n            c=c+1\n    return c\ndef count_symmetricpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list1 and i not in list3:\n            c=c+1\n    return c\ndef count_mirrorpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list3:\n            c=c+1\n    return c\ndef count_purepair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list1 and i not in list3:\n            c=c+1\n    return c\ndef count_symmetricpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list2 and i not in list3:\n            c=c+1\n    return c\ndef count_dominantpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list2 and i not in list3:\n            c=c+1\n    return c\ndef count_divpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list1 and i not in list3:\n            c=c+1\n    return c\ndef count_symmetricpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list1 and i not in list3:\n            c=c+1\n    return c\ndef count_dominantpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list2 and i not in list3:\n            c=c+1\n    return c\ndef count_divpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in list1:\n        if i not in list2 and i not in list3:\n            c=c+1\n    for i in list3:\n        if i not in list1 and i not in list3:\n            c=c+1\n    return c\ndef count_symmetricpair(list1,list2,list3):\n    '''\n    Write a function to count number of two dominant items that are identical in the same position of three given lists.\n    ''"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2):\n        if len(list1)==len(list3):\n            list1.sort()\n            list2.sort()\n            list3.sort()\n            ans=0\n            for i in range(0,len(list1)):\n                for j in range(i+1,len(list1)):\n                    if list1[i]==list2[j] and list1[j]==list3[i]:\n                        ans=ans+1\n            return ans\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for item in list1:\n        if item in list2:\n            count=count+1\n        if item in list3:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_1=0\n    count_2=0\n    count_3=0\n    \n    if len(list1)==len(list2):\n        for i in list1:\n            for j in list2:\n                if i==j:\n                    count_1+=1\n    if len(list3)==len(list2):\n        for i in list3:\n            for j in list2:\n                if i==j:\n                    count_2+=1\n    if len(list1)==len(list3):\n        for i in list1:\n            for j in list3:\n                if i==j:\n                    count_3+=1\n    return count_1,count_2,count_3\n    \n    \ndef count_diff(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    count_1=0\n    count_2=0\n    count_3=0\n    \n    if len(list1)==len(list2):\n        for i in list1:\n            for j in list2:\n                if i!=j:\n                    count_1+=1\n    if len(list3)==len(list2):\n        for i in list3:\n            for j in list2:\n                if i!=j:\n                    count_2+=1\n    if len(list1)==len(list3):\n        for i in list1:\n            for j in list3:\n                if i!=j:\n                    count_3+=1\n    return count_1,count_2,count_3\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for index1 in range(len(list1)):\n        for index2 in range(len(list2)):\n            if list1[index1] == list2[index2]:\n                counter+=1\n    if counter == 3:\n        return counter\n    else:\n        return -1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    #the list that will be compared\n    list1_index = 0\n    \n    #the list that will be compared\n    list2_index = 0\n    \n    #the list that will be compared\n    list3_index = 0\n    \n    #list of the elements that are in the same position of 3 lists\n    same_list = []\n    \n    #list that will be added to the same_list\n    list4 = []\n    \n    #comparing 3 lists in 3 different positions\n    for i in range(len(list1)):\n        if list1[list1_index] == list2[list2_index] and list1[list2_index] == list3[list3_index]:\n            same_list.append(list1[list1_index])\n            list4.append(list1[list1_index])\n            list4.append(list2[list2_index])\n            list4.append(list3[list3_index])\n        else:\n            # if the third position of the list 1 is different than the second position of the list 2\n            if list1[list1_index]!= list2[list2_index]:\n                #append the 3 positions of the list 1 to the same_list\n                same_list.append(list1[list1_index])\n                list4.append(list1[list1_index])\n                list4.append(list2[list2_index])\n                list4.append(list3[list3_index])\n            \n            #if the third position of the list 1 is different than the second position of the list 2\n            elif list1[list1_index]!= list2[list2_index] and list1[list2_index]!= list3[list3_index]:\n                #append the 3 positions of the list 1 to the same_list\n                same_list.append(list1[list1_index])\n                list4.append(list1[list1_index])\n                list4.append(list2[list2_index])\n                list4.append(list3[list3_index])\n                \n            #if the third position of the list 1 is different than the second position of the list 2\n            elif list1[list1_index]!= list2[list2_index] and list1[list2_index]!= list3[list3_index]:\n                #append the 3 positions of the list 1 to the same_list\n                same_list.append(list1[list1_index])\n                list4.append(list1[list1_index])\n                list4.append(list2[list2_index])\n                list4.append(list3[list3_index])\n                \n            else:\n                #append the 3 positions of the list 1 to the same_list\n                same_list.append(list1[list1_index])\n                list4.append(list1[list1_index])\n                list4.append(list2[list2_index])\n                list4.append(list3[list3_index])\n                \n                \n                \n    return len(same_list)\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if(list1[i] == list2[j] and list1[i] == list3[k]):\n                    count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in Input:\n        lst.append(len(i))\n    return lst\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not isinstance(Input, tuple):\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # get all elements in a tuple\n    elements = []\n    for el in Input:\n        elements.append(el)\n    # find number of lists\n    n=0\n    for i in elements:\n        if isinstance(i,(tuple,list))==True:\n            n+=1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code here\n    count = 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    if l == 0: return 0\n    else:\n        if not isinstance(Input, tuple):\n            return l\n        else:\n            return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(Input), 1):\n        for j in range(0, len(Input), 1):\n            if (Input[i] == Input[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst=[]\n    for i in range(len(Input)):\n        if type(Input[i])==tuple:\n            lst.append(len(Input[i]))\n        elif type(Input[i])==list:\n            lst.append(len(Input[i]))\n    return lst\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        for j in i:\n            if isinstance(j, list):\n                count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for lst in Input: \n        if type(lst) is list: \n            count += 1\n    return count \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = -9999999999\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > maximum:\n                maximum = abs(arr[i] - arr[j])\n                m = arr[i]\n                n = arr[j]\n    return m, n, maximum\n    \ndef min_Abs_Diff(arr):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    minimum = 999999999\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) < minimum:\n                minimum = abs(arr[i] - arr[j])\n                m = arr[i]\n                n = arr[j]\n    return m, n, minimum\n    \ndef main():\n    '''\n    Write a python function to find the minimum absolute difference between any two elements in a given array.\n    '''\n    print(min_Abs_Diff([0, 1, 2, 3, 4, -2, -8, 6, -8, -12, 3, 6, -4, 2]))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # def max_abs_diff(arr):\n    #     max_abs = max(arr) - min(arr)\n    #     print(max_abs)\n    #     return max_abs\n    #     # print(max_abs_diff(arr))\n    #     # return max_abs\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Function to find the maximum difference between any two elements \n    # in a given array \n    # Input : arr = [0,1,2,3,4] \n    # Output : 3 \n    \n    # Initialize maximum difference \n    max_diff = 0 \n    # Loop over all elements in arr \n    for i in range(len(arr)): \n        # Find difference between adjacent elements \n        diff = abs(arr[i]-arr[i+1]) \n        # If diff is greater than maximum diff, \n        # set diff to maximum diff \n        if diff > max_diff: \n            max_diff = diff \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = -float('inf')\n    \n    for i in range(len(arr) - 1):\n        max_diff = max(max_diff, abs(arr[i] - arr[i+1]))\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    res = 0\n    max_diff = 0\n    for i in range(len(arr)):\n        temp_res = abs(arr[i] - arr[i+1])\n        res += temp_res\n        if res > max_diff:\n            max_diff = res\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #solution = lambda: max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: max(max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \ndef max_Abs_Diff2(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #solution = lambda: max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: max(max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \ndef max_Abs_Diff3(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #solution = lambda: max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: max(max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \n    \ndef max_Abs_Diff4(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #solution = lambda: max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: max(max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \n    \n    \ndef max_Abs_Diff5(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #solution = lambda: max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: max(max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \n    \ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    #solution = lambda: min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: min(min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \ndef min_Abs_Diff2(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    #solution = lambda: min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: min(min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \ndef min_Abs_Diff3(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    #solution = lambda: min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: min(min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \n    \ndef min_Abs_Diff4(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    #solution = lambda: min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: min(min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \n    \n    \ndef min_Abs_Diff5(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    #solution = lambda: min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    #return solution()\n    solution = lambda: min(min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0])), abs(arr[0] - arr[1]))\n    return solution()\n    \n    \n    \n    \ndef mean(arr): \n    '''\n    Write a python function to find the mean of a given array.\n    '''\n    #solution = lambda: sum(arr)/len(arr)\n    #return solution()\n    solution = lambda: sum(arr)/len(arr)\n    return solution()\n    \n    \n    \ndef median(arr): \n    '''\n    Write a python function to find the median of a given array.\n    '''\n    #solution = lambda: sorted(arr)[len(arr)//2]\n    #return solution()\n    solution = lambda: sorted(arr)[len(arr)//2]\n    return solution()\n    \n    \n    \ndef mode(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n    #solution = lambda: max(arr)\n    #return solution()\n    solution = lambda: max(arr)\n    return solution()\n    \n    \n    \ndef mode2(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n    #solution = lambda: max(arr)\n    #return solution()\n    solution = lambda: max(arr)\n    return solution()\n    \n    \n    \ndef mode3(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n    #solution = lambda: max(arr)\n    #return solution()\n    solution = lambda: max(arr)\n    return solution()\n    \n    \n    \ndef mode4(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n    #solution = lambda: max(arr)\n    #return solution()\n    solution = lambda: max(arr)\n    return solution()\n    \n    \n    \ndef mode5(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n    #solution = lambda: max(arr)\n    #return solution()\n    solution = lambda: max(arr)\n    return solution()\n    \n    \n    \n    \ndef mode6(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n    #solution = lambda: max(arr)\n    #return solution()\n    solution = lambda: max(arr)\n    return solution()\n    \n    \n    \ndef mode7(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n    #solution = lambda: max(arr)\n    #return solution()\n    solution = lambda: max(arr)\n    return solution()\n    \n    \n    \ndef mode8(arr): \n    '''\n    Write a python function to find the mode of a given array.\n    '''\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Input : arr = [1, 2, 4, 6, -2, 3, 5, 7]\n    # Output : -2\n    # Explanation : If element 3 is greater than element 5, then it's maximum difference is -3.\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # print(arr)\n    # print(len(arr))\n    # print(arr[0])\n    # print(arr[1])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Your code here\n    \n    # Use the built in function abs() to find the absolute difference\n    # In this exercise, you'll use the built-in function abs() function to find the absolute difference of two numbers.\n    # For example, abs(2) = 2 and abs(-5) = 2\n    \n    # You'll notice that Python is very sensitive to the order of the inputs. If the inputs are in the order that they're given, you'll notice that it\u2019s safe to assume that the inputs are in the order they are given.\n    # \n    # For example, if you want to find the minimum difference between two numbers, you\u2019ll do the following:\n    # \n    #     >>> max_Abs_Diff([2, 4, -5, 8, -9, 2])\n    #     5\n    #     >>> max_Abs_Diff([-7, -9, -3, -5, 6, -2, -3])\n    #     -9\n    #     >>> max_Abs_Diff([-7, -9, -3, -5, 6, -2, -3])\n    #     0\n    #     >>> max_Abs_Diff([2, 4, -5, 8, -9, 2])\n    #     0\n    #     \n    # Here are the key ideas for getting the absolute difference:\n    # - use a counter (num_abs_diff) so that you don't have to iterate over the entire array in every function call\n    # - use a nested loop to find the maximum and minimum absolute differences\n    # - add the calculated maximum and minimum absolute differences to a local variable\n    # \n    # Note that the built-in function abs() does not have any output values; it simply returns the absolute value of the number.\n    #\n    # Bonus: use the built-in function max() to find the maximum absolute difference\n    # Note that the built-in function max() does not have any output values; it simply returns the absolute value of the number.\n    \n    # Use the built-in function max()\n    \n    # return max(abs(2), abs(-5))\n    num_abs_diff = 0\n    for i in range(0, len(arr)):\n        num_abs_diff = max(num_abs_diff, abs(arr[i] - arr[i-1]))\n    return num_abs_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        if a*i + b == n:\n            return (i, i+1)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    if a == 0 and b == 0:\n        x, y = 0, 1\n    else:\n        try:\n            x, y = _find_solution(a, b, n//a)\n        except:\n            return None\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if a < 0 or b < 0:\n        return None\n    \n    if a == b:\n        return a, b\n    \n    x_a, y_a = find_solution(a // 10, b // 10, n)\n    x_b, y_b = find_solution(a % 10, b % 10, n)\n    \n    return x_a, x_b, y_a, y_b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 0\n    for i in range(1, n):\n        x = i * a\n        y = (i - 1) * b\n        if (x + y) % n == 0:\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a * b == n:\n        return (a, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        if n % b == 0:\n            return (1, int(n/b))\n        else:\n            return None\n    if b == 0:\n        if a == 0:\n            return None\n        if n % a == 0:\n            return (int(n/a), 1)\n        else:\n            return None\n    if a * a > n:\n        return None\n    if a * b > n:\n        return None\n    if n % a == 0:\n        return (int(n/a), 1)\n    if n % b == 0:\n        return (int(n/b), 1)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return a, b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if n == 0:\n        return x, y\n    if n % 2!= 0:\n        return None\n    for i in range(n//2):\n        x, y = find_solution(a,b,n//2-i)\n        if x!= None and x > b:\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    i = 0\n    while True:\n        if find_solution_recursive(i, a, n):\n            x, y = find_solution_recursive(i, a, n)\n            return x, y\n        i += 1\n        if i > n:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.clear()\n    list2.clear()\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l1 = list1\n    l2 = list2\n    for i in l1:\n        try:\n            l2.remove(i)\n        except ValueError:\n            pass\n    return l2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for index in range(len(list2)):\n        list1.remove(list2[index])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if not list1 or not list2:\n        return \"Empty List\"\n    return list2.pop(list1.index(list2[-1]))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    count=0\n    for i in list1:\n        count+=1\n    print(count)\n    print(list1)\n    for i in range(count):\n        list1.pop()\n        print(list1)\n    print(list2)\n    \n    \nlist1=[\"a\", \"b\", \"c\", \"d\", \"e\"]\nlist2=[\"a\", \"b\", \"c\"]\nremove_elements(list1, list2"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1==None or list2==None:\n        return\n    elif list1==[] or list2==[]:\n        return \n    elif len(list1)>len(list2):\n        # Iterate the given list\n        for x in range(len(list2)):\n            # Get the index of the element\n            index = list2.index(list1[x])\n            # Delete the element of the given index\n            del list2[index]\n        return list2\n    elif len(list1)<len(list2):\n        # Iterate the given list\n        for x in range(len(list1)):\n            # Get the index of the element\n            index = list1.index(list2[x])\n            # Delete the element of the given index\n            del list1[index]\n        return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    print(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] not in list2:\n                list1.pop(i)\n        return list1\n    else:\n        print(\"Invalid Input\")\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # begin sum with zero\n    res = 0\n    for i in range(0, n + 1):\n        res += i\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # When we know the total of the numbers in an array and we want to know its sum, we need to keep the starting point of the summation\n    if n == 1:\n        return n\n    # We will calculate the sum starting from the end of the array\n    else:\n        return sum_series(n-1) + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<=1:\n        return n\n    else:\n        return (n+sum_series(n-2))+(sum_series(n-4))\n        "
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sum(n, i):\n        return i + (n - i)\n    \n    return sum(n, 0)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    sum = 0\n    for i in range(n//2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n        \ndef remove_rep(array, n):\n    '''\n    Write a function to remove repeated elements in an array.\n    '''\n    if n <= 0:\n        return []\n    else:\n        tmp = array[n]\n        i = n\n        while i > 0:\n            if array[i] == tmp:\n                array[i] = array[i-1]\n                i -= 1\n            else:\n                i -= 1\n        return array\n        \ndef sort_list(list):\n    '''\n    Write a function to sort a list.\n    '''\n    if len(list) < 2:\n        return list\n    else:\n        mid = len(list)//2\n        if list[mid] < list[mid+1]:\n            return list[mid]\n        else:\n            return list[mid+1]\n            \ndef add_double(array, n):\n    '''\n    Write a function that adds the double of an array until len(array) <= n.\n    '''\n    if n <= 0:\n        return []\n    else:\n        if len(array) <= n:\n            return array\n        else:\n            i = len(array)\n            while i > 0:\n                if array[i] < array[i-1]:\n                    array[i] = array[i-1]\n                    i -= 2\n                else:\n                    i -= 1\n            return array\n        \ndef sum_double(array):\n    '''\n    Write a function that takes an array and returns its double.\n    '''\n    if len(array) < 1:\n        return []\n    else:\n        i = len(array)\n        sum = 0\n        while i > 0:\n            if array[i] < array[i-1]:\n                sum += array[i]\n            else:\n                sum += array[i]\n                i -= 2\n        return sum\n        \ndef greater_than(a,b):\n    '''\n    Write a function that returns whether the list a is greater than the list b.\n    '''\n    if a[-1] < b[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    if n==0:\n        return 0\n    else:\n        return n-2*(n-2)+(n-4)\n    \n    return n-2*(n-2)+(n-4)\n    \nprint(sum_series(5))\n    \n    \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return n - (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2, n - 2, -2):\n        s += i\n    return s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Area of a regular polygon\n    return s*(4/3)*(l**3)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if type(s)!= int or s < 0:\n        raise Exception('Argument must be a positive integer')\n    if type(l)!= int or l < 0:\n        raise Exception('Argument must be a positive integer')\n    area = 2 * (s * l)\n    return area\ndef square(s):\n    '''\n    Write a function to find the area of a square given the side of a rectangle.\n    '''\n    if type(s)!= int or s < 0:\n        raise Exception('Argument must be a positive integer')\n    area = s * s\n    return area\ndef circle(s):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    if type(s)!= int or s < 0:\n        raise Exception('Argument must be a positive integer')\n    area = pi * s * s\n    return area\ndef triangle(s):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    if type(s)!= int or s < 0:\n        raise Exception('Argument must be a positive integer')\n    base = sqrt(s)\n    height = sqrt(s)\n    area = pi * base * height\n    return area\ndef is_triangle(p):\n    '''\n    Write a function to check whether a point is a triangle.\n    '''\n    if type(p)!= tuple or len(p)!= 2 or type(p[0])!= int or type(p[1])!= int:\n        raise Exception('Argument must be a tuple of two ints')\n    if is_right_angled(p):\n        return True\n    return is_right_angled(p) and is_left_angled(p)\ndef is_left_angled(p):\n    '''\n    Write a function to check whether a point is a left-angled triangle.\n    '''\n    return p[1] == 0 and type(p[0])!= int\ndef is_right_angled(p):\n    '''\n    Write a function to check whether a point is a right-angled triangle.\n    '''\n    return p[0] == 0 and type(p[1])!= int\ndef is_square(p):\n    '''\n    Write a function to check whether a point is a square.\n    '''\n    return p[0]**2 == p[1]**2\ndef is_circle(p):\n    '''\n    Write a function to check whether a point is a circle.\n    '''\n    return p[1]**2 == p[0]**2\ndef is_triangle_p(p):\n    '''\n    Write a function to check whether a point is a triangle-p.\n    '''\n    return is_triangle(p) and type(p) == tuple and len(p) == 2\ndef is_square_p(p):\n    '''\n    Write a function to check whether a point is a square-p.\n    '''\n    return is_square(p) and type(p) == tuple and len(p) == 1\ndef is_circle_p(p):\n    '''\n    Write a function to check whether a point is a circle-p.\n    '''\n    return is_circle(p) and type(p) == tuple and len(p) == 1\ndef is_right_angled_square(p):\n    '''\n    Write a function to check whether a point is a right-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_square_p(p) and type(p) == tuple and len(p) == 2\ndef is_left_angled_square(p):\n    '''\n    Write a function to check whether a point is a left-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_square_p(p) and type(p) == tuple and len(p) == 2\ndef is_right_angled_circle(p):\n    '''\n    Write a function to check whether a point is a right-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_circle_p(p) and type(p) == tuple and len(p) == 1\ndef is_left_angled_circle(p):\n    '''\n    Write a function to check whether a point is a left-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_circle_p(p) and type(p) == tuple and len(p) == 1\ndef is_right_angled_square_p(p):\n    '''\n    Write a function to check whether a point is a right-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_square_p(p) and type(p) == tuple and len(p) == 2\ndef is_left_angled_square_p(p):\n    '''\n    Write a function to check whether a point is a left-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_square_p(p) and type(p) == tuple and len(p) == 2\ndef is_right_angled_circle_p(p):\n    '''\n    Write a function to check whether a point is a right-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_circle_p(p) and type(p) == tuple and len(p) == 2\ndef is_left_angled_circle_p(p):\n    '''\n    Write a function to check whether a point is a left-angled triangle-p.\n    '''\n    return is_right_angled(p) and is_circle_p(p) and type(p) == tuple and len(p) == 2\ndef is_square_parallelogram(p):\n    '''\n    Write a function to check whether a point is a square-parallelogram.\n    '''\n    return is_square(p) and is_parallel(p) and type(p) == tuple and len(p) == 2\ndef is_circle_parallelogram(p):\n    '''\n    Write a function to check whether a point is a circle-parallelogram.\n    '''\n    return is_square(p) and is_parallel(p) and type(p) == tuple and len(p) == 2\ndef is_parallel(p):\n    '''\n    Write a function to check whether a point is a parallelogram.\n    '''\n    return p[1] == 0 and type(p[0])!= int\ndef is_triangle_parallelogram(p):\n    '''\n    Write a function to check whether a point is a triangle-parallelogram.\n    '''\n    return is_triangle(p) and is_parallel(p) and type(p) == tuple and len(p) == 3\ndef is_square_parallelogram(p):\n    '''\n    Write a function to check whether a point is a square-parallelogram.\n    '''\n    return is_square(p) and is_parallel(p) and type(p) == tuple and len(p) == 3\ndef is_circle_parallelogram(p):\n    '''\n    Write a function to check whether a point is a circle-parallelogram.\n    '''\n    return is_square(p) and is_parallel(p) and type(p) == tuple and len(p) == 3\ndef is_left_parallelogram(p):\n    '''\n    Write a function to check whether a point is a left-parallelogram.\n    '''\n    return is_right_parallelogram(p) and is_parallel(p) and type(p) == tuple and len(p) == 3\ndef is_right_parallelogram(p):\n    '''\n    Write a function to check whether a point is a right-parallelogram.\n    '''\n    return is_right_parallelogram(p) and is_parallel(p) and type(p) == tuple and len(p) == 3\ndef is_right_angled_square_parallelogram(p):\n    '''\n    Write a function to check whether a point is a right-angled triangle-parallelogram.\n    '''\n    return is_right_angled(p) and is_parallel(p) and type(p) == tuple and len(p"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    for i in range(s):\n        l += 2\n        print(i, l)\n        if i == 0:\n            print(i, l)\n    return (4 * l) / 3\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(0, len(s)):\n        area += l * s[i]\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l * (s * 1.5)\n    print (a)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s**2\n    for i in range(1,l):\n        a += s\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    sum = 0\n    for i in range(len(l)):\n        sum += l[i]*tan(pi/len(l))\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for side in s:\n        a += side\n    return (a / len(s)) * l**2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s<=l:\n        return s*l\n    else:\n        return 2*l*s*tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l=float(l)\n    area=l*(l+1)/2\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # write your code here\n    count = 0\n    for x in range(1,int(n)+1):\n        if n%x==0:\n            count+=1\n    return count==n\n    \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(n + 1)] \n    for i in range(2, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            divisors[i] = 0 \n            divisors[n//i] = 0\n            divisors[n//i + n%i] = 0\n    if divisors[int(n/2)] == 0 and divisors[int(n/2) + n%2] == 0: \n        return True \n    else: \n        return False \nn = int(input())\nif div_sum(n) == True:\n    print(\"Yes\") \nelse: \n    print(\"No\") \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0: \n        return \"0 is not divisible by zero\"\n    elif n == 1: \n        return \"1 is not divisible by zero\"\n    else: \n        s = 0\n        for x in range(2, int(math.sqrt(n)) + 1): \n            if n % x == 0: \n                s += x \n                if x == int(math.sqrt(n)): \n                    return \"the sum of the divisors is \"+str(s)\n                else: \n                    return \"the sum of the divisors is \"+str(s) + \" and the index of the divisor is \"+str(x)\n        return \"the sum of the divisors is \"+str(s) + \" and the index of the divisor is \"+str(int(math.sqrt(n))) \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return len(divs) == len(divs)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return -1\n        return n/i\n    \n    \ndef is_prime(n):\n    '''\n    n is a number between 2 and 10\n    returns true if n is a prime number\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if (n % i == 0): \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return True \n    else: \n        return False \n \ndef div_sum_rev(n):\n    '''\n    Write a function that returns the sum of the divisors of an integer. If the sum is 0, \n    return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef divisors(n): \n    '''\n    Write a function that returns the sum of the divisors of an integer. If the sum is 0, \n    return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef multiply_fib(n): \n    '''\n    Write a function that returns the sum of the multiplication of the numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef multiply_fib_rev(n):\n    '''\n    Write a function that returns the sum of the multiplication of the numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp(n): \n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if i == 1: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_rev(n):\n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_rev_dp(n):\n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_rev_dp_rev(n):\n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_rev_dp_rev_dp(n):\n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_dp(n): \n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_dp_rev(n):\n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_dp_rev_dp(n):\n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_dp_rev_dp_rev(n):\n    '''\n    Write a function that returns the sum of the fibonacci numbers in a list. \n    If the sum is 0, return 0.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n: \n        if div_sum_rev(i) == True: \n            sum = sum + i \n            i = i + 1 \n        else: \n            i = i + 1 \n    if sum == n: \n        return sum \n    else: \n        return 0\n \ndef fib_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_dp_d"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # var: the sum of divisors\n    var = 0 \n    # find: the sum of the divisors\n    for i in range(1, n+1):\n        var += i\n    # check: if var is same as sum of divisors\n    return var == n \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    dividend = 1\n    divisor = 2\n    while divisor < n: \n        if n % divisor == 0: \n            dividend = divisor \n            while n % divisor == 0: \n                n = int(n / divisor) \n            return n == 1\n        divisor += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\n        \ndef dig_sum(n): \n    '''\n    Write a function to determine if the sum of the digits of an integer is the same as the digits of n.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    else:\n        for i in range(1,n+1):\n            if i%10==int(math.sqrt(i)):\n                return False\n        return True\ndef isprime(n):\n    '''\n    Check if n is a prime number or not.\n    '''\n    if n==2 or n==3 or n==5:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    elif n%7==0:\n        return False\n    else:\n        for i in range(4,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for x in str1:\n        if x.isalpha():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    lst = []\n    for x in str1:\n        if x.isalpha() == True:\n            lst.append(x)\n    pos = []\n    for x in lst:\n        pos.append(x.lower())\n    pos = list(set(pos))\n    count = 0\n    for x in pos:\n        count = count + str1.count(x)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary of character's position\n    char_dict = {}\n    for i in str1:\n        if i in char_dict.keys():\n            char_dict[i]+=1\n        else:\n            char_dict[i]=1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the positions of the letters.\n    positions = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert to lowercase so that we can count the characters separately\n    lower_case_str1 = str1.lower()\n    \n    # Create the character dictionary\n    char_dictionary = {}\n    \n    for char in lower_case_str1:\n        if char in char_dictionary:\n            char_dictionary[char] += 1\n        else:\n            char_dictionary[char] = 1\n    \n    # Count the characters\n    count = 0\n    for char in char_dictionary:\n        if char_dictionary[char] == 1:\n            count += 1\n    \n    return count\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for c in str1:\n        if c.isupper():\n            if c.lower() in str1.lower():\n                count += 1\n        elif c.islower():\n            if c.upper() in str1.upper():\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i,j=0,0\n    count=0\n    for char in str1:\n        if i==len(str1)-1:\n            i=0\n        if char==str1[i]:\n            i+=1\n        else:\n            j=0\n            while char!=str1[j]:\n                j+=1\n                if j==len(str1):\n                    j=0\n            count+=1\n            i=0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #Start writing your code here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n        \n    return coun"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() == True:\n            count_char = count_char + 1\n    return count_char\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    positions = []\n    for i in range(len(str1)):\n        char = str1[i]\n        if char in alphabet:\n            positions.append(i)\n    return len(positions)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in A:\n        for j in A:\n            if i&j==0:\n                even_pairs+=1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_index=[]\n    for i in A:\n        if i%2==0:\n            odd_index.append(A.index(i))\n    return len(odd_index)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        if A[i] % 2 == 0: \n            count += 1 \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 1:\n        return 0\n    \n    pair = 0\n    \n    for i in range(len(A)):\n        if A[i] & 1 == 0:\n            pair += 1\n    \n    return pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i]&A[j] == 0:\n                counter += 1\n                \n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    x = [i for i in A if i%2 == 0]\n    return len(x)"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] & A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    l = len(A)\n    if l == 0:\n        return 0\n    elif l == 1:\n        return 1\n    else:\n        even_pairs = 0\n        for i in range(l):\n            for j in range(i+1, l):\n                if A[i] ^ A[j] == 0:\n                    even_pairs += 1\n        return even_pairs\nA = [3,1,4,4,2,1]\nprint(find_even_pair(A)"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # your code goes here\n    if len(A) == 0: \n        return 0\n    else:\n        count = 0\n        for i in A:\n            if i % 2!= 0: \n                count += 1\n        return coun"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    power = 2\n    while (power < n): \n        power = power + 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count=0\n    power=1\n    while count<n:\n        if power>2**count:\n            break\n        else:\n            power+=1\n        count+=1\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else:\n        k = 0\n        while n > k:\n            n = n // 2\n            k += 1\n        return k\n    \ndef is_prime(n): \n    '''\n    Write a python function to check if a number is a prime number or not. \n    '''\n    if n <= 1: \n        return False\n    else: \n        for i in range(2, n // 2 + 1): \n            if n % i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n < 1) : \n        return 0\n    elif (n % 2) == 0 : \n        return 1\n    else : \n        return n*next_power_of_2(n-1) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2_power = 0\n    while n!= 0:\n        n = n // 2\n        power_of_2_power += 1\n    return power_of_2_power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    sum = 0\n    while n: \n        num = n % 2\n        sum += num\n        n = n // 2\n    \n    if sum == 0: \n        return 2\n    else: \n        return sum\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    start = 2\n    power = 1\n    while start <= n:\n        if n%start == 0:\n            return n\n        else:\n            start += 1\n        power += 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # i is the index of n in a range\n    i = 1\n    while i**2 <= n:\n        if n % i == 0:\n            return n // i\n        i += 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    sum=1\n    while (sum <= n):\n        sum = sum * 2\n    return sum\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\na=[1,2,1,3,5,5,6,6,9,8,8,8,7,7,7,8,7,7,7,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d=dict()\n    for i in a: \n        if i in d: \n            d[i]+=1\n        else: \n            d[i]=1\n    return len(d)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            freq = freq + 1\n    return freq\ndef test(a): \n    '''\n    Write a function that counts the frequency of each number in a list.\n    '''\n    freq = frequency(a,1)\n    freq = frequency(a,2)\n    freq = frequency(a,3)\n    freq = frequency(a,4)\n    freq = frequency(a,5)\n    print(freq)\ndef main(): \n    test(1,4) \nif __name__ == '__main__': \n    main() "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)): \n        if a[i]==x: \n            count+=1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # create the dictionary\n    # this is going to be a key-value pair\n    # this key must be a number\n    # this value must be a list\n    d = {}\n    # for loop\n    for el in a:\n        # if this el is in the dictionary\n        if el in d:\n            # if this el is in the dictionary, get the number of the occurence\n            d[el] = d[el] + 1\n        else:\n            # otherwise, set it as an integer and increment\n            d[el] = 1\n    # return the number of occurrences of this number\n    return len(d)\n    \n    # this solution is more efficient\n    # or:\n    # return collections.Counter(a)"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            c=c+1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            counter += 1\n    return counter\n    \n    \n    \n    \ndef bubble_sort(a): \n    '''\n    Sort a given list of numbers.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a)-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\n    \n    \n    \ndef selection_sort(a): \n    '''\n    Sort a given list of numbers.\n    '''\n    for i in range(len(a)):\n        min = i\n        for j in range(i+1, len(a)):\n            if a[j] < a[min]:\n                min = j\n        a[i], a[min] = a[min], a[i]\n    return a\n    \n    \n    \ndef merge(a, p, r, q, r_i, r_j): \n    '''\n    Merge a[p,q] into a[r,q]\n    \n    Inputs:\n    - a: list\n    - p: position of first list\n    - q: position of second list\n    - r: position of sorted list\n    - r_i, r_j: merged position\n    '''\n    # IF P, Q ARE SORTED OR A IS SORTED AND P AND Q ARE SORTED, DIFFERENTLY, HANDLE DIFFERENT POSITIONS OF A, P AND Q\n    if r_i == r_j:\n        return\n    # IF A IS SORTED AND P AND Q ARE SORTED, DIFFERENTLY, HANDLE DIFFERENT POSITIONS OF A, P AND Q\n    elif r_i < r_j:\n        # IF P IS SORTED AND Q IS SORTED, THEN P AND Q ARE SORTED\n        if r_i < r_j:\n            temp = a[p]\n            a[p] = a[r]\n            a[r] = temp\n        # IF P IS NOT SORTED AND Q IS SORTED, THEN P AND Q ARE SORTED\n        else:\n            temp = a[q]\n            a[q] = a[r_j]\n            a[r_j] = temp\n    # IF A IS NOT SORTED AND P AND Q ARE SORTED, DIFFERLY, HANDLE DIFFERENT POSITIONS OF A, P AND Q\n    elif r_i > r_j:\n        # IF P IS SORTED AND Q IS SORTED, THEN P AND Q ARE SORTED\n        if r_i > r_j:\n            temp = a[r]\n            a[r] = a[p]\n            a[p] = temp\n        # IF P IS NOT SORTED AND Q IS SORTED, THEN P AND Q ARE SORTED\n        else:\n            temp = a[q]\n            a[q] = a[r_j]\n            a[r_j] = temp\n    \n    # IF P AND Q ARE SORTED AND A IS SORTED AND P AND Q ARE SORTED, DIFFERENTLY, HANDLE DIFFERENT POSITIONS OF A, P AND Q\n    elif r_i == r_j:\n        if r_i < r_j:\n            temp = a[p]\n            a[p] = a[r]\n            a[r] = temp\n        elif r_i > r_j:\n            temp = a[q]\n            a[q] = a[r_j]\n            a[r_j] = temp\n    # IF A IS SORTED AND P AND Q ARE SORTED, DIFFERLY, HANDLE DIFFERENT POSITIONS OF A, P AND Q\n    elif r_i > r_j:\n        if r_i > r_j:\n            temp = a[p]\n            a[p] = a[r]\n            a[r] = temp\n        elif r_i < r_j:\n            temp = a[q]\n            a[q] = a[r_j]\n            a[r_j] = temp\n            \ndef merge_sort(a): \n    '''\n    Sort a given list of numbers.\n    '''\n    if len(a) == 1:\n        return a\n    \n    middle = int(len(a)/2)\n    left = a[:middle]\n    right = a[middle:]\n    \n    left_sort = merge_sort(left)\n    right_sort = merge_sort(right)\n    \n    return merge(left_sort, middle, right_sort, 0, len(left_sort), len(right_sort))\n    \n    \ndef quick_sort(a): \n    '''\n    Sort a given list of numbers.\n    '''\n    if len(a) <= 1:\n        return a\n    \n    p = len(a)//2\n    left = quick_sort(a[:p])\n    right = quick_sort(a[p:])\n    return merge(left, 0, right, len(a)-1, 0, len(a)-1)\n    \ndef quick_sort_recursive(a): \n    '''\n    Sort a given list of numbers.\n    '''\n    if len(a) <= 1:\n        return a\n    \n    p = len(a)//2\n    left = quick_sort_recursive(a[:p])\n    right = quick_sort_recursive(a[p:])\n    return merge(left, 0, right, len(a)-1, 0, len(a)-1)\n    \ndef quick_sort_inplace(a): \n    '''\n    Sort a given list of numbers.\n    '''\n    if len(a) <= 1:\n        return a\n    \n    p = len(a)//2\n    left = quick_sort_inplace(a[:p])\n    right = quick_sort_inplace(a[p:])\n    return merge(left, 0, right, len(a)-1, 0, len(a)-1)\n    \ndef quick_sort_count(a, count=0):\n    '''\n    Sort a given list of numbers.\n    '''\n    if len(a) <= 1:\n        return a\n    \n    p = len(a)//2\n    left = quick_sort_count(a[:p], count+1)\n    right = quick_sort_count(a[p:], count+1)\n    return merge(left, 0, right, len(a)-1, 0, len(a)-1)\n    \ndef count_sort(a): \n    '''\n    Sort a given list of numbers.\n    '''\n    sorted_array = []\n    for i in range(len(a)):\n        count = 0\n        for j in range(len(a)):\n            if a[i] == a[j]:\n                count += 1\n        sorted_array.append(count)\n    count = 0\n    for i in range(len(a)):\n        a[i] = sorted_array[count]\n        count += 1\n    return a\n    \n    \ndef count_sort_count(a, count=0):\n    '''\n    Sort a given list of numbers.\n    '''\n    sorted_array = []\n    for i in range(len(a)):\n        count = 0\n        for j in range(len(a)):\n            if a[i] == a[j]:\n                count += 1\n        sorted_array.append(count)\n    count = 0\n    for i in range(len(a)):\n        a[i] = sorted_array[count]\n        count += 1\n    return a\n    \ndef print_list(a): \n    '''\n    Print a given list of numbers.\n    '''\n    for i in range(len(a)):\n        print(a[i], end ='')\n    print()\n    \n    \ndef test():\n    print(\"\\nOriginal List\")\n    print_list(a)\n    print()\n    print(\"Sorted List\")\n    print_list(a)\n    print()\n    print(\"Count\")\n    print_list(a)\n    print("
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    ans = 0\n    for i in a:\n        if i == x:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for item in a:\n        if item == x:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n                                if \"short\":\n                                        f.write(line)"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_num = 0\n    for x in range(m, n):                                                                                                                                                                                        \n        sum_num += list1[x]\n    return sum_num\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n+1):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    l = []\n    for i in range(m-1, n):\n        l.append(list1[i])\n    sum = 0\n    for i in l:\n        sum += i\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n+1):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return -1\n    elif m == n:\n        return list1[m]\n    elif n > m:\n        return -1\n    elif m + 1 == n:\n        return sum(list1[m:n])\n    elif m + 1 < n:\n        return sum_range_list(list1, m + 1, n)\n    "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    if m < len(list1) and n < len(list1):\n        sum -= list1[m]\n        sum -= list1[n]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Define a constant\n    constant = math.sqrt(2)\n    #Get a side of the square\n    side = (a*constant)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = 0\n    if a == 0:\n        return l\n    for i in range(0, 3):\n        l += a\n    return l\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # your code goes here\n    return 0.5 * a * math.sqrt(3)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    P = ((4 * a)**0.5)\n    print (\"The perimeter of a regular pentagon is: \", P)\n    return P\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4*a*math.sqrt(3))/5\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a <= 0:\n        return False\n    elif a == 1:\n        return 0\n    else:\n        return (3.14 * a) + (4 * math.pow(a, 2) * (3.14 * (4 - a) / 3))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = a * 1.5\n    return math.sqrt(a ** 2 + a ** 4)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides=[]\n    for i in range(1,a+1):\n        sides.append(i*i)\n    return(sum(sides))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = math.sqrt(3) * a\n    return round(sides,1)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return round(a * math.sqrt(3),1)\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle given the radius r.\n    '''\n    pi = math.pi\n    return round(math.pi * (r**2),1)\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square given the side of a square.\n    '''\n    return round(math.pow(a, 2),1)\ndef area_of_pentagon(a):\n    '''\n    Write a function to find the area of a pentagon given the side of a pentagon.\n    '''\n    return round(math.pow(a, 0.5),1)\ndef area_of_regular_square(a):\n    '''\n    Write a function to find the area of a regular square given the side of a square.\n    '''\n    return round(math.pow(a, 0.5),1)\ndef area_of_regular_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon given the side of a pentagon.\n    '''\n    return round(math.pow(a, 0.5),1)\ndef area_of_regular_circle(r):\n    '''\n    Write a function to find the area of a regular circle given the radius r.\n    '''\n    return round(math.pow(r, 2),1)\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    return round(a * b,1)\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    return round(a * b * c,1)\ndef area_of_cube(a):\n    '''\n    Write a function to find the area of a cube given its base.\n    '''\n    return round(math.pow(a, 3),1)\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere given its radius r.\n    '''\n    return round(3 * math.pi * r**3,1)\ndef area_of_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse given its major and minor axis.\n    '''\n    return round(2 * math.pi * a * b,1)\ndef area_of_paraboloid(r):\n    '''\n    Write a function to find the area of a paraboloid given its radius r.\n    '''\n    return round(1/math.sqrt(1-r**2),1)\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle given its radius r.\n    '''\n    return round(math.pi * (r**2),1)\ndef area_of_triangle_area(a,b):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    return round(a * b,1)\ndef area_of_trapezoid(a,b):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    return round(a * (b/2),1)\ndef area_of_square_area(a):\n    '''\n    Write a function to find the area of a square given its length and width.\n    '''\n    return round(math.pow(a,2),1)\ndef area_of_pentagon_area(a):\n    '''\n    Write a function to find the area of a pentagon given its length and width.\n    '''\n    return round(math.pow(a, 0.5),1)\ndef area_of_regular_square_area(a):\n    '''\n    Write a function to find the area of a regular square given its length and width.\n    '''\n    return round(math.pow(a, 0.5),1)\ndef area_of_regular_pentagon_area(a):\n    '''\n    Write a function to find the area of a regular pentagon given its length and width.\n    '''\n    return round(math.pow(a, 0.5),1)\ndef area_of_regular_circle_area(r):\n    '''\n    Write a function to find the area of a regular circle given its radius r.\n    '''\n    return round(math.pow(r, 2),1)\ndef area_of_circle_area(r):\n    '''\n    Write a function to find the area of a circle given its radius r.\n    '''\n    return round(math.pow(r, 2),1)\ndef area_of_circle_area_3(r):\n    '''\n    Write a function to find the area of a circle given its radius r.\n    '''\n    return round(r**3,1)\ndef area_of_rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    return round(a * b,1)\ndef area_of_rectangle_area_3(a,b):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    return round(a * b,1)\ndef area_of_circle_area_3(r):\n    '''\n    Write a function to find the area of a circle given its radius r.\n    '''\n    return round(math.pi * (r**2),1)\ndef area_of_square_area_3(a):\n    '''\n    Write a function to find the area of a square given its length and width.\n    '''\n    return round(math.pow(a, 2),1)\ndef area_of_rectangle_area_3(a,b):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    return round(a * b,1)\ndef area_of_rectangle_area_4(a,b):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    return round(a * b,1)\ndef area_of_square_area_4(a):\n    '''\n    Write a function to find the area of a square given its length and width.\n    '''\n    return round(math.pow(a, 2),1)\ndef area_of_square_area_4_3(a):\n    '''\n    Write a function to find the area of a square given its length and width.\n    '''\n    return round(a * math.sqrt(3),1)\ndef area_of_triangle_area_4(a,b):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    return round(a * (b/2),1)\ndef area_of_triangle_area_4_3(a,b):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    return round(a * (b/2),1)\ndef area_of_square_area_4_3(a,b):\n    '''\n    Write a function to find the area of a square given its length and width.\n    '''\n    return round(math.pow(a, 2),1)\ndef area_of_triangle_area_4_4(a,b):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    return round(a * (b/2),1)\ndef area_of_pentagon_area_4(a,b):\n    '''\n    Write a function to find the area of a pentagon given its length and width"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter=0\n    if a==0:\n        return 0\n    for i in range(0,6):\n        if i==0:\n            perimeter+=math.sqrt(3)*a*a\n        elif i==1:\n            perimeter+=math.sqrt(3)*a*a*(i+1)\n        elif i==2:\n            perimeter+=math.sqrt(3)*a*a*(i+1)*(i+2)\n        else:\n            perimeter+=math.sqrt(3)*a*a*(i+1)*(i+2)*(i+3)\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    dic = dict()\n    for i in s:\n        if i not in dic:\n            dic[i] = 0\n        dic[i] += 1\n    return len(dic)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = len(s)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    dic = {s[i]: 0 for i in range(l)}\n    dic[s[0]] += 1\n    for i in range(1, l):\n        dic[s[i]] += 1\n        if s[i] == 'd':\n            dic[s[i-1]] += 1\n    return dic[s[0]]\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return(s.count('std'))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurances = 0\n    for i in range(len(s)):\n        if s[i] == 'o':\n            occurances += 1\n    return(occurances)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = 0\n    for char in s:\n        if char =='std':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    d = {}\n    for i in s:\n        if i =='std':\n            d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    my_list = [\"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"]\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] =='':\n            cnt += 1\n    my_list[0] = s[0:cnt]\n    my_list[1] = s[cnt:len(s)]\n    my_list[2] = s[len(s)-cnt:len(s)]\n    my_list[3] = s[len(s)-cnt-1:]\n    return my_list\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    if(s == \"std\"):\n        count = 1\n    else:\n        for i in range(len(s)):\n            if(s[i] =='s'):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if (type(test_tuple[0]) == type(str())):\n        print(\"\\nTuple in check_type function has non-string type\")\n    else:\n        return (True)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t_list = []\n    for index, item in enumerate(test_tuple):\n        if type(item) is not tuple:\n            return False\n        if len(item)!= len(test_tuple[index]):\n            return False\n        else:\n            t_list.append(item)\n    return t_list\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(el)==test_tuple[1] for el in test_tuple[0])\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) % 2 == 0:\n        for i in range(len(test_tuple)):\n            test_tuple[i] = float(test_tuple[i])\n    else:\n        for i in range(len(test_tuple)):\n            if not type(test_tuple[i]) is int:\n                print(\"Enter valid value\")\n                return check_type(test_tuple)\n            else:\n                continue\n    return test_tuple\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= str and type(i)!= bool:\n            print('\\nERROR: The data type of input element is not correct!')\n            print('\\tYour input data type is: {}. '.format(type(i)))\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple_list = [test_tuple[i] for i in range(len(test_tuple))]\n    if (len(set(test_tuple_list))) == len(test_tuple_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for element in test_tuple:\n        if isinstance(element, int) or isinstance(element, float):\n            continue\n        else:\n            print(\"The data type of the element is not supported\")\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    '''\n    In Python, it has built-in function len() to return the length of a given list.\n    It also has a built-in function round() which rounds a number to a given number of decimal places.\n    '''\n    # '''\n    # Create a list with each element having a different data type.\n    # '''\n    # #Test cases\n    # #1. Lists are different\n    # #2. Lists have different data type\n    # #3. Lists have different data type\n    # #4. Lists have different data type\n    # #5. Lists have different data type\n    # #6. Lists have different data type\n    # #7. Lists have different data type\n    # #8. Lists have different data type\n    # #9. Lists have different data type\n    # #10. Lists have different data type\n    # #11. Lists have different data type\n    # #12. Lists have different data type\n    # #13. Lists have different data type\n    # #14. Lists have different data type\n    # #15. Lists have different data type\n    # #16. Lists have different data type\n    # #17. Lists have different data type\n    # #18. Lists have different data type\n    # #19. Lists have different data type\n    # #20. Lists have different data type\n    # #21. Lists have different data type\n    # #22. Lists have different data type\n    # #23. Lists have different data type\n    # #24. Lists have different data type\n    # #25. Lists have different data type\n    # #26. Lists have different data type\n    # #27. Lists have different data type\n    # #28. Lists have different data type\n    # #29. Lists have different data type\n    # #30. Lists have different data type\n    # #31. Lists have different data type\n    # #32. Lists have different data type\n    # #33. Lists have different data type\n    # #34. Lists have different data type\n    # #35. Lists have different data type\n    # #36. Lists have different data type\n    # #37. Lists have different data type\n    # #38. Lists have different data type\n    # #39. Lists have different data type\n    # #40. Lists have different data type\n    # #41. Lists have different data type\n    # #42. Lists have different data type\n    # #43. Lists have different data type\n    # #44. Lists have different data type\n    # #45. Lists have different data type\n    # #46. Lists have different data type\n    # #47. Lists have different data type\n    # #48. Lists have different data type\n    # #49. Lists have different data type\n    # #50. Lists have different data type\n    # #51. Lists have different data type\n    # #52. Lists have different data type\n    # #53. Lists have different data type\n    # #54. Lists have different data type\n    # #55. Lists have different data type\n    # #56. Lists have different data type\n    # #57. Lists have different data type\n    # #58. Lists have different data type\n    # #59. Lists have different data type\n    # #60. Lists have different data type\n    # #61. Lists have different data type\n    # #62. Lists have different data type\n    # #63. Lists have different data type\n    # #64. Lists have different data type\n    # #65. Lists have different data type\n    # #66. Lists have different data type\n    # #67. Lists have different data type\n    # #68. Lists have different data type\n    # #69. Lists have different data type\n    # #70. Lists have different data type\n    # #71. Lists have different data type\n    # #72. Lists have different data type\n    # #73. Lists have different data type\n    # #74. Lists have different data type\n    # #75. Lists have different data type\n    # #76. Lists have different data type\n    # #77. Lists have different data type\n    # #78. Lists have different data type\n    # #79. Lists have different data type\n    # #80. Lists have different data type\n    # #81. Lists have different data type\n    # #82. Lists have different data type\n    # #83. Lists have different data type\n    # #84. Lists have different data type\n    # #85. Lists have different data type\n    # #86. Lists have different data type\n    # #87. Lists have different data type\n    # #88. Lists have different data type\n    # #89. Lists have different data type\n    # #90. Lists have different data type\n    # #91. Lists have different data type\n    # #92. Lists have different data type\n    # #93. Lists have different data type\n    # #94. Lists have different data type\n    # #95. Lists have different data type\n    # #96. Lists have different data type\n    # #97. Lists have different data type\n    # #98. Lists have different data type\n    # #99. Lists have different data type\n    # #100. Lists have different data type\n    # #101. Lists have different data type\n    # #102. Lists have different data type\n    # #103. Lists have different data type\n    # #104. Lists have different data type\n    # #105. Lists have different data type\n    # #106. Lists have different data type\n    # #107. Lists have different data type\n    # #108. Lists have different data type\n    # #109. Lists have different data type\n    # #110. Lists have different data type\n    # #111. Lists have different data type\n    # #112. Lists have different data type\n    # #113. Lists have different data type\n    # #114. Lists have different data type\n    # #115. Lists have different data type\n    # #116. Lists have different data type\n    # #117. Lists have different data type\n    # #118. Lists have different data type\n    # #119. Lists have different data type\n    # #120. Lists have different data type\n    # #121. Lists have different data type\n    # #122. Lists have different data type\n    # #123. Lists have different data type\n    # #124. Lists have different data type\n    # #125. Lists have different data type\n    # #126. Lists have different data type\n    # #127. Lists have different data type\n    # #128. Lists have different data type\n    # #129. Lists have different data type\n    # #130. Lists have different data type\n    # #131. Lists have different data type\n    # #132. Lists have different data type\n    # #133. Lists have different data type\n    # #134. Lists have different data type\n    # #135. Lists have different data type\n    # #136. Lists have different data type\n    # #137. Lists have different data type\n    # #138. Lists have different data type\n    # #139. Lists have different data type\n    # #140. Lists have different data type\n    # #141. Lists have different data type\n    # #142. Lists have different data type\n    # #143. Lists have different data type\n    # #144. Lists have different data type\n    # #145. Lists have different data type\n    # #146. Lists have different data type\n    # #147. Lists have different data type\n    # #148. Lists have different data type\n    # #149. Lists have different data type\n    # #150. Lists have different data type\n    # #151. Lists have different data type\n    # #152. Lists have different data type\n    # #153. Lists have different data type\n    # #154. Lists have different data type\n    # #155. Lists have different data type\n    # #156. Lists have different data type\n    # #157. Lists have different data type\n    # #158. Lists have different data type\n    # #159. Lists have different data type\n    # #160. Lists have different data type\n    # #161. Lists have different data type\n    # #162. Lists have different data type\n    # #163. Lists have different data type\n    # #164. Lists have different data type\n    # #165. Lists have different data type\n    # #166. Lists have different data type\n    # #167. Lists have different data type\n    # #168. Lists have different data type\n    # #169. Lists have different data type\n    # #170. Lists have different data type\n    # #171. Lists have different data type\n    # #172. Lists have different data type\n    # #173. Lists have different data type\n    # #174. Lists have different data type\n    # #175. Lists have different data type\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_tuple = test_tuple[0]\n    for element in test_tuple:\n        if type(first_tuple)!= type(element):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for test in test_tuple:\n        if isinstance(test, (float, int)):\n            pass\n        else:\n            print(\"not_type\")\n    return test_tuple\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n==1:\n        return arr[0] == x\n    mid = n//2\n    if arr[mid] == x:\n        return True\n    if arr[mid]>x:\n        return is_majority(arr[mid+1:], n-mid, x)\n    else:\n        return is_majority(arr[:mid], n-mid, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # A solution can be made using a boolean condition.\n    if n==1 or len(arr)==1:\n        return True\n    # If the condition is met, we can return the boolean result.\n    if arr[0]==x:\n        return True\n    # We are going to compare the next element.\n    next_element = arr[1:n-1]\n    # If the array is sorted, we can return the boolean result.\n    if sorted(arr[1:n-1])==next_element:\n        return True\n    # If the array is not sorted, we can return the boolean result.\n    return is_majority(arr[n-1:], n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Base case\n    if len(arr) == 1:\n        return arr[0] == x\n    \n    # Find the index of the element with the majority element\n    index = find_majority(arr, n, x)\n    \n    # Check if the element with the index is also the majority element\n    if arr[index] == x:\n        return True\n    \n    # If not, find the indexes of the elements with the largest numbers\n    # that are closer to the majority element than the element\n    return is_majority(arr[:index + 1], n, x) or is_majority(arr[index + 1:], n, x)\n    \ndef find_majority(arr, n, x):\n    '''\n    Find the index of the majority element for the given array.\n    '''\n    # Find the minimum element in the array\n    minimum = min(arr)\n    \n    # Find the number of occurrences of the minimum element\n    count = arr.count(minimum)\n    \n    # If the minimum element is the majority element, return the index\n    if count == 1:\n        return arr.index(minimum)\n    \n    # If there are multiple occurrences of the minimum element,\n    # return the index with the largest number\n    else:\n        arr.sort()\n        return arr.index(arr[n - 1])\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if x == arr[n - 1]:\n        return True\n    for i in range(0, n - 1):\n        if arr[i] == x and (is_majority(arr, n, x) or is_majority(arr, n - 1, x)):\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # determine if the array is sorted\n    if n <= 1:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif x == arr[n // 2]:\n        return True\n    elif n % 2 == 0:\n        return is_majority(arr, n // 2, x)\n    else:\n        return is_majority(arr, n // 2, x) and is_majority(arr, n // 2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If there is only one element, return true.\n    if len(arr) == 1:\n        return True\n    \n    # If there is no majority element, return false.\n    if len(arr) == 0:\n        return False\n    \n    # Find the majority element.\n    if arr[0] == x:\n        return True\n    \n    # If there is more than one element that is equal to the majority element, return false.\n    if len(arr) > 1:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return is_majority(arr[:i] + arr[i+1:], n, x)\n    \n    # Return false.\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n==1:\n        return True\n    if len(arr)==1:\n        return arr[0]==x\n    index1=0\n    index2=1\n    while index1<n and index2<n:\n        if arr[index1]>x:\n            index2+=1\n        elif arr[index2]>x:\n            index1+=1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n        else:\n            count = 0\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write your code here\n    # DONE\n    if n == 0:\n        return False\n    for i in range(0, n):\n        if arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    i = 0\n    count = 0\n    while(n):\n        if (n & 1):\n            count += 1\n        n >>= 1\n        i += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # input\n    number = input()\n    # process\n    count = 0\n    # output\n    for i in number:\n        if i == '1':\n            count+=1\n    # verify\n    if count >= len(number):\n        print('Error: invalid input.')\n    else:\n        print(count)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    \n    if (n >= 2**(n-1)): # check if the number is negative\n        n = abs(n)\n    \n    if (n < 2**(n-1)): # if the number is not negative\n        count = 0\n        for i in range(1,n+1):\n            if (n % i == 0):\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%2 == 1:\n            count+= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    x = bin(n)[2:]\n    return len(x)\n    \ndef count_0Bits(n):\n    '''\n    Write a python function to count the number of 0 bits (binary digits with value 1) in a given number.\n    '''\n    x = bin(n)[2:]\n    return len(x)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    k = n & (n - 1) # k is a set bit\n    n_bits = bin(n).count('1') \n    print(n_bits, end=\"\")\n    print(\"Bits\")\n    if k == 1:\n        print(\"Bit: 1\")\n    else:\n        print(\"Bit: 0\")\n    # print(\"Bits\", n_bits)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n <= 0:\n        return 0\n    if n <= 7:\n        return 1\n    else:\n        q = 0\n        q = (n//2)-1\n        while q > 0:\n            if n%2 == 0:\n                if n == 1:\n                    return 1\n                else:\n                    q = (q//2)+1\n            else:\n                q = (q//2)-1\n    return 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n!= 0):\n        count += 1 if (n & 1) == 1 else 0\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_data = bin(n)[2:].zfill(16)\n    if len(bin_data) == 32:\n        setbitcount = bin_data.count('1')\n    else:\n        setbitcount = bin_data.count('1') - 1\n    return setbitcount\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return sum(set(bin(n)[2:]).count('1') for n in range(2,n+1))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    evens = []\n    odds = []\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            evens.append(str[i])\n        else:\n            odds.append(str[i])\n    return \"\".join(evens) + \"\".join(odds)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l = []\n    for i in str:\n        if i % 2!= 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert str to list\n    str_list = list(str)\n    # Iterate over list\n    for index in range(len(str_list)):\n        if index % 2 == 0:\n            str_list[index] = str_list[index].lower()\n    # Join the list\n    str_string = \"\".join(str_list)\n    # Return the string\n    return str_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    arr = []\n    for index in range(len(str)):\n        if index % 2 == 0:\n            arr.append(str[index])\n    return arr\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    arr = []\n    for i in range(len(str)):\n        if i%2 == 1:\n            arr.append(str[i])\n    return ''.join(arr)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    c=str.upper()\n    l=c.replace(\" \",\"\")\n    l=l.replace(\"0\",\"\")\n    l=l.replace(\"1\",\"\")\n    l=l.replace(\"2\",\"\")\n    l=l.replace(\"3\",\"\")\n    l=l.replace(\"4\",\"\")\n    l=l.replace(\"5\",\"\")\n    l=l.replace(\"6\",\"\")\n    l=l.replace(\"7\",\"\")\n    l=l.replace(\"8\",\"\")\n    l=l.replace(\"9\",\"\")\n    odd_str=[]\n    for i in l:\n        if i % 2 == 0:\n            odd_str.append(i)\n    odd_str=list(set(odd_str))\n    for i in range(len(odd_str)):\n        c=str.replace(odd_str[i],\"\")\n        c=c.replace(\" \",\"\")\n        c=c.replace(\"0\",\"\")\n        c=c.replace(\"1\",\"\")\n        c=c.replace(\"2\",\"\")\n        c=c.replace(\"3\",\"\")\n        c=c.replace(\"4\",\"\")\n        c=c.replace(\"5\",\"\")\n        c=c.replace(\"6\",\"\")\n        c=c.replace(\"7\",\"\")\n        c=c.replace(\"8\",\"\")\n        c=c.replace(\"9\",\"\")\n        c=c.replace(\" \",\"\")\n        c=c.upper()\n        c=c.replace(\" \",\"\")\n        c=c.replace(\"0\",\"\")\n        c=c.replace(\"1\",\"\")\n        c=c.replace(\"2\",\"\")\n        c=c.replace(\"3\",\"\")\n        c=c.replace(\"4\",\"\")\n        c=c.replace(\"5\",\"\")\n        c=c.replace(\"6\",\"\")\n        c=c.replace(\"7\",\"\")\n        c=c.replace(\"8\",\"\")\n        c=c.replace(\"9\",\"\")\n        c=c.replace(\" \",\"\")\n    c=c.replace(\" \",\"\")\n    return c\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = ''\n    for char in str:\n        if char % 2 == 1:\n            odd_string += char\n    return odd_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(0,len(str),2):\n        if str[i] % 2 == 0:\n            str = str[:i]+str[i+1:]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[:len(str)-1].strip()\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # For loop\n    result = \"\"\n    for i in range(0, len(str)):\n        if i%2!= 0:\n            result += str[i]\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if (a==b):\n        return a\n    if (a==c):\n        return b\n    elif (b==c):\n        return c\n    else:\n        return min_of_three(a,b,c-1)\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c:\n        return a\n    elif a<b<c:\n        return a\n    elif a<c<b:\n        return c\n    else:\n        return b\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        print(a)\n    elif b>a and b>c:\n        print(b)\n    else:\n        print(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # minimum of 3 numbers\n    if a == b and b == c:\n        return b\n    elif a == b or a == c or b == c:\n        return a\n    else:\n        return min_of_three(a,b,c -1)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if both conditions are false, return 0\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    # if any of the conditions are false, return 0\n    elif a == 0 or b == 0 or c == 0:\n        return 0\n    # if a, b, c are both true, return min(a,b,c)\n    else:\n        return min(a,b,c)\n    "
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b + c and a < b: \n        return a\n    if b < a + c and b < a:\n        return b\n    if c < a + b: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        minimum = a\n    elif b > a and b > c:\n        minimum = b\n    else:\n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    if b>a:\n        if b>c:\n            return b\n        else:\n            return c\n    if c>a:\n        if c>b:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>=l and n<=r:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r > n:\n        print('The range is invalid.')\n    else:\n        for i in range(l,r+1):\n            if i % 2 == 0:\n                if i in range(n):\n                    print(i,end ='')\n                else:\n                    print('0',end ='')\n            else:\n                if i in range(n):\n                    print(i,end ='')\n                else:\n                    print('0',end ='')\n    return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #your code here\n    l=l-n\n    r=r-n\n    for i in range(l,r):\n        if (bit_list[i]==0):\n            return \"False\"\n    return \"True\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return r-l+1  \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    temp=[]\n    for i in range(l,r+1):\n        temp.append(bin(i).replace(\"0b\",\"\"))\n    temp_dic={}\n    for i in temp:\n        temp_dic[i]=int(i,2)\n    return (temp_dic)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your code here\n    lst = []\n    for i in range(n):\n        lst.append(i)\n    lst = list(set(lst))\n    lst.sort()\n    \n    for i in lst:\n        if(i >= l and i <= r):\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if(r<0):\n        r=n-(r+1)\n    if(r>n):\n        r=n-(r-1)\n        \n    if((n&(r<<(n-r)))==(n&(r<<(r+1))==0)):\n        return True\n    else:\n        return False\n    \n    \ndef Number_Of_Bits_In_Range(n,l,r):  \n    '''\n    Write a python function to find the number of bits in the given range or not.\n    '''\n    count=0\n    if(n>=l and n<=r):\n        for i in range(l,r+1):\n            if(all_Bits_Set_In_The_Given_Range(n,l,i)):\n                count+=1\n    else:\n        print(\"Invalid range\")\n        \n    return count\n    \n    \ndef One_Bit_On_Right(n):\n    '''\n    Write a python function to find the number of bits in the given range or not.\n    '''\n    \n    if(n==1):\n        return 0\n    count=0\n    for i in range(2,n):\n        if(n&i==0):\n            count+=1\n        else:\n            break\n    else:\n        return count\n    \n    return count\n    \n    \ndef Number_Of_Bits_In_Range(n,l,r):  \n    '''\n    Write a python function to find the number of bits in the given range or not.\n    '''\n    \n    count=0\n    if(n>=l and n<=r):\n        for i in range(l,r+1):\n            if(One_Bit_On_Right(i)>0):\n                count+=One_Bit_On_Right(i)\n            else:\n                break\n        else:\n            count+=One_Bit_On_Right(r)\n    else:\n        print(\"Invalid range\")\n        \n    return count\n    \n    \ndef Number_Of_Bits_In_Range_Inclusive(n,l,r):\n    '''\n    Write a python function to find the number of bits in the given range or not.\n    '''\n    \n    if(n>=l and n<=r):\n        count=0\n        for i in range(l,r+1):\n            if(n&i==0):\n                count+=One_Bit_On_Right(i)\n            else:\n                break\n        else:\n            count+=One_Bit_On_Right(r)\n    else:\n        print(\"Invalid range\")\n    return count\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>=r:\n        return False\n    mask = (2**n)-1\n    if mask == (2**(n-1)-1):\n        return True\n    return not all_Bits_Set_In_The_Given_Range(n-1,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (r-l+1)%(2**n)==0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(n,l,r)\n    for x in range(n,r+1):\n        for y in range(l,x-1,-1):\n            if (x % 2 == 0):\n                print(y,x)\n            else:\n                print(y,x)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n < 1:\n        return arr\n    return re_arrange_array(arr, n//2) + [(-1 * arr[0])] + re_arrange_array(arr, n//2)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    for i in range(n):\n        if arr[i] >= 0:\n            result.append(arr[i])\n        else:\n            result.append(-arr[i])\n    for i in range(n - 1, -1, -1):\n        if arr[i] >= 0:\n            result[i] = arr[i]\n        else:\n            result[i] = -arr[i]\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return\n    else:\n        arr[:n] = arr[:n] + [-i for i in arr[:n]]\n        arr[:n] = [i for i in arr[:n] if i >= 0]\n        arr[:n] = arr[:n] + [i for i in arr[:n] if i < 0]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1]\n        arr[:n] = arr[:n][::-1"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # do this recursively\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    new_arr = []\n    for i in arr:\n        if i >= 0:\n            new_arr.append(i)\n        else:\n            new_arr.append(abs(i))\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO\n    # convert the array to a list of lists\n    # rearrange elements by adding negative\n    # append positive elements with a negative element\n    # return the re-arranged array\n    # return the original array\n    arr = sorted(arr)\n    result = []\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n        result.append(arr[i])\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Check the array is not empty\n    if len(arr) <= 1:\n        return arr\n    \n    # Sort the array\n    arr.sort()\n    \n    # Get the length of the array\n    n = len(arr)\n    \n    # Sort the array\n    arr = sorted(arr, reverse=True)\n    \n    # First element of array is negative\n    arr[0] = arr[-1] - 1\n    \n    # Create a new array by adding positive elements to the beginning of the original array\n    arr = [0] + arr\n    \n    # Check if the array is balanced\n    return arr\n    \ndef quick_sort_array(arr, n):\n    '''\n    Sort an array and recursively call the quick sort function on each subarray.\n    '''\n    # Check the array is not empty\n    if len(arr) <= 1:\n        return arr\n    \n    # Get the subarray\n    pivot = arr[0]\n    \n    # Create a new array that contains the elements of the subarray after the pivot\n    smaller_array = [i for i in arr[1:] if i <= pivot]\n    \n    # Get the number of elements in the subarray\n    n = len(smaller_array)\n    \n    # Sort the subarray\n    return quick_sort_array(smaller_array, n) + [pivot] + quick_sort_array(arr[1:], n)\n    \ndef quick_sort(arr, n):\n    '''\n    Sort an array and recursively call the quick sort function on each subarray.\n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[0]\n    \n    # Create a new array that contains the elements of the subarray after the pivot\n    smaller_array = [i for i in arr[1:] if i <= pivot]\n    \n    # Get the number of elements in the subarray\n    n = len(smaller_array)\n    \n    # Sort the subarray\n    return quick_sort(smaller_array, n) + [pivot] + quick_sort(arr[1:], n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return\n    if n <= 2:\n        return arr\n    else:\n        a = arr[:n]\n        a.reverse()\n        a.append(arr[n-1])\n        a.sort()\n        arr[:n] = a\n        arr[n-1] = a[0]\n        arr[:n-1] = arr[n-1]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert arr.shape[0] >= n\n    assert len(arr) == arr.shape[0]\n    num_neg = n - len(arr)\n    indices = np.arange(n)\n    indices = indices[np.r_[indices < 0, indices])\n    if num_neg > 0:\n        arr[:num_neg] = -arr[:num_neg]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            for j in range(i, n):\n                arr[j] *= -1\n        if arr[i] > 0:\n            for j in range(i, n):\n                arr[j] += 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #TODO: change this to a proper input/output format\n    return str1.replace(char,\" \")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\").replace(\"\\n\",\"\").replace(\"  \",\"\").replace(\"  \",\"\").replace(\" \",\"\").replace(\"   \",\"\").replace(\"   \",\"\").replace(\"    \",\"\").replace(\"    \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # if the length of the string is one or two characters, this will return an error.\n    if len(str1) == 1:\n        # The blank space character will be'', so it will be replaced with the character given.\n        str1 = str1.replace(' ','')\n        return str1 + str1.replace(' ','')\n    # if there is only two characters, the blank space character will be'', so it will be replaced with the character given.\n    elif len(str1) == 2:\n        # The blank space character will be'', so it will be replaced with the character given.\n        str1 = str1.replace(' ','')\n        # Then the second character will be'' as well.\n        str1 = str1 + str1.replace(' ','')\n        return str1 + str1.replace(' ','')\n    # if there is more than two characters, the blank space character will be'', so it will be replaced with the character given.\n    else:\n        # The blank space character will be'', so it will be replaced with the character given.\n        str1 = str1.replace(' ','')\n        # Then the first character will be'' as well.\n        str1 = str1 + str1.replace(' ','')\n        # Then the second character will be'' as well.\n        str1 = str1 + str1.replace(' ','')\n        # Then the third character will be'' as well.\n        str1 = str1 + str1.replace(' ','')\n        return str1 + str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char in str1:\n        return str1.replace(char,\" \")\n    else:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ',char)\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.strip()\n    if char =='':\n        return str1.replace(' ', char)\n    else:\n        return str1.replace(' ', '{}'.format(char))\n    "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string=str1.replace(\" \",\"\")\n    new_string=new_string.replace(char,\"\")\n    new_string=new_string.replace(\"  \",\"\")\n    return(new_string)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\" \")\n    str1 = str1.replace(\"\\t\",\" \")\n    str1 = str1.replace(\"\\r\",\" \")\n    str1 = str1.replace(\"\\f\",\" \")\n    str1 = str1.replace(\"\\v\",\" \")\n    str1 = str1.replace(\"\\x00\",\" \")\n    str1 = str1.replace(\"\\x00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace(\"\\u00\",\" \")\n    str1 = str1.replace("
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    maxheap=[]\n    for item in list1:\n        heapq.heappush(maxheap,item)\n    ans=[]\n    for i in range(n):\n        ans.append(heapq.heappop(maxheap))\n    return ans\ndef med_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n median items from the list.\n    '''\n    heap=[]\n    for item in list1:\n        heapq.heappush(heap,item)\n    ans=[]\n    for i in range(n):\n        if len(heap)==0:\n            ans.append(heapq.heappop(heap))\n        elif len(heap)==1:\n            ans.append(heapq.heappop(heap))\n        elif len(heap)==2:\n            ans.append(heapq.heappop(heap))\n            ans.append(heapq.heappop(heap))\n        else:\n            d=heapq.heappop(heap)\n            heapq.heappush(heap,d)\n            ans.append(d)\n    return ans\ndef main():\n    test=[]\n    test2=[]\n    test3=[]\n    test4=[]\n    test5=[]\n    test6=[]\n    test7=[]\n    test8=[]\n    test9=[]\n    test10=[]\n    test11=[]\n    test12=[]\n    test13=[]\n    test14=[]\n    test15=[]\n    test16=[]\n    test17=[]\n    test18=[]\n    test19=[]\n    test20=[]\n    test21=[]\n    test22=[]\n    test23=[]\n    test24=[]\n    test25=[]\n    test26=[]\n    test27=[]\n    test28=[]\n    test29=[]\n    test30=[]\n    test31=[]\n    test32=[]\n    test33=[]\n    test34=[]\n    test35=[]\n    test36=[]\n    test37=[]\n    test38=[]\n    test39=[]\n    test40=[]\n    test41=[]\n    test42=[]\n    test43=[]\n    test44=[]\n    test45=[]\n    test46=[]\n    test47=[]\n    test48=[]\n    test49=[]\n    test50=[]\n    test51=[]\n    test52=[]\n    test53=[]\n    test54=[]\n    test55=[]\n    test56=[]\n    test57=[]\n    test58=[]\n    test59=[]\n    test60=[]\n    test61=[]\n    test62=[]\n    test63=[]\n    test64=[]\n    test65=[]\n    test66=[]\n    test67=[]\n    test68=[]\n    test69=[]\n    test70=[]\n    test71=[]\n    test72=[]\n    test73=[]\n    test74=[]\n    test75=[]\n    test76=[]\n    test77=[]\n    test78=[]\n    test79=[]\n    test80=[]\n    test81=[]\n    test82=[]\n    test83=[]\n    test84=[]\n    test85=[]\n    test86=[]\n    test87=[]\n    test88=[]\n    test89=[]\n    test90=[]\n    test91=[]\n    test92=[]\n    test93=[]\n    test94=[]\n    test95=[]\n    test96=[]\n    test97=[]\n    test98=[]\n    test99=[]\n    test100=[]\n    test101=[]\n    test102=[]\n    test103=[]\n    test104=[]\n    test105=[]\n    test106=[]\n    test107=[]\n    test108=[]\n    test109=[]\n    test110=[]\n    test111=[]\n    test112=[]\n    test113=[]\n    test114=[]\n    test115=[]\n    test116=[]\n    test117=[]\n    test118=[]\n    test119=[]\n    test120=[]\n    test121=[]\n    test122=[]\n    test123=[]\n    test124=[]\n    test125=[]\n    test126=[]\n    test127=[]\n    test128=[]\n    test129=[]\n    test130=[]\n    test131=[]\n    test132=[]\n    test133=[]\n    test134=[]\n    test135=[]\n    test136=[]\n    test137=[]\n    test138=[]\n    test139=[]\n    test140=[]\n    test141=[]\n    test142=[]\n    test143=[]\n    test144=[]\n    test145=[]\n    test146=[]\n    test147=[]\n    test148=[]\n    test149=[]\n    test150=[]\n    test151=[]\n    test152=[]\n    test153=[]\n    test154=[]\n    test155=[]\n    test156=[]\n    test157=[]\n    test158=[]\n    test159=[]\n    test160=[]\n    test161=[]\n    test162=[]\n    test163=[]\n    test164=[]\n    test165=[]\n    test166=[]\n    test167=[]\n    test168=[]\n    test169=[]\n    test170=[]\n    test171=[]\n    test172=[]\n    test173=[]\n    test174=[]\n    test175=[]\n    test176=[]\n    test177=[]\n    test178=[]\n    test179=[]\n    test180=[]\n    test181=[]\n    test182=[]\n    test183=[]\n    test184=[]\n    test185=[]\n    test186=[]\n    test187=[]\n    test188=[]\n    test189=[]\n    test190=[]\n    test191=[]\n    test192=[]\n    test193=[]\n    test194=[]\n    test195=[]\n    test196=[]\n    test197=[]\n    test198=[]\n    test199=[]\n    test200=[]\n    test201=[]\n    test202=[]\n    test203=[]\n    test204=[]\n    test205=[]\n    test206=[]\n    test207=[]\n    test208=[]\n    test209=[]\n    test210=[]\n    test211=[]\n    test212=[]\n    test213=[]\n    test214=[]\n    test215=[]\n    test216=[]\n    test217=[]\n    test218=[]\n    test219=[]\n    test220=[]\n    test221=[]\n    test222=[]\n    test223=[]\n    test224=[]\n    test225=[]\n    test226=[]\n    test227=[]\n    test228=[]\n    test229=[]\n    test230=[]\n    test231=[]\n    test232=[]\n    test233=[]\n    test234=[]\n    test235=[]\n    test236=[]\n    test237=[]\n    test238=[]\n    test239=[]\n    test240=[]\n    test241=[]\n    test242=[]\n    test243=[]\n    test244=[]\n    test245=[]\n    test246=[]\n    test247=[]\n    test248=[]\n    test249=[]\n    test250=[]\n    test251=[]\n    test252=[]\n    test253=[]\n    test254=[]\n    test255=[]\n    test256=[]\n    test257=[]\n    test258=[]\n    test259=[]\n    test260=[]\n    test261=[]\n    test262=[]\n    test263=[]\n    test264=[]\n    test265=[]\n    test266=[]\n    test267=[]\n    test268=[]\n    test269=[]\n    test270=[]\n    test271=[]\n    test272=[]\n    test273=[]\n    test274=[]\n    test275=[]\n    test276=[]\n    test277=[]\n    test278=[]\n    test279=[]\n    test280=[]\n    test281=[]\n    tes"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    ret = []\n    for i in heap:\n        if len(ret)==n:\n            break\n        ret.append(heapq.heappop(heap))\n    return ret\ndef main():\n    testcase = int(input())\n    for _ in range(testcase):\n        n = int(input())\n        ls = []\n        for _ in range(n):\n            ls.append(int(input()))\n        ret = larg_nnum(ls,n)\n        for i in ret:\n            print(i,end=' ')\n        print()\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    maxheap = []\n    for i in list1:\n        heapq.heappush(maxheap,i)\n    output = []\n    for i in range(n):\n        output.append(heapq.heappop(maxheap))\n    return output\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,5))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,5))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,3))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,1))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,2))\nmain()\ndef main():\n    my_list = [3,2,4,5,8,9,6]\n    print(larg_nnum(my_list,"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)<=n:\n        return list1\n    else:\n        return larg_nnum(list1,n-1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for el in list1:\n        heapq.heappush(heap,el)\n    output = []\n    while heap:\n        output.append(heapq.heappop(heap))\n    return output\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\ndef check_string(str):\n    '''\n    Write a function that takes in a string and returns True if it is in alphabetical order, False otherwise.\n    '''\n    str_list = list(str)\n    str_list.sort()\n    for char in str_list:\n        if char not in alphabet:\n            return False\n    return True\ndef is_palindrome(str):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome, False otherwise.\n    '''\n    rev = str[::-1]\n    if check_string(rev) == True:\n        return True\n    return False\ndef is_palindrome_algorithm(str):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome, False otherwise.\n    '''\n    if str == str[::-1]:\n        return True\n    else:\n        return False\ndef longest_string(str1,str2,list1):\n    '''\n    Write a function that takes in a string, a string and a list of words, and returns the longest string in the list.\n    '''\n    len_list = len(list1)\n    string = 0\n    max_length = 0\n    for i in range(len_list):\n        str_len = len(str1[i])\n        if i < len_list - 1:\n            if str_len > max_length:\n                max_length = str_len\n                string = str1[i]\n        else:\n            if str_len > max_length:\n                max_length = str_len\n                string = str1[i]\n    if len_list == 1:\n        return string\n    else:\n        return string + longest_string(str1,str2,list1[len_list:])\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=list1[:n]\n    return list2\ndef knn_k_nearest_neighbors(neighbor_matrix,n,k):\n    '''\n    Write a function that takes in a neighbor matrix and a integer n, and returns a list of the k nearest neighbors in the matrix.\n    '''\n    list3=[]\n    for i in range(len(neighbor_matrix)):\n        for j in range(len(neighbor_matrix[i])):\n            if(neighbor_matrix[i][j]==1):\n                list3.append((j,i))\n    list4=sorted(list3,key=lambda tup:tup[1])\n    list5=[]\n    for i in range(k):\n        list5.append(neighbor_matrix[list4[i][0]][list4[i][1]])\n    return list5\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in list1:\n        if len(list1)>n:\n            if i not in list2:\n                list2.append(i)\n        else:\n            pass\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) > n:\n        return list1[:n]\n    else:\n        return list1[-n:]\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # The formula is to find the surface area of the cylinder,\n    # having a height of r.\n    # The formula is r**2 * theta\n    # The formula is a_2 * r * (r + h) * theta\n    # The formula is a_2 * r * (2 * h) * theta\n    # The formula is (a_2 * r * (r + h) * theta)\n    # In any case, the formula is not zero.\n    a_2 = r**2 * (r + h)\n    a_2 *= (r + h)\n    a_2 *= (2 * h)\n    a_2 *= (r + h)\n    a_2 *= (r + h)\n    return a_2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #initialize\n    area=0\n    #calculate area\n    area=math.pi*(r**2)*h\n    print('The area of a circle with radius {:.2f} and height {:.2f} is {:.2f}.'.format(r,h,area))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print('\\n')\n    print('\\n')\n    print('Sphere lateral surface area calculator...\\n')\n    print('\\n')\n    print('Sphere radius R ='+ str(r) + '\\n')\n    print('\\n')\n    print('Sphere base height h ='+ str(h) + '\\n')\n    print('\\n')\n    print('Sphere base angle \u03b1 ='+ str(spherical_angle(r,h)) +'degrees\\n')\n    print('\\n')\n    print('Sphere area S ='+ str(spherical_area(r,h)) +'degrees\\n')\n    print('\\n')\n    print('Sphere volume V ='+ str(spherical_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere perimeter P ='+ str(spherical_perimeter(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d C ='+ str(spherical_volume_cylinder(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d H ='+ str(spherical_volume_cylinder_height(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d H.u ='+ str(spherical_volume_cylinder_height_u(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d H.v ='+ str(spherical_volume_cylinder_height_v(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d H.w ='+ str(spherical_volume_cylinder_height_w(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d H.x ='+ str(spherical_volume_cylinder_height_x(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d H.y ='+ str(spherical_volume_cylinder_height_y(r,h)) +'units.\\n')\n    print('\\n')\n    print('Sphere volume S.d H.z ='+ str(spherical_volume_cylinder_height_z(r,h)) +'units.\\n')\n    print('\\n')\n    print('\\n')\n    print('Volume of a sphere:'+ str(spherical_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in height h ='+ str(spherical_volume_cylinder(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in radius R ='+ str(spherical_volume_cylinder_radius(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in surface area S ='+ str(spherical_volume_cylinder(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S ='+ str(spherical_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in area S ='+ str(spherical_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d C ='+ str(spherical_volume_cylinder(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H ='+ str(spherical_volume_cylinder_height(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.u ='+ str(spherical_volume_cylinder_height_u(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.v ='+ str(spherical_volume_cylinder_height_v(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.w ='+ str(spherical_volume_cylinder_height_w(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.x ='+ str(spherical_volume_cylinder_height_x(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.y ='+ str(spherical_volume_cylinder_height_y(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.z ='+ str(spherical_volume_cylinder_height_z(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.u_area ='+ str(spherical_volume_cylinder_height_u_area(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.u_volume ='+ str(spherical_volume_cylinder_height_u_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.v_area ='+ str(spherical_volume_cylinder_height_v_area(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.v_volume ='+ str(spherical_volume_cylinder_height_v_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.w_area ='+ str(spherical_volume_cylinder_height_w_area(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.w_volume ='+ str(spherical_volume_cylinder_height_w_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.x_area ='+ str(spherical_volume_cylinder_height_x_area(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.x_volume ='+ str(spherical_volume_cylinder_height_x_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.y_area ='+ str(spherical_volume_cylinder_height_y_area(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.y_volume ='+ str(spherical_volume_cylinder_height_y_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.z_area ='+ str(spherical_volume_cylinder_height_z_area(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.z_volume ='+ str(spherical_volume_cylinder_height_z_volume(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.u_area ='+ str(spherical_volume_cylinder_height_u_area(r,h)) +'units.\\n')\n    print('\\n')\n    print('Volume of a sphere in volume S.d H.u_volume ='+ str(spherical_volume_cylinder_height_u_volume(r,h)) +'units.\\n')\n    print('\\n')"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = h * math.pi / 2\n    z = r * math.sin(theta)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    sx,sy,sz = r\n    ex,ey,ez = h\n    Sx = (ex*(ex+ey) + ex*(ey-ex))\n    Sy = (sy*(sy+ey) + sy*(ey-sy))\n    Sz = (sz*(sz+ey) + sz*(ey-sz))\n    return sqrt(Sx*Sy*Sz)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #this uses the circumference of a square given the radius, and the\n    #number of degrees the surface is facing, so we need to subtract the\n    #radius before dividing it into degrees.\n    #we need to do this because our calculations are in the form\n    #of pi divided by 180.\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def area(r,h):\n        x,y=0,0\n        for i in range(len(r)):\n            for j in range(len(r[0])):\n                x=x+r[i][j]\n            y=y+h[i]\n        return (x,y)\n    def v(r):\n        return [r[i][j] for i in range(len(r)) for j in range(len(r[0]))]\n    def area_cylinder(r,h):\n        A=0\n        for i in range(len(r)):\n            for j in range(len(r[0])):\n                A=A+r[i][j]*r[i][j]\n        return A\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Define the side lengths of the cylinder\n    r1 = r\n    r2 = r\n    h1 = h\n    h2 = h\n    #Define an initial value of the variables\n    area = 0\n    area_cylinder1 = 0\n    area_cylinder2 = 0\n    area_cylinder3 = 0\n    #Define the value of a, b, c, d\n    a = (1/4)*(1-np.tan(np.pi/6))\n    b = (1/4)*(1-np.tan(np.pi/5))\n    c = (1/4)*(1-np.tan(np.pi/4))\n    d = (1/4)*(1-np.tan(np.pi/3))\n    #Define a, b, c, d\n    #Write your code below this line\n    #Area of the surface of the cylinder\n    #Write your code above this line\n    #return area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    y = r/2*h\n    u = y\n    a = 0\n    while(u < (r+h)):\n        a+=2\n        u+=y\n        y+=h\n    return a\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if(r == 0):\n        print(\"That is an impossible cube.\")\n        return \"nope\"\n    elif(h == 0):\n        print(\"That is an impossible cube.\")\n        return \"nope\"\n    elif(r < 0):\n        print(\"That is not a positive number.\")\n        return \"nope\"\n    elif(r > 0):\n        print(\"That is not a positive number.\")\n        return \"nope\"\n    else:\n        rad = sqrt(r**2-h**2)\n        l = 2*pi*rad\n        return l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0.0\n    # loop to calculate the volume\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if i + j + k == l - 1:\n                    volume += 1.0\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(l):\n        volume += l**3\n    return volume\n    \n    \nif __name__ == '__main__':\n    # DO NOT change the code below\n    print(volume_cube(5))"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(f'\\nInside the function volume_cube, the side length of a cube is {l}\\n')\n    def volume_cube_a(l):\n        return 4*math.pi*l**3\n    return volume_cube_a(l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return 4*(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l<1:\n        print(\"Enter a positive value for l\")\n        return 0\n    v=l**3\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Use the math module to find the volume of a cube given its side length\n    return l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    try:\n        assert l > 0,'side length must be positive'\n    except AssertionError:\n        raise Exception('side length must be positive')\n    try:\n        assert 0 <= l <= 10,'side length must be between 0 and 10'\n    except AssertionError:\n        raise Exception('side length must be between 0 and 10')\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin = bin(n) \n    bin = bin[2:]\n    bin = bin[::-1] \n    return bin \n \ndef mod(n, p): \n    '''\n    Returns the number of trailing zeroes n has to be modulo p \n    ''' \n    return ((n % p) + (p - (n % p))) % p \n \ndef SBOX(x): \n    '''\n    Returns the S-Box of a given number. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = x[i][j] \n    return result \n \ndef BLK(x): \n    '''\n    Returns the Block of a given number. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = x[i][j] \n    return result \n \ndef ROR(x, n): \n    '''\n    Returns the R-Box of a given number. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, n): \n        result[i][0] = (x[i][0] << 1) + (x[i][1] << 2) + x[i][2] \n        result[i][1] = (x[i][0] << 1) + x[i][2] + (x[i][1] << 2) \n        result[i][2] = (x[i][0] << 1) + (x[i][1] << 2) + (x[i][2] << 3) \n        result[i][3] = (x[i][0] << 1) + (x[i][1] << 2) + (x[i][2] << 3) \n    return result \n \ndef AND(x, y): \n    '''\n    Returns the XOR of two given numbers. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = (x[i] ^ y[i]) \n    return result \n \ndef OR(x, y): \n    '''\n    Returns the OR of two given numbers. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = x[i] ^ y[i] \n    return result \n \ndef XOR(x, y): \n    '''\n    Returns the XOR of two given numbers. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = x[i] ^ y[i] \n    return result \n \ndef shift_rows(x): \n    '''\n    Returns the XOR of the Row. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = x[i] ^ x[i] \n    return result \n \ndef shift_columns(x): \n    '''\n    Returns the XOR of the Column. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = x[i] ^ x[i] \n    return result \n \ndef mix(x): \n    '''\n    Returns the XOR of the two given numbers. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = x[i] ^ x[i] \n    return result \n \ndef inv(x): \n    '''\n    Returns the inverse of x. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = mod(x[i], 2) \n    return result \n \ndef encrypt(plain, key): \n    '''\n    Returns the cipher of a given key. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = plain[i][j] ^ key[i][j] \n    return result \n \ndef decrypt(cipher, key): \n    '''\n    Returns the plain of a given key. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = cipher[i][j] ^ key[i][j] \n    return result \n \ndef encrypt_key(plain, key): \n    '''\n    Returns the key of a given plain. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = plain[i][j] ^ key[i][j] \n    return result \n \ndef decrypt_key(cipher, key): \n    '''\n    Returns the key of a given cipher. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = cipher[i][j] ^ key[i][j] \n    return result \n \ndef key_mul(key): \n    '''\n    Returns the key of a given key. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = (key[i][j] * key[i][j]) % 26\n    return result \n \ndef key_inv(key): \n    '''\n    Returns the key of a given key. \n    ''' \n    result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n    for i in range(0, 4): \n        for j in range(0, 4): \n            result[i][j] = (mod(key[i][j], 26) * key[i][j]) % 26\n    return result \n \ndef xor_blocks(x): \n    '''\n    Returns the XOR of two given numbers. \n    ''' \n    result = [0, 0, 0, 0] \n    for i in range(0, 4): \n        result[i] = x[i] ^ x[i] \n    return result \n \ndef xor_columns(x): \n    '''\n    Returns the XOR of two given numbers. \n    ''' \n    result = [0, "
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n    \nprint(even_bit_set_number(10)) \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    while n>0:\n        if n%2==0:\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n        n=n//2\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    while n: \n        if n & 1 == 0: \n            even_bits.append(1) \n        else: \n            even_bits.append(0) \n        n = n >> 1\n    return even_bits \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    odd_bit_mask = 1 << 31\n    mask = (1 << 29) - 1\n    \n    # if the number is negative, \n    # return the number of bits minus the mask\n    if n < 0:\n        n = n & mask\n        return n, odd_bit_mask - n\n    \n    # if the number is positive, return the number of bits\n    # minus the odd_bit_mask\n    else:\n        return n, odd_bit_mask - n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    '''\n    n = int(input(\"Enter the number: \"))\n    x = n\n    while(n > 0):\n        temp = x % 2\n        if(temp == 0):\n            x = x - 1\n        else:\n            x = x + 1\n    print(x)\n    '''\n    n = int(input(\"Enter the number: \"))\n    even = 0\n    while n > 0:\n        if n & 1 == 1:\n            even = even + 1\n        n = n - 1\n    print(even)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    temp = bin(n)[2:]\n    for i in range(0, len(temp)):\n        if int(temp[i]) & 2 == 0:\n            temp[i] = '0'\n    return ''.join(temp)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n & 0x8000): \n        n |= 0x8000\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniq_tuple = tuple(test_list[0][0])\n    uniq_tuple_dict = dict(Counter(uniq_tuple))\n    return uniq_tuple_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple) for tuple in test_list}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    lst = Counter(test_list)\n    return dict(lst)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = dict()\n    for e in test_list:\n        result[tuple(e[0])] = e[1]\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary of tuples with occurrences.\n    occurence = Counter(test_list)\n    \n    return occurence\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = dict()\n    for i in test_list:\n        if i[0] in count_dict.keys():\n            count_dict[i[0]] += 1\n        else:\n            count_dict[i[0]] = 1\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    final_dict = {}\n    for item in test_list:\n        if item not in final_dict.keys():\n            final_dict[item] = 1\n        else:\n            final_dict[item] += 1\n    return final_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for t in test_list:\n        if t[0] not in d:\n            d[t[0]] = 1\n        else:\n            d[t[0]] = d[t[0]] + 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = dict()\n    for entry in test_list:\n        if entry[1] in test_dict:\n            test_dict[entry[1]] += 1\n        else:\n            test_dict[entry[1]] = 1\n    return test_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(1, len(str)): \n        if str[i] == str[i-1]: \n            count += 1\n        else: \n            count = 1\n            if count == 1: \n                return count \n            else: \n                count = 0\n                if len(str) - i < len(str) - i-1: \n                    return count \n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Your code here\n    i, count = 0, 0\n    for j in range(len(str)):\n        if str[j] == str[j+1]:\n            i += 1\n        else:\n            count += 1\n    return i, count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == None:\n        return 0\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans = 0\n    l = len(str)\n    for i in range(l):\n        # j: index of current substring\n        j = 0\n        for j in range(i,l):\n            if str[i:j+1]!= str[j:j+2]:\n                break\n        ans += 1\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    N = str.count(\"a\")\n    E = str.count(\"e\")\n    O = str.count(\"o\")\n    I = str.count(\"i\")\n    V = str.count(\"v\")\n    return N + E + O + I + V\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # Dictionaries to store unique characters from a given string.\n    char_dict = {}\n    for char in str:\n        char_dict[char] = char_dict.get(char, 0) + 1\n    # Get the unique character from the dictionary.\n    result = len(char_dict.keys())\n    # Loop over the unique characters in the dictionary.\n    for char in char_dict.keys():\n        if char_dict[char] > 1:\n            result -= 1\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_count = 0\n    str_sub = \"\"\n    for i in range(len(str)-1):\n        if str[i:i+2] not in str_sub:\n            substring_count = substring_count + 1\n            str_sub = str[i:i+2]\n    return substring_count\n    pass\n    "
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m*n\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, n+1): \n        if m % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (n*(n+1))//2\n    #return n*(n+1)//2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    c = 1 #count is a variable\n    for i in range(0,n): #for loop that iterates through n\n        c += 1 #adds 1 to count\n        if c == m: #if count equal to m then it returns true\n            return True\n        else: #if count not equal to m it returns false\n            return False\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Declare variables \n    # create the required array \n    nums_array = [0] * n\n    \n    # Initialize the count variable \n    count = 0 \n    \n    # Divide the given array into subarrays \n    for i in range(n): \n        for j in range(i, n): \n            # Check if the element is positive and if it is a multiple of 2 \n            if nums_array[i] % 2 == 0 and nums_array[j] % 2 == 0: \n                # Count the number of positive elements and add it to count \n                count += 1 \n            # If we're not dividing by 2, add to the previous element \n            else: \n                nums_array[j] += nums_array[i] \n    \n    # Print out the total count \n    print(count)\n    \n    # Return the total count \n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Complete the function\n    return\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0 or n == 0: \n        return 0\n    if n < m: \n        return 0\n    answer = m // n\n    return answer + get_total_number_of_sequences(m % n, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #If m is greater than n then\n    if m >= n:\n        return 0\n    \n    #If we run into an index where n is greater than the m then\n    if m > n:\n        return 0\n    \n    #Store the number of possible sequences in a variable called \"sequences\"\n    sequences = 0\n    \n    #Use while loop to loop through every positive integer of n\n    while n > 1:\n        #Find the number of sequences from the nth element and\n        #add them to the variable \"sequences\" with 1 as the index of\n        #the next element to add to the list.\n        while n > 1:\n            sequences += 1\n            n -= 1\n        #Break the loop and go to the next element\n        n = 1\n        \n    #Return the number of sequences\n    return sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 0: return -1;\n    if n < 0: return -1;\n    if n == 0:\n        return m;\n    if n <= m:\n        return m;\n    n = n - 1;\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==0 or n==0: return 0\n    return 1+get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m-1,n-1) \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.pop(-1)\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # TODO: Replace the last element of the first list with the elements of the second list.\n    list1.append(list2.pop(0))\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #print(list1)\n    #print(list2)\n    list2.append(list1.pop())\n    #print(list2)\n    return list2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # write your code here\n    if len(list1)!= len(list2):\n        return None\n    for i in range(len(list1)):\n        if len(list2) == 0:\n            return list1\n        elif len(list2) > 0:\n            list1[i] = list2[-1]\n            list2.pop(-1)\n            if len(list2) == 0:\n                return list1\n    return list"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list2)] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!=len(list2):\n        print(\"You cannot merge two lists with different lengths\")\n    else:\n        list3 = []\n        for i in range(len(list1)):\n            list3.append(list1[i])\n        list3.append(list2[-1])\n        for i in range(len(list2)-1):\n            list3.append(list2[i])\n        list3.append(list2[-1])\n        list3.append(list2[0])\n        return list3\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        for index in range(len(list1)):\n            list1[index] = list2[index]\n    return list1\n    \ndef list_pop():\n    '''\n    Write a function that removes the last element of the list.\n    '''\n    return list1.pop()\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    while len(list2)>0:\n        list2.pop()\n    for i in range(len(list1)):\n        list1[i]=list2.pop()\n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    new_list1=list1[0:len(list2)-1]\n    new_list2=list2[0:len(list2)-1]\n    print(new_list1)\n    print(new_list2)\n    list1[0:len(list2)-1]=new_list2\n    list1[len(list2)-1]=new_list1\n    print(list1)\n    print(list2)\n    print('Replacing the last element in list 1 with the elements in list 2:')\n    print(list1[len(list2)-1])\n    print('Replacing the last element in list 2 with the elements in list 1:')\n    print(list2[len(list1)-1])\n    \n    \n    \ndef add_list(list1):\n    '''\n    Write a function that takes a list and adds each element of the first list to the last element of the second list.\n    '''\n    print(list1)\n    print('Adding each element of the first list to the last element of the second list:')\n    new_list1=list1[0:len(list1)-1]\n    new_list1.append(list1[len(list1)-1])\n    print(new_list1)\n    print('Adding each element of the second list to the last element of the first list:')\n    new_list2=list1[len(list1)-1:len(list1)]\n    new_list2.append(list1[0:len(list1)-1])\n    print(new_list2)\n    print('Replacing the last element of the second list with the elements of the first list:')\n    print(list1[len(list1)-1])\n    print('Replacing the last element of the first list with the elements of the second list:')\n    print(list1)\n    \n    \n    \ndef remove_list(list1,list2):\n    '''\n    Write a function that takes in two lists and removes all elements of the first list from the second list.\n    '''\n    print(list1)\n    print(list2)\n    print('Removing elements from the first list:')\n    new_list1=list1[0:len(list1)-1]\n    print(new_list1)\n    print('Removing elements from the second list:')\n    new_list2=list1[len(list1)-1:len(list1)]\n    print(new_list2)\n    print('Replacing the last element of the first list with the elements of the second list:')\n    new_list1[0:len(list1)-1]=new_list2\n    print(new_list1)\n    print('Replacing the last element of the second list with the elements of the first list:')\n    print(list1)\n    print('Removing the elements of the first list:')\n    print(list1[0:len(list1)-1])\n    print('Removing the elements of the second list:')\n    print(list2[0:len(list1)-1])\n    \n    \n    \ndef is_palindrome(list1):\n    '''\n    Write a function that returns True if the list in the argument is a palindrome, otherwise False.\n    '''\n    print(list1)\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-1])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-2])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::2])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-3])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-4])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-5])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-6])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-7])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-8])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-9])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-10])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-11])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-12])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-13])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-14])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-15])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-16])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-17])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-18])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-19])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-20])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-21])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-22])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-23])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-24])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-25])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-26])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-27])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-28])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-29])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-30])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-31])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-32])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-33])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-34])\n    print('Checking if the list in the argument is a palindrome:')\n    print(list1==list1[::-35])\n    print('Checking if the list in the argument is a palindrome:')\n    print(lis"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for i in range(0,len(str1)):\n        total += str1[i].__len__()\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str(str1)\n    total = 0\n    for i in str1:\n        total+=1\n    return total\n    \ndef change_to_sentence(str1):\n    '''\n    Write a function to convert a string to a sentence.\n    '''\n    sentence = str(str1)\n    sentence = sentence.split()\n    sentence = \" \".join(sentence)\n    return sentence\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a') + str1.count('e') + str1.count('i') + str1.count('o') + str1.count('u')\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # TODO: Modify the definition of count_charac here\n    #\n    # Write your code here\n    #\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    import string\n    count = 0\n    for i in str1:\n        if i in string.ascii_lowercase:\n            count += 1\n        elif i in string.ascii_uppercase:\n            count += 1\n        elif i in string.digits:\n            count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # gcd = math.gcd(N,N)\n    # if gcd == 1 :\n    #     return N\n    # else : \n    #     x = N // gcd\n    #     if x == 1 :\n    #         return N * N\n    #     else :\n    #         return N * next_Perfect_Square(x - 1) + N * next_Perfect_Square(x - 2)\n    #\n    # elif gcd == 2 :\n    #     return N * (N-1) // 2\n    # else : \n    #     x = N // gcd\n    #     if x == 1 :\n    #         return N * (N-1) // 2\n    #     else :\n    #         return N * next_Perfect_Square(x - 1) + next_Perfect_Square(x - 2)\n    \n    if N == 1 :\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return (N**2 + 1)**0.5\ndef add_to_bucket(N,Bucket):\n    '''\n    Write a python function that receives the next perfect square greater than a given number and its bucket size.\n    '''\n    return math.gcd(N**2+1,Bucket)\ndef div_int(N,Bucket):\n    '''\n    Return the divisor of the given perfect square greater than N.\n    '''\n    return math.sqrt(N**2+1)\ndef k(N,Bucket,C):\n    '''\n    Return the nearest perfect square greater than N in a given bucket and its divisor.\n    '''\n    for i in range(Bucket+1):\n        if (add_to_bucket(N,i)**C)//div_int(N,i)==0:\n            return N**C\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while(i*i <= N): \n        if (N % i == 0): \n            N = N // i \n            return (N) \n        i += 1\n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    import math\n    if N <= 0:\n        return None\n    if N == 1:\n        return 1\n    if N % 2 == 0:\n        return math.sqrt(N)\n    else:\n        return math.ceil(math.sqrt(N))\n        \nif __name__ == \"__main__\":\n    try:\n        N = int(input())\n        N = next_Perfect_Square(N)\n        if N!= None:\n            print(N)\n        else:\n            print(\"The next perfect square is not possible\")\n    except:\n        print(\"Please enter a number greater than 0\""
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #if given number is even \n    if N%2==0: \n        N=math.floor(N/2) \n        return next_Perfect_Square(N) \n    else: \n        # if given number is odd \n        N=math.floor(N*3+1) \n        return next_Perfect_Square(N) \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 0\n    for i in range(1,N):\n        if math.sqrt(i)**2 == math.sqrt(N):\n            return i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 0):\n        return 0\n    if (N == 1):\n        return 1\n    if (N == 2):\n        return 2\n    if (N == 3):\n        return 4\n    if (N%2 == 0):\n        return (N**2)%10007\n    else:\n        return (N**2)//10\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N==1) or (N==2):\n        return N\n    elif (N%2==0) and (N>1):\n        return N*(N+1)/2\n    else:\n        return (N**2)+(N-1)\n    \ndef next_Perfect_Square2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==1:\n        return 1\n    elif N==2:\n        return 3\n    elif N%2==0 and N>1:\n        return N*(N+1)/2\n    else:\n        return (N**2)+(N-1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #calculate the remainder\n    rem = N % 2\n    N = math.sqrt(N)\n    if N > 1:\n        return next_Perfect_Square(N-1) + rem\n    return N + 1\n    \ndef perfect_square_list(N):\n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    i = math.floor(N/2)\n    sqr_n = next_Perfect_Square(i)\n    sqr_n = math.floor(sqr_n)\n    print(sqr_n)\n    if sqr_n == N:\n        return True\n    return False\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n=int(math.sqrt(N))\n    if n==N:\n        return n\n    else:\n        for i in range(n+1,N+1):\n            if i**2==N:\n                return i\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sub = [0]*len(arr)\n    for i in range(1,len(arr)):\n        if arr[i]>arr[i-1]:\n            sub[i] = sub[i-1] + arr[i]\n        else:\n            sub[i] = max(arr[i-1], arr[i])\n    return max(sub)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize sum of each bitonic subsequence as 0 \n    sums = [0] * (len(arr) + 1)\n    # Loop through all elements in array\n    for i in range(len(arr)): \n        # Find start and end index of bitonic subsequence\n        start, end = i, i \n        # Increment sums for every bitonic subsequence\n        for j in range(i, len(arr) + 1):\n            if arr[j - 1] > arr[j]: \n                sums[j] = sums[j - 1] + 1 \n            else: \n                sums[j] = sums[j] \n                # Set end of a bitonic subsequence to end \n                end = j \n    return sum(sums) \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and arr[j] > arr[i] and arr[i] > max_sum:\n                max_sum = arr[i]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if (len(arr) == 0):\n        return 0\n    else:\n        if (arr[0] > arr[1]):\n            return max_sum(arr[1:])\n        else:\n            return max_sum(arr[0:2]) + max_sum(arr[1:])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # array contains a lot of different bitonic sequences.\n    # we should probably try this, but it is O(n^2)\n    # we should try this in O(n^2)\n    max_sum_one = []\n    max_sum_two = []\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Base Case\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] > arr[1]:\n        return arr[0]\n    elif arr[0] < arr[1]:\n        return arr[1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            count += 1\n    if count == 1:\n        print(0)\n    elif count > 1:\n        print(arr[0])\n        if arr[0] > 0:\n            max_sum(arr[1:len(arr)])\n        else:\n            print(0)\n    else:\n        print(arr[0])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # dynamic programming\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(arr[i], arr[i] + max_sum)\n    return max_sum\n    \n    # iterative approach\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = 0\n    while abs(number)!= 0:\n        if number > 0:\n            number = fabs(number)\n            sqrt += 1\n        else:\n            number = fabs(number)\n            sqrt += 1\n    return sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n    elif number < 10:\n        return 10 ** int(str(number)[1])\n    else:\n        return babylonian_squareroot(int(str(number)[1:])"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number, int):\n        return \"Only integer values are allowed!\"\n    if not number >= 0:\n        return \"Only positive integers are allowed!\"\n    square_root = -1\n    if number < 0:\n        return \"Only positive integers are allowed!\"\n    while abs(number) >= 2:\n        number = (number ** 2)\n        if number < 0:\n            return \"Only positive integers are allowed!\"\n        elif square_root == -1:\n            square_root = number\n        elif square_root > number:\n            square_root = -1\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    \n    if number == 0:\n        return math.sqrt(number)\n    else:\n        root = babylonian_squareroot(number/2)\n        if number%2 == 0:\n            root = root + math.sqrt(number/2)\n        return root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0\n    for digit in str(number):\n        root = root * 10 + int(digit)\n    if root == 0:\n        root = 1\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number > 1:\n        if number <= 10:\n            return number**0.5\n        else:\n            return babylonian_squareroot(number//10)**0.5\n    else:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return round(babylonian(number, 1), 5)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = []\n    for i in range(number):\n        squareroot.append(math.sqrt(number))\n    \n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if(number<0):\n        number = number * (-1)\n        \n    # process the numbers in the list\n    process_numbers(number)\n    \n    if(number==0):\n        return 0\n    elif(number==1):\n        return 1\n    \n    # divide the number by two and compute the square root\n    pow_two_number = number ** (1/2)\n    return (babylonian_squareroot(pow_two_number))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    max_sub = 1 #To keep track of the longest subsequence\n    for i in range(len(str)):\n        \n        for j in range(i, len(str)):\n            #print(i,j)\n            if (str[i] == str[j]):\n                if (j - i + 1 > max_sub):\n                    max_sub = j - i + 1\n    return max_sub\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # if there are no palindromes, return -1\n    if not str: \n        return -1\n    # find the length of the longest palindromic subsequence \n    n = len(str) \n    # Create a list to store the longest palindromic subsequence \n    longest = [] \n    # Traverse through the string \n    for i in range(n): \n        # If the current index equals the last one, then we have found the longest palindromic subsequence \n        if i == n - 1: \n            longest.append(str[i]) \n            # Then, we remove the element from the list of longest palindromic subsequence \n            str.pop() \n            # And continue traversing the string \n            continue\n        # If the current index is greater than the last one, then there are no palindromic subsequences \n        # then, we can consider this one as the substring of the current index \n        if i >= len(str): \n            longest.append(str[i]) \n            # Then, we remove the element from the list of longest palindromic subsequence \n            str.pop() \n            continue\n        # If the current index is greater than the first one, then there are no palindromic subsequences \n        if i > len(str) - 1: \n            # then, we break the the current palindrome \n            break\n        # If the current index is less than the first one, then, we add the element from the list of longest palindromic subsequences \n        # to the current palindrome \n        if str[i] == str[i+1]: \n            str.pop() \n            longest.append(str[i]) \n            continue\n        # If the current index is greater than the last one, then, there are no palindromic subsequences \n        # and we can ignore it. \n        if str[i] > str[i+1]: \n            str.pop() \n            continue\n        # If the current index is less than the last one, then, we can ignore it. \n        if str[i] < str[i+1]: \n            str.pop() \n            continue\n        # If the current index is the same as the last one, and the current palindrome is the longest palindrome \n        if str[i] == str[i-1]: \n            str.pop() \n            longest.append(str[i]) \n            continue\n        # If the current palindrome is not the longest, then, we add it to the list \n        # and we start to check the next palindrome\n        longest.append(str[i]) \n        str.pop() \n    # Return the longest palindrome from the list \n    return len(longest)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            max_len = max(max_len, len(d[str[i]]))\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            max_len = max(max_len, len(d[str[i]]))\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    d = dict()\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            if str[d[str[i]]] == str[i]:\n                max_len = max(max_len, d[str[i]]+1)\n            else:\n                max_len = max(max_len, d[str[i]])\n        else:\n            d[str[i]] = i\n    return max_len\ndef lps(str):\n    '''\n    Write a function to find the length of th"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(len(str)<=1):\n        return len(str)\n    else:\n        pal=[[0 for i in range(len(str))] for i in range(len(str))]\n        for i in range(1,len(str)):\n            pal[i][i-1]=1\n        for i in range(1,len(str)):\n            for j in range(i,len(str)):\n                if(str[i]==str[j]):\n                    pal[i][j]=2+pal[i-1][j-1]\n                else:\n                    pal[i][j]=max(pal[i-1][j],pal[i][j-1])\n        return pal[-1][-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_length = 0\n    string = str.upper()\n    for i in range(len(string)):\n        #print(string[i])\n        palindrome = string[i]\n        palindrome_list = list(palindrome)\n        for j in range(i+1, len(string)):\n            #print(j)\n            palindrome_list[j] = str(j)\n            palindrome_list = list(str.join(palindrome_list))\n            #print(palindrome_list)\n            if palindrome_list == palindrome:\n                #print(palindrome)\n                #print(palindrome_list)\n                max_length = max(max_length, i-j+1)\n    return max_length\n    \nprint(lps('ABABABA'))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    lps = {}\n    lps[0] = 0\n    for i in range(1,len(str)+1):\n        lps[i] = 1\n        for j in range(i):\n            if str[j:i] == str[j:i][::-1]:\n                lps[i] = max(lps[i],lps[j]+1)\n    return max(lps.values())\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Using a dictionary to store each letters\n    # and check if the dictionary is already present\n    # if the dict exists then\n    # return the length of the subsequence\n    \n    d = {}\n    for i in str:\n        d[i] = d.get(i, 0) + 1\n        \n    # If the dictionary is empty then\n    # return 0\n    if len(d) == 0:\n        return 0\n    \n    # Else look for the key that is the longest subsequence\n    # and then add one to the count\n    else:\n        return max(d.values())\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    LPS = []\n    \n    def lps_helper(s,n,LPS):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        \n        if s[n] == s[n-1]:\n            LPS.append(s[n])\n            return 1 + lps_helper(s,n-1,LPS)\n        else:\n            return max(lps_helper(s,n-1,LPS),lps_helper(s,n-1,LPS))\n    \n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    \n    return lps_helper(str,len(str)-1,LPS)\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # if len(str) <= 1:\n    #     return 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if (str == str[::-1]):\n        return 0\n    lps = [1 for i in range(len(str))]\n    for i in range(1, len(str) - 1):\n        j = i\n        while j >= 0 and str[j] == str[j+1]:\n            j -= 1\n        lps[i] = lps[j] + 1\n    lps[len(str) - 1] = lps[len(str) - 1] - lps[len(str) - 2 - i]\n    return max(lps)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return harmonic_sum(n-1) + 1/2*harmonic_sum(n-2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # your code here\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1.0/n*(n+1)*(n+2)**2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/2**(n-1) for n in range(1,n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i/i\n    return res\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1/2\n    else:\n        return (1/n) + (1/2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_next(n):\n        return n/3 + 1\n    return (harmonic_sum_next(n))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    i = 1\n    h = 0\n    while i <= n:\n        h += i\n        i += 1\n    return h\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1=set(array_nums1)\n    nums2=set(array_nums2)\n    intersection=nums1.intersection(nums2)\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            array_nums2.remove(array_nums1[i])\n        else:\n            return array_nums1[i]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    for element in set_nums1:\n        if element in set_nums2:\n            result.append(element)\n    return result\n    \ndef unique_list(array_nums):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    result = []\n    for i in range(len(array_nums)):\n        if array_nums[i] not in result:\n            result.append(array_nums[i])\n    return result\n    \ndef list_difference(array_nums1, array_nums2):\n    '''\n    Write a function that returns a new array with only the elements that are not in the original array and that do not appear in the new array.\n    '''\n    result = []\n    for element in array_nums2:\n        if element not in array_nums1:\n            result.append(element)\n    return result\n    \ndef array_of_two_integers(array_nums):\n    '''\n    Write a function that returns the integers in the array that are divisible by both of the numbers in the array.\n    '''\n    result = []\n    for i in range(len(array_nums)):\n        if array_nums[i] % 2 == 0 and array_nums[i] % 3 == 0:\n            result.append(array_nums[i])\n    return result\n    \ndef part_two(numbers):\n    '''\n    Write a function that counts the number of odd and even numbers in an array.\n    '''\n    result = []\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n    return result\n    \ndef list_to_int(array_nums):\n    '''\n    Write a function that converts a list into an integer.\n    '''\n    result = []\n    for i in range(len(array_nums)):\n        result.append(int(array_nums[i]))\n    return result\n    \ndef part_three(numbers):\n    '''\n    Write a function that converts a list into an integer.\n    '''\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i]*2)\n    return result\n    \ndef main():\n    array_nums1 = input(\"Enter the elements of the first array: \").split()\n    array_nums2 = input(\"Enter the elements of the second array: \").split()\n    array_nums3 = input(\"Enter the elements of the third array: \").split()\n    print(intersection_array(array_nums1,array_nums2))\n    print(unique_list(array_nums3))\n    print(list_difference(array_nums3,array_nums2))\n    print(array_of_two_integers(array_nums3))\n    print(part_two(array_nums3))\n    print(part_three(array_nums3))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = []\n    array2 = []\n    for n in array_nums1:\n        if n in array_nums2:\n            array1.append(n)\n    for n in array_nums2:\n        if n in array_nums1:\n            array2.append(n)\n    if len(array1)>0 and len(array2)>0:\n        return array1[0]\n    if len(array1)>0:\n        return array2[0]\n    if len(array2)>0:\n        return array1[0]\n    return None\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        array_nums2 = array_nums2[::-1]\n    if len(array_nums2) == len(array_nums1):\n        return array_nums1\n    for index,num in enumerate(array_nums1):\n        if index==0:\n            intersection_num = num\n        if num<intersection_num:\n            intersection_num = num\n    return intersection_num\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    temp = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                temp.append(i)\n    return temp\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res=[]\n    i=0\n    j=0\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i]<array_nums2[j]:\n            res.append(array_nums1[i])\n            i+=1\n        else:\n            res.append(array_nums2[j])\n            j+=1\n    res=res+array_nums1[i:]+array_nums2[j:]\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [num for num in array_nums1 if num in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n = len(array_nums1)\n    result = [0] * n\n    for i in range(n):\n        if array_nums1[i] in array_nums2:\n            result[i] = array_nums1[i]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return(len(tup))\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if i == x:\n            occ += 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # YOUR CODE HERE\n    return len(tup)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    res = 0\n    for e in tup:\n        if x == e:\n            res += 1\n    return res\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    dict_ = {}\n    for num in tup:\n        dict_[num] = dict_.get(num, 0) + 1\n    return dict_\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == x:\n            count = count + 1\n    return count \ndef count_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup:\n        if y == x:\n            count = count + 1\n    return count \ndef list_to_string(mylist): \n    '''\n    Write a python function that takes a list as an argument and returns a string of the list. \n    ''' \n    mylist =''.join(mylist) \n    return mylist \ndef string_to_list(mystring): \n    '''\n    Write a python function that takes a string and returns a list of characters. \n    ''' \n    mystring = ''.join(mystring) \n    return mystring \ndef list_to_string(mylist): \n    '''\n    Write a python function that takes a list as an argument and returns a string of the list. \n    ''' \n    mylist =''.join(mylist) \n    return mylist \ndef append_to_list(mylist, x): \n    '''\n    Write a python function that takes a list as an argument and inserts a value into the list. \n    ''' \n    mylist =''.join(mylist) \n    mylist.append(x) \n    return mylist \ndef remove_from_list(mylist, x): \n    '''\n    Write a python function that takes a list as an argument and removes a value from the list. \n    ''' \n    mylist =''.join(mylist) \n    mylist.remove(x) \n    return mylist \ndef main(): \n    print(\"This program counts the number of times a particular element occurs in a tuple.\")\n    print(\"Enter your tuples for example: (1,2,3,4)\")\n    mytuple = input(\"Enter a tuple: \").split(\",\")\n    print(\"Enter an element to be counted: \")\n    x = input(\"x: \")\n    y = input(\"y: \")\n    print(\"\\nCount the elements of the tuple: \")\n    count = count_X(mytuple, x)\n    count = count_Y(mytuple, y)\n    print(\"\\nCount the number of times x appears in the tuple: \")\n    count = count_X(mytuple, x)\n    count = count_Y(mytuple, y)\n    print(f\"{count}\")\n    print(f\"{list_to_string(mytuple)}\")\n    print(f\"{string_to_list(mytuple)}\")\nmain("
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    lst = 0\n    for i in tup:\n        if i == x:\n            lst += 1\n    return lst\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    copy_list = list.copy()\n    for i in copy_list:\n        if element == i:\n            i = copy_list.index(element)\n            copy_list.remove(element)\n            copy_list.insert(i,element)\n            return copy_list\n    return None\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return (list[:]) + (element[1:]) + (list[:])\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i=0\n    list.insert(i,element)\n    while i < len(list)-1:\n        list[i+1],list[i] = list[i],list[i+1]\n        i+=1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list)==0:\n        list.append(element)\n        return list\n    elif len(list)>0:\n        for i in range(len(list)-1,0,-1):\n            element_at_index=list[i]\n            if element_at_index>element:\n                list.insert(i-1,element)\n                return list\n            elif element_at_index<=element:\n                list.insert(i+1,element)\n                return list\n        if element>list[0]:\n            list.insert(0,element)\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    for i in range(len(list)):\n        list.insert(i+1,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp=list.copy()\n    while len(temp)!=0:\n        for i in range(len(temp)):\n            if element>=temp[i] and element<=temp[i+1]:\n                temp.insert(i+1,element)\n                return temp\n    return temp\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for el in list:\n        new_list.append(el)\n    for i in range(len(new_list)):\n        new_list[i] = element\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    inserted_elements = []\n    for element in list:\n        inserted_elements.append(element)\n        inserted_elements.insert(0,element)\n    return inserted_elements\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n = 0\n    for i in numbers:\n        n = n * 10 + i\n    radians = float(n)\n    degrees = (radians / cmath.pi) * 180\n    return degrees\n    \ndef main():\n    print (\"This program converts complex numbers to polar coordinates.\")\n    print (\"Please enter a number from 0 to 10^10.\\n\")\n    n = float(input())\n    print (\"The function will print a list of the magnitude and angle of the complex numbers.\")\n    print (\"Please enter the magnitude and angle of the complex numbers in the format (m) and (theta):\\n\")\n    print (\"m = (1+i)^2i\\n\")\n    print (\"The function will print the complex numbers that will be converted.\")\n    print (\"Please enter the complex numbers in the format(x,y) in the format(a,b):\\n\")\n    print (\"a = (x^2+y^2)^(1/2)\\n\")\n    print (\"The function will convert the complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (a*cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (a*cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will print the two complex numbers and their polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (a*cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (a*cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (a*cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (a*cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the polar coordinates in the format(theta,m):\\n\")\n    print (\"theta = (x-cmath.cos(b))\\n\")\n    print (\"m = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the polar coordinates in the format(theta,m):\\n\")\n    print (\"theta = (x-cmath.cos(b))\\n\")\n    print (\"m = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the polar coordinates in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the polar coordinates in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert polar coordinates to complex numbers.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x-cmath.sin(b))^(1/2)\\n\")\n    print (\"The function will convert complex numbers to polar coordinates.\")\n    print (\"Please enter the complex numbers in the format(x,y):\\n\")\n    print (\"x = (x-cmath.cos(b))^(1/2)\\n\")\n    print (\"y = (x"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # compute  sqrt(a**2 + b**2)\n    a = cmath.sqrt(numbers[0]**2 + numbers[1]**2)\n    b = cmath.sqrt(numbers[0]*numbers[1])\n    # compute c\n    c = cmath.polar(a + b*1j)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    x = numbers[0]\n    y = numbers[1]\n    \n    x_rad = cmath.polar(x)\n    y_rad = cmath.polar(y)\n    x_angle = cmath.phase(x_rad)\n    y_angle = cmath.phase(y_rad)\n    \n    return x_angle,y_angle\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real, imag = [], []\n    for i in range(len(numbers)):\n        a = numbers[i].real  # real number\n        b = numbers[i].imag  # imaginary number\n        real.append(a)\n        imag.append(b)\n    pol = [(complex(real[i], imag[i])).conjugate() for i in range(len(real))]\n    return pol\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = numbers.split()\n    try:\n        numbers = float(numbers[0]) + float(numbers[1])*1j\n        numbers = numbers/numbers.conjugate()\n        return(numbers.real,numbers.imag)\n    except:\n        return('Complex Numbers not entered correctly')\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a, b = numbers\n    pi = cmath.pi\n    radians = a*pi/180.0\n    return (a/b, radians)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = abs(numbers[0])\n    y = abs(numbers[1])\n    z = abs(numbers[2])\n    x = round(x, 2)\n    y = round(y, 2)\n    z = round(z, 2)\n    if z == 0:\n        return (x,y)\n    else:\n        a = cmath.polar(x)\n        b = cmath.polar(y)\n        c = cmath.polar(z)\n        return ((a[0] + b[0]*x + c[0]*x**2, a[1] + b[1]*y + c[1]*y**2, a[2] + b[2]*z + c[2]*z**2)\ndef main():\n    '''\n    Write a python function to create a list of complex numbers.\n    '''\n    complex_list = []\n    for i in range(0, 2):\n        n = input(\"Enter a number: \")\n        n = int(n)\n        complex_list.append(n)\n    print(\"The list of complex numbers is:\", complex_list)\n    print(\"The first element of the list is:\", complex_list[0])\n    print(\"The last element of the list is:\", complex_list[-1])\ndef second():\n    '''\n    Write a python function to convert a list of complex numbers to a list of strings.\n    '''\n    string_list = []\n    for i in range(0, len(complex_list)):\n        n = str(complex_list[i])\n        string_list.append(n)\n    print(\"The list of complex numbers is:\", string_list)\ndef third():\n    '''\n    Write a python function to print out the list of complex numbers.\n    '''\n    print(\"The list of complex numbers is:\", complex_list)\ndef fourth():\n    '''\n    Write a python function to print out the list of complex numbers, with the second and third elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1] = string_list[1], string_list[0]\n    print(\"The list of complex numbers is:\", string_list)\ndef fifth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fourth and first elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2] = string_list[2], string_list[0], string_list[1]\n    print(\"The list of complex numbers is:\", string_list)\ndef sixth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fourth and second elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2] = string_list[2], string_list[0], string_list[1]\n    print(\"The list of complex numbers is:\", string_list)\ndef seventh():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and third elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3] = string_list[3], string_list[0], string_list[1], string_list[2]\n    print(\"The list of complex numbers is:\", string_list)\ndef eighth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and fourth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef ninth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and fifth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef tenth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and fourth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef eleventh():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and sixth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef twelfth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and seventh elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef thirteenth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and eighth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef fourteenth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and nineteenth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef fifteenth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and twentieth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef seventeenth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and twentieth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4], string_list[0], string_list[1], string_list[2], string_list[3]\n    print(\"The list of complex numbers is:\", string_list)\ndef eighteenth():\n    '''\n    Write a python function to print out the list of complex numbers, with the fifth and twentieth elements swapped.\n    '''\n    string_list = []\n    string_list[0], string_list[1], string_list[2], string_list[3], string_list[4] = string_list[4]"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # def convert_to_degrees(x,y):\n    #     '''\n    #     Returns the degrees of the complex number x and y.\n    #     '''\n    #     return cmath.phase(complex(x,y))\n    #\n    # def convert_to_radians(x,y):\n    #     '''\n    #     Returns the radians of the complex number x and y.\n    #     '''\n    #     return cmath.phase(complex(x,y))\n    #\n    # def convert_to_fractions(x,y):\n    #     '''\n    #     Returns the fractions of the complex numbers x and y.\n    #     '''\n    #     return cmath.phase(complex(x,y)) / cmath.phase(complex(x,y))\n    #\n    # def convert_to_radians_fractions(x,y):\n    #     '''\n    #     Returns the radians of the fractions of the complex numbers x and y.\n    #     '''\n    #     return cmath.phase(complex(x,y)) / cmath.phase(complex(x,y))\n    #\n    # def convert_to_powers(x,y):\n    #     '''\n    #     Returns the powers of the complex numbers x and y.\n    #     '''\n    #     return cmath.power(complex(x,y),2)\n    #\n    # def convert_to_log(x,y):\n    #     '''\n    #     Returns the logarithm of the complex numbers x and y.\n    #     '''\n    #     return cmath.log(complex(x,y))\n    #\n    # def convert_to_exp(x,y):\n    #     '''\n    #     Returns the exponential of the complex numbers x and y.\n    #     '''\n    #     return cmath.exp(complex(x,y))\n    #\n    # def convert_to_sine(x,y):\n    #     '''\n    #     Returns the sine of the complex numbers x and y.\n    #     '''\n    #     return cmath.sin(complex(x,y))\n    #\n    # def convert_to_cosine(x,y):\n    #     '''\n    #     Returns the cosine of the complex numbers x and y.\n    #     '''\n    #     return cmath.cos(complex(x,y))\n    #\n    # def convert_to_tan(x,y):\n    #     '''\n    #     Returns the tangent of the complex numbers x and y.\n    #     '''\n    #     return cmath.tan(complex(x,y))\n    #\n    # def convert_to_secant(x,y):\n    #     '''\n    #     Returns the secant of the complex numbers x and y.\n    #     '''\n    #     return cmath.sec(complex(x,y))\n    #\n    # def convert_to_cot(x,y):\n    #     '''\n    #     Returns the cotangent of the complex numbers x and y.\n    #     '''\n    #     return cmath.cot(complex(x,y))\n    #\n    # def convert_to_sqrt(x,y):\n    #     '''\n    #     Returns the square root of the complex numbers x and y.\n    #     '''\n    #     return cmath.sqrt(complex(x,y))\n    #\n    # def convert_to_cot_sqrt(x,y):\n    #     '''\n    #     Returns the cotangent and square root of the complex numbers x and y.\n    #     '''\n    #     return cmath.cot_sqrt(complex(x,y))\n    #\n    # def convert_to_log_base(x,y):\n    #     '''\n    #     Returns the logarithm of the complex numbers x and y.\n    #     '''\n    #     return cmath.log_base(complex(x,y))\n    #\n    # def convert_to_log_base_2(x,y):\n    #     '''\n    #     Returns the logarithm of the complex numbers x and y.\n    #     '''\n    #     return cmath.log_base2(complex(x,y))\n    #\n    # def convert_to_log_base_10(x,y):\n    #     '''\n    #     Returns the logarithm of the complex numbers x and y.\n    #     '''\n    #     return cmath.log_base10(complex(x,y))\n    #\n    # def convert_to_log_10_2(x,y):\n    #     '''\n    #     Returns the logarithm of the complex numbers x and y.\n    #     '''\n    #     return cmath.log_base10_2(complex(x,y))\n    #\n    # def convert_to_log_base_7(x,y):\n    #     '''\n    #     Returns the logarithm of the complex numbers x and y.\n    #     '''\n    #     return cmath.log_base7(complex(x,y))\n    #\n    # def convert_to_log_base_11(x,y):\n    #     '''\n    #     Returns the logarithm of the complex numbers x and y.\n    #     '''\n    #     return cmath.log_base11(complex(x,y))\n    #\n    # def convert_to_power(x,y):\n    #     '''\n    #     Returns the power of the complex numbers x and y.\n    #     '''\n    #     return cmath.power(complex(x,y),2)\n    #\n    # def convert_to_power_2(x,y):\n    #     '''\n    #     Returns the power of the complex numbers x and y.\n    #     '''\n    #     return cmath.power(complex(x,y),2)\n    #\n    # def convert_to_power_10(x,y):\n    #     '''\n    #     Returns the power of the complex numbers x and y.\n    #     '''\n    #     return cmath.power(complex(x,y),10)\n    #\n    # def convert_to_power_10_2(x,y):\n    #     '''\n    #     Returns the power of the complex numbers x and y.\n    #     '''\n    #     return cmath.power(complex(x,y),10)\n    #\n    # def convert_to_power_11(x,y):\n    #     '''\n    #     Returns the power of the complex numbers x and y.\n    #     '''\n    #     return cmath.power(complex(x,y),11)\n    #\n    # def convert_to_power_2_11(x,y):\n    #     '''\n    #     Returns the power of the complex numbers x and y.\n    #     '''\n    #     return cmath.power(complex(x,y),2)\n    #\n    # def convert_to_fraction(x,y):\n    #     '''\n    #     Returns the fraction of the complex numbers x and y.\n    #     '''\n    #     return cmath.phase(complex(x,y)) / cmath.phase(complex(x,y))\n    #\n    # def convert_to_fraction_2(x,y):\n    #     '''\n    #     Returns the fraction of the complex numbers x and y.\n    #     '''\n    #     return cmath.phase(complex(x,y)) / cmath.phase(complex(x,y))\n    #\n    # def convert_to_fraction_10(x,y):\n    #     '''\n    #     Returns the fraction of the complex numbers x and y.\n    "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = numbers[0]\n    y = numbers[1]\n    z = numbers[2]\n    x = cmath.polar(x)\n    y = cmath.polar(y)\n    z = cmath.polar(z)\n    return x,y,z\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    w = complex(numbers[0], numbers[1])\n    z = w.real**2 + w.imag**2\n    polar_z = (cmath.phase(z) * 180.0) / cmath.pi\n    return polar_z\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if i.isnumeric():\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if not list1:\n        return 0\n    else:\n        return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer = len(list1)\n    return integer\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for element in list1:\n        if element.isdigit():\n            result += 1\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(map(lambda x: int(x), list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1.sort()\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # assume the list is non-empty\n    # use the len function to get the length of the list\n    return len(list1)\n    "
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    result = []\n    for i in range(0, n + 1):\n        result.extend(list(combinations_with_replacement(l,i)))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    all_colors = []\n    for i in range(l):\n        for j in range(l):\n            for k in combinations(l, i):\n                for l in combinations(l, j):\n                    for m in combinations(l, k):\n                        all_colors.append(tuple(m))\n    return all_colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # print(l)\n    result = list()\n    for i in combinations_with_replacement(l, n):\n        # print(i)\n        result.append(tuple(i))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [tuple(l)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_colors = []\n    for i in range(1, n+1):\n        for j in combinations_with_replacement(l, i):\n            combinations_colors.append(tuple(j))\n    return combinations_colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n==0:\n        return ()\n    elif n==1:\n        return tuple(l)\n    elif n==2:\n        return combinations_with_replacement(l, 2)\n    else:\n        return tuple(combinations_with_replacement(l, n-1))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[*list(i)] for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    l.sort()\n    # Create an empty list to append to.\n    comb_lst = []\n    # Loop through the list and create a tuple.\n    for i in range(1, n+1):\n        comb_lst.append(tuple(l[:i]))\n    return comb_lst\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    combos = []\n    while len(l) > 0:\n        colors = combinations_with_replacement(l, n)\n        for i in range(n):\n            combos.append(colors[i])\n    return combos\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Use a set to save the number of prime numbers less than the given number.\n    prime_set = set()\n    #Keep looping until a prime number is found.\n    while True:\n        #Get a number from the user.\n        p = input(\"Enter a number: \")\n        #If the number is a prime number, print the number.\n        if int(p) >= n:\n            print(p)\n            break\n        #If the number is not a prime number, check if it can be written as any number of digits.\n        elif is_prime(int(p)) == True:\n            #Add the number to the set.\n            prime_set.add(int(p))\n        #Print out the set.\n        else:\n            print(\"We did not find a prime number\")\n    print(\"The set of prime numbers is: \")\n    #Print the numbers from the set.\n    for p in prime_set:\n        print(p)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    prime = [True for i in range(n + 1)]\n    prime[0], prime[1] = False, False\n    for i in range(2, int(n ** 0.5) + 1):\n        if prime[i]:\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n    return sum(sum(element for element in prime if element == True))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    \n    for i in range(2,n+1):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n):\n            if n % i == 0:\n                count += 1\n        return count"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2, 3, 5, 7]\n    count = 0\n    for num in primes:\n        if num < n:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_list = [2, 3, 5, 7]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_numbers = []\n    for i in range(2, n+1):\n        if prime_numbers.count(i) == 0:\n            prime_numbers.append(i)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a list to store all prime numbers less than the given number\n    list_of_primes = []\n    # Loop through n to find all the prime numbers\n    for num in range(1, n + 1):\n        # If num is not prime, append it to the list\n        if is_prime(num):\n            list_of_primes.append(num)\n    # Return the number of prime numbers less than the given number\n    return len(list_of_primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (count_Primes_nums(n-1)) + (count_Primes_nums(n-2))\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a[::-1]\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        return(b,a)\n    elif b > a:\n        return(a,b)\n    else:\n        return(a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a<b:\n        tmp=b\n        b=a\n        a=tmp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    min_num1, min_num2 = test_tup1\n    min_num3, min_num4 = test_tup2\n    # 0 is not in the tuple, so you have to make the min_num1 equal to min_num3, and likewise, you have to make the min_num2 equal to min_num4\n    max_num1 = max(min_num1, min_num3, min_num4)\n    max_num2 = max(min_num2, min_num3, min_num4)\n    # you have to add the new tuple to the dictionary with the minimum number\n    test_dict[max_num1] = (max_num2, min_num1)\n    # you have to add the new tuple to the dictionary with the minimum number\n    test_dict[max_num2] = (max_num1, min_num2)\n    # if the first tuple is smaller than the second, you have to make the second tuple equal to the first tuple\n    # you have to make the second tuple equal to the first tuple\n    if min_num2 < min_num1:\n        min_num1, min_num2 = min_num2, min_num1\n        test_dict[min_num1] = (min_num2, min_num1)\n    return test_dict\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = 0\n    i = 0\n    for j in range(0,len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_num = max_num + 1\n        i = i + 1\n    return max_num\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = max(test_tup1[0], test_tup2[0])\n    b = min(test_tup1[0], test_tup2[0])\n    return (a, b)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    n=len(test_tup1)\n    m=len(test_tup2)\n    res_tup=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_tup1[i]<test_tup2[j]:\n                res_tup.append(test_tup1[i])\n                res_tup.append(test_tup2[j])\n                break\n    return(res_tup)\ndef count_elements(test_tup1, test_tup2):\n    '''\n    Write a function to count the number of the elements in two tuples.\n    '''\n    n=len(test_tup1)\n    m=len(test_tup2)\n    res=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_tup1[i]<test_tup2[j]:\n                res+=1\n    return(res)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write your code here\n    a = max(test_tup1)\n    b = max(test_tup2)\n    if a > b:\n        return(a,b)\n    else:\n        return(b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    try:\n        max_element = test_tup1[0]\n        for element in test_tup1[1:]:\n            if element > max_element:\n                max_element = element\n        return max_element\n    except IndexError:\n        return \"The input tuple is empty\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = [i for i in range(n+1)]\n    prime_list[0] = 2\n    prime_list[1] = 3\n    for i in range(2, int(n**0.5)+1):\n        if prime_list[i] == 4:\n            j = i+5\n            while j % 2 == 0:\n                j //= 2\n            while j % 3 == 0:\n                j //= 3\n            if j!= i+1:\n                prime_list[i] = 1\n    return prime_list[n]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while(i*i <= n):\n        if n%i == 0:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = True\n    for i in range(2, n):\n        if (n % i) == 0:\n            prime = False\n            break\n        elif (n % i)!= 0:\n            prime = False\n            break\n    if prime:\n        print(n)\n    else:\n        print(\"This is not a prime number\")\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    prime_n = 2\n    while len(prime) < n:\n        if prime_n % prime_n == 0:\n            break\n        prime.append(prime_n)\n        prime_n += 2\n    return prime[len(prime) - 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_numbers.sort()\n    for i in range(len(prime_numbers)-n, len(prime_numbers)):\n        if prime_numbers[i] == 1:\n            break\n    else:\n        return False\n    n = n-1\n    p = prime_numbers[i]\n    i = i-1\n    while p*p <= n:\n        if p == n:\n            return True\n        p = p*p\n        if i == 0:\n            i = n-1\n        i = i-1\n    else:\n        return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    Prime = []\n    check = []\n    i = 2\n    while i < n:\n        if prime[i]!= 0:\n            for j in range(2, int(i**0.5) + 1):\n                if i%j == 0:\n                    break\n                else:\n                    check.append(i)\n                    Prime.append(i)\n        i += 1\n    checkPrime = []\n    for i in range(len(check)):\n        checkPrime.append(prime[check[i]])\n    print(checkPrime)\n    for i in range(len(checkPrime)):\n        if checkPrime[i]!= 0:\n            for j in range(2, int(checkPrime[i]**0.5) + 1):\n                if checkPrime[i]%j == 0:\n                    break\n                else:\n                    return False\n    return checkPrime[i]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b = 2,3\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime2(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 2,3,4\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime3(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 4,4,5\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime4(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 4,4,6\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime5(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 5,5,6\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime6(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 6,6,7\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime7(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 7,7,8\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime8(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 8,8,9\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime9(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 9,9,10\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime10(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 10,10,11\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime11(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 11,11,12\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime12(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 12,12,13\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n    \ndef newman_prime13(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 13,13,14\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime14(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 14,14,15\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime15(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 15,15,16\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime16(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 16,16,17\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime17(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 17,17,18\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime18(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 18,18,19\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime19(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 19,19,20\n    while True:\n        c = a + b\n        if c > n:\n            return a, b, c, n\n        else:\n            a,b,c = a+b,a,c+b\n            \ndef newman_prime20(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b, c = 20,20,21\n    while True"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while i <= n:\n        if isprime(i) == True:\n            if i == 2:\n                j = 2\n            else:\n                j = i * i + 1\n                while j > n:\n                    i *= i + 1\n                    j //= i\n                if j == n:\n                    return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2,n):\n        j = 2*i\n        while j <= n:\n            if j % i == 0:\n                return False\n            j += i\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for x in test_tup1:\n        test_list1.append(x[0])\n    for x in test_tup2:\n        test_list2.append(x[0])\n    for i in range(0, len(test_list1)):\n        if test_list1[i]!= test_list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #first make sure the tuples are of the correct length\n    if len(test_tup1)!= 2 or len(test_tup2)!= 2:\n        raise TypeError(\"test_tup1 and test_tup2 must have the same length.\")\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #return tuple()\n    #Test Case 1\n    division = []\n    division.append((test_tup1[0]/test_tup2[0]))\n    division.append((test_tup1[1]/test_tup2[1]))\n    division.append((test_tup1[2]/test_tup2[2]))\n    division.append((test_tup1[3]/test_tup2[3]))\n    division.append((test_tup1[4]/test_tup2[4]))\n    return tuple(division)\n    #Test Case 2\n    division = []\n    division.append((test_tup2[0]/test_tup1[0]))\n    division.append((test_tup2[1]/test_tup1[1]))\n    division.append((test_tup2[2]/test_tup1[2]))\n    division.append((test_tup2[3]/test_tup1[3]))\n    division.append((test_tup2[4]/test_tup1[4]))\n    return tuple(division)\n    #Test Case 3\n    division = []\n    division.append((test_tup2[0]/test_tup1[2]))\n    division.append((test_tup2[1]/test_tup1[3]))\n    division.append((test_tup2[2]/test_tup1[4]))\n    division.append((test_tup2[3]/test_tup1[5]))\n    division.append((test_tup2[4]/test_tup1[6]))\n    return tuple(division)\n    #Test Case 4\n    division = []\n    division.append((test_tup1[0]/test_tup2[0]))\n    division.append((test_tup1[1]/test_tup2[1]))\n    division.append((test_tup1[2]/test_tup2[2]))\n    division.append((test_tup1[3]/test_tup2[3]))\n    division.append((test_tup1[4]/test_tup2[4]))\n    return tuple(division)\n    #Test Case 5\n    division = []\n    division.append((test_tup1[0]/test_tup2[3]))\n    division.append((test_tup1[1]/test_tup2[4]))\n    division.append((test_tup1[2]/test_tup2[5]))\n    division.append((test_tup1[3]/test_tup2[6]))\n    division.append((test_tup1[4]/test_tup2[7]))\n    return tuple(division)\n    #Test Case 6\n    division = []\n    division.append((test_tup1[0]/test_tup2[6]))\n    division.append((test_tup1[1]/test_tup2[7]))\n    division.append((test_tup1[2]/test_tup2[8]))\n    division.append((test_tup1[3]/test_tup2[9]))\n    division.append((test_tup1[4]/test_tup2[10]))\n    return tuple(division)\n    #Test Case 7\n    division = []\n    division.append((test_tup1[0]/test_tup2[10]))\n    division.append((test_tup1[1]/test_tup2[11]))\n    division.append((test_tup1[2]/test_tup2[12]))\n    division.append((test_tup1[3]/test_tup2[13]))\n    division.append((test_tup1[4]/test_tup2[14]))\n    return tuple(division)\n    #Test Case 8\n    division = []\n    division.append((test_tup1[0]/test_tup2[15]))\n    division.append((test_tup1[1]/test_tup2[16]))\n    division.append((test_tup1[2]/test_tup2[17]))\n    division.append((test_tup1[3]/test_tup2[18]))\n    division.append((test_tup1[4]/test_tup2[19]))\n    return tuple(division)\n    #Test Case 9\n    division = []\n    division.append((test_tup1[0]/test_tup2[20]))\n    division.append((test_tup1[1]/test_tup2[21]))\n    division.append((test_tup1[2]/test_tup2[22]))\n    division.append((test_tup1[3]/test_tup2[23]))\n    division.append((test_tup1[4]/test_tup2[24]))\n    return tuple(division)\n    #Test Case 10\n    division = []\n    division.append((test_tup1[0]/test_tup2[25]))\n    division.append((test_tup1[1]/test_tup2[26]))\n    division.append((test_tup1[2]/test_tup2[27]))\n    division.append((test_tup1[3]/test_tup2[28]))\n    division.append((test_tup1[4]/test_tup2[29]))\n    return tuple(division)\n    #Test Case 11\n    division = []\n    division.append((test_tup1[0]/test_tup2[30]))\n    division.append((test_tup1[1]/test_tup2[31]))\n    division.append((test_tup1[2]/test_tup2[32]))\n    division.append((test_tup1[3]/test_tup2[33]))\n    division.append((test_tup1[4]/test_tup2[34]))\n    return tuple(division)\n    #Test Case 12\n    division = []\n    division.append((test_tup1[0]/test_tup2[35]))\n    division.append((test_tup1[1]/test_tup2[36]))\n    division.append((test_tup1[2]/test_tup2[37]))\n    division.append((test_tup1[3]/test_tup2[38]))\n    division.append((test_tup1[4]/test_tup2[39]))\n    return tuple(division)\n    #Test Case 13\n    division = []\n    division.append((test_tup1[0]/test_tup2[40]))\n    division.append((test_tup1[1]/test_tup2[41]))\n    division.append((test_tup1[2]/test_tup2[42]))\n    division.append((test_tup1[3]/test_tup2[43]))\n    division.append((test_tup1[4]/test_tup2[44]))\n    return tuple(division)\n    #Test Case 14\n    division = []\n    division.append((test_tup1[0]/test_tup2[45]))\n    division.append((test_tup1[1]/test_tup2[46]))\n    division.append((test_tup1[2]/test_tup2[47]))\n    division.append((test_tup1[3]/test_tup2[48]))\n    division.append((test_tup1[4]/test_tup2[49]))\n    return tuple(division)\n    #Test Case 15\n    division = []\n    division.append((test_tup1[0]/test_tup2[50]))\n    division.append((test_tup1[1]/test_tup2[51])"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        def divide(tup1, tup2):\n            '''\n            Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n            '''\n            for i in range(len(tup1)):\n                tup1[i] /= tup2[i]\n                if tup2[i] == 0:\n                    tup1[i] = 1\n                # Remove 0 from tup1 if tup2 is not 0\n                if tup2[i]!= 0:\n                    tup1[i] = tup1[i] / tup2[i]\n            return tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #check that all the tuples have the same number of elements\n    if not test_tup1:\n        raise Exception('Test Tuple 1 is empty')\n    elif len(test_tup1)!= len(test_tup2):\n        raise Exception('Test Tuple 2 is not of same size as 1st tuple')\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result + test_tup1[i]/test_tup2[i]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create a function to find the product of the two tuples\n    def product(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function to find the maximum of two numbers\n    def max_of_two_numbers(tup1, tup2):\n        return tuple(max(a, b) for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the sum of the numbers\n    def sum_of_two_numbers(tup1, tup2):\n        return tuple(sum(a, b) for a, b in zip(tup1, tup2))\n    \n    # Create a function that returns the product of the numbers in the given tuple\n    def product_of_two_numbers(tup1, tup2):\n        return tuple(product(a, b) for a, b in zip(tup1, tup2))\n    \n    # Create a function that returns the sum of the numbers from the first tuple, including the sum of the numbers from the second tuple\n    def sum_of_two_numbers_including_sum(tup1, tup2):\n        return tuple(a + b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the min of the two tuples\n    def min_of_two_numbers(tup1, tup2):\n        return tuple(min(a, b) for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the sum of the numbers from the first tuple, minus the sum of the numbers from the second tuple\n    def sum_of_two_numbers_minus_sum(tup1, tup2):\n        return tuple(a - b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the sum of the numbers from the first tuple, but only if the first element is the product of the second element\n    def sum_of_two_numbers_with_product(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the sum of the numbers from the first tuple, but only if the second element is the product of the first element\n    def sum_of_two_numbers_with_product_2(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the sum of the numbers from the second tuple\n    def product_of_two_numbers_with_sum(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the min of the numbers from the second tuple\n    def product_of_two_numbers_with_min(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the sum of the numbers from the second tuple\n    def product_of_two_numbers_with_sum_2(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the sum of the numbers from the first tuple\n    def product_of_two_numbers_with_product_2(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the second element is the product of the first element\n    def product_of_two_numbers_with_product_2(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the sum of the numbers from the second tuple\n    def product_of_two_numbers_with_sum_3(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the sum of the numbers from the first tuple\n    def product_of_two_numbers_with_sum_4(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the minimum of the numbers from the second tuple\n    def product_of_two_numbers_with_min_4(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the product of the sum of the numbers from the first tuple\n    def product_of_two_numbers_with_product_3(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the minimum of the numbers from the second tuple\n    def product_of_two_numbers_with_min_3(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the product of the sum of the numbers from the first tuple\n    def product_of_two_numbers_with_product_4(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the product of the sum of the numbers from the first tuple\n    def product_of_two_numbers_with_product_5(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the product of the min of the numbers from the second tuple\n    def product_of_two_numbers_with_min_4(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the product of the sum of the numbers from the first tuple\n    def product_of_two_numbers_with_product_5(tup1, tup2):\n        return tuple(a * b for a, b in zip(tup1, tup2))\n    \n    # Create a function that takes in two tuples and returns the product of the numbers from the first tuple, but only if the first element is the product of the produc"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        test_tup1 = tuple(test_tup1)\n        test_tup2 = tuple(test_tup2)\n        assert isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple), \"Tuple must be a tuple.\"\n        assert len(test_tup1) == len(test_tup2), \"Tuple must be of the same length.\"\n        assert all([isinstance(element, (int, float)) for element in test_tup1]), \"Elements must be numeric.\"\n        assert all([isinstance(element, (int, float)) for element in test_tup2]), \"Elements must be numeric.\"\n        assert len(test_tup1) == len(test_tup2), \"Length must be the same.\"\n        assert all([isinstance(element, (int, float)) for element in test_tup1]), \"Elements must be numeric.\"\n        assert all([isinstance(element, (int, float)) for element in test_tup2]), \"Elements must be numeric.\"\n        assert all([isinstance(element, (int, float)) for element in test_tup1] <= [element for element in test_tup2]), \"Elements must be numeric.\"\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = list1[:]\n    new_list.append([])\n    new_list.append([])\n    for i in range(L):\n        new_list[0].append(list1[i][:])\n        new_list[1].append(list1[i][:])\n        new_list[0].append(list1[i][:])\n        new_list[1].append(list1[i][:])\n    return tuple(new_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_1 = list1[:L]\n    list_2 = list1[L:]\n    return list_1, list_2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    assert L > 0, \"L must be greater than 0.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert L <= len(list1)\n    \n    splitted1 = []\n    splitted2 = []\n    \n    for i in range(len(list1)):\n        splitted1.append(list1[i][0:L])\n        splitted2.append(list1[i][L:])\n    \n    return splitted1, splitted2\n    \ndef find_words(list1):\n    '''\n    Write a function that takes in a list and returns a tuple of two elements where the first element is the word, and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    words = []\n    words2 = []\n    \n    for i in list1:\n        words.append(i[1])\n        words2.append(i[0])\n    \n    return words, words2\n    \ndef count_digits(list1):\n    '''\n    Write a function that takes in a list and returns the number of digits in the list.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    \n    return count\n    \ndef find_numbers(list1):\n    '''\n    Write a function that takes in a list and returns a tuple of two elements where the first element is the number of digits in the list and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    numbers = []\n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            numbers.append(int(i))\n        else:\n            words.append(i)\n    \n    return numbers, words\n    \ndef find_even_numbers(list1):\n    '''\n    Write a function that takes in a list and returns a tuple of two elements where the first element is the number of even numbers in the list and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    evens = []\n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            if i % 2 == 0:\n                evens.append(i)\n        else:\n            words.append(i)\n    \n    return evens, words\n    \ndef find_sum(list1):\n    '''\n    Write a function that takes in a list and returns a tuple of two elements where the first element is the sum of the list, and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    sum = 0\n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            sum += int(i)\n        else:\n            words.append(i)\n    \n    return sum, words\n    \ndef find_sum_word(list1):\n    '''\n    Write a function that takes in a list and returns a tuple of two elements where the first element is the sum of the list, and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    sum = 0\n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            sum += int(i)\n        else:\n            words.append(i)\n    \n    return sum, words\n    \ndef find_sub_list(list1, sublist):\n    '''\n    Write a function that takes in a list and a sublist and returns a tuple of two elements where the first element is the list, and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            words.append(int(i))\n        else:\n            words.append(i)\n            \n    return words, sublist\n    \ndef find_sub_list_word(list1, sublist):\n    '''\n    Write a function that takes in a list and a sublist and returns a tuple of two elements where the first element is the list, and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            words.append(int(i))\n        else:\n            words.append(i)\n            \n    return words, sublist\n    \ndef find_sub_list_word_2(list1, sublist):\n    '''\n    Write a function that takes in a list and a sublist and returns a tuple of two elements where the first element is the list, and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            words.append(int(i))\n        else:\n            words.append(i)\n            \n    return words, sublist\n    \ndef find_sum_word_2(list1, sublist):\n    '''\n    Write a function that takes in a list and a sublist and returns a tuple of two elements where the first element is the sum of the list, and the second is the word.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    sum = 0\n    words = []\n    \n    for i in list1:\n        if i.isdigit():\n            sum += int(i)\n        else:\n            words.append(i)\n            \n    return words, sublist\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list with only the items that occur only once.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    result = []\n    seen = []\n    \n    for i in list1:\n        if i not in seen:\n            seen.append(i)\n        else:\n            result.append(i)\n    \n    return result\n    \ndef remove_duplicates_2(list1):\n    '''\n    Write a function that takes in a list and returns a new list with only the items that occur only once and whose frequency is 2.\n    '''\n    assert len(list1) > 0, \"List cannot be empty.\"\n    \n    #\n    # YOUR CODE HERE\n    #\n    assert len(list1) <= 3, \"List too long.\"\n    \n    result = []\n    seen = set()\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    count = 0\n    if len(list1) <= L:\n        return (list1, count)\n    else:\n        for i in range(0,len(list1)):\n            if count == L - 1:\n                return (list1[:count], list1[count:])\n            else:\n                count = count + 1\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #You need to write this function\n    def split(list1, L):\n        '''\n        Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n        '''\n        #You need to write this function\n        return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 1:\n        return list1, list1\n    else:\n        return split_two_parts(list1[0:L], L-1) + (list1[L:], list1[:L])\n    \ndef merge_lists(list1, list2):\n    '''\n    Write a function that takes two lists as arguments and combines them into a new list and returns the resulting list.\n    '''\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    elif len(list2[0]) == len(list1[0]):\n        return merge_lists(list1[1:], list2[1:])\n    else:\n        return [list1[0]] + merge_lists(list1[1:], list2[1:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Loop through the length of the list\n    for i in range(L):\n        # Take the last value of the list\n        last = list1[i]\n        # Iterate through the other list\n        for j in range(L - i):\n            # Add the values to a temporary list\n            temp = list1[j + i]\n            # Replace the value\n            list1[j + i] = temp\n        # Return the two lists\n        return list1, last\n    # If the length of the list is not divisible by 2, the length will be odd, so subtract one from the length\n    if L % 2 == 1:\n        list1[L-1], list1[L-1] = list1[L-1], list1[L-1]\n    return list1, list1[0]\n    \n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # TODO: Create a function that takes in a list and a number L and returns a tuple of the given list, but in the form of a list of lists, where each inner list contains exactly the number of elements that are in the given list before it.\n    # Hint: You can use indexing to access the elements of the list.\n    # Hint: You can use the len function to find the length of the given list.\n    # Hint: You can use a for loop to iterate through the list and add the number of elements to each element of the list and print it out.\n    \n    # TODO: Write a function that takes in a list and a integer L and returns a tuple of the given list, but in the form of a list of lists.\n    # Hint: You can use indexing to access the elements of the list.\n    # Hint: You can use the len function to find the length of the given list.\n    # Hint: You can use a for loop to iterate through the list and add the number of elements to each element of the list and print it out.\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = 0\n    if h_age >= 3:\n        d_age = h_age - 3\n    elif h_age >= 2:\n        d_age = h_age - 2\n    elif h_age >= 1:\n        d_age = h_age - 1\n    return d_ag"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the years in dog years.\n    # You'll need to write an equation that takes in the number of dog years as input.\n    # Return the number of dog years in the number of dog years.\n    # Hint: The function is already defined for you and you don't have to modify it\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=1:\n        return f'{h_age} is a dog.'\n    elif h_age>=2 and h_age <=4:\n        return f'{h_age} is a dog.'\n    else:\n        return f'{h_age} is a dog.'\n        \nprint(dog_age(5))\nprint(dog_age(6))\nprint(dog_age(8)"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError(\"Error: h_age can't be less than 0\")\n    return h_age*365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE!\n    def dog_age_years(h_age):\n        # Declare a function named dog_age_years. The parameter h_age should be a list containing dogs' age in years.\n        # Declare a variable named dog_age_years_result. This variable will store the result of the dog_age_years() function.\n        # Note: Don't forget the () at the end of the string.\n        # E.g. dog_age_years_result =  18\n        # Hint: Add an if block.\n        if len(h_age) < 1:\n            dog_age_years_result = 0\n        elif len(h_age) > 1:\n            dog_age_years_result = 0\n        else:\n            dog_age_years_result = h_age[0]\n        # Return the result of the function.\n        return dog_age_years_result\n    # Return the result of the dog_age_years() function.\n    return dog_age_years(h_age)"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 1\n    if h_age < 3:\n        dog_years = 0\n    elif h_age < 6:\n        dog_years = 1\n    else:\n        dog_years = 2\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365 * 2\n    \ndef dog_weight(h_weight):\n    '''\n    Write a function to calculate a dog's weight in kilograms.\n    '''\n    return h_weight * 2.2\n    \ndef trip_duration(trip_duration):\n    '''\n    Write a function that computes the total trip duration.\n    '''\n    return trip_duration * 60\n    \ndef main():\n    '''\n    Execute the program.\n    '''\n    print(\"Compute car's age.\\n\")\n    h_age = float(input(\"Enter the age: \"))\n    \n    print(\"Compute car's weight.\\n\")\n    h_weight = float(input(\"Enter the weight: \"))\n    \n    print(\"Compute dog's age.\\n\")\n    h_age_dog = dog_age(h_age)\n    \n    print(\"Compute dog's weight.\\n\")\n    h_weight_dog = dog_weight(h_weight)\n    \n    print(\"Compute trip duration.\\n\")\n    trip_duration = trip_duration(h_weight_dog + h_age_dog)\n    \n    print(\"Compute total trip duration: \", trip_duration)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = 0\n    if h_age >= 0 and h_age <= 1:\n        age_in_years = h_age\n    elif h_age > 2:\n        age_in_years = h_age - 1\n    else:\n        age_in_years = 0\n    return age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    count = 0\n    for i in range(len(S)):\n        #print(i)\n        if count%step==0:\n            res.append(S[i])\n        else:\n            pass\n        count+=1\n    return res\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split = []\n    for x in range(0, len(S), step):\n        split.append(S[x:x+step])\n    return split\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n    \ndef main():\n    print('Welcome to the number guessing game!')\n    print('You will have to guess the number between 0 and 100.')\n    print('Each time, you will be given a number from 0 to 100.')\n    print('The game will run till you reach the number you guessed.')\n    \n    print('\\n')\n    \n    while True:\n        print('The numbers you will have to guess are from 0 to 100.')\n        print('\\n')\n        \n        print('Play!')\n        print('\\n')\n        \n        guesses = 0\n        \n        # Ask user to enter number to guess\n        guess_int = int(input('Guess a number between 0 and 100: '))\n        \n        # Check if number is between 0 and 100\n        if guess_int >= 0 and guess_int <= 100:\n            # Check if number is valid\n            if guess_int >= 0 and guess_int <= 99:\n                # Ask user if they are correct\n                correct_guess = (guess_int == player_int)\n                \n                # Print out information about the user correct guess\n                if correct_guess:\n                    print('You win!')\n                else:\n                    print('You lose.')\n                \n                print('\\n')\n                \n                # Add guessed number to user's number of guesses\n                guesses += 1\n                \n                # Print out number of guesses\n                if guesses == 1:\n                    print('Number of guesses: ', guesses)\n                \n                # Check if user guessed correct number\n                elif correct_guess:\n                    print('You got it!')\n                    print('Correct number was: ', guess_int)\n                    \n                    # Check if user guessed correct number\n                    if guess_int == player_int:\n                        print('Congratulations!')\n                        \n                        # Keep looping until user wins\n                        break\n                \n                else:\n                    print('You lost!')\n                    \n            else:\n                # Tell user to try again\n                print('Wrong number! Try again!')\n                print('\\n')\n        \n        # Tell user if they entered an invalid number\n        else:\n            print('Invalid number! Try again!')\n            print('\\n')\n        \n    print('\\n')\n    print('Thanks for playing!')\n    print('You have guessed the number in'+ str(guesses) +'guesses.')\n    print('If you guessed the right number in'+ str(guesses) +'guesses, it is'+ str(guess_int) + '!')\n    print('If you guessed the wrong number, it is'+ str(guess_int) + '!')\n    print('\\n')\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_S = []\n    for i in range(0,len(S),step):\n        new_S.append(S[i:i+step])\n    return new_S\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = sorted(S)\n    # return a list of lists\n    return [[S[i*step:(i+1)*step]] for i in range(len(S)//step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_ = []\n    for x in range(0, len(S), step):\n        list_.append(S[x:x+step])\n    return list_\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0,len(S), step):\n        lst.append(S[i:i+step])\n    return lst\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    my_list = []\n    for i in range(0, len(S), step):\n        my_list.append(S[i:i+step])\n    return my_list\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return math.pow(l,3)*4\n    \ndef area_of_cylinder(r,h):\n    '''\n    Write a function that returns the volume of a cylinder given its radius and height.\n    '''\n    return math.pi*r*h\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    from mpl_toolkits.mplot3d import Axes3D\n    from matplotlib import cm\n    from matplotlib.ticker import LinearLocator, FormatStrFormatter\n    from matplotlib.colors import ListedColormap\n    from matplotlib import pyplot as plt\n    from matplotlib import cm\n    import numpy as np\n    import os\n    import sys\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    import matplotlib.pyplot as plt\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if i!=j or j!=k or k!=i:\n                    print(' ', end='')\n            print('\\r')\n        print('\\n', end='')\n    print('')\n    return 0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    from numpy import sin, cos, pi\n    import numpy as np\n    def f_function(x):\n        return (3*x**3 + 2*x**2 + 1)**0.5\n    def f_der(x):\n        return 3*x**3 + 2*x**2\n    def f_f(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_der_f(x):\n        return (3*x**3 + 2*x**2)\n    def f_f_der(x):\n        return (3*x**3 + 2*x**2)\n    def f_f_der_f(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_der_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_der_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_der_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_der_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_der_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3*x**3 + 2*x**2)**0.5\n    def f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_der(x):\n        return (3"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Write your code here\n    # Line 22\n    s=l*1.27;\n    # Line 26\n    # Line 22\n    # Line 26\n    # Line 26\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # get side length of the cube\n    sideLength = float(l)\n    # if side length is 0 or less, return 0\n    if sideLength <= 0:\n        return 0\n    # get side length of the cube and round it\n    sideLength = round(sideLength)\n    # get the base height of the cube\n    baseHeight = float(3.14159265359/sideLength)\n    # get the area of a triangle\n    areaOfTriangle = (2*sideLength) * (sideLength**2)\n    # get the area of a cube\n    areaOfCube = sideLength**2 * (baseHeight/3)\n    # get the volume of the cube\n    volumeOfCube = areaOfCube * sideLength**3\n    # get the surface area of the cube\n    surfaceArea = areaOfCube * baseHeight\n    # return the surface area and volume\n    return surfaceArea, volumeOfCube\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import pi\n    area = 0\n    area2 = 0\n    for i in range(len(l)):\n        if i == 0:\n            area2 += l[i]**2\n        else:\n            area += (l[i]**2)\n    area = area2 / 4\n    area = pi * area ** (1/3)\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l**2\n    print(\"\\n#Lateral surface area of cube = \", l, \"square feet\")\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if(n<=0):\n        return\n    else:\n        sums = 0\n        for i in range(1, n, 2):\n            sums = sums + i**2\n        return sums\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n==1:\n        return n\n    else:\n        return n*square_Sum(n-1)\n    \n    return n*n\n    \nprint(square_Sum(4))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in range(0, n):\n        if i % 2!= 0:\n            even_sum += i**2\n        else:\n            odd_sum += i**2\n    return even_sum + odd_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum = sum + i**2\n    print('The sum of the squares of the first', n, 'natural numbers is', sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i * i\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i%2 == 0:\n            sum_of_squares += i**2\n    print(sum_of_squares)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 0\n    if n == 2: return 1\n    return find_star_num(n - 1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n+1):\n        if i * (n+1) == n:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1):\n        print(i)\n        print(int(i))\n    return n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1: \n        return n \n    return find_star_num(n-1) + n \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    s = list(range(1,n+1))\n    for i in range(n):\n        if n%s[i]==0:\n            return i+1\n    return 0\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1 or n == 0: \n        return n\n    else: \n        return find_star_num(n-1) + 3 * find_star_num(n-2) \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0: \n        raise ValueError(\"You must have a positive number\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return 5\n    if n == 4: \n        return 7\n    if n == 5: \n        return 9\n    if n == 6: \n        return 11\n    if n == 7: \n        return 13\n    if n == 8: \n        return 15\n    if n == 9: \n        return 17\n    if n == 10: \n        return 19\n    if n == 11: \n        return 23\n    if n == 12: \n        return 25\n    if n == 13: \n        return 27\n    if n == 14: \n        return 29\n    if n == 15: \n        return 31\n    if n == 16: \n        return 33\n    if n == 17: \n        return 35\n    if n == 18: \n        return 37\n    if n == 19: \n        return 39\n    if n == 20: \n        return 41\n    if n == 21: \n        return 43\n    if n == 22: \n        return 45\n    if n == 23: \n        return 47\n    if n == 24: \n        return 49\n    if n == 25: \n        return 51\n    if n == 26: \n        return 53\n    if n == 27: \n        return 55\n    if n == 28: \n        return 57\n    if n == 29: \n        return 59\n    if n == 30: \n        return 61\n    if n == 31: \n        return 63\n    if n == 32: \n        return 65\n    if n == 33: \n        return 67\n    if n == 34: \n        return 69\n    if n == 35: \n        return 71\n    if n == 36: \n        return 73\n    if n == 37: \n        return 75\n    if n == 38: \n        return 77\n    if n == 39: \n        return 79\n    if n == 40: \n        return 81\n    if n == 41: \n        return 83\n    if n == 42: \n        return 85\n    if n == 43: \n        return 87\n    if n == 44: \n        return 89\n    if n == 45: \n        return 91\n    if n == 46: \n        return 93\n    if n == 47: \n        return 95\n    if n == 48: \n        return 97\n    if n == 49: \n        return 99\n    if n == 50: \n        return 101\n    if n == 51: \n        return 103\n    if n == 52: \n        return 105\n    if n == 53: \n        return 107\n    if n == 54: \n        return 109\n    if n == 55: \n        return 111\n    if n == 56: \n        return 113\n    if n == 57: \n        return 115\n    if n == 58: \n        return 117\n    if n == 59: \n        return 119\n    if n == 60: \n        return 121\n    if n == 61: \n        return 123\n    if n == 62: \n        return 125\n    if n == 63: \n        return 127\n    if n == 64: \n        return 129\n    if n == 65: \n        return 131\n    if n == 66: \n        return 133\n    if n == 67: \n        return 135\n    if n == 68: \n        return 137\n    if n == 69: \n        return 139\n    if n == 70: \n        return 141\n    if n == 71: \n        return 143\n    if n == 72: \n        return 145\n    if n == 73: \n        return 147\n    if n == 74: \n        return 149\n    if n == 75: \n        return 151\n    if n == 76: \n        return 153\n    if n == 77: \n        return 155\n    if n == 78: \n        return 157\n    if n == 79: \n        return 159\n    if n == 80: \n        return 161\n    if n == 81: \n        return 163\n    if n == 82: \n        return 165\n    if n == 83: \n        return 167\n    if n == 84: \n        return 169\n    if n == 85: \n        return 171\n    if n == 86: \n        return 173\n    if n == 87: \n        return 175\n    if n == 88: \n        return 177\n    if n == 89: \n        return 179\n    if n == 90: \n        return 181\n    if n == 91: \n        return 183\n    if n == 92: \n        return 185\n    if n == 93: \n        return 187\n    if n == 94: \n        return 189\n    if n == 95: \n        return 191\n    if n == 96: \n        return 193\n    if n == 97: \n        return 195\n    if n == 98: \n        return 197\n    if n == 99: \n        return 199\n    if n == 100: \n        return 201\n    if n == 101: \n        return 203\n    if n == 102: \n        return 205\n    if n == 103: \n        return 207\n    if n == 104: \n        return 209\n    if n == 105: \n        return 211\n    if n == 106: \n        return 213\n    if n == 107: \n        return 215\n    if n == 108: \n        return 217\n    if n == 109: \n        return 219\n    if n == 110: \n        return 221\n    if n == 111: \n        return 223\n    if n == 112: \n        return 225\n    if n == 113: \n        return 227\n    if n == 114: \n        return 229\n    if n == 115: \n        return 231\n    if n == 116: \n        return 233\n    if n == 117: \n        return 235\n    if n == 118: \n        return 237\n    if n == 119: \n        return 239\n    if n == 120: \n        return 241\n    if n == 121: \n        return 243\n    if n == 122: \n        return 245\n    if n == 123: \n        return 247\n    if n == 124: \n        return 249\n    if n == 125: \n        return 251\n    if n == 126: \n        return 253\n    if n == 127: \n        return 255\n    if n == 128: \n        return 257\n    if n == 129: \n        return 259\n    if n == 130: \n        return 261\n    if n == 131: \n        return 263\n    if n == 132: \n        return 265\n    if n == 133: \n        return 267\n    if n == 134: \n        return 269\n    if n == 135: \n        return 271\n    if n == 136: \n        return 273\n    if n == 137: \n        return 275\n    if n == 138: \n        return 277\n    if n == 139: \n        return 279\n    if n == 140: \n        return 281\n    if n == 141: \n        return 283\n    if n == 142: \n        return 285\n    if n == 143: \n        return 287\n    if n == 144: \n        return 289\n    if n == 145: \n        return 291\n    if n == 146: \n        return 293\n    if n == 147: \n        return 295\n    if n == 148: \n        return 297\n    if n == 149: \n        return 299\n    if n == 150: \n        return 301\n    if n == 151: \n        return 303\n    if n == 152: \n        return 305\n    if n == 153: \n        return 307\n    if n == 154: \n        return 309\n    if n == 155: \n        return 311\n    if n == 156: \n        return 313\n    if n == 157: \n        return 315\n    if n == 158: \n        return 317\n    if n == 159: \n        return 319\n    if n == 160: \n        return 321\n    if n == 161: \n        return 323\n    if n == 162: \n        return 325\n    if n == 163: \n        return 327\n    if n == 164: \n        return 329\n    if n == 165: \n        return 331\n    if n == 166: \n        return 333\n    if n == 167: \n        return 335\n    if n == 168: \n        return 33"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n, 0, -1):\n        if (i*i)%10 == 1 and (i*i)%10 == 9:\n            return i\n        if (i*i)%10 == 7:\n            return i\n        if (i*i)%10 == 3:\n            return i\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for char in k:\n        ascii = ord(char)\n        if ascii >= 65:\n            ascii = ascii - 65\n        if ascii <= 122:\n            ascii = ascii + 32\n        else:\n            ascii = ascii - 122\n        result = chr(ascii)\n        print(f'{k} -> {result}')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \" \":\n        k = \" \"\n    return chr(ord(k) - ord(\"A\"))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if not isinstance(k, str):\n        raise TypeError('k must be a string')\n    if len(k) > 255:\n        raise ValueError('k cannot be more than 255 characters')\n    \n    def char_to_ascii(c):\n        '''\n        Convert the given character into the ascii code, if possible.\n        '''\n        if c in '\\n\\r\\t':\n            return ord(c)\n        else:\n            return ord(c) + ord('A')\n    \n    def ascii_to_char(k):\n        '''\n        Convert the ascii code of the given character to its\n        character.\n        '''\n        if not isinstance(k, int):\n            raise TypeError('k must be a number')\n        if not (0 <= k < 256):\n            raise ValueError('k must be in the range [0, 255]')\n        return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ch = 'a'\n    for c in k:\n        if (ord(c) >= ord('a') and ord(c) <= ord('z')):\n            ch = chr((ord(c) - ord('a')) % 256)\n        else:\n            ch = chr(ord(c) % 256)\n    return ch\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    value = ord(k)\n    if value > 127:\n        value = value - 128\n    return value\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 0\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    return ord(k) - ord('A') + ord('a')\n    \ndef main():\n    '''\n    Test program.\n    '''\n    print('H A N G M A N'.center(50, '-'))\n    print('-' * 15)\n    print('What is the hex code of the character \"{}\"'.format('a'))\n    print('-' * 15)\n    \n    print('{:>3}'.format(ascii_value('a')))\n    print('{:>3}'.format(ascii_value('A')))\n    print('{:>3}'.format(ascii_value('a')))\n    print('{:>3}'.format(ascii_value('A')))\n    \n    print()\n    print('{:>3}'.format(ascii_value('0')))\n    print('{:>3}'.format(ascii_value('1')))\n    print('{:>3}'.format(ascii_value('2')))\n    print('{:>3}'.format(ascii_value('3')))\n    print('{:>3}'.format(ascii_value('4')))\n    print('{:>3}'.format(ascii_value('5')))\n    print('{:>3}'.format(ascii_value('6')))\n    print('{:>3}'.format(ascii_value('7')))\n    print('{:>3}'.format(ascii_value('8')))\n    print('{:>3}'.format(ascii_value('9')))\n    print('{:>3}'.format(ascii_value('A')))\n    print('{:>3}'.format(ascii_value('a')))\n    \n    print()\n    print('{:>3}'.format(ascii_value('3')))\n    print('{:>3}'.format(ascii_value('7')))\n    print('{:>3}'.format(ascii_value('9')))\n    print('{:>3}'.format(ascii_value('0')))\n    print('{:>3}'.format(ascii_value('a')))\n    print('{:>3}'.format(ascii_value('b')))\n    \n    print()\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    print('{:>3}'.format(ascii_value('D')))\n    \n    print()\n    print('{:>3}'.format(ascii_value('A')))\n    print('{:>3}'.format(ascii_value('C')))\n    print('{:>3}'.format(ascii_value('E')))\n    print('{:>3}'.format(ascii_value('F')))\n    print('{:>3}'.format(ascii_value('G')))\n    print('{:>3}'.format(ascii_value('H')))\n    print('{:>3}'.format(ascii_value('I')))\n    print('{:>3}'.format(ascii_value('K')))\n    print('{:>3}'.format(ascii_value('L')))\n    print('{:>3}'.format(ascii_value('M')))\n    print('{:>3}'.format(ascii_value('N')))\n    print('{:>3}'.format(ascii_value('O')))\n    print('{:>3}'.format(ascii_value('P')))\n    print('{:>3}'.format(ascii_value('Q')))\n    print('{:>3}'.format(ascii_value('R')))\n    print('{:>3}'.format(ascii_value('S')))\n    print('{:>3}'.format(ascii_value('T')))\n    print('{:>3}'.format(ascii_value('U')))\n    print('{:>3}'.format(ascii_value('V')))\n    print('{:>3}'.format(ascii_value('W')))\n    print('{:>3}'.format(ascii_value('X')))\n    print('{:>3}'.format(ascii_value('Y')))\n    print('{:>3}'.format(ascii_value('Z')))\n    print('{:>3}'.format(ascii_value('a')))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return '\\x1b['+str(k)+';'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            even_sum+=arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = []\n    for num in arr:\n        if num % 2 == 0:\n            even_index.append(num)\n    return sum(even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = []\n    for x in arr:\n        if x % 2 == 0:\n            even_numbers.append(x)\n    sum = 0\n    for i in range(len(even_numbers)):\n        sum += even_numbers[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([num for num in arr if num % 2 == 0 and num % 10 == 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum=0\n    for i in range(0,len(arr)):\n        if(arr[i]%2==0):\n            even_sum=even_sum+arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0: \n        print(\"Please enter a positive number\") \n        return\n    if n == 0: \n        return 0\n    else: \n        a = 1\n        for i in range(1, n): \n            a *= i \n        return a \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #Your code here\n    return 5**n\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i=2\n    while i<=n:\n        sum=0\n        for j in range(1,i):\n            sum+=j\n        if i%2==0:\n            sum+=i\n        print(sum)\n        i+=1\nn=int(input(\"Enter the number of terms to find the sum of the first n even natural numbers:\"))\neven_Power_Sum(n)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n): \n        result += i ** 5\n    return result \ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n): \n        result += i ** 4\n    return result\ndef is_prime(n): \n    '''\n    Write a python function that takes in an integer n and returns a Boolean value. If n is a prime number, return True, otherwise, return False.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n > 2: \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    def Power_Sum(n):\n        # print(n)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return Power_Sum(n - 1) + Power_Sum(n - 2)\n    return Power_Sum(n)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # define the function to return the sum of the first n even natural numbers\n    def even_power_sum(n):\n        return sum([x**2 for x in range(1,n,2) if x%2==0])\n    print(even_power_sum(n))\neven_Power_Sum(10)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n+1)**5 + even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[2])\n    return rear_list\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for element in test_list:\n        result.append(element[1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: Write your solution here\n    front_list = []\n    rear_list = []\n    for element in test_list:\n        front_list.append(element[0])\n        rear_list.append(element[1])\n    return front_list, rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: (x[1], x[0]), test_list))\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(0, len(test_list)):\n        rear.append(test_list[i][2])\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract_list = []\n    for value in test_list:\n        rear_extract_list.append(value[1])\n    return rear_extract_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    '''\n    EXAMPLE:\n    >>> rear_extract(['a', ('b', 1), ('c', 2), ('d', 3), ('e', 4)])\n    ['a', ('b', 1), ('c', 2), ('d', 3), ('e', 4)]\n    >>> rear_extract(['a', ('b', 1), ('c', 2), ('d', 3), ('e', 4)])\n    ['a', ('b', 1), ('c', 2), ('d', 3), ('e', 4)]\n    '''\n    return test_list"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[-1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for t in test_list:\n        rear.append(t[1])\n    return rear\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    i = 0\n    while i < len(test_tup1) - 1:\n        if test_tup2[i] < test_tup1[i]:\n            test_tup1[i+1] -= test_tup1[i]\n            del test_tup1[i]\n            i = 0\n        else:\n            i += 1\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub1 = 0\n    sub2 = 0\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list1.reverse()\n    test_list2.reverse()\n    if len(test_list1) > len(test_list2):\n        test_list2.reverse()\n        test_list1.reverse()\n    if len(test_list2) > len(test_list1):\n        test_list1.reverse()\n        test_list2.reverse()\n    for i in range(len(test_list1)):\n        test_list1[i] = test_list1[i] - test_list2[i]\n    return tuple(test_list1)\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Write your code here.\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[0] * test_tup2[1] - test_tup1[1] * test_tup2[0]\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(\"Test 1:\", test_tup1, test_tup2)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            failed += 1\n        else:\n            passed += 1\n    if passed > 0:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"Passed\", passed, \"failed\", failed)\n    passed = 0\n    failed = 0\n    for i in range(len(test_tup2)):\n        if test_tup1[i]!= test_tup2[i]:\n            faile"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Inputs must have same length.')\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1.append(test_tup2[0])\n    test_tup1.append(test_tup2[1])\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + math.pow(2,i) * even_binomial_Coeff_Sum(i + 1)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        return -1 \n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 6\n    if n == 5: \n        return 12\n    if n == 6: \n        return 24\n    if n == 7: \n        return 36\n    if n == 8: \n        return 48\n    if n == 9: \n        return 60\n    if n == 10: \n        return 90\n    if n == 11: \n        return 120\n    if n == 12: \n        return 240\n    if n == 13: \n        return 360\n    if n == 14: \n        return 480\n    if n == 15: \n        return 600\n    if n == 16: \n        return 720\n    if n == 17: \n        return 840\n    if n == 18: \n        return 960\n    if n == 19: \n        return 1200\n    if n == 20: \n        return 1440\n    if n == 21: \n        return 1600\n    if n == 22: \n        return 1800\n    if n == 23: \n        return 2100\n    if n == 24: \n        return 2200\n    if n == 25: \n        return 2400\n    if n == 26: \n        return 2600\n    if n == 27: \n        return 2700\n    if n == 28: \n        return 2800\n    if n == 29: \n        return 2900\n    if n == 30: \n        return 3000\n    if n == 31: \n        return 3100\n    if n == 32: \n        return 3150\n    if n == 33: \n        return 3350\n    if n == 34: \n        return 3450\n    if n == 35: \n        return 3550\n    if n == 36: \n        return 3550\n    if n == 37: \n        return 3650\n    if n == 38: \n        return 3750\n    if n == 39: \n        return 3750\n    if n == 40: \n        return 3750\n    if n == 41: \n        return 3850\n    if n == 42: \n        return 3900\n    if n == 43: \n        return 3950\n    if n == 44: \n        return 4000\n    if n == 45: \n        return 4500\n    if n == 46: \n        return 4650\n    if n == 47: \n        return 4500\n    if n == 48: \n        return 4500\n    if n == 49: \n        return 4500\n    if n == 50: \n        return 4500\n    if n == 51: \n        return 4650\n    if n == 52: \n        return 4650\n    if n == 53: \n        return 4650\n    if n == 54: \n        return 4650\n    if n == 55: \n        return 4500\n    if n == 56: \n        return 4500\n    if n == 57: \n        return 4500\n    if n == 58: \n        return 4500\n    if n == 59: \n        return 4500\n    if n == 60: \n        return 4500\n    if n == 61: \n        return 4500\n    if n == 62: \n        return 4500\n    if n == 63: \n        return 4500\n    if n == 64: \n        return 4500\n    if n == 65: \n        return 4650\n    if n == 66: \n        return 4650\n    if n == 67: \n        return 4650\n    if n == 68: \n        return 4650\n    if n == 69: \n        return 4650\n    if n == 70: \n        return 4650\n    if n == 71: \n        return 4650\n    if n == 72: \n        return 4650\n    if n == 73: \n        return 4650\n    if n == 74: \n        return 4650\n    if n == 75: \n        return 4650\n    if n == 76: \n        return 4650\n    if n == 77: \n        return 4650\n    if n == 78: \n        return 4650\n    if n == 79: \n        return 4650\n    if n == 80: \n        return 4650\n    if n == 81: \n        return 4650\n    if n == 82: \n        return 4650\n    if n == 83: \n        return 4650\n    if n == 84: \n        return 4650\n    if n == 85: \n        return 4650\n    if n == 86: \n        return 4650\n    if n == 87: \n        return 4650\n    if n == 88: \n        return 4650\n    if n == 89: \n        return 4650\n    if n == 90: \n        return 4650\n    if n == 91: \n        return 4650\n    if n == 92: \n        return 4650\n    if n == 93: \n        return 4650\n    if n == 94: \n        return 4650\n    if n == 95: \n        return 4650\n    if n == 96: \n        return 4650\n    if n == 97: \n        return 4650\n    if n == 98: \n        return 4650\n    if n == 99: \n        return 4650\n    if n == 100: \n        return 4650\n    if n == 101: \n        return 4650\n    if n == 102: \n        return 4650\n    if n == 103: \n        return 4650\n    if n == 104: \n        return 4650\n    if n == 105: \n        return 4650\n    if n == 106: \n        return 4650\n    if n == 107: \n        return 4650\n    if n == 108: \n        return 4650\n    if n == 109: \n        return 4650\n    if n == 110: \n        return 4650\n    if n == 111: \n        return 4650\n    if n == 112: \n        return 4650\n    if n == 113: \n        return 4650\n    if n == 114: \n        return 4650\n    if n == 115: \n        return 4650\n    if n == 116: \n        return 4650\n    if n == 117: \n        return 4650\n    if n == 118: \n        return 4650\n    if n == 119: \n        return 4650\n    if n == 120: \n        return 4650\n    if n == 121: \n        return 4650\n    if n == 122: \n        return 4650\n    if n == 123: \n        return 4650\n    if n == 124: \n        return 4650\n    if n == 125: \n        return 4650\n    if n == 126: \n        return 4650\n    if n == 127: \n        return 4650\n    if n == 128: \n        return 4650\n    if n == 129: \n        return 4650\n    if n == 130: \n        return 4650\n    if n == 131: \n        return 4650\n    if n == 132: \n        return 4650\n    if n == 133: \n        return 4650\n    if n == 134: \n        return 4650\n    if n == 135: \n        return 4650\n    if n == 136: \n        return 4650\n    if n == 137: \n        return 4650\n    if n == 138: \n        return 4650\n    if n == 139: \n        return 4650\n    if n == 140: \n        return 4650\n    if n == 141: \n        return 4650\n    if n == 142: \n        return 4650\n    if n == 143: \n        return 4650\n    if n == 144: \n        return 4650\n    if n == 145: \n        return 4650\n    if n == 146: \n        return 4650\n    if n == 147: \n        return 4650\n    if n == 148: \n        return 4650\n    if n == 149: \n        return 4650\n    if n == 150: \n        return 4650\n    if n == 151: \n        return 4650\n    if n == 152: \n        return 4650\n    if n == 153: \n        return 4650\n    if n == 154: "
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(n*math.log(2**n,2))\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return int(n*math.log(2**n,2))\ndef binomial_coefficient_List( n, k): \n    '''\n    Write a python function that takes in two positive integers n and k, and returns an array containing the sum of the binomial coefficients of n to k for n, and the sum of the binomial coefficients of k to n.\n    '''\n    return [even_binomial_Coeff_Sum(n), odd_binomial_Coeff_Sum(k)]\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    \n    if n == 1: \n        return 1\n    \n    if n == 2: \n        return 1\n    \n    if n % 2 == 0: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n / 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # your code goes here\n    # define sum\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(i) * math.factorial(n - i) / math.factorial(i)\n    # return sum\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n == 0):\n        return 0\n    else:\n        if(n == 1):\n            return 1\n        else:\n            return n*even_binomial_Coeff_Sum(n-1)\n    \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if(n == 0):\n        return 0\n    else:\n        if(n == 1):\n            return 1\n        else:\n            return n*odd_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    l = [0]*n\n    for i in range(1,n):\n        l[i] = (i**2 + (1/4) + 2/5*(i**3))\n    return sum(l)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        # if n = 0, \n        # return the sum of the first 2 integers \n        if n == 1:\n            return 1\n        else:\n            sum = 0\n            for i in range(0, n, 2):\n                sum += even_binomial_Coeff_Sum(i)\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #The formula for the sum of even binomial coefficients is equal to the sum of the multiplication of the binomial coefficients of even numbers\n    #Divide by two, the results will be the binomial coefficient of odd numbers and the sum of the binomial coefficients\n    return int(math.factorial(2*n) / (math.factorial(n) * math.factorial(2*n-1)))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += (n % 2) * math.pow(n, 2)\n        n = n // 2\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    c=3.14*(r**2)*h\n    return c\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*h)**2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    print(\"Volume of a cylinder is: \")\n    print(\"This is a volume of a cylinder with a radius of {r}, height of {h}\".format(r=r,h=h))\n    \n    return(4/3 * pi * r**3 * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    volume = 4*3.14*(r*h)\n    print('Volume of the cylinder is :',volume)\n    \n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*np.pi*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    c = 3.14\n    volume = (4/3)*(r**3)*(h**3)\n    print(volume)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4*pi*r**2 *h**2\n    print(volume)\n    return volume\nvolume_cylinder(2,3"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(\"Volume of a cylinder with radius \" + str(r) + \" and height \" + str(h) + \" is\",volume(r,h))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #Define volume\n    v= 4/3 * pi * r**3\n    #Return the volume\n    return v\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key] >= n:\n            dict[key] = dict[key]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict={}\n    for x in dict.keys():\n        if dict[x] >= n:\n            newdict[x]=dict[x]\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = dict.copy()\n    for x in new_dict.keys():\n        if new_dict[x] >= n:\n            del new_dict[x]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    temp = {}\n    if n in dict.keys():\n        for x in dict.keys():\n            if dict[x] >= n:\n                temp[x] = dict[x]\n    else:\n        temp = dict\n    return temp\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    return {k: v for k, v in dict.items() if v > n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.values()\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # YOUR CODE HERE\n    dic = dict()\n    for i in test_tup:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = test_tup[0]\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1] == first:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    s=set()\n    #loop through the given tuple and check for first element\n    for i in test_tup:\n        if i not in s:\n            s.add(i)\n    return len(s)\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    s=set()\n    #loop through the given tuple and check for last element\n    for i in test_tup:\n        if i not in s:\n            s.add(i)\n    return len(s)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    dict = {}\n    for i in test_tup:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    print(dict)\n    return len(dict)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code goes here\n    x = 0\n    for y in range(len(test_tup)):\n        if test_tup[y] < test_tup[x]:\n            x = y\n    print('The number of elements that occurs before the tuple element in the given tuple is {}'.format(y-x))\n    \n    \ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ncount_first_elements(test_tuple)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x = 0\n    y = 0\n    for i in test_tup:\n        if x == test_tup[0]:\n            y = test_tup.index(i)\n            x = test_tup.index(i, y+1)\n        else:\n            x += 1\n    return y+1\n    \ntest_tup = (4, 5, 6, 7, 8, 10, 11, 12)\nprint(count_first_elements(test_tup))"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # write your code here\n    ele = test_tup[0]\n    count_ele = 0\n    for x in range(len(test_tup)):\n        if ele == test_tup[x]:\n            count_ele += 1\n    return count_ele\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    temp_tup=list(test_tup)\n    counter=0\n    for elem in temp_tup:\n        if elem==temp_tup[0]:\n            counter+=1\n        else:\n            break\n    return counter\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    temp_tup=list(test_tup)\n    counter=0\n    for elem in temp_tup:\n        if elem==temp_tup[-1]:\n            counter+=1\n        else:\n            break\n    return counter\ndef is_sorted(test_list):\n    '''\n    Write a function to test if the list is sorted in ascending order.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return True\n    else:\n        return False\ndef count_by_count(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==0:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_2(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==0:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_3(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 1.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==1:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_4(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0, 1, and 2.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==1:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_5(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 1, 2, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==2:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_6(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0, 1, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==3:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_7(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 1, 2, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==4:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_8(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0, 1, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==5:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_9(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 1, 2, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==6:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_10(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0, 1, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==7:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_11(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0, 1, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==8:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_12(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 1, 2, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==9:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_13(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 1, 2, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==10:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_14(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0, 1, and 3.\n    '''\n    temp_list=[]\n    for elem in test_list:\n        if elem%7==11:\n            temp_list.append(elem)\n    if temp_list==sorted(temp_list):\n        return len(temp_list)\n    else:\n        return 0\ndef count_by_count_15(test_list):\n    '''\n    Write a function to count how many numbers in the given list are divisible by 7 and where the third number is 0, 1, and 3.\n    '''"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x = 0\n    for i in test_tup:\n        if i > x:\n            x = i\n    return x\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n % 10 == 4 or n % 10 == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # Base case: n = 1 or n = 0.\n    if n == 1 or n == 0:\n        return n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: return 1\n    elif n == 1: return 1\n    elif n == 2: return 2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return is_num_decagonal(n - 1) and is_num_decagonal(n - 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        k = k + 1\n        print('dec_',k)\n        print('dec_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        k = k + 1\n        print('pent_',k)\n        print('pent_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        k = k + 1\n        print('hex_',k)\n        print('hex_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_nonagonals(n):\n    '''\n    Write a function to find the nth nonagonals number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('non_',k)\n        print('non_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_full_house(n):\n    '''\n    Write a function to find the nth full house number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('full_',k)\n        print('full_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_triangle(n):\n    '''\n    Write a function to find the nth triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('tri_',k)\n        print('tri_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_right_angled_triangle(n):\n    '''\n    Write a function to find the nth right angled triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('right_tri',k)\n        print('right_tri',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_left_angled_triangle(n):\n    '''\n    Write a function to find the nth left angled triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('left_tri',k)\n        print('left_tri',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_black_triangle(n):\n    '''\n    Write a function to find the nth black triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('black_tri',k)\n        print('black_tri',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_tentagonals(n):\n    '''\n    Write a function to find the nth tentagonals number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('tent_',k)\n        print('tent_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_already_solved(n):\n    '''\n    Write a function to find the nth already solved number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('already_solved',k)\n        print('already_solved',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_solved(n):\n    '''\n    Write a function to find the nth solved number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('solved',k)\n        print('solved',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_pentagonals(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('pent_',k)\n        print('pent_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_right_angled_pentagonals(n):\n    '''\n    Write a function to find the nth right angled pentagonal number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('right_pent',k)\n        print('right_pent',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_left_angled_pentagonals(n):\n    '''\n    Write a function to find the nth left angled pentagonal number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('left_pent',k)\n        print('left_pent',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_full_house(n):\n    '''\n    Write a function to find the nth full house number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('full_',k)\n        print('full_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_triangle(n):\n    '''\n    Write a function to find the nth triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('tri_',k)\n        print('tri_',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_right_angled_triangle(n):\n    '''\n    Write a function to find the nth right angled triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('right_tri',k)\n        print('right_tri',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_left_angled_triangle(n):\n    '''\n    Write a function to find the nth left angled triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('left_tri',k)\n        print('left_tri',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_black_triangle(n):\n    '''\n    Write a function to find the nth black triangle number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('black_tri',k)\n        print('black_tri',k,n)\n        print('\\n')\n    return k\n    \ndef is_num_tentagonals(n):\n    '''\n    Write a function to find the nth tentagonals number.\n    '''\n    k = 0\n    while True:\n        if k == n:\n            break\n        k = k + 1\n        print('tent_',k)\n        print('tent_',k,n)\n        print('\\n')\n    return k"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        return 2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n    "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 2:\n        return n == 0\n    elif n % 2 == 0:\n        return n == 1\n    else:\n        return is_num_decagonal(n - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==1: return 1\n    elif n==2: return 1\n    elif n==3: return 2\n    else: return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if item == value:\n            return (index == dlist.index(item), index)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # create a variable and set to zero, which is where we're checking to see if the item is in the array\n    item_index = 0\n    # iterate through the array, and if the item is in the array, we need to assign the index position to True\n    for element in dlist:\n        if element == item:\n            # if the item is in the array, we need to update the index position to the new value\n            item_index = dlist.index(element)\n            # we're done\n            break\n    # return a tuple representing the boolean\n    return (item_index!= -1, item_index)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    # you may need to make it case-insensitive, i.e. SEARCH_QUERY == SEARCH_QUERY.lower()\n    for i, el in enumerate(dlist):\n        if el.lower() == item.lower():\n            return (True, i)\n        elif el == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if item == val:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return index, index\n    return -1, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for x in range(len(test_list)):\n        if test_list[x] not in unique:\n            unique.append(test_list[x])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # We need to access the elements of the list and compare them\n    # (e.g. test_list = [1,1,2,2,3,3] we have 2 unique items)\n    # The function should return True if no two elements are the same or False otherwise\n    \n    # We can use the set function to remove duplicate items and use the.remove method\n    # (e.g. remove(1) removes the first duplicate item)\n    \n    # We can also use the set() function to create a set from a list\n    \n    # We can also use the set.add() method to add a new item to a set\n    # The.add() method should return the index of the newly added item\n    \n    # The set function can also be used to convert a list to a set\n    \n    # In addition to that, you must specify two arguments for the set function: the list, and a default value\n    \n    \n    # Define an empty set: empty_set\n    empty_set = set()\n    \n    # For each element in the given list, add it to the set\n    for i in range(len(test_list)):\n        if i not in empty_set:\n            empty_set.add(test_list[i])\n    \n    # If there are no duplicate items, return True\n    if empty_set == set():\n        return True\n    # If there are duplicate items, return False\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Declare a count variable\n    count = 0\n    # Iterate through the given list\n    for i in test_list:\n        # If the element does not occur more than once\n        if count < test_list.count(i):\n            return False\n        # Add one to the count\n        count += 1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    for i in test_list:\n        if i in test_list:\n            test_list.remove(i)\n    if len(test_list) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    from collections import Counter\n    #Create an empty Counter object\n    counter = Counter(test_list)\n    #Check if the counter object contains the same values as test list\n    #If not, return false.\n    if counter == Counter(test_list):\n        return False\n    #If we have no values, return True.\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    else:\n        # Since the first element is the first element, it means it is not unique.\n        # Hence, no need to check.\n        if test_list[0]!= test_list[-1]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #create a dictionary to store unique numbers\n    unique_nums = {}\n    #loop through the list and add all the elements to the dictionary\n    for x in test_list:\n        if x in unique_nums:\n            return False\n        else:\n            unique_nums[x] = 1\n    #return true if the list is not unique\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = []\n    for element in test_list:\n        if element not in seen:\n            seen.append(element)\n    return len(seen) == len(set(seen))"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    if len(test_list) == 0:\n        return True\n    for index in range(len(test_list)):\n        if test_list[index] in test_list[index + 1:]:\n            count += 1\n        else:\n            return False\n    return count == len(test_list)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_nums = []\n    for i in nums2:\n        sub_nums.append(i-nums1)\n    return sub_nums\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if nums1 is None:\n        return None\n    if nums2 is None:\n        return None\n    \n    if len(nums1)!= len(nums2):\n        return None\n    \n    if nums1 is None:\n        return nums2\n    \n    for i, item in enumerate(nums2):\n        nums2[i] = item - nums1[i]\n    \n    return nums2\n    \ndef compare_lists(nums1,nums2):\n    '''\n    Write a function to return a list of indexes where the two given \n    numbers are in descending order. \n    '''\n    if nums1 is None:\n        return []\n    if nums2 is None:\n        return []\n    \n    if len(nums1)!= len(nums2):\n        return []\n    \n    for i in range(len(nums2)):\n        if nums1[i] > nums2[i]:\n            return i\n    return []\n    \ndef permute(nums):\n    '''\n    Write a function that returns all permutations of nums. \n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums]\n    \n    res = []\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i == j:\n                continue\n            new_nums = nums[:i] + nums[i+1:]\n            res.append([new_nums])\n            \n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    temp_list = []\n    for num in range(len(nums1)):\n        temp_list.append(nums1[num]-nums2[num])\n    return temp_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_copy = nums1.copy()\n    nums2_copy = nums2.copy()\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    return nums1[nums2[::-1]"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1=[]\n    for i in nums1:\n        l1.append(i)\n    l2=[]\n    for i in nums2:\n        l2.append(i)\n    l1.extend(l2)\n    return l1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in nums1:\n        for j in nums2:\n            result.append(i-j)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums = nums1.copy()\n    nums.extend(nums2)\n    return nums\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n=int(n)\n    if n<0:\n        return False\n    else:\n        d=int(math.sqrt(n))\n        if n==0:\n            return True\n        else:\n            return n%d == 0\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//10\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f2(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//100\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f3(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f4(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//10000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f5(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//100000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f6(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f7(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//10000000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f8(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//100000000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f9(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//100000000000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f10(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000000000\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f11(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000000001\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f12(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000000011\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f13(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000000111\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f14(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//10000000010011\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f15(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//10000000010111\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f16(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000001110111\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f17(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000001110110110110111111\n    if f==0:\n        return \"Negative number\"\n    else:\n        return f\ndef f18(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=n//1000000001110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if(n < 0): \n        print('Invalid Input') \n        return 0\n    if(n % 10 == 0):\n        return 1 \n    else: \n        return 0\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    l=[]\n    for i in range(len(n)):\n        if int(n[i])%2!=0:\n            l.append(n[i])\n    if len(set(l))<=n:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int: \n        raise TypeError('must be an integer')\n    if n < 0: \n        raise ValueError('number cannot be less than 0')\n    if n in [0, 1]: \n        return n == 0 \n    else: \n        def validate_digit(num): \n            def is_digit(n): \n                for x in str(num): \n                    if not x.isdigit(): \n                        return False\n                return True\n            if not is_digit(num): \n                raise ValueError('Invalid input, must be an integer') \n        validate_digit(n) \n        return n <= len(str(n)"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    sum = 0\n    for i in n:\n        sum += int(i)\n    if sum % 10 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # your code goes here\n    # time limit exceeded\n    # invalid inputs\n    if n <= 0:\n        raise ValueError('Please enter an integer greater than 0')\n    if n % 10!= int(n / 10):\n        raise ValueError('Please enter an integer that is divisible by 10')\n    if int(n / 10) < int(n % 10):\n        raise ValueError('Please enter an integer that is less than 10')\n    \n    # time limit exceeded\n    # invalid inputs\n    if int(n / 10) >= int(n % 10):\n        raise ValueError('Please enter an integer that is less than 10')\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = n\n    if n < 10:\n        if x % 10 == 0:\n            return True\n        else:\n            return False\n    else:\n        if x % 10!= 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(element,list):\n        raise TypeError('Element must be a list')\n    for i in list:\n        if i!= element:\n            return False\n    return True\n    \ndef check_weight(list,weight):\n    '''\n    Write a function that takes in a list and weight and checks whether all items in the list have the same weight.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(weight,list):\n        raise TypeError('Weight must be a list')\n    if len(list)!= len(weight):\n        return False\n    for i in range(len(list)):\n        if not check_element(list,weight[i]):\n            return False\n    return True\n    \ndef check_height(list,height):\n    '''\n    Write a function that takes in a list and height and checks whether all items in the list are equal to the given height.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(height,list):\n        raise TypeError('Height must be a list')\n    if len(list)!= len(height):\n        return False\n    for i in range(len(list)):\n        if not check_element(list,height[i]):\n            return False\n    return True\n    \ndef check_animal(list,animal):\n    '''\n    Write a function that takes in a list and animal and checks whether all items in the list have the same animal.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(animal,list):\n        raise TypeError('Animal must be a list')\n    if len(list)!= len(animal):\n        return False\n    for i in range(len(list)):\n        if not check_element(list,animal[i]):\n            return False\n    return True\n    \ndef check_time(list,time):\n    '''\n    Write a function that takes in a list and time and checks whether all items in the list have the same time.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(time,list):\n        raise TypeError('Time must be a list')\n    if len(list)!= len(time):\n        return False\n    for i in range(len(list)):\n        if not check_element(list,time[i]):\n            return False\n    return True\n    \ndef check_income(list,income):\n    '''\n    Write a function that takes in a list and income and checks whether all items in the list have the same income.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(income,list):\n        raise TypeError('Income must be a list')\n    if len(list)!= len(income):\n        return False\n    for i in range(len(list)):\n        if not check_element(list,income[i]):\n            return False\n    return True\n    \ndef check_food(list,food):\n    '''\n    Write a function that takes in a list and food and checks whether all items in the list have the same food.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(food,list):\n        raise TypeError('Food must be a list')\n    if len(list)!= len(food):\n        return False\n    for i in range(len(list)):\n        if not check_element(list,food[i]):\n            return False\n    return True\n    \ndef check_job(list,job):\n    '''\n    Write a function that takes in a list and job and checks whether all items in the list have the same job.\n    '''\n    if not isinstance(list,list):\n        raise TypeError('List argument must be a list')\n    if not isinstance(job,list):\n        raise TypeError('Job must be a list')\n    if len(list)!= len(job):\n        return False\n    for i in range(len(list)):\n        if not check_element(list,job[i]):\n            return False\n    return True\n    \ndef main():\n    '''\n    Runs the tests and uses the function check_element to test the function.\n    '''\n    print('Testing check_element function...')\n    list = [1,2,3,4,5]\n    element = 'x'\n    weight = [2,3,5,6,8]\n    height = [1,2,3,4,5]\n    animal = 'rabbit'\n    time = [3,4,5,8,9]\n    income = [1,2,3,4,5]\n    food = ['biscuit','pizza','scuttle','chicken','tuna']\n    job = ['york','house','car','car','police']\n    check_element(list,element)\n    check_weight(weight,weight)\n    check_height(height,height)\n    check_animal(animal,animal)\n    check_time(time,time)\n    check_income(income,income)\n    check_food(food,food)\n    check_job(job,job)\n    print('Tests passed!')\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if(list[i] == element):\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        print(f'The element \"{element}\" is in the list.')\n    else:\n        print(f'The element \"{element}\" is not in the list.')\n        return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    if len(list) == 1:\n        if element == list[0]:\n            return True\n        else:\n            return False\n    if len(list) == 2:\n        if element == list[1] and element!= list[0]:\n            return True\n        else:\n            return False\n    if len(list) == 3:\n        if element == list[1] and element!= list[0] and element!= list[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element == element:\n            return False\n        elif element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    if element in list:\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index in range(len(list)):\n        if list[index]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_to_match = re.findall(r'[aA]b',text)\n    if len(text_to_match) == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Remove leading whitespace\n    text = text.strip()\n    # Split text by spaces\n    text = text.split()\n    # Remove duplicate characters\n    text = ''.join(set(text))\n    # Split text by spaces\n    text = ''.join(text.split())\n    # Check for the first character\n    if 'a' not in text and 'b' not in text:\n        return False\n    # Check for the second character\n    if 'a' in text:\n        if 'b' in text:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.search(r'a\\b[1-3]',text)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_regex = 'a{1}b{1}'\n    return re.search(text_regex, text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('a[ab]', text):\n        return True\n    if re.search('[aab]', text):\n        return True\n    if re.search('[ba][b]', text):\n        return True\n    return False\n    \ndef text_match_two_three_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, followed by zeros.\n    '''\n    if re.search('a[ab]', text):\n        return True\n    if re.search('[aab]', text):\n        return True\n    if re.search('[ba][b]', text):\n        return True\n    if re.search('[0]', text):\n        return True\n    return False\n    \ndef text_match_two_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, followed by ones.\n    '''\n    if re.search('a[ab]', text):\n        return True\n    if re.search('[aab]', text):\n        return True\n    if re.search('[ba][b]', text):\n        return True\n    if re.search('[0]', text):\n        return True\n    return False\n    \ndef text_match_two_three_zero_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, followed by zeros, followed by ones, followed by '0'.\n    '''\n    if re.search('a[ab]', text):\n        return True\n    if re.search('[aab]', text):\n        return True\n    if re.search('[ba][b]', text):\n        return True\n    if re.search('[0]', text):\n        return True\n    if re.search('[0]', text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 3 or len(text) > 20:\n        return False\n    if text[0]!= 'a' or len(text[1])!= 2 or len(text[2])!= 3:\n        return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # get the string\n    string = text.lower()\n    # clean the string\n    string = re.sub(r'[^a-zA-Z0-9]','', string)\n    # get all the words and split them\n    string_words = string.split()\n    # get the number of words\n    num_words = len(string_words)\n    # if there are two words, make it two or three\n    if num_words < 2:\n        num_words = 2\n    # if there are three words, make it three or two\n    if num_words < 3:\n        num_words = 3\n    # loop through the words and check\n    for i in range(0, num_words):\n        if string_words[i] == 'a' or string_words[i] == 'b':\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?:(?<=a)(?:b|c|d) ){2,3}'\n    match_string = re.search(pattern, text)\n    print(match_string.group(0))\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_two = re.search(r'a[bc]+',text)\n    match_three = re.search(r'b[bc]+',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"[aA][bB]\"\n    # text = input(\"Enter your text: \")\n    result = re.search(pattern,text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 1\n    while i <= n: \n        \n        a[0] += a[i-1]\n        i += 1\n    \n    j = n - 1\n    k = k - 1\n    ans = a[0]\n    while j >= k: \n        ans = max(ans, a[j+k])\n        j -= k \n        k -= 1\n    return ans \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_max = -10000000000\n    count = 0\n    for i in range(n):\n        sub_arr = a[i:i+k]\n        sum_current = 0\n        for j in range(k):\n            sum_current += sub_arr[j]\n        sum_current += a[i]\n        if sum_current > sum_max:\n            sum_max = sum_current\n        count += 1\n    print(count)\n    return sum_max\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if the array is empty\n    if n == 0:\n        return 0\n    # array of size N\n    array = [0]*n\n    # index of array\n    i = 0\n    # sum of array\n    s = 0\n    # repeat of array k times\n    for j in range(k):\n        s += a[i]\n        # add it to array\n        array[i] = s\n        # increment the index\n        i += 1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # define the current largest sum\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(k):\n        current_sum += a[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    array_size = len(a)\n    max_sum = 0\n    curr_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (k == 0):\n        return a[0]\n    if (k == 1):\n        return max(a)\n    if (n == 1):\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # TO DO... Your code here\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # we need to find the sum of all the numbers from 1 to n \n    # adding the number of times the array is repeated, we need to add it to the current sum \n    # from this sum we can get the largest sum of all the number from 1 to n \n    # we can find the sum of all the numbers from 1 to n \n    # to calculate the largest sum we need to find the sum of the nth number from 1 to n \n    # we can do this by choosing the first k numbers \n    # and calculate the sum of all the numbers from 1 to n by adding them \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total = 0\n    sub_arr = []\n    for i in range(n-k+1):\n        sub_arr.append(sum(a[i:i+k]))\n    for i in range(n-k):\n        if a[i] not in sub_arr:\n            sub_arr.append(a[i])\n            total += a[i]\n    return total\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k <= 1:\n        return a[k-1]\n    else:\n        return max(max_sub_array_sum_repeated(a, n, k-1),\n                    max_sub_array_sum_repeated(a, n, k-2) + a[k-2])\ndef max_sub_array_sum_repeated_with_n(a, n, k):\n    '''\n    This function is a solution to the problem of summing the array in a limited number of consecutive subarrays.\n    It works but it's only more efficient than the one below, i.e., it takes out the subarray of the array that results in the longest sum of any array.\n    '''\n    if k <= 1:\n        return a[k-1]\n    else:\n        return max(a[k-1] + max_sub_array_sum_repeated_with_n(a, n, k-1), a[k-2] + max_sub_array_sum_repeated_with_n(a, n, k-2))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum = sum + (i*i)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    \n    else:\n        return n*square_Sum(n-1)\n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square = 0\n    for i in range(n):\n        square += i**2\n    return square\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(0, n):\n        sum = sum + (i ** 2)\n    return sum\n    \nsum_of_squares = square_Sum(10)\nprint(sum_of_squares)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return square_Sum(n - 1) + square_Sum(n - 2)\n    \n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square = 0\n    for i in range(1, n + 1):\n        if(i % 2 == 0):\n            square = square + i\n    return square\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result = result + (i*i)\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if list1 == []:\n        return None\n    elif len(list1) == 1:\n        return list1\n    else:\n        return max(list1, key=len)\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for item in list1:\n        if len(item) > length:\n            length = len(item)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return \"\"\n    else:\n        max_length = 0\n        for item in list1:\n            if len(item) > max_length:\n                max_length = len(item)\n        return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return len(list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > max_length:\n                max_length = len(list1[i][j])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = list1[0][0]\n    for l in list1:\n        if len(l[0]) > len(max_length):\n            max_length = l[0]\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) <= 1:\n        return list1\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for row in list1:\n        for element in row:\n            if len(element) > max_length:\n                max_length = len(element)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Your code here\n    max_length = list1\n    return max_length[0]\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for i in list1:\n        length += len(i)\n    return length\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if k==1 or n==0: \n        return n\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2:\n        return 0\n    elif k == 1:\n        return n \n    elif k == 2:\n        return n + k\n    else:\n        ways = [[0]*(k+1) for _ in range(n+1)]\n        ways[1][1] = 1\n        ways[1][2] = 1\n        for i in range(2, n+1):\n            for j in range(1, k+1):\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n        return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if n == 2:\n        return k\n    \n    def first_moves(n, k, i):\n        if n < 2 or k < 2:\n            return 0\n        if i == 0:\n            return n\n        if k == 0:\n            return k\n        if k % 2 == 0:\n            return first_moves(n-1, k-1, i-1) + n + first_moves(n-1, k-1, i)\n        else:\n            return first_moves(n-1, k, i-1) + first_moves(n-1, k-1, i-1) + n\n    \n    return first_moves(n, k, k)\n    \ndef count_no_of_ways_n_colors(n, k, colors):\n    '''\n    Write a function to find the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return int(count_no_of_ways(n, k) / (k * (k + 1) * (n + 1)))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: \n        return n \n    \n    # The function will be a binary tree where each node has two children (poster, color)\n    # This is a binary tree where there are two nodes with a similar color\n    def f(node): \n        if node is None: \n            return 0 \n        return 1 + f(node.left) + f(node.right) \n    \n    ways = 0\n    for i in range(2, k+1): \n        ways += 2 * f(node=Node(i)) \n    return ways \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n>2:\n        return count_no_of_ways(n-1, k)*count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    assert n <= 3 and n >= 2\n    assert k <= n + 1 and k >= 3\n    assert type(n) == int and type(k) == int and type(n)!= type(k)\n    \n    d = {}\n    for i in range(1, k + 1):\n        d[i] = 1\n    if n == 2:\n        return 1\n    elif k == 2:\n        return 0\n    else:\n        # if n > 2:\n        for i in range(1, n + 1):\n            d[i] = d[i - 1] + d[i - 2] + d[i - 3]\n        return d[n]\n        \n    \n    \ndef test(answer):\n    assert answer == 7\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def print_ways(ways):\n        if len(ways) == 0: \n            return \n        print(ways) \n        for i in range(len(ways)): \n            ways[i] += ways[i][0]\n            ways[i] %= k\n            print_ways(ways)\n    print_ways([0] * n)\n        \ndef count_no_of_ways_odd(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def print_ways(ways):\n        if len(ways) == 0: \n            return \n        print(ways) \n        for i in range(len(ways)): \n            ways[i] += ways[i][0]\n            ways[i] %= k\n            print_ways(ways)\n    print_ways([0] * n)\n        \ndef count_no_of_ways_with_consecutive_ones(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def print_ways(ways):\n        if len(ways) == 0: \n            return \n        print(ways) \n        for i in range(len(ways)): \n            ways[i] += ways[i][0]\n            ways[i] %= k\n            print_ways(ways)\n    print_ways([0] * n)\n    \ndef count_no_of_ways_with_consecutive_ones_odd(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def print_ways(ways):\n        if len(ways) == 0: \n            return \n        print(ways) \n        for i in range(len(ways)): \n            ways[i] += ways[i][0]\n            ways[i] %= k\n            print_ways(ways)\n    print_ways([0] * n)\n    \ndef count_no_of_ways_with_consecutive_ones_with_odd(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def print_ways(ways):\n        if len(ways) == 0: \n            return \n        print(ways) \n        for i in range(len(ways)): \n            ways[i] += ways[i][0]\n            ways[i] %= k\n            print_ways(ways)\n    print_ways([0] * n)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    i = int(n)\n    j = int(m)\n    while(i>0 and j>0):\n        if i%j==0:\n            return i//j\n        else:\n            i=i//j\n            j=j//i\n    return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    elif n < m:\n        return m\n    else:\n        return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    \n    i = 0\n    j = 0\n    \n    while True:\n        if m%n!= 0:\n            \n            i = n+1\n            \n            while (m%n)!=0:\n                j += 1\n                \n                m = (m//n)\n            \n            j -= 1\n            \n            return j\n        \n        else:\n            \n            i = m//n\n            m = m%n\n            \n        if i == 0:\n            \n            return 0\n            \n    \n    \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return m\n    else:\n        return find(n-1,m)//m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    for i in range(m):\n        if n//10**i < n:\n            return n//10**i\n    return n//10**m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round((n*m)/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        if m == 0:\n            return 0\n        else:\n            return 1/m\n    else:\n        return find(n//m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=m:\n        return n\n    else:\n        return m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while(m):\n        if(m%10==n%10):\n            m=int(m/10)\n        else:\n            break\n    return m\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    theta = math.pi/4\n    c=0\n    while c < h:\n        if (c+math.tan(theta))**2+(w-c)**2<0.1:\n            return c\n        c+=1\n        theta+=math.pi/8\n    return 0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    t=math.tan(math.radians(45))\n    s=math.tan(math.radians(90))\n    s=math.sqrt(s*s-w*w)\n    x=w*t\n    y=h*t\n    z=h*t*t-w*w\n    \n    return x,y,z\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # your code should use this function\n    return w*h/2/math.tan(math.pi/3)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=w/2\n    side2=math.sqrt(h/2)\n    side3=math.sqrt(side1**2+side2**2)\n    return side3\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    side1=w/2\n    side2=math.sqrt(h/2)\n    side3=side2*math.sqrt(1-side1**2)\n    return side3\ndef normal_side(w,h):\n    '''\n    Find the normal side of a triangle.\n    '''\n    side1=w/2\n    side2=math.sqrt(h/2)\n    side3=h\n    side4=side2*side2\n    return side4/side3\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #If the first parameter is a single value, make it a list.\n    if type(w) is int or type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the second parameter is a single value, make it a list.\n    if type(h) is int or type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a list.\n    if type(w) is list and type(h) is list:\n        if not isinstance(w[0], list) and not isinstance(h[0], list):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a list.\n    if type(w) is list and type(h) is list:\n        if not isinstance(w[0], list) and not isinstance(h[0], list):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) is float:\n        if not isinstance(h, list):\n            h = [h]\n    #If the third parameter is a single value, make it a tuple.\n    if type(w) is list and type(h) is tuple:\n        if not isinstance(w[0], list) and not isinstance(h[0], tuple):\n            w = [w]\n            h = [h]\n    #If the third parameter is a single value, make it a float.\n    if type(w) is float:\n        if not isinstance(w, list):\n            w = [w]\n    #If the third parameter is a single value, make it a list.\n    if type(h) i"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    v = (w*h)/math.sqrt(4*(w+h))\n    return v\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = ((math.sin(math.radians(90.0)) * w)**2 + (math.cos(math.radians(90.0)) * h)**2)**0.5\n    side2 = ((math.sin(math.radians(45.0)) * w)**2 + (math.cos(math.radians(45.0)) * h)**2)**0.5\n    side3 = ((math.sin(math.radians(135.0)) * w)**2 + (math.cos(math.radians(135.0)) * h)**2)**0.5\n    \n    return (side1 + side2 + side3) / 2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # if w > h:\n    #     print('Third side of a right angled triangle is 0')\n    # elif w < h:\n    #     print('Third side of a right angled triangle is 180')\n    # else:\n    #     print('Third side of a right angled triangle is 360')\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # find the circumference of the right angled triangle\n    c=3.14*w*h\n    # find the semi-perimeter\n    sep = c/2\n    # find the area of the triangle\n    a = math.sqrt(sep*(sep-c))\n    # find the angle of the triangle\n    angle = math.acos(math.fabs(a))\n    # return the side length\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w/2 + h/2\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maximum:\n            maximum = listval[i]\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=listval[0]\n    for i in listval:\n        if i>max:\n            max=i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max:\n                max = listval[i]\n        return max\n        \n    \n    \ndef max_val_recursive(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max:\n                max = listval[i]\n        return max\n        \n    \n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n        return min\n    \n    \n    \ndef min_val_recursive(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n        return min\n    \n    \n    \ndef mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        return mean\n    \n    \n    \ndef mean_recursive(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i]!= 0:\n                mean += listval[i]\n        mean /= len(listval)\n        return mean\n    \n    \n    \ndef mean_mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        return mean\n    \n    \n    \n    \ndef median(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        median = sorted(listval)[len(listval)//2]\n        return median\n    \n    \n    \ndef median_recursive(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        median = sorted(listval)[len(listval)//2]\n        return median\n    \n    \n    \ndef mode(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mode = Counter(listval).most_common()[0][0]\n        return mode\n    \n    \n    \ndef mode_recursive(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mode = Counter(listval).most_common()[0][0]\n        return mode\n    \n    \n    \ndef sum_of_squares(listval):\n    '''\n    Write a function to find the sum of squares value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        sum = 0\n        for i in listval:\n            sum += i**2\n        return sum\n    \n    \n    \n    \n    \ndef sum_of_squares_recursive(listval):\n    '''\n    Write a function to find the sum of squares value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        sum = 0\n        for i in listval:\n            sum += i**2\n        return sum\n    \n    \n    \n    \n    \ndef variance(listval):\n    '''\n    Write a function to find the variance value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        sum = 0\n        for i in listval:\n            sum += (i - mean)**2\n        return sum**(1/2)\n    \n    \n    \n    \n    \n    \ndef variance_recursive(listval):\n    '''\n    Write a function to find the variance value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        sum = 0\n        for i in listval:\n            sum += (i - mean)**2\n        return sum**(1/2)\n    \n    \n    \n    \n    \ndef variance_mean(listval):\n    '''\n    Write a function to find the variance value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        sum = 0\n        for i in listval:\n            sum += (i - mean)**2\n        return sum**(1/2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # base case\n    if len(listval) == 0:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for x in listval:\n        if x > maxval:\n            maxval = x\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return -1\n    else:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return -1\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number % 2 == 0:\n        return 3\n    elif number % 2 == 1:\n        return 5\n    else:\n        first = number // 2\n        second = 3\n        reminder = number % 2\n        return sum_div(first) + sum_div(second) + reminder\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return number\n    else:\n        return number % 2\n        \n    \n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if not isinstance(number, int):\n        raise TypeError(\"number must be an integer\")\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number < 2:\n        return 1\n    if number < 4:\n        return 3\n    if number < 7:\n        return 5\n    if number < 11:\n        return 7\n    if number < 13:\n        return 11\n    if number < 17:\n        return 13\n    if number < 19:\n        return 17\n    if number < 21:\n        return 19\n    if number < 23:\n        return 21\n    if number < 27:\n        return 23\n    if number < 31:\n        return 27\n    if number < 37:\n        return 31\n    if number < 41:\n        return 37\n    if number < 49:\n        return 41\n    if number < 51:\n        return 49\n    if number < 53:\n        return 51\n    if number < 55:\n        return 53\n    if number < 57:\n        return 55\n    if number < 61:\n        return 57\n    if number < 69:\n        return 61\n    if number < 71:\n        return 69\n    if number < 73:\n        return 71\n    if number < 75:\n        return 73\n    if number < 77:\n        return 75\n    if number < 81:\n        return 77\n    if number < 89:\n        return 81\n    if number < 91:\n        return 89\n    if number < 93:\n        return 91\n    if number < 95:\n        return 93\n    if number < 97:\n        return 95\n    if number < 101:\n        return 97\n    if number < 103:\n        return 101\n    if number < 105:\n        return 103\n    if number < 107:\n        return 105\n    if number < 111:\n        return 107\n    if number < 113:\n        return 111\n    if number < 115:\n        return 113\n    if number < 117:\n        return 115\n    if number < 121:\n        return 117\n    if number < 123:\n        return 121\n    if number < 125:\n        return 123\n    if number < 127:\n        return 125\n    if number < 131:\n        return 127\n    if number < 133:\n        return 131\n    if number < 135:\n        return 133\n    if number < 137:\n        return 135\n    if number < 141:\n        return 137\n    if number < 143:\n        return 141\n    if number < 145:\n        return 143\n    if number < 147:\n        return 145\n    if number < 151:\n        return 147\n    if number < 153:\n        return 151\n    if number < 155:\n        return 153\n    if number < 157:\n        return 155\n    if number < 161:\n        return 157\n    if number < 163:\n        return 161\n    if number < 165:\n        return 163\n    if number < 167:\n        return 165\n    if number < 171:\n        return 167\n    if number < 173:\n        return 171\n    if number < 175:\n        return 173\n    if number < 177:\n        return 175\n    if number < 181:\n        return 177\n    if number < 183:\n        return 181\n    if number < 185:\n        return 183\n    if number < 187:\n        return 185\n    if number < 191:\n        return 187\n    if number < 193:\n        return 191\n    if number < 195:\n        return 193\n    if number < 197:\n        return 195\n    if number < 201:\n        return 197\n    if number < 203:\n        return 201\n    if number < 205:\n        return 203\n    if number < 207:\n        return 205\n    if number < 211:\n        return 207\n    if number < 213:\n        return 211\n    if number < 215:\n        return 213\n    if number < 217:\n        return 215\n    if number < 221:\n        return 217\n    if number < 223:\n        return 221\n    if number < 225:\n        return 223\n    if number < 227:\n        return 227\n    if number < 229:\n        return 229\n    if number < 231:\n        return 231\n    if number < 233:\n        return 233\n    if number < 235:\n        return 235\n    if number < 237:\n        return 237\n    if number < 241:\n        return 241\n    if number < 243:\n        return 243\n    if number < 245:\n        return 245\n    if number < 247:\n        return 247\n    if number < 251:\n        return 251\n    if number < 253:\n        return 253\n    if number < 255:\n        return 255\n    if number < 257:\n        return 257\n    if number < 261:\n        return 261\n    if number < 263:\n        return 263\n    if number < 265:\n        return 265\n    if number < 267:\n        return 267\n    if number < 269:\n        return 269\n    if number < 271:\n        return 271\n    if number < 273:\n        return 273\n    if number < 275:\n        return 275\n    if number < 277:\n        return 277\n    if number < 281:\n        return 281\n    if number < 283:\n        return 283\n    if number < 285:\n        return 285\n    if number < 287:\n        return 287\n    if number < 289:\n        return 289\n    if number < 291:\n        return 291\n    if number < 293:\n        return 293\n    if number < 295:\n        return 295\n    if number < 297:\n        return 297\n    if number < 301:\n        return 301\n    if number < 303:\n        return 303\n    if number < 305:\n        return 305\n    if number < 307:\n        return 307\n    if number < 311:\n        return 311\n    if number < 313:\n        return 313\n    if number < 315:\n        return 315\n    if number < 317:\n        return 317\n    if number < 321:\n        return 321\n    if number < 323:\n        return 323\n    if number < 325:\n        return 325\n    if number < 327:\n        return 327\n    if number < 331:\n        return 331\n    if number < 333:\n        return 333\n    if number < 335:\n        return 335\n    if number < 337:\n        return 337\n    if number < 341:\n        return 341\n    if number < 343:\n        return 343\n    if number < 345:\n        return 345\n    if number <347:\n        return 347\n    if number < 351:\n        return 351\n    if number < 353:\n        return 353\n    if number < 355:\n        return 355\n    if number < 357:\n        return 357\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n    if number < 361:\n        return 361\n    if number < 363:\n        return 363\n    if number < 365:\n        return 365\n    if number < 367:\n        return 367\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return (sum_div(number//2) + sum_div(number//3))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum=0\n    for i in range(1,number):\n        if number%i==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number % 2 == 0:\n        return number // 2 + sum_div(number // 2)\n    else:\n        return (number // 2) + sum_div(number // 2 + 1)\n    \nprint(sum_div(10))\nprint(sum_div(9))"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            inv_count += 1\n        if i-1 > 0:\n            if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                inv_count += 1\n                \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = 0\n    for i in range(0,len(arr)-1):\n        if arr[i] > arr[i+1]:\n            invCount +=1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return invCount\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[j] > arr[i]:\n                inv_count += 1\n            else:\n                break\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    c=0\n    #Start with the second element as the first\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            c+=1\n    return c\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_count = 0\n    for x in range(len(arr) - 1):\n        if arr[x] > arr[x + 1]:\n            Inv_count += 1\n    return Inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                Count = Count + 1\n    return Count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    sorted_array = sorted(arr)\n    for i in range(len(arr)): \n        j = i \n        while j>0 and sorted_array[j] > sorted_array[j-1]: \n            Inv_Count += 1\n            j -= 1\n    return Inv_Count\n    \n    \ndef get_Intervals(arr):\n    '''\n    Return a dictionary of start and end positions of intervals.\n    '''\n    intervals = dict()\n    \n    for i in arr:\n        if i not in intervals:\n            intervals[i] = []\n        if i not in intervals[i]:\n            intervals[i].append(i)\n    return intervals\n    \n    \ndef merge_intervals(arr, intervals):\n    '''\n    Return a new array that combines the intervals in arr.\n    '''\n    intervals = sorted(intervals.items())\n    #print intervals\n    #print arr\n    new_arr = []\n    for i in arr:\n        if intervals[i][0] > intervals[i][1]:\n            new_arr.append(i)\n        elif intervals[i][0] == intervals[i][1]:\n            new_arr.append(intervals[i][1])\n            new_arr.append(i)\n    return new_arr\n    \n    \ndef merge_intervals_rec(arr, intervals):\n    '''\n    Return a new array that combines the intervals in arr.\n    '''\n    intervals = sorted(intervals.items())\n    #print intervals\n    #print arr\n    new_arr = []\n    for i in arr:\n        if intervals[i][0] > intervals[i][1]:\n            new_arr.append(i)\n        elif intervals[i][0] == intervals[i][1]:\n            new_arr.append(intervals[i][1])\n            new_arr.append(i)\n    return new_arr\n    \n    \ndef merge_intervals_rec(arr, intervals):\n    '''\n    Return a new array that combines the intervals in arr.\n    '''\n    intervals = sorted(intervals.items())\n    #print intervals\n    #print arr\n    new_arr = []\n    for i in arr:\n        if intervals[i][0] > intervals[i][1]:\n            new_arr.append(i)\n        elif intervals[i][0] == intervals[i][1]:\n            new_arr.append(intervals[i][1])\n            new_arr.append(i)\n    return new_arr\n    \ndef merge_intervals_rec(arr, intervals):\n    '''\n    Return a new array that combines the intervals in arr.\n    '''\n    intervals = sorted(intervals.items())\n    #print intervals\n    #print arr\n    new_arr = []\n    for i in arr:\n        if intervals[i][0] > intervals[i][1]:\n            new_arr.append(i)\n        elif intervals[i][0] == intervals[i][1]:\n            new_arr.append(intervals[i][1])\n            new_arr.append(i)\n    return new_arr\n    \n    \ndef merge_intervals_rec(arr, intervals):\n    '''\n    Return a new array that combines the intervals in arr.\n    '''\n    intervals = sorted(intervals.items())\n    #print intervals\n    #print arr\n    new_arr = []\n    for i in arr:\n        if intervals[i][0] > intervals[i][1]:\n            new_arr.append(i)\n        elif intervals[i][0] == intervals[i][1]:\n            new_arr.append(intervals[i][1])\n            new_arr.append(i)\n    return new_arr\n    \ndef merge_intervals(arr):\n    '''\n    Return a new array that combines the intervals in arr.\n    '''\n    arr_ = []\n    intervals = get_Intervals(arr)\n    arr_ = merge_intervals_rec(arr_, intervals)\n    return arr_\n    \n    \ndef merge_intervals(arr):\n    '''\n    Return a new array that combines the intervals in arr.\n    '''\n    arr_ = []\n    intervals = get_Intervals(arr)\n    arr_ = merge_intervals_rec(arr_, intervals)\n    return arr_\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    out = []\n    for element in list1:\n        if type(element) is list:\n            out += flatten_list(element)\n        else:\n            out.append(element)\n    return out\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for i in list1:\n        if type(i) == list:\n            output.extend(flatten_list(i))\n        else:\n            output.append(i)\n    return output"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)!= list:\n        return list1\n    if list1.__class__.__name__ == \"list\":\n        return flatten_list(list1.__class__) + flatten_list(list1)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) == list:\n            for x in flatten_list(i):\n                result.append(x)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) is not list:\n        return list1\n    elif len(list1) == 0:\n        return list1\n    else:\n        inner_list = flatten_list(list1[0])\n        return inner_list + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    flatten_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Create a list of all the items in the list\n    flattened_list = []\n    for sublist in list1:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, (list, tuple)):\n        flattened_list = []\n        for sub_list in list1:\n            for sub_tuple in flatten_list(sub_list):\n                flattened_list.append(sub_tuple)\n        return flattened_list\n    else:\n        return [list1]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def _flatten_rec(list2):\n        if len(list2) == 0:\n            return []\n        else:\n            return list(map(lambda x: list(map(lambda y: flatten_rec(y), list2)), list2))\n    return _flatten_rec(list1)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for x in stdata:\n        if max_agg < x[1]:\n            max_agg = x[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = stdata[0][1]\n    for (tup,num) in stdata:\n        if num > max_value:\n            max_value = num\n    return max_value\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for entry in stdata:\n        if entry[1] > max_aggregate:\n            max_aggregate = entry[1]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata: return 0.0\n    elif len(stdata) == 1: return stdata[0][2]\n    else:\n        return max(map(lambda x: max(x), stdata))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(lambda: 0)\n    # The first tuple is always the last one.\n    agg_dict[tuple()] = (0, 0)\n    # I'm gonna store the current aggregate in the dictionary.\n    for sub_st in stdata:\n        agg_dict[sub_st] = (agg_dict[sub_st][0] + sub_st[1], agg_dict[sub_st][1] + 1)\n    return (agg_dict, agg_dict[tuple()])\ndef main():\n    stdata = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9)]\n    print(max_aggregate(stdata))\nmain()"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata_aggregate=defaultdict(list)\n    for each in stdata:\n        each_aggregate=0\n        for tuple in each:\n            each_aggregate+=tuple[1]\n        stdata_aggregate[each_aggregate].append(each)\n    stdata_aggregate_values=[]\n    for each in stdata_aggregate:\n        stdata_aggregate_values.append(sum(stdata_aggregate[each]))\n    return stdata_aggregate_values\ndef find_closest_aggregate(stdata,aggregate,aggregate_list):\n    '''\n    Write a function to find the aggregate in the list of the aggregates.\n    '''\n    aggregate_list_copy=list(aggregate_list)\n    aggregate_list_copy.sort()\n    return aggregate_list_copy[len(aggregate_list_copy)-1]\n    #return stdata[aggregate].sort()[0][1]\ndef average_aggregate(aggregate_list):\n    '''\n    Write a function to calculate the average aggregate from the list of aggregates.\n    '''\n    aggregate_values=[]\n    for each in aggregate_list:\n        each_aggregate=0\n        for tuple in each:\n            each_aggregate+=tuple[1]\n        aggregate_values.append(each_aggregate/len(each))\n    return sum(aggregate_values)/len(aggregate_values)\ndef merge_aggregate(aggregate_list):\n    '''\n    Write a function to merge the list of aggregates to the main aggregate list.\n    '''\n    for each in aggregate_list:\n        if not each in aggregate_list_copy:\n            aggregate_list_copy.append(each)\n    return aggregate_list_copy\ndef merge_aggregate_values(aggregate_list_values,aggregate_list_values_copy):\n    '''\n    Write a function to merge the list of aggregate values to the main aggregate list values.\n    '''\n    for each in aggregate_list_values:\n        if not each in aggregate_list_values_copy:\n            aggregate_list_values_copy.append(each)\n    return aggregate_list_values_copy\ndef sort_dict(stdata_dict):\n    '''\n    Write a function that takes a dictionary as input and sorts it based on the keys of the dictionary.\n    '''\n    stdata_dict_sorted=defaultdict(list)\n    for each in stdata_dict:\n        stdata_dict_sorted[each].sort()\n    return stdata_dict_sorted\ndef cls():\n    '''\n    Write a function that clears the console.\n    '''\n    cls = lambda: os.system('cls' if os.name == 'nt' else 'clear')\n    cls()\n    return cls\ndef clear():\n    '''\n    Write a function that clears the console.\n    '''\n    cls = lambda: os.system('cls' if os.name == 'nt' else 'clear')\n    cls()\ndef capitalize(line):\n    '''\n    Write a function that capitalizes the first letter of each word in a line.\n    '''\n    line_capitalize=[]\n    for word in line.split():\n        line_capitalize.append(word[0].upper() + word[1:])\n    return''.join(line_capitalize)\ndef check_sp(sp_string):\n    '''\n    Write a function that takes a string as input and checks whether it contains two words separated by spaces.\n    '''\n    sp_string=sp_string.lower().split(' ')\n    if len(sp_string)==2:\n        return True\n    else:\n        return False\ndef freq(string):\n    '''\n    Write a function that takes a string as input and counts the number of occurances of each letter in the string.\n    '''\n    string=string.lower()\n    string_letters=[]\n    for letter in string:\n        string_letters.append(letter.lower())\n    string_letters.sort()\n    occurances=[]\n    for element in string_letters:\n        occurances.append(string.count(element))\n    return occurances\ndef find_key(dict,value):\n    '''\n    Write a function that takes a dictionary as input and returns the key from the dictionary that contains the value.\n    '''\n    value=value.lower()\n    if dict==None:\n        return ''\n    if value=='':\n        return ''\n    for each in dict:\n        if value in dict[each]:\n            return each\ndef find_last(dict,value):\n    '''\n    Write a function that takes a dictionary as input and returns the last occurance of the value.\n    '''\n    value=value.lower()\n    if dict==None:\n        return ''\n    if value=='':\n        return ''\n    for each in dict:\n        if value in dict[each]:\n            if len(dict[each])==1:\n                return each\ndef find_first(dict,value):\n    '''\n    Write a function that takes a dictionary as input and returns the first occurance of the value.\n    '''\n    value=value.lower()\n    if dict==None:\n        return ''\n    if value=='':\n        return ''\n    for each in dict:\n        if value in dict[each]:\n            if len(dict[each])==1:\n                return each\ndef find_first_last(dict,value):\n    '''\n    Write a function that takes a dictionary as input and returns the first and last occurance of the value.\n    '''\n    value=value.lower()\n    if dict==None:\n        return ''\n    if value=='':\n        return ''\n    for each in dict:\n        if value in dict[each]:\n            return each,dict[each].index(value)+1\ndef find_last_first(dict,value):\n    '''\n    Write a function that takes a dictionary as input and returns the last and first occurance of the value.\n    '''\n    value=value.lower()\n    if dict==None:\n        return ''\n    if value=='':\n        return ''\n    for each in dict:\n        if value in dict[each]:\n            return each,dict[each].index(value)+1\ndef lcs(string_1,string_2,i,j):\n    '''\n    Write a function that takes two strings as input and returns the longest common substring of the two.\n    '''\n    string_1=string_1.lower()\n    string_2=string_2.lower()\n    if i==0:\n        return 0\n    if j==0:\n        return 0\n    if string_1[i]==string_2[j]:\n        return 1+lcs(string_1,string_2,i-1,j-1)\n    else:\n        return max(lcs(string_1,string_2,i-1,j),lcs(string_1,string_2,i,j-1))\ndef longest_common_substring(string_1,string_2,i,j):\n    '''\n    Write a function that takes two strings as input and returns the length of the longest common substring.\n    '''\n    string_1=string_1.lower()\n    string_2=string_2.lower()\n    if i==0:\n        return 0\n    if j==0:\n        return 0\n    if string_1[i]==string_2[j]:\n        return 1+longest_common_substring(string_1,string_2,i-1,j-1)\n    else:\n        return max(longest_common_substring(string_1,string_2,i-1,j),longest_common_substring(string_1,string_2,i,j-1))\ndef longest_common_substring_with_repetition(string_1,string_2):\n    '''\n    Write a function that takes two strings as input and returns the length of the longest common substring.\n    '''\n    string_1=string_1.lower()\n    string_2=string_2.lower()\n    if string_1==string_2:\n        return 0\n    if len(string_1)==len(string_2):\n        return 0\n    if string_1[0]==string_2[0]:\n    "
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_item = (0,0)\n    for item in stdata:\n        if item[0] > max_aggregate_item[0]:\n            max_aggregate_item = item\n        if item[1] > max_aggregate_item[1]:\n            max_aggregate_item = item\n    return max_aggregate_item\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = defaultdict(float)\n    for stdata_tuple in stdata:\n        max_aggregate_list[stdata_tuple[0]] = max(stdata_tuple[1], max_aggregate_list[stdata_tuple[0]])\n    return max(max_aggregate_list.values())\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    min_aggregate_list = defaultdict(float)\n    for stdata_tuple in stdata:\n        min_aggregate_list[stdata_tuple[0]] = min(stdata_tuple[1], min_aggregate_list[stdata_tuple[0]])\n    return min(min_aggregate_list.values())\ndef len_aggregate(stdata):\n    '''\n    Write a function to calculate the sum of the length of each tuple from the list of tuples.\n    '''\n    length_list = [len(stdata_tuple) for stdata_tuple in stdata]\n    return sum(length_list)\ndef process_input(stdata):\n    '''\n    Write a function to get the highest and lowest number from each tuple from the list of tuples.\n    '''\n    highest_aggregate_number = max_aggregate(stdata)\n    lowest_aggregate_number = min_aggregate(stdata)\n    highest_aggregate = max(highest_aggregate_number, lowest_aggregate_number)\n    lowest_aggregate = min(highest_aggregate_number, lowest_aggregate_number)\n    return highest_aggregate, lowest_aggregate\ndef main():\n    print(process_input(['Zoe', '2.99', 'Gabriel', 'David', 'Jerry', 'Ethan', 'Jo', 'Lisa', 'Rosalind', 'William']) )\nmain()"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if stdata == None or len(stdata) == 0:\n        return None\n    aggs = defaultdict(lambda: [0, 0])\n    for a in stdata:\n        aggs[a[0]].append(a[1])\n    return max(aggs.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # TODO: Write the function and test it!\n    max_sum = 0\n    for item in stdata:\n        max_sum += item[1]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    \n    binary_str = '{0:b}'.format(n) \n    x = int(binary_str, 2) \n    sum = 0\n    for i in range(n): \n        sum = sum + (x & 1) \n        x = x >> 1 \n    \n    return sum\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n_digits = 2 ** n\n    sum_first = 0\n    sum_last = 0\n    for i in range(n_digits):\n        if i >= 2:\n            sum_first += (i - 1) * 2 ** (n - i)\n        if i >= 3:\n            sum_last += (i - 2) * 2 ** (n - i)\n    return int(sum_first) == int(sum_last)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = []\n    for i in range(n):\n        result.append([])\n        for j in range(n):\n            if i>0:\n                result[i].append(bin(n)[2:].count('1'))\n            if j>0:\n                result[i].append(bin(n)[2:].count('1',i+1,j+1))\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # We have a n = 2^n, and if n is odd, this means n = 2^n - 1\n    if n <= 1: \n        return 1\n    # num_of_binary_seq = 0\n    # for i in range(n): \n    #     # If i is odd, then we would have sum of first 2n + 1 bits = 0 + 1 = 0 \n    #     if i % 2 == 1: \n    #         # Do not need to check the 0th bit, it is already accounted\n    #         # For example, for 2^5 = 10, we would have sum of first 5 bits = 0 + 1 + 2 + 2 = 2 + 3 = 4 \n    #         continue \n    #     # n = 2^n, find the sum of first 2n + 1 bits (0 + 1 = 1)\n    #     num_of_binary_seq += count_binary_seq(i + 1)\n    # return num_of_binary_seq \n    \n    # Count the sum of all bit.\n    bit_sum = 0\n    for i in range(2 ** n): \n        bit_sum += i \n    return bit_sum \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # if length of n is odd\n    if n < 2: \n        print(n) \n        return\n    # if length of n is even\n    if n % 2 == 0: \n        print(n) \n        return \n    \n    # initialize result\n    count = 0 \n    \n    # iterate through 2n-1 bits \n    for i in range(1, n - 1, 2): \n        \n        # print(i, \":\", bin(i), \"=\", bin(i + n - 2)) \n        \n        # if sum of first two bits is same as sum of last two bits \n        if bin(i) == bin(i + n - 2): \n            count += 1 \n    \n    # print result \n    print(count) \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # n should be even\n    # you have to use 2's complement function\n    def binary_seq_odd(n): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        \n        # n should be even\n        # you have to use 2's complement function\n        def binary_seq_even(n): \n            '''\n            Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n            '''\n            \n            # n should be even\n            # you have to use 2's complement function\n            def binary_seq_odd(n): \n                '''\n                Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                '''\n                \n                # n should be even\n                # you have to use 2's complement function\n                def binary_seq_even(n): \n                    '''\n                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                    '''\n                    \n                    # n should be even\n                    # you have to use 2's complement function\n                    def binary_seq_odd(n): \n                        '''\n                        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                        '''\n                        \n                        # n should be even\n                        # you have to use 2's complement function\n                        def binary_seq_even(n): \n                            '''\n                            Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                            '''\n                            \n                            # n should be even\n                            # you have to use 2's complement function\n                            def binary_seq_odd(n): \n                                '''\n                                Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                '''\n                                \n                                # n should be even\n                                # you have to use 2's complement function\n                                def binary_seq_even(n): \n                                    '''\n                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                    '''\n                                    \n                                    # n should be even\n                                    # you have to use 2's complement function\n                                    def binary_seq_odd(n): \n                                        '''\n                                        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                        '''\n                                        \n                                        # n should be even\n                                        # you have to use 2's complement function\n                                        def binary_seq_even(n): \n                                            '''\n                                            Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                            '''\n                                            \n                                            # n should be even\n                                            # you have to use 2's complement function\n                                            def binary_seq_odd(n): \n                                                '''\n                                                Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                '''\n                                                \n                                                # n should be even\n                                                # you have to use 2's complement function\n                                                def binary_seq_even(n): \n                                                    '''\n                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                    '''\n                                                    \n                                                    # n should be even\n                                                    # you have to use 2's complement function\n                                                    def binary_seq_odd(n): \n                                                        '''\n                                                        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                        '''\n                                                        \n                                                        # n should be even\n                                                        # you have to use 2's complement function\n                                                        def binary_seq_even(n): \n                                                            '''\n                                                            Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                            '''\n                                                            \n                                                            # n should be even\n                                                            # you have to use 2's complement function\n                                                            def binary_seq_odd(n): \n                                                                '''\n                                                                Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                '''\n                                                                \n                                                                # n should be even\n                                                                # you have to use 2's complement function\n                                                                def binary_seq_even(n): \n                                                                    '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                    # n should be even\n                                                                    # you have to use 2's complement function\n                                                                    def binary_seq_odd(n): \n                                                                        '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                    # n should be even\n                                                                    # you have to use 2's complement function\n                                                                    def binary_seq_even(n): \n                                                                        '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                    # n should be even\n                                                                    # you have to use 2's complement function\n                                                                    def binary_seq_odd(n): \n                                                                        '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                    # n should be even\n                                                                    # you have to use 2's complement function\n                                                                    def binary_seq_even(n): \n                                                                        '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                    # n should be even\n                                                                    # you have to use 2's complement function\n                                                                    def binary_seq_odd(n): \n                                                                        '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                    # n should be even\n                                                                    # you have to use 2's complement function\n                                                                    def binary_seq_even(n): \n                                                                        '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                    # n should be even\n                                                                    # you have to use 2's complement function\n                                                                    def binary_seq_odd(n): \n                                                                        '''\n                                                                    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n                                                                    '''\n                                                                    \n                                                                "
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def find_binary_seq(n):\n        if n <= 1: \n            return 1 \n        else: \n            return find_binary_seq(n - 1) + find_binary_seq(n - 2)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    s = n\n    while s!= 0:\n        count += 1\n        s -= 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_part_two(n): \n        '''\n        Write a function that returns the number of all binary sequences of length n such that the sum of first n bits is same as the sum of last n bits of the consecutive binary sequences. \n        '''\n        def bin_seq_get(start, end): \n            ''' \n            Write a function that returns the number of all binary sequences of length n such that the sum of first n bits is same as the sum of last n bits of the consecutive binary sequences. \n            '''\n            if start == end:\n                return 1\n            elif start == end - 1: \n                return 0\n            else:\n                return bin_seq_get(start, end - 1) + bin_seq_get(start + 1, end)\n        \n        answer = bin_seq_get(0, n)\n        \n        return answer\n    \n    if n < 10:\n        return count_binary_seq_part_two(n)\n    else:\n        return count_binary_seq_part_two(10)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n    print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return -1\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for k, v in d.items()])\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        raise TypeError('Expected a dictionary')\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) is not dict:\n        return 0\n    if len(d) == 0:\n        return 0\n    for key,val in d.items():\n        depth += dict_depth(val)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '__dict__' in dir(d):\n        depth = 1\n        for i in d.__dict__:\n            if i.startswith('__') or i.startswith('_'):\n                depth = -1\n            elif type(d) == dict:\n                depth = depth + dict_depth(d[i])\n        return depth\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    else:\n        return max(dict_depth(d[k]) for k in d) + 1\n        \n    \n    \n    \n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 0\n        for i in d.items():\n            depth = depth + 1 + dict_depth(i[1])\n        return depth\n    else:\n        return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Copy and initialize the dictionary.\n    d = d.copy()\n    \n    # Loop through the keys of the dictionary.\n    depth = 1\n    \n    # Loop through the values of the dictionary.\n    for key in d.keys():\n        \n        # Increase the depth.\n        depth += 1\n        \n        # Loop through the values of the dictionary.\n        for value in d[key]:\n            \n            # Increase the depth.\n            depth += 1\n        \n        # Update the values.\n        d[key] = depth\n        \n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    depth = 0\n    for key in d.keys():\n        depth += 1 + dict_depth(d[key])\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        depth = 0\n        for key, val in d.items():\n            depth = max(depth, dict_depth(val))\n        return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    else:\n        depth = 1 + max(dict_depth(d[x] for x in d) for x in d)\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # looping over the array, starting at index in the array and moving forward\n    # this is to avoid using indexing to find the element.\n    for r in range(len(arr)-1):\n        if (arr[r][index] >= arr[r+1][index]):\n            if (arr[r][index] >= arr[r+1][index]):\n                # if the first value of the range is less than the next, then add it to the list\n                # find the first range that is larger than the next value\n                if (arr[r][index] >= arr[r+1][index]):\n                    if (arr[r][index] < arr[r+1][index]):\n                        # if this is the last index of the list and the first index is greater than the second index, then\n                        # then, we want to shift the array so that we are at the second index of the first range\n                        # and move forward one index.\n                        if (r == len(arr) - 2):\n                            arr[r][index] = arr[r][index] + arr[r][index+1]\n                        else:\n                            arr[r][index] = arr[r][index] + arr[r+1][index]\n                    else:\n                        arr[r][index] = arr[r][index] + arr[r+1][index]\n            else:\n                if (arr[r][index] > arr[r+1][index]):\n                    if (arr[r][index] <= arr[r+1][index]):\n                        if (arr[r][index] < arr[r+1][index]):\n                            arr[r][index] = arr[r][index] + arr[r+1][index]\n                        else:\n                            arr[r][index] = arr[r][index] + arr[r+1][index]\n                    else:\n                        arr[r][index] = arr[r][index] + arr[r+1][index]\n        else:\n            if (arr[r][index] <= arr[r+1][index]):\n                if (arr[r][index] < arr[r+1][index]):\n                    arr[r][index] = arr[r][index] + arr[r+1][index]\n                else:\n                    arr[r][index] = arr[r][index] + arr[r+1][index]\n            else:\n                if (arr[r][index] > arr[r+1][index]):\n                    arr[r][index] = arr[r][index] + arr[r+1][index]\n                else:\n                    arr[r][index] = arr[r][index] + arr[r+1][index]\n    # Find the element that is larger than the first value of the range\n    # and move forward one index.\n    if (r == len(arr) - 1):\n        return arr[r][index]\n    else:\n        return arr[r][index] + find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges is None:\n        return arr[index]\n    if rotations == 0:\n        return arr[index]\n    \n    else:\n        return find_Element(arr,ranges,rotations-1,index) + find_Element(arr,ranges-1,rotations,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        if(ranges[i][0] <= index <= ranges[i][1]):\n            if(rotations[i] > 0):\n                index = index - ranges[i][0]\n            else:\n                index = ranges[i][1] - index\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    res = None\n    for i in range(ranges[0]):\n        if (i+index) > ranges[1] :\n            break\n        for j in range(rotations):\n            if arr[i+j]!= res :\n                res = arr[i+j]\n                break\n    return res\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        for j in range(ranges[index]):\n            arr[index]=arr[index][:-1]\n            index=index+1\n            if index>ranges[index]-2:\n                return arr\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == None :\n        return None\n    if (arr == None or r.find(arr)!=None or rotations == None or rotations!= 0) :\n        return arr[index]\n    if r.find(arr[0:ranges[index]])!= None :\n        return find_Element(arr[ranges[index] : ranges[index]+1],ranges,rotations-1,index)\n    else :\n        return arr[index]\n    return arr[index]\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if len(ranges) == 0 :\n        if len(rotations) == 0 :\n            return arr[index]\n        else :\n            print(\"Ran into a loop!\")\n            return -1\n    else :\n        if index >= len(arr):\n            return -1\n        else :\n            if ranges[0] <= index and index <= ranges[1] :\n                return arr[index]\n            elif ranges[1] <= index and index <= ranges[0] :\n                return arr[index]\n            else :\n                # we'll handle the case of rotation -1\n                if rotations[0] <= index and index <= rotations[1] :\n                    return arr[index]\n                elif rotations[1] <= index and index <= rotations[0] :\n                    return arr[index]\n                else :\n                    print(\"Ran into a loop!\")\n                    return -1\n            \n    \n    \n    \ndef inverse(ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) == 0 :\n        if len(rotations) == 0 :\n            return arr[index]\n        else :\n            print(\"Ran into a loop!\")\n            return -1\n    else :\n        if index >= len(arr):\n            return -1\n        else :\n            if ranges[0] <= index and index <= ranges[1] :\n                return arr[index]\n            elif ranges[1] <= index and index <= ranges[0] :\n                return arr[index]\n            else :\n                # we'll handle the case of rotation -1\n                if rotations[0] <= index and index <= rotations[1] :\n                    return arr[index]\n                elif rotations[1] <= index and index <= rotations[0] :\n                    return arr[index]\n                else :\n                    print(\"Ran into a loop!\")\n                    return -1\n    \ndef check_rotation(index) :\n    '''\n    Write a python function to check a given index for a rotation.\n    '''\n    if len(ranges) == 0 :\n        if len(rotations) == 0 :\n            return True\n        else :\n            print(\"Ran into a loop!\")\n            return False\n    else :\n        if index >= len(arr):\n            return False\n        else :\n            if ranges[0] <= index and index <= ranges[1] :\n                return True\n            elif ranges[1] <= index and index <= ranges[0] :\n                return True\n            else :\n                print(\"Ran into a loop!\")\n                return False\n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        for j in range(len(arr)) :\n            if i == j :\n                continue\n            else :\n                if(rotations > 0 and index == (len(arr)-1)) :\n                    return arr[i]\n                if(rotations < 0 and index == 0) :\n                    return arr[j]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (arr[ranges[index]]!= 0) : \n        return arr[ranges[index]]\n    \n    for index in range(0,len(ranges)-1) : \n        if (arr[ranges[index]]!= 0) : \n            return arr[ranges[index]] \n    return arr[ranges[index]] \n    \ndef print_rotations(arr) : \n    '''\n    Write a python function to print the number of rotations made using a list of numbers.\n    '''\n    print(\"Number of rotations: \" + str(len(arr))) \n    print(\"Rotation \" + str(arr[-1]) + \" by \" + str(arr[-2])) \n    print(\"Rotation \" + str(arr[0]) + \" by \" + str(arr[1])) \n    print(\"Rotation \" + str(arr[3]) + \" by \" + str(arr[4])) \n    print(\"Rotation \" + str(arr[5]) + \" by \" + str(arr[6])) \n    print(\"Rotation \" + str(arr[7]) + \" by \" + str(arr[8])) \n    print(\"Rotation \" + str(arr[9]) + \" by \" + str(arr[10])) \n    print(\"Rotation \" + str(arr[11]) + \" by \" + str(arr[12])) \n    print(\"Rotation \" + str(arr[13]) + \" by \" + str(arr[14])) \n    print(\"Rotation \" + str(arr[15]) + \" by \" + str(arr[16])) \n    print(\"Rotation \" + str(arr[17]) + \" by \" + str(arr[18])) \n    print(\"Rotation \" + str(arr[19]) + \" by \" + str(arr[20])) \n    print(\"Rotation \" + str(arr[21]) + \" by \" + str(arr[22])) \n    print(\"Rotation \" + str(arr[23]) + \" by \" + str(arr[24])) \n    print(\"Rotation \" + str(arr[25]) + \" by \" + str(arr[26])) \n    print(\"Rotation \" + str(arr[27]) + \" by \" + str(arr[28])) \n    print(\"Rotation \" + str(arr[29]) + \" by \" + str(arr[30])) \n    print(\"Rotation \" + str(arr[31]) + \" by \" + str(arr[32])) \n    print(\"Rotation \" + str(arr[33]) + \" by \" + str(arr[34])) \n    print(\"Rotation \" + str(arr[35]) + \" by \" + str(arr[36])) \n    print(\"Rotation \" + str(arr[37]) + \" by \" + str(arr[38])) \n    print(\"Rotation \" + str(arr[39]) + \" by \" + str(arr[40])) \n    print(\"Rotation \" + str(arr[41]) + \" by \" + str(arr[42])) \n    print(\"Rotation \" + str(arr[43]) + \" by \" + str(arr[44])) \n    print(\"Rotation \" + str(arr[45]) + \" by \" + str(arr[46])) \n    print(\"Rotation \" + str(arr[47]) + \" by \" + str(arr[48])) \n    print(\"Rotation \" + str(arr[49]) + \" by \" + str(arr[50])) \n    print(\"Rotation \" + str(arr[51]) + \" by \" + str(arr[52])) \n    print(\"Rotation \" + str(arr[53]) + \" by \" + str(arr[54])) \n    print(\"Rotation \" + str(arr[55]) + \" by \" + str(arr[56])) \n    print(\"Rotation \" + str(arr[57]) + \" by \" + str(arr[58])) \n    print(\"Rotation \" + str(arr[59]) + \" by \" + str(arr[60])) \n    print(\"Rotation \" + str(arr[61]) + \" by \" + str(arr[62])) \n    print(\"Rotation \" + str(arr[63]) + \" by \" + str(arr[64])) \n    print(\"Rotation \" + str(arr[65]) + \" by \" + str(arr[66])) \n    print(\"Rotation \" + str(arr[67]) + \" by \" + str(arr[68])) \n    print(\"Rotation \" + str(arr[69]) + \" by \" + str(arr[70])) \n    print(\"Rotation \" + str(arr[71]) + \" by \" + str(arr[72])) \n    print(\"Rotation \" + str(arr[73]) + \" by \" + str(arr[74])) \n    print(\"Rotation \" + str(arr[75]) + \" by \" + str(arr[76])) \n    print(\"Rotation \" + str(arr[77]) + \" by \" + str(arr[78])) \n    print(\"Rotation \" + str(arr[79]) + \" by \" + str(arr[80])) \n    print(\"Rotation \" + str(arr[81]) + \" by \" + str(arr[82])) \n    print(\"Rotation \" + str(arr[83]) + \" by \" + str(arr[84])) \n    print(\"Rotation \" + str(arr[85]) + \" by \" + str(arr[86])) \n    print(\"Rotation \" + str(arr[87]) + \" by \" + str(arr[88])) \n    print(\"Rotation \" + str(arr[89]) + \" by \" + str(arr[90])) \n    print(\"Rotation \" + str(arr[91]) + \" by \" + str(arr[92])) \n    print(\"Rotation \" + str(arr[93]) + \" by \" + str(arr[94])) \n    print(\"Rotation \" + str(arr[95]) + \" by \" + str(arr[96])) \n    print(\"Rotation \" + str(arr[97]) + \" by \" + str(arr[98])) \n    print(\"Rotation \" + str(arr[99]) + \" by \" + str(arr[100])) \n    print(\"Rotation \" + str(arr[101]) + \" by \" + str(arr[102])) \n    print(\"Rotation \" + str(arr[103]) + \" by \" + str(arr[104])) \n    print(\"Rotation \" + str(arr[105]) + \" by \" + str(arr[106])) \n    print(\"Rotation \" + str(arr[107]) + \" by \" + str(arr[108])) \n    print(\"Rotation \" + str(arr[109]) + \" by \" + str(arr[110])) \n    print(\"Rotation \" + str(arr[111]) + \" by \" + str(arr[112])) \n    print(\"Rotation \" + str(arr[113]) + \" by \" + str(arr[114])) \n    print(\"Rotation \" + str(arr[115]) + \" by \" + str(arr[116])) \n    print(\"Rotation \" + str(arr[117]) + \" by \" + str(arr[118])) \n    print(\"Rotation \" + str(arr[119]) + \" by \" + str(arr[120])) \n    print(\"Rotation \" + str(arr[121]) + \" by \" + str(arr[122])) \n    print(\"Rotation \" + str(arr[123]) + \" by \" + str(arr[124])) \n    print(\"Rotation \" + str(arr[125]) + \" by \" + str(arr[126])) \n    print(\"Rotation \" + str(arr[127]) + \" by \" + str(arr[128])) \n    print(\"Rotation \" + str(arr[129]) + \" by \" + str(arr[130])) \n    print(\"Rotation \" + str(arr[131]) + \" by \" + str(arr[132])) \n    print(\"Rotation \" + str(arr[133]) + \" by \" + str(arr[134])) \n    print(\"Rotation \" + str(arr[135]) + \" by \" + str(arr"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def process(word):\n        if len(word) <= 1:\n            return word[:1]\n        else:\n            return word[:-1]\n        \n    word1 = process(words[0])\n    word2 = process(words[1])\n    return word1, word2\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    l = len(words)\n    i = 0\n    j = 0\n    while i < l:\n        if words[i][0] == 'p':\n            l = l - 1\n            i = i + 1\n        else:\n            j = j + 1\n            i = i + 1\n    return words[0:l - 2], words[l - 2:l]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word[1:], word[:-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = words[0]\n    for i in words:\n        if i == first:\n            return first, i\n        else:\n            first = i\n    return first, first\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0:2]\ndef words_end(words):\n    '''\n    Write a function to return a list of words from a list of words ending with letter 'e'.\n    '''\n    return words[-1][::-1]\ndef capitalise(words):\n    '''\n    Write a function to return a list of words from a list of words whose first letter\n    is capitalised and the last letter is uppercase.\n    '''\n    return words[::-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.search(r'p', word):\n            return word, word.replace(r'p', '')\n    return None\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    for word in words:\n        if re.search(r'p', word):\n            return word, word.replace(r'p', '')\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = list(words)\n    newlist = []\n    for i in words:\n        if i.startswith('p'):\n            newlist.append(i)\n    return (newlist)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word[1:]\n    return words\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start = 0\n    for word in words:\n        if word[0] == 'p':\n            start += 1\n            if start == 1:\n                return word[1:]\n    return words[0]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if k == 0, return a\n    if k == 0:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return max(a[index:])\n    if index == 0:\n        return a[0]\n    if k == 1:\n        return a[index]\n    res = 0\n    k = 1\n    for i in range(index, n):\n        if i == index:\n            res = res + a[i-1]\n        else:\n            res = max(res, a[i-k])\n            k = k+1\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (n == 0) :\n        return 0\n    if k == 0 :\n        return a[n-1]\n    if index == n :\n        return max(max_sum_increasing_subseq(a, n-1, index, k-1), a[index] + k)\n    else :\n        return max(max_sum_increasing_subseq(a, n-1, index+1, k), a[index] + k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k) + k\n        \ndef fast_min_subseq(a, n, index):\n    '''\n    Write a function to find the minimum sum of increasing subsequence from prefix until the given index.\n    '''\n    if index == n:\n        return 0\n    if index == 0:\n        return a[index]\n    if index == 1:\n        return a[index]\n    return min(fast_min_subseq(a, n, index-1), fast_min_subseq(a, n, index-2)) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Time complexity: O(n^2)\n    # Space Complexity: O(n)\n    if index < n:\n        if a[index] < a[index + 1]:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return max(a[index] + a[index + 1], max_sum_increasing_subseq(a, n, index + 2, k))\n    else:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n < index: return 0\n    if index == n: return a[n]\n    curr_sum = 0\n    curr_sum += a[n]\n    # Find next element to be added\n    for i in range(index, n+1):\n        curr_sum += a[i]\n        # If we add k to curr sum until ith element, we can have\n        # sum = curr_sum + a[i]\n        # So we should add k to curr sum, and increase current sum by curr_sum.\n        if i + k < n and curr_sum + a[i + k] > curr_sum + a[i]:\n            curr_sum += a[i + k]\n        # Add current sum to current sum\n        curr_sum += a[i]\n    return curr_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or a[index] > a[index + 1]:\n        print(\"Something went wrong\")\n        return -1\n    elif index == 0:\n        return a[index]\n    elif index == 1:\n        return max(a[index] + a[index - 1], k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    i = index\n    s = a[i]\n    j = index\n    while i < n and j < n:\n        if a[j] < s:\n            s = a[j]\n            j += 1\n        else:\n            max_sum = max(max_sum, s+a[j])\n            j += 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    ans = 0\n    p = index\n    m = 0\n    l = 0\n    for i in range(0, k):\n        l = m\n        while p < n and a[p] <= a[p+1]:\n            p += 1\n        m = p\n        p = l\n        while p < n and a[p] >= a[p+1]:\n            p += 1\n        l = p\n        p = m\n        while p < n and a[p] >= a[p+1]:\n            p += 1\n        m = p\n        if l < i+1:\n            ans = max(ans, m-p+1)\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    kth_value = a[index]\n    max_sum = kth_value\n    \n    # If we have the sequence\n    if index < n:\n        # Iterate from 0 to the end\n        for i in range(index, n):\n            # Recursion\n            temp_sum = kth_value + a[i]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n            else:\n                kth_value = temp_sum\n        \n        # kth_value = kth_value + a[i]\n        kth_value = kth_value + a[i]\n        max_sum = max(kth_value, max_sum)\n    else:\n        max_sum = 0\n    \n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    #returns None if m and n are both 0\n    if m and n == 0:\n        return None\n    \n    #returns tuple if m is zero\n    elif m == 0:\n        return tuplex\n    \n    #recursive call for recursive case: m is -1 or n is -1\n    else:\n        return colon_tuplex(tuplex,m-1,n) + colon_tuplex(tuplex,m,n-1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex)\n    h = set()\n    for i in range(n):\n        for j in range(m):\n            h.add(tuplex[i][j])\n    #print(h)\n    h = list(h)\n    #print(h)\n    h.sort()\n    #print(h)\n    #print(h[0])\n    #print(h[0][0])\n    return h\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #col = len(tuplex)\n    #return (col+1)*col\n    col = 0\n    for i in range(0,len(tuplex)):\n        if tuplex[i]!= ():\n            col+=1\n            for j in range(0,len(tuplex[i])):\n                if tuplex[i][j] == ():\n                    return 0\n    return col\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    columns = []\n    for i in range(m):\n        columns.append(tuplex[i][n])\n    return tuple(columns)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = 0\n    # counter for pair and its pair in the tuple\n    for i in range(m-1):\n        # counter for the second element of the tuple\n        for j in range(n-1):\n            # condition to check if the numbers of the pair are equal\n            if tuplex[i][j] == tuplex[i+1][j] == tuplex[i][j+1] == tuplex[i+1][j+1]:\n                # if the numbers of the pair are equal, then the pair is colored with the given value\n                c += 1\n    return c\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    '''\n    A tuple is a list of immutable objects. The first element of a tuple is itself.\n    The second element of a tuple is the first element.\n    '''\n    '''\n    The input is a tuple\n    The output is the tuple with the first element of the tuple as the element and the second as the element of the tuple\n    '''\n    if m == 1:\n        return(tuplex)\n    if n == 1:\n        return(tuplex[0:1])\n    if len(tuplex) == 2:\n        return(tuplex[0],tuplex[1])\n    if len(tuplex) == 3:\n        return(tuplex[0],tuplex[1],tuplex[2])\n    if len(tuplex) == 4:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3])\n    if len(tuplex) == 5:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4])\n    if len(tuplex) == 6:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5])\n    if len(tuplex) == 7:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6])\n    if len(tuplex) == 8:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7])\n    if len(tuplex) == 9:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8])\n    if len(tuplex) == 10:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9])\n    if len(tuplex) == 11:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10])\n    if len(tuplex) == 12:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11])\n    if len(tuplex) == 13:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12])\n    if len(tuplex) == 14:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13])\n    if len(tuplex) == 15:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14])\n    if len(tuplex) == 16:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14],tuplex[15])\n    if len(tuplex) == 17:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14],tuplex[15],tuplex[16])\n    if len(tuplex) == 18:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14],tuplex[15],tuplex[16],tuplex[17])\n    if len(tuplex) == 19:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14],tuplex[15],tuplex[16],tuplex[17],tuplex[18])\n    if len(tuplex) == 20:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14],tuplex[15],tuplex[16],tuplex[17],tuplex[18],tuplex[19])\n    if len(tuplex) == 21:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14],tuplex[15],tuplex[16],tuplex[17],tuplex[18],tuplex[19],tuplex[20])\n    if len(tuplex) == 22:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5],tuplex[6],tuplex[7],tuplex[8],tuplex[9],tuplex[10],tuplex[11],tuplex[12],tuplex[13],tuplex[14],tuplex[15],tuplex[16],tuplex[17],tuplex[18],tuplex[19],tuplex[20],tuplex[21])\n    if len(tuplex) == 23:\n        return(tuplex[0],tuplex[1],tuplex[2],tuplex[3],tu"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst=[]\n    for i in range(0,len(tuplex)-1):\n        lst.append(tuplex[i]+tuplex[i+1])\n    \n    return m+n+1,lst\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    i,j=0,0\n    t=[]\n    while i<len(tuplex):\n        if tuplex[i][0]==tuplex[j][0]:\n            t.append(tuplex[i])\n            i+=1\n            j+=1\n        else:\n            j+=1\n    return t\ndef extract_colon_tuplex(tuplex):\n    '''\n    Given a tuple, return a colon (list of tuples).\n    '''\n    t=[]\n    for i in tuplex:\n        t.append(i[0])\n    return t\ndef get_colon_diff(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, return a colon (list of tuples)\n    '''\n    diff=[]\n    for i in range(m):\n        diff.append(tuplex1[i][0]-tuplex2[i][0])\n    return diff\ndef merge_colon_tuplex(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, merge them.\n    '''\n    tuplex3=[]\n    i=0\n    j=0\n    while i<len(tuplex1) and j<len(tuplex2):\n        if tuplex1[i][0]<tuplex2[j][0]:\n            tuplex3.append(tuplex1[i])\n            i+=1\n        else:\n            tuplex3.append(tuplex2[j])\n            j+=1\n    tuplex3.append(tuplex1[i])\n    tuplex3.append(tuplex2[j])\n    return tuplex3\ndef overlap_colon_tuplex(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, merge them.\n    '''\n    tuplex3=[]\n    i=0\n    j=0\n    while i<len(tuplex1) and j<len(tuplex2):\n        if tuplex1[i][0]<tuplex2[j][0]:\n            tuplex3.append(tuplex1[i])\n            i+=1\n        else:\n            tuplex3.append(tuplex2[j])\n            j+=1\n    tuplex3.append(tuplex1[i])\n    tuplex3.append(tuplex2[j])\n    return tuplex3\ndef union_colon_tuplex(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, merge them.\n    '''\n    tuplex3=[]\n    i=0\n    j=0\n    while i<len(tuplex1) and j<len(tuplex2):\n        if tuplex1[i][0]<tuplex2[j][0]:\n            tuplex3.append(tuplex1[i])\n            i+=1\n        else:\n            tuplex3.append(tuplex2[j])\n            j+=1\n    tuplex3.append(tuplex1[i])\n    tuplex3.append(tuplex2[j])\n    return tuplex3\ndef diff_colon_tuplex(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, return a colon (list of tuples).\n    '''\n    diff=[]\n    for i in range(len(tuplex1)):\n        diff.append(tuplex1[i][0]-tuplex2[i][0])\n    return diff\ndef non_overlap_colon_tuplex(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, return a colon (list of tuples).\n    '''\n    non=[]\n    for i in range(len(tuplex1)):\n        non.append([tuplex1[i][0],tuplex2[i][0]])\n    return non\ndef get_overlap_colon_diff(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, return a colon (list of tuples).\n    '''\n    overlap=[]\n    for i in range(len(tuplex1)):\n        overlap.append(tuplex1[i][0]-tuplex2[i][0])\n    return overlap\ndef get_non_overlap_colon_diff(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, return a colon (list of tuples).\n    '''\n    non=[]\n    for i in range(len(tuplex1)):\n        non.append([tuplex1[i][0],tuplex2[i][0]])\n    return non\ndef get_diff_colon_diff(tuplex1,tuplex2,m,n):\n    '''\n    Given two tuples, return a colon (list of tuples).\n    '''\n    diff=[]\n    for i in range(len(tuplex1)):\n        diff.append(tuplex1[i][0]-tuplex2[i][0])\n    return diff\ndef get_tuplex(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[0]\ndef get_tuplex2(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[1]\ndef get_tuplex3(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[2]\ndef get_tuplex4(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[3]\ndef get_tuplex5(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[4]\ndef get_tuplex6(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[5]\ndef get_tuplex7(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[6]\ndef get_tuplex8(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[7]\ndef get_tuplex9(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[8]\ndef get_tuplex10(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[9]\ndef get_tuplex11(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[10]\ndef get_tuplex12(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[11]\ndef get_tuplex13(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[12]\ndef get_tuplex14(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[13]\ndef get_tuplex15(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[14]\ndef get_tuplex16(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[15]\ndef get_tuplex17(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[16]\ndef get_tuplex18(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[17]\ndef get_tuplex19(tuplex):\n    '''\n    Return a tuple.\n    '''\n    return tuplex[18]\ndef get_tuplex20(tuplex):\n    '''\n    Return a tupl"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n>m:\n        return None\n    if tuplex==None:\n        return None\n    if tuplex[0]!=None and tuplex[1]!=None:\n        return colon_tuplex(tuplex[0],m,n+1)\n    else:\n        return (tuplex[0],n+1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    n = len(tuplex[0])\n    d = {'$':0}\n    for i in range(n):\n        for j in range(n):\n            d[tuplex[m][i][j]] = d.get(tuplex[m][i][j],0) + 1\n    return d.get(tuplex[m][n-1][n-1],0)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #Write your code here\n    factor1 = [1]*N\n    factor2 = [1]*N\n    \n    for i in range(N):\n        factor1[i] = nums1[i]//nums2[i]\n        factor2[i] = nums2[i]//nums1[i]\n    \n    #print(nums1,factor1)\n    #print(nums2,factor2)\n    \n    s1 = []\n    s2 = []\n    \n    for i in range(N):\n        if factor1[i]!= 1:\n            s1.append(factor1[i])\n        else:\n            s2.append(factor2[i])\n            \n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    \n    return max(s1[-1]*s2[-1],s1[-1]*s2[-2]"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # keep track of largest product\n    LPR = {}\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # recursive\n    if N == 0:\n        return []\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Return the maximum product from both lists\n    # Return -1 if there are no products\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the indices\n    nums_index = []\n    for i in range(N):\n        if nums1[i] < nums2[i]:\n            nums_index.append(i)\n        else:\n            nums_index.append(i)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create an empty dictionary to store product\n    prod = {}\n    # For each list, store the product of all the factors\n    for i in range(1, N + 1):\n        prod[i] = 0\n    # Loop through the two lists\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the product of the two numbers\n            prod[num1 * num2] += 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    min1 = nums1[0]\n    min2 = nums2[0]\n    for i in range(1, N):\n        min1 = min(min1, nums1[i])\n        min2 = min(min2, nums2[i])\n    min1 = min1 * min2\n    return min1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # define a list to store smallest number\n    smallest = []\n    for i in range(0, N):\n        smallest.append(i + 1)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i]*1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def get_max(nums, i, j):\n        max = nums[i] * nums[j]\n        if max < nums[i] * nums[j]:\n            max = nums[i] * nums[j]\n            \n        if nums[j] < nums[j - 1] and i + 1 < N:\n            if nums[j] > nums[j - 1] * nums[i + 1]:\n                nums[i + 1] *= nums[j]\n        if nums[j] < nums[j - 1] and j + 1 < N:\n            if nums[j] > nums[j - 1] * nums[i + 1]:\n                nums[i + 1] *= nums[j]\n        return max\n    \n    def sort_and_check_prod(nums):\n        if len(nums) < 2:\n            return nums\n        for i in range(len(nums) - 1):\n            if nums[i] < nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                nums = sort_and_check_prod(nums)\n        return nums\n        \n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    nums1 = sort_and_check_prod(nums1)\n    nums2 = sort_and_check_prod(nums2)\n    \n    if len(nums1) < len(nums2):\n        return nums1, nums2\n    \n    nums1 = get_max(nums1, 0, len(nums1) - 1)\n    nums2 = get_max(nums2, 0, len(nums2) - 1)\n    \n    return nums1, nums2\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    return a\n    "
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    while a <= b:\n        if a > b:\n            a = a + a % b\n        else:\n            b = b + b % a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    #pass\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(b==0):\n        return a\n    elif(b<0):\n        return maximum(b,a%b)\n    else:\n        return a if a>b else a%b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(f\"Maximum of {a} and {b} is {max(a,b)}\")\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list=str1.split()\n    tuple_list=[]\n    for i in str_list:\n        tuple_list.append(i)\n    return tuple(tuple_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = list(str1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    temp = list(str1)\n    temp = list(temp)\n    return tuple(temp)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    if str1:\n        return tuple(str1)\n    else:\n        return ()\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    if len(str1) > 0:\n        result = tuple(str1)\n    else:\n        result = ()\n        \n    return result\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (ord(c) for c in str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n!= 0:\n        n &= (n - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~n \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # for each bit in n\n    for i in range(len(n)):\n        if n[i] == 1:\n            # if this bit is 0\n            if i == 0:\n                # set the unset bit to 1\n                n[i] = 1\n            # if this bit is 1\n            else:\n                # if the next bit is 0\n                if n[i] == 0:\n                    # set the unset bit to 1\n                    n[i] = 1\n                # if the next bit is 1\n                else:\n                    # set the unset bit to 0\n                    n[i] = 0\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n << 7)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    from math import floor\n    if n<0:\n        n=n*-1\n    return floor(n)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & 0b1111111111\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #Return the number as a bitstring\n    return n & 0xFF\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # The first bit should be zero\n    # First set a zero bit on the left\n    # Then set a one bit on the left\n    # First set a one bit on the right\n    # Then set a zero bit on the right\n    # Lastly set a zero bit on the left\n    # Lastly set a one bit on the left\n    # And so on\n    if n & (1<<1)!= 0:\n        n &= ~(1<<1)\n        print'set_left_most_unset_bit: ', n\n    # Now set the left most unset bit\n    n &= ~(1<<1)\n    # Lastly, set a one bit on the right\n    n &= ~(1<<1)\n    n &= ~(1<<1)\n    print'set_left_most_unset_bit: ', n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # For every bit in n\n    for i in range(32):\n        # If bit is 0\n        if n & (1 << i):\n            # Set bit to 1\n            n = n | 1\n        # If bit is 1\n        else:\n            # Set bit to 0\n            n = n | 0\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return \n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r * (h / 2) * math.pi\ndef compute_area(r,h):\n    '''\n    Write a function to compute the area of a cone.\n    '''\n    return (volume_cone(r,h)) * math.pi\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4*(math.pi*r*math.pow(h,3))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi * r ** 3) * math.pow(h,3)\n    print(\"The volume of the cone is \" + str(volume) + \" m3\")\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*math.pi*r*h*math.sin(math.pi*r*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    l = 2*math.pi*r\n    return l*(4/3)*(h**3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (r**3 * (math.pi * h**3) / 6)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = h/2*(math.pi*r**2)\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r**2)*h\ndef main():\n    '''\n    Demo of using functions in a while loop.\n    '''\n    # find the volume of a cone given a radius r and height h\n    print(volume_cone(4,10))\n    \n    '''\n    After using a function, it is possible to show what it needs to be done.\n    '''\n    # find the volume of a cone given a height h\n    print(volume_cone(4,6))\n    \n    '''\n    As you can see, we can see that the volume of a cone is equal to the volume of a sphere.\n    To demonstrate this, we'll use a function called the sphere_volume()\n    '''\n    # find the volume of a sphere given a height h\n    print(sphere_volume(4,6))\n    \n    '''\n    A simpler way of displaying the volume of a cone can be used in the following example.\n    '''\n    # find the volume of a sphere given a height h\n    print(sphere_volume(4,6))\n    \n    '''\n    We'll print the volume of the sphere and the volume of a cone in another function\n    '''\n    # sphere_volume()\n    # cone_volume()\n    \n    '''\n    Use the getattr() method to retrieve the value of a given attribute.\n    We'll display the volume of a cone given a height h and a radius r.\n    '''\n    # print(volume_cone(4,6))\n    \n    '''\n    Use the getattr() method to retrieve the value of a given attribute.\n    We'll display the volume of a sphere given a height h and a radius r.\n    '''\n    # print(sphere_volume(4,6))\n    \n    '''\n    Use the getattr() method to retrieve the value of a given attribute.\n    We'll display the volume of a cone given a height h and a radius r.\n    '''\n    # print(cone_volume(4,6))\n    \n    '''\n    Use the getattr() method to retrieve the value of a given attribute.\n    We'll display the volume of a sphere given a height h and a radius r.\n    '''\n    # print(sphere_volume(4,6))\n    \n    '''\n    Use the getattr() method to retrieve the value of a given attribute.\n    We'll display the volume of a cone given a height h and a radius r.\n    '''\n    # print(cone_volume(4,6))\n    \n    '''\n    In this example, we'll use the sphere_volume() method to get the volume of a sphere given a height h and a radius r.\n    '''\n    # print(sphere_volume(4,6))\n    \n    '''\n    In this example, we'll use the cone_volume() method to get the volume of a cone given a height h and a radius r.\n    '''\n    # print(cone_volume(4,6))\n    \n    '''\n    In this example, we'll use the getattr() method to retrieve the volume of a sphere given a height h and a radius r.\n    '''\n    # print(sphere_volume(4,6))\n    \n    '''\n    In this example, we'll use the getattr() method to retrieve the volume of a cone given a height h and a radius r.\n    '''\n    # print(cone_volume(4,6))\n    \n    '''\n    In this example, we'll use the getattr() method to retrieve the volume of a sphere given a height h and a radius r.\n    '''\n    # print(sphere_volume(4,6))\n    \n    '''\n    In this example, we'll use the getattr() method to retrieve the volume of a cone given a height h and a radius r.\n    '''\n    # print(cone_volume(4,6))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*h)**3\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return None\n    if n == 1:\n        return 1\n    \n    total_power = 1\n    while n > 1:\n        total_power = total_power * 2\n        n = n - 1\n    return total_power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    for i in range(2, n+1):\n        if n%i==0:\n            if n//i==i:\n                if n//i==i:\n                    highest = i\n                else:\n                    highest = i\n            else:\n                highest = i\n    return highest\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    f = 1\n    while f<n:\n        f=f<<1\n    return f\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        if n%2==0:\n            return highest_Power_of_2(n-1)\n        else:\n            return n*2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if (n % i == 0):\n            count += 1\n        if count >= 2:\n            break\n    if count == 2:\n        print(n,\"is a power of 2\")\n    else:\n        print(n,\"is not a power of 2\")\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # define a variable and return the largest number smaller or equal to n\n    if n <= 0: \n        return None \n    elif n < 10: \n        return n \n    else: \n        return n % 10 "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    k = 1\n    # if n is even, it'll be 1 or 2\n    if n % 2 == 0:\n        return 2**(k-1)\n    # else it'll be 3 or 5\n    else:\n        return (3*k) + (2*k)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = n\n    if n == 0:\n        return 0\n    else:\n        while num:\n            num = num // 2\n            num = num * 2\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    \n    for i in range(n, 0, -1):\n        lucas = lucas*i\n        \n    return lucas\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = (3 * n + 1) / 2\n    while (x <= n):\n        if (x % 3 == 0):\n            if (x % 2 == 0):\n                return x\n        x += 1\n    return -1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1, n):\n        if (i == 1):\n            return i\n        if (i == 2):\n            return i\n        if (i == 3):\n            return i\n        if (i == 4):\n            return i\n        if (i == 5):\n            return i\n        if (i == 6):\n            return i\n        if (i == 7):\n            return i\n        if (i == 8):\n            return i\n        if (i == 9):\n            return i\n        if (i == 10):\n            return i\n        if (i == 11):\n            return i\n        if (i == 12):\n            return i\n        if (i == 13):\n            return i\n        if (i == 14):\n            return i\n        if (i == 15):\n            return i\n        if (i == 16):\n            return i\n        if (i == 17):\n            return i\n        if (i == 18):\n            return i\n        if (i == 19):\n            return i\n        if (i == 20):\n            return i\n        if (i == 21):\n            return i\n        if (i == 22):\n            return i\n        if (i == 23):\n            return i\n        if (i == 24):\n            return i\n        if (i == 25):\n            return i\n        if (i == 26):\n            return i\n        if (i == 27):\n            return i\n        if (i == 28):\n            return i\n        if (i == 29):\n            return i\n        if (i == 30):\n            return i\n        if (i == 31):\n            return i\n        if (i == 32):\n            return i\n        if (i == 33):\n            return i\n        if (i == 34):\n            return i\n        if (i == 35):\n            return i\n        if (i == 36):\n            return i\n        if (i == 37):\n            return i\n        if (i == 38):\n            return i\n        if (i == 39):\n            return i\n        if (i == 40):\n            return i\n        if (i == 41):\n            return i\n        if (i == 42):\n            return i\n        if (i == 43):\n            return i\n        if (i == 44):\n            return i\n        if (i == 45):\n            return i\n        if (i == 46):\n            return i\n        if (i == 47):\n            return i\n        if (i == 48):\n            return i\n        if (i == 49):\n            return i\n        if (i == 50):\n            return i\n        if (i == 51):\n            return i\n        if (i == 52):\n            return i\n        if (i == 53):\n            return i\n        if (i == 54):\n            return i\n        if (i == 55):\n            return i\n        if (i == 56):\n            return i\n        if (i == 57):\n            return i\n        if (i == 58):\n            return i\n        if (i == 59):\n            return i\n        if (i == 60):\n            return i\n        if (i == 61):\n            return i\n        if (i == 62):\n            return i\n        if (i == 63):\n            return i\n        if (i == 64):\n            return i\n        if (i == 65):\n            return i\n        if (i == 66):\n            return i\n        if (i == 67):\n            return i\n        if (i == 68):\n            return i\n        if (i == 69):\n            return i\n        if (i == 70):\n            return i\n        if (i == 71):\n            return i\n        if (i == 72):\n            return i\n        if (i == 73):\n            return i\n        if (i == 74):\n            return i\n        if (i == 75):\n            return i\n        if (i == 76):\n            return i\n        if (i == 77):\n            return i\n        if (i == 78):\n            return i\n        if (i == 79):\n            return i\n        if (i == 80):\n            return i\n        if (i == 81):\n            return i\n        if (i == 82):\n            return i\n        if (i == 83):\n            return i\n        if (i == 84):\n            return i\n        if (i == 85):\n            return i\n        if (i == 86):\n            return i\n        if (i == 87):\n            return i\n        if (i == 88):\n            return i\n        if (i == 89):\n            return i\n        if (i == 90):\n            return i\n        if (i == 91):\n            return i\n        if (i == 92):\n            return i\n        if (i == 93):\n            return i\n        if (i == 94):\n            return i\n        if (i == 95):\n            return i\n        if (i == 96):\n            return i\n        if (i == 97):\n            return i\n        if (i == 98):\n            return i\n        if (i == 99):\n            return i\n        if (i == 100):\n            return i\n        if (i == 101):\n            return i\n        if (i == 102):\n            return i\n        if (i == 103):\n            return i\n        if (i == 104):\n            return i\n        if (i == 105):\n            return i\n        if (i == 106):\n            return i\n        if (i == 107):\n            return i\n        if (i == 108):\n            return i\n        if (i == 109):\n            return i\n        if (i == 110):\n            return i\n        if (i == 111):\n            return i\n        if (i == 112):\n            return i\n        if (i == 113):\n            return i\n        if (i == 114):\n            return i\n        if (i == 115):\n            return i\n        if (i == 116):\n            return i\n        if (i == 117):\n            return i\n        if (i == 118):\n            return i\n        if (i == 119):\n            return i\n        if (i == 120):\n            return i\n        if (i == 121):\n            return i\n        if (i == 122):\n            return i\n        if (i == 123):\n            return i\n        if (i == 124):\n            return i\n        if (i == 125):\n            return i\n        if (i == 126):\n            return i\n        if (i == 127):\n            return i\n        if (i == 128):\n            return i\n        if (i == 129):\n            return i\n        if (i == 130):\n            return i\n        if (i == 131):\n            return i\n        if (i == 132):\n            return i\n        if (i == 133):\n            return i\n        if (i == 134):\n            return i\n        if (i == 135):\n            return i\n        if (i == 136):\n            return i\n        if (i == 137):\n            return i\n        if (i == 138):\n            return i\n        if (i == 139):\n            return i\n        if (i == 140):\n            return i\n        if (i == 141):\n            return i\n        if (i == 142):\n            return i\n        if (i == 143):\n            return i\n        if (i == 144):\n            return i\n        if (i == 145):\n            return i\n        if (i == 146):\n            return i\n        if (i == 147):\n            return i\n        if (i == 148):\n            return i\n        if (i == 149):\n            return i\n        if (i == 150):\n            return i\n        if (i == 151):\n            return i\n        if (i == 152):\n            return i\n        if (i == 153):\n            return i\n        if (i == 154):\n            return i\n        if (i == 155):\n            return i\n        if (i == 156):\n            return i\n        if (i == 157):\n            return i\n        if (i == 158):\n            return i\n        if (i == 159):\n            return i\n        if (i == 160):\n            return i\n        if (i == 161):\n            return i\n        if (i == 162):\n            return i\n        if (i == 163):\n            return i\n        if (i == 164):\n            return i\n        if (i == 165):\n            return i\n        if (i == 166):\n            return i\n        if (i == 167):\n            return "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    for i in range(1, n + 1):\n        lucas += i\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n > 0, \"n must be positive\"\n    \n    for i in range(1, n+1):\n        if i == 1:\n            luc = 1\n        elif i == 2:\n            luc = 1\n        elif i == 3:\n            luc = 1\n        elif i == 4:\n            luc = 2\n        elif i == 5:\n            luc = 2\n        elif i == 6:\n            luc = 4\n        elif i == 7:\n            luc = 4\n        else:\n            luc = find_lucas(i - 3) + find_lucas(i - 2) + find_lucas(i - 1)\n            \n        return luc\n    \n    raise AssertionError(\"invalid input\")\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return n\n    elif n == 1:\n        return n\n    elif n == 2:\n        return n\n    elif n == 3:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2) + find_lucas(n-3)\n        \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 1\n    b = 0\n    x = -1\n    y = 1\n    while x < n:\n        a = a * x\n        b = b * x\n        x = x + 1\n    return a + b\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    else: \n        a = find_lucas(n - 1) \n        b = find_lucas(n - 2) \n        c = find_lucas(n - 3) \n        return a * b * c\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2: \n        return n \n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    lucas_num = (2*n*n-1)/2\n    \n    return lucas_num\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if list_ == []:\n        return list_\n    elif list_[0]!= \" \":\n        list_[0] += \" \"\n    list_[0] += string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # loop through list to check each element\n    for element in list_:\n        # check if the string is present in the element\n        if string in element:\n            # add to the list\n            list_.append(element)\n    # return the list\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = str(list_[i])\n        list_[i] = list_[i].replace(\"'\", \"\")\n        list_[i] = list_[i].replace(\" \", \"_\")\n        list_[i] = list_[i].replace('.', '_')\n        list_[i] = list_[i].replace(\",\", \"_\")\n        list_[i] = list_[i].replace('(', '_')\n        list_[i] = list_[i].replace(')', '_')\n        list_[i] = list_[i].replace(\">\", \"_\")\n        list_[i] = list_[i].replace(\"<\", \"_\")\n        list_[i] = list_[i].replace(\"\\\\\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace('\"', \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list_[i] = list_[i].replace(\"'\", \"_\")\n        list"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(string, '')\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        list_[i] = f'{string} {list_[i]}\\n'\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_)!= list:\n        raise TypeError(\"list must be a list\")\n    if type(string)!= str:\n        raise TypeError(\"string must be a string\")\n    result = []\n    if string[0] == '{':\n        return_string = \"\"\n        format = string[1]\n        for char in list_:\n            if format == '{':\n                format = char\n            elif format == '}':\n                format = char\n            elif char == '{':\n                format = char\n            elif char == '}':\n                format = char\n            result.append(format)\n            return_string += format\n        return_string += return_string\n        return return_string\n    else:\n        return_string = string\n        for char in list_:\n            return_string += char\n        return return_string\n        \n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # get the length of the list\n    length = len(list_)\n    \n    # iterate through the list and apply a given format string to each element.\n    for i in range(length):\n        list_[i] = list_[i].format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = str(i)\n        i = i.replace(\"[\",\"\")\n        i = i.replace(\"]\",\"\")\n        i = i.replace(\"{\",\"\")\n        i = i.replace(\"}\",\"\")\n        i = i.replace(\"|\",\"\")\n        i = i.replace(\"$\",\"\")\n        i = i.replace(\"^\",\"\")\n        i = i.replace(\"&\",\"\")\n        i = i.replace(\"{\",\"\")\n        i = i.replace(\"}\",\"\")\n        i = i.replace(\"&\",\"\")\n        i = i.replace(\"|\",\"\")\n        i = i.replace(\" \",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace('\"','')\n        i = i.replace(\",\",\"\")\n        i = i.replace(\".\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        i = i.replace(\"-\",\"\")\n        i = i.replace(\"'\",\"\")\n        "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    try:\n        for element in list_:\n            list_[list_.index(element)] = str(string.format(element))\n    except:\n        for element in list_:\n            list_[list_.index(element)] = str(string.format(element))\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(zip(l1, l2, l3))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        for j in l2:\n            d[i] = j\n            if i in d.keys():\n                if j not in d[i].keys():\n                    d[i][j] = {}\n                if j in d[i].keys():\n                    d[i][j].update({l3:l1[i]})\n                else:\n                    d[i][j] = {l3:l1[i]}\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    for i in range(len(l2)):\n        d[l2[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1.update(i)\n    for i in l2:\n        d1.update(i)\n    for i in l3:\n        d1.update(i)\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = dict()\n    for i in range(0, len(l1)):\n        dictionary[i] = l1[i]\n    for i in range(0, len(l2)):\n        dictionary[i] = l2[i]\n    for i in range(0, len(l3)):\n        dictionary[i] = l3[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # check list\n    if isinstance(l1, list):\n        if isinstance(l2, list):\n            if isinstance(l3, list):\n                return {'nested_list': {'l1':l1, 'l2':l2, 'l3':l3}}\n            else:\n                return {'nested_list': {'l1':l1, 'l2':l2}}\n        else:\n            return {'nested_list': {'l1':l1}}\n    else:\n        return l2\n    \ndef sort_and_format(data):\n    '''\n    Write a function to sort the data by class (alphabetical order) and also by frequency.\n    '''\n    # sort list by alphabetical order\n    sorted_list = sorted(data, key=lambda x: x[0])\n    \n    # get number of classes\n    num_classes = len(sorted_list)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = dict()\n    for item in l1:\n        dict1[item] = dict()\n        for k,v in l2.items():\n            dict1[item][k] = v\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = dict()\n    for i in l1:\n        res[i] = dict()\n        for j in l2:\n            res[i][j] = l3[j][i]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # list_dictionary = {}\n    # for i in range(len(l1)):\n    #     list_dictionary[i] = {}\n    #     for j in range(len(l2[i])):\n    #         list_dictionary[i][j] = l2[i][j]\n    \n    # return list_dictionary\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 1\n    if (n == 3):\n        return 1\n    if (n == 4):\n        return 2\n    if (n == 5):\n        return 4\n    if (n == 6):\n        return 7\n    if (n == 7):\n        return 9\n    if (n == 8):\n        return 11\n    if (n == 9):\n        return 14\n    if (n == 10):\n        return 17\n    if (n == 11):\n        return 19\n    if (n == 12):\n        return 22\n    if (n == 13):\n        return 25\n    if (n == 14):\n        return 26\n    if (n == 15):\n        return 27\n    if (n == 16):\n        return 28\n    if (n == 17):\n        return 29\n    if (n == 18):\n        return 30\n    if (n == 19):\n        return 31\n    if (n == 20):\n        return 32\n    if (n == 21):\n        return 33\n    if (n == 22):\n        return 34\n    if (n == 23):\n        return 35\n    if (n == 24):\n        return 36\n    if (n == 25):\n        return 37\n    if (n == 26):\n        return 38\n    if (n == 27):\n        return 39\n    if (n == 28):\n        return 40\n    if (n == 29):\n        return 41\n    if (n == 30):\n        return 42\n    if (n == 31):\n        return 43\n    if (n == 32):\n        return 44\n    if (n == 33):\n        return 45\n    if (n == 34):\n        return 46\n    if (n == 35):\n        return 47\n    if (n == 36):\n        return 48\n    if (n == 37):\n        return 49\n    if (n == 38):\n        return 50\n    if (n == 39):\n        return 51\n    if (n == 40):\n        return 52\n    if (n == 41):\n        return 53\n    if (n == 42):\n        return 54\n    if (n == 43):\n        return 55\n    if (n == 44):\n        return 56\n    if (n == 45):\n        return 57\n    if (n == 46):\n        return 58\n    if (n == 47):\n        return 59\n    if (n == 48):\n        return 60\n    if (n == 49):\n        return 61\n    if (n == 50):\n        return 62\n    if (n == 51):\n        return 63\n    if (n == 52):\n        return 64\n    if (n == 53):\n        return 65\n    if (n == 54):\n        return 66\n    if (n == 55):\n        return 67\n    if (n == 56):\n        return 68\n    if (n == 57):\n        return 69\n    if (n == 58):\n        return 70\n    if (n == 59):\n        return 71\n    if (n == 60):\n        return 72\n    if (n == 61):\n        return 73\n    if (n == 62):\n        return 74\n    if (n == 63):\n        return 75\n    if (n == 64):\n        return 76\n    if (n == 65):\n        return 77\n    if (n == 66):\n        return 78\n    if (n == 67):\n        return 79\n    if (n == 68):\n        return 80\n    if (n == 69):\n        return 81\n    if (n == 70):\n        return 82\n    if (n == 71):\n        return 83\n    if (n == 72):\n        return 84\n    if (n == 73):\n        return 85\n    if (n == 74):\n        return 86\n    if (n == 75):\n        return 87\n    if (n == 76):\n        return 88\n    if (n == 77):\n        return 89\n    if (n == 78):\n        return 90\n    if (n == 79):\n        return 91\n    if (n == 80):\n        return 92\n    if (n == 81):\n        return 93\n    if (n == 82):\n        return 94\n    if (n == 83):\n        return 95\n    if (n == 84):\n        return 96\n    if (n == 85):\n        return 97\n    if (n == 86):\n        return 98\n    if (n == 87):\n        return 99\n    if (n == 88):\n        return 100\n    if (n == 89):\n        return 101\n    if (n == 90):\n        return 102\n    if (n == 91):\n        return 103\n    if (n == 92):\n        return 104\n    if (n == 93):\n        return 105\n    if (n == 94):\n        return 106\n    if (n == 95):\n        return 107\n    if (n == 96):\n        return 108\n    if (n == 97):\n        return 109\n    if (n == 98):\n        return 110\n    if (n == 99):\n        return 111\n    if (n == 100):\n        return 112\n    if (n == 101):\n        return 113\n    if (n == 102):\n        return 114\n    if (n == 103):\n        return 115\n    if (n == 104):\n        return 116\n    if (n == 105):\n        return 117\n    if (n == 106):\n        return 118\n    if (n == 107):\n        return 119\n    if (n == 108):\n        return 120\n    if (n == 109):\n        return 121\n    if (n == 110):\n        return 122\n    if (n == 111):\n        return 123\n    if (n == 112):\n        return 124\n    if (n == 113):\n        return 125\n    if (n == 114):\n        return 126\n    if (n == 115):\n        return 127\n    if (n == 116):\n        return 128\n    if (n == 117):\n        return 129\n    if (n == 118):\n        return 130\n    if (n == 119):\n        return 131\n    if (n == 120):\n        return 132\n    if (n == 121):\n        return 133\n    if (n == 122):\n        return 134\n    if (n == 123):\n        return 135\n    if (n == 124):\n        return 136\n    if (n == 125):\n        return 137\n    if (n == 126):\n        return 138\n    if (n == 127):\n        return 139\n    if (n == 128):\n        return 140\n    if (n == 129):\n        return 141\n    if (n == 130):\n        return 142\n    if (n == 131):\n        return 143\n    if (n == 132):\n        return 144\n    if (n == 133):\n        return 145\n    if (n == 134):\n        return 146\n    if (n == 135):\n        return 147\n    if (n == 136):\n        return 148\n    if (n == 137):\n        return 149\n    if (n == 138):\n        return 150\n    if (n == 139):\n        return 151\n    if (n == 140):\n        return 152\n    if (n == 141):\n        return 153\n    if (n == 142):\n        return 154\n    if (n == 143):\n        return 155\n    if (n == 144):\n        return 156\n    if (n == 145):\n        return 157\n    if (n == 146):\n        return 158\n    if (n == 147):\n        return 159\n    if (n == 148):\n        return 160\n    if (n == 149):\n        return 161\n    if (n == 150):\n        return 162\n    if (n == 151):\n        return 163\n    if (n == 152):\n        return 164\n    if (n == 153):\n        return 165\n    if (n == 154):\n        return 166\n    if (n == 155):\n        return 167\n    if (n == 156):\n        return 168\n    if (n == 157):\n        return 169\n    if (n == 158):\n        return 170\n    if (n == 159):\n        return 171\n    if (n == 160):\n        return 172\n    if (n == 161):\n        return 173\n    if (n == 162):\n        return 174\n    if (n == 163):\n        return 175\n    if (n == 164):\n    "
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    for n in range(1, n+1):\n        result = max(result, n+f(n))\n    return result\ndef max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return n\n    return max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5)\ndef fibonacci_sum (n):\n    '''\n    Write a function to calculate the sum of a random positive integer n using the Fibonacci sequence.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci_sum(n-1) + fibonacci_sum(n-2)"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        raise ValueError('The argument should be positive')\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/2)\n    elif n % 3 == 0:\n        return get_max_sum(n/3) + get_max_sum(n/3) + get_max_sum(n/3)\n    elif n % 4 == 0:\n        return get_max_sum(n/4) + get_max_sum(n/4) + get_max_sum(n/4)\n    elif n % 5 == 0:\n        return get_max_sum(n/5) + get_max_sum(n/5) + get_max_sum(n/5) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n-1)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    f = 0\n    for i in range (1,n + 1):\n        f = f + i\n        if (f == n):\n            break\n    return f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    s=0\n    for n in range(1,int(n**0.5)+1):\n        if n % 2 == 0:\n            s += n*(n+1)\n        if n % 3 == 0:\n            s += n*(n+1)\n        if n % 4 == 0:\n            s += n*(n+1)\n        if n % 5 == 0:\n            s += n*(n+1)\n    return s\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    m = int(n/2)\n    sum = 0\n    for n in range(2, m + 1):\n        sum += n\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Addition: f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    # Division: f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    # Multiplication: f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    # Sum: f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \n    # For all n use the constant f(n) for any n, and compare it with the sum of all the other numbers.\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 20\n    elif n == 7:\n        return 30\n    elif n == 8:\n        return 50\n    elif n == 9:\n        return 75\n    elif n == 10:\n        return 100\n    elif n == 11:\n        return 120\n    elif n == 12:\n        return 150\n    else:\n        return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5) + get_max_sum (n/6) + get_max_sum (n/7) + get_max_sum (n/8) + get_max_sum (n/9) + get_max_sum (n/10) + get_max_sum (n/11) + get_max_sum (n/12)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return None\n    else:\n        longest = 0\n        for i in input_list:\n            if len(str(i)) > longest:\n                longest = len(str(i))\n        return longest\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for x in input_list:\n        length = max(length, len(x))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for element in input_list:\n        if len(element) > max_len:\n            max_len = len(element)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    length_list = []\n    \n    for i in range(len(input_list)):\n        length_list.append(len(input_list[i]))\n    \n    return length_list\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #print('test_tup:', test_tup)\n    for item in test_tup:\n        if item in test_tup:\n            #print('duplicate item in tuple', item)\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    # create list of tuples\n    test_list = [(x, y) for x, y in test_tup]\n    \n    # list of tuples (num, num)\n    test_num_list = [x for x, y in test_list]\n    \n    # test_list_with_duplicates = []\n    \n    # for item in test_num_list:\n    #     if item not in test_list_with_duplicates:\n    #         test_list_with_duplicates.append(item)\n    \n    # return test_list_with_duplicates\n    \n    # Test case 1\n    \n    # test_case_1 = test_num_list[0:2]\n    # print(test_case_1)\n    \n    # test_case_2 = test_num_list[0:3]\n    # print(test_case_2)\n    \n    # test_case_3 = test_num_list[3:6]\n    # print(test_case_3)\n    \n    # test_case_4 = test_num_list[6:8]\n    # print(test_case_4)\n    \n    # test_case_5 = test_num_list[8:10]\n    # print(test_case_5)\n    \n    # test_case_6 = test_num_list[10:]\n    # print(test_case_6)\n    \n    # test_case_7 = test_num_list[0:2] + test_num_list[3:6]\n    # print(test_case_7)\n    \n    # Test case 2\n    \n    # test_case_8 = test_num_list[0:4]\n    # print(test_case_8)\n    \n    # test_case_9 = test_num_list[4:8]\n    # print(test_case_9)\n    \n    # test_case_10 = test_num_list[8:12]\n    # print(test_case_10)\n    \n    # test_case_11 = test_num_list[12:]\n    # print(test_case_11)\n    \n    # Test case 3\n    \n    # test_case_12 = test_num_list[3]\n    # print(test_case_12)\n    \n    # test_case_13 = test_num_list[2]\n    # print(test_case_13)\n    \n    # Test case 4\n    \n    # test_case_14 = test_num_list[-1]\n    # print(test_case_14)\n    \n    # test_case_15 = test_num_list[-2]\n    # print(test_case_15)\n    \n    # test_case_16 = test_num_list[-3]\n    # print(test_case_16)\n    \n    # Test case 5\n    \n    # test_case_17 = test_num_list[-4]\n    # print(test_case_17)\n    \n    # test_case_18 = test_num_list[-5]\n    # print(test_case_18)\n    \n    # test_case_19 = test_num_list[-6]\n    # print(test_case_19)\n    \n    # Test case 6\n    \n    # test_case_20 = test_num_list[-7]\n    # print(test_case_20)\n    \n    # test_case_21 = test_num_list[-8]\n    # print(test_case_21)\n    \n    # Test case 7\n    \n    # test_case_22 = test_num_list[-9]\n    # print(test_case_22)\n    \n    # test_case_23 = test_num_list[-10]\n    # print(test_case_23)\n    \n    # Test case 8\n    \n    # test_case_24 = test_num_list[-11]\n    # print(test_case_24)\n    \n    # test_case_25 = test_num_list[-12]\n    # print(test_case_25)\n    \n    # Test case 9\n    \n    # test_case_26 = test_num_list[-13]\n    # print(test_case_26)\n    \n    # test_case_27 = test_num_list[-14]\n    # print(test_case_27)\n    \n    # Test case 10\n    \n    # test_case_28 = test_num_list[-15]\n    # print(test_case_28)\n    \n    # test_case_29 = test_num_list[-16]\n    # print(test_case_29)\n    \n    # Test case 11\n    \n    # test_case_30 = test_num_list[-17]\n    # print(test_case_30)\n    \n    # test_case_31 = test_num_list[-18]\n    # print(test_case_31)\n    \n    # Test case 12\n    \n    # test_case_32 = test_num_list[-19]\n    # print(test_case_32)\n    \n    # test_case_33 = test_num_list[-20]\n    # print(test_case_33)\n    \n    # test_case_34 = test_num_list[-21]\n    # print(test_case_34)\n    \n    # Test case 13\n    \n    # test_case_35 = test_num_list[-22]\n    # print(test_case_35)\n    \n    # test_case_36 = test_num_list[-23]\n    # print(test_case_36)\n    \n    # test_case_37 = test_num_list[-24]\n    # print(test_case_37)\n    \n    # Test case 14\n    \n    # test_case_38 = test_num_list[-25]\n    # print(test_case_38)\n    \n    # test_case_39 = test_num_list[-26]\n    # print(test_case_39)\n    \n    # Test case 15\n    \n    # test_case_40 = test_num_list[-27]\n    # print(test_case_40)\n    \n    # test_case_41 = test_num_list[-28]\n    # print(test_case_41)\n    \n    # Test case 16\n    \n    # test_case_42 = test_num_list[-29]\n    # print(test_case_42)\n    \n    # test_case_43 = test_num_list[-30]\n    # print(test_case_43)\n    \n    # Test case 17\n    \n    # test_case_44 = test_num_list[-31]\n    # print(test_case_44)\n    \n    # test_case_45 = test_num_list[-32]\n    # print(test_case_45)\n    \n    # Test case 18\n    \n    # test_case_46 = test_num_list[-33]\n    # print(test_case_46)\n    \n    # test_case_47 = test_num_list[-34]\n    # print(test_case_47)\n    \n    # Test case 19\n    \n    # test_case_48 = test_num_list[-35]\n    # print(test_case_48)\n    \n    # test_case_49 = test_num_list[-36]\n    # print(test_case_49)\n    \n    # Test case 20\n    \n    # test_case_50 = test_num_list[-37]\n    # print(test_case_50)\n    \n    # test_case_51 = test_num_list[-38]\n    # print(test_case_51)\n    \n    # Test case 21\n    \n    # test_case_52 = test_num_list[-39]\n    # print(test_case_52)\n    \n    # test_case_53 = test_num_list[-40]\n    # print(test_case_53)\n    \n    # Test case 22\n    \n    # test_case_54 = test_num_list[-41]\n    # print(test_case_54)"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check_list = []\n    for item in test_tup:\n        if item in check_list:\n            return False\n        else:\n            check_list.append(item)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for elem in test_tup:\n        if elem in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t_set = set(test_tup)\n    for i in t_set:\n        if test_tup.count(i) == 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return tuple.count(tuple) == len(tuple)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0] == test_tup[1]:\n        return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_str = {}\n    for letter in str1:\n        if letter not in dict_str:\n            dict_str[letter] = 0\n        dict_str[letter] += 1\n    \n    return max(dict_str, key=dict_str.get"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return ''.join([char for char, count in collections.Counter(str1).items() if count == 1][0])\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    character_list = []\n    for x in str1:\n        if x not in character_list:\n            character_list.append(x)\n        else:\n            continue\n    return character_list[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    first_occurrence = {}\n    for letter in str1:\n        if letter not in first_occurrence:\n            first_occurrence[letter] = 0\n        first_occurrence[letter] += 1\n    first_occurrence_char = ''\n    for letter in first_occurrence:\n        if first_occurrence[letter] > 1:\n            first_occurrence_char += letter\n    return first_occurrence_char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    if len(str1) == 0:\n        return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Your code goes here\n    non_repeating_char=''\n    for i in str1:\n        if i not in non_repeating_char:\n            non_repeating_char+=i\n        else:\n            continue\n    return non_repeating_char\n    "
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_len = len(str1)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    else:\n        return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = 0\n    for letter in str1:\n        if letter == str1[count]:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = dict()\n    for c in str1:\n        if c not in count:\n            count[c] = 0\n        count[c] += 1\n    for i in count:\n        if count[i] > 1:\n            return i\n    return 'Not Found'\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    m = re.search(regex, string)\n    return bool(m)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return(re.search(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #pattern = re.compile(regex, re.IGNORECASE)\n    #print(pattern.match(string))\n    #print(re.match(pattern, string))\n    #pattern = re.compile(regex)\n    pattern = re.compile(r\"([a-z])([a-z])\")\n    print(pattern.match(string))\n    print(re.match(pattern, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0:1] == string[-1:]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0]==string[-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string): \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b or b<c or a<c:\n        print('Error')\n    else:\n        if a==b:\n            print(a)\n        elif a==c:\n            print(a)\n        elif b==c:\n            print(b)\n        else:\n            print(a+b+c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    return c\n    \n    \n    \n    "
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,b,c))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function that calculates the median of three numbers.\n    '''\n    import statistics as st\n    a.sort()\n    b.sort()\n    c.sort()\n    print(\"Median is \",st.median(a,"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def median_numbers_iter(a,b,c):\n        x,y,z = a,b,c\n        if x<y:\n            y = z\n            z = x\n            x = y\n        if x>y:\n            y = z\n            z = x\n            x = y\n        print(x,y,z)\n        return (x,y,z)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=a\n    y=b\n    z=c\n    if(x<y):\n        x,y=y,x\n    if(x>z):\n        x,z=z,x\n    if(x<0):\n        x=0\n    if(y<0):\n        y=0\n    if(z<0):\n        z=0\n    return ((x+y+z)/3)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #Hint: you can use max to find the max element.\n    #Then, iterate through the array, using for loop.\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a==c:\n        return a\n    \n    if b==c:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==0:\n        return b\n    if b==0:\n        return c\n    if c==0:\n        return a\n    if a>b and a>c:\n        a,b,c=a,b,c\n    if b>a and b>c:\n        b,a,c=b,a,c\n    if c>a and c>b:\n        c,a,b=c,a,b\n    return [a,b,c]\n    \ndef median(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==0:\n        return b\n    if b==0:\n        return c\n    if c==0:\n        return a\n    if a>b and a>c:\n        a,b,c=a,b,c\n    if b>a and b>c:\n        b,a,c=b,a,c\n    if c>a and c>b:\n        c,a,b=c,a,b\n    return [a,b,c]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = a\n    y = b\n    z = c\n    if (y > z):\n        x,y = y,x\n    if (z > x):\n        x,z = z,x\n    if (x == z):\n        return (a+b+c)//3\n    return min(x,y,z)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 1:\n        return a[0]\n    if len(b) == 1:\n        return b[0]\n    if len(c) == 1:\n        return c[0]\n    s = sorted(a)\n    m = len(s) // 2\n    return ((s[m-1] + s[m]) / 2)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(str(num)))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(list(map(int, nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    count = 0\n    for i in nums:\n        count += len(str(i))\n    return count\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_list = []\n    for num in nums:\n        digit_list.append(int(str(num)[-1]))\n    \n    return sum(digit_list"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        num = nums[i]\n        sum = 0\n        while num >= 10:\n            sum += num % 10\n            num = num // 10\n        nums[i] = sum\n        i += 1\n    return nums\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # write your code here\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for num in nums:\n        digits.append(sum(map(int, str(num))))\n    return sum(digits)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup1 = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return xor_tup1\n    \ndef word_to_binary(word):\n    '''\n    Convert a string to a list of words.\n    '''\n    binary = [int(x) for x in list(word)]\n    return binary\n    \ndef convert_to_binary(binary_string):\n    '''\n    Convert a list of binary words into a string of bits.\n    '''\n    binary = []\n    for i in binary_string:\n        binary.append(format(int(i), \"b\").zfill(8))\n    return ''.join(binary)\n    \ndef convert_to_words(binary_string):\n    '''\n    Convert a list of bits into a list of words.\n    '''\n    #TODO: define a separate function for splitting words\n    words = binary_string.split('0')\n    return words\n    \ndef show_word_list(list_of_words):\n    '''\n    Display all words in a list of strings.\n    '''\n    for word in list_of_words:\n        print(word)\n    return\n    \ndef main():\n    '''\n    TODO: define a separate function for converting numbers to words\n    '''\n    #print(\"****** TEST ******\")\n    print(word_to_binary(\"instructions\"))\n    print(convert_to_binary(word_to_binary(\"instructions\")))\n    print(word_to_binary(\"add 3 5\"))\n    print(convert_to_binary(word_to_binary(\"add 3 5\")))\n    print(word_to_binary(\"5 4 3 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result ^ test_tup1[i]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if both tuples are of the same type (e.g. [1, 2, 3, 4])\n    if not isinstance(test_tup1, (tuple, list)):\n        raise TypeError(\"{} is not a tuple\".format(test_tup1))\n    if not isinstance(test_tup2, (tuple, list)):\n        raise TypeError(\"{} is not a tuple\".format(test_tup2))\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"{} and {} have different length\".format(test_tup1, test_tup2))\n    # For each element in the first tuple, check if it belongs to the first tuple and then check if it belongs to the second tuple\n    for i in range(len(test_tup1)):\n        if not test_tup1[i] in test_tup2:\n            raise ValueError(\"{} is not in the second tuple\".format(test_tup1[i]))\n    # Loop through the second tuple and perform the bitwise xor\n    for j in range(len(test_tup2)):\n        if test_tup1[j] in test_tup2:\n            test_tup2.remove(test_tup1[j])\n            test_tup2.remove(test_tup2[j])\n            test_tup2.remove(test_tup2[j])\n            test_tup2.append(test_tup2[j])\n        else:\n            test_tup2.append(test_tup2[j])\n    return test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Write your code here\n    # The code below is to make the logic of the bitwise xor operation easier\n    \n    # the logic is that first, you need to convert the first tuple to a list.\n    # The list is then constructed using the two tuples\n    \n    # then, you need to construct the second list and then use the bitwise xor of the two list\n    \n    # the code below is to verify the results\n    assert(type(test_tup1) == list)\n    assert(type(test_tup2) == list)\n    assert(len(test_tup1) == len(test_tup2))\n    \n    final_list = []\n    \n    # for each tuple, create the tuple with the numbers of the first tuple that are to be\n    # xored with the second tuple\n    for x in range(0, len(test_tup1)):\n        if(test_tup1[x]!= test_tup2[x]):\n            final_list.append(test_tup1[x])\n            final_list.append(test_tup2[x])\n    \n    # then, use the bitwise xor to get the answer\n    bitwise_xor = bitwise_xor(final_list, list(map(int, final_list)))\n    assert(type(bitwise_xor) == int)\n    return bitwise_xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check the type of input\n    assert isinstance(test_tup1, tuple), \"tup1 should be a tuple\"\n    assert isinstance(test_tup2, tuple), \"tup2 should be a tuple\"\n    assert isinstance(test_tup2[0], int), \"tup2[0] should be an int\"\n    # get the length of the tuples\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n    # construct the result by taking the inversion of the result\n    # this is the inverse of the result of the inversion\n    result = 0\n    for i in range(n1):\n        result = result ^ (test_tup1[i] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    output = 0\n    for i in range(len(test_tup1)):\n        output = output ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        output = output ^ test_tup2[i]\n    return output\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuple lengths must match\"\n    assert len(test_tup1[0]) == len(test_tup2[0]), \"Element length must match\"\n    out_tup = []\n    for i in range(len(test_tup1)):\n        out_tup.append(test_tup1[i] ^ test_tup2[i])\n    return out_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (''.join(str(x) for x in list(test_tup1) ^ list(test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        for element in test_tup1:\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup1 = (test_tup1[0] ^ test_tup1[1], test_tup1[0] ^ test_tup1[1] ^ test_tup1[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup1 = (test_tup1[0] ^ test_tup1[1], test_tup1[0] ^ test_tup1[1] ^ test_tup1[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n        return test_tup1, test_tup2\n    elif type(test_tup1) == tuple and type(test_tup2) == tuple:\n        for element in test_tup1:\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup1 = (test_tup1[0] ^ test_tup1[1], test_tup1[0] ^ test_tup1[1] ^ test_tup1[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup1 = (test_tup1[0] ^ test_tup1[1], test_tup1[0] ^ test_tup1[1] ^ test_tup1[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n        return test_tup1, test_tup2\n    elif type(test_tup1) == tuple and type(test_tup2) == tuple:\n        for element in test_tup1:\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup1 = (test_tup1[0] ^ test_tup1[1], test_tup1[0] ^ test_tup1[1] ^ test_tup1[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n        return test_tup1, test_tup2\n    elif type(test_tup1) == tuple and type(test_tup2) == tuple:\n        for element in test_tup1:\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup1 = (test_tup1[0] ^ test_tup1[1], test_tup1[0] ^ test_tup1[1] ^ test_tup1[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n        return test_tup1, test_tup2\n    elif type(test_tup1) == tuple and type(test_tup2) == tuple:\n        for element in test_tup1:\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup1 = (test_tup1[0] ^ test_tup1[1], test_tup1[0] ^ test_tup1[1] ^ test_tup1[0])\n            if isinstance(element, int) and isinstance(test_tup2[0], int) and isinstance(test_tup2[1], int):\n                test_tup2 = (test_tup2[0] ^ test_tup2[1], test_tup2[0] ^ test_tup2[1] ^ test_tup2[0])\n        return test_tup1, test_tup2\n    elif type(test_tup1) == tuple and type(test_tup2) == tuple:\n        for element in test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = 0\n    for tup in zip(test_tup1, test_tup2):\n        res = res ^ tup[0]\n    return res\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = set(test_list)\n    #print(len(unique_tuple))\n    return len(unique_tuple)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list_len = len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    f = open(\"freq.txt\",\"w\")\n    i = 0\n    for i in test_list:\n        f.write(str(i)+\"\\n\")\n        i = i + 1\n    f.close()\n    return i\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Note: It is important to define the return type of this function as a variable.\n    #    Therefore, it should be a function.\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        count += i[1]\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dic = {}\n    for i in test_list:\n        if i in freq_dic:\n            freq_dic[i] += 1\n        else:\n            freq_dic[i] = 1\n    return len(freq_dic)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # write your code here\n    freq_dict = {}\n    for i in range(len(test_list)):\n        if test_list[i][1] in freq_dict:\n            freq_dict[test_list[i][1]] += 1\n        else:\n            freq_dict[test_list[i][1]] = 1\n    return sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuples(test_tup1, test_tup2):\n        if type(test_tup1)!= tuple:\n            return 'Error: Input is not a tuple'\n        if type(test_tup2)!= tuple:\n            return 'Error: Input is not a tuple'\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    test_tup1[0] = a + b\n    test_tup1[1] = c + d\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create an empty list to append each element to\n    c_tuple_list = []\n    # Loop through each element in the tuples\n    for tup in test_tup1:\n        # Append each element to the empty list and iterate through each element in the tuple\n        c_tuple_list.append(tup[0])\n        for i in range(1, len(tup)):\n            # Add each element from the tuple to the current iteration\n            c_tuple_list.append(tup[i])\n    # Return the resulting list\n    return c_tuple_list\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert type(test_tup1) == tuple, \"Argument test_tup1 should be a tuple.\"\n    assert type(test_tup2) == tuple, \"Argument test_tup2 should be a tuple.\"\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    result = []\n    for i in range(0,test_tup1_len):\n        for j in range(0,test_tup2_len):\n            result.append(test_tup1[i] + test_tup2[j])\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('\\nAddition of two tuples using index wise addition...')\n    index = 0\n    for element in test_tup1:\n        index += 1\n        for element2 in test_tup2:\n            index += 1\n            print(index, element, element2)\n    print('\\n')\n    print('Index of addition of tuples using index wise addition is done.')\n    return index\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_list = test_tup1[1]\n    test_tup2_list = test_tup2[1]\n    test_tup1_list = list(test_tup1_list)\n    test_tup2_list = list(test_tup2_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuple(element):\n        if type(element)==tuple:\n            t1=element[0]\n            t2=element[1]\n            if type(t1)==int and type(t2)==int:\n                return t1+t2\n            else:\n                raise TypeError(\"'{}' is not an int or a tuple\".format(t1))\n        else:\n            return element\n    #tuple1 = test_tup1[0]\n    #tuple2 = test_tup2[0]\n    t1 = add_tuple(test_tup1)\n    t2 = add_tuple(test_tup2)\n    return t1,t2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (b<a):\n        return a\n    else:\n        return b\n        \ndef max_of_two(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a<b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = a\n    if b > a:\n        minimum = b\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef mean(a,b):\n    '''\n    Write a python function to find the mean of two numbers.\n    '''\n    return (a+b)/2\n    \ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    return (a+b)/2\n    \ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    num=a+b\n    count=0\n    for i in range(num):\n        if(a==a):\n            count+=1\n        elif(a==b):\n            count+=1\n        else:\n            pass\n    if(count>0):\n        return a\n    elif(count<0):\n        return b\n    else:\n        return \"NaN\"\n    \ndef variance(a,b):\n    '''\n    Write a python function to find the variance of two numbers.\n    '''\n    return sum(((a-mean(a,b))**2))/len(a)\n    \ndef standard_deviation(a,b):\n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    return (sum(((a-mean(a,b))**2)))/len(a)\n    \ndef standard_error(a,b):\n    '''\n    Write a python function to find the standard error of two numbers.\n    '''\n    return (sum(((a-mean(a,b))**2)))/len(a)**0.5\n    \ndef quantile(a,b):\n    '''\n    Write a python function to find the quantile of two numbers.\n    '''\n    return (a+b)/2\n    \ndef quartile(a,b):\n    '''\n    Write a python function to find the quantile of two numbers.\n    '''\n    return (a+b)/2\n    \ndef quartile_range(a,b):\n    '''\n    Write a python function to find the range of quartiles.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    x.sort()\n    x.append(x[0])\n    x.append(x[-1]-x[0]-1)\n    return x\n    \ndef r_skewness(a,b):\n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef skew(a,b):\n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/((((a-b)**2)**0.5)))\n    return y\n    \ndef kurtosis(a,b):\n    '''\n    Write a python function to find the kurtosis of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef z_score(a,b):\n    '''\n    Write a python function to find the z-score of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append((((a-mean(a,b))**2)/(((a-b)**2)**0.5)))\n    return y\n    \ndef scale(a,b):\n    '''\n    Write a python function to find the scale of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef skewness(a,b):\n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/((((a-b)**2)**0.5)))\n    return y\n    \ndef kurtosis(a,b):\n    '''\n    Write a python function to find the kurtosis of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef box_cox(a,b):\n    '''\n    Write a python function to find the box-cox coefficient of two numbers.\n    '''\n    y=[]\n    y.append(a)\n    y.append(b)\n    x=[]\n    x.append(a)\n    x.append(b)\n    x.append(y)\n    \n    \n    return "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\ndef sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef subtract(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a-b\ndef multiply(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a*b\ndef divide(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a/b\ndef modulus(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a%b\ndef squareroot(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return pow(a,b/2)\ndef exp(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return pow(a,b)\ndef power(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return pow(a,b)\ndef main():\n    print(\"Calculator\")\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    print(\"\\nOperations:\")\n    print(\"1) Addition\")\n    print(\"2) Subtraction\")\n    print(\"3) Multiplication\")\n    print(\"4) Division\")\n    print(\"5) Modulus\")\n    print(\"6) SquareRoot\")\n    print(\"7) Exponent\")\n    print(\"8) Power\")\n    print(\"9) Quit\")\n    num_option = int(input(\"Enter option: \"))\n    operation = \"\"\n    if num_option == 1:\n        operation = add(num1,num2)\n    elif num_option == 2:\n        operation = subtract(num1,num2)\n    elif num_option == 3:\n        operation = multiply(num1,num2)\n    elif num_option == 4:\n        operation = divide(num1,num2)\n    elif num_option == 5:\n        operation = modulus(num1,num2)\n    elif num_option == 6:\n        operation = squareroot(num1,num2)\n    elif num_option == 7:\n        operation = exp(num1,num2)\n    elif num_option == 8:\n        operation = power(num1,num2)\n    else:\n        print(\"Invalid option\")\n    print(\"The result is: \" + str(operation))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        big=a\n        small=b\n    elif b>a:\n        big=b\n        small=a\n    else:\n        return 'Invalid data'\n    if big<small:\n        return small\n    else:\n        return big\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a\n    if b < min:\n        min = b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef mean(a,b):   \n    '''\n    Write a python function to find the mean of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef mean(a,b):   \n    '''\n    Write a python function to find the mean of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef median(a,b):   \n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef median(a,b):   \n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n        if a==0:\n            return b\n        elif a<0:\n            return a+1\n        elif a>0:\n            return a\n        else:\n            return b\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        if a==0:\n            return a\n        elif a<0:\n            return a-1\n        elif a>0:\n            return a\n        else:\n            return a\n    else:\n    "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #code\n    if b == None:\n        return a\n    else:\n        if a > b:\n            return a\n        else:\n            return b\na = int(input('Enter first number : '))\nb = int(input('Enter second number : '))\nprint(minimum(a,b)"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a > b):\n        return a\n    elif (a == b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    '''\n    for loop to check whether the tuple is of length two\n    '''\n    for i in range(0,len(tuplex)): \n        if(tuplex[i] == tuple1): \n            print(\"The element in the tuple is present in the tuple.\") \n            return True\n    print(\"The element in the tuple is not present in the tuple.\") \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)!= len(tuple1): \n        return False \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try: \n        x = tuplex[0]\n        if tuplex[0] == 'error': \n            raise TypeError()\n        else:\n            return True\n    except TypeError: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex) == tuple:\n        tuplex = tuplex[0]\n        if tuple1 in tuplex:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # list1 = list(tuplex)\n    # for i in range(len(list1)):\n    #     print(i, list1[i])\n    # print(tuple1)\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 1:\n        tuple = tuplex[0]\n        if tuple == tuple1:\n            return True\n    else:\n        for i in tuplex:\n            if i == tuple1:\n                return True\n        return False\n    \n    #test1=tuplex\n    #print(check_tuplex(test1,tuple1))\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #the first element is a tuple and it's length should be 2, so it is not a list\n    if type(tuplex)==tuple:\n        for i in tuplex:\n            if type(i)==tuple:\n                return False\n        return True\n    elif type(tuplex)==list:\n        #the second element should be a tuple\n        return tuplex[0]==tuple1\n    else:\n        print(f\"Input {tuplex} is not a tuple or list\")\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check if tuple is None, then return True\n    if tuplex is None:\n        return True\n    # check for a tuple and an element\n    if len(tuplex)!= len(tuple1):\n        return False\n    # check for duplicate items\n    for i in range(len(tuplex)):\n        if tuplex[i]!= tuple1[i]:\n            return False\n    return True\n    \n    \n    \ndef check_index(index,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check if tuple is None, then return True\n    if tuplex is None:\n        return True\n    # check for a tuple and an element\n    if len(tuplex)!= len(tuple1):\n        return False\n    # check for duplicate items\n    for i in range(len(tuplex)):\n        if tuplex[i]!= tuple1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return True\n    else:\n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False\ndef find_Even(x): \n    '''\n    Write a python function to find whether the even of a given number is even.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False\ndef find_Odd(x): \n    '''\n    Write a python function to find whether the odd of a given number is even.\n    '''\n    if x % 2 == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    x = x.strip('0')\n    if x == x.translate(x.maketrans('', '', '0')):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum_odd=0\n    for i in range(0,len(x)):\n        if x[i] % 2 == 0:\n            sum_odd = sum_odd + x[i]\n    if sum_odd == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    i = 0\n    while i < len(x):\n        if x[i] % 2 == 0:\n            i += 1\n        else:\n            if i > 0 and x[i] % 2 == 1:\n                i += 1\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def change_digits(num):\n        if num==0:\n            return 0\n        \n        digits = num%10\n        num = int(num/10)\n        digits = digits+1\n        return digits\n        \n    def next_bigger(n):\n        return n%10+change_digits(n)\n    \n    return next_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = ''\n    for i in range(len(str(n))-1,0,-1):\n        s += str(n%10)\n        n = int(n/10)\n    return s[::-1]\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n%10+n//10*10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = 0\n    while n > 0:\n        digit = n % 10\n        res = res*10 + digit\n        n = n//10\n    return res\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    i = n\n    while i >= 10:\n        j = 0\n        while j < 9:\n            if i == 0:\n                return n\n            if i % 10!= 0:\n                i = i * 10\n            else:\n                i = i // 10\n                j += 1\n    return n * 10 + j\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = 0\n    for i in range(len(str(n))):\n        res = res * 10 + int(str(n)[i])\n    return res\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # write your code here\n    \n    # end conditions\n    if n == 0:\n        return -1\n    \n    if n == 1:\n        return 10\n    \n    # integer array\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    # set of digits in the number\n    num_digits = set(digits)\n    \n    # return the next bigger number\n    for x in num_digits:\n        if n % x == 0:\n            # update the remaining digits\n            n //= x\n            \n            # append the next bigger number\n            num_digits.add(x)\n            return (n)\n            \n    # return -1 if there is no next bigger number\n    return (-1"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(str(n))\n    for i in range(len(arr)):\n        arr[i] = str(int(arr[i]) * 2)\n    return int(''.join(arr))\n    \ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n==0:\n        return '0'\n    elif n==1:\n        return '1'\n    elif n==2:\n        return '2'\n    else:\n        remainder=n%10\n        return str(remainder) + rearrange_bigger(n//10)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = []\n    while n!= 0:\n        dig = n % 10\n        n //= 10\n        nums.append(dig)\n    nums.reverse()\n    return nums\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i] * nums2[i], i))\n    heapq.heapify(heap)\n    count = 0\n    ans = []\n    while len(ans) < k and heap:\n        _, i = heapq.heappop(heap)\n        j = heapq.heappop(heap)\n        if i!= j:\n            count += 1\n            ans.append([nums1[i], nums2[j]])\n            heapq.heappush(heap, (nums1[i] * nums2[j], i))\n    return ans\nprint(k_smallest_pairs([4,2,6,5,0,3,1,7], [2,7,9,6], 5))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # store the count of elements from nums1 to nums2\n    count1 = count2 = 0\n    \n    # traverse the nums1 and nums2\n    for num in nums1:\n        count1 += 1\n        if num in nums2:\n            count2 += 1\n    \n    # sort both arrays and put the pair in count2\n    nums1.sort()\n    nums2.sort()\n    result = []\n    \n    # iterate through the nums1 and nums2 to get the minimum number\n    for i in range(k):\n        result.append(nums1[i] + nums2[i])\n    \n    # check if the count of smallest pairs is the same as count1\n    # if not then return -1\n    if count1!= count2:\n        return -1\n    \n    # now have count of smallest pairs and return\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return 0\n    \n    if len(nums1) < len(nums2):\n        min_heap = nums1\n        max_heap = nums2\n    else:\n        min_heap = nums2\n        max_heap = nums1\n        \n    k_pairs = 0\n    for i in range(k):\n        heapq.heappush(min_heap, (-1 * nums1[i], nums1[i]))\n        heapq.heappush(max_heap, (nums1[i], nums2[i]))\n        \n        if len(min_heap) >= len(max_heap):\n            while len(min_heap) > len(max_heap):\n                heapq.heappop(max_heap)\n                heapq.heappop(min_heap)\n        else:\n            while len(min_heap) < len(max_heap):\n                heapq.heappop(min_heap)\n                heapq.heappop(max_heap)\n                \n        k_pairs += 1\n    return k_pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 1:\n        return nums1 == nums2\n    i,j=0,0\n    heap = []\n    while i<k or j<k:\n        if nums1[i]<nums2[j]:\n            heapq.heappush(heap,[-nums2[j],j])\n            j+=1\n        else:\n            heapq.heappush(heap,[-nums1[i],i])\n            i+=1\n        if i==k or j==k:\n            break\n    return heap\n    \ndef sorted_array(nums):\n    '''\n    Sort the given array.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if nums[i] < nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Your code here\n    arr1 = nums1\n    arr2 = nums2\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        heapq.heappush(heap, -num1)\n    for num2 in nums2:\n        heapq.heappush(heap, num2)\n    res = []\n    while len(heap)!= k:\n        num1 = heapq.heappop(heap)\n        num2 = heapq.heappop(heap)\n        res.append([num1, num2])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                heapq.heappush(heap, (nums1[i], i, j))\n                break\n    result = []\n    for _ in range(k):\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_smallest_pairs2(nums1, nums2, k):\n        '''\n        Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n        '''\n        heap = []\n        mapping = {}\n        for i in range(len(nums1)):\n            if nums1[i] not in mapping:\n                mapping[nums1[i]] = i\n            else:\n                heapq.heappush(heap, (-nums1[i], mapping[nums1[i]]))\n        for i in range(len(nums2)):\n            if nums2[i] not in mapping:\n                mapping[nums2[i]] = i\n            else:\n                heapq.heappush(heap, (-nums2[i], mapping[nums2[i]]))\n        result = []\n        for i in range(k):\n            result.append(heapq.heappop(heap)[1])\n        return result\n    return k_smallest_pairs2(nums1, nums2, k)\n    # Write your code here\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    pairs = []\n    while len(nums1) > 0 and len(nums2) > 0:\n        if nums1[0] == nums2[0]:\n            heapq.heappop(nums1)\n            heapq.heappop(nums2)\n            continue\n        if nums1[0] > nums2[0]:\n            heapq.heappush(nums2, nums1.pop())\n            heapq.heappush(nums1, nums2.pop())\n        else:\n            heapq.heappush(nums1, nums2.pop())\n            heapq.heappush(nums2, nums1.pop())\n    for num1 in nums1:\n        pairs.append(num1)\n    for num2 in nums2:\n        pairs.append(num2)\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    pairs = []\n    # Pick up all pairs from nums1 and nums2\n    for i in range(n):\n        for j in range(n):\n            if nums1[i]!= nums2[j]:\n                pairs.append((nums1[i],nums2[j]))\n    # Sort the pairs by decreasing order of the second number\n    pairs.sort(key=lambda x:x[1])\n    # Pick up the k number of smallest pairs from the sorted array\n    for i in range(k):\n        pairs = []\n        # Select the first element from each pair and make it the first element\n        for i in range(n):\n            if nums1[i] not in pairs and nums2[i] not in pairs:\n                pairs.append(nums1[i])\n        # Remove the first element from each pair if it is the first element of the array\n        if pairs[0] == nums1[i]:\n            pairs.remove(pairs[0])\n        if pairs[0] == nums2[i]:\n            pairs.remove(pairs[0])\n        # Pick up the second element from each pair and make it the second element\n        for j in range(m):\n            if nums1[j] not in pairs and nums2[j] not in pairs:\n                pairs.append(nums2[j])\n        # Remove the second element from each pair if it is the second element of the array\n        if pairs[0] == nums2[j]:\n            pairs.remove(pairs[0])\n        # Remove the second element from each pair if it is the second element of the array\n        if pairs[0] == nums1[i]:\n            pairs.remove(pairs[0])\n    # Return the list of pairs\n    return pairs\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    #if there is a pair of tuples\n    if len(list1) > 0:\n        #for each tuple\n        for i in range(0, len(list1)):\n            #compare the lists\n            for j in range(i+1, len(list1)):\n                #if tuple is found\n                if list1[i] < list1[j]:\n                    #add the minimum product\n                    min_product = min(min_product, list1[i] * list1[j])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max1 = max(list1)\n    min1 = min(list1)\n    min2 = min(list1)\n    min3 = min(list1)\n    min4 = min(list1)\n    min5 = min(list1)\n    return max1*min2*min3*min4*min5\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 99999999\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            min_product = min(list1[i], list1[j])\n            if min_product < min_product:\n                min_product = min_product\n            elif min_product == list1[i] or min_product == list1[j]:\n                min_product = 99999999\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(map(lambda x: (x[0],x[1]),list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max1 = max(list1)\n    min_product = list1[0] * list1[1]\n    for item in list1:\n        if item > max1:\n            max1 = item\n        if item < min_product:\n            min_product = item\n    return (min_product)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    min_product_pair = None\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min1 = list1[0][0]\n    min2 = list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][0] < min1:\n            min1 = list1[i][0]\n        if list1[i][1] < min2:\n            min2 = list1[i][1]\n    return min1*min2\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            min_product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0][0] * list1[0][1]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    lowest = float('inf')\n    for val in listval:\n        if val < lowest:\n            lowest = val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # iterate through the list\n    for i in range(0, len(listval) - 1):\n        if listval[i] > listval[i + 1]:\n            temp = listval[i]\n            listval[i] = listval[i + 1]\n            listval[i + 1] = temp\n    # if there are no elements greater than the last element,\n    # return the last element\n    if listval[-1] < listval[-2]:\n        return listval[-1]\n    else:\n        return listval[-2]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = []\n    for val in listval:\n        if val < 0:\n            l.append(-1 * val)\n        elif val == 0:\n            l.append(0)\n        else:\n            l.append(val)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    try:\n        listval.sort()\n        min = listval[0]\n    except Exception:\n        min = listval[0]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    print(\"Minimum value is: \" + str(min(listval)))\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float(\"inf\")\n    min_index = 0\n    \n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    capitalized = word.title()\n    first_cap = capitalized.capitalize()\n    result = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', first_cap)\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #splitting the word into parts\n    parts = word.split('_')\n    #turns the list into a new list\n    parts = [word[0].lower() + word[1:] for word in parts]\n    #removes any parts that are not alphabetic\n    parts = [word.strip() for word in parts if word.isalpha()]\n    #returns the parts in a camel case string\n    return ''.join(parts)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return pattern.sub(r' \\1', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().strip('_')\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_lower = word.lower()\n    word_list = word_lower.split(\"_\")\n    word_list = [''.join(word_list[0].split(' ')[1:]).capitalize()] + word_list[1:]\n    return ''.join(word_list)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # 1. create a pattern\n    pattern = r\"^[a-z][A-Z][a-z]+$\"\n    # 2. search for the pattern in the word\n    m = re.search(pattern, word)\n    # 3. if the pattern matches a character, then replace it with uppercase\n    if m:\n        word = word.replace(m.group(), m.group().upper())\n    # 4. convert the string to camel case string and back to snake case\n    word = word.replace(word.title(), word.swapcase())\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    match = re.search('([A-Z]+)([a-z])', word)\n    if match:\n        return match.group(1) + match.group(2) + ''.join(x.title() for x in match.groups())\n    else:\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    camel = word[0].upper() + word[1:]\n    return camel\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word is None or word == '':\n        return ''\n    newword = ''\n    word = word.title()\n    for char in word:\n        if char!='':\n            newword += char.lower()\n    return newword\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # define the regex\n    regex = r\"^(.)([A-Z][a-z]+)$\"\n    \n    # apply the regex to the string\n    return re.sub(regex, r\"\\1_\\2\", word)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [int(x) for x in list(str(l)) if int(x) % 2 == 1]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = []\n    for i in l:\n        if i % 2 == 1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    my_list = list(l)\n    new_list = []\n    for i in range(len(my_list)):\n        if my_list[i] % 2 == 1:\n            new_list.append(my_list[i])\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    odd = 0\n    for i in l:\n        if i % 2!= 0:\n            l2.append(i)\n            odd += 1\n    if odd == 0:\n        return l2\n    else:\n        print(\"Please enter a list of numbers.\")\n        return remove_odd(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # your code goes here\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # loop through the list\n    for i in l:\n        # if odd, remove it\n        if i % 2!= 0:\n            l.remove(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    return l[::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for num in l:\n        if num%2!=0:\n            l.remove(num)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    ind = 0\n    while ind < len(l):\n        if l[ind] % 2!= 0:\n            l.pop(ind)\n            l.append(l[ind])\n            ind += 1\n        else:\n            ind += 1\n    return l\n    \n    \n    \ndef sort(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    l.sort()\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    if n == 0:\n        return list1[0]\n    if n < 0:\n        return extract_nth_element(list1, n * -1)\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return list1[0]\n    else:\n        return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index = 0\n    for item in list1:\n        index += 1\n        if item[0] == n:\n            return item[1]\n    return -1\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # your code here\n    return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    list3=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if i+j in list1 and i+j in list2:\n                list3.append(i+j)\n                #print(list3)\n    print(list3)\n    return list3\n    \nprint(overlapping([1,2,3,4,5], [3,6,7,8,9]))"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    dict_ = {}\n    for item in list1:\n        if item in dict_.keys():\n            dict_[item]+=1\n        else:\n            dict_[item] = 1\n    for item in list2:\n        if item not in dict_.keys():\n            dict_[item] = 1\n        else:\n            dict_[item] += 1\n    return dict_\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\nlist_1 = [1,2,3,4,5,6,7,8]\nlist_2 = [6,7,8,9,10,11,12,13]"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==None or list2==None:\n        return False\n    else:\n        if len(list1)>len(list2):\n            return True\n        else:\n            for i in range(0,len(list2)):\n                if list1[i]==list2[i]:\n                    return True\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        print(\"The lists are same size\")\n    else:\n        print(\"The lists are not same size\")\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for the loop to iterate through list1 and find any occurence of element in the list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            # if element in the list is in the list2, print True\n            return True\n    # if element is not in list2, print False\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return [x for x in list1 if x in list2]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # HINT:  You may want to use <list1[index] in <list2[index]> \n    \n    # check for the same index and pairwise\n    # index is always left, up, right, down\n    # if both are in the list, pairwise\n    # if pairwise is empty, both are in the list\n    \n    # TODO: Write a solution using loops.  \n    # WRITE YOUR SOLUTION HERE!\n    \n    # for each element in the list, check the first one \n    # if it's in the second list, then do not check it \n    # if not in the second list, then check it \n    # if not in the first list, then check it.\n    \n    # if no element exists, then return True\n    \n    # if no element exists, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if it's in the second list, then check it\n    # if there is only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if it's in the second list, then check it\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return False\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n    # if there are only 1 element in the list, then return True\n    \n    # if there are 2 elements in the list, then check the second one \n    # if it's in the first list, then do not check it\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Your code here\n    return 0 in list1 or 0 in list2 or None in list1 or None in list2\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = []\n    for i in range(0,len(arr)):\n        for j in range(0, len(arr)):\n            if arr[i] > arr[j] and arr[i] > 0:\n                max_prod.append([arr[i], arr[j]])\n    max_prod = sorted(max_prod, key=lambda x: x[1], reverse = True)\n    if max_prod:\n        return max_prod[0][0], max_prod[0][1]\n    else:\n        return 0,0\narr = [10, 20, 10, 5, 10, 2, 6, 10, 30, 10, 4, 9]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    product = arr[0]\n    for i in range(1, n):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    max_index = -1\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_index = i\n    return max_index, max_product\n    \n    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    print(max(arr))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_p = arr[0] * arr[0]\n    for i in range(1, n):\n        max_p = max(max_p * arr[i], arr[i])\n    return max_p\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Code here\n    arr.sort()\n    low = 0\n    high = len(arr) - 1\n    i = 1\n    while (i <= high):\n        if (arr[i] * arr[low] > arr[i] * arr[high]):\n            i = i + 1\n        else:\n            return [arr[low], arr[high]]\n    return [arr[low], arr[high]]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    temp = [0]*len(arr)\n    max_product = 0\n    max_idx = -1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maximum = arr[0]\n    for i in arr:\n        if i > maximum:\n            maximum = i\n    return maximum\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_Product(arr)"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # TODO: Write your code here\n    arr=np.array(arr)\n    if(len(arr)==0):\n        return(-1,-1)\n    elif(len(arr)==1):\n        return(arr[0],arr[0])\n    else:\n        for i in range(0,len(arr)-1):\n            for j in range(i+1,len(arr)):\n                if(arr[i]*arr[j]>arr[i]*arr[j]):\n                    return(arr[i],arr[j])\n        return(-1,-1)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return (Input[0],)\n    \ndef group_tuples_by_second(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return (Input[0],)\n    "
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) > 0:\n        Input = sorted(Input)\n        Result = [Input[0]]\n        for i in Input:\n            if len(i) > 1:\n                if i[0] not in Result:\n                    Result.append(i[0])\n        return Result\n    else:\n        return []\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(Input)):\n            for j in range(i + 1, len(Input)):\n                if Input[i] == Input[j]:\n                    result.append(Input[i])\n        return result\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) < 2: \n        return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = [tuple(x) for x in Input] \n    lst.sort() \n    if len(lst) == 0:\n        return 'No Elements'\n    else:\n        return lst[0]"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = []\n    for i in range(len(Input)):\n        for j in range(len(Input)-1):\n            if Input[j][1] == Input[j+1][1]:\n                a.append((Input[j][0], Input[j][1]))\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # make a list of tuple as tuple[a,b,c]\n    Input = list(Input)\n    Output = []\n    for i in Input:\n        for j in range(i[0],i[1]):\n            Output.append(i)\n    Output.sort(key = lambda x : x[0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # list of tuples \n    tuple_list = []\n    # looping over all elements of list and store tuple in list \n    for i in Input:\n        tuple_list.append(i)\n    # set a variable equal to length of tuple_list \n    length = len(tuple_list)\n    # create an empty set \n    set_of_tuples = set()\n    # for loop \n    for i in range(length):\n        # check if tuple_list[i] is in set_of_tuples \n        if tuple_list[i] in set_of_tuples:\n            # set the tuple to the tuple_list[i] \n            set_of_tuples.remove(tuple_list[i])\n        else:\n            # set the tuple to the tuple_list[i] \n            set_of_tuples.add(tuple_list[i])\n    # return the set of tuples \n    return set_of_tuples \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    First = input('Enter first element : ')\n    if len(Input) == 0:\n        return 'No element found.'\n    elif len(Input) == 1:\n        return Input[0]\n    elif len(Input) >= 2:\n        for i in range(len(Input)):\n            if Input[i] == First:\n                return Input[i]\n    else:\n        return 'Invalid Input.'\n        \ndef sort_tuples(Input):\n    '''\n    Write a function that will sort the tuple based on the given element.\n    '''\n    \n    temp_list = []\n    for i in Input:\n        if i not in temp_list:\n            temp_list.append(i)\n            \n    temp_list.sort()\n    \n    \n    return temp_list\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max_lst = []\n    for i in range(0, len(lst)):\n        if len(lst[i]) > len(Max_lst):\n            Max_lst = lst[i]\n    return Max_lst\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    pass \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    MAX = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > MAX:\n            MAX = len(lst[i])\n    return MAX\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    largest = 0\n    for i in range(len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        print('The list is empty.')\n    else:\n        lst.sort()\n        for i in range(len(lst)):\n            if lst[i] == 0:\n                print(i, lst[i])\n                return i\n    return \"The list contains no element with maximum length.\"\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if max < lst[i]:\n            max = lst[i]\n    return max\ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min = lst[0]\n    for i in range(len(lst)):\n        if min > lst[i]:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == None or len(lst) == 0:\n        return None\n    return max(lst,key = len)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    for i in lst: \n        if len(i) > len(lst):\n            return i\n    \ndef main():\n    \"\"\" Program to print the product of the list of length 4,7,9 and 12.\n    \"\"\"\n    print('Product of the list of length 4,7,9 and 12 is', Find_Max([4,7,9,12]))\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for element in lst:\n        if(len(element) > max_length):\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        total += item\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    numbers = []\n    for i in list1:\n        numbers.append(round(i, 2))\n    total = 0\n    for i in numbers:\n        total += i\n    return tota"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for x in range(len(list1)):\n        list1[x] = round(list1[x], 0)\n    return sum(list1)\n    \n    \ndef main():\n    '''\n    Runs the program as follows:\n    1. Prompts the user for a list of numbers.\n    2. Initializes a new list of integers, with the initial values of each element of the list equal to 0.\n    3. Iterates through the elements of the list one by one, printing the values of the elements of the new list.\n    4. Prints the list.\n    5. Prints the total sum of the list.\n    '''\n    print('--------------------')\n    print('Program To Sum Numbers')\n    print('--------------------')\n    \n    print('Enter a list of numbers separated by commas: ')\n    list_of_numbers = []\n    \n    while True:\n        inp = input('> ')\n        if inp == '':\n            break\n        list_of_numbers.append(inp)\n        \n    list_of_numbers = list(map(int, list_of_numbers))\n    \n    print('--------------')\n    print('The list of numbers are: ', list_of_numbers)\n    \n    print('--------------')\n    print('Enter a number: ')\n    num = int(input('> '))\n    print('The sum of the numbers is: ', round_and_sum(list_of_numbers[num - 1]))\n    \n    print('--------------')\n    print('All numbers in the list are: ', list_of_numbers)\n    \n    print('--------------')\n    print('The total of the list is: ', round_and_sum(list_of_numbers), '\\n')\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Sort the list in ascending order\n    list1.sort()\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    tot = 0\n    for i in list1:\n        tot += i\n    print(tot)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        result += round(list1[i], 2)\n    print(result)\n    print(result*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    print(round(sum * len(list1)))\n    return(sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    def round_and_sum_2(list1):\n        '''\n        Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        '''\n        summ = 0\n        for i in list1:\n            summ += i\n        print(summ)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum + i\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for x in list1:\n        sum += x\n    print(\"Total sum is : \", sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n * cube_Sum(n - 1)\n    \nn = int(input())\nprint(cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = []\n    for i in range(1,n+1):\n        cube.append(i**3)\n    print(cube)\n    return sum(cube)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    return n * cube_Sum(n - 1) \n \n # Test the program \nprint(cube_Sum(6)) \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum=sum+i**3\n    print(sum)\n    return sum\ncube_Sum(4)"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    lst = []\n    for i in range(n,0,-2):\n        for j in range(2):\n            lst.append(i**j)\n    return sum(lst)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if(n<0):\n        return -1\n    return n**3\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum += (i*i*i)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n + 1):\n        cube = i**3\n        cubes.append(cube)\n    return sum(cubes)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += test_tup[i]\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # loop through each element of the tuple\n    # create a string with the concatenation of the elements\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_list = []\n    for i in test_tup:\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup=tuple(test_tup)\n    return ','.join(str(elem) for elem in tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup1 = test_tup[0]\n    tup2 = test_tup[1]\n    tup3 = test_tup[2]\n    return tup1 + tup2 + tup3\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    try:\n        if len(test_tup) == 1:\n            return test_tup[0]\n        else:\n            return tuple([test_tup[i] for i in range(len(test_tup))])\n    except:\n        print(\"Error! \\nThe list passed in is not in valid format\")\n        return\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(e) for e in test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n<0:\n        print(\"Invalid input!\")\n    elif n==0:\n        return 0\n    else:\n        return find_Average_Of_Cube(n-1) + find_Average_Of_Cube(n-2) + find_Average_Of_Cube(n-3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i\n    average = sum / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    print(f\"Average of cubes of {n} natural numbers is {average}\")\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(i**3)\n    l = [i**3 for i in l]\n    print(l)\n    return sum(l)/len(l)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    print(f\"The average of cubes is {sum(cubes)/len(cubes)}\")\n    return sum(cubes)/len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print(\"n =\", n)\n    if n < 1:\n        raise Exception('Input must be at least one!')\n    for i in range(n):\n        print(\"Cube =\", i*i*i)\n    return (i*i*i)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s = s + (i**3)\n    return s / (n**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i*i*i)\n    return sum(cubes)/len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    \n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + i\n        i = i + 1\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = list(test_tuple)\n    for index, element in enumerate(test_tuple):\n        if element == 'Rear':\n            test_tuple[index] = test_tuple[index][1:]\n            break\n    return tuple(test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result_str = ''\n    result_str = result_str.join(test_tuple[0])\n    return result_str\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = list()\n    for element in test_tuple:\n        rear.append(element[-1])\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_of_strings, values = test_tuple\n    rear_indices = []\n    for string in tuple_of_strings:\n        if string[-1] == \"R\":\n            rear_indices.append(int(string[:len(string)-1]))\n    return rear_indices\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = [i[1] for i in test_tuple]\n    rear.pop(0)\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = \"\"\n    for x in test_tuple:\n        if x.isdigit():\n            rear += x\n        else:\n            break\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst = [list(i) for i in test_tuple]\n    return lst\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_string_list = [test_tuple[0]]\n    for i in range(1, len(test_tuple)):\n        test_string_list.append(test_tuple[i][-1])\n    return test_string_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    \n    #count the number of elements with element x in the list\n    for i in list1:\n        if i[x] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for i in range(len(list1)): \n        if x in list1[i]: \n            count = count + 1 \n    return count \ndef is_possible_permutation(list1, i, length): \n    '''\n    Write a function to check if a list has all the permutations of the elements \n    and if it is possible to use the permutations on a list of length \n    length.\n    '''\n    # if length == 1: \n    #     return True \n    if length == 2: \n        if count_element_in_list(list1, list1[i]) == 1: \n            return True \n        else: \n            return False \n    else: \n        if count_element_in_list(list1, list1[i]) == 1: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    return True \n            return False \n        else: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    if not is_possible_permutation(list1, i, length-1): \n                        return False \n            return True \ndef list_permutation(list1, length): \n    '''\n    Write a function to check if a list has all the permutations of the elements \n    and if it is possible to use the permutations on a list of length \n    length.\n    '''\n    # if length == 1: \n    #     return True \n    if length == 2: \n        if count_element_in_list(list1, list1[i]) == 1: \n            return True \n        else: \n            return False \n    else: \n        if count_element_in_list(list1, list1[i]) == 1: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    return True \n            return False \n        else: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    if not is_possible_permutation(list1, i, length-1): \n                        return False \n            return True \ndef is_word_permutation(list1, word): \n    '''\n    Write a function to check if a list contains all the permutations of the elements \n    and if it is possible to use the permutations on a list of length \n    length.\n    '''\n    # if length == 1: \n    #     return True \n    if length == 2: \n        if count_element_in_list(list1, word) == 1: \n            return True \n        else: \n            return False \n    else: \n        if count_element_in_list(list1, word) == 1: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    return True \n            return False \n        else: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    if not is_possible_permutation(list1, i, length-1): \n                        return False \n            return True \ndef is_word_permutation_palindrome(list1, word): \n    '''\n    Write a function to check if a list contains all the permutations of the elements \n    and if it is possible to use the permutations on a list of length \n    length.\n    '''\n    # if length == 1: \n    #     return True \n    if length == 2: \n        if count_element_in_list(list1, word) == 1: \n            return True \n        else: \n            return False \n    else: \n        if count_element_in_list(list1, word) == 1: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    return True \n            return False \n        else: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    if not is_possible_permutation(list1, i, length-1): \n                        return False \n            return True \ndef list_permutation_palindrome(list1, length): \n    '''\n    Write a function to check if a list contains all the permutations of the elements \n    and if it is possible to use the permutations on a list of length \n    length.\n    '''\n    # if length == 1: \n    #     return True \n    if length == 2: \n        if count_element_in_list(list1, list1[i]) == 1: \n            return True \n        else: \n            return False \n    else: \n        if count_element_in_list(list1, list1[i]) == 1: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    return True \n            return False \n        else: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    if not is_possible_permutation(list1, i, length-1): \n                        return False \n            return True \ndef remove_letter(list1, letter): \n    '''\n    Write a function to remove a specific letter from a string \n    '''\n    if letter == list1[0]: \n        return list1.pop(0) \n    else: \n        return list1 \ndef list_permutation_remove_letter(list1, length): \n    '''\n    Write a function to remove a specific letter from a string \n    '''\n    if length == 2: \n        if count_element_in_list(list1, list1[i]) == 1: \n            return True \n        else: \n            return False \n    else: \n        if count_element_in_list(list1, list1[i]) == 1: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    return True \n            return False \n        else: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    if not is_possible_permutation(list1, i, length-1): \n                        return False \n            return True \ndef is_word_permutation_without_letter(list1, word): \n    '''\n    Write a function to check if a list contains all the permutations of the elements \n    and if it is possible to use the permutations on a list of length \n    length.\n    '''\n    # if length == 1: \n    #     return True \n    if length == 2: \n        if count_element_in_list(list1, word) == 1: \n            return True \n        else: \n            return False \n    else: \n        if count_element_in_list(list1, word) == 1: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    return True \n            return False \n        else: \n            for j in range(i+1, len(list1)): \n                if is_possible_permutation(list1, i, length-1): \n                    if not is_possible_permutation(list1, i, lengt"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list_length = len(list1)\n    counter = 0\n    for i in range(list_length): \n        if list1[i] == x: \n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    #pass\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(list1)): \n        if list1[i] == x: \n            n += 1\n    return n\n    \ndef main(): \n    ''' Main Function '''\n    # 1. Declare a list \n    list_1 = []\n    # 2. Read 10 integers from console input \n    for i in range(10): \n        x = int(input(\"Enter the element: \")) \n        list_1.append(x) \n    # 3. Print the count of sublists \n    print(count_element_in_list(list_1, 'a')) \n    print(count_element_in_list(list_1, 'c')) \n    print(count_element_in_list(list_1, 'z')) \n    print(count_element_in_list(list_1, 'A')) \nmain("
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # your code here\n    l = 0\n    if list1:\n        for i in list1:\n            if x in i:\n                l = l + 1\n    return l\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in list1:\n        if (i == x):\n            c+=1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for x1 in list1:\n        if x1 == x:\n            count = count + 1\n    return count\n    \n    "
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_list = []\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    for num in filtered_nums:\n        filtered_list.append(num)\n    return filtered_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            print(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    def odd(n):\n        return n%2!= 0\n    return [n for n in nums if odd(n)]\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [number for number in nums if number % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    odd = []\n    for num in nums:\n        if num % 2!= 0:\n            odd.append(num)\n    return od"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = list(filter(lambda x: x % 2!= 0, nums))\n    print(filtered_nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #Your code here\n    new = []\n    for i in nums:\n        if i % 2 == 1:\n            new.append(i)\n    return new\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            new_list.append(nums[i])\n    return new_list\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    month = int(date[1])\n    day = int(date[2])\n    year = int(date[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('/')\n    dt = dt[-1]\n    dt = dt.split('-')\n    dt = dt[-1]\n    dt = dt.split('.')\n    dt = dt[0]\n    dt = dt + dt[1]\n    dt = dt.split(' ')\n    dt = dt[0]\n    dt = dt.split('-')\n    dt = dt[-1]\n    dt = dt + dt[-1]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year = int(dt[0:4])\n    month = int(dt[5:7])\n    day = int(dt[8:10])\n    date = str(dt[11:13]) + '-' + str(dt[14:16]) + '-' + str(dt[17:19])\n    # change date format to mm-dd-yyyy format\n    date = str(year) + '-' + str(month) + '-' + str(day) +'' + date\n    return date\n    \ndef extract_news_from_file(filename):\n    '''\n    Read a file and return a list of lines.\n    '''\n    with open(filename) as f:\n        file = f.readlines()\n    return file\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    return pattern.sub('-%d-%m-%Y', dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    if dt[-2:] == '-02':\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:]\n    elif dt[-2:] == '-01':\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:] + '-' + dt[14:16]\n    elif dt[-2:] == '-00':\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:] + '-' + dt[14:18]\n    else:\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:] + '-' + dt[14:20]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = dt.split('-')\n    day = int(dt_list[0])\n    month = int(dt_list[1])\n    year = int(dt_list[2])\n    return f'{day}-{month}-{year}'\n    \ndef change_time_format(t):\n    '''\n    Write a function to convert a time of HH:MM format to hh:mm format.\n    '''\n    t_list = t.split(':')\n    h = int(t_list[0])\n    m = int(t_list[1])\n    s = int(t_list[2])\n    return f'{h}:{m:02d}:{s:02d}'\n    \ndef change_date_time_format(dt):\n    '''\n    Write a function to convert a date and time to yyyy-mm-dd hh:mm format.\n    '''\n    dt_list = dt.split('-')\n    day = int(dt_list[0])\n    month = int(dt_list[1])\n    year = int(dt_list[2])\n    return f'{day}-{month}-{year} {change_date_format(dt)}'\n    \ndef change_date_time_format2(dt):\n    '''\n    Write a function to convert a date and time to yyyy-mm-dd hh:mm format.\n    '''\n    dt_list = dt.split('-')\n    day = int(dt_list[0])\n    month = int(dt_list[1])\n    year = int(dt_list[2])\n    hour = int(dt_list[3])\n    minutes = int(dt_list[4])\n    return f'{day}-{month}-{year} {change_time_format(dt)}:{hour}:{minutes:02d}'\n    \ndef change_time_format2(t):\n    '''\n    Write a function to convert a time of HH:MM format to hh:mm format.\n    '''\n    t_list = t.split(':')\n    h = int(t_list[0])\n    m = int(t_list[1])\n    s = int(t_list[2])\n    return f'{h}:{m:02d}:{s:02d}'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    tmp_str = dt.split('-')\n    return '-'.join([tmp_str[2],tmp_str[0],tmp_str[1]])\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # find the length of the string\n    # in a string, length is an integer\n    # length is the number of characters in a string\n    # so, for example, length is 12 or 11\n    # the length of a string is 11\n    pattern_str = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern_str, dt)\n    # convert year\n    year = match.group(1)\n    # convert month\n    month = match.group(2)\n    # convert day\n    day = match.group(3)\n    # convert date\n    date = f'{year}-{month}-{day}'\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = re.findall('[0-9]{4}-\\d{2}-\\d{2}', dt)\n    if date:\n        return date[0]\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d_list= dt.split('-')\n    return d_list[2]+'-'+d_list[1]+'-'+d_list[0]\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Your code here\n    # You can use while loop here\n    \n    n = len(my_list)\n    \n    # Shuffle the list to get it in the correct order\n    # for i in range(n):\n    #     my_list[i] = random.randint(1, n-1)\n    \n    for i in range(n):\n        \n        # Create a random part of the list\n        # if i < n // 2:\n        #     j = random.randint(i, i+n-1)\n        # else:\n        #     j = random.randint(i, i+n-1) + 1\n        \n        j = i\n        \n        while j >= 1:\n            \n            # The previous j elements are the elements after j-1\n            # in the list\n            # \n            # \n            # \n            if my_list[j-1] > my_list[j]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-1]\n                my_list[j-1] = temp\n                \n            j -= 1\n        \n        # The next j elements are the elements after j+1\n        # in the list\n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n    "
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # create a list of odd length\n    # (example, [2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n    # on the other hand, (example, [4,5,6,7,8,9,10,11,12,13,14,15])\n    # on the other hand, (example, [6,7,8,9,10,11,12,13,14,15])\n    # (example, [6,7,8,9,10,11,12,13,14,15])\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while my_list[j] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #Find number of elements to divide the array\n    num_of_elements = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Sort the whole list\n    my_list.sort()\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Write your solution here\n    # Initialization\n    length = len(my_list)\n    gap = int(length/2)\n    while gap > 0:\n        for i in range(gap, length):\n            element = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > element:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = element\n        gap = int(gap/2)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #declaring steps\n    steps = 0\n    step_max = 1\n    while step_max <= len(my_list):\n        step = step_max\n        while step > 0 and my_list[step-1] > my_list[step]:\n            my_list[step], my_list[step-1] = my_list[step-1], my_list[step]\n            steps += 1\n        step_max *= 2\n    return my_list\n    \n    \n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    my_list_size = len(my_list)\n    gap = int(my_list_size / 2)\n    while gap >= 1:\n        for i in range(gap, my_list_size):\n            my_list[i] = my_list[i - gap]\n        for j in range(gap, my_list_size):\n            value = my_list[j]\n            k = j\n            while k >= gap and my_list[k - gap] > value:\n                my_list[k] = my_list[k - gap]\n                k -= gap\n            my_list[k] = value\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    x = test_tup1\n    y = test_tup2\n    n = len(x)\n    result = []\n    for i in range(n):\n        result.append(x[i] + y[i])\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    lst = [tup for tup in test_tup1 if tup in test_tup2]\n    print(lst)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup = {}\n    for i in test_tup1:\n        test_tup[i] = test_tup1[i] + test_tup2[i]\n    return test_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    from numpy.core.multiarray import concatenate\n    from itertools import zip_longest\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for i, tup in enumerate(test_tup2):\n        res.append((tup[0] and test_tup1[i][0]) or (tup[1] and test_tup1[i][1]))\n    return res\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 or test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*b)/(c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    delta_a = b - a\n    delta_b = a - c\n    delta_c = c - a\n    \n    if delta_a > delta_b and delta_b > delta_c: \n        return delta_a + delta_b + delta_c\n    \n    if delta_a > delta_c:\n        return delta_a + delta_c\n    \n    if delta_b > delta_c:\n        return delta_b + delta_c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b*c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # print(f'a={a},b={b},c={c}')\n    x0 = a\n    x1 = b\n    x2 = c\n    n = 1\n    # print(f'x0={x0}, x1={x1}, x2={x2}, n={n}')\n    y = (x1*x2) - (x0*x2) - (x1**2)\n    # print(f'y={y}')\n    # print(f'y=x1*x2+x0*x2+x1**2+x0**2')\n    # print(f'y=x1*x2+x0*x2+x1**2+x0**2+n')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+n+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28')\n    # print(f'y=x0*x2+x1*x2+x0**2+x1**2+"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # TODO: Complete this function.\n    # Hint: You'll need a function for you.\n    return (a*c)+(b*(a**2))+(b**2*(a**2))+(c*(a*b))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #result=math.sqrt(b**2-4*a*c)\n    result=math.sqrt(2*a*c)\n    return result\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*b*b)/4 + (c/b)*a*(b**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a * (b**2) + c\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * (x**2) - b*x - c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = (b**2 - 4*a*c)\n    if d < 0:\n        print(\"Cannot find a parabola\")\n    elif d == 0:\n        x = -a/2 + b/2\n        print(\"x = %.2f, y = %.2f\" % (x, -b/2))\n    elif d == 1:\n        x = -a/2 - b/2\n        print(\"x = %.2f, y = %.2f\" % (x, b/2))\n    else:\n        x = (-b + d**0.5)/2 - a\n        y = (-b - d**0.5)/2 - a\n        print(\"x = %.2f, y = %.2f\" % (x, y))\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count = count + 1\n    return count >= 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    else:\n        return list1 == list2\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for l1 in list1:\n        for l2 in list2:\n            if l1 == l2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1.intersection(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) == len(list2) and all(x in list2 for x in list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    l1 = 0\n    l2 = 0\n    while l1 < len(list1) and l2 < len(list2):\n        if list1[l1] == list2[l2]:\n            l1 += 1\n            l2 += 1\n        elif list1[l1] < list2[l2]:\n            l1 += 1\n        else:\n            l2 += 1\n    return l1 == len(list1)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1==0:\n        return height\n    if base2==0:\n        return height\n    else:\n        return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height > base2:\n        mid = (height-base2)/2\n        low = base2+mid\n        high = base2\n    else:\n        mid = (height-base1)/2\n        low = base1+mid\n        high = base1\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    first = 0\n    second = 0\n    third = 0\n    if(height == 0):\n        height = 0\n    for i in range(height):\n        first = base1 + base2 + height\n        if(first > second + third):\n            second = first\n        elif(first > second + third):\n            third = first\n        else:\n            second = first\n            third = first\n    return(second/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height <= 1:\n        return height\n    else:\n        return trapezium(base1, base2, height, height, height)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    length = abs(base1+base2)/2\n    trapezium = height/2 + length/2\n    return trapezium\n    \ndef trapezium_interval(trapezium, interval):\n    '''\n    Write a function that finds the interval of a trapezium.\n    '''\n    interval = float(interval)\n    return trapezium/2 + interval/2\n    \ndef trapezium_area(trapezium, height):\n    '''\n    Write a function that finds the area of a trapezium.\n    '''\n    area = trapezium*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if(base1<base2):\n        median_1 = ((base2+base1)/2)\n        median_2 = ((base1+base2)/2)\n    else:\n        median_1 = base1\n        median_2 = base2\n    if(height==1):\n        return float('%.3f'%median_1)\n    if(height==2):\n        return float('%.3f'%median_2)\n    if(height==3):\n        return float('%.3f'%(median_1+median_2)/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<0:\n        return 'Invalid height'\n    if height==0:\n        return 0\n    elif height==1:\n        return 1\n    else:\n        if height>=1:\n            return (base1+base2)/2\n        else:\n            return 'Invalid height'\n    \ndef area(x,y):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    if y>0:\n        return x*y\n    else:\n        return 'Invalid height'\n    \ndef area2(base1,base2,height):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    if height<0:\n        return 'Invalid height'\n    if height==0:\n        return 0\n    elif height==1:\n        return area(base1,base2)/2\n    else:\n        return area(base1,base2,height)*area(base2,base1,height-1)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1=height\n    base2=height\n    def trapezium(base1,base2):\n        if (base1<=base2):\n            sum1=0\n            sum2=0\n            while (base1<=base2):\n                sum1=sum1+base1\n                sum2=sum2+base1\n                base1=base1+1\n            return (sum1/2)\n        else:\n            sum1=0\n            sum2=0\n            while (base2<=base1):\n                sum1=sum1+base1\n                sum2=sum2+base2\n                base2=base2+1\n            return (sum2/2)\n    return trapezium(base1,base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    l1=height/2\n    l2=l1+height/2\n    length=base1+base2\n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Your code here\n    median=height/2\n    print(median)\n    t1 = (base1 + base2) * 0.5\n    t2 = (base2 + base1) * 0.5\n    if height < t1 or height < t2:\n        print(\"Median does not lie on the trapezium\")\n        return\n    elif height > t1:\n        t = (base2 - base1) / 2\n        print(\"Median lies on the right\")\n        return (height - t) / 2\n    else:\n        print(\"Median lies on the left\")\n        return (height - t) / 2\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    result = True\n    for num in arr:\n        if num > number:\n            result = False\n    return result\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # if the number is greater than the array then return False else return True\n    # else return True\n    return arr[number] > arr[number+1]\n    \ndef check_less(arr, number):\n    '''\n    Write a function to check whether the entered number is less than the elements of the given array.\n    '''\n    return arr[number] < arr[number+1]\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if item > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1:\n        if arr[0] > number:\n            return False\n        return True\n    if number > arr[len(arr) - 1]:\n        return False\n    if number > arr[len(arr) - 2]:\n        return False\n    if number > arr[len(arr) - 3]:\n        return False\n    if number > arr[len(arr) - 4]:\n        return False\n    if number > arr[len(arr) - 5]:\n        return False\n    if number > arr[len(arr) - 6]:\n        return False\n    if number > arr[len(arr) - 7]:\n        return False\n    if number > arr[len(arr) - 8]:\n        return False\n    if number > arr[len(arr) - 9]:\n        return False\n    if number > arr[len(arr) - 10]:\n        return False\n    if number > arr[len(arr) - 11]:\n        return False\n    if number > arr[len(arr) - 12]:\n        return False\n    if number > arr[len(arr) - 13]:\n        return False\n    if number > arr[len(arr) - 14]:\n        return False\n    if number > arr[len(arr) - 15]:\n        return False\n    if number > arr[len(arr) - 16]:\n        return False\n    if number > arr[len(arr) - 17]:\n        return False\n    if number > arr[len(arr) - 18]:\n        return False\n    if number > arr[len(arr) - 19]:\n        return False\n    if number > arr[len(arr) - 20]:\n        return False\n    if number > arr[len(arr) - 21]:\n        return False\n    if number > arr[len(arr) - 22]:\n        return False\n    if number > arr[len(arr) - 23]:\n        return False\n    if number > arr[len(arr) - 24]:\n        return False\n    if number > arr[len(arr) - 25]:\n        return False\n    if number > arr[len(arr) - 26]:\n        return False\n    if number > arr[len(arr) - 27]:\n        return False\n    if number > arr[len(arr) - 28]:\n        return False\n    if number > arr[len(arr) - 29]:\n        return False\n    if number > arr[len(arr) - 30]:\n        return False\n    if number > arr[len(arr) - 31]:\n        return False\n    if number > arr[len(arr) - 32]:\n        return False\n    if number > arr[len(arr) - 33]:\n        return False\n    if number > arr[len(arr) - 34]:\n        return False\n    if number > arr[len(arr) - 35]:\n        return False\n    if number > arr[len(arr) - 36]:\n        return False\n    if number > arr[len(arr) - 37]:\n        return False\n    if number > arr[len(arr) - 38]:\n        return False\n    if number > arr[len(arr) - 39]:\n        return False\n    if number > arr[len(arr) - 40]:\n        return False\n    if number > arr[len(arr) - 41]:\n        return False\n    if number > arr[len(arr) - 42]:\n        return False\n    if number > arr[len(arr) - 43]:\n        return False\n    if number > arr[len(arr) - 44]:\n        return False\n    if number > arr[len(arr) - 45]:\n        return False\n    if number > arr[len(arr) - 46]:\n        return False\n    if number > arr[len(arr) - 47]:\n        return False\n    if number > arr[len(arr) - 48]:\n        return False\n    if number > arr[len(arr) - 49]:\n        return False\n    if number > arr[len(arr) - 50]:\n        return False\n    if number > arr[len(arr) - 51]:\n        return False\n    if number > arr[len(arr) - 52]:\n        return False\n    if number > arr[len(arr) - 53]:\n        return False\n    if number > arr[len(arr) - 54]:\n        return False\n    if number > arr[len(arr) - 55]:\n        return False\n    if number > arr[len(arr) - 56]:\n        return False\n    if number > arr[len(arr) - 57]:\n        return False\n    if number > arr[len(arr) - 58]:\n        return False\n    if number > arr[len(arr) - 59]:\n        return False\n    if number > arr[len(arr) - 60]:\n        return False\n    if number > arr[len(arr) - 61]:\n        return False\n    if number > arr[len(arr) - 62]:\n        return False\n    if number > arr[len(arr) - 63]:\n        return False\n    if number > arr[len(arr) - 64]:\n        return False\n    if number > arr[len(arr) - 65]:\n        return False\n    if number > arr[len(arr) - 66]:\n        return False\n    if number > arr[len(arr) - 67]:\n        return False\n    if number > arr[len(arr) - 68]:\n        return False\n    if number > arr[len(arr) - 69]:\n        return False\n    if number > arr[len(arr) - 70]:\n        return False\n    if number > arr[len(arr) - 71]:\n        return False\n    if number > arr[len(arr) - 72]:\n        return False\n    if number > arr[len(arr) - 73]:\n        return False\n    if number > arr[len(arr) - 74]:\n        return False\n    if number > arr[len(arr) - 75]:\n        return False\n    if number > arr[len(arr) - 76]:\n        return False\n    if number > arr[len(arr) - 77]:\n        return False\n    if number > arr[len(arr) - 78]:\n        return False\n    if number > arr[len(arr) - 79]:\n        return False\n    if number > arr[len(arr) - 80]:\n        return False\n    if number > arr[len(arr) - 81]:\n        return False\n    if number > arr[len(arr) - 82]:\n        return False\n    if number > arr[len(arr) - 83]:\n        return False\n    if number > arr[len(arr) - 84]:\n        return False\n    if number > arr[len(arr) - 85]:\n        return False\n    if number > arr[len(arr) - 86]:\n        return False\n    if number > arr[len(arr) - 87]:\n        return False\n    if number > arr[len(arr) - 88]:\n        return False\n    if number > arr[len(arr) - 89]:\n        return False\n    if number > arr[len(arr) - 90]:\n        return False\n    if number > arr[len(arr) - 91]:\n        return False\n    if number > arr[len(arr) - 92]:\n        return False\n    if number > arr[len(arr) - 93]:\n        return False\n    if number > arr[len(arr) - 94]:\n        return False\n    if number > arr[len(arr) - 95]:\n        return False\n    if number > arr[len(arr) - 96]:\n        return False\n    if number > arr[len(arr) - 97]:\n        return False\n    if number > arr[len(arr) - 98]:\n        return False\n    if number > arr[len(arr) - 99]:\n        return False\n    if number > arr[len(arr) - 100]:\n        return False\n    if number > arr[len(arr) - 101]:\n        return False\n    if number > arr[len(arr) - 102]:\n        return False\n    if number > arr[len(arr) - 103]:\n        return False\n    if number > arr[len(arr) - 104]:\n        return False\n    if number > arr[len(arr) - 105]:\n        return False\n    if number > arr[len(arr) - 106]:\n        return False\n    if number > arr[len(arr) - 107]:\n        return False\n    if number > arr[len(arr) - 108]:\n        return False\n    if number > arr[len(arr) - 109]:\n        return False\n    if number > arr[len(arr) - 110]:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i]>number and arr[i+1]>number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    if number > arr[0]:\n        greater = True\n    if number > arr[len(arr) - 1]:\n        greater = True\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > len(arr):\n        return False\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    for b in \"0123456789\":\n        if b in text:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'[a-zA-Z_][a-zA-Z0-9_]*')\n    text = text.lower()\n    m = regex.search(text)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return ''.join(re.findall(r'[a-zA-Z0-9]+', text.lower()))\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    import re\n    import string\n    if re.search(r'\\b\\w*?a\\b', text) is None:\n        return '1'\n    elif re.search(r'\\b\\w*?b\\b', text) is None:\n        return '2'\n    elif re.search(r'\\b\\w*?c\\b', text) is None:\n        return '3'\n    else:\n        return '4'\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one = re.match(r'(a){1}b{1}', text)\n    if match_one:\n        return True\n    return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's.\n    '''\n    match_two = re.match(r'(a){1}b{2}', text)\n    if match_two:\n        return True\n    return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three b's.\n    '''\n    match_three = re.match(r'(a){1}b{3}', text)\n    if match_three:\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four b's.\n    '''\n    match_four = re.match(r'(a){1}b{4}', text)\n    if match_four:\n        return True\n    return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five b's.\n    '''\n    match_five = re.match(r'(a){1}b{5}', text)\n    if match_five:\n        return True\n    return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six b's.\n    '''\n    match_six = re.match(r'(a){1}b{6}', text)\n    if match_six:\n        return True\n    return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven b's.\n    '''\n    match_seven = re.match(r'(a){1}b{7}', text)\n    if match_seven:\n        return True\n    return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's.\n    '''\n    match_eight = re.match(r'(a){1}b{8}', text)\n    if match_eight:\n        return True\n    return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine b's.\n    '''\n    match_nine = re.match(r'(a){1}b{9}', text)\n    if match_nine:\n        return True\n    return False\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero b's.\n    '''\n    match_zero = re.match(r'(a){1}b{0}', text)\n    if match_zero:\n        return True\n    return False\ndef text_match_one_or_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one_or_two = re.match(r'(a){1}b{1}', text)\n    if match_one_or_two:\n        return True\n    return False\ndef text_match_three_or_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    match_three_or_four = re.match(r'(a){1}b{3}', text)\n    if match_three_or_four:\n        return True\n    return False\ndef text_match_five_or_six(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    match_five_or_six = re.match(r'(a){1}b{5}', text)\n    if match_five_or_six:\n        return True\n    return False\ndef text_match_seven_or_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    match_seven_or_eight = re.match(r'(a){1}b{7}', text)\n    if match_seven_or_eight:\n        return True\n    return False\ndef text_match_nine_or_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    match_nine_or_ten = re.match(r'(a){1}b{9}', text)\n    if match_nine_or_ten:\n        return True\n    return False\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one b's.\n    '''\n    match_zero_or_one = re.match(r'(a){1}b{0}', text)\n    if match_zero_or_one:\n        return True\n    return False\ndef text_match_one_or_two_or_three_or_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one_or_two_or_three_or_four = re.match(r'(a){1}b{1}', text)\n    if match_one_or_two_or_three_or_four:\n        return True\n    return False\ndef text_match_one_or_two_or_three_or_four_or_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one_or_two_or_three_or_four_or_five = re.match(r'(a){1}b{2}', text)\n    if match_one_or_two_or_three_or_four_or_five:\n        return True\n    return False\ndef text_match_one_or_two_or_three_or_four_or_five_or_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one_or_two_or_three_or_four_or_five_or_six = re.match(r'(a){1}b{3}', text)\n    if match_one_or_two_or_three_or_four_or_five_or_six:\n        return True\n    return False\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one_or_two_or_three_or_four_or_five_or_six_or_seven = re.match(r'(a){1}b{4}', text)\n    if match_one_or_two_or_three_or_four_or_five_or_six_or_seven:\n        return True\n    return False\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight = re.match(r'(a){1}b{8}', text)\n    if match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight:\n        return True\n    return False\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine(text):\n    '''\n    Write a function that matches "
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall(r'[a-z]', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    reg = re.compile('[a-zA-Z_0-9]')\n    m = reg.match(text)\n    if not m:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # TODO: Write your code here\n    if text == '':\n        return 0\n    text = text.replace('a','')\n    text = text.replace('b','')\n    if text == '':\n        return 0\n    if text[-1] =='':\n        return 0\n    if text[-2:] =='b':\n        return 0\n    if text[-2:] =='a':\n        return 1\n    return 0\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.search(r'^[a-zA-Z\\.,]*$', text) # matches something like a, b, c, d,...\n    if a_match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)a(b)'\n    return re.search(pattern,text)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # declare empty string\n    return_val = \"\"\n    # initialize counter variable\n    counter = 0\n    # iterate through the number\n    for i in str(n) :\n        # find the last digit\n        if counter == len(str(n)) - 1 :\n            # if the current digit is greater than the next digit then update counter\n            # because the last digit is the last digit in the number\n            if int(n) > int(return_val):\n                counter = 0\n            # update the last digit\n            else:\n                counter = counter + 1\n        # increment counter\n        else:\n            counter = counter + 1\n        # return the last digit\n        return_val = return_val + i\n    return return_val\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return lastDigit(n-1)\n    else :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 : return 0\n    if n < 0 :\n        return lastDigit(-n)\n    \n    return lastDigit(n-1)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 10 :\n        return f'{n%10}'\n    else :\n        return f'{n%10}'\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0 :\n        n = n // 10\n        dig = n % 10\n        if dig!= 9 :\n            return dig\n    return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # remove leading zeros\n    if(n>0):\n        return int(str(n)[-1])\n    else:\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<0:\n        print(\"Invalid number\")\n        return 0\n    elif n==0:\n        print(\"Zero\")\n        return 0\n    elif n<10:\n        print(\"zero\")\n        return 0\n    else:\n        while n>0:\n            n=n//10\n            if n==0:\n                print(\"one\")\n                return 1\n            else:\n                print(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = 0\n    while (n > 0):\n        last_digit += 1\n        n = n // 10\n        if n <= 0:\n            break\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1 [-i]\n    \ndef conj(list):\n    '''\n    Write a python function to return the concatenation of a list of elements.\n    '''\n    return list [conj(x) for x in list]\n    \ndef pos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    return list1 [-i]\n    \ndef n_sum(list1):\n    '''\n    Write a python function to return the sum of the numbers in a list.\n    '''\n    return sum(list1)\n    \ndef n_diff(list1):\n    '''\n    Write a python function to return the difference of the numbers in a list.\n    '''\n    return list1 [-i]\n    \ndef mult_op(list1,list2):\n    '''\n    Write a python function to multiply all the numbers in a list by another number.\n    '''\n    return list1 [n_sum(list1) * n_diff(list2)]\n    \ndef sum_list(list1):\n    '''\n    Write a python function to return the sum of the numbers in a list.\n    '''\n    return sum(list1)\n    \ndef div_op(list1,list2):\n    '''\n    Write a python function to divide all the numbers in a list by another number.\n    '''\n    return list1 [n_diff(list1) / n_sum(list2)]\n    \ndef mul_op_div(list1,list2):\n    '''\n    Write a python function to multiply all the numbers in a list by another number.\n    '''\n    return list1 [list1 [n_diff(list1) * n_sum(list2)]]\n    \ndef mul_op_neg(list1,list2):\n    '''\n    Write a python function to multiply all the numbers in a list by another number.\n    '''\n    return list1 [list1 [-n_diff(list1) * n_sum(list2)]]\n    \ndef get_length(list1):\n    '''\n    Write a python function to return the length of a list.\n    '''\n    return len(list1)\n    \ndef get_index(list1,value):\n    '''\n    Write a python function to return the index of the given value in a list.\n    '''\n    return list1.index(value)\n    \ndef get_index_neg(list1,value):\n    '''\n    Write a python function to return the index of the given value in a list.\n    '''\n    return list1.index(neg(value))\n    \ndef is_all_zeros(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_all_ones(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 1.\n    '''\n    return all (x == 1 for x in list1)\n    \ndef is_all_zeros(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_all_ones(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 1.\n    '''\n    return all (x == 1 for x in list1)\n    \ndef is_all_ones(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 1.\n    '''\n    return all (x == 1 for x in list1)\n    \ndef is_all_zeros(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_all_ones(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 1.\n    '''\n    return all (x == 1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_zero(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to 0.\n    '''\n    return all (x == 0 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list are equal to -1.\n    '''\n    return all (x == -1 for x in list1)\n    \ndef is_neg(list1):\n    '''\n    Write a python function to check if all the numbers in a list ar"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i<0:\n            neg.append(-i)\n        else:\n            pass\n    return neg\n    #-------------------------------------#\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg=[]\n    for i in range(len(list1)):\n        neg.append(list1[i]*-1)\n    return neg\n    \ndef calc_sum(list1):\n    '''\n    Write a python function to calculate sum of a list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        sum=sum+list1[i]\n    return sum\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    lst1 = []\n    for i in list1:\n        if i < 0:\n            lst1.append(-i)\n    return lst1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        neg.append(-list1[i])\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1_neg = []\n    for item in list1:\n        if item < 0:\n            list1_neg.append(-item)\n    return list1_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    neg_nos.append(list1[0])\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            neg_nos.append(-list1[i])\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for x in list1:\n        if x < 0:\n            neg_list.append(x)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for i in list1:\n        negative_nos.append(-i)\n    return negative_nos\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # solution\n    str1 = str1.replace('a','')\n    str1 = str1.replace('e','')\n    str1 = str1.replace('i','')\n    str1 = str1.replace('o','')\n    str1 = str1.replace('u','')\n    str1 = str1.replace('A','')\n    str1 = str1.replace('E','')\n    str1 = str1.replace('I','')\n    str1 = str1.replace('O','')\n    str1 = str1.replace('U','')\n    return str1\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[-1::-1], '')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1.isalpha():\n        if str1.islower():\n            str1 = str1.lower()\n        else:\n            str1 = str1.upper()\n        str1 = str1.replace(\" \", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\".\", \"\")\n        str1 = str1.replace(\"!\", \"\")\n        str1 = str1.replace(\"?\", \"\")\n        str1 = str1.replace(\",\", \"\")\n        str1 = str1.replace(\".\", \"\")\n        str1 = str1.replace(\"!\", \"\")\n        str1 = str1.replace(\"?\", \"\")\n        str1 = str1.replace(\":\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\".\", \"\")\n        str1 = str1.replace(\"!\", \"\")\n        str1 = str1.replace(\"?\", \"\")\n        str1 = str1.replace(\"'\", \"\")\n        str1 = str1.replace(\"*\", \"\")\n        str1 = str1.replace(\"!\", \"\")\n        str1 = str1.replace(\"?\", \"\")\n        str1 = str1.replace(\"*\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\".\", \"\")\n        str1 = str1.replace(\"!\", \"\")\n        str1 = str1.replace(\"!\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str1 = str1.replace(\"-\", \"\")\n        str"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    counter = 0\n    n = len(str1)\n    for i in range(0, n):\n        if str1[i % 2] == 'o':\n            counter += 1\n    print(counter)\n    if counter % 2 == 1:\n        str1 = str1.replace('o', 'i')\n        print(str1)\n        return str1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == '':\n        return str1\n    else:\n        r = str1[0:1]\n        i = 1\n        while i < len(str1):\n            if str1[i] % 2!= 0:\n                r += str1[i]\n                i += 1\n            else:\n                str1 = str1[0:i] + str1[i + 1:]\n                i = 1\n                break\n        return r\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #variables\n    start_ind = 0\n    end_ind = 0\n    #loop\n    for ind in range(len(str1)):\n        if (str1[ind] % 2!= 0):\n            #update ind\n            end_ind = ind\n        else:\n            #update ind\n            start_ind = ind\n    #print(str1[start_ind:end_ind+1])\n    #print(str1[start_ind:end_ind+1])\n    #print(str1[start_ind:end_ind+1])\n    str1 = str1[start_ind:end_ind+1]\n    return(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    l = list(str1)\n    l.pop(0)\n    l = list(str1)\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l[i] = 'O'\n    str2 = \"\".join(l)\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list_of_chars = []\n    if len(str1) % 2!= 0:\n        for i in range(len(str1)-1, -1, -1):\n            list_of_chars.append(str1[i])\n    else:\n        for i in range(len(str1)-1, -1, -1):\n            list_of_chars.append(str1[i])\n        \n    for i in list_of_chars:\n        if i == 'O':\n            list_of_chars.remove(i)\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str1[i] if i%2 else str1[i-1] for i in range(1, len(str1))])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    temp = list()\n    i = 0\n    while i < len(str1):\n        if int(str1[i])%2!= 0:\n            temp.append(str1[i])\n        i += 1\n    return ''.join(temp)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    t_tuple_count = {}\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    s = set()\n    for test in test_list:\n        for tup in test:\n            s.add(tup)\n    return len(s)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    b = []\n    c = []\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    count = 0\n    temp = []\n    for i in range(len(test_list)):\n        temp.append(test_list[i][0])\n        temp.append(test_list[i][1])\n        if temp[0] == temp[1]:\n            count += 1\n            temp = []\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code here\n    count = 0\n    for i in test_list:\n        count += 1\n        count += 1\n        count += 1\n        count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list.sort(key = lambda tup: tup[1])\n    count = 0\n    for tup in test_list:\n        if tup[1] < tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for tuple in test_list:\n        total = total + len(tuple)\n    return total\n    \n    "
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list\n    test_list = test_list + test_list"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for t in test_list:\n        if t[1] == t[2]:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10 + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # TODO: Write your solution here\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    M = L[0]\n    N = L[1]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\ndef add_digits(n):\n    '''\n    Write a function that takes a positive integer and returns its digits.\n    '''\n    if type(n) == type(''):\n        return n\n    else:\n        return [int(i) for i in str(n)]\ndef rearrange(S):\n    '''\n    Write a function that takes a string and returns a new string.\n    '''\n    if S == \"\":\n        return \" \"\n    if type(S)!= type(\"\"):\n        return \" \" + rearrange(S)\n    else:\n        if S[0] == \" \":\n            return rearrange(S[1:])\n        else:\n            return \" \" + rearrange(S)\ndef num_to_word(n):\n    '''\n    Write a function that takes a positive integer as input and returns its word.\n    '''\n    if type(n) == type(''):\n        return n\n    else:\n        return str(n)\ndef num_to_word(n):\n    '''\n    Write a function that takes a positive integer as input and returns its word.\n    '''\n    if type(n) == type(''):\n        return n\n    else:\n        return str(n)\ndef word_to_num(S):\n    '''\n    Write a function that takes a string as input and returns its number.\n    '''\n    if type(S) == type(''):\n        return S\n    else:\n        return int(S)\ndef num_to_word(n):\n    '''\n    Write a function that takes a positive integer as input and returns its word.\n    '''\n    if type(n) == type(''):\n        return n\n    else:\n        return str(n)\ndef word_to_num(S):\n    '''\n    Write a function that takes a string as input and returns its number.\n    '''\n    if type(S) == type(''):\n        return S\n    else:\n        return int(S)\ndef main():\n    '''\n    Write a function that takes an integer as an input and returns its base 10 integer.\n    '''\n    n = int(input())\n    return str(bin(n)[2:])\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for item in L:\n        print(item, end=\" \")\n    print(\"\")\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # create a new list of integers\n    s = []\n    # iterate through each item in the list\n    for i in L:\n        # if a value is not a list, add the item to the new list\n        if type(i) is not list:\n            s.append(i)\n        else:\n            # if the value is a list, iterate through the list and add each item\n            # to a new list\n            for j in i:\n                s.append(j)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 0\n    new_list = []\n    while i < len(L):\n        new_list.append(L[i])\n        i += 1\n    return new_list\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    num_toks = len(text.split())\n    \n    first_adverb_index = None\n    first_adverb_position = None\n    for i in range(0,num_toks):\n        if text[i].lower() in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n            if first_adverb_index == None:\n                first_adverb_index = i\n                first_adverb_position = i\n            else:\n                if text[i].lower() == \"e\":\n                    first_adverb_index +=1\n                else:\n                    first_adverb_index +=1\n                    first_adverb_position = i\n                    break\n    return [first_adverb_index,first_adverb_position]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p=re.compile(r'\\b[A-Z]\\w{1,2}\\b')\n    m=re.search(p,text)\n    adverbs=m.group()\n    if adverbs=='a':\n        adverb_list=re.findall(r'\\b[A-Z]\\w{1,2}\\b',text)\n        print(adverb_list)\n        print('Length of the adverbs is ',len(adverb_list))\n        for adverb in adverb_list:\n            positions=[(pos,word) for pos,word in enumerate(adverb_list) if word == adverb]\n            print(positions)\n            print('First adverb position is',positions[0][0])\n    else:\n        print('There are no adverbs in the sentence. Please try again')\n        return None\n    return adverbs,positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = {'copyright':0,'copyright-prime':0,'copyright-prime-alt':0,'duplicate':0, 'duplicate-prime':0,'duplicate-prime-alt':0,'single':0,'single-prime':0,'single-prime-alt':0,'twice':0, 'twice-prime':0,'twice-prime-alt':0}\n    adverb_positions = []\n    for i in range(len(text)-1):\n        if text[i] == '{':\n            adverb = text[i+1]\n            adverb_positions.append(i)\n            continue\n        adverbs[adverb] += 1\n    for key in adverbs:\n        if adverbs[key] > 0:\n            for i in range(adverbs[key]):\n                adverb_positions.append(adverbs[key])\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            adverb_positions.append([i,i+1])\n    adverb_positions = sorted(adverb_positions, key=lambda x: x[0])\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_regex = re.compile(r\"(\\b\\w+\\b)(?=\\w*)((?:\\b[a-z]\\w*)\\b)(\\d*)\")\n    adverb_match = adverb_regex.search(text)\n    if adverb_match:\n        adverb_positions = adverb_match.group(1).split(',')\n        adverb_position = [int(pos) - 1 for pos in adverb_positions]\n        return adverb_position\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #print(text)\n    #print(text.find('will'))\n    text = text.replace('will', 'will')\n    text = text.replace('will', 'will')\n    text = text.replace('will', 'will')\n    #print(text)\n    res = re.findall(r'\\b((adverb|adverb_part|adverb_noun|adverb_verb|adverb_noun_verb|conjunction|conjunction_part|conjunction_noun|noun|noun_verb|noun_noun_verb|preposition|preposition_part|preposition_noun|preposition_verb|pronoun|pronoun_part|pronoun_noun|pronoun_verb|pronoun_noun_verb|verb|verb_part|verb_noun|verb_verb|wh-verb|wh-noun)\\b', text, flags=re.UNICODE)\n    #print(res)\n    return res\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text\n    sentence_copy = sentence[:]\n    adverbs = [\"a\", \"an\", \"the\", \"for\", \"this\", \"of\", \"anf\", \"anf\", \"anf\"]\n    adverb_positions = []\n    adverb_positions = adverbs.copy()\n    #find all the adverbs in the sentence\n    for i in range(len(adverbs)):\n        if adverbs[i] in sentence:\n            #find the start and end positions of the adverb\n            start = text.find(adverbs[i])\n            end = len(text)-1\n            if start > -1:\n                start_position = start\n                end_position = end-1\n                #add the start and end positions to the list\n                adverb_positions.append((start_position,end_position))\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #pattern = r'[a-z]*\\u0307\\b'\n    pattern = r'[a-z]*\\u0307'\n    #matches = re.finditer(pattern, text, re.MULTILINE)\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        print(match.span())\n        print(match.group())\n        #print(match.group())\n    '''\n    Test case\n    >>> for match in re.finditer(r'(a|b|c)\\u0307', 'aaabbbbccccc', re.MULTILINE):\n    ...     print(match.start())\n    ...     print(match.group())\n    ... \n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    3\n    '''\ndef find_vowels(text):\n    '''\n    Write a function to find the first vowel and its positions in a given sentence.\n    '''\n    #pattern = r'[aeiou]{1}'\n    pattern = r'[aeiou]'\n    #matches = re.finditer(pattern, text, re.MULTILINE)\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        print(match.span())\n        print(match.group())\n        #print(match.group())\n    '''\n    Test case\n    >>> for match in re.finditer(r'(aeiou)', 'aaabbbbccccc', re.MULTILINE):\n    ...     print(match.start())\n    ...     print(match.group())\n    ... \n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    5\n    '''\ndef find_consonants(text):\n    '''\n    Write a function to find the first consonant and its positions in a given sentence.\n    '''\n    #pattern = r'[a-z]{1,2}'\n    pattern = r'[A-Z]'\n    #matches = re.finditer(pattern, text, re.MULTILINE)\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        print(match.span())\n        print(match.group())\n        #print(match.group())\n    '''\n    Test case\n    >>> for match in re.finditer(r'(A|B|C)', 'aaabbbbccccc', re.MULTILINE):\n    ...     print(match.start())\n    ...     print(match.group())\n    ... \n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    '''\ndef find_proper_noun(text):\n    '''\n    Write a function to find the first proper noun and its positions in a given sentence.\n    '''\n    #pattern = r'[A-Z]{2,3}'\n    pattern = r'[A-Z]{2,3}'\n    #matches = re.finditer(pattern, text, re.MULTILINE)\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        print(match.span())\n        print(match.group())\n        #print(match.group())\n    '''\n    Test case\n    >>> for match in re.finditer(r'(A|B|C)', 'aaabbbbccccc', re.MULTILINE):\n    ...     print(match.start())\n    ...     print(match.group())\n    ... \n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    '''\ndef find_perfect_noun(text):\n    '''\n    Write a function to find the first perfect noun and its positions in a given sentence.\n    '''\n    #pattern = r'[A-Z]{2,3}'\n    pattern = r'[A-Z]{2,3}'\n    #matches = re.finditer(pattern, text, re.MULTILINE)\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        print(match.span())\n        print(match.group())\n        #print(match.group())\n    '''\n    Test case\n    >>> for match in re.finditer(r'(A|B|C)', 'aaabbbbccccc', re.MULTILINE):\n    ...     print(match.start())\n    ...     print(match.group())\n    ... \n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    '''\ndef find_animal_name(text):\n    '''\n    Write a function to find the first animal name and its positions in a given sentence.\n    '''\n    #pattern = r'[A-Z]{1}[a-z]{1,2}'\n    pattern = r'[A-Z]{1}[a-z]'\n    #matches = re.finditer(pattern, text, re.MULTILINE)\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        print(match.span())\n        print(match.group())\n        #print(match.group())\n    '''\n    Test case\n    >>> for match in re.finditer(r'(A|B|C)', 'aaabbbbccccc', re.MULTILINE):\n    ...     print(match.start())\n    ...     print(match.group())\n    ... \n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    '''\ndef find_noun_on_sentence(text):\n    '''\n    Write a function to find the first noun and its positions in a given sentence.\n    '''\n    #pattern = r'[A-Z]{2,3}'\n    pattern = r'[A-Z]{2,3}'\n    #matches = re.finditer(pattern, text, re.MULTILINE)\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        print(match.span())\n        print(match.group())\n        #print(match.group())\n    '''\n    Test case\n    >>> for match in re.finditer(r'(A|B|C)', 'aaabbbbccccc', re.MULTILINE):\n    ...     print(match.start())\n    ...     print(match.group())\n    ... \n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    token_match = re.search(r'^(.*)VB$', text)\n    if token_match:\n        return token_match\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match_ads = []\n    for i in range(len(text)):\n        if text[i].isupper():\n            match_ads.append(i)\n    match_ads.reverse()\n    return match_ads\ndef remove_previous(text):\n    '''\n    Remove the previous sentence.\n    '''\n    text = text.replace(\"  \", \" \")\n    text = text.replace(\"  \", \" \")\n    text = text.replace(\"  \", \" \")\n    return text\ndef is_short_word(word):\n    '''\n    Check if a word is a short word.\n    '''\n    if len(word) <= 2:\n        return True\n    else:\n        return False\ndef is_digit(word):\n    '''\n    Check if a word is a digit.\n    '''\n    if any(x.isdigit() for x in word):\n        return True\n    else:\n        return False\ndef is_punctuation(word):\n    '''\n    Check if a word is a punctuation.\n    '''\n    if any(x in string.punctuation for x in word):\n        return True\n    else:\n        return False\ndef is_am_it_something(word):\n    '''\n    Check if a word is something am i.e. am i something.\n    '''\n    if any(x in word for x in [\"am\", \"was\", \"were\", \"is\", \"are\", \"am i\", \"am i am\"]):\n        return True\n    else:\n        return False\ndef get_longest_word(words):\n    '''\n    Return the longest word.\n    '''\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\ndef is_filler(word):\n    '''\n    Return True if the word is not a filler.\n    '''\n    if any(x in word for x in [\"is\", \"am\", \"isam\", \"are\", \"amis\", \"aream\"]):\n        return True\n    else:\n        return False\ndef is_longest_word(word):\n    '''\n    Return True if the word is the longest word.\n    '''\n    if len(word) > len(get_longest_word(word)):\n        return True\n    else:\n        return False\ndef is_adjacent(word):\n    '''\n    Return True if the word is adjacent.\n    '''\n    if len(word) > 2:\n        if all(x in word for x in [\"is\", \"am\", \"isam\"]):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_present_after(word):\n    '''\n    Return True if the word is present after a word.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_previous(word):\n    '''\n    Return True if the word is previous.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_prev_of(word):\n    '''\n    Return True if the word is the previous of another word.\n    '''\n    if word[0].isupper() and word[1].isupper():\n        if word[1] == word[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_more_specific(word):\n    '''\n    Return True if the word is more specific.\n    '''\n    if is_previous(word):\n        return False\n    else:\n        if is_adjacent(word):\n            return True\n        else:\n            if is_longest_word(word):\n                return True\n            else:\n                return False\ndef is_precedence(word):\n    '''\n    Return True if the word is a precedence.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_kathy(word):\n    '''\n    Return True if the word is a kathy.\n    '''\n    if word.isupper():\n        return True\n    else:\n        return False\ndef is_noun_a_head(word):\n    '''\n    Return True if the word is a noun a head.\n    '''\n    if any(x in word for x in [\"is\", \"am\", \"isam\", \"are\", \"amis\", \"aream\"]):\n        return True\n    else:\n        return False\ndef is_post_adverb(word):\n    '''\n    Return True if the word is a post adverb.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_post_adj_to(word):\n    '''\n    Return True if the word is a post adj to another word.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_noun_a_tail(word):\n    '''\n    Return True if the word is a noun a tail.\n    '''\n    if word.isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to(word):\n    '''\n    Return True if the word is a precedent to another word.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to_post(word):\n    '''\n    Return True if the word is a precedent to another word.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to_noun_a_head(word):\n    '''\n    Return True if the word is a precedent to a noun a head.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to_noun_a_tail(word):\n    '''\n    Return True if the word is a precedent to a noun a tail.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to_noun_a_sub(word):\n    '''\n    Return True if the word is a precedent to a noun a sub.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to_noun_a_sub_post(word):\n    '''\n    Return True if the word is a precedent to a noun a sub.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to_noun_a_sub_noun(word):\n    '''\n    Return True if the word is a precedent to a noun a sub.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_precedent_to_noun_a_tail_post(word):\n    '''\n    Return True if the word is a precedent to a noun a tail.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_post_adj_to_post(word):\n    '''\n    Return True if the word is a post adj to another word.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_post_adj_to_noun_a_tail_post(word):\n    '''\n    Return True if the word is a post adj to a noun a tail.\n    '''\n    if word[-1].isupper():\n        return True\n    else:\n        return False\ndef is_post_adj_to_noun_a_sub(word):\n    '''\n    Return True if the word is a post adj to a noun a sub.\n    '''\n    if word[0].isupper():\n        return True\n    else:\n        return False\ndef is_post_adj_to_noun_a_sub"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = float(l)\n    area = 0.5 * l * l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # TODO: Your code here!\n    return 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for a in l:\n        area = area + a * a\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side = l**2\n    result = (3/4)*side\n    return result\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = int(l) # Validate user input\n    \n    if l < 1:\n        print(\"Error: input must be a positive integer.\")\n        return -1\n    elif l > 500:\n        print(\"Error: input must be less than 500.\")\n        return -1\n    \n    if type(l)!= int:\n        print(\"Error: input must be an integer.\")\n        return -1\n    \n    return l**3\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l**2\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in l:\n        s += i\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S = 0\n    for r in l:\n        S += r**3\n    return S\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if l[i][j][k]!= 0:\n                    area += l[i][j][k]*l[i][j][k]\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea=0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if (i+j+k)%2==0:\n                    surfacearea+=1\n    return surfacearea\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total = total + nums[i]\n        if nums[i] > 0:\n            total = total / nums[i]\n    return total\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum=0\n    for i in nums:\n        if i>0:\n            sum+=1\n    print(sum)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_sum = 0\n    for i in nums:\n        if i > 0:\n            pos_sum = pos_sum + 1\n    return pos_sum/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i][j] + dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - nums[i - 1]]\n    return dp[-1][-1]\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    pos_cnt = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_cnt += 1\n            \n    return pos_cnt\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    p = 0\n    for i in range(n):\n        if nums[i] < 0:\n            p += 1\n    return p/n\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # The array should be sorted.\n    nums.sort()\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    # cmp function\n    def cmp(a,b):\n        if a<b:\n            return -1\n        else:\n            return 0\n            \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n        \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n        \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n        \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n        \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        ans.append(ratio(nums[i],0))\n    return ans\n    \n    \n    # define a function to compute the ration\n    def ratio(a,b):\n        return float(a*b)/len(nums)\n    \n    # find the ration\n    ans = []\n    for i in range(len(nums)):\n        an"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += num\n    return total/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in list1: \n        if i < 0: \n            return i\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0:\n            max_neg = i\n    return max_neg\n        \ndef find_index(list1, num):\n    '''\n    Write a python function to return the index of the given element in the given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == num:\n            return i\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == []: \n        return 0\n    else: \n        i = 0\n        num = list1[0] \n        while(i < len(list1)): \n            if(num < list1[i]): \n                num = list1[i] \n            i = i + 1\n        return num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0: \n        return -1\n    elif list1[0] < list1[1]: \n        return list1[0] \n    else: \n        return list1[1] \n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = 0\n    for i in range(len(list1)-1,-1,-1):\n        if(list1[i] < 0):\n            list1[i] = -list1[i]\n            if(list1[i] > largest_negative):\n                largest_negative = list1[i]\n    return largest_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)-1): \n        if list1[i] < 0: \n            largest = list1[i] \n            break \n    return largest \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    if list1[0] < 0:\n        return list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            return list1[0]\n        \n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # List of integers\n    numbers = list(range(-100,101))\n    # Loop through the numbers\n    for number in numbers:\n        # If the negative number is greater than the largest negative number\n        # set the negative number to the largest negative number\n        if number < 0 and number > -100:\n            list1[number] = -100\n        else:\n            pass\n    # Return the list\n    return list1\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = []\n    for num in list1:\n        if num < 0:\n            max_neg.append(num)\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) == 1:\n            test_list[i] = (test_list[i][0],)\n        else:\n            test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)-K):\n        test_list[i] = (test_list[i][0], test_list[i][1], test_list[i][2])\n    return test_list\n    \ndef split_tuple(test_tuple, K):\n    '''\n    Write a function that will split the given tuple into K tuples\n    '''\n    test_list = []\n    for i in range(K):\n        t = test_tuple[i]\n        if type(t) is not tuple:\n            test_list.append(t)\n        else:\n            test_list.extend(t)\n    return test_list\n    \ndef triplet_squares(test_tuple, K):\n    '''\n    Write a function that will calculate the triplet squares\n    '''\n    test_list = split_tuple(test_tuple, K)\n    sq_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                sq_list.append((test_list[i][0] + test_list[j][0] + test_list[k][0], \n                                  test_list[i][1] + test_list[j][1] + test_list[k][1],\n                                  test_list[i][2] + test_list[j][2] + test_list[k][2]))\n    return sq_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # Dividing the list by k in the range of 1-K\n    divisor = K\n    l = list()\n    for i in test_list:\n        if divisor in i:\n            l.append(i[i.index(divisor):])\n        divisor -= 1\n    \n    # Ranging the list and return a new list\n    return l\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for t in test_list:\n        new_tuple = []\n        for i in range(K):\n            new_tuple.append(t[i])\n        new_list.append(new_tuple)\n    return new_list\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        if i < K:\n            final_list.append(test_list[i])\n        else:\n            break\n    return final_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Make a new list that contains only the kth elements from the original list\n    # (the tuple itself is kept)\n    new_list = [t[:K] for t in test_list]\n    # Make a copy of the original list\n    original_list = test_list.copy()\n    \n    # Move the kth elements of the original list to the front\n    for i in range(len(original_list)):\n        original_list[i] = original_list[i][:K]\n    # Return the trimmed list\n    return original_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple = []\n    for test in test_list:\n        if len(test) == K:\n            trimmed_tuple.append(test)\n        else:\n            print('\\nFailed to trim test list. Cannot trim. List: {}, Length: {}\\n'.format(test,len(test)))\n            return -1\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list = test_list[0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #if the list is empty\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your code here\n    index_sum=0\n    for i in range(len(test_tup1)):\n        index_sum+=test_tup1[i]*test_tup2[i]\n    return index_sum\ntest_tuple1=tuple([1,2,3,4,5])\ntest_tuple2=tuple([1,3,5,7,9])\nprint(index_multiplication(test_tuple1, test_tuple2)"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_tup1 = 0\n    index_multiplication_tup2 = 0\n    list_1 = []\n    list_2 = []\n    if len(test_tup1)!= len(test_tup2):\n        return \"Enter two tuples of unequal length\"\n    for i in range(len(test_tup1)):\n        list_1.append(test_tup1[i])\n        list_2.append(test_tup2[i])\n    for i in range(len(list_1)):\n        index_multiplication_tup1 += list_1[i]*list_2[i]\n        print(index_multiplication_tup1)\n    return index_multiplication_tup1\ntest_tup1 = (\"p\", \"y\", \"a\", \"r\", \"p\", \"r\", \"e\", \"a\", \"a\")\ntest_tup2 = (\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\")\nindex_multiplication(test_tup1, test_tup2)"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #Fill in here\n    \n    return\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuple size is not equal'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef index_div_rem(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_index_div_rem(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef index_div_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_index_div_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef index_and_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_index_and_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_mult(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_element_wise_mult(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_div(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_element_wise_div(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_div_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_div_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_element_wise_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_div_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_div_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_mod_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_mod_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_rem_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_rem_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_rem_first_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_rem_first_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(tes"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if all elements are int or float \n    for x in test_tup1:\n        if type(x) is int or type(x) is float:\n            pass\n        else:\n            print(\"Not all elements are int or float.\")\n            return -1\n    for y in test_tup2:\n        if type(y) is int or type(y) is float:\n            pass\n        else:\n            print(\"Not all elements are int or float.\")\n            return -1\n    # Calculate product of all elements in both tuples \n    res = 0\n    for i in range(len(test_tup1)):\n        res = res + test_tup1[i] * test_tup2[i]\n    return res \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res_tuple = []\n    for i in range(len(test_tup1)):\n        res_tuple.append(test_tup1[i] * test_tup2[i])\n    return res_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Take first item as tuple and second item as tuple.\n    first_tup = test_tup1\n    second_tup = test_tup2\n    print(f\"Multiplied Indexes: \\n First Tuple: {first_tup}\\n Second Tuple: {second_tup}\\n\")\n    \n    # Create new tuple with all the values multiplied.\n    new_tuple = tuple([first_tup[index] * second_tup[index] for index in range(len(first_tup))])\n    print(f\"New Tuple: {new_tuple}\\n\")\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        if len(test_tup1) == 1 and len(test_tup2) == 1:\n            return test_tup1[0] * test_tup2[0]\n        elif len(test_tup1) == 1 and len(test_tup2) > 1:\n            return test_tup1[0] * test_tup2[1:len(test_tup2)]\n        else:\n            return test_tup1[0] * test_tup2[1:]\n    else:\n        return 'Invalid operation'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x: (x[0]*x[1]), zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(set(lst).intersection(*tup))"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if tup is None:\n        return None\n    else:\n        if len(tup) == 0:\n            return 0\n        else:\n            cnt = 0\n            for e in tup:\n                cnt += lst.count(e)\n            return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).most_common(tup[1])\n    \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([x for x in lst if x in tup]) \n    # return sum([x for x in lst if x in tup])\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = [item for item in lst if item!= None] \n    occ = 0\n    for i in tup: \n        if i in lst: \n            occ += 1\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i in lst: \n            count += 1\n    return count\n    \ndef count_Occurrence_2(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if i in tup: \n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c=0\n    for i in tup: \n        c+=lst.count(i) \n    return c\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d=Counter(lst) \n    lst1=d.keys() \n    tup1=tuple(lst1) \n    for i in tup: \n        lst.remove(i) \n    tup=tuple(lst) \n    d=Counter(tup) \n    lst1=d.keys() \n    tup1=tuple(lst1) \n    return (d.most_common(1))\n    \ndef create_Tuple(tup):\n    '''\n    Write a python function to create a tuple from a list.\n    '''\n    return tuple(tup) \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst)\n    for elem in tup:\n        if elem in res:\n            res[elem]+=1\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = Counter(tup)\n    occur = occur.most_common()\n    count = 0\n    for i in range(len(occur)):\n        count += occur[i][1]\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for n in nums:\n        cubes.append(n**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [1 for i in range(len(nums))]\n    for i in range(len(nums)):\n        cubes[i] = cubes[i]**3\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return nums*nums*nums*nums\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        cube = num**3\n        if cube == num**3:\n            print(cube)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num*num*num)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    nums_cube = []\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        num *= num\n    return num\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n*n*n)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    while n>0:\n        s = s + n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return None\n    return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n%10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(1, n+1): \n        s += i \n    return s \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n + 1)) \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i\n    return total\ndef isprime(n): \n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    for i in range(2, n):  \n        if n % i == 0: \n            return False\n    return True\nprime = [] \nflag = 0\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(result)==l:\n            return ''.join(result)\n        elif i==len(str)-1:\n            result.append(str[i])\n        else:\n            result.append(str[i])\n            result.append(str[i+1])\n    return ''.join(result)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return ''\n    l.sort()\n    res = []\n    for i in l:\n        if len(i) >= l[0] and i not in res:\n            res.append(i)\n    return ''.join(res)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return \"\"\n    if len(str) == 1:\n        return str[0]\n    if len(str) == 2:\n        return str[0] + extract_string(str[1], l)\n    if len(str) == 3:\n        return str[0] + extract_string(str[1] + extract_string(str[2], l), l)\n    return str[0] + extract_string(str[1] + extract_string(str[2] + extract_string(str[3], l), l), l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    p = l.index(str)\n    return l[:p]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    index = 0\n    while index < len(str):\n        result.append(str[index:index+l])\n        index += l\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    if len(str) <= l:\n        new_list = str\n    else:\n        i = 0\n        while(i < len(str)):\n            if str[i] == '\"' or str[i] == ')':\n                if str[i] == '\"':\n                    if str[i + 1] == '\"':\n                        new_list.append(' ')\n                        new_list.append(str[i + 2:i + 4])\n                        i += 3\n                    else:\n                        new_list.append('(')\n                        new_list.append(str[i + 1:i + 2])\n                        i += 1\n                elif str[i] == ')' or str[i] == '(':\n                    if str[i + 1] == ')':\n                        new_list.append(' ')\n                        new_list.append(str[i + 2:i + 4])\n                        i += 3\n                    else:\n                        new_list.append(')')\n                        new_list.append(str[i + 1:i + 2])\n                        i += 1\n            else:\n                new_list.append(str[i])\n            i += 1\n    return new_list\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    mystr = \"\"\n    for s in str:\n        mystr += s\n    return mystr[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = len(str) - 1\n    while start < end:\n        while start < end and str[start] == str[end]:\n            end -= 1\n        if start < end:\n            str = str[start] + str\n        start += 1\n        end -= 1\n    return st"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l:len(str)-l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    i = 0\n    \n    while i < len(str):\n        print(str[i:i+l])\n        i+=l\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('[^A-Za-z0-9]+','', text1)\n    text3 = re.sub('( )','', text2)\n    text4 = re.sub('\\n','', text3)\n    text5 = re.sub('\\t','', text4)\n    text6 = re.sub('( )','', text5)\n    return text6\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \" \", text1).strip().lower()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # print(text1)\n    text2=text1.replace(\" \", \"\").replace(\"\\n\",\"\")\n    # print(text2)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = text1.replace('  ','').replace('\\t','').replace('\\n','')\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(' +','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace('\\n','')\n    text = re.sub(' +','', text)\n    text = re.sub('\\n','', text)\n    text = re.sub(' +','', text)\n    return text\ndef remove_emoji(text):\n    '''\n    Write a function to remove all emoji from the given text.\n    '''\n    text = text.replace('\\u200b', '')\n    return text\ndef remove_tweets(text):\n    '''\n    Write a function to remove all tweets from the given text.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef remove_urls(text):\n    '''\n    Write a function to remove all URLs from the given text.\n    '''\n    text = text.replace('https://', '')\n    text = text.replace('http://', '')\n    return text\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from the given text.\n    '''\n    text = text.replace(' ', '')\n    return text\ndef remove_brackets(text):\n    '''\n    Write a function to remove all brackets from the given text.\n    '''\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from the given text.\n    '''\n    text = text.replace('.', '')\n    text = text.replace('?', '')\n    text = text.replace('!', '')\n    text = text.replace('\"', '')\n    text = text.replace('\\n', '')\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove all stop words from the given text.\n    '''\n    text = text.replace('-', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('.', '')\n    text = text.replace('?', '')\n    text = text.replace('!', '')\n    text = text.replace('\"', '')\n    text = text.replace('\\n', '')\n    return text\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from the given text.\n    '''\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    return text\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from the given text.\n    '''\n    text = text.replace('.', '')\n    text = text.replace('?', '')\n    text = text.replace('!', '')\n    text = text.replace('\"', '')\n    text = text.replace('\\n', '')\n    text = text.replace('\\'', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace(' ', '')\n    return text\ndef remove_stopwords_and_emojis(text):\n    '''\n    Write a function to remove all stop words and emojis from the given text.\n    '''\n    text = remove_stopwords(text)\n    text = remove_emoji(text)\n    text = remove_tweets(text)\n    text = remove_urls(text)\n    text = remove_spaces(text)\n    text = remove_punctuation(text)\n    text = remove_brackets(text)\n    text = remove_numbers(text)\n    text = remove_special_characters(text)\n    return text\ndef remove_word_list(text):\n    '''\n    Write a function to remove all words in the given list from the given text.\n    '''\n    text = remove_stopwords_and_emojis(text)\n    return text\ndef remove_text_without_emoji(text):\n    '''\n    Write a function to remove all characters that have not been used as an emoji.\n    '''\n    text = remove_word_list(text)\n    text = remove_special_characters(text)\n    return text\ndef remove_text_without_tweets(text):\n    '''\n    Write a function to remove all words from the given text excluding all words which are not words of the given text.\n    '''\n    text = remove_word_list(text)\n    return remove_tweets(text)\ndef remove_emoji_and_tweets(text):\n    '''\n    Write a function to remove all emojis from the given text excluding all emojis which are not emojis of the given text.\n    '''\n    text = remove_emoji(text)\n    return remove_tweets(text)\ndef remove_emoji_and_tweets_without_emoji(text):\n    '''\n    Write a function to remove all emojis from the given text excluding all emojis which are not emojis of the given text.\n    '''\n    text = remove_emoji(text)\n    return remove_tweets_without_emoji(text)\ndef remove_text_without_urls(text):\n    '''\n    Write a function to remove all characters that have not been used as URLs.\n    '''\n    text = remove_word_list(text)\n    return remove_urls(text)\ndef remove_text_without_tweets_without_urls(text):\n    '''\n    Write a function to remove all characters from the given text excluding all characters which are not urls of the given text.\n    '''\n    text = remove_text_without_urls(text)\n    return remove_tweets_without_urls(text)\ndef remove_text_without_punctuation(text):\n    '''\n    Write a function to remove all punctuation from the given text.\n    '''\n    text = remove_special_characters(text)\n    return remove_punctuation(text)\ndef remove_text_without_stopwords(text):\n    '''\n    Write a function to remove all stopwords from the given text.\n    '''\n    text = remove_stopwords(text)\n    return remove_special_characters(text)\ndef remove_text_without_stopwords_without_emoji(text):\n    '''\n    Write a function to remove all stopwords and emojis from the given text.\n    '''\n    text = remove_stopwords_without_emoji(text)\n    return remove_special_characters(text)\ndef remove_text_without_stopwords_without_tweets(text):\n    '''\n    Write a function to remove all stopwords and emojis from the given text excluding all stopwords and emojis which are not stopwords and emojis of the given text.\n    '''\n    text = remove_stopwords_without_tweets(text)\n    return remove_special_characters(text)\ndef remove_text_without_stopwords_without_tweets_without_emoji(text):\n    '''\n    Write a function to remove all stopwords and emojis from the given text excluding all stopwords and emojis which are not stopwords and emojis of the given text.\n    '''\n    text = remove_stopwords_without_tweets_without_emoji(text)\n    return remove_special_characters(text)\ndef remove_text_without_stopwords_and_emojis(text):\n    '''\n    Write a function to remove all stopwords and emojis from the given text excluding all stopwords and emojis which are not stopwords and emojis of the given text.\n    '''\n    text = remove_stopwords_and_emojis(text)\n    return remove_special_characters(text)\ndef remove_text_without_stopwords_and_emojis_without_tweets(text):\n    '''\n    Write a function to remove all stopwords and emojis from the given text excluding all stopwords and emojis which are not stopwords and emojis of the given text.\n    '''\n    text = remove_stopwords_and_emojis_without_tweets(text)\n    return remove_special_characters(text"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    text1 = re.sub(r'\\s+', \" \", text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''\n    for i in text1:\n        if i!='':\n            text += i\n        else:\n            text += ''\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    text = remove_numbers(text)\n    text = remove_symbols(text)\n    text = remove_removed_punctuation(text)\n    return text\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    pattern = re.compile(\"[0-9]+\")\n    text = pattern.sub(\"\", text)\n    return text\ndef remove_symbols(text):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    pattern = re.compile(\"[!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]\")\n    text = pattern.sub(\"\", text)\n    return text\ndef remove_removed_punctuation(text):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    pattern = re.compile(\"[!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]\")\n    text = pattern.sub(\"\", text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''\n    for word in text1.split():\n        if word!= '\\n':\n            text += word.strip() +''\n    return text\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0:\n        return sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    n = int(n)\n    sum = 0\n    while i * i <= n:\n        if n % i == 0 :\n            sum += i\n            if i * i!= n:\n                sum += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n%2 == 0: \n        return 2\n    else : \n        return (sumofFactors(n//2)) \ndef isEven(num) : \n    '''\n    Write a python function to check if a number is even.\n    '''\n    if num == 0: \n        return False\n    if num == 1: \n        return True\n    if num%2 == 0: \n        return False\n    else: \n        return True\ndef isOdd(num) : \n    '''\n    Write a python function to check if a number is odd.\n    '''\n    if num == 0: \n        return False\n    if num == 1: \n        return True\n    if num%2 == 1: \n        return False\n    else: \n        return True\ndef findFactors(num) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    if isOdd(num) : \n        return [num] + findFactors(num//2)\n    if isEven(num) : \n        return [num] + findFactors(num-1)\ndef isPerfect(num) : \n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    if isEven(num) == True: \n        return False\n    if num % 2 == 0 : \n        return True\n    else: \n        return False\ndef isPerfectSquare(num) : \n    '''\n    Write a python function to check if a number is perfect square.\n    '''\n    if num == 0 : \n        return True\n    if num % 2 == 0 : \n        return math.sqrt(num) % 1 == 0\n    else : \n        return False\ndef isPerfectSquareNumber(num) : \n    '''\n    Write a python function to check if a number is perfect square number.\n    '''\n    if isPerfectSquare(num) == True: \n        return True\n    if isPerfectSquareNumber(num//2) == True: \n        return True\n    if isPerfectSquareNumber(num*2) == True: \n        return True\n    else: \n        return False\ndef isSquareRoot(num) : \n    '''\n    Write a python function to check if a number is square root of another number.\n    '''\n    if num == 1 : \n        return False\n    if num == 0 : \n        return True\n    if num%2 == 0 : \n        return (isPerfectSquare(num))\n    else: \n        return (isPerfectSquareNumber(num//2))\ndef isPrime(num) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if num == 0 or num == 1: \n        return False\n    if num == 2 : \n        return True\n    if num%2 == 0 : \n        return (isPerfectSquare(num))\n    else: \n        return (isPerfectSquareNumber(num//2))\ndef primeFactors(num) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    if isOdd(num) : \n        return [num//2] + findFactors(num//2)\n    if isEven(num) : \n        return [num] + findFactors(num-1)\ndef isFactors(num) : \n    '''\n    Write a python function to check if a number is a factor.\n    '''\n    if isOdd(num) : \n        return False\n    if isEven(num) : \n        return True\n    if isPerfect(num) : \n        return False\ndef isFibonacci(num) : \n    '''\n    Write a python function to check if a number is a Fibonacci number.\n    '''\n    if isPerfect(num) : \n        return True\n    if isPerfect(num//2) : \n        return True\n    if isPerfect(num*3) : \n        return True\n    else: \n        return False\ndef isFibonacciNumber(num) : \n    '''\n    Write a python function to check if a number is a Fibonacci number.\n    '''\n    if isPerfect(num) : \n        return True\n    if isPerfect(num//2) : \n        return True\n    if isPerfect(num*3) : \n        return True\n    else: \n        return False\ndef isPerfectSet(num) : \n    '''\n    Write a python function to check if a number is a perfect set.\n    '''\n    if isPerfect(num) == True: \n        return True\n    if isPerfectSet(num//2) == True : \n        return True\n    if isPerfectSet(num*3) == True : \n        return True\n    else: \n        return False\ndef isPerfectSetNumber(num) : \n    '''\n    Write a python function to check if a number is a perfect set number.\n    '''\n    if isPerfectSetNumber(num//2) == True : \n        return True\n    if isPerfectSetNumber(num*3) == True : \n        return True\n    else: \n        return False\ndef sumOfSquareRootNumbers(num) : \n    '''\n    Write a python function to find the sum of squares of a natural number.\n    '''\n    if isPerfectSet(num) == True: \n        return 0\n    if isPerfectSetNumber(num//2) == True: \n        return 0\n    if isPerfectSetNumber(num*3) == True: \n        return 0\n    else: \n        return num\ndef isKthLargest(arr, k): \n    '''\n    Write a python function to find the k-th largest element in a list of integers.\n    '''\n    if k == 0 : \n        return None\n    if k == 1 : \n        return arr[0]\n    if k > len(arr) : \n        return None\n    if arr == None or k == 0 : \n        return arr[0]\n    return isKthLargest(arr[1:], k-1)\ndef numberToString(num) : \n    '''\n    Write a python function to convert a number to a string.\n    '''\n    if num == None : \n        return \"0\"\n    elif num == 0 : \n        return \"0\"\n    elif num == 1 : \n        return \"1\"\n    elif num < 10 : \n        return \"0\" + str(num)\n    else : \n        return \"0\" + str(num) + \"0\"\ndef stringToNumber(num) : \n    '''\n    Write a python function to convert a string to a number.\n    '''\n    if num == \"0\" : \n        return 0\n    elif num == \"1\" : \n        return 1\n    elif num == \"2\" : \n        return 2\n    elif num == \"3\" : \n        return 3\n    elif num == \"4\" : \n        return 4\n    elif num == \"5\" : \n        return 5\n    elif num == \"6\" : \n        return 6\n    elif num == \"7\" : \n        return 7\n    elif num == \"8\" : \n        return 8\n    elif num == \"9\" : \n        return 9\ndef isPrime(num) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if num == 1 : \n        return False\n    if num == 2 : \n        return True\n    if num%2 == 0 : \n        return False\n    else: \n        return True\ndef isPrimeNumber(num) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if num == 1 : \n        return False\n    if num == 2 : \n        return True\n    if num%2 == 0 : \n        return False\n    else: \n        return True\ndef isQuadratic(num) : \n    '''\n    Write a python function to check if a number is quadratic.\n    '''\n    if num == 1 : \n        return False\n    if num == 2 : \n        return Tru"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 1) : \n        return 1\n    for i in range(2, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            return (i * (n//i)) \n    return n\ndef isSquare(n) : \n    '''\n    Write a python function that takes a number as input and \n    returns True if it is a square number and False otherwise.\n    '''\n    if (n == 1) : \n        return True\n    sqrt_n = math.sqrt(n)\n    if (n%sqrt_n==0) : \n        return isSquare(sqrt_n)\n    return False\ndef isSum(n,s):\n    '''\n    Write a python function that takes a number n and square s \n    and returns True if it is a sum of n, s, and False otherwise.\n    '''\n    if (s == 0) : \n        return False\n    if (s < 0) : \n        return False\n    for i in range(s,0,-1) : \n        if (n % i == 0) : \n            return False\n    return True\ndef sumofSquare(n) : \n    '''\n    Write a python function to find the sum of the squares of\n    the numbers in a list.\n    '''\n    if (n == 0) : \n        return 0\n    sqrt_n = math.sqrt(n)\n    sum = 0\n    for i in range(1,int(sqrt_n + 1)) : \n        sum += i * i\n    return sum\ndef isSumSquare(n):\n    '''\n    Write a python function that takes a number n as input\n    and returns True if it is a sum of squares of n, \n    False otherwise.\n    '''\n    if (n == 0) : \n        return True\n    sqrt_n = math.sqrt(n)\n    for i in range(1,int(sqrt_n + 1)): \n        if (n % i == 0) : \n            return False\n    return True\ndef sumofPos(n,i):\n    '''\n    Write a python function that takes a number n and\n    a positive integer i and returns the sum of the \n    nth positive integers.\n    '''\n    if (n == 0) : \n        return 0\n    if (n < 0) : \n        return 0\n    if (i == 0): \n        return 1\n    if (i < 0) : \n        return 0\n    return (n * sumofPos(n-i,i-1))\ndef isSumPos(n,i):\n    '''\n    Write a python function that takes a number n and\n    a positive integer i and returns the sum of the \n    nth positive integers.\n    '''\n    if (n == 0) : \n        return True\n    if (n < 0) : \n        return False\n    if (i == 0): \n        return False\n    if (i < 0): \n        return False\n    return True\ndef isPairSum(n,s):\n    '''\n    Write a python function that takes a number n and square s \n    and returns True if it is a pair of sum of n, s, \n    False otherwise.\n    '''\n    if (s == 0) : \n        return False\n    if (s < 0) : \n        return False\n    for i in range(0,int(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            return False\n    return True\ndef pairSum(n,s):\n    '''\n    Write a python function that takes a number n and square s \n    and returns the pair sum of n, s, 0 if it is 0, or 1 otherwise.\n    '''\n    if (s == 0) : \n        return (0,0)\n    if (s < 0) : \n        return 0\n    a = math.sqrt(n)\n    b = int(a)\n    sum_a = sumofPos(n,a)\n    sum_b = sumofPos(n,b)\n    if (sum_a + sum_b <= (b * b) / 2) : \n        return pairSum(n,b)\n    return (sum_a,sum_b)\ndef sumofSquarePair(n):\n    '''\n    Write a python function that takes a number n as input\n    and returns the sum of the squares of the numbers in a list.\n    '''\n    if (n == 0) : \n        return 0\n    sqrt_n = math.sqrt(n)\n    sum = 0\n    for i in range(1,int(sqrt_n + 1)): \n        sum += (i*(i*i))\n    return sum\ndef isPairSumSquare(n):\n    '''\n    Write a python function that takes a number n as input\n    and returns the pair sum of n, s, 0 if it is 0, or 1 otherwise.\n    '''\n    if (n == 0) : \n        return True\n    if (n < 0) : \n        return False\n    a = math.sqrt(n)\n    b = int(a)\n    sum_a = sumofSquarePair(a)\n    sum_b = sumofSquarePair(b)\n    if (sum_a + sum_b <= (b * b) / 2) : \n        return isPairSum(n,b)\n    return isPairSum(n,a)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    else : \n        return n*sumofFactors(n-1) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # condition to check if the number is divisible by 2\n    if n==0:\n        return 0\n    # code to calculate sum of even factors of n\n    if n%2==0:\n        return 2+sumofFactors(n//2)\n    # code to calculate sum of even factors of n\n    else:\n        return n\n    \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    # condition to check if the number is divisible by 2\n    if n==0:\n        return False\n    # code to calculate the palindrome of the number\n    elif n<0:\n        return False\n    # code to calculate the palindrome of the number\n    elif n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1 : \n        return 1\n    if n % 2 == 0 :\n        return (sumofFactors(n//2) + 1)\n    else :\n        return (sumofFactors(3*n+1) + 1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0) : \n        return 0\n    elif (n < 0) : \n        return -sumofFactors(-n)\n    else : \n        return n * sumofFactors(-n)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n = n / 2\n    return s\ndef isPerfect(n) : \n    '''\n    Find if a number is perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2 == 1:\n            return False\n    return True\ndef isImperfect(n) : \n    '''\n    Find if a number is perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2!= 1:\n            return False\n    return True\ndef isPerfectNumber(n) : \n    '''\n    Find if a number is perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2 == 1:\n            return False\n    return True\ndef isApproxPerfectNumber(n) : \n    '''\n    Find if a number is approx perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2 == 1:\n            return False\n    return True\ndef isPerfectNumber(n) : \n    '''\n    Find if a number is perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2 == 0:\n            return False\n    return True\ndef isApproxPerfectNumber(n) : \n    '''\n    Find if a number is approx perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2 == 0:\n            return False\n    return True\ndef isPerfect(n) : \n    '''\n    Find if a number is perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2 == 1:\n            return False\n    return True\ndef isApproxPerfect(n) : \n    '''\n    Find if a number is approx perfect or not.\n    '''\n    s = sumofFactors(n)\n    for k in range(s):\n        if n % 2 == 0:\n            return False\n    return True\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while b!= 0 :\n        if a % b == 0 :\n            return b\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while b!= 0 :\n        if a % b == 0 :\n            return b\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while b!= 0 :\n        if a % b == 0 :\n            return b\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while b!= 1 :\n        if a % b == 0 :\n            return b\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while b!= 1 :\n        if a % b == 0 :\n            return b\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while b!= 1 :\n        if a % b == 0 :\n            return b\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if a and b are greatest common divisors of each of them.\n    '''\n    if a < b :\n        a, b = b, a\n    while a!= 1 :\n        if a % b == 0 :\n            return a\n        a, b = b, a % b\n    return 1\ndef isGCD(a, b) : \n    '''\n    Find if "
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    if n == 2 : \n        return 2\n    f=n//2\n    # print(f)\n    if f==0 :\n        return 0\n    if f==1 :\n        return 2\n    if f==2 :\n        return 4\n    # else: \n    #     return sumofFactors(f)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return math.sqrt(n) * (math.sqrt(n) + 1)/2\ndef primeFactors(n) : \n    '''\n    Given a number, returns the prime factors of n.\n    '''\n    if n == 0 or n == 1 : \n        return []\n    for i in range(2, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            return [i] + primeFactors(n//i)\n    return [n]\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w'\n    match = re.findall(pattern, text)\n    print('\\n' + text)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\'.\\n' %len(match))\n        for word in match:\n            print('The word: %s is a letter of the word \\'%s\\'' % (word, word[1:]))\n        print('\\n')\n        \ndef text_match_wordz_multi(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text)\n    print('\\n' + text)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_indent(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_no_indent(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_one_line(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_one_line_no_indent(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_no_indent_all(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_one_line_all(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_two_line_no_indent(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_two_line(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_two_line_indent(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number of letters of the word \\'z\\'.\\n' %len(match))\n        print('Letters: %s, numbers: %s\\n' %(match[0], match[1:]))\n        print('\\n')\n        \n        \ndef text_match_wordz_multi_one_line_all_indent(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z\\w+'\n    match = re.findall(pattern, text, re.MULTILINE)\n    if len(match) == 0:\n        print('There is not a word matching the given pattern.')\n    else:\n        print('There are %s words containing a letter of the word \\'z\\' and a number o"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"z\"\n    result = re.search(pattern, text)\n    if result is None:\n        return result\n    else:\n        return result.span()\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'[z]', text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_split = re.split('z',text)\n    if(len(text_split) == 1):\n        return True\n    else:\n        for i in text_split:\n            if(i[0]!= \"z\"):\n                return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Count the number of occurrences of z in the input text\n    # and return the count.\n    # Note that 'z' does not occur in 'that' and 'those'.\n    z_count = re.findall('z', text)\n    z_count = z_count[0] if z_count else 0\n    return z_count\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub(r'[^\\w]',' ',text)\n    for word in text.split():\n        if word.lower() == 'z':\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.findall(r'z', text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_str = re.search(r'z',text)\n    if match_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # YOUR CODE HERE\n    # define a pattern to find\n    pattern=re.compile(r\"z\")\n    # string to look for\n    #this will look for 'z' in a string\n    text=text.lower()\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \n    # return result\n    return \"no z\"\ndef text_match_word1(text):\n    '''\n    Write a function that matches a word containing '1'.\n    '''\n    # YOUR CODE HERE\n    # define a pattern to find\n    pattern=re.compile(r\"1\")\n    # string to look for\n    #this will look for '1' in a string\n    text=text.lower()\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \n    # return result\n    return \"no 1\"\ndef text_match_word2(text):\n    '''\n    Write a function that matches a word containing '2'.\n    '''\n    # YOUR CODE HERE\n    # define a pattern to find\n    pattern=re.compile(r\"2\")\n    # string to look for\n    #this will look for '2' in a string\n    text=text.lower()\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \n    # return result\n    return \"no 2\"\ndef text_match_word3(text):\n    '''\n    Write a function that matches a word containing '3'.\n    '''\n    # YOUR CODE HERE\n    # define a pattern to find\n    pattern=re.compile(r\"3\")\n    # string to look for\n    #this will look for '3' in a string\n    text=text.lower()\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \n    # return result\n    return \"no 3\"\ndef text_match_word4(text):\n    '''\n    Write a function that matches a word containing '4'.\n    '''\n    # YOUR CODE HERE\n    # define a pattern to find\n    pattern=re.compile(r\"4\")\n    # string to look for\n    #this will look for '4' in a string\n    text=text.lower()\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \n    # return result\n    return \"no 4\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if int(monthnum2) == monthnum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%10 == 0:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        raise ValueError(\"Month number should be between 1 and 12.\")\n    return monthnum2 == 31\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1,3,5,7,8,10,12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2<1 or monthnum2>12):\n        return False\n    if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 1 and monthnum2 <= 12):\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    check = \"No\"\n    for m in range(monthnum2):\n        if (monthnum2 - m) == 31:\n            check = \"Yes\"\n    return check\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not monthnum2 in range(1,13):\n        return False\n    elif monthnum2==1:\n        return True\n    elif monthnum2==2:\n        if monthnum2==4 or monthnum2==5:\n            return True\n        elif monthnum2==7 or monthnum2==8:\n            return True\n        elif monthnum2==10 or monthnum2==11:\n            return True\n        elif monthnum2==12:\n            return True\n    elif monthnum2==3:\n        if monthnum2==4 or monthnum2==5:\n            return True\n        elif monthnum2==7 or monthnum2==8:\n            return True\n        elif monthnum2==10 or monthnum2==11:\n            return True\n        elif monthnum2==12:\n            return True\n    elif monthnum2==6:\n        if monthnum2==4 or monthnum2==5:\n            return True\n        elif monthnum2==7 or monthnum2==8:\n            return True\n        elif monthnum2==10 or monthnum2==11:\n            return True\n        elif monthnum2==12:\n            return True\n    elif monthnum2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == '01':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return None\n    \n    length = len(stringlist)\n    # iterate from the end and reverse each word\n    for i in range(length - 1, -1, -1):\n        stringlist[i] = stringlist[i].replace(' ', '-')\n        stringlist[i] = stringlist[i].strip('-')\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    i=0\n    while i < len(stringlist):\n        j=len(stringlist)-1\n        while j>=i:\n            stringlist[j],stringlist[i]=stringlist[i],stringlist[j]\n            j=j-1\n        i=i+1\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    temp = ''\n    for i in range(len(stringlist)-1,-1,-1):\n        temp += stringlist[i]\n        print('{}'.format(temp))\n        if temp!= '':\n            print('{}'.format(temp))\n        temp = ''\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # print('stringlist : ', stringlist)\n    i=0\n    l = len(stringlist)\n    \n    # for i in range(l):\n    #     print(stringlist[i],end=' ')\n    # print()\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # WRITE YOUR CODE HERE\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [list(i) for i in zip(*stringlist)]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return ''.join(stringlist[::-1])\n    #return stringlist[::-1]\n    #return ''.join(stringlist[::-1][::-1])\n    #return ''.join(stringlist[::-1][::-1][::-1])\n    #return stringlist[::-1][::-1][::-1]\n    #return ''.join(stringlist[::-1][::-1][::-1][::-1])\n    #return stringlist[::-1][::-1][::-1][::-1]\n    #return stringlist[::-1][::-1][::-1][::-1][::-1]\n    #return stringlist[::-1][::-1][::-1][::-1][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # NOTE: You can use a third variable to save the original string value.\n    reversed_string = []\n    for string in stringlist:\n        reversed_string.insert(0, string[::-1])\n    return reversed_string\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    min = lst[0]\n    count = 0\n    for i in range(0,len(lst)):\n        if lst[i]<min:\n            count+=1\n            min = lst[i]\n    return count \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key = len)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst: return None\n    min = lst[0] \n    for elm in lst[1:]: \n        if min > elm: \n            min = elm \n    return min\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_copy = []\n    lst_copy = lst.copy()\n    lst_copy.sort()\n    n = len(lst_copy)\n    for i in range(n):\n        if i == 0:\n            m = 0\n        else:\n            m = lst_copy[i-1]\n        for j in range(i+1, n):\n            if lst_copy[j] > m:\n                m = lst_copy[j]\n    return m\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0] \n    for i in range(1, len(lst)): \n        if lst[i] < minimum: \n            minimum = lst[i] \n    return minimum \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    lst = sorted(lst)\n    for j in range(len(lst)):\n        if lst[j] < lst[i]:\n            i = j\n    return lst[i]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_count = 0\n    min_idx = 0\n    for i in range(len(lst)):\n        if min_count < lst[i]:\n            min_count = lst[i]\n            min_idx = i\n    return min_idx\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    dic = {}\n    for i in lst:\n        if(i not in dic):\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in lst:\n        if(dic[i] < 1):\n            return i\n    return -1\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return lst[0:lst.index(min(lst[lst.index(lst[0]):lst.index(lst[-1]) + 1]))+1]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    res=[]\n    for i in range(0,len(lst)-1):\n        for j in range(i,len(lst)):\n            if len(lst[i:j+1])<len(lst):\n                if len(lst[i:j+1])>len(res):\n                    res=lst[i:j+1]\n    return(res)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if type(l)==int or type(l)==float:\n        if l<0 or l>=b or type(b)==float:\n            return 0\n    else:\n        return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #return l*b\n    return l*b/2\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    print(\"the area of a triangle is\",a*b*c)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the area of a circle is\",3.14*r*r)\n    \n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"the area of a square is\",l*l)\n    \n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"the area of a rectangle is\",l*b)\n    \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    print(\"the area of a parallelogram is\",a*b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"the are"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = (l*b)/2\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(\"The area of the rectangle is {0}\".format(area))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Enter the length of the rectangle: \")\n    l=int(input())\n    print(\"Enter the breadth of the rectangle: \")\n    b=int(input())\n    area=l*b\n    print(\"The area is: \")\n    print(area)\n    print(\"and the area is: \")\n    print(area*2)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    print(\"\\nArea of the rectangle is\",area)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #raise NotImplementedError\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.replace(\" \", \"\")\n    str2 = str2.upper()\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        if str_list[i].isupper():\n            str_list[i] = str_list[i].lower()\n    return''.join(str_list)\ndef remove_punctuation(str1):\n    '''\n    Write a function that takes a string and removes all punctuation from it.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.punctuation))\n    return''.join(str_list)\ndef replace_with_number(str1):\n    '''\n    Write a function that replaces all numbers with their corresponding number.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_number(str1):\n    '''\n    Write a function that removes all numbers from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_punctuation_and_number(str1):\n    '''\n    Write a function that removes all punctuation, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.punctuation))\n    return''.join(str_list)\ndef remove_punctuation_and_number(str1):\n    '''\n    Write a function that removes all punctuation, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.punctuation))\n    return''.join(str_list)\ndef remove_digits(str1):\n    '''\n    Write a function that removes digits from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_space(str1):\n    '''\n    Write a function that removes spaces from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.whitespace))\n    return''.join(str_list)\ndef remove_words(str1):\n    '''\n    Write a function that removes words from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.whitespace))\n    return''.join(str_list)\ndef split_and_lower(str1):\n    '''\n    Write a function that splits a given string and lowercases it.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].lower()\n    return''.join(str_list)\ndef remove_punctuation_and_number(str1):\n    '''\n    Write a function that removes all punctuation, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.punctuation))\n    return''.join(str_list)\ndef remove_digits_and_number(str1):\n    '''\n    Write a function that removes digits and numbers from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_digits_and_number(str1):\n    '''\n    Write a function that removes digits, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_space_and_number(str1):\n    '''\n    Write a function that removes spaces and numbers from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.whitespace))\n    return''.join(str_list)\ndef remove_whitespace_and_number(str1):\n    '''\n    Write a function that removes spaces, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.whitespace))\n    return''.join(str_list)\ndef remove_digits_and_number(str1):\n    '''\n    Write a function that removes digits and numbers from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_digits_and_number(str1):\n    '''\n    Write a function that removes digits, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_digits_and_number(str1):\n    '''\n    Write a function that removes digits, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.digits))\n    return''.join(str_list)\ndef remove_punctuation_and_number(str1):\n    '''\n    Write a function that removes all punctuation, numbers, and symbols from a given string.\n    '''\n    str_list = str1.split(' ')\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].translate(str.maketrans('','',string.punctuation))\n    return''.join(str_list)\ndef remove_punctuation_and_number(str1):\n    '''\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i] == \"a\" or str1[i] == \"e\" or str1[i] == \"i\" or str1[i] == \"o\" or str1[i] == \"u\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i] == \"a\" or str1[i] == \"e\" or str1[i] == \"i\" or str1[i] == \"o\" or str1[i] == \"u\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i] == \"0\" or str1[i] == \"1\" or str1[i] == \"2\" or str1[i] == \"3\" or str1[i] == \"4\" or str1[i] == \"5\" or str1[i] == \"6\" or str1[i] == \"7\" or str1[i] == \"8\" or str1[i] == \"9\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \",\" and str1[i]!= \".\" and str1[i]!= \":\") and str1[i]!= \"-\" and str1[i]!= \".\" and str1[i]!= \",\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \"0\" and str1[i]!= \"1\" and str1[i]!= \"2\" and str1[i]!= \"3\" and str1[i]!= \"4\" and str1[i]!= \"5\" and str1[i]!= \"6\" and str1[i]!= \"7\" and str1[i]!= \"8\" and str1[i]!= \"9\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_symbols(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \"\\\"\" and str1[i]!= \"'\" and str1[i]!= \",\" and str1[i]!= \".\" and str1[i]!= \":\") and str1[i]!= \"-\" and str1[i]!= \".\" and str1[i]!= \",\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \" \" and str1[i]!= \"\\n\" and str1[i]!= \"\\t\") and str1[i]!= \",\" and str1[i]!= \".\" and str1[i]!= \":\") and str1[i]!= \"-\" and str1[i]!= \".\" and str1[i]!= \",\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_dashes(str1):\n    '''\n    Write a function to remove dashes from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \"-\" and str1[i]!= \".\" and str1[i]!= \",\" and str1[i]!= \".\" and str1[i]!= \":\" and str1[i]!= \"--\" and str1[i]!= \"-\" and str1[i]!= \".\") and str1[i]!= \"-\" and str1[i]!= \".\" and str1[i]!= \",\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_space(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \" \" and str1[i]!= \"\\n\" and str1[i]!= \"\\t\") and str1[i]!= \",\" and str1[i]!= \".\" and str1[i]!= \":\" and str1[i]!= \"--\" and str1[i]!= \"-\" and str1[i]!= \".\") and str1[i]!= \"-\" and str1[i]!= \".\" and str1[i]!= \",\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_non_alphabet(str1):\n    '''\n    Write a function to remove non alphabetic characters from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \"a\" and str1[i]!= \"e\" and str1[i]!= \"i\" and str1[i]!= \"o\" and str1[i]!= \"u\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_non_digit(str1):\n    '''\n    Write a function to remove non digits from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \"0\" and str1[i]!= \"1\" and str1[i]!= \"2\" and str1[i]!= \"3\" and str1[i]!= \"4\" and str1[i]!= \"5\" and str1[i]!= \"6\" and str1[i]!= \"7\" and str1[i]!= \"8\" and str1[i]!= \"9\"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_non_symbols(str1):\n    '''\n    Write a function to remove non symbols from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        if(str1[i]!= \"\\\"\" and str1[i]!= \"'\" and str1[i]!= \",\" and str1[i]!= \".\" and str1[i]!= \":\" and str1[i]!= \".\" and str1[i]!= \" \" and str1[i]!= \" \" and str1[i]!= \"-\" and str1[i]!= \"-\" and str1[i]!= \".\") and str1[i]!= \"-\" and str1[i]!= \" \"):\n            str1 = str1.replace(str1[i],\"\")\n    return str1\ndef remove_non_numbers(str1):\n    '''\n    Write a function to remov"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    for i in range(0,len(str2)-1):\n        if str2[i] >= 'A' and str2[i] <= 'z':\n            str2 = str2.replace(str2[i],'')\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    pattern = r'[A-Z]'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    \n    pattern = r'[^a-z0-9]'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_punctuation_stopwords(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_punctuation_stopwords_v2(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3_v4(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3_v4_v5(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3_v4_v5_v6(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3_v4_v5_v6_v7(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3_v4_v5_v6_v7_v8(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3_v4_v5_v6_v7_v8_v9(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|having|do|do|without|with|about|above|below|to|in|from|on|at|on|at\\b)'\n    reg = re.compile(pattern)\n    str1 = reg.sub('', str1)\n    return str1\ndef remove_stopwords_v2_v3_v4_v5_v6_v7_v8_v9_v10(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    \n    pattern = r'\\b(?:the|an|a|and|are|as|but|or|we|our|ours|ourselves|for|at|by|of|in|as|of|had|having|had|havin"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(None, string.punctuation +'').lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    return str1.upper()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1).strip().lower()\ndef remove_non_ascii_characters(str1):\n    '''\n    Write a function to remove non-ascii characters from a given string.\n    '''\n    return str1.encode('ascii', 'ignore').decode()\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for element in lst:\n        yield element\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sum = 0\n    while(lst):\n        sum += lst.pop(0)\n    return sum\ndef main():\n    '''\n    Test the code for finding the first element of each sublist.\n    '''\n    lst = [6,5,4,3,2,1]\n    print(Extract(lst))\nmain()"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for element in lst: \n        result.append(element[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    try:\n        return lst[0]\n    except:\n        return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def FirstElement(lst): \n        '''\n        Use a recursive function to get the first element.\n        '''\n        if len(lst) == 1: \n            return lst[0] \n        else: \n            return FirstElement(lst[1:]) \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        if type(i) is list: \n            if type(i[0]) is list: \n                for j in i: \n                    if type(j) is list: \n                        for k in j: \n                            if type(k) is list: \n                                lst.append(k) \n                            else: \n                                lst.append(k.strip()) \n            else: \n                lst.append(i) \n        else: \n            lst.append(i) \n    return lst \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #start with the empty list and go to the first index\n    for i in range(0, len(lst)): \n        #if the last index in the list is a value from the range, then the value is the next index \n        if lst[i] == lst[i+1]: \n            #if the last index is not a value from the range, then it is the last index \n            continue\n        else: \n            #if the last index is not a value from the range, then it is the last index \n            return lst[i] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[1:]\n    for i in range(len(lst)): \n        if len(lst[i]) > 0: \n            return lst[i][0] \n    return None\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_c = 0\n    for i in str:\n        if i.isupper():\n            upper_c += 1\n    print(f\"The number of upper case characters is: {upper_c}\")\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('U')\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for ch in str:\n        if ch.isupper():\n            upper_count += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str = str.upper()\n    return str\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for char in str:\n        if char.isupper():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str.upper())"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_str = str.lower()\n    print(len(lower_str))\n    return len(lower_str)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lst = str.lower()\n    return len(lst.replace(\" \",\"\"))\nprint(upper_ctr(\"The quick brown fox jumps over the lazy dog\"))"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        combinations.append(list1[:i])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1_len = len(list1)\n    list2_len = len(list1)\n    combos_list = []\n    for i in range(list1_len-1):\n        for j in range(i+1,list1_len):\n            combos_list.append(list1[i] + list1[j])\n    return combos_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return []\n    for i in range(len(list1)):\n        for j in combinations_list(list1[i+1:]):\n            yield list1[:i] + list1[i+1:] + j\n        "
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        return [list1[i:] + list1[:i] for i in range(len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    combinations = []\n    for element in list1:\n        for combination in combinations:\n            result.append(combination + [element])\n        combinations = []\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) == 2:\n        return [list1] + combinations_list(list1[1:])\n    elif len(list1) == 3:\n        return [list1] + combinations_list([list1[0], list1[1], list1[2]])\n    # Recursive case\n    else:\n        return combinations_list([list1[0]] + combinations_list(list1[1:]) + [list1[2]])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        combs = []\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                combs.append([list1[i], list1[j]])\n        return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            combos.append([list1[i],list1[j]])\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''\n    pass\n    '''\n    Your code here\n    '''\n    pass\n    '''\n    Done with your code\n    '''"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    # If length of array is less than or equal to 1, return 0.\n    if n < 2:\n        return 0\n    \n    # Create array to store maximum product of product of the subarray.\n    max_product = [None]*n\n    \n    # Find the maximum subarray product.\n    for i in range(0, n):\n        max_product[i] = max(arr[i:])\n        \n    # Find the maximum product of subarray product.\n    for i in range(1, n):\n        max_product[i] = max(max_product[i-1] * arr[i], max_product[i-1] * arr[i] * arr[i])\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Write your code here.\n    max_product=[]\n    max_product_start=[]\n    max_product_end=[]\n    for i in range(len(arr)):\n        max_product.append(arr[i])\n        max_product_start.append(max(arr[:i]))\n        max_product_end.append(max(max(arr[i:])))\n    max_product.append(0)\n    max_product_start.append(max(max_product_start[1:]))\n    max_product_end.append(max(max_product_end[1:]))\n    max_product_start.append(0)\n    max_product_end.append(0)\n    max_product.append(max(max_product))\n    max_product.append(max(max_product_start[:]))\n    max_product.append(max(max_product_end[:]))\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    max_subarray_num = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_subarray_num = i - j + 1\n    return max_subarray_num\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None:\n        return 0\n    res = 0\n    for i in range(len(arr)):\n        res = max(res, arr[i]*(i+1))\n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    left = 0\n    max_val = -1\n    current_max = -1\n    left_sum = 0\n    \n    for right in range(len(arr)):\n        left_sum += arr[right]\n        if current_max < left_sum:\n            current_max = left_sum\n            left = right\n        if left_sum == max_val:\n            max_val = right\n    \n    # Find the current max and the max subarr\n    max_subarray = [0] * len(arr)\n    current_max_subarray = arr[left]\n    max_subarray[left] = current_max_subarray\n    for right in range(left+1, len(arr)):\n        current_max_subarray = current_max_subarray * arr[right]\n        if current_max_subarray > max_val:\n            max_val = current_max_subarray\n            current_max_subarray = arr[left]\n            left = right\n    max_subarray[left] = current_max_subarray\n    \n    return max_val, max_subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product_subarray_index = 0\n    max_product_subarray = 1\n    curr_product = 1\n    for idx in range(len(arr)):\n        curr_product = arr[idx] * curr_product\n        if idx == len(arr) - 1:\n            max_product_subarray = curr_product\n            curr_product = 1\n        else:\n            max_product_subarray = max(max_product_subarray, curr_product)\n            curr_product = arr[idx + 1] * curr_product\n    return max_product_subarray, max_product_subarray_index\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n    i = 1\n    while i < len(arr):\n        curr_product = curr_product * arr[i]\n        max_product = max(max_product, curr_product)\n        i += 1\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    ans = 0\n    max_left = [1]\n    max_right = [1]\n    for i in range(1, n):\n        max_left.append(max(arr[i-1]*max_left[i-1], arr[i]*max_left[i]))\n        max_right.append(max(arr[i]*max_right[i-1], arr[i-1]*max_right[i]))\n    \n    return max(max_left[n-1], max_right[n-1]"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.keys():\n        return False\n    if dict[n] is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if type(dict[key]) is not dict:\n            return False\n        if type(dict[key]) is not dict:\n            return False\n        if type(dict[key]) is dict:\n            if key not in dict.keys():\n                return False\n            if type(dict[key]) is not dict:\n                return False\n            if type(dict[key]) is dict:\n                if check_value(dict[key], n):\n                    return True\n            if type(dict[key]) is not dict:\n                return False\n            if type(dict[key]) is not dict:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.keys():\n        if(i=='id'):\n            continue\n        elif(dict[i]!=n):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= len(n):\n        raise TypeError(\"length of dictionary and list have to be the same\")\n    if type(n) is not dict:\n        raise TypeError(\"n must be a dictionary\")\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # print(dict)\n    # print(n)\n    for i in range(len(dict)):\n        if dict[i]!= n:\n            print(f\"Value not same with n={n}\")\n            return False\n    return True\n    \ndef create_dict_1(my_dict):\n    '''\n    Write a function to create a dictionary from a list of numbers.\n    '''\n    # print(my_dict)\n    new_dict = {}\n    for i in my_dict:\n        new_dict[i] = my_dict[i]\n    # print(new_dict)\n    return new_dict\n    \n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[i] == dict[i+n] for i in range(len(dict)-n))\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_list = []\n    for k,v in dict.items():\n        if type(v) == dict:\n            value_list.append(k)\n    if len(value_list)!= n:\n        return \"Error: Value not matched.\"\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if key not in n.keys():\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if any value in dictionary not same as value, print error message.\n    if not isinstance(dict, dict):\n        print('Input not a dictionary')\n    elif len(dict)!= len(n):\n        print('Different number of values')\n    else:\n        for i in n:\n            if dict[i]!= n[i]:\n                print('Values not same')\n                return\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    keys = dict.keys()\n    for i in keys:\n        if i!= n:\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            del dict1[i]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if type(v)!= list:\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    for i in range(len(dict1)):\n        if len(dict1[i]) == 0:\n            del dict1[i]\n            break\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if value == {}:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys = dict1.keys()\n    for key in keys:\n        if len(dict1[key]) == 0:\n            dict1.pop(key)\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = dict()\n    for k, v in dict1.items():\n        if v == []:\n            del dict1[k]\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in range(len(dict1)):\n        for j in range(len(dict1[i])):\n            if dict1[i][j] =='':\n                del dict1[i][j]\n                print(i,'- ', j)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # TODO: Create a function that can drop a key from a dictionary\n    #  and print the values of the dictionary without the key.\n    # HINT: Iterate through the dictionary in key-value pairs.\n    #       Look for the key and remove it from the dictionary.\n    # HINT2: Think about how you would iterate through the dictionary.\n    # HINT3: How would you make the empty_dictionary to be a dictionary\n    #       with the same structure as your existing dictionary?\n    # HINT4: Create a list of the keys in the dictionary, and iterate through\n    #       that list.\n    # HINT5: When you iterate through a list, there is a temporary list\n    #       that you can use to store the new value of each value.\n    # HINT6: You could create a dictionary to hold the temporary values.\n    # HINT7: Create a function that creates a new empty dictionary.\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Find the maximum product\n    max_product = arr[0]\n    for i in range(1, n):\n        temp = arr[i]*arr[i-1]\n        if temp > max_product:\n            max_product = temp\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n=len(arr)\n    l=1\n    r=1\n    largest=0\n    while l<n:\n        val=arr[l]*r\n        if largest<val:\n            largest=val\n            l+=1\n        r+=1\n    return largest\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > result:\n            result = arr[i]\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr_sorted = sorted(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # first try to find a subsequence of the array\n    if arr == []:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # This will return the maximum product of a list\n    def max_product_list(arr):\n        # this is done as soon as the given array is not empty\n        if len(arr) == 0:\n            return -1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product=1\n    i=1\n    max_product=1\n    for i in range(1,len(arr)):\n        max_product=max(arr[i-1]*max_product,arr[i]*max_product,arr[i+1]*max_product)\n        i+=1\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def find_max_product_start(arr):\n        n = len(arr)\n        max_product = []\n        for i in range(1,n):\n            for j in range(i):\n                if arr[j]<=arr[i] and arr[j]!=arr[i]:\n                    arr[j],arr[i]=arr[i],arr[j]\n                    max_product.append(arr)\n                    break\n        return arr\n    def find_max_product_end(arr):\n        n = len(arr)\n        max_product = []\n        for i in range(n-1,-1,-1):\n            for j in range(i+1):\n                if arr[j]<=arr[i] and arr[j]!=arr[i]:\n                    arr[j],arr[i]=arr[i],arr[j]\n                    max_product.append(arr)\n                    break\n        return arr\n    arr = arr[:n]\n    max_product = find_max_product_start(arr)\n    arr = find_max_product_end(arr)\n    max_product.sort()\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return list(zip(*test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO: COMPLETE THIS FUNCTION\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    \n    return (test_tup[0]+test_tup[1], test_tup[1]+test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        for j in range(i+1,len(test_tup)):\n            res.append((test_tup[i],test_tup[j]))\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    start = 0\n    end = len(test_tup)-1\n    while start < end:\n        if test_tup[start] + test_tup[end] == 1:\n            test_tup[start], test_tup[end] = test_tup[end], test_tup[start]\n            start += 1\n            end -= 1\n            continue\n        elif test_tup[start] + test_tup[end] > 1:\n            end -= 1\n        else:\n            start += 1\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n    \ndef add_pairwise2(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n    \ndef add_sorted(test_tup):\n    '''\n    Write a function to find the sum of the all elements in a tuple, except for the first element.\n    '''\n    pass\n    \ndef add_max(test_tup):\n    '''\n    Write a function to find the maximum element of a tuple.\n    '''\n    pass\n    \ndef add_min(test_tup):\n    '''\n    Write a function to find the minimum element of a tuple.\n    '''\n    pass\n    \ndef add_sum(test_tup):\n    '''\n    Write a function to find the sum of all elements in a tuple.\n    '''\n    pass\n    \ndef add_product(test_tup):\n    '''\n    Write a function to find the product of all elements in a tuple.\n    '''\n    pass\n    \ndef add_sum2(test_tup):\n    '''\n    Write a function to find the sum of all elements in a tuple.\n    '''\n    pass\n    \ndef add_div(test_tup):\n    '''\n    Write a function to find the sum of all elements in a tuple, except for the first element.\n    '''\n    pass\n    \ndef add_mul(test_tup):\n    '''\n    Write a function to find the multiplication of all elements in a tuple.\n    '''\n    pass\n    \ndef add_div2(test_tup):\n    '''\n    Write a function to find the division of all elements in a tuple.\n    '''\n    pass\n    \ndef add_div3(test_tup):\n    '''\n    Write a function to find the division of all elements in a tuple, except for the first element.\n    '''\n    pass\n    \ndef add_mul2(test_tup):\n    '''\n    Write a function to find the multiplication of all elements in a tuple.\n    '''\n    pass\n    \ndef add_mul3(test_tup):\n    '''\n    Write a function to find the multiplication of all elements in a tuple, except for the first element.\n    '''\n    pass\n    \ndef add_mul4(test_tup):\n    '''\n    Write a function to find the multiplication of all elements in a tuple, except for the first element.\n    '''\n    pass\n    \ndef add_rem(test_tup):\n    '''\n    Write a function to find the sum of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_sub(test_tup):\n    '''\n    Write a function to find the difference of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_mul3(test_tup):\n    '''\n    Write a function to find the multiplication of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_div(test_tup):\n    '''\n    Write a function to find the division of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_exp(test_tup):\n    '''\n    Write a function to find the exponential of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_log(test_tup):\n    '''\n    Write a function to find the logarithm of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_cbr(test_tup):\n    '''\n    Write a function to find the Cbr coefficient of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_exp2(test_tup):\n    '''\n    Write a function to find the exponent of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_sqrt(test_tup):\n    '''\n    Write a function to find the square root of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_log2(test_tup):\n    '''\n    Write a function to find the logarithm of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_prod(test_tup):\n    '''\n    Write a function to find the product of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_exp3(test_tup):\n    '''\n    Write a function to find the exponent of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_sqrt3(test_tup):\n    '''\n    Write a function to find the square root of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_log3(test_tup):\n    '''\n    Write a function to find the logarithm of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_prod2(test_tup):\n    '''\n    Write a function to find the product of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_sqrt2(test_tup):\n    '''\n    Write a function to find the square root of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_log22(test_tup):\n    '''\n    Write a function to find the logarithm of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_prod3(test_tup):\n    '''\n    Write a function to find the product of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_div2(test_tup):\n    '''\n    Write a function to find the division of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_exp4(test_tup):\n    '''\n    Write a function to find the exponent of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_sqrt4(test_tup):\n    '''\n    Write a function to find the square root of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_log24(test_tup):\n    '''\n    Write a function to find the logarithm of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_prod4(test_tup):\n    '''\n    Write a function to find the product of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_exp5(test_tup):\n    '''\n    Write a function to find the exponent of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_sqrt5(test_tup):\n    '''\n    Write a function to find the square root of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_log5(test_tup):\n    '''\n    Write a function to find the logarithm of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_prod5(test_tup):\n    '''\n    Write a function to find the product of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_exp6(test_tup):\n    '''\n    Write a function to find the exponent of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_sqrt6(test_tup):\n    '''\n    Write a function to find the square root of all elements in a tuple except for the first element.\n    '''\n    pass\n    \ndef add_log6(test_tup):\n    '''\n    Write a function to find the logarithm of all elements in "
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Set up:\n    test_tup_arr = test_tup\n    if len(test_tup_arr) == 2:\n        return test_tup_arr\n    elif len(test_tup_arr) == 1:\n        return test_tup_arr[::-1]\n    else:\n        return test_tup_arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(len(arr)-1, -1, -1):\n        res = res*arr[i]\n    return res % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(0, len(arr)):\n        result = result * arr[i]\n    return result % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for x in arr:\n        result *= x\n    return result % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # your code goes here\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    if len(arr) % n!= 0:\n        return find_remainder(arr, n)\n    else:\n        return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n): \n        product *= arr[i] \n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    return (arr[n-1] * arr[n-2]) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize our product array\n    prod = 1\n    for i in range(1, len(arr)):\n        prod *= (arr[i])\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # The product of arr[0..i-1] multiplied by arr[i] will be arr[i] * arr[i+1]. \n    # This is done by multiplying each element of arr by each element in arr[0..i-1]\n    # then summing each element of arr and dividing by arr[i]\n    \n    # For example, if arr = [1, 2, 3, 4] then find_remainder(arr, 5) will return 5.\n    # For example, find_remainder([1, 2, 3, 4], 10) will return 10.\n    \n    # For this question, i is the length of arr, and is the number of elements in the array\n    i = len(arr) - 1\n    \n    while i >= 0:\n        product = arr[i] * arr[i + 1]\n        \n        if (product % n)!= 0:\n            \n            # If product is not divisible by n,\n            # then product is not an integer\n            # in this case, multiply and add the remainder\n            # to arr[i]\n            \n            # Using arr[i] and the product of arr[i + 1] will be the result\n            arr[i] *= arr[i + 1]\n            \n        else:\n            # If product is divisible by n, then product is an integer\n            # in this case, multiply and add the result\n            # to arr[i]\n            \n            # This is done by dividing arr[i] by product\n            # and then multiplying each element of arr with product\n            \n            # For example, if arr = [1, 2, 3, 4] then find_remainder(arr, 5) will return 5.\n            # For example, find_remainder([1, 2, 3, 4], 10) will return 5.\n            \n            # This is done by multiplying arr[i] and arr[i+1] by product\n            # and then summing each element of arr and dividing by product\n            arr[i] = arr[i] * product\n            \n        i -= 1\n    \n    # Return the array after the multiplication\n    return arr\n    "
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(1, n):\n        prod *= arr[i]\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum*arr[i]\n    if sum % n == 0:\n        return arr[(len(arr)-1)%len(arr)]\n    else:\n        return \"No remainder\"\n    # def product_array(arr, n): \n    #     sum = 1\n    #     for i in range(len(arr)):\n    #         sum = sum*arr[i]\n    #     if sum % n == 0:\n    #         return arr[(len(arr)-1)%len(arr)]\n    #     else:\n    #         return \"No remainder\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: \n        return True \n    if len(l) % 2 == 0:\n        return False \n    if l[0] == l[len(l) - 1]: \n        return False \n    return check_Consecutive(l[0:int(len(l) / 2)]) \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consec = 0\n    for i in l: \n        if i > 0: \n            consec += 1\n    if consec % 2 == 0: \n        return 'true'\n    else: \n        return 'false'\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l:\n        if i > 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the given list is empty\n    if l == []: \n        return False\n    # make a counter variable \n    counter = 0 \n    # define a for-loop \n    for i in range(0, len(l)): \n        if l[i] == l[i+1]: \n            counter += 1 \n            if counter == 2: \n                return True\n        else: \n            counter = 0\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0 \n    count = 0 \n    while i < len(l): \n        if l[i] == l[i + 1]: \n            count += 1 \n        i += 1\n    return count >= 2\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # iterate through the elements\n    for i in range(len(l)):\n        # if the current element is the first element then it is not a consecutive number\n        if i == 0:\n            continue\n        # if the element in between is not the last element then it is not a consecutive number\n        elif l[i]!= l[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1 = []\n    l2 = []\n    for i in l:\n        if i % 2 == 0:\n            l2.append(i)\n        else:\n            l1.append(i)\n    if len(l1) > len(l2):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # creating a set from the given list\n    lset=set(l) \n    # setting a flag to check for each element\n    # and if flag is set to True then append it to the set\n    flag=0\n    for i in l:\n        if i in lset:\n            flag=1\n            l.remove(i)\n            break\n    # if no element is left then return false\n    if flag==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    sum = 0\n    for i in l: \n        sum = sum + i\n    if sum == l[0]: \n        print('The list contains consecutive numbers')\n    else: \n        print('The list does not contain consecutive numbers')\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s=[]\n    l=list(l)\n    for i in l:\n        s.append(i)\n    i=0\n    while i<len(s):\n        if s[i]==s[i+1]:\n            del s[i+1]\n            del s[i]\n        else:\n            i+=1\n    if len(s)==len(l):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \ndef check_Flats(l): \n    '''\n    Write a python function to check whether the given list contains flat/sides or not.\n    '''\n    s=[]\n    l=list(l)\n    for i in l:\n        s.append(i)\n    i=0\n    while i<len(s):\n        if s[i]==s[i+1]:\n            del s[i+1]\n            del s[i]\n        else:\n            i+=1\n    if len(s)==len(l):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your code here\n    return tuple()\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #c = []\n    intersection = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    return intersection\n    \n    \ndef remove_duplicates(l):\n    '''\n    Write a function to remove duplicate elements from a tuple in the given list.\n    '''\n    #c = []\n    duplicates = []\n    for i in range(len(l)):\n        if l[i] not in duplicates:\n            duplicates.append(l[i])\n        else:\n            continue\n    return duplicates\n    \n    \ndef get_letter_freq(s):\n    '''\n    Write a function to return a dictionary containing letter frequencies of each word in the given string.\n    '''\n    #c = []\n    word_freq = {}\n    for i in range(len(s)):\n        word = s[i]\n        if word in word_freq:\n            word_freq[word] = word_freq[word] + 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Iterate through list of tuples, checking if the tuple is the same order, if yes, return that tuple\n    # for list in test_list1:\n        # for element in test_list2:\n            # if tuple[0] == element:\n                # return tuple\n    # Return no element is found\n    return tuple()\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    tuple_list1 = list(test_list1)\n    tuple_list2 = list(test_list2)\n    for index in range(0, len(tuple_list1)):\n        if tuple_list1[index] in tuple_list2:\n            intersection_list.append(tuple_list1[index])\n        else:\n            pass\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n    #raise NotImplementedError"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    i = 0\n    while (i < len(test_list1)):\n        if(i == len(test_list2)):\n            break\n        elif(test_list1[i]!= test_list2[i]):\n            result = result + (test_list1[i],)\n            i = i + 1\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    if len(test_list1)!= len(test_list2):\n        return \"Tuples must be of same size\"\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection += (test_list1[i], )\n        else:\n            return \"Tuples must contain all elements of both lists\"\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        return None\n    else:\n        intersection = []\n        for i in range(len(test_list1)):\n            for j in range(i+1, len(test_list1)):\n                if test_list1[i] <= test_list1[j] <= test_list2[i] or test_list2[j] <= test_list1[i] <= test_list2[j]:\n                    intersection.append(test_list1[i])\n                    intersection.append(test_list2[j])\n                    break\n        return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list_1 = set(test_list1)\n    list_2 = set(test_list2)\n    return list_1.intersection(list_2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialise the list to hold tuples\n    intersection_tuple_list = []\n    # loop through the tuple lists\n    for i in range(len(test_list1)):\n        # if the index of the first element of the tuple is the same as the index of the second element of the tuple\n        # sort the tuple list to get the second element of the tuple\n        if test_list1[i] == test_list2[i]:\n            intersection_tuple_list.append(test_list1[i])\n            test_list1.remove(test_list1[i])\n            test_list2.remove(test_list2[i])\n    return intersection_tuple_list\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for c in str1:\n        if c == ch:\n            newstr += newch\n        else:\n            newstr += c\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_string=[]\n    for i in range(0,len(str1)):\n        if str1[i]==ch:\n            new_string.append(newch)\n        else:\n            new_string.append(str1[i])\n    return ''.join(new_string)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i,j in enumerate(str1):\n        if ch == i:\n            str1 = str1.replace(j, newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    def convert_char(str1):\n        char = str1[0]\n        if char =='':\n            return''\n        elif char == '\\n':\n            return '\\n'\n        elif char == '\\t':\n            return '\\t'\n        else:\n            return char\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # your code goes here\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.lower()\n    new_str = []\n    for i in str1:\n        if i == ch:\n            new_str.append(newch)\n        else:\n            new_str.append(i)\n    return ''.join(new_str)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if(ch==str1[i]):\n            str2+=newch\n        else:\n            str2+=str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,\" \")\n    str1=str1.replace(\"-\", \" \")\n    str1=str1.replace(\"%\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=str1.replace(\"=\", \" \")\n    str1=str1.replace(\"\\\"\", \" \")\n    str1=str1.replace(\"/\", \" \")\n    str1=str1.replace(\"&\", \" \")\n    str1=str1.replace(\"*\", \" \")\n    str1=str1.replace(\"(\", \" \")\n    str1=str1.replace(\")\", \" \")\n    str1=st"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ch == str1[i]:\n            str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = []\n    for char in str1:\n        if char == ch:\n            res.append(newch)\n        else:\n            res.append(char)\n    str1 = \"\".join(res)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Your code here\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1_copy = dict1.copy()\n    dict1_copy.sort()\n    return dict1_copy\ndef find_occurrences(s, l, r):\n    '''\n    Write a function that takes a string as input and a lowercase character as an argument,\n    and returns the number of occurrences of the character in the string between the\n    first and last index of the string. For example, the function\n    find_occurrences(\"Aa\", 0, 1) should return 1, which means that the character is present\n    in the string at index 0 and is present in the string at index 1.\n    '''\n    dict = {}\n    for i in range(l, r + 1):\n        if s[i] in dict:\n            dict[s[i]] += 1\n        else:\n            dict[s[i]] = 1\n    return dict[s[l]] + dict[s[r]] - 1\ndef reverse_string(s):\n    '''\n    Write a function that takes a string as input and returns the input reversed.\n    '''\n    s = s.replace(' ', '')\n    s = s.replace('-', '')\n    return s[::-1]\ndef count_frequencies(s):\n    '''\n    Write a function that takes a string as input and returns the frequency of each character.\n    The function should return a dictionary where the keys are the characters and the values\n    are the frequencies.\n    '''\n    counts = Counter(s)\n    return counts\ndef main():\n    '''\n    Write a function that takes a string as input and returns the string,\n    reversed, and its frequency count.\n    '''\n    #Test Data\n    s = 'Aa'\n    l = 0\n    r = len(s)-1\n    #print(s, l, r)\n    #print(s[l:r+1])\n    #print(r, l, r - 1)\n    #print(find_occurrences(\"Aa\", 0, 1))\n    #print(find_occurrences(\"Ab\", 0, 1))\n    #print(reverse_string(\"abc\"))\n    #print(count_frequencies(\"abc\"))\n    return 0\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    count.sort(reverse = True)\n    return dict(count)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # This is an auxiliary function.\n    def sort_helper(dict, reverse=False):\n        # If the dictionary is empty, return nothing\n        if len(dict) == 0:\n            return None\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def sort_value(dict1):\n        '''\n        Write your own code here\n        '''\n        dict1_sorted=dict1.copy()\n        return dict1_sorted\n    dict1=dict()\n    for key in dict1:\n        dict1[key]=dict1[key].items()\n        dict1[key]=sorted(dict1[key])\n    return sort_value(dict1)"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    # Dictionary to sort by value\n    for key,value in dict1.items():\n        sorted_dict[key] = value\n    # Sort keys by value\n    for key in sorted_dict.keys():\n        sorted_dict[key] = sorted(sorted_dict[key])\n    # Return sorted_dict\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(dict1)\n    dict1 = dict1.items()\n    dict1.sort(reverse=True)\n    return dict(dict1)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # return sorted(dict1)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict1.copy()\n    sorted_dict.sort(key=lambda x:x[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = { k:dict1[k] for k in sorted(dict1.keys()) }\n    return dict2\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for n in nums:\n        s += n\n    return s\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0], nums[0]\n    \n    def find_largest_largest(nums):\n        if len(nums) == 1:\n            return nums[0], nums[0]\n        \n        big_sum = nums[0]\n        small_sum = nums[0]\n        \n        for i in range(1, len(nums)):\n            small_sum += nums[i]\n            if small_sum > big_sum:\n                big_sum = small_sum\n            elif small_sum == big_sum:\n                small_sum = nums[i]\n                \n        return big_sum, small_sum\n    \n    def find_smallest_smallest(nums):\n        if len(nums) == 1:\n            return nums[0], nums[0]\n        \n        small_sum = nums[0]\n        big_sum = nums[0]\n        \n        for i in range(1, len(nums)):\n            big_sum += nums[i]\n            if big_sum < small_sum:\n                small_sum = big_sum\n            elif big_sum == small_sum:\n                big_sum = nums[i]\n                \n        return big_sum, small_sum\n    \n    big_sum = None\n    small_sum = None\n    big_sum, small_sum = find_largest_largest(nums)\n    \n    big_sum, small_sum = find_smallest_smallest(nums)\n    \n    return big_sum, small_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    if max_num < sum and min_num > sum:\n        return max_num, min_num, sum\n    return max_num, sum"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    sum = max_value + min_value\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # set max and min value\n    max_val = max(nums)\n    min_val = min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_v = nums[0]\n    min_v = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_v:\n            max_v = nums[i]\n        if nums[i] < min_v:\n            min_v = nums[i]\n    return max_v, min_v\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Go through the array and keep adding the smallest number until it is greater than the largest number\n    # since we start with the first number we have to go through and compare it to the last number\n    # and increment them appropriately\n    # when the largest number is greater than the smallest number\n    # we should not be adding the smallest number twice and the largest number first\n    # so we use another loop to keep going until we reach the end of the array\n    largest_sum = 0\n    smallest_sum = nums[0]\n    for n in nums:\n        if n > largest_sum:\n            largest_sum = n\n        if n < smallest_sum:\n            smallest_sum = n\n    # now we will return the sums of the two numbers\n    # return largest_sum + smallest_sum\n    return largest_sum, smallest_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # - Find the minimum value in a given array\n    min = nums[0]\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n        if nums[i] > max:\n            max = nums[i]\n    return max + min\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the sum of all the values\n    # in the list of numbers\n    max_num = 0\n    min_num = 100\n    for num in nums:\n        max_num = max(max_num, num)\n        min_num = min(min_num, num)\n    # Return the maximum and minimum of the numbers in the list\n    return (max_num, min_num)\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower("
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower=string.lower()\n    lower=lower.replace(\"-\",\" \")\n    lower=lower.replace(\" \",\"\")\n    lower=lower.replace(\" \",\"\")\n    lower=lower.split()\n    lower=list(map(str.lower,lower))\n    lower=list(map(str.upper,lower))\n    lower=list(filter(None,lower))\n    lower=list(filter(None,lower))\n    return lower\n    \n    \n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    upper=string.upper()\n    upper=upper.replace(\"-\",\" \")\n    upper=upper.replace(\" \",\"\")\n    upper=upper.replace(\" \",\"\")\n    upper=upper.split()\n    upper=list(map(str.upper,upper))\n    upper=list(map(str.lower,upper))\n    upper=list(filter(None,upper))\n    upper=list(filter(None,upper))\n    return upper\n    \n    \n    \n    \ndef is_digit(string):\n    '''\n    Write a python function to check whether a given string is digit.\n    '''\n    digits=[]\n    for char in string:\n        if char.isdigit():\n            digits.append(char)\n    if len(digits)>0:\n        return digits\n    else:\n        return False\n    \n    \n    \n    \ndef get_length(string):\n    '''\n    Write a python function to get the length of a given string.\n    '''\n    length=len(string)\n    return length\n    \n    \n    \n    \ndef get_letters(string):\n    '''\n    Write a python function to get all the letters in the given string.\n    '''\n    letters=[]\n    for char in string:\n        letters.append(char)\n    return letters\n    \n    \n    \n    \ndef get_repeated_letters(string):\n    '''\n    Write a python function to get the letters which are repeated in the given string.\n    '''\n    repeated=[]\n    for char in string:\n        if char in repeated:\n            repeated.remove(char)\n        else:\n            repeated.append(char)\n    return repeated\n    \n    \n    \n    \ndef get_letters_with_multiple_letters(string):\n    '''\n    Write a python function to get the letters which are repeated in the given string.\n    '''\n    letters_list=[]\n    for char in string:\n        if char not in letters_list:\n            letters_list.append(char)\n    return letters_list\n    \n    \n    \n    \ndef is_valid_password(string):\n    '''\n    Write a python function to check whether the given string is valid.\n    '''\n    if len(string)<=8:\n        return False\n    if not string.isdigit():\n        return False\n    if not string.isupper():\n        return False\n    if not string.islower():\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isalnum():\n        return False\n    return True\n    \n    \n    \n    \ndef contains_special_characters(string):\n    '''\n    Write a python function to check whether the given string contains any special characters.\n    '''\n    special_chars=['\\n',';','!','@','#','$','%','&','*','?']\n    for char in special_chars:\n        if char in string:\n            return True\n    return False\n    \n    \n    \n    \ndef is_unique_word(string):\n    '''\n    Write a python function to check whether a given string contains any special characters.\n    '''\n    special_chars=['\\n',';','!','@','#','$','%','&','*','?']\n    if contains_special_characters(string):\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isupper():\n        return False\n    if not string.islower():\n        return False\n    if not string.isnumeric():\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isalnum():\n        return False\n    return True\n    \n    \n    \n    \ndef get_word_length(string):\n    '''\n    Write a python function to get the length of a given string.\n    '''\n    length=get_length(string)\n    return length\n    \n    \n    \n    \ndef get_number_of_char(string):\n    '''\n    Write a python function to get the length of a given string.\n    '''\n    length=get_length(string)\n    return length\n    \n    \n    \n    \ndef is_valid_password(string):\n    '''\n    Write a python function to check whether the given string is valid.\n    '''\n    if not string.isalnum():\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isupper():\n        return False\n    if not string.islower():\n        return False\n    if not string.isnumeric():\n        return False\n    return True\n    \n    \n    \n    \ndef contains_only_letters(string):\n    '''\n    Write a python function to check whether the given string contains any special characters.\n    '''\n    special_chars=['\\n',';','!','@','#','$','%','&','*','?']\n    if contains_special_characters(string):\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isupper():\n        return False\n    if not string.islower():\n        return False\n    if not string.isnumeric():\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isalnum():\n        return False\n    return True\n    \n    \n    \n    \ndef is_valid_password_with_repeated_letters(string):\n    '''\n    Write a python function to check whether the given string contains any special characters.\n    '''\n    special_chars=['\\n',';','!','@','#','$','%','&','*','?']\n    letters_list=get_letters_with_multiple_letters(string)\n    if contains_only_letters(string):\n        return False\n    for letter in letters_list:\n        if not letter in special_chars:\n            return False\n    if not string.isalpha():\n        return False\n    if not string.isupper():\n        return False\n    if not string.islower():\n        return False\n    if not string.isnumeric():\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isalnum():\n        return False\n    return True\n    \n    \n    \n    \ndef is_valid_password_with_multiple_letters(string):\n    '''\n    Write a python function to check whether the given string contains any special characters.\n    '''\n    special_chars=['\\n',';','!','@','#','$','%','&','*','?']\n    letters_list=get_letters(string)\n    if contains_only_letters(string):\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isupper():\n        return False\n    if not string.islower():\n        return False\n    if not string.isnumeric():\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isalnum():\n        return False\n    return True\n    \n    \n    \n    \ndef is_valid_password_with_any_special_characters(string):\n    '''\n    Write a python function to check whether the given string contains any special characters.\n    '''\n    special_chars=['\\n',';','!','@','#','$','%','&','*','?']\n    if contains_only_letters(string):\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isupper():\n        return False\n    if not string.islower():\n        return False\n    if not string.isnumeric():\n        return False\n    if not string.isalpha():\n        return False\n    if not string.isalnum():\n        return False\n    for char in special_chars:"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    print(lower_string)\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    pass\n    pass\n    \nif __name__ == \"__main__\":\n    # example 1\n    print(is_lower(\"Hola mundo\"))\n    print(is_lower(\"hola mundo\"))\n    print(is_lower(\"Hello\"))\n    print(is_lower(\"Hello world\"))\n    # example 2\n    print(is_lower(\"Abcdee\"))\n    print(is_lower(\"asdfghjklmnopqrstuvwxyz\"))\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isalpha() == False:\n        raise ValueError('Only alpha-numeric characters allowed')\n    else:\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = ''\n    if str1 == None or str1.lower() == None or str1.isascii():\n        return None\n    else:\n        for c in str1:\n            if c.islower():\n                new_str += c.upper()\n            else:\n                new_str += c.lower()\n        return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(\" \", \"\").replace(\"-\", \"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def remove_lower(str1):\n        '''\n        Remove lowercase substrings from string.\n        '''\n        a, b = 0, 0\n        while a < len(str1):\n            if not str1[a].islower():\n                str1 = str1[:a] + str1[a].upper()\n                a += 1\n            else:\n                str1 = str1[:a] + str1[a].lower()\n                a += 1\n        while b < len(str1):\n            if not str1[b].islower():\n                str1 = str1[:b] + str1[b].upper()\n                b += 1\n            else:\n                str1 = str1[:b] + str1[b].lower()\n                b += 1\n        return str1\n    return remove_lower(str1)\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    # Special characters are: \"\u2018\u2019\u201c\u201d\u201d\u2018\u2019\n    # You can remove these, like \u2018\u2019 or \u2018\u2019\n    # You can also remove other punctuation like \u201c\u201d or \u201c\u201c\n    # You can remove words, like \u201cor\u201d or \u201cOR\u201d\n    # You can also remove special characters, like numbers, like \u201c\\n\u201d or \u201cn\u201d\n    def remove_special(str1):\n        '''\n        Remove special characters from string.\n        '''\n        pattern = re.compile('[^\\w\\d\\s]')\n        str1 = pattern.sub('', str1)\n        pattern = re.compile('[^\\w\\d\\s]')\n        str1 = pattern.sub('', str1)\n        pattern = re.compile('[^a-zA-Z]')\n        str1 = pattern.sub('', str1)\n        pattern = re.compile('[^a-zA-Z]')\n        str1 = pattern.sub('', str1)\n        pattern = re.compile('[^a-zA-Z]')\n        str1 = pattern.sub('', str1)\n        pattern = re.compile('[^a-zA-Z\\s]')\n        str1 = pattern.sub('', str1)\n        pattern = re.compile('[^a-zA-Z\\s]')\n        str1 = pattern.sub('', str1)\n        return str1\n    return remove_special(str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    pattern = re.compile('\\d')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('\\d')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('\\d')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('\\d')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('\\d')\n    str1 = pattern.sub('', str1)\n    return str1\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    pattern = re.compile('[^a-zA-Z\\s]')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('[^a-zA-Z\\s]')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('[^a-zA-Z\\s]')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('[^a-zA-Z\\s]')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('[^a-zA-Z\\s]')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('[^a-zA-Z\\s]')\n    str1 = pattern.sub('', str1)\n    pattern = re.compile('[^a-zA-Z\\s]')\n    str1 = pattern.sub('', str1)\n    return str1\ndef remove_sentence_breaks(str1):\n    '''\n    Write a function to remove sentence breaks from a given string.\n    '''\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.compile('\\n')\n    str1 = pattern.sub(' ', str1)\n    pattern = re.com"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    list1 = []\n    for i in range(len(str1)):\n        if str1[i].islower():\n            list1.append(str1[i])\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i].lower())\n    return ''.join(list2)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code here\n    i = 0\n    while i < len(str1):\n        if not str1[i].islower():\n            str1 = str1.replace(str1[i], '-')\n        i += 1\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace('a', 'a', 1).replace('b', 'b', 1).replace('c', 'c', 1).replace('d', 'd', 1).replace('e', 'e', 1).replace('f', 'f', 1).replace('g', 'g', 1).replace('h', 'h', 1).replace('i', 'i', 1).replace('j', 'j', 1).replace('k', 'k', 1).replace('l', 'l', 1).replace('m','m', 1).replace('n', 'n', 1).replace('o', 'o', 1).replace('p', 'p', 1).replace('q', 'q', 1).replace('r', 'r', 1).replace('s','s', 1).replace('t', 't', 1).replace('u', 'u', 1).replace('v', 'v', 1).replace('w', 'w', 1).replace('x', 'x', 1).replace('y', 'y', 1).replace('z', 'z', 1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return str1\n    for i in str1:\n        if i.islower():\n            str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for char in str1:\n        if(char.lower() in ['a', 'e', 'i', 'o', 'u']) and len(char) < 3:\n            continue\n        elif char.lower() == 'n':\n            continue\n        else:\n            str2 += char\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ','')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Get rid of lowercase first letter\n    new_string = \"\"\n    for char in str1:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n) // 10 \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    print(n)\n    print(n[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = 0\n    while (n > 0) : \n        n, i = n%10, i+1\n    return i\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Your code here\n    return n[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0 :  \n        return int(str(n)[0])  \n    else :  \n        return 0 \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    result = []\n    while n >= 10 :\n        result.append(n % 10)\n        n = n // 10\n    result.append(n % 10)\n    return result[0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for number in list:\n        if number % 2 == 1:\n            odd_list.append(number)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    my_list = list[:]\n    for i in range(0,len(my_list)):\n        if my_list[i]%2!= 0:\n            my_list[i] = my_list[i] + 1\n    return my_list\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(\"Odd list:\",list[list.index(2)::])\n    return list[list.index(2)::][::-1]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # test your code here\n    list.sort()\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    for i in list:\n        if i % 2!= 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evens = []\n    for el in list:\n        if el%2 == 0:\n            evens.append(el)\n    return evens\n        \ndef main():\n    '''\n    Write a python function which takes a list of integers as parameter and only returns the even ones.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, "
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    # Splitting the list into two sub lists\n    oddlist = list[0:len(list)//2]\n    evenlist = list[len(list)//2:]\n    \n    # Return odd and even sub lists\n    return oddlist, evenlist\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n    return (n*(n+1)*(n+2))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    n = n\n    for i in range(1, n+1) :\n        sum = sum + i**3\n    return sum - sum**3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(1,n+1) :\n        sum_n += i**3\n    return sum_n-sum_n**3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # code here\n    if n == 1 :\n        return 1\n    elif n == 0 :\n        return 0\n    elif n < 1 :\n        return None\n    else :\n        return difference(n-1) + difference(n-2)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = list(range(1, n+1))\n    for x in cubes :\n        sum = 0\n        for y in cubes :\n            sum = sum + (x**2) + y**2\n        cubes.append(sum)\n    return cubes[-1]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n < 0 : \n        return 'ERROR'\n    elif n == 1 : \n        return 1\n    else :\n        return difference(n - 1) + difference(n - 2)\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n*(n+1))/6\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(input(\"Enter the n value: \"))\n    if n<0:\n        print(\"Not a natural number\")\n    elif n==0:\n        print(\"0\")\n    elif n==1:\n        print(\"1\")\n    else:\n        for i in range(1,n+1) :\n            if i==1 :\n                print(i**3,end=\" \")\n            else:\n                print(i**3,end=\" \")\n        print(\"\\n\")\n    return n\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n    lst = []\n    for i in range(n):\n        cube = cube_sum(i)\n        lst.append(cube)\n    return sum(lst)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ = 0\n    for i in range(1, n + 1) : \n        summ = summ + (i**3)\n    return (summ - n)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    X=0\n    for i in range(len(A)) : \n        for j in range(len(A)) : \n            if A[i]^A[j]!=i and A[i]^A[j]!=j : X=X+1\n    return X\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #count the number of pairs in the list\n    pair_count = 0\n    for x in range(N) :\n        if A[x]&1!= 0 :\n            pair_count = pair_count + 1\n    return pair_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # if A and N are both odd, return 0\n    if (A and N)!= (A and N):\n        return 0\n    # if A and N are both even, return 2\n    if (A and N) == (A and N):\n        return 2\n    # if A is even, return 1\n    if A % 2 == 0 :\n        return 1\n    # if A is odd, return 2\n    if A % 2 == 1 :\n        return 2\n    \n    # if A is odd and N is even, return 2\n    if A % 2 == 1 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    \n    # if A and N are both even, return 0\n    if A % 2 == 0 and N % 2 == 0 :\n        return 0\n    # if A and N are both odd, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is even, return 2\n    if A % 2 == 1 :\n        return 2\n    # if A is odd, return 2\n    if A % 2 == 0 :\n        return 2\n    \n    # if A is odd and N is even, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 0 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C = 0\n    i = 0\n    while (i < N and i < N) : \n        if A[i]!= A[i + 1] : \n            C += 1\n        i += 2\n    return C\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    # loop through list of tuples of length N\n    for i in range(0,N-1):\n        if(A[i]&1!= A[i+1]&1):\n            odd_count = odd_count + 1\n    #print(odd_count)\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if A[i]==A[j] and A[i]==0x01:\n                odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    L = len(A)\n    count = 0\n    for i in range(1,L-1) :\n        if A[i] & 1!= A[i-1] :\n            count += 2\n        else :\n            count += 1\n    return count\n    \ndef Find_Even_Pairs(A,N) : \n    '''\n    Write a python function to find the number of pairs whose xor value is even.\n    '''\n    L = len(A)\n    count = 0\n    for i in range(1,L-1) :\n        if A[i] & 1 == A[i-1] :\n            count += 2\n        else :\n            count += 1\n    return count\n    \ndef Find_Four_Pairs(A,N) : \n    '''\n    Write a python function to find the number of pairs whose xor value is 4.\n    '''\n    L = len(A)\n    count = 0\n    for i in range(1,L-1) :\n        if A[i] & 1 == A[i-1] and A[i] == A[i+1] :\n            count += 4\n        else :\n            count += 1\n    return count\n    \ndef Find_Three_Pairs(A,N) : \n    '''\n    Write a python function to find the number of pairs whose xor value is 3.\n    '''\n    L = len(A)\n    count = 0\n    for i in range(1,L-1) :\n        if A[i] & 1 == A[i-1] and A[i] == A[i+1] :\n            count += 3\n        else :\n            count += 1\n    return count\n    \ndef Find_Two_Pairs(A,N) : \n    '''\n    Write a python function to find the number of pairs whose xor value is 2.\n    '''\n    L = len(A)\n    count = 0\n    for i in range(1,L-1) :\n        if A[i] & 1 == A[i-1] and A[i] == A[i+1] :\n            count += 2\n        else :\n            count += 1\n    return count\n    \ndef Find_One_Pairs(A,N) : \n    '''\n    Write a python function to find the number of pairs whose xor value is 1.\n    '''\n    L = len(A)\n    count = 0\n    for i in range(1,L-1) :\n        if A[i] & 1 == A[i-1] :\n            count += 1\n        else :\n            count += 2\n    return count\n    \ndef main() : \n    '''\n    Use the below function definitions to print the result\n    '''\n    \n    # Write a python function to find the number of pairs whose xor value is odd.\n    print(\"The number of pairs whose xor value is odd is : {}\".format(Find_Odd_Pair(A,N)))\n    \n    # Write a python function to find the number of pairs whose xor value is even.\n    print(\"The number of pairs whose xor value is even is : {}\".format(Find_Even_Pairs(A,N)))\n    \n    # Write a python function to find the number of pairs whose xor value is 4.\n    print(\"The number of pairs whose xor value is 4 is : {}\".format(Find_Four_Pairs(A,N)))\n    \n    # Write a python function to find the number of pairs whose xor value is 3.\n    print(\"The number of pairs whose xor value is 3 is : {}\".format(Find_Three_Pairs(A,N)))\n    \n    # Write a python function to find the number of pairs whose xor value is 2.\n    print(\"The number of pairs whose xor value is 2 is : {}\".format(Find_Two_Pairs(A,N)))\n    \n    # Write a python function to find the number of pairs whose xor value is 1.\n    print(\"The number of pairs whose xor value is 1 is : {}\".format(Find_One_Pairs(A,N)))\n    \n    \nif __name__ == \"__main__\" : \n    main()"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # your code here\n    if N == 1 :\n        return 0\n    elif N == 2 :\n        return 1\n    else :\n        return 1 + find_Odd_Pair(A,N-1)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_value = 0\n    for i in range(1,N+1) :\n        for j in range(i,N+1) :\n            if A[i] ^ A[j] == 1 :\n                odd_value += 1\n    return odd_value\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c=0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if((A[i]&A[j])==(A[i]^A[j])):\n                c+=1\n    return c\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0] =='':\n        string = string[1:]\n    else:\n        string = string[1:] +''\n    return string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.replace(' ', '')\n    string = string.replace('\\n', '')\n    string = string.replace('\\t', '')\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    res = ''\n    for char in string:\n        if char.isupper():\n            res += char.lower()\n        else:\n            res += char.upper()\n    return res\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.upper() == char.lower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char =='':\n            result += '_ '\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.replace(\"\", \"\")\n    return string.title()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([i if i.isupper() else i.lower() for i in string])\n    \ndef test_toggle_string():\n    print(toggle_string(\"Hellow\"))\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.upper()\n    def toggle(text):\n        return text.swapcase() if string == text else text.lower()\n    return toggle\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in range(n1):\n        s += abs(n2 - i)\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # create empty lists\n    dig_1 = []\n    dig_2 = []\n    dig_diff = []\n    \n    # get digit 1 as integer\n    digit_1 = n1 % 10\n    \n    # calculate difference between digit_1 and digit_2\n    for i in range(0, len(dig_1)):\n        digit_2 = digit_1 % 10\n        diff = digit_2 - digit_1\n        dig_1.append(diff)\n    \n    # sum of the diffs\n    sum = 0\n    for i in range(0, len(dig_1)):\n        sum += int(dig_1[i]) - int(dig_2[i])\n    \n    # return sum of differences\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1 >= 10:\n        digit = n1 % 10\n        n1 = n1 // 10\n        diff += digit\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1-n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10 or n2 < 10:\n        return -1\n    dif = 0\n    while n1 > 9 or n2 > 9:\n        if n1 > n2:\n            dif += n1 - n2\n            n1 = n2\n            n2 = n1\n        else:\n            dif += n2 - n1\n            n2 = n1\n            n1 = n2\n    return dif\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return ((int(n2)-int(n1)) * (int(n2)-int(n1)))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    summ = 0\n    \n    # return the number of digits in the decimal equivalent\n    return sum(int(x) - int(y) for x, y in zip(n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    elif n1 > n2:\n        return digit_distance_nums(n2, n1)\n    elif n1 < n2:\n        return digit_distance_nums(n1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return n1\n    else:\n        return n1 - n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    for i in range(n1):\n        total += (10 ** i) - n1 - n2\n    total = total // 10 ** len(str(n1))\n    return total\n    \ndef digit_distance(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    for i in range(n1):\n        total += (10 ** i) - n1 - n2\n    return total\n    "
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # your code goes here\n    s = 0\n    max_sum = 0\n    for i in range(len(a)):\n        max_sum += a[i]\n        if s < max_sum:\n            s = max_sum\n        if s >= size:\n            break\n        s += a[i]\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # O(n)\n    # if len(a) == 0 or a[0] <= size or size == 1:\n    #     return 0\n    # if len(a) == 1:\n    #     return a[0]\n    # if a[0] < 0:\n    #     return -a[0]\n    # if a[0] == 0:\n    #     return 0\n    \n    sum = 0\n    i = 1\n    j = 1\n    \n    while i < size:\n        sum += a[i]\n        i += 1\n        \n    while j < size:\n        sum -= a[j]\n        j += 1\n    \n    return max(sum, -sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    left = 0\n    right = 0\n    for right in range(size):\n        #find the sum of the current sub list\n        left_sum = 0\n        for left in range(right):\n            left_sum += a[left]\n        #if the sum of the current sub list is greater than or equal to the maximum sum so far, add the left sub list to the sum\n        if left_sum >= max_sum:\n            max_sum = left_sum\n        #else, add the left sub list to the sum\n        right_sum = 0\n        for right in range(right,size):\n            right_sum += a[right]\n            if right_sum >= max_sum:\n                max_sum = right_sum\n    #return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # if the array is empty\n    if len(a) == 0:\n        return 0\n    \n    # build the stack\n    stack = []\n    \n    # traverse the array in the from left to right\n    for i in range(len(a)):\n        \n        # if the element is present in the stack\n        if len(stack) > 0 and a[i] == stack[-1]:\n            # pop the last element from the stack\n            stack.pop()\n            \n        # if the element is not present in the stack\n        else:\n            \n            # add the element in the stack\n            stack.append(a[i])\n            \n            # if the stack is at the end of the array\n            if i == len(a)-1:\n                \n                # sum of all the elements in the stack is the element in the array\n                return sum(stack)\n                \n    # if the stack is empty\n    return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = a[0]\n    i = 1\n    j = 0\n    while i < len(a):\n        if sum > a[i]:\n            sum = a[i]\n        i += 1\n    while j < len(a):\n        if sum < a[j]:\n            sum = a[j]\n        j += 1\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Your code here\n    max_sum = 0\n    sub_sum = 0\n    index = 0\n    for i in range(len(a)):\n        if a[i] > sub_sum:\n            sub_sum = a[i]\n            index = i\n        elif a[i] < sub_sum:\n            sub_sum = a[i]\n    for j in range(index, len(a)):\n        max_sum = max(max_sum, sub_sum + a[j])\n        sub_sum = max(sub_sum, a[j])\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    result = 0\n    if size == 1:\n        return a[0]\n    # For the first index, we only need to compute the sum for its first index.\n    # If there are multiple, the max sub sum will be the max of these.\n    for i in range(size):\n        if i > 0:\n            if a[i] < a[i - 1]:\n                result += a[i]\n        else:\n            result += a[i]\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum_sublist = 0\n    \n    for i in range(size):\n        if i!= 0 and a[i] > a[i - 1]:\n            max_sum_sublist = max(max_sum_sublist, a[i] + max_sub_array_sum(a, i))\n    return max_sum_sublist\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    n = len(a)\n    for i in range(n):\n        for j in range(i, n):\n            max_sum += a[j]\n        if max_sum < size:\n            max_sum = 0\n        else:\n            max_sum = max_sum + a[i]\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    if not test_tup1 or not test_tup2:\n        raise Exception('Must pass in two tuples')\n    if len(test_tup1) == len(test_tup2):\n        return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    for x in test_tup1:\n        if x in test_tup2:\n            result.append(x)\n    result.sort()\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        tup1 = test_tup1\n        tup2 = test_tup2\n    elif len(test_tup2) > len(test_tup1):\n        tup2 = test_tup2\n        tup1 = test_tup1\n    else:\n        raise ValueError('Input tuple cannot be of the same type')\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    i = 0\n    j = 0\n    answer = []\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            answer.append(test_tup1[i])\n            i += 1\n        else:\n            answer.append(test_tup2[j])\n            j += 1\n    answer += test_tup1[i:] + test_tup2[j:]\n    return answer\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    test_tup = test_tup1 | test_tup2\n    return tuple(test_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return sorted(set1.union(set2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    L = len(lst)\n    n = 0\n    curr = 0\n    for i in range(L):\n        curr = lst[i]\n        while(curr!= lst[n]):\n            if (n == L-1):\n                break\n            curr = lst[n]\n            n += 1\n        if(curr == lst[i]):\n            n = i\n        else:\n            n = n + 1\n        if (curr > lst[i]):\n            curr = lst[i]\n    return curr\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 1\n    len_lst = 1\n    len_sub = 1\n    for i in lst:\n        if i.length > len_sub:\n            len_lst = i.length\n            len_sub = i.length\n        elif i.length == len_sub:\n            if i.length > len_lst:\n                len_lst = i.length\n                len_sub = i.length\n    print(f'{len_lst}')\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength=0\n    tempLen=0\n    count=0\n    for x in range(len(lst)):\n        if lst[x]!=lst[0]:\n            count+=1\n        else:\n            tempLen+=1\n            if tempLen>maxLength:\n                maxLength=tempLen\n                print('Longest sublist: ', maxLength)\n            tempLen=0\n    print('Length of the longest sublist: ', maxLength)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                lst[i],lst[j] = lst[j],lst[i]\n                if len(lst) > max_len:\n                    max_len = len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] == lst[i+1]:\n            i += 2\n        else:\n            i += 1\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Create a dictionary to store the number of times each letter appears in lst.\n    dictionary = {}\n    # Loop through the lst, and add the letter to the dictionary if it is in the dictionary.\n    for letter in lst:\n        if letter in dictionary:\n            dictionary[letter] += 1\n        else:\n            dictionary[letter] = 1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    maxlength = 0\n    for i in lst:\n        count += 1\n        l = len(i)\n        if l > maxlength:\n            maxlength = l\n    return maxlength\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\", \", \", \")\n    text = text.replace(\"'\", \"\")\n    text = text.replace('\"', \"\")\n    text = text.replace(\"\\\\\", \"\")\n    text = text.replace('\\n', \"\").replace('\\r', \"\")\n    text = text.replace('\"', \"\").replace('\\'',\"'\")\n    text = text.replace('(', \" ( \").replace(')', \" ) \")\n    text = text.replace('[', \" [ \").replace(']', \" ] \")\n    text = text.replace('{', \" { \").replace('}', \" } \")\n    text = text.replace('{', \" { \").replace('}', \" } \")\n    text = text.replace('[', \" [ \").replace(']', \" ] \")\n    text = text.replace(\"<\", \" < \").replace(\">\", \" > \")\n    text = text.replace('[', \" [ \").replace(']', \" ] \")\n    text = text.replace('{', \" { \").replace('}', \" } \")\n    text = text.replace('{', \" { \").replace('}', \" } \")\n    text = text.replace('(', \" ( \").replace(')', \" ) \")\n    text = text.replace('[', \" [ \").replace(']', \" ] \")\n    text = text.replace('{', \" { \").replace('}', \" } \")\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile(r'\\([^()]*\\)')\n    m = p.findall(text)\n    for a in m:\n        if a[0] == '\"':\n            a = a[1:-1]\n        else:\n            a = a.strip()\n        values.append(a)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Write your code here.\n    return re.findall(r'^(?:(?<=[^\"\\']>))(?:(?<=[^\"\\']>))(?:(?<=[^\"\\']>))', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    # step 1: get the start of the quotation mark\n    start_quotation_mark = text.find('\"')\n    \n    # step 2: get the end of the quotation mark\n    end_quotation_mark = text.rfind('\"')\n    \n    # step 3: return the extracted strings\n    return text[start_quotation_mark + 1 : end_quotation_mark]\n    \ndef extract_quotation_mark(text):\n    '''\n    Write a function to extract the quotation mark from a string.\n    '''\n    \n    # step 1: get the start of the quotation mark\n    start_quotation_mark = text.find('\"')\n    \n    # step 2: get the end of the quotation mark\n    end_quotation_mark = text.rfind('\"')\n    \n    # step 3: return the extracted strings\n    return text[start_quotation_mark + 1 : end_quotation_mark]\n    \ndef extract_class_name(text):\n    '''\n    Write a function to extract the class name from a string.\n    '''\n    \n    # step 1: get the start of the class name\n    start_class_name = text.find('{')\n    \n    # step 2: get the end of the class name\n    end_class_name = text.rfind('}')\n    \n    # step 3: return the extracted strings\n    return text[start_class_name + 1 : end_class_name]\n    \ndef remove_comments(text):\n    '''\n    Write a function to remove comments from a string.\n    '''\n    \n    # step 1: get the start of the comment\n    start_comment = text.find('#')\n    \n    # step 2: get the end of the comment\n    end_comment = text.rfind('#')\n    \n    # step 3: return the extracted strings\n    return text[start_comment + 1 : end_comment]\n    \ndef extract_script_string(text):\n    '''\n    Write a function to extract the script string from a string.\n    '''\n    \n    # step 1: get the start of the script string\n    start_script_string = text.find('<script')\n    \n    # step 2: get the end of the script string\n    end_script_string = text.rfind('</script>')\n    \n    # step 3: return the extracted strings\n    return text[start_script_string + 1 : end_script_string]\n    \ndef extract_a_tag(text):\n    '''\n    Write a function to extract the a tag from a string.\n    '''\n    \n    # step 1: get the start of the a tag\n    start_a_tag = text.find('<a')\n    \n    # step 2: get the end of the a tag\n    end_a_tag = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_tag + 1 : end_a_tag]\n    \ndef extract_a_class_name(text):\n    '''\n    Write a function to extract the a class name from a string.\n    '''\n    \n    # step 1: get the start of the class name\n    start_a_class_name = text.find('<a')\n    \n    # step 2: get the end of the class name\n    end_a_class_name = text.find('</a>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_class_name + 1 : end_a_class_name]\n    \ndef extract_a_script_string(text):\n    '''\n    Write a function to extract the a script string from a string.\n    '''\n    \n    # step 1: get the start of the a tag\n    start_a_script_string = text.find('<a')\n    \n    # step 2: get the end of the a tag\n    end_a_script_string = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_script_string + 1 : end_a_script_string]\n    \ndef extract_a_class(text):\n    '''\n    Write a function to extract the a class from a string.\n    '''\n    \n    # step 1: get the start of the a class\n    start_a_class = text.find('<a')\n    \n    # step 2: get the end of the a class\n    end_a_class = text.find('</a>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_class + 1 : end_a_class]\n    \ndef extract_pre_script(text):\n    '''\n    Write a function to extract the pre script from a string.\n    '''\n    \n    # step 1: get the start of the pre script\n    start_pre_script = text.find('<pre')\n    \n    # step 2: get the end of the pre script\n    end_pre_script = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_pre_script + 1 : end_pre_script]\n    \ndef extract_a_p_tag(text):\n    '''\n    Write a function to extract the a p tag from a string.\n    '''\n    \n    # step 1: get the start of the a tag\n    start_a_p_tag = text.find('<p')\n    \n    # step 2: get the end of the a tag\n    end_a_p_tag = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_p_tag + 1 : end_a_p_tag]\n    \ndef extract_a_p_class(text):\n    '''\n    Write a function to extract the a p class from a string.\n    '''\n    \n    # step 1: get the start of the a tag\n    start_a_p_class = text.find('<p')\n    \n    # step 2: get the end of the a tag\n    end_a_p_class = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_p_class + 1 : end_a_p_class]\n    \ndef extract_a_p_script_string(text):\n    '''\n    Write a function to extract the a script string from a string.\n    '''\n    \n    # step 1: get the start of the a tag\n    start_a_p_script_string = text.find('<p')\n    \n    # step 2: get the end of the a tag\n    end_a_p_script_string = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_p_script_string + 1 : end_a_p_script_string]\n    \ndef extract_a_p_class_name(text):\n    '''\n    Write a function to extract the a class name from a string.\n    '''\n    \n    # step 1: get the start of the a class\n    start_a_p_class_name = text.find('<p')\n    \n    # step 2: get the end of the a class\n    end_a_p_class_name = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_p_class_name + 1 : end_a_p_class_name]\n    \ndef extract_a_p_script_string(text):\n    '''\n    Write a function to extract the a script string from a string.\n    '''\n    \n    # step 1: get the start of the a tag\n    start_a_p_script_string = text.find('<p')\n    \n    # step 2: get the end of the a tag\n    end_a_p_script_string = text.find('>')\n    \n    # step 3: return the extracted strings\n    return text[start_a_p_script_string + 1 : end_a_p_script_string]\n    \ndef extract_a_p_class_name(text):\n    '''\n    Write a function to extract the a class name from a string.\n    '''\n    \n    # step 1: get the start of the a class\n    start_a_p_class_name = text.find('<p')\n    \n    # step "
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    while True:\n        if text[-2] == '\"':\n            return text[:-2].replace(\"'\", \"\").replace('\"', '')\n        else:\n            return text[:-1]\n    return \"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = r'\\(.*?\\)'\n    m = re.findall(p,text)\n    return m\ndef extract_words(text):\n    '''\n    Write a function to extract words from a string.\n    '''\n    p = r'\\w+'\n    m = re.findall(p,text)\n    return m\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\"(?<=\\\")[^\"]+?(?=\")', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '\"')\n    text = text.replace(\"''\", '\"')\n    text = text.replace('\\'', '\"')\n    text = text.replace('\\\"', '\"')\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    t = re.sub('\"',' ',text)\n    t = re.sub(\"(?<=[^'])[\\\"]\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\"(?<=[^'])[\\'](?![^\\'])\",\"\",t)\n    t = re.sub(\""
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef split_data(text):\n    '''\n    Write a function to split a string into a list of string.\n    '''\n    return text.split(';')\ndef parse_values(text):\n    '''\n    Write a function to parse a string of values into a list.\n    '''\n    return text.split(',')\ndef is_correct_error(value):\n    '''\n    Write a function to check whether an input value is correct or not.\n    '''\n    if(re.match('^(0|[1-9]\\d*)$',value)):\n        return True\n    else:\n        return False\ndef normalize_float(value):\n    '''\n    Write a function to normalize the value of a float.\n    '''\n    if(re.match('^(0|[1-9]\\d*\\.\\d*)$',value)):\n        return float(value)\n    else:\n        return 0.0\ndef normalize_int(value):\n    '''\n    Write a function to normalize the value of a int.\n    '''\n    if(re.match('^(0|[1-9]\\d*\\.\\d*)$',value)):\n        return int(value)\n    else:\n        return 0\ndef normalize_boolean(value):\n    '''\n    Write a function to normalize the value of a boolean.\n    '''\n    if(re.match('^(True|False)$',value)):\n        return True\n    else:\n        return False\ndef normalize_str(value):\n    '''\n    Write a function to normalize the value of a string.\n    '''\n    if(re.match('^(.+?)$',value)):\n        return value\n    else:\n        return''\ndef format_string(value):\n    '''\n    Write a function to format a string.\n    '''\n    if(re.match('^(\\w+)\\.(\\w+)\\.(\\w+)$',value)):\n        return value\n    else:\n        return''\ndef format_values(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values(text))\ndef format_values_2(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_2(text))\ndef extract_values_2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_2(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_2(text))\ndef extract_values_3(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_3(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_3(text))\ndef extract_values_4(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_4(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_4(text))\ndef extract_values_5(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_5(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_5(text))\ndef extract_values_6(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_6(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_6(text))\ndef extract_values_7(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_7(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_7(text))\ndef extract_values_8(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_8(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_8(text))\ndef extract_values_9(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_9(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_9(text))\ndef extract_values_10(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_10(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_10(text))\ndef extract_values_11(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_11(text):\n    '''\n    Write a function to format a string.\n    '''\n    return format_string(extract_values_11(text))\ndef extract_values_12(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    text = text.replace(\"'\",'')\n    text = text.replace(',','')\n    text = text.replace(';','')\n    return text\ndef format_values_12(text)"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    p=0\n    for i in range(n): \n        for j in range(n): \n            if i!=j and arr[i]!=arr[j]: \n                p+=1\n    return p \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    output=0\n    for i in range(0,n):\n        if (arr[i]!=arr[i+1]):\n            output=output+1\n    return output\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    s=[]\n    for i in range(len(arr)):\n        if(arr[i]!=arr[i-1]):\n            s.append(arr[i]-1)\n    if(len(s)!=0):\n        print(\"The Number of unordered pairs is:\",len(s))\n    else:\n        print(\"The Number of unordered pairs is:\",1)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict_count = {}\n    count = 0\n    for i in arr:\n        if i not in dict_count:\n            dict_count[i] = 1\n        else:\n            dict_count[i] += 1\n    for i in dict_count:\n        if dict_count[i]!= 1:\n            count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if(arr[i]!= arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] < arr[j]):\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr_array = []\n    for i in range(0,len(arr)):\n        arr_array.append(arr[i])\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr_array[i]!= arr_array[j]):\n                return arr.count(arr_array[i])+arr.count(arr_array[j])\n    return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            a += 1\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            b += 1\n    return a, b\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Create a function\n    def count_pairs(arr,n):\n       \n       #Initialize the array to store the count of possible pairs\n       count_pairs = 0\n       \n       #Iterate through the list, and check the pair against the array\n       for i in range(n):\n           if arr[i]==arr[i+1]:\n              count_pairs+=1\n           return count_pairs\n       return 0\n    \n    #Call the function\n    count_pairs_solution = count_pairs(arr,n)\n    \n    #Print the result\n    print(count_pairs_solution)\n    \n    "
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    chars = []\n    j = 0\n    k = 0\n    while (j < len(word)):\n        if word[j] == word[k]:\n            chars.append(word[j])\n            j += 1\n            k += 1\n        else:\n            if k < len(word):\n                chars.append(word[j])\n                j += 1\n                k += 1\n            else:\n                chars.append(word[j])\n                j += 1\n    return chars\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # example 1:\n    str1 = \"python\"\n    print(str1.split()) \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    #raise NotImplementedError() \n    #return word.split()\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    l = []\n    for i in range(len(word)):\n        l.append(word[i:i + 2])\n    return l\n    \n    \n    # Write a Python function to check if a string is a permutation of itself or not.\n    #\n    # Example:\n    # >>> s = 'abc'\n    # >>> print s == 'abc'\n    # True\n    # >>> t = 'aabc'\n    # >>> print s == t\n    # False\n    #\n    # Note:\n    # Permutations are unordered and contain each character as a permutation of another character.\n    # For example, \"cba\" is a permutation of \"abc\".\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef add(word1, word2): \n    '''\n    Write a python function to add two strings together.\n    '''\n    return ''.join(word1) +'' + ''.join(word2)\ndef find(word): \n    '''\n    Write a python function to find a string in a given string.\n    '''\n    return ''.join(word).find('k')\ndef isPalindrome(word): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    # Reverse the string\n    return word[::-1] == word"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split the string \n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    return [c for c in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if type(word)!= str:\n        raise TypeError('word must be a string')\n    if len(word)<=1:\n        return '',word\n    \n    return word[0:1],word[1:]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while n > 0:\n        res += n%10\n        n = n//10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s=0\n    while(n>0):\n        s=s+(n%10)\n        n=n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while(n > 0):\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    from functools import reduce\n    import math\n    sum = 0\n    digit = 1\n    while digit <= math.floor(math.log10(n)):\n        sum += digit\n        digit = math.pow(10, digit)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n%10 + sum_digits(int(n/10))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    i = 0\n    digits = []\n    while n!= 0:\n        digits.append(n % 10)\n        n = n // 10\n    while len(digits) > 1:\n        digits.append(digits.pop(0) + digits.pop())\n    return sum(digits)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n<0:\n        return 0-n\n    else:\n        return n\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    # Your code here\n    if n<0:\n        return 0\n    \n    return int(str(n)[0])+sum_digits(n//10)\n    \n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    x = 0\n    if n < 10:\n        x = n\n    else:\n        for i in range(10):\n            x = x * 10 + i\n    return x\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_length = len(list1)\n    for i in range(list_length-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if the list is empty\n    if len(list1) == 0:\n        return False\n    \n    # traverse the list, sorted if true, not sorted if false\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            check = False\n    return check\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(0,len(list1)-1):\n        if list1[index] < list1[index+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # your code here\n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list1 = []\n    for i in range(length):\n        list1.append({})\n    return list1\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for index in range(length):\n        dictionaries.append({})\n    return dictionaries\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [None] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(list1)\n    for i in list1:\n        for j in i:\n            print(j,end=' ')\n        print()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        for i in range(len(sublist)):\n            if sublist[i] not in new_list:\n                new_list.append(sublist[i])\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]!= \" \":\n                list1[i][j] = 0\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]!= \" \":\n                list1[i][j] = \" \"\n    \n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if list1:\n        list1.sort(key = len)\n    return list1\n    \ndef sort_sublists_recursive(list2):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if list2:\n        list2.sort(key = len)\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #we can do this via a list comprehension and a sorted() function\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sorted = []\n    for sublist in list1:\n        sublist_sorted.append(sorted(sublist))\n    return sublist_sorted\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    \n    # TODO:  Write your code here\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_string(list1):\n        for i in range(0,len(list1)-1):\n            for j in range(len(list1[i])):\n                if list1[i][j]>list1[i+1][j]:\n                    temp=list1[i][j]\n                    list1[i][j]=list1[i+1][j]\n                    list1[i+1][j]=temp\n    sort_string(list1)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l=[]\n    for i in list1:\n        l.append(i.replace(\" \",\"\"))\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    def sort_sublist(list):\n        sorted_list = []\n        for sublist in list:\n            for elem in sublist:\n                sorted_list.append(elem)\n        return sorted_list\n    \n    \n    if list1 == []:\n        return []\n    \n    sorted_list = sort_sublist(list1)\n    \n    return sorted_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    print(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [num for num in nums if num not in nums]\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # https://leetcode.com/problems/remove-numbers-from-a-string/discuss/149566/Python-easy-solution\n    num_dict = {}\n    for num in nums:\n        if num not in num_dict:\n            num_dict[num] = 1\n        else:\n            num_dict[num] += 1\n    for i in range(len(nums)):\n        if num_dict[nums[i]] > 1:\n            nums[i] = nums[i] % 2\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # hint: https://www.hackerrank.com/challenges/py-set-difference/problem\n    res = set()\n    for num in nums:\n        if num not in res:\n            res.add(num)\n    return list(res)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    # Remove Duplicate Numbers\n    "
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # TODO: Use set to remove duplicate numbers from a given list of numbers\n    new_nums = []\n    \n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    \n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res=[]\n    for i in range(len(nums)):\n        if nums[i] not in res:\n            res.append(nums[i])\n    return res\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    temp_list = []\n    for num in nums:\n        if num not in temp_list:\n            temp_list.append(num)\n    return temp_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in nums:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    print(list(set([int(num) for num in nums])))\n    return None\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 0\n    for number in list_data:\n        total_product += number\n    return total_product\n    \n    \ndef unique_item(list_data):\n    '''\n    Write a python function to calculate the total amount of items in the given list.\n    '''\n    total_items = 0\n    for number in list_data:\n        total_items += 1\n    return total_items\n    \n    \ndef main():\n    '''\n    This function runs the program.\n    '''\n    product = product_name()\n    unique = unique_product(product)\n    unique_item = unique_item(product)\n    print(\"The total amount of items in the product is:\", unique)\n    print(\"The total amount of items in the product is:\", unique_item)\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    sum = 0\n    for data in list_data:\n        sum += data\n    return sum\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # for each item in the list, calculate the product and append to the result list.\n    result_list = []\n    for i in list_data:\n        result = i * i\n        result_list.append(result)\n    print(result_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_result = []\n    for index in range(0,len(list_data)):\n        x = index + 1\n        if index == 0:\n            z = x\n        else:\n            z = x * z\n    return z\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 0\n    for item in list_data:\n        total_product += item\n    return total_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 0\n    \n    for i in list_data:\n        total_product += i\n    \n    return total_product\n    \ndef sum_of_list(list_data):\n    '''\n    Write a python function to calculate the sum of the values in a given list.\n    '''\n    total_sum = 0\n    \n    for i in list_data:\n        total_sum += i\n        \n    return total_sum\n    \ndef average_of_list(list_data):\n    '''\n    Write a python function to calculate the average of the values in a given list.\n    '''\n    total_sum = 0\n    \n    for i in list_data:\n        total_sum += i\n        \n    return total_sum / len(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    unique_values = []\n    \n    for i in list_data:\n        for j in list_data:\n            if i == j:\n                unique_values.append(i*j)\n                break\n    print(unique_values)\n    print('\\n')\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_of_product = {}\n    for i in range(len(list_data)):\n        dict_of_product[list_data[i]] = list_data[i] * list_data[i]\n    return dict_of_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    res = 1\n    for i in range(len(list_data)):\n        res *= list_data[i]\n    return res\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(1, len(list_data)):\n        product = product * list_data[i-1]\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #\n    return 0.5*r**2*h*(1.0-np.cos(np.pi*(r/h)))"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    return pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*(r**2)*(h**3)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14 * (r * h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*np.pi*r**2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = r * 4\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3 * np.pi * r**3)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * r * h\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    def cylinder_area(r,h):\n        return (r**2)*(h**2)\n    return cylinder_area(r,h)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B and A[i:]!=B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-1): \n        if B[i] not in A[i+1:]: \n            return False\n    return True\n    \ndef MergeSort(A,p,r):\n    \"\"\"\n    \"\"\"\n    if r <= p:\n        return\n    m = (p+r)//2\n    MergeSort(A,p,m)\n    MergeSort(A,m,r)\n    \n    Merge(A,p,m,r)\n    return\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m=len(B)\n    for i in range(0,len(A)): \n        if(A[i] not in B): \n            return False\n    return True\n    \nA = [1,2,3,4,5,6,7,8,9]\nB = [6,7,8,9]\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    C = {}\n    for i in A:\n        if i in B:\n            C[i] = 1\n        else:\n            C[i] = 0\n    return C\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return (len(A)==len(B)) and (set(A)==set(B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    from collections import defaultdict\n    s1=defaultdict(list)\n    s2=defaultdict(list)\n    \n    for i in range(len(A)):\n        s1[A[i]].append(i)\n    for i in range(len(B)):\n        s2[B[i]].append(i)\n    \n    for i in range(len(A)):\n        for j in range(len(B)):\n            if (s1[A[i]] and s2[B[j]]) or (s2[B[j]] and s1[A[i]]):\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # B is the list to check for sublist\n    # A is the list to compare the sublist\n    \n    return B == A[1:] or A == B[1:]\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A[0]!= B[0]:\n        return False\n    #if len(A)>= len(B):\n        #return False\n    else:\n        for i in range(0,len(A)):\n            if A[i]!= B[i]:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        for i in range(len(A),len(B)):\n            if A[i] not in B:\n                return False\n        return True\n    else:\n        for i in range(len(A),len(B)):\n            if A[i] not in B:\n                return False\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    A.sort()\n    B.sort()\n    \n    if len(A)!= len(B):\n        return False\n    \n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return last_Digit_Factorial(n//-1)\n    return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return -1\n    else: \n        i = 1\n        fact = 1\n        while fact <= n: \n            fact = fact*i \n            i += 1\n        return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # write your code here\n    if (n == 0):\n        return 0\n    else:\n        return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    d = 0\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    for i in range(1, int(math.log(n, 2))+1):\n        d += fact\n        fact = fact*i\n    return "
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0: \n        print(\"Sorry, factorial does not exist for negative numbers\")\n        return \n    elif n==0: \n        return 1\n    elif n==1: \n        return n \n    elif n%2==0: \n        print(last_Digit_Factorial(n//2)) \n        return n//2\n    else: \n        print(n%2) \n        return n%2\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial = 1\n    for i in range(1, n):\n        Factorial = Factorial * i\n    return Factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    f = 1\n    for i in range(1,n):\n        f = f * i\n    return f\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n==0:\n        return 0\n    elif n<0:\n        raise ValueError\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<=1:\n        return n\n    else:\n        return n % 10 + last_Digit_Factorial(n//10)\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = n - 1\n    while i >= 0:\n        if(n % 10 == i % 10):\n            n = n / 10\n        else:\n            n = n - (n % 10)\n        i = i - 1\n    return n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(0,len(list1)-1):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list3,list2,list1]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Base case\n    if len(list1)==len(list2)==len(list3):\n        return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n    else:\n        # Recursive case\n        if len(list3)>1:\n            return [list1[i] for i in range(len(list1))] + list3[:len(list3)-1] + [list2[i] for i in range(len(list2))] + list3[len(list3)-1:]\n        else:\n            return [list1[i] for i in range(len(list1))] + list2[:len(list2)-1] + list3[:len(list3)-1]\n        "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result=[]\n    n=len(list1)\n    m=len(list2)\n    for i in range(n):\n        for j in range(m):\n            result.append(list1[i][j]+list2[j][i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result=[]\n    i=0\n    while i<len(list1):\n        j=0\n        while j<len(list2):\n            result.append(list1[i]+list2[j]+list3[j])\n            j+=1\n        i+=1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    s = list(zip(*list1,*list2,*list3))\n    s = [i for i in s]\n    s = [i for i in s]\n    s = [i for i in s]\n    return s\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list=[None]*len(list1)\n    for i in range(len(list2)):\n        inter_list[i]=list1[i]+list2[i]+list3[i]\n    return inter_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # if the lengths are not the same, the function would return an error\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return None\n    list4 = []\n    for x in range(len(list1)):\n        list4.append(list1[x]+list2[x]+list3[x])\n    return list4\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize empty dictionary\n    dissimilar_dict = {}\n    # Initialize empty list\n    lst = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if tup1[1]==tup2[1]:\n                dissimilar.append(tup1)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return_lst = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for element in test_tup1:\n        if element in test_tup2:\n            dissimilar.append(element)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return None\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst3 = list(set(lst1) & set(lst2))\n    print(lst3)\n    return lst3"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # find the set of elements in the test_tup1 and the test_tup2\n    tup_set1 = set(test_tup1)\n    tup_set2 = set(test_tup2)\n    # find the set of elements in test_tup1 and test_tup2\n    tup_set1 = tup_set1.union(tup_set2)\n    # find the set of elements in test_tup2 and test_tup1\n    tup_set2 = tup_set2.union(tup_set1)\n    # return the intersection of tup_set1 and tup_set2\n    return tup_set1.intersection(tup_set2)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    dissimilar = []\n    \n    # We have to check if both tuples are of equal length\n    if len(test_tup1) == len(test_tup2):\n        \n        # For each element, we know the count of it\n        for i in range(len(test_tup1)):\n            count_1 = test_tup1[i][1]\n            count_2 = test_tup2[i][1]\n            \n            # We find the pair where it's equal\n            if count_1 == count_2:\n                \n                # If the pair is already present, we store the pair\n                if test_tup1[i] in dissimilar:\n                    pass\n                \n                # If it's not, we add it to the dissimilar list\n                else:\n                    dissimilar.append(test_tup1[i])\n            \n            # If the pair is not equal, we add the pair to the dissimilar list\n            else:\n                dissimilar.append((test_tup1[i],count_1))\n                dissimilar.append((test_tup2[i],count_2))\n                \n        # We return the dissimilar list\n        return dissimilar\n    else:\n        return print(\"Only tuples of equal length are supported\")\n        "
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    i = 0\n    while(i < len1):\n        if (test_tup1[i][1] < test_tup2[i][1]):\n            test_tup1.pop(i)\n        else:\n            test_tup2.pop(i)\n        i += 1\n    print(test_tup1)\n    print(test_tup2)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    difference_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            difference_tup.append(test_tup2[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    test_list1.sort()\n    test_list2.sort()\n    \n    for i in range(len(test_list1)):\n        if test_list1[i]!= test_list2[i]:\n            return test_list1[i]\n    \n    return None\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = tuple(sorted(test_tuple))\n    if test_tuple in even_fnc:\n        return even_fnc[test_tuple]\n    else:\n        return False\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven(tuple):\n        '''\n        Recursively find any elements in the tuple that are not even,\n        and remove them from the tuple.\n        '''\n        for index, value in enumerate(tuple):\n            if index % 2!= 0:\n                if type(value) is tuple:\n                    remove_uneven(value)\n                elif value % 2!= 0:\n                    tuple[index] = remove_uneven(tuple[index])\n        return tuple\n    def odd_ele(tuple):\n        '''\n        Recursively find any elements in the tuple that are not even,\n        and remove them from the tuple.\n        '''\n        for index, value in enumerate(tuple):\n            if index % 2!= 0:\n                if type(value) is tuple:\n                    remove_uneven(value)\n                elif value % 2!= 0:\n                    tuple[index] = remove_uneven(tuple[index])\n        return tuple\n    odd_fnc(test_tuple)\n    remove_uneven(even_fnc(test_tuple))\n    odd_fnc(remove_uneven(even_fnc(test_tuple)))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = 0\n    odd = 0\n    new_even = even_fnc(test_tuple[0])\n    new_odd = odd_fnc(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if test_tuple[i] % 2 == 0:\n            even += test_tuple[i]\n        else:\n            odd += test_tuple[i]\n    return even, odd, new_even, new_odd\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_num = 0\n    even_even_odd = 0\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    test_tuple = list(test_tuple)\n    test_tuple.remove(0)\n    return tuple(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def count_ways(test_tuple): \n        '''\n        count the ways that every item in a tuple can be found as even index\n        '''\n        total = 0\n        # create an empty dictionary\n        odd_dict = {}\n        # initialize an empty dictionary\n        for k,v in test_tuple.items():\n            # if odd number, add odd number to the dictionary\n            if k % 2 == 1:\n                odd_dict[k] = v\n        # loop through even numbers from 2 to size\n        # print the odd dict\n        for i in odd_dict:\n            # if odd number, add even number to the dictionary\n            if odd_dict[i] % 2 == 0:\n                total += odd_dict[i]\n        # return the total\n        return total\n    \n    # loop through the nested tuple and check to see if it is even\n    # if so, add it to the dictionary\n    def check_even(test_tuple):\n        '''\n        check if every item in a tuple can be found as even index\n        '''\n        total = 0\n        # create an empty dictionary\n        even_dict = {}\n        # initialize an empty dictionary\n        for k,v in test_tuple.items():\n            # if odd number, add odd number to the dictionary\n            if k % 2!= 0:\n                even_dict[k] = v\n        # loop through even numbers from 2 to size\n        # print the even dict\n        for i in even_dict:\n            # if even number, add even number to the dictionary\n            if even_dict[i] % 2 == 0:\n                total += even_dict[i]\n        # return the total\n        return total\n    \n    # loop through the nested tuple and check to see if it is even\n    # if so, add it to the dictionary\n    def check_odd(test_tuple):\n        '''\n        check if every item in a tuple can be found as even index\n        '''\n        total = 0\n        # create an empty dictionary\n        odd_dict = {}\n        # initialize an empty dictionary\n        for k,v in test_tuple.items():\n            # if odd number, add odd number to the dictionary\n            if k % 2!= 0:\n                odd_dict[k] = v\n        # loop through even numbers from 2 to size\n        # print the odd dict\n        for i in odd_dict:\n            # if odd number, add odd number to the dictionary\n            if odd_dict[i] % 2 == 1:\n                total += odd_dict[i]\n        # return the total\n        return total\n    \n    # create the total\n    total = 0\n    # for every tuple in the test_tuple\n    for item in test_tuple:\n        # if item is even\n        if item % 2 == 0:\n            # add the item to the total\n            total += item\n    # return the total\n    return total\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    even_tuple = test_tuple[:even_count]\n    odd_tuple = test_tuple[even_count:odd_count+1]\n    odd_tuple.extend(even_tuple)\n    odd_tuple.extend(odd_tuple)\n    odd_tuple = tuple(odd_tuple)\n    odd_fnc(odd_tuple)\n    return odd_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    a, b = test_tuple[0], test_tuple[1]\n    def even_even(even_tuple):\n        '''\n        Take a tuple and return a tuple of even elements and odd elements, while maintaining the order of elements.\n        '''\n        even_lst = []\n        odd_lst = []\n        for i in even_tuple:\n            if i % 2 == 0:\n                even_lst.append(i)\n            else:\n                odd_lst.append(i)\n        return even_lst, odd_lst\n    def even_odd(odd_tuple):\n        '''\n        Take a tuple and return a tuple of even elements and odd elements, while maintaining the order of elements.\n        '''\n        even_lst = []\n        odd_lst = []\n        for i in odd_tuple:\n            if i % 2 == 1:\n                even_lst.append(i)\n            else:\n                odd_lst.append(i)\n        return even_lst, odd_lst\n    even_even, odd_odd = even_even(even_fnc(even_tuple, odd_tuple))\n    return even_even + odd_odd + odd_even + even_odd\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i]%2 == 0:\n            even_list.append(test_tuple[i])\n    even_tuple = tuple(even_list)\n    return even_fnc(even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc_res = even_fnc(test_tuple)\n    for i in range(0, len(test_tuple)):\n        if even_fnc_res[i] == 0:\n            even_fnc_res[i] = 1\n        else:\n            even_fnc_res[i] = 0\n    even_fnc_res = tuple(even_fnc_res)\n    return even_fnc_res\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    def get_height(base):\n        return base + base\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4*(b+s-1)) * (b-1)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = int(s)\n    b = int(b)\n    s_area = (s**2)*(b**2)\n    return s_area\ndef pyramid(b,h):\n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    h = int(h)\n    b = int(b)\n    s_area = (b**2)*(h**2)\n    return s_area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s == 0:\n        return 0\n    elif s < 0:\n        return \"ERROR:height must be non-negative\"\n    elif (b%4 == 0 and b > 1) or (b%4 == 1 and b == 3):\n        return (4*s*(b/4))\n    elif (b%2 == 0 and b > 1) or (b%2 == 1 and b == 3):\n        return (s*(b/2))\n    elif (b%2 == 0 and b < 3) or (b%2 == 1 and b == 4):\n        return (2*s*(b/2))\n    elif (b%2 == 0 and b > 3) or (b%2 == 1 and b == 4):\n        return (3*s*(b/4))\n    else:\n        return \"ERROR:base edge should be odd or even\"\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    m = len(b) # The number of the edges in the pyramid\n    n = len(b[0]) # The number of the sides in the pyramid\n    A = (((1+m)**2)*s) + ((2*m+1)*(m+1))\n    B = (((1+n)**2)*s) + ((2*n+1)*(n+1))\n    return A * B\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Write your code here\n    a = ((s*s)/2)\n    b = ((b*b)/2)\n    return a*b"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = int(s)\n    b = int(b)\n    if s > b:\n        return b * s\n    else:\n        return b * s * s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    for i in range(1,s):\n        print(f'[{i}] '*b, end='')\n    print('')\n    for i in range(1,s):\n        print(f'[{i}] '*(i*b), end='')\n        print('')\n    print('')\n    for i in range(1,s):\n        print(f'[{i}] '*(s-i*b), end='')\n        print('')\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    #raise NotImplementedError('Dictionary is not empty')\n    for x in dict1:\n        if type(dict1[x]) is not dict:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1==None:\n        return \"No dictionary provided\"\n    else:\n        return \"Empty dictionary\"\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 is not None\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key, value in dict1.items():\n        if(type(value)!= dict):\n            return(False)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return 'Your dictionary is empty'\n    else:\n        return 'Your dictionary is not empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    count = 1\n    summ = 0\n    while count <= num:\n        summ += (count + 1)\n        count += 1\n    return summ\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    from math import factorial\n    import math\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 0\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 2\n    elif num == 4:\n        return 6\n    elif num == 5:\n        return 12\n    elif num == 6:\n        return 24\n    elif num == 7:\n        return 60\n    elif num == 8:\n        return 120\n    elif num == 9:\n        return 720\n    elif num == 10:\n        return 1440\n    elif num == 11:\n        return 2160\n    elif num == 12:\n        return 4320\n    elif num == 13:\n        return 4830\n    elif num == 14:\n        return 5120\n    elif num == 15:\n        return 6240\n    elif num == 16:\n        return 7240\n    elif num == 17:\n        return 7280\n    elif num == 18:\n        return 9300\n    elif num == 19:\n        return 10600\n    elif num == 20:\n        return 11600\n    elif num == 21:\n        return 12600\n    elif num == 22:\n        return 13600\n    elif num == 23:\n        return 14600\n    elif num == 24:\n        return 15600\n    elif num == 25:\n        return 16600\n    elif num == 26:\n        return 17600\n    elif num == 27:\n        return 18600\n    elif num == 28:\n        return 19600\n    elif num == 29:\n        return 2160\n    elif num == 30:\n        return 2320\n    elif num == 31:\n        return 2460\n    elif num == 32:\n        return 2560\n    elif num == 33:\n        return 2640\n    elif num == 34:\n        return 2760\n    elif num == 35:\n        return 2880\n    elif num == 36:\n        return 2980\n    elif num == 37:\n        return 3080\n    elif num == 38:\n        return 3120\n    elif num == 39:\n        return 31120\n    elif num == 40:\n        return 3240\n    elif num == 41:\n        return 34240\n    elif num == 42:\n        return 35240\n    elif num == 43:\n        return 36240\n    elif num == 44:\n        return 37240\n    elif num == 45:\n        return 38240\n    elif num == 46:\n        return 39240\n    elif num == 47:\n        return 40240\n    elif num == 48:\n        return 41240\n    elif num == 49:\n        return 42240\n    elif num == 50:\n        return 43240\n    elif num == 51:\n        return 44240\n    elif num == 52:\n        return 45240\n    elif num == 53:\n        return 46240\n    elif num == 54:\n        return 47240\n    elif num == 55:\n        return 48240\n    elif num == 56:\n        return 49240\n    elif num == 57:\n        return 50240\n    elif num == 58:\n        return 51240\n    elif num == 59:\n        return 52240\n    elif num == 60:\n        return 53240\n    elif num == 61:\n        return 54240\n    elif num == 62:\n        return 55240\n    elif num == 63:\n        return 56240\n    elif num == 64:\n        return 57240\n    elif num == 65:\n        return 58240\n    elif num == 66:\n        return 59240\n    elif num == 67:\n        return 60240\n    elif num == 68:\n        return 61240\n    elif num == 69:\n        return 62240\n    elif num == 70:\n        return 63240\n    elif num == 71:\n        return 64240\n    elif num == 72:\n        return 65240\n    elif num == 73:\n        return 66240\n    elif num == 74:\n        return 67240\n    elif num == 75:\n        return 68240\n    elif num == 76:\n        return 69240\n    elif num == 77:\n        return 70240\n    elif num == 78:\n        return 71240\n    elif num == 79:\n        return 72240\n    elif num == 80:\n        return 73240\n    elif num == 81:\n        return 74240\n    elif num == 82:\n        return 75240\n    elif num == 83:\n        return 76240\n    elif num == 84:\n        return 77240\n    elif num == 85:\n        return 78240\n    elif num == 86:\n        return 79240\n    elif num == 87:\n        return 80240\n    elif num == 88:\n        return 81240\n    elif num == 89:\n        return 82240\n    elif num == 90:\n        return 83240\n    elif num == 91:\n        return 84240\n    elif num == 92:\n        return 85240\n    elif num == 93:\n        return 86240\n    elif num == 94:\n        return 87240\n    elif num == 95:\n        return 88240\n    elif num == 96:\n        return 89240\n    elif num == 97:\n        return 90240\n    elif num == 98:\n        return 91240\n    elif num == 99:\n        return 92240\n    elif num == 100:\n        return 93240\n    elif num == 101:\n        return 94240\n    elif num == 102:\n        return 95240\n    elif num == 103:\n        return 96240\n    elif num == 104:\n        return 97240\n    elif num == 105:\n        return 98240\n    elif num == 106:\n        return 99240\n    elif num == 107:\n        return 100240\n    elif num == 108:\n        return 101240\n    elif num == 109:\n        return 102240\n    elif num == 110:\n        return 103240\n    elif num == 111:\n        return 104240\n    elif num == 112:\n        return 105240\n    elif num == 113:\n        return 106240\n    elif num == 114:\n        return 107240\n    elif num == 115:\n        return 108240\n    elif num == 116:\n        return 109240\n    elif num == 117:\n        return 110240\n    elif num == 118:\n        return 111240\n    elif num == 119:\n        return 112240\n    elif num == 120:\n        return 113240\n    elif num == 121:\n        return 114240\n    elif num == 122:\n        return 115240\n    elif num == 123:\n        return 116240\n    elif num == 124:\n        return 117240\n    elif num == 125:\n        return 118240\n    elif num == 126:\n        return 119240\n    elif num == 127:\n        return 120240\n    elif num == 128:\n        return 121240\n    elif num == 129:\n        return 122240\n    elif num == 130:\n        return 123240\n    elif num == 131:\n        return 124240\n    elif num == 132:\n        return 125240\n    elif num == 133:\n        return 126240\n    elif num == 134:\n        return 127240\n    elif num == 135:\n        return 128240\n    elif num == 136:\n        return 129240\n    elif num == 137:\n        return 130240\n    elif num == 138:\n        return 131240\n    elif num == 139:\n        return 132240\n    elif num == 140:\n        return 133240\n    elif num == 141:\n        return 134240\n    elif num == 142:\n        return 135240\n    elif num == 143:\n        return 136240\n    elif num == 144:\n        return 137240\n    elif num == 145:\n        return 138240\n    elif num == 146:\n        return 139240\n    elif num == 147:\n        return 140240\n    elif num == 148:\n        return 141240\n    elif num == 149:\n        return 142240\n    elif num == 150:\n        return 143240\n    elif num == 151:\n        return 144240\n    elif num == 152:\n        return 145240\n    elif num == 153:\n        return 146240\n    elif num == 154:\n        return 147240\n    elif nu"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    count = 0\n    n = 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    i = 0\n    result = 0\n    if num == 0:\n        return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * catalan_number(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print(\"Invalid input\")\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        raise ValueError(\"n must be a positive integer\")\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c=1\n    for i in range(1,num+1):\n        c=c+c*i\n    return c\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<=0:\n        return 0\n    \n    catalans = [0]\n    for i in range(1,num+1):\n        catalans.append(catalans[i-1]+catalans[i])\n    \n    return catalans[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return pow(num, (num - 1))\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos_ly = 0\n    pos_ly_end = 0\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] in ['ly', 'lyi', 'lyii', 'lyiii']:\n            if text[i] == 'ly':\n                pos_ly = i + 1\n            else:\n                pos_ly_end = i\n            adverbs.append(text[pos_ly:pos_ly_end])\n    adverbs = [adverbs[i] for i in range(len(adverbs)) if len(adverbs[i]) > 0 and adverbs[i]!= 'ly']\n    if len(adverbs) > 0:\n        return adverbs[0]\n    else:\n        return 'ly'\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # remove unnecessary space and newline characters.\n    text = text.replace('\\n', '').replace('\\r', '')\n    # split the string into a list of words.\n    words = re.split(r'[\\s\\S]+', text)\n    # find all adverbs ending with ly.\n    adverbs = [word for word in words if re.match(r'ly\\b', word)]\n    # find the positions of the first adverb ending with ly.\n    return [adverb.index(ly) + 1 for adverb in adverbs]\n    \ndef find_frequencies(text, adverbs):\n    '''\n    Write a function to find the number of times a given adverb occurs in a given string.\n    '''\n    # remove unnecessary space and newline characters.\n    text = text.replace('\\n', '').replace('\\r', '')\n    # split the string into a list of words.\n    words = re.split(r'[\\s\\S]+', text)\n    # find all adverbs ending with ly.\n    ly_adverbs = [adverb for adverb in words if re.match(r'ly\\b', adverb)]\n    # find all adverbs ending with ly.\n    ly_adverbs = [adverb.strip() for adverb in ly_adverbs]\n    # remove the adverbs that are in ly.\n    ly_adverbs = [adverb for adverb in ly_adverbs if adverb!= ly_adverbs[-1]]\n    # count the frequency of each adverb in the string.\n    frequency_map = {}\n    for ly_adverb in ly_adverbs:\n        frequency_map[ly_adverb] = 0\n    for word in words:\n        # find the position of the ly adverb.\n        for ly_adverb in ly_adverbs:\n            # if the ly adverb is in the word.\n            if ly_adverb in word:\n                # count the frequency of the ly adverb in the word.\n                frequency_map[ly_adverb] = frequency_map[ly_adverb] + 1\n    # convert the dictionary to a list.\n    ly_adverbs = list(frequency_map.values())\n    ly_adverbs = list(frequency_map.keys())\n    # find the first adverb ending with ly and its positions in the text.\n    adverbs = [adverb for adverb in adverbs if adverb.startswith(ly_adverbs[0])]\n    return adverbs, ly_adverbs, frequency_map\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    start_positions = []\n    end_positions = []\n    for i in range(len(text)):\n        if text[i] in [\"ly\",\"ly\"]:\n            start_positions.append(i)\n        else:\n            end_positions.append(i)\n    return start_positions, end_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # write your code here\n    search = re.compile(r'(ly)(?:\\d+$)')\n    match = search.search(text)\n    if match:\n        return match.group(1) + 'ly'\n    else:\n        return text\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Your code here\n    # test case\n    # string = \"apple \" * 5 + \"battery\"\n    # expected = [8, 15]\n    # try:\n    #     adverbs = find_adverbs(string)\n    #     assert adverbs == expected\n    # except AssertionError as e:\n    #     print(e)\n    #     exit()\n    # try:\n    #     pattern = r'ly(?: \\w+ )?(?:blue|red|brown|green|blue|green|red|green|red|green|red|red|blue|green|green|red|green|blue|green|red|green|red|green|green|red|green|red|green|green|green|red|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|gree"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # your code goes here\n    adverbs = re.findall(r'\\b(ly|ly) [a-z]*\\b', text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"\", \"\")\n    return re.findall('[\\w\\s]{2}ly$', text)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list_of_adverbs = ['adverb', 'adverbally', 'adverbism', 'adverbist']\n    for i in range(len(list_of_adverbs)):\n        for j in range(len(text)):\n            if list_of_adverbs[i] in text[j]:\n                position_of_adverb = j+1\n                if position_of_adverb > len(text)-1:\n                    break\n                else:\n                    print(position_of_adverb)\n                    print(list_of_adverbs[i] + '\\t' + text[position_of_adverb])\n    return\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'[(|\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\s\\w\\"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_end_ly = text.split(\".\")\n    adverb_list = []\n    for i in adverb_end_ly:\n        adverb_list.append(i.split(\"ly\"))\n    adverb_ly = []\n    for i in adverb_list:\n        adverb_ly.append(i[-1])\n    return adverb_ly\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    my_heap = []\n    for item in items:\n        heapq.heappush(my_heap,item)\n    items_2 = []\n    while len(my_heap)>n:\n        heapq.heappop(my_heap)\n        items_2.append(heapq.heappop(my_heap))\n    return items_2\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    heapq.heapify(h)\n    #num_items = len(items)\n    for i in range(n):\n        heapq.heappush(h,items[i])\n    return(h)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[n])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Dictionary of sorted items (keys are their ids)\n    sorted_items=sorted(items.items(),key=lambda x: x[1])\n    #heap object, where the item is sorted and the priority is the heap's priority\n    heap=[]\n    #if there's more than n items, put them in the heap\n    if len(sorted_items)>=n:\n        #put them in the heap\n        heapq.heappush(heap,sorted_items[0][0])\n        #set a new priority\n        new_prio = 0\n        #if the heap is sorted, we just need to iterate over it and push the new items into the heap\n        while heap:\n            #pop the item from the heap\n            item = heapq.heappop(heap)\n            #if the item is the maximum item in the heap, we've put it into the heap\n            if item==sorted_items[0][0]:\n                heapq.heappush(heap,sorted_items[0][0])\n                heapq.heappush(heap,sorted_items[0][0])\n                new_prio += sorted_items[0][1]\n            #else, if the item is not in the heap, we're adding it\n            else:\n                new_prio += sorted_items[0][1]\n                heapq.heappush(heap,sorted_items[0][0])\n        #we know the new prio\n        #now, there's a new priority\n        return new_prio\n    #if there's n items, we just return the prio of the most expensive items\n    else:\n        return sorted_items[0][1]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for item in items:\n        heapq.heappush(h,(item[1],item))\n    \n    for i in range(n):\n        print(heapq.heappop(h)[1])\n    \ndef time_complexity(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for item in items:\n        heapq.heappush(h,(item[1],item))\n    \n    heapq.heapify(h)\n    for i in range(n):\n        print(heapq.heappop(h)[1])\n    \ndef functions():\n    '''\n    Write a function that takes a list and returns a list of the smallest numbers in the list.\n    '''\n    list = [10, 20, 50, 20, 100, 15, 20]\n    \n    return list\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heappush(heap,(0,0))\n    for i in range(n):\n        heapq.heappush(heap,(items[i][0],i))\n    ans = []\n    while len(heap)>1:\n        x,y = heapq.heappop(heap)\n        ans.append(y)\n        heapq.heappush(heap,[items[y][0],y])\n    return ans"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,items[i][1])\n    for i in range(n-1):\n        heapq.heappop(heap)\n    print(heap)\n    return heap\ndef expensive_items_subsets(items,n):\n    '''\n    Write a function to find all the n least expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,items[i][1])\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(-item,item))\n        elif item < heap[0][0]:\n            heapq.heapreplace(heap,(-item,item))\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for x in items:\n        if x[1] < n:\n            heapq.heappush(heap,(x[1],x))\n    return heap\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return l\n    else:\n        return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #write your code here\n    l.append(l[0])\n    for i in range(0,n):\n        l.append(l[i])\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return(l[:n])\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = l[:n]\n    t = l[n:]\n    return s,t\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l is None:\n        return None\n    elif len(l) < n:\n        return None\n    else:\n        return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    "
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n    \ndef list_to_string(listx):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return ', '.join(listx)\n    \n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple = ()\n    for i in listx:\n        tuple += (i,)\n    return tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for x in listx:\n        tup += (x, )\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_tuple2(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    for i in range(len(listx)):\n        listx[i] = tuple(listx[i])\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    diff = 0\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n        diff += num - max_num - min_num\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return smallest - largest\n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    max1 = nums[0]\n    min1 = nums[0]\n    for i in nums:\n        if i > max1:\n            max1 = i\n        if i < min1:\n            min1 = i\n    return max1-min1\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    import math\n    import math\n    difference=[]\n    temp_difference=[]\n    temp_sum=0\n    for i in range(len(nums)):\n        temp_sum=temp_sum+nums[i]\n    temp_difference=temp_sum-temp_sum*(math.log(temp_sum,2))\n    for i in range(len(nums)):\n        difference.append(abs(temp_difference))\n    return difference\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)<2:\n        return None\n    elif len(nums)==2:\n        if nums[0]<nums[1]:\n            return nums[0]-nums[1]\n        else:\n            return nums[1]-nums[0]\n    elif len(nums)==3:\n        if nums[0]<nums[1] and nums[1]<nums[2]:\n            return nums[1]-nums[0]\n        elif nums[0]>nums[1] and nums[1]>nums[2]:\n            return nums[1]-nums[0]\n        else:\n            return nums[2]-nums[1]\n    else:\n        if nums[0]<nums[1] and nums[1]<nums[2] and nums[0]>nums[1] and nums[1]>nums[2]:\n            return nums[2]-nums[1]\n        elif nums[0]>nums[1] and nums[1]>nums[2] and nums[0]<nums[1] and nums[1]<nums[2]:\n            return nums[1]-nums[0]\n        elif nums[0]>nums[1] and nums[1]>nums[2] and nums[0]<nums[1] and nums[0]>nums[2]:\n            return nums[0]-nums[1]\n        elif nums[0]>nums[1] and nums[1]>nums[2] and nums[0]>nums[1]:\n            return nums[2]-nums[1]\n        else:\n            return nums[0]-nums[2]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = 0\n    for i in range(len(nums) - 1):\n        if nums[i] < nums[i+1]:\n            diff += 1\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # if list is not empty\n    if nums:\n        # total number of numbers in list\n        total = len(nums)\n        # initialize result\n        result = []\n        # for each element in list\n        for i in range(0, total):\n            # find the largest and smallest element in the list\n            smallest = max(nums)\n            largest = min(nums)\n            # add the elements of the smallest and largest values in result\n            result.append((smallest, largest))\n        # return result\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = nums[0]\n    biggest = nums[0]\n    for num in nums:\n        if num > biggest:\n            biggest = num\n        elif num < smallest:\n            smallest = num\n    return smallest - biggest"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # n = len(nums)\n    \n    # if n==1:\n    #     return 0\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0 or b == 0 or b > a:\n        return [0, 0]\n    if a == b:\n        return [a, b]\n    if a > b:\n        return [a, b]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return a\n    elif a > b:\n        return b\n    elif a < b:\n        return a\n    \n    squares = []\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    max_num = max(a, b)\n    min_num = min(a, b)\n    if max_num < min_num:\n        return (False)\n    elif max_num == min_num:\n        return (True)\n    elif max_num - min_num == 0:\n        return (True)\n    else:\n        return (False)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert is_integer(a) and is_integer(b), \"a and b must be integers\"\n    assert a % b == 0, \"a and b must be divisible by b\"\n    assert is_proper(a, b), \"a must be perfect squares\"\n    result = []\n    for i in range(a, b + 1):\n        if is_perfect_square(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    if b == 1:\n        return a\n    if abs(b) < a:\n        return a\n    d = abs(b)\n    num = a\n    square = 1\n    for i in range(2, d + 1):\n        if num % i == 0:\n            num = num / i\n            square = 1\n            if i!= 1 and num == 1:\n                return square\n            if num!= 1:\n                square = square * i\n    return square\n    \n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    m = (b * b - 4 * a * b) // 2\n    if m > 0:\n        return False\n    else:\n        return (a + b) % 2 == 0\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return False\n    elif b == 0:\n        return False\n    elif a == 1:\n        return True\n    elif a < 0 or b < 0:\n        return False\n    elif a % 2 == 0 and b % 2 == 0:\n        return True\n    elif a % 2 == 0:\n        return perfect_squares(a // 2, b // 2)\n    elif b % 2 == 0:\n        return perfect_squares(a // 2, b // 2)\n    else:\n        return False\n        \n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return []\n    else:\n        numerator, denominator = a, b\n        while denominator % 2 == 0:\n            numerator, denominator = numerator / 2, denominator / 2\n        \n        res = []\n        while numerator!= 1:\n            if numerator % 2!= 0:\n                res.append(numerator)\n                numerator = numerator / 2\n            else:\n                numerator = numerator * 3 + 1\n        \n        return res[::-1]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = len(a)\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i]-a[j]) % 2 == 0:\n                pairs += 1\n    if pairs == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # convert numbers to string\n    numbers = str(a) + str(b)\n    # convert the string to a list\n    numbers = list(numbers)\n    # create a counter\n    counter = 0\n    # create a for loop that checks each number\n    for i in range(len(numbers)):\n        # if it's a number, add 1 to counter\n        if numbers[i]!= '1':\n            counter += 1\n    # if counter is odd, return -1\n    if counter % 2 == 0:\n        return -1\n    # else if counter is even, return the square of the number\n    if counter % 2 == 1:\n        return int(numbers[counter]) * int(numbers[counter+1])\n    # else return the square of the number\n    else:\n        return int(numbers[counter]) * int(numbers[counter+1])\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x\n    b = y\n    c = 2*x*y*cmath.pi\n    d = 2*y*x*cmath.pi\n    return a,b,c,d\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Coordinate transforms\n    c = complex(x,y)\n    #print(c)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sqrt(r**2 + i**2),5)\ndef polar_to_rect(a,b):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sqrt(r**2 + i**2),5)\ndef polar_to_circ(a,b):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sqrt(r**2 - i**2),5)\ndef polar_to_sin(a,b):\n    '''\n    Write a function to convert polar coordinates to sin coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sin(r),5)\ndef polar_to_cos(a,b):\n    '''\n    Write a function to convert polar coordinates to cos coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.cos(r),5)\ndef polar_to_tan(a,b):\n    '''\n    Write a function to convert polar coordinates to tan coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.tan(r),5)\ndef polar_to_sinh(a,b):\n    '''\n    Write a function to convert polar coordinates to sinh coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sinh(r),5)\ndef polar_to_cosh(a,b):\n    '''\n    Write a function to convert polar coordinates to cosh coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.cosh(r),5)\ndef polar_to_tanh(a,b):\n    '''\n    Write a function to convert polar coordinates to tanh coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.tanh(r),5)\ndef polar_to_coth(a,b):\n    '''\n    Write a function to convert polar coordinates to coth coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.coth(r),5)\ndef polar_to_sec(a,b):\n    '''\n    Write a function to convert polar coordinates to sec coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sec(r),5)\ndef polar_to_tan2(a,b):\n    '''\n    Write a function to convert polar coordinates to tan2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.tan2(r),5)\ndef polar_to_coth2(a,b):\n    '''\n    Write a function to convert polar coordinates to coth2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.coth2(r),5)\ndef polar_to_tanh2(a,b):\n    '''\n    Write a function to convert polar coordinates to tanh2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.tanh2(r),5)\ndef polar_to_sec2(a,b):\n    '''\n    Write a function to convert polar coordinates to sec2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sec2(r),5)\ndef polar_to_tanh2(a,b):\n    '''\n    Write a function to convert polar coordinates to tanh2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.tanh2(r),5)\ndef polar_to_coth2(a,b):\n    '''\n    Write a function to convert polar coordinates to coth2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.coth2(r),5)\ndef polar_to_sec2(a,b):\n    '''\n    Write a function to convert polar coordinates to sec2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sec2(r),5)\ndef polar_to_coth2(a,b):\n    '''\n    Write a function to convert polar coordinates to coth2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.coth2(r),5)\ndef polar_to_tan2(a,b):\n    '''\n    Write a function to convert polar coordinates to tan2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.tan2(r),5)\ndef polar_to_coth2(a,b):\n    '''\n    Write a function to convert polar coordinates to coth2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.coth2(r),5)\ndef polar_to_tan2(a,b):\n    '''\n    Write a function to convert polar coordinates to tan2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.tan2(r),5)\ndef polar_to_cot2(a,b):\n    '''\n    Write a function to convert polar coordinates to cot2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.cot2(r),5)\ndef polar_to_sin2(a,b):\n    '''\n    Write a function to convert polar coordinates to sin2 coordinates.\n    '''\n    c = complex(a,b)\n    r = round(c.real,5)\n    i = round(c.imag,5)\n    return round(cmath.sin(r),5"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    from math import pi,cos,sin,sqrt\n    # pylint: disable=no-member\n    return pi/2*(sin(x)*sin(y))\ndef polar_rect_contours(x,y):\n    '''\n    Write a function to return a list of all polar rectangles that can be used to draw the contour of a sphere.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_rect(i,j))\n    return cnt\ndef polar_circle(x,y):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_circle(i,j) for i in range(0,x) for j in range(0,y)]\n    return 3.14159265358979323846*(sin(x)*sin(y))\ndef polar_circle_contours(x,y):\n    '''\n    Write a function to return a list of all polar circles that can be used to draw the contour of a circle.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_circle(i,j))\n    return cnt\ndef polar_triangle(x,y):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_triangle(i,j) for i in range(0,x) for j in range(0,y)]\n    return 3.14159265358979323846*(sin(x)*sin(y))*(1+sin(x)/(cos(x)*(sin(y)*cos(x))))\ndef polar_triangle_contours(x,y):\n    '''\n    Write a function to return a list of all polar triangles that can be used to draw the contour of a triangle.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_triangle(i,j))\n    return cnt\ndef polar_ellipse(x,y):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_ellipse(i,j) for i in range(0,x) for j in range(0,y)]\n    return pi*(sin(x)*sin(y))*(cos(x)*cos(y))\ndef polar_ellipse_contours(x,y):\n    '''\n    Write a function to return a list of all polar ellipses that can be used to draw the contour of an ellipse.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_ellipse(i,j))\n    return cnt\ndef polar_quad(x,y):\n    '''\n    Write a function to calculate the area of a quadrilateral.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_quad(i,j) for i in range(0,x) for j in range(0,y)]\n    return 2*pi*(sin(x)*sin(y))*(cos(x)*cos(y))\ndef polar_quad_contours(x,y):\n    '''\n    Write a function to return a list of all polar quadrilateral triangles that can be used to draw the contour of a quadrilateral.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_quad(i,j))\n    return cnt\ndef polar_prism(x,y):\n    '''\n    Write a function to calculate the area of a prism.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_prism(i,j) for i in range(0,x) for j in range(0,y)]\n    return pi*(sin(x)*sin(y))*(cos(x)*cos(y))\ndef polar_prism_contours(x,y):\n    '''\n    Write a function to return a list of all polar prisms that can be used to draw the contour of a prism.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_prism(i,j))\n    return cnt\ndef polar_sphere(x,y):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_sphere(i,j) for i in range(0,x) for j in range(0,y)]\n    return (1/(4*pi*(x**2 + y**2)))*(cos(x)*sin(y))\ndef polar_sphere_contours(x,y):\n    '''\n    Write a function to return a list of all polar spheres that can be used to draw the contour of a sphere.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_sphere(i,j))\n    return cnt\ndef polar_tetra(x,y):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_tetra(i,j) for i in range(0,x) for j in range(0,y)]\n    return pi*(sin(x)*sin(y)*sin(z))\ndef polar_tetra_contours(x,y):\n    '''\n    Write a function to return a list of all polar tetrahedrons that can be used to draw the contour of a tetrahedron.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    cnt = []\n    for i in range(0,x):\n        for j in range(0,y):\n            cnt.append(polar_tetra(i,j))\n    return cnt\ndef polar_circle_I(x,y):\n    '''\n    Write a function to calculate the area of a circle I.\n    '''\n    from math import pi,cos,sin\n    # pylint: disable=no-member\n    pi = pi\n    # cnt = [polar_circle_I(i,j) for i in range(0,x) for j in range(0,y)]\n    return pi*(sin(x)*sin(y))*(cos(x)*cos(y))\ndef polar_circle_II(x,y):\n    '''\n    Write a function to calculat"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = x\n    phi2 = y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = cmath.polar(x,y)\n    x_rect = z[0]\n    y_rect = z[1]\n    return x_rect,y_rect\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p = cmath.polar(x,y)\n    return p[0],p[1]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt(x*x+y*y)\n    theta = cmath.acos(y/r)\n    phi = cmath.asin(x/r)\n    return r*math.cos(phi), r*math.sin(phi), theta\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r = x**2 + y**2\n    #calculate the rectangle coordinates\n    return r,cmath.rect(x,y)\ndef polar_rect_list(x,y,l):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r = x**2 + y**2\n    #calculate the rectangle coordinates\n    return r,cmath.rect(l,x,y)\ndef polar_rect_to_polar(r,l,t):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    #calculate the polar coordinates\n    theta = cmath.phase(l*t)\n    #calculate the polar coordinates\n    r_theta = cmath.phase(r*t)\n    #calculate the polar coordinates\n    r_r = cmath.phase(r*t)\n    #convert polar coordinates to polar\n    return theta,r_theta,r_r\ndef polar_to_rect(theta,r_theta,r_r,l,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    theta_rad = cmath.phase(theta)\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #convert polar coordinates to polar\n    return theta_rad,r_theta_rad,r_r_rad,l,t\ndef polar_to_rect_list(theta,r_theta,r_r,l,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    theta_rad = cmath.phase(theta)\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #convert polar coordinates to rectangular\n    return theta_rad,r_theta_rad,r_r_rad,l,t\ndef azimuth(r,l,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta = cmath.phase(r*t)\n    #calculate the polar coordinates\n    r_r = cmath.phase(r*t)\n    #calculate the polar coordinates\n    l_theta = cmath.phase(l*t)\n    #calculate the polar coordinates\n    l_r = cmath.phase(l*t)\n    #convert polar coordinates to polar\n    return r_theta,r_r,l_theta,l_r\ndef azimuth_list(r_theta,r_r,l_theta,l_r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #calculate the polar coordinates\n    l_theta_rad = cmath.phase(l_theta)\n    #calculate the polar coordinates\n    l_r_rad = cmath.phase(l_r)\n    #convert polar coordinates to rectangular\n    return r_theta_rad,r_r_rad,l_theta_rad,l_r_rad,t\ndef azimuth_to_rect(r_theta,r_r,l_theta,l_r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #calculate the polar coordinates\n    l_theta_rad = cmath.phase(l_theta)\n    #calculate the polar coordinates\n    l_r_rad = cmath.phase(l_r)\n    #convert polar coordinates to rectangular\n    return r_theta_rad,r_r_rad,l_theta_rad,l_r_rad,t\ndef azimuth_to_rect_list(r_theta,r_r,l_theta,l_r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #calculate the polar coordinates\n    l_theta_rad = cmath.phase(l_theta)\n    #calculate the polar coordinates\n    l_r_rad = cmath.phase(l_r)\n    #convert polar coordinates to rectangular\n    return r_theta_rad,r_r_rad,l_theta_rad,l_r_rad,t\ndef azimuth_to_rect_to_azimuth(r_theta,r_r,l_theta,l_r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #calculate the polar coordinates\n    l_theta_rad = cmath.phase(l_theta)\n    #calculate the polar coordinates\n    l_r_rad = cmath.phase(l_r)\n    #convert polar coordinates to rectangular\n    return r_theta_rad,r_r_rad,l_theta_rad,l_r_rad,t\ndef azimuth_to_rect_list(r_theta,r_r,l_theta,l_r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #calculate the polar coordinates\n    l_theta_rad = cmath.phase(l_theta)\n    #calculate the polar coordinates\n    l_r_rad = cmath.phase(l_r)\n    #convert polar coordinates to rectangular\n    return r_theta_rad,r_r_rad,l_theta_rad,l_r_rad,t\ndef azimuth_to_rect_to_azimuth(r_theta,r_r,l_theta,l_r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)\n    #calculate the polar coordinates\n    r_r_rad = cmath.phase(r_r)\n    #calculate the polar coordinates\n    l_theta_rad = cmath.phase(l_theta)\n    #calculate the polar coordinates\n    l_r_rad = cmath.phase(l_r)\n    #convert polar coordinates to rectangular\n    return r_theta_rad,r_r_rad,l_theta_rad,l_r_rad,t\ndef azimuth_to_azimuth(r_theta,r_r,l_theta,l_r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #calculate the polar coordinates\n    r_theta_rad = cmath.phase(r_theta)"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # width = 2*(cmath.asin(x/math.sqrt(2))**2)\n    # height = 2*(cmath.acos(y/math.sqrt(2))**2)\n    width = 2*(cmath.asin(x/cmath.sqrt(2))**2)\n    height = 2*(cmath.acos(y/cmath.sqrt(2))**2)\n    return (width,height)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x*x+y*y)\n    return int(r),int(r*y/x)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[1]\n    newList[1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first\n    return newList\n    \ndef list_to_string(new_list):\n    '''\n    Write a python function to print the list element by element.\n    '''\n    string = \"\"\n    for i in range(len(new_list)):\n        string += new_list[i]\n    return string\n    \ndef find_diff(new_list,element):\n    '''\n    Write a python function to return the index of a list element.\n    '''\n    for i in range(len(new_list)):\n        if element == new_list[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[0:len(newList)-1] + newList[len(newList)-1:len(newList)] + newList[0:len(newList)-1]\n    print(newList)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList.append(newList[-1])\n    newList.pop(-1)\n    newList.append(newList[0])\n    newList.pop(0)\n    \n    return newList\n    \n    \n    \nif __name__ == \"__main__\":\n    new_List = []\n    for _ in range(int(input())):\n        new_List.append(input())\n        \n    new_List = swap_List(new_List)\n    \n    print(new_List)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    for i in range(l-1):\n        temp = newList[i]\n        newList[i] = newList[l-1]\n        newList[l-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length == 1:\n        return newList\n    else:\n        mid = length//2\n        first_idx = mid\n        second_idx = length - mid - 1\n        temp = newList[first_idx]\n        newList[first_idx] = newList[second_idx]\n        newList[second_idx] = temp\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)):\n        newList[i], newList[len(newList) - i - 1] = newList[len(newList) - i - 1], newList[i]\n    return newList\n        \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    lst = newList.copy()\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize variables\n    p = 1\n    sum = 0\n    q = 0\n    n = n + 1\n    while (p!= 0):\n        sum = sum + (p * n)\n        p = p * n\n        n = n + 1\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(1,n+1):\n        product *= (k**i)\n    return product\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomialCoeff(n,k):\n        '''\n        Python implementation of Binomial Coefficient.\n        '''\n        if n==k==0:\n            return 1\n        elif n==k==1:\n            return n\n        else:\n            return binomialCoeff(n-1,k-1)*(n-k)*(k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = binomial_Coeff_list[n-k]\n    sum = 0\n    for i in range(k):\n        sum += coeff * binomial_Coeff_list[n - i -1]\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    i = 1\n    while i < k:\n        s = s + ((n+i) * (n-i) * (n-i+1)) // i\n        i = i + 1\n    return s\ndef binomial_coeff(n,k):\n    '''\n    Function to calculate the product of the sum of consecutive binomial coefficients.\n    '''\n    s = 0\n    i = 1\n    while i < k:\n        s = s + ((n+i) * (n-i) * (n-i+1)) // i\n        i = i + 1\n    return s\ndef main(): \n    n = int(input(\"Enter the number of terms in the series: \"))\n    k = int(input(\"Enter the number of coeffieients in the series: \"))\n    print(\"The Sum of the Coefficients is: \", binomial_Coeff(n,k))\n    print(\"The product of the Coefficients is: \", binomial_coeff(n,k))\nmain()"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    l = [0]*(k+1)\n    l[0] = 1\n    for i in range(1,k+1):\n        l[i] = l[i-1]*n//i\n    return sum(l)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n <= 1: \n        return 1\n    else: \n        return binomial_Coeff(n-1, k) * k**n\n    \ndef polynomial_coeff(x, degree):\n    '''\n    Compute the sum of the polynomial coefficient.\n    '''\n    if degree == 0: \n        return 1\n    elif degree == 1: \n        return x\n    elif degree == 2: \n        return x**2 + 2 * x + 1\n    elif degree == 3: \n        return x**3 + 3 * x**2 + 3 * x + 1\n    elif degree == 4: \n        return x**4 + 4 * x**3 + 4 * x**2 + 4 * x + 1\n    elif degree == 5: \n        return x**5 + 5 * x**4 + 5 * x**3 + 5 * x**2 + 5 * x + 1\n    elif degree == 6: \n        return x**6 + 6 * x**5 + 6 * x**4 + 6 * x**3 + 6 * x**2 + 6 * x + 1\n    elif degree == 7: \n        return x**7 + 7 * x**6 + 7 * x**5 + 7 * x**4 + 7 * x**3 + 7 * x**2 + 7 * x + 1\n    elif degree == 8: \n        return x**8 + 8 * x**7 + 8 * x**6 + 8 * x**5 + 8 * x**4 + 8 * x**3 + 8 * x**2 + 8 * x + 1\n    elif degree == 9: \n        return x**9 + 9 * x**8 + 9 * x**7 + 9 * x**6 + 9 * x**5 + 9 * x**4 + 9 * x**3 + 9 * x**2 + 9 * x + 1\n    elif degree == 10: \n        return x**10 + 10 * x**9 + 10 * x**8 + 10 * x**7 + 10 * x**6 + 10 * x**5 + 10 * x**4 + 10 * x**3 + 10 * x**2 + 10 * x + 1\n    elif degree == 11: \n        return x**11 + 11 * x**10 + 11 * x**9 + 11 * x**8 + 11 * x**7 + 11 * x**6 + 11 * x**5 + 11 * x**4 + 11 * x**3 + 11 * x**2 + 11 * x + 1\n    elif degree == 12: \n        return x**12 + 12 * x**11 + 12 * x**10 + 12 * x**9 + 12 * x**8 + 12 * x**7 + 12 * x**6 + 12 * x**5 + 12 * x**4 + 12 * x**3 + 12 * x**2 + 12 * x + 1\n    else: \n        raise ValueError('Invalid degree value')\n    \ndef binomial_coeff_sum(n, k, degree): \n    '''\n    Compute the sum of the binomial coefficient of n and k.\n    '''\n    if n <= 1: \n        return 1\n    elif degree == 0: \n        return binomial_coeff_sum(n-1, k, degree) * k**n\n    elif degree == 1: \n        return n**k\n    elif degree == 2: \n        return n**2 + n + 1\n    elif degree == 3: \n        return n**3 + n + 1\n    elif degree == 4: \n        return n**4 + n + 1\n    elif degree == 5: \n        return n**5 + n + 1\n    elif degree == 6: \n        return n**6 + n + 1\n    elif degree == 7: \n        return n**7 + n + 1\n    elif degree == 8: \n        return n**8 + n + 1\n    elif degree == 9: \n        return n**9 + n + 1\n    elif degree == 10: \n        return n**10 + n + 1\n    elif degree == 11: \n        return n**11 + n + 1\n    elif degree == 12: \n        return n**12 + n + 1\n    else: \n        raise ValueError('Invalid degree value')\n    \ndef sum_poly(x, degree): \n    '''\n    Compute the sum of the polynomial.\n    '''\n    if degree == 0: \n        return 1\n    elif degree == 1: \n        return x\n    elif degree == 2: \n        return x**2 + 2 * x + 1\n    elif degree == 3: \n        return x**3 + 3 * x**2 + 3 * x + 1\n    elif degree == 4: \n        return x**4 + 4 * x**3 + 4 * x**2 + 4 * x + 1\n    elif degree == 5: \n        return x**5 + 5 * x**4 + 5 * x**3 + 5 * x**2 + 5 * x + 1\n    elif degree == 6: \n        return x**6 + 6 * x**5 + 6 * x**4 + 6 * x**3 + 6 * x**2 + 6 * x + 1\n    elif degree == 7: \n        return x**7 + 7 * x**6 + 7 * x**5 + 7 * x**4 + 7 * x**3 + 7 * x**2 + 7 * x + 1\n    elif degree == 8: \n        return x**8 + 8 * x**7 + 8 * x**6 + 8 * x**5 + 8 * x**4 + 8 * x**3 + 8 * x**2 + 8 * x + 1\n    elif degree == 9: \n        return x**9 + 9 * x**8 + 9 * x**7 + 9 * x**6 + 9 * x**5 + 9 * x**4 + 9 * x**3 + 9 * x**2 + 9 * x + 1\n    elif degree == 10: \n        return x**10 + 10 * x**9 + 10 * x**8 + 10 * x**7 + 10 * x**6 + 10 * x**5 + 10 * x**4 + 10 * x**3 + 10 * x**2 + 10 * x + 1\n    elif degree == 11: \n        return x**11 + 11 * x**10 + 11 * x**9 + 11 * x**8 + 11 * x**7 + 11 * x**6 + 11 * x**5 + 11 * x**4 + 11 * x**3 + 11 * x**2 + 11 * x + 1\n    elif degree == 12: \n        return x**12 + 12 * x**11 + 12 * x**10 + 12 * x**9 + 12 * x**8 + 12 * x**7 + 12 * x**6 + 12 * x**5 + 12 * x**4 + 12 * x**3 + 12 * x**2 + 12 * x + 1\n    else: \n        raise ValueError('Invalid degree value')\n    \ndef sum_coeff(x, degree): \n    '''\n    Compute the sum of the coefficients.\n    '''\n    if degree == 0: \n        return x\n    elif degree == 1: \n        return 1\n    elif degree == 2: \n        return x**2\n    elif degree == 3: \n        return x**3\n    elif degree == 4: \n        return x**4\n    elif degree == 5: \n        return x**5\n    elif degree == 6: \n        return x**6\n    elif degree == 7: \n        return x**7\n    elif degree == 8: \n        return x**8\n    elif degree == 9: \n        return x**9\n    elif degree == 10: \n        return x**10\n    elif degree == 11: \n        return x**11\n    elif degree == 12: \n        return x**12\n    else: \n        raise ValueError('Invalid degree value')\n    \ndef sum_poly_sum(x, degree): \n    '''\n    Compute the sum of the polynomial.\n    '''\n    if degree == 0: \n        return 1\n    elif degree == 1: \n        return x\n    elif degree == 2: \n        return x**2 + 2 * x + 1\n    elif degree == 3: \n        return x**3 + 3 * x**2 + 3 * x + 1\n    elif degree == 4: \n        return x**4 + 4 * x**3 + 4 * x**"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k>=n):\n        return 0\n    if(k==0):\n        return 1\n    else:\n        return n*binomial_Coeff(n-1,k-1)\ndef K_Coeff(n,k):\n    '''\n    Write a python function to compute the sum of the coefficients K, between 1 and n, for the given number of terms.\n    '''\n    if(k>=n):\n        return 0\n    if(k==0):\n        return 1\n    else:\n        return n*K_Coeff(n-1,k-1)\ndef main():\n    print(\"For a given number of terms, compute the sum of the co-efficients:\")\n    n=int(input(\"Enter the number of terms:\"))\n    print(\"The value of coefficients for n =\", n, \"is:\")\n    k=int(input(\"Enter the number of terms for K:\"))\n    print(\"The value of coefficients for n =\", n, \"and K =\", k, \"is:\")\n    print(\"The value of the co-efficient is:\", binomial_Coeff(n,k))\n    print(\"The value of the co-efficient is:\", K_Coeff(n,k))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n = n + 1\n    return (k * (n + 1)) / 2\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Base case\n    if(n <= 1): \n        return 1\n    elif(k == 1): \n        return n\n    elif(k == 2): \n        return n*(n-1)//2\n    else: \n        prod = 1\n        for i in range(2,k+1): \n            prod = prod * (n-i+1) \n        return prod\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace('0','')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_raw = re.search(r'^(\\d+(?:\\.\\d+)*\\.\\d+\\.\\d+\\.\\d+)', ip)\n    if ip_raw:\n        ip = ip_raw.group()\n    else:\n        return ip\n    ip_list = ip.split('.')\n    ip_list[0] = ip_list[0].lstrip('0')\n    ip_list[-1] = ip_list[-1].lstrip('0')\n    ip_list = '.'.join(ip_list)\n    return ip_list\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros\n    ip = re.sub(r'^0', '', ip)\n    # Remove trailing zeroes\n    ip = re.sub(r'\\d+$', '', ip)\n    # Remove white spaces\n    ip = re.sub(r'\\s', '', ip)\n    # Remove trailing zeroes\n    ip = re.sub(r'\\d+$', '', ip)\n    # Remove leading zeroes\n    ip = re.sub(r'^0', '', ip)\n    # Remove trailing zeroes\n    ip = re.sub(r'\\d+$', '', ip)\n    # Remove whitespace\n    ip = re.sub(r'\\s', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip.lstrip('0'), 16)\ndef remove_garbage(value):\n    '''\n    Remove garbage from an IP string.\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_ip = '0' * (8 - len(ip))\n    return zero_ip + ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        if '.' in ip:\n            return ip.replace(ip[ip.index('.'):],'')\n        else:\n            return ip\n    except:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip==0:\n        return 0\n    else:\n        ip=ip.split('.')\n        for i in range(len(ip)):\n            if ip[i]=='0':\n                ip[i]='0'\n        return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #Your code here\n    zones=['1','2','3','4','5','6','7','8','9','0']\n    ip=re.sub('[0-9]+','',ip)\n    index=ip.find('.')\n    zones.pop(index-1)\n    ip=re.sub('.','',ip)\n    ip=re.sub('[0-9]+','',ip)\n    ip=re.sub('\\D','',ip)\n    return '.'.join(zones)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # If the IP is empty, then we return\n    if ip == \"\":\n        return \"\"\n    \n    # Check if it is a float\n    if isinstance(ip, float):\n        return \".\".join([str(x) for x in ip.split('.')])\n    \n    # Check if it is an int\n    if not isinstance(ip, int):\n        return \".\".join([str(x) for x in ip.split('.')])\n    \n    # Otherwise, it is a string\n    return ip.split('.')\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return (even, odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = list1[1::2]\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    list2 = []\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    return list1[1]-list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    odd_list = []\n    odd_index = 0\n    even_index = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_list.append(i)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = 0\n    # get the length of the list\n    l = len(list1)\n    # iterate through the list\n    for i in range(0, l):\n        # if odd number\n        if list1[i] % 2!= 0:\n            # increment the counter\n            even_odd += 1\n    # return the difference\n    return(even_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_list = []\n    for item in list1:\n        if(item%2 == 0):\n            even_odd_list.append(item)\n    return sum(even_odd_list)\n    \nprint(diff_even_odd([1,2,3,4,5]))"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    odd = []\n    even = []\n    for i in range(0, len(list1), 2):\n        even_odd.append(list1[i])\n        odd.append(list1[i + 1])\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    if len(list1)%2 == 0:\n        for i in range(0, len(list1)//2):\n            diff += list1[i] - list1[i+1]\n        return diff\n    else:\n        for i in range(0, len(list1)//2):\n            diff += list1[i+1] - list1[i]\n        return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)%2==0:\n        i=0\n        j=len(list1)-1\n        while i<len(list1):\n            if list1[i]%2==0:\n                list1[i]=list1[i]+list1[j]\n                j=j-1\n            else:\n                i=i+1\n                list1[i]=list1[i]+list1[j]\n                j=j-1\n        return list1\n    else:\n        i=0\n        j=len(list1)-1\n        while i<len(list1):\n            if list1[i]%2!=0:\n                list1[i]=list1[i]+list1[j]\n                j=j-1\n            else:\n                i=i+1\n                list1[i]=list1[i]+list1[j]\n                j=j-1\n        return list1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # approach 1:\n    # count swaps from string 1\n    # now count swaps from string 2\n    # return the minimum number of swaps\n    def count_swaps(str1,str2) :\n        # count the number of times string1 and string2 have been swapped \n        # then return the minimum number of swaps required\n        # for this change\n        count = 0\n        for i in range(len(str1)) :\n            if str1[i]!= str2[i] :\n                # if str1[i]!= str2[i], swap the first character\n                # and the second character\n                if str1[i]!= str2[i] :\n                    count += 1\n                else : # swap both the first and the second character\n                    count += 1\n                    str1,str2 = str2,str1\n        return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n-1): \n        if str1[i] == str2[i]: \n            count += 1\n        else: \n            break\n    if count == n-1: \n        return count \n    else: \n        return -1 \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    from itertools import permutations \n    def count_swaps(a,b): \n        return sum(s1[:len(s1)-len(s2)] == s2 for s2 in permutations(a,len(a))) \n    return min(count_swaps(list(str1),list(str2)),count_swaps(list(str2),list(str1))) \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if(str1[0] == '1' and str2[0] == '1'):\n        return 1\n    elif(str1[0] == '1' and str2[0] == '0'):\n        return 0\n    elif(str1[0] == '0' and str2[0] == '1'):\n        return 0\n    elif(str1[0] == '0' and str2[0] == '0'):\n        return 0\n    else:\n        swap = 0\n        for i in range(len(str1)):\n            if(str1[i] == '1' and str2[i] == '1'):\n                swap = swap + 1\n        return swap\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n, m = len(str1), len(str2)\n    count = 0\n    i, j = 0, 0\n    while i < n or j < m:\n        if str1[i]!= str2[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    if len(str1)!= len(str2):\n        return -1\n    \n    length = len(str1)\n    count = 0\n    \n    for i in range(0,length):\n        if str1[i]!= str2[i]:\n            if str1[i] == str2[i]:\n                count += 1\n                \n            else:\n                count += 2\n                \n        if count == 0:\n            return -1\n        \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #TODO\n    '''\n    Complete the function so that it returns the number of swaps needed to convert str1 to str2.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # var count\n    count = 0\n    \n    # step 1\n    for i in range(len(str1)):\n        \n        # var char\n        char1 = str1[i]\n        char2 = str2[i]\n        \n        # swap\n        if char1 < char2:\n            # swap\n            char1,char2 = char2,char1\n        \n        # count\n        if char1 == char2:\n            # swap\n            count += 1\n    \n    # return count\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap(str1,str2) : \n        #create a dictionary to keep track of indexes of i and j\n        index1=0\n        index2=0\n        #loop through every character in string 1 \n        for i in str1 : \n            #count how many times it occurs in string 2\n            count=0\n            for j in str2 :\n                #if character in string 2 is a 1, count how many times it occurs\n                if j=='1' : \n                    count+=1\n            #if the character does not occur in string 2, swap it and increment index in string 1\n            if count!=0:\n                str1=str1[:index1] + str(count) + str1[index1+count:]\n                index1+=count\n                str2=str2[:index2] + '0' + str2[index2+count:]\n                index2+=count\n        #if the first index of str1 is 0, swap the characters in str2 and increment the index of str1\n        if index1!=0:\n            str1=str1[:index1]+str1[index1+count:]\n            index1+=count\n            str2=str2[:index2]+'0' + str2[index2+count:]\n            index2+=count\n        return str1, str2\n    #loop through every character in str1\n    str1=str1.strip()\n    #loop through every character in str2\n    str2=str2.strip()\n    #convert string 1 to binary and binary 2 to string 2\n    #shorter string 2 becomes longer string 1\n    #length of shorter string 2 will be less than length of shorter string 1\n    str1,str2=swap(str1,str2)\n    #find number of swaps required for binary string 1\n    #find length of shorter binary string 1\n    n=len(str1)\n    #find number of swaps required for binary string 2\n    #find length of shorter binary string 2\n    m=len(str2)\n    # if we have length of shorter binary string 2, we need to swap two strings\n    # return the minimum number of swaps required\n    if n<=m :\n        return min(n,m)\n    #else, we need to swap two strings\n    #first count how many times it occurs in string 1\n    count1=0\n    count2=0\n    #loop through every character in str1\n    for i in str1 :\n        #if the character is 0, add 1 to count\n        if i=='0' :\n            count1+=1\n        #if the character is 1, add 1 to count\n        if i=='1' :\n            count2+=1\n    #if count1 is 0, swap the characters in str2 and increment count1\n    if count1!=0 :\n        str1=str1[:index1]+str1[index1+count1:]\n        index1+=count1\n        #if count2 is 0, swap the characters in str2 and increment count2\n        if count2!=0 :\n            str2=str2[:index2]+'0' + str2[index2+count2:]\n            index2+=count2\n        #if count2 is not 0, swap the characters in str2 and increment count2\n        else :\n            str2=str2[:index2]+str2[index2+count2:]\n            index2+=count2\n    #if count2 is 0, swap the characters in str1 and increment count1\n    #if count1 is not 0, swap the characters in str1 and increment count1\n    else :\n        str1=str1[:index1]+str1[index1+count1:]\n        index1+=count1\n        #if count1 is not 0, swap the characters in str1 and increment count1\n        if count1!=0 :\n            str2=str2[:index2]+'0' + str2[index2+count1:]\n            index2+=count1\n        #if count1 is not 0, swap the characters in str2 and increment count1\n        else :\n            str2=str2[:index2]+str2[index2+count1:]\n            index2+=count1\n    #if both lengths of shorter string 1 and shorter string 2 are not 0, we need to swap string 2 in string 1\n    #first count how many times it occurs in string 1\n    count1=0\n    count2=0\n    #loop through every character in str1\n    for i in str1 :\n        #if the character is 0, add 1 to count\n        if i=='0' :\n            count1+=1\n        #if the character is 1, add 1 to count\n        if i=='1' :\n            count2+=1\n    #if count1 is 0, swap the characters in str2 and increment count1\n    if count1!=0 :\n        str1=str1[:index1]+str1[index1+count1:]\n        index1+=count1\n        #if count2 is 0, swap the characters in str2 and increment count2\n        if count2!=0 :\n            str2=str2[:index2]+'0' + str2[index2+count2:]\n            index2+=count2\n        #if count2 is not 0, swap the characters in str2 and increment count2\n        else :\n            str2=str2[:index2]+str2[index2+count2:]\n            index2+=count2\n    #if count2 is 0, swap the characters in str1 and increment count1\n    #if count1 is not 0, swap the characters in str1 and increment count1\n    else :\n        str1=str1[:index1]+str1[index1+count1:]\n        index1+=count1\n        #if count1 is not 0, swap the characters in str1 and increment count1\n        if count1!=0 :\n            str2=str2[:index2]+'0' + str2[index2+count1:]\n            index2+=count1\n        #if count1 is not 0, swap the characters in str1 and increment count1\n        else :\n            str2=str2[:index2]+str2[index2+count1:]\n            index2+=count1\n    #if both lengths of shorter string 1 and shorter string 2 are not 0, we need to swap string 2 in string 1\n    #first count how many times it occurs in string 1\n    count1=0\n    count2=0\n    #loop through every character in str1\n    for i in str1 :\n        #if the character is 0, add 1 to count\n        if i=='0' :\n            count1+=1\n        #if the character is 1, add 1 to count\n        if i=='1' :\n            count2+=1\n    #if count1 is 0, swap the characters in str2 and increment count1\n    if count1!=0 :\n        str1=str1[:index1]+str1[index1+count1:]\n        index1+=count1\n        #if count2 is 0, swap the characters in str2 and increment count2\n        if count2!=0 :\n            str2=str2[:index2]+'0' + str2[index2+count2:]\n            index2+=count2\n        #if count2 is not 0, swap the characters in str2 and increment count2\n        else :\n            str2=str2[:index2]+str2[index2+count2:]\n            index2+=count2\n    #if count2 is 0, swap the characters in str1 and increment count1\n    #if count1 is not 0, swap the characters in str1 and increment count1\n    else :\n        str1=str1[:index1]+str1[index1+count1:]\n        index1+=count1\n        #if count1 is not 0, swap the characters in str1 and increment count1\n        if count1!=0 :\n            str2=str2[:index2]+'0' + str2[index2+count1:]\n            index2+=count1\n        #if count1 is not 0, swap the characters in str1 and increment count1\n        else :\n            str2=str2[:index2]+str2[index2+count1:]\n            index2+=count1\n    #if both lengths of shorter string 1 and shorter string 2 are not 0, we need to swap string 2 in string 1\n    #first count how many times it occurs in string 1\n    count1=0\n    count2=0\n    #loop through every character in str1\n    for "
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    count_swaps = 0\n    string1 = str(bin(ord(str1)))\n    string2 = str(bin(ord(str2)))\n    print(string1)\n    print(string2)\n    \n    i = 0\n    j = 0\n    for i in range(len(string1)):\n        if string1[i] == \"1\":\n            j = i\n            break\n        else:\n            i += 1\n    print(j)\n    print(i)\n    if string1[j+1] == \"0\":\n        print(\"break\")\n        i -= 1\n    else:\n        print(\"one\")\n    \n    j = 0\n    while j < len(string2):\n        if string2[j] == \"1\":\n            swaps += 1\n            print(swaps)\n            j += 1\n            break\n        else:\n            j += 1\n    return swaps\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list[0]) + len(tuple_list[1])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * 8\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += item[0]\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #create a list of tuples\n    #here we create a list of tuples (a,b,c) with the arguments (a,b,c)\n    #we then calculate the size of the tuple \n    #in bytes\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1 + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x)) + 1\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n    '''\n    pass\n    '''\n    s = 0\n    for x in tuple_list:\n        s = s + len(str(x))\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s=0\n    for i in tuple_list:\n        s+=len(str(i))+1\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return int(sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = 0\n    for i in range(len(tuple_list)):\n        size_of_tuple += sys.getsizeof(tuple_list[i])\n    return size_of_tuple\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print 'Input size = ', sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == len(arr2):\n        if len(arr1) == 1:\n            return arr1[0]\n        elif len(arr1) < k:\n            return find_kth(arr2, arr1, k)\n        elif len(arr1) > k:\n            return find_kth(arr1, arr2, k)\n        else:\n            return arr1[k]\n    else:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # base case : arr1 and arr2 are sorted\n    if len(arr1) <= 1 or len(arr2) <= 1:\n        return arr1[k - 1]\n    # else kth element is maximum between arr1[0] and arr2[k-1]\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if arr1[0] <= arr2[0]:\n        # find the index of arr1[0]\n        left = 0\n        right = k-1\n    elif arr1[0] > arr2[0]:\n        # find the index of arr1[0]\n        left = k-1\n        # find the index of arr2[0]\n        right = 0\n    else:\n        # find the index of arr1[0]\n        left = 0\n        right = k-1\n    # find the maximum element at left index\n    while left < right:\n        mid = (left + right)//2\n        if arr1[mid] < arr2[mid]:\n            # arr1[mid] is smaller than arr2[mid]\n            # swap them\n            arr1[mid], arr2[mid] = arr2[mid], arr1[mid]\n            left = mid+1\n        elif arr1[mid] > arr2[mid]:\n            # arr1[mid] is larger than arr2[mid]\n            # swap them\n            arr2[mid], arr1[mid] = arr1[mid], arr2[mid]\n            right = mid-1\n        else:\n            # arr1[mid] equals arr2[mid]\n            # go up until both elements have to be swapped\n            while arr1[left] < arr2[mid]:\n                left += 1\n            while arr2[right] > arr1[left]:\n                right -= 1\n            # swap them\n            arr1[left], arr2[right] = arr2[right], arr1[left]\n    return arr1[right]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1) - 1\n    \n    while (left < right):\n        mid = (left + right) // 2\n        if (arr1[mid] < arr2[mid]):\n            left = mid + 1\n        else:\n            right = mid\n    \n    return arr1[left]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if len(arr1) < len(arr2):\n    #     return find_kth(arr2, arr1, k)\n    # else:\n    #     return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # get the size of the array\n    n = len(arr1)\n    # define the midpoint\n    mid = (n + k - 1) // 2\n    # find the element in the array\n    # find the kth index in the array\n    # if k is equal to the middle index, then return the element\n    # else return the kth element\n    # if k > n - mid, then return the kth element\n    if mid < n:\n        return arr1[mid]\n    elif mid == n:\n        return arr2[mid]\n    else:\n        return arr2[mid - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k-1]\n    # return arr1[k]\n    # return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def search(arr, k, i, j):\n        if i>=j:\n            return None\n        m = (i + j) // 2\n        if arr[m]==k:\n            return m\n        if arr[i]<arr[m]:\n            return search(arr,k,m+1,j)\n        else:\n            return search(arr,k,i,m-1)\n    return search(arr1, k, 0, len(arr2)-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Logical operand\n    s1 = arr1[0]\n    s2 = arr2[0]\n    # Logic\n    if s1 >= s2:\n        return find_kth(arr1, arr2, k)\n    else:\n        return find_kth(arr2, arr1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    #Time complexity: O(nlogn)\n    #Space Complexity: O(n)\n    \n    if k == 0:\n        return arr1[k]\n    elif k > len(arr2) - k:\n        return find_kth(arr1, arr2, k - len(arr2))\n    else:\n        return find_kth(arr1, arr2, k)\n    \n    \n    "
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def compare_nums(a,b):\n        return a-b if a > b else a-b if a < b else a-b+b if a < b else a+b+b\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 1:\n        return True\n    else:\n        return number == sum([number//10, number%10])\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_count = 0\n    temp_str = str(number)\n    for i in range(len(temp_str)):\n        digit_count += 1\n    temp = int(temp_str)\n    number_sum = 0\n    temp_str_2 = str(temp)\n    for i in range(len(temp_str_2)):\n        digit_count += 1\n    for j in range(digit_count):\n        number_sum = number_sum * 10 + int(temp_str_2[j])\n    if number_sum == temp:\n        print(f'{temp} is a armstrong number')\n    else:\n        print(f'{temp} is not a armstrong number')\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for i in str(number):\n        total += int(i)\n    if total == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = 0\n    digit = 1\n    \n    # Base case:\n    if number == 0:\n        return True\n    \n    # For all digits:\n    while number > 0:\n        temp = number % 10\n        number = number // 10\n        digit = digit + 1\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return False\n    numbers_range = range(2, number)\n    for num in numbers_range:\n        temp = number // num\n        if temp == temp:\n            if num == temp:\n                return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_digits += i\n    if sum_of_digits == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_dict = {}\n    for i in str(number):\n        if i.isalpha():\n            num_dict[i] = number % 10\n        else:\n            num_dict[i] = int(number % 10)\n        number //= 10\n    result = 0\n    for i in num_dict.keys():\n        result += int(i) ** num_dict[i]\n    if result == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    sum = 0\n    for i in range(len(num)-1):\n        sum += int(num[i])*int(num[i+1])\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    \n    for i in str(number):\n        sum += int(i)\n    \n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    number = [int(n) for n in str(number)]\n    total = sum(number)\n    average = total/len(number)\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    sum_num = 0\n    for i in range(number):\n        x = input('Enter your number: ')\n        x = int(x)\n        sum += x\n        sum_num += 1\n    average = sum/sum_num\n    return sum, average\n    \nprint(sum_average(5))"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s=0\n    for i in range(0,number):\n        num=int(input())\n        s+=num\n    print(\"sum=\",s)\n    print(\"average=\",s/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        print('Error: Invalid Input')\n        return\n    elif number == 1:\n        return number\n    elif number == 2:\n        return number\n    elif number > 2:\n        return sum(range(1, number)) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not isinstance(number, int) or not isinstance(number, float):\n        raise TypeError(\"number must be an integer\")\n    elif number <= 0:\n        raise ValueError(\"number must be positive\")\n    else:\n        if number == 0:\n            return 0\n        elif number < 0:\n            print(\"Negative value\")\n            return 0\n        elif number == 1:\n            return 1\n        else:\n            sum = 0\n            for i in range(1, number+1):\n                sum = sum + i\n            average = sum/number\n            return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for n in range(1, number + 1):\n        sum += n\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,number+1):\n        sum+=i\n    average=sum/number\n    return (sum,average)\n    \nprint(\"Sum and average of first n natural numbers is :\",sum_average(10))\n    "
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0: \n        return True\n    else: \n        return False\n    \nprint(is_Even(2))\nprint(is_Even(3))\nprint(is_Even(4))\nprint(is_Even(5))\nprint(is_Even(6)"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is not even\")\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n    \n    #raise NotImplementedError\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # create a variable to represent the user input\n    num = int(input(\"Enter a number : \"))\n    # condition to check if it is even\n    if num % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return \"This number is even\"\n    else : \n        return \"This number is odd\"\n    \nnum = int(input(\"Input a number : \"))\nprint(is_Even(num)"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    pass\ndef is_odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    pass\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initiate an empty list that will contain repeated characters\n    repeated_list = []\n    \n    # Loop through the characters in the given string\n    for char in str1:\n        # If the character is repeated, append it to the list\n        if char in repeated_list:\n            continue\n        else:\n            repeated_list.append(char)\n    # If there is no repeated character return -1\n    if len(repeated_list) == 0:\n        return -1\n    else:\n        return repeated_list[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if str1.count(i) > 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Declare list of the characters and the length of the string\n    char_list = list(str1)\n    char_count = dict()\n    \n    # Loop through the characters\n    for character in char_list:\n        if character in char_count:\n            char_count[character] = char_count[character] + 1\n        else:\n            char_count[character] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return None\n    last = str1[-1]\n    if len(str1) == 1:\n        return str1\n    for i in range(len(str1)-1):\n        if str1[i] == last:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # first char of string is \"i\"\n    # start with string \"i\"\n    # use counter 0\n    # if char is not repeated\n    # return char\n    # else\n    # end of loop\n    # return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.split(maxsplit = 1)[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = list(str1)\n    dict1 = {}\n    for i in range(len(str1)):\n        if str1[i] in dict1:\n            dict1[str1[i]] += 1\n        else:\n            dict1[str1[i]] = 1\n    #print(dict1)\n    #if len(dict1) == len(str1):\n    #    print(\"Found: \", str1[i])\n    else:\n        print(\"No repeated character found\")\n    return list(dict1.keys())[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # Create an empty array to store the repeated characters\n    str_list = []\n    \n    # Iterate through the given string and add each character to the array\n    for i in range(len(str1)):\n        str_list.append(str1[i])\n    \n    # Create a loop to iterate through the array. If the string contains the repeated character, we return it.\n    for char in str_list:\n        if char in str_list:\n            return char\n            \n    return 'None"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # generate a dictionary with the letters as keys\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    freq_dict = dict()\n    # iterate through the string\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i <= 20:\n            ludic.append(i)\n        else:\n            for j in range(2, i+1):\n                if j >= 2 and i % j == 0:\n                    ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:\n        return 34\n    if n == 37:\n        return 35\n    if n == 38:\n        return 36\n    if n == 39:\n        return 37\n    if n == 40:\n        return 38\n    if n == 41:\n        return 39\n    if n == 42:\n        return 40\n    if n == 43:\n        return 41\n    if n == 44:\n        return 42\n    if n == 45:\n        return 43\n    if n == 46:\n        return 44\n    if n == 47:\n        return 45\n    if n == 48:\n        return 46\n    if n == 49:\n        return 47\n    if n == 50:\n        return 48\n    if n == 51:\n        return 49\n    if n == 52:\n        return 50\n    if n == 53:\n        return 51\n    if n == 54:\n        return 52\n    if n == 55:\n        return 53\n    if n == 56:\n        return 54\n    if n == 57:\n        return 55\n    if n == 58:\n        return 56\n    if n == 59:\n        return 57\n    if n == 60:\n        return 58\n    if n == 61:\n        return 59\n    if n == 62:\n        return 60\n    if n == 63:\n        return 61\n    if n == 64:\n        return 62\n    if n == 65:\n        return 63\n    if n == 66:\n        return 64\n    if n == 67:\n        return 65\n    if n == 68:\n        return 66\n    if n == 69:\n        return 67\n    if n == 70:\n        return 68\n    if n == 71:\n        return 69\n    if n == 72:\n        return 70\n    if n == 73:\n        return 71\n    if n == 74:\n        return 72\n    if n == 75:\n        return 73\n    if n == 76:\n        return 74\n    if n == 77:\n        return 75\n    if n == 78:\n        return 76\n    if n == 79:\n        return 77\n    if n == 80:\n        return 78\n    if n == 81:\n        return 79\n    if n == 82:\n        return 80\n    if n == 83:\n        return 81\n    if n == 84:\n        return 82\n    if n == 85:\n        return 83\n    if n == 86:\n        return 84\n    if n == 87:\n        return 85\n    if n == 88:\n        return 86\n    if n == 89:\n        return 87\n    if n == 90:\n        return 88\n    if n == 91:\n        return 89\n    if n == 92:\n        return 90\n    if n == 93:\n        return 91\n    if n == 94:\n        return 92\n    if n == 95:\n        return 93\n    if n == 96:\n        return 94\n    if n == 97:\n        return 95\n    if n == 98:\n        return 96\n    if n == 99:\n        return 97\n    if n == 100:\n        return 98\n    if n == 101:\n        return 99\n    if n == 102:\n        return 100\n    if n == 103:\n        return 101\n    if n == 104:\n        return 102\n    if n == 105:\n        return 103\n    if n == 106:\n        return 104\n    if n == 107:\n        return 105\n    if n == 108:\n        return 106\n    if n == 109:\n        return 107\n    if n == 110:\n        return 108\n    if n == 111:\n        return 109\n    if n == 112:\n        return 110\n    if n == 113:\n        return 111\n    if n == 114:\n        return 112\n    if n == 115:\n        return 113\n    if n == 116:\n        return 114\n    if n == 117:\n        return 115\n    if n == 118:\n        return 116\n    if n == 119:\n        return 117\n    if n == 120:\n        return 118\n    if n == 121:\n        return 119\n    if n == 122:\n        return 120\n    if n == 123:\n        return 121\n    if n == 124:\n        return 122\n    if n == 125:\n        return 123\n    if n == 126:\n        return 124\n    if n == 127:\n        return 125\n    if n == 128:\n        return 126\n    if n == 129:\n        return 127\n    if n == 130:\n        return 128\n    if n == 131:\n        return 129\n    if n == 132:\n        return 130\n    if n == 133:\n        return 131\n    if n == 134:\n        return 132\n    if n == 135:\n        return 133\n    if n == 136:\n        return 134\n    if n == 137:\n        return 135\n    if n == 138:\n        return 136\n    if n == 139:\n        return 137\n    if n == 140:\n        return 138\n    if n == 141:\n        return 139\n    if n == 142:\n        return 140\n    if n == 143:\n        return 141\n    if n == 144:\n        return 142\n    if n == 145:\n        return 143\n    if n == 146:\n        return 144\n    if n == 147:\n        return 145\n    if n == 148:\n        return 146\n    if n == 149:\n        return 147\n    if n == 150:\n        return 148\n    if n == 151:\n        return 149\n    if n == 152:\n        return 150\n    if n == 153:\n        return 151\n    if n == 154:\n        return 152\n    if n == 155:\n        return 153\n    if n == 156:\n        return 154\n    if n == 157:\n        return 155\n    if n == 158:\n        return 156\n    if n == 159:\n        return 157\n    if n == 160:\n        return 158\n    if n == 161:\n        return 159\n    if n == 162:\n        return 160\n    if n == 163:\n        return 161\n    if n == 164:\n        return 162\n    if n == 165:\n        return 163\n    if n == 166:\n        return 164\n    if n == 167:\n        return 165\n    if n == 168:\n        return 166\n    if n == 169:\n        return 167\n    if n == 170:\n        return 168\n    if n == 171:\n        return 169\n    if n == 172:\n        return 170\n    if n == 173:\n        return 171\n    if n == 174:\n        return 172\n    if n == 175:\n        return 173\n    if n == 176:\n        return 174\n    if n == 177:\n        return 175\n    if n == 178:\n        return 176\n    if n == 179:\n        return 177\n    if n == 180:\n        return 178\n    if n == 181:\n        return 179\n    if n == 182:\n        return 18"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    n = int(n)\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            if i % j == 0:\n                break\n        else:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n >= 10:\n        return range(1,n+1)\n    else:\n        return [2,3,5,7,11,13,17,19,23,29]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return range(1, n+1)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if n % i == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 2, 3]\n    elif n == 4:\n        return [1, 2, 3, 4]\n    elif n == 5:\n        return [1, 2, 3, 4, 5]\n    elif n == 6:\n        return [1, 2, 3, 4, 5, 6]\n    elif n == 7:\n        return [1, 2, 3, 4, 5, 6, 7]\n    elif n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    elif n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    else:\n        return get_ludic(n-1) + get_ludic(n-2) + get_ludic(n-3) + get_ludic(n-4) + get_ludic(n-5) + get_ludic(n-6) + get_ludic(n-7) + get_ludic(n-8) + get_ludic(n-9)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    if n > 0:\n        for i in range(1, n+1):\n            if i <= n:\n                if i % 3 == 0:\n                    ludic_list.append(i)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    i = 2\n    lis = []\n    while i <= n:\n        if n % i == 0:\n            lis.append(i)\n        i += 1\n    return lis\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lud_n = []\n    for i in range(1, n + 1):\n        if i < 10:\n            if (i <= 10):\n                lud_n.append(i)\n            else:\n                if i % 10 == 0:\n                    lud_n.append(i)\n                else:\n                    lud_n.append(i // 10)\n        else:\n            lud_n.append(i)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    if len(s) == 0:\n        return \"\"\n    elif len(s) == 1:\n        return s\n    elif len(s) == 2:\n        return s[::-1]\n    elif len(s) == 3:\n        return s[::-1] + s[1::]\n    else:\n        return s[::-1] + \" \" + reverse_words(s[2:])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # using dictionary\n    d = {\"a\":0,\"b\":0,\"c\":0,\"d\":0,\"e\":0,\"f\":0,\"g\":0,\"h\":0,\"i\":0,\"j\":0,\"k\":0,\"l\":0,\"m\":0,\"n\":0,\"o\":0,\"p\":0,\"q\":0,\"r\":0,\"s\":0,\"t\":0,\"u\":0,\"v\":0,\"w\":0,\"x\":0,\"y\":0,\"z\":0}\n    # initialize reverse dictionary with space seperated words\n    reverse_d = {\" \":0, \"a\":0, \"b\":0, \"c\":0, \"d\":0, \"e\":0, \"f\":0, \"g\":0, \"h\":0, \"i\":0, \"j\":0, \"k\":0, \"l\":0, \"m\":0, \"n\":0, \"o\":0, \"p\":0, \"q\":0, \"r\":0, \"s\":0, \"t\":0, \"u\":0, \"v\":0, \"w\":0, \"x\":0, \"y\":0, \"z\":0}\n    # reverse dictionary by words\n    for i in s:\n        d[i] = d[i] + 1\n    # reverse dictionary by index\n    for i in d:\n        reverse_d[i] = d[i]\n    return reverse_d\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split(' ')\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_list = []\n    \n    for char in s:\n        reverse_list.append(char)\n    \n    return''.join(reverse_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join([word[::-1] for word in s.split()])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return None\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    s_rev = ''\n    return s_rev.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    num_list=[]\n    for i in range(2,num+1):\n        if num%i==0:\n            return False\n            break\n        num_list.append(i)\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Write your code here.\n    def isprime(n):\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0 or n < 2:\n            return False\n        for i in range(3,int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return isprime(num)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    i=2\n    while i*i <= num:\n        if num%i==0:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, num // 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num == 4 or num == 5:\n        return True\n    if num < 9:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * (math.pi / 180)\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    return degree\ndef degree_to_radian(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    degree = degree * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    return degree\ndef is_circle(center, radius):\n    '''\n    Check if the circle is inside the given radius.\n    '''\n    if (center.x - radius)**2 + (center.y - radius)**2 <= radius**2:\n        return True\n    else:\n        return False\ndef is_rectangle(p1, p2, p3):\n    '''\n    Check if the three points of the rectangle is inside the given point.\n    '''\n    if ((p1.x <= p2.x <= p3.x) and (p1.y <= p2.y <= p3.y)):\n        return True\n    else:\n        return False\ndef is_rectangle_angle(a, b, c):\n    '''\n    Check if the given angle is inside the given rectangle.\n    '''\n    if a*a + b*b < c*c - a*b*b/2:\n        return True\n    else:\n        return False\ndef get_triangle_area(p1, p2, p3):\n    '''\n    Get the area of the triangle.\n    '''\n    return ((p1.x - p2.x)*(p2.y - p3.y) + (p2.x - p3.x)*(p3.y - p1.y)) / 2\ndef get_triangle_perimeter(p1, p2, p3):\n    '''\n    Get the perimeter of the triangle.\n    '''\n    return ((p1.x - p2.x)*(p2.y - p3.y) + (p2.x - p3.x)*(p3.y - p1.y))\ndef get_triangle_area_circle(center, radius):\n    '''\n    Calculate the area of the circle.\n    '''\n    return math.pi * (radius**2)\ndef get_perimeter_circle(center, radius):\n    '''\n    Calculate the perimeter of the circle.\n    '''\n    return 2 * math.pi * radius\ndef get_circumference(radius):\n    '''\n    Calculate the circumference of a circle.\n    '''\n    return 2 * math.pi * radius\ndef get_circle_area(center, radius):\n    '''\n    Calculate the area of the circle.\n    '''\n    return math.pi * radius * radius\ndef is_circle_outside(center, radius):\n    '''\n    Check if the circle is inside the given radius.\n    '''\n    if ((center.x - radius)**2 + (center.y - radius)**2)**.5 <= radius**2:\n        return True\n    else:\n        return False\ndef get_circle_perimeter(center, radius):\n    '''\n    Calculate the perimeter of the circle.\n    '''\n    return 2 * math.pi * radius\ndef get_circle_area_circle(center, radius):\n    '''\n    Calculate the area of the circle.\n    '''\n    return math.pi * radius ** 2\ndef get_circle_perimeter_circle(center, radius):\n    '''\n    Calculate the perimeter of the circle.\n    '''\n    return math.pi * radius ** 2\ndef is_circle_inside(center, radius):\n    '''\n    Check if the circle is inside the given radius.\n    '''\n    if ((center.x - radius)**2 + (center.y - radius)**2)**.5 <= radius**2:\n        return True\n    else:\n        return False\ndef get_circle_perimeter(center, radius):\n    '''\n    Calculate the perimeter of the circle.\n    '''\n    return 2 * math.pi * radius\ndef get_circle_area(center, radius):\n    '''\n    Calculate the area of the circle.\n    '''\n    return math.pi * radius ** 2\ndef get_circle_perimeter(center, radius):\n    '''\n    Calculate the perimeter of the circle.\n    '''\n    return 2 * math.pi * radius\ndef get_rectangle_perimeter(center, base, height):\n    '''\n    Calculate the perimeter of the rectangle.\n    '''\n    return (base * height) + (base * (height / 2))\ndef get_rectangle_area(center, base, height):\n    '''\n    Calculate the area of the rectangle.\n    '''\n    return (base * height) + (base * (height / 2))\ndef get_rectangle_perimeter(center, base, height):\n    '''\n    Calculate the perimeter of the rectangle.\n    '''\n    return (base * height) + (base * (height / 2))\ndef get_rectangle_area(center, base, height):\n    '''\n    Calculate the area of the rectangle.\n    '''\n    return (base * height) + (base * (height / 2))\ndef is_rectangle_inside(p1, p2, p3):\n    '''\n    Check if the rectangle is inside the given point.\n    '''\n    if (p1.x <= p2.x <= p3.x) and (p1.y <= p2.y <= p3.y):\n        return True\n    else:\n        return False\ndef get_rectangle_perimeter(p1, p2, p3):\n    '''\n    Calculate the perimeter of the rectangle.\n    '''\n    return (p1.x - p2.x) + (p2.x - p3.x) + (p3.x - p1.x)\ndef get_rectangle_area(p1, p2, p3):\n    '''\n    Calculate the area of the rectangle.\n    '''\n    return (p1.x - p2.x) * (p2.y - p3.y) + (p2.x - p3.x) * (p3.y - p1.y)\ndef get_rectangle_perimeter_circle(p1, p2, p3):\n    '''\n    Calculate the perimeter of the rectangle.\n    '''\n    return (p1.x - p2.x) * (p2.y - p3.y) + (p2.x - p3.x) * (p3.y - p1.y)\ndef get_rectangle_area_circle(p1, p2, p3):\n    '''\n    Calculate the area of the rectangle.\n    '''\n    return (p1.x - p2.x) * (p2.y - p3.y)\ndef is_rectangle_inside_circle(center, radius):\n    '''\n    Check if the circle is inside the given point.\n    '''\n    if ((center.x - radius)**2 + (center.y - radius)**2)**.5 <= radius**2:\n        return True\n    else:\n        return False\ndef get_rectangle_perimeter(center, radius):\n    '''\n    Calculate the perimeter of the rectangle.\n    '''\n    return 2 * math.pi * radius\ndef get_rectangle_area(center, radius):\n    '''\n    Calculate the area of the rectangle.\n    '''\n    return math.pi * radius ** 2\ndef get_rectangle_perimeter_circle(center, radius):\n    '''\n    Calculate the perimeter of the rectangle.\n    '''\n    return math.pi * radius ** 2\ndef get_rectangle_area_circle(center, radius):\n    '''\n    Calculate the area of the rectangle.\n    '''\n    return math.pi * radius ** 2\ndef get_circle_perimeter(center, radius):\n    '''\n    Calculate the perimeter of the circle.\n    '''\n    return (2 * math.pi * radius)\ndef get_circl"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * 1.0 / 180.0 * math.pi\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\ndef main():\n    print(\"Hello, this is a simple calculator.\")\n    print(\"Type 'quit' at any point to quit the program.\")\n    while True:\n        print(\"This program calculates the factorial of a number.\")\n        print(\"The factorial of a number is the product of all the natural numbers below it.\")\n        print(\"The natural number, n, that does not divide the product of the natural numbers below it is 1.\")\n        print(\"You will give your program three inputs:\")\n        print(\"1. To determine the factorial of a number.\")\n        print(\"2. To determine the average of three numbers.\")\n        print(\"3. To print the statement describing a fruit.\")\n        print(\"4. To quit the program.\")\n        choice = input(\"What do you want to do? \")\n        if choice == 'quit':\n            break\n        elif choice == '1':\n            num = int(input(\"Please input a number: \"))\n            print(\"Factorial of\",num,\"is\",factorial(num))\n        elif choice == '2':\n            num1 = int(input(\"Please input a number: \"))\n            num2 = int(input(\"Please input a number: \"))\n            print(\"The average of\",num1,\"and\",num2,\"is\",avergage(num1,num2))\n        elif choice == '3':\n            print(\"The statement\",name,\"has a fruit of\",fruit())\n        elif choice == '4':\n            break\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (180.0 / math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    rad_deg = degree * (math.pi / 180)\n    return rad_deg\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    if degree % 360 == 0:\n        rad = degree/360 * 2 * math.pi\n        return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    i = 0\n    j = 0\n    substring = \"\"\n    start_index = 0\n    end_index = 0\n    while i < len(text):\n        if text[i] == pattern[j]:\n            if pattern[j]!= '\\\\':\n                j += 1\n            else:\n                if j > 0:\n                    j += 1\n                    if pattern[j] == '\\\\':\n                        j += 1\n                elif j == len(pattern):\n                    substring += pattern[j]\n                    if pattern[j] == '\\\\':\n                        substring += pattern[j]\n                    j += 1\n                elif pattern[j] == '^':\n                    substring += pattern[j]\n                    if pattern[j] == '^':\n                        substring += pattern[j]\n                    if pattern[j] == '$':\n                        substring += pattern[j]\n                    if pattern[j] == '*':\n                        substring += pattern[j]\n                    if pattern[j] == '.':\n                        substring += pattern[j]\n                    if pattern[j] == '+':\n                        substring += pattern[j]\n                    if pattern[j] == '(':\n                        substring += pattern[j]\n                    if pattern[j] == '{':\n                        substring += pattern[j]\n                    if pattern[j] == '}':\n                        substring += pattern[j]\n                    if pattern[j] == '?':\n                        substring += pattern[j]\n                    if pattern[j] == '[':\n                        substring += pattern[j]\n                    if pattern[j] == ']':\n                        substring += pattern[j]\n                    if pattern[j] == '{':\n                        j += 1\n                else:\n                    i += 1\n        else:\n            if j > 0:\n                if pattern[j] == '\\\\':\n                    j += 1\n                else:\n                    if pattern[j] == '^':\n                        j += 1\n                    elif pattern[j] == '$':\n                        j += 1\n                    elif pattern[j] == '*':\n                        j += 1\n                    elif pattern[j] == '.':\n                        j += 1\n                    elif pattern[j] == '+':\n                        j += 1\n                    elif pattern[j] == '(':\n                        j += 1\n                    elif pattern[j] == '{':\n                        j += 1\n                    elif pattern[j] == '}':\n                        j += 1\n                    elif pattern[j] == '?':\n                        j += 1\n                    elif pattern[j] == '[':\n                        j += 1\n                    elif pattern[j] == ']':\n                        j += 1\n                    elif pattern[j] == '{':\n                        j += 1\n                    else:\n                        j += 1\n                if pattern[j] == '^':\n                    j += 1\n                else:\n                    if pattern[j] == '$':\n                        j += 1\n                    else:\n                        j += 1\n        if j == len(pattern):\n            substring += pattern[j]\n            if pattern[j] == '$':\n                substring += pattern[j]\n            if pattern[j] == '*':\n                substring += pattern[j]\n            if pattern[j] == '.':\n                substring += pattern[j]\n            if pattern[j] == '+':\n                substring += pattern[j]\n            if pattern[j] == '(':\n                substring += pattern[j]\n            if pattern[j] == '{':\n                substring += pattern[j]\n            if pattern[j] == '}':\n                substring += pattern[j]\n            if pattern[j] == '?':\n                substring += pattern[j]\n            if pattern[j] == '[':\n                substring += pattern[j]\n            if pattern[j] == ']':\n                substring += pattern[j]\n            if pattern[j] == '{':\n                i += 1\n                j += 1\n    return substring, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if type(pattern) == str:\n        return find_literals_str(text, pattern)\n    elif type(pattern) == list:\n        return find_literals_list(text, pattern)\n    else:\n        raise TypeError(f\"Pattern is not a list or string.\")\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # define the regular expression\n    regex = re.compile(pattern, re.IGNORECASE)\n    # find all the matches\n    matches = regex.finditer(text)\n    # if there are no matches, then return nothing\n    if not matches:\n        return None, None, None\n    # otherwise, return a list of tuples\n    return matches.group(), matches.start(), matches.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = -1\n    end = -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.replace('[^\\w]','')\n    # Get the pattern as a list of characters\n    pattern = pattern.split()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = re.search(pattern, text)\n    if match:\n        start = match.start(0)\n        end = match.end(0)\n        substring = text[start:end]\n        return substring, start, end\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Define the pattern.\n    pattern = pattern.lower()\n    # Remove spaces, replace newlines, and make all special characters lowercase.\n    pattern = pattern.replace(' ', '_').replace('\\n','').replace('\\t','').replace('\\r','').replace('\\f','').replace('\\a','')\n    # Create a regular expression.\n    regex = re.compile(pattern, re.IGNORECASE)\n    # Find the substring in the string.\n    match = regex.findall(text)\n    # Return the start, end and substring.\n    return match[0][0], match[0][1], match[0][2]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # convert pattern to list\n    pattern_list = pattern.split(\",\")\n    # pattern_list.remove(\"\")\n    # pattern_list.remove(\"(\")\n    # pattern_list.remove(\")\")\n    # pattern_list.remove(\",\")\n    # pattern_list.remove(\".\")\n    # pattern_list.remove(\")\")\n    pattern_list.remove(\"(\")\n    pattern_list.remove(\")\")\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = str(text)\n    pattern = str(pattern)\n    match = re.search(pattern, text)\n    if match is None:\n        return 0, 0, 0\n    if match.start() == 0:\n        return match.start() + len(pattern), match.end(), match.end() - match.start()\n    return match.start(), match.end(), match.start() + len(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    return re.search(pattern, text)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        x=1\n        for i in range(n-1):\n            x=x*(n-i-1)\n        return x"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    if(n < 2):\n        return math.ceil(1.5 * n)\n    else:\n        if n % 2 == 0:\n            return (math.ceil((n-1)/2)) + 1\n        else:\n            return (math.ceil((n-1)/2) + 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n_be_bell = [i for i in range(1,n+1)]\n    n_be_bell.insert(0,0)\n    print(\"Be-Bell number:\", n_be_bell)\n    i = n_be_bell.index(max(n_be_bell))\n    print(\"Nth_Be_Bell_Number:\",i)\n    \n    return n_be_bell[i]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = 1\n    for x in range(1, n+1):\n        result *= x\n    return result\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = []\n    for i in range(1, n + 1):\n        a.append(i**2)\n    return a[n - 1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    t=n-1\n    while n>0:\n        # n-1 + x n-n-1 + x n+1\n        n=n-t\n        t=t*3\n    return t\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = 2\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 1\n    while num <= n:\n        if num % 2 == 1:\n            return num\n        num += 2\n    return num\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = []\n    i = 1\n    while i <= n:\n        result.append(i)\n        i += 1\n    result.append(1)\n    return result\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n=int(n)\n    a=0\n    b=1\n    for i in range(n):\n        print(\"b = \",b)\n        a=a*2\n        b=a+b\n    return(b)\n    \ndef StringToBinary(string): \n    '''\n    Create a function to convert a string to binary. \n    '''\n    binary = []\n    for char in string: \n        binary.append(bin(ord(char)))\n    return (binary)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    \n    n = len(list1)\n    \n    i = n - L[-1] - 1\n    \n    if L[i] < n:\n        list1 = [i] + list1[i+1:]\n        return list1\n    else:\n        list1 = list1[:L[i]] + list1[L[i]+1:]\n        return list1\n    \n    \nif __name__ == '__main__':\n    # print(remove_kth_element([3, 5, 2, 7, 0, 8, 4, 1, 6], 2))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 4))\n    \n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    \n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 2))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    \n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 0))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 2))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 3))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 4))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 5))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 2))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 3))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 4))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 5))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 3))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 4))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 5))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 5))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 1))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 3))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 4))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 5))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 6))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 7))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 2))\n    # print(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 3))\n    # print(remove_kt"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    s = list1[L]\n    list1[L] = None\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    remove_kth_element = []\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L:\n            remove_kth_element.append(list1[i])\n    list2.append(remove_kth_element[0])\n    list2.append(remove_kth_element[1])\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        if i < L-1:\n            temp.append(list1[i])\n        else:\n            temp.append(list1[i])\n    temp.append(list1[L-1])\n    return temp\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    kth = int(len(list1) / 2)\n    return [l for i, l in enumerate(list1) if i!= kth]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(L)\n    \n    k = len(L) - L[-1]\n    print(k)\n    \n    return remove_kth_element(L[k+1:], L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #raise NotImplementedError\n    return list1[:L]\n    "
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # store the size of the list\n    n = len(list1)\n    # store the index of the k'th element to remove\n    k = 0\n    # iterate from the end of the list\n    while (k < n):\n        # check if the k'th element is there\n        if (list1[k] == L):\n            # if yes, remove the k'th element\n            list1.pop(k)\n            # increment the index of the k'th element\n            k = k + 1\n        # increment the index of the k'th element\n        k = k + 1\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = test_list[0][N]\n    for i in range(1, N):\n        max = max if test_list[i][N]>max else test_list[i][N]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for j in range(N):\n        max = max if test_list[j][0] > max else max\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    return test_list[N-1][N-1]\n    \ndef add_matrix_element(matrix, element):\n    '''\n    Add an element to the end of a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        new_matrix[i].append(element)\n    return new_matrix\n    \ndef matrix_mult(matrix1, matrix2):\n    '''\n    Multiply two matrices.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix1)):\n        new_matrix.append([])\n        for j in range(len(matrix2[0])):\n            sum_ = 0\n            for k in range(len(matrix2)):\n                sum_ += matrix1[i][k]*matrix2[k][j]\n            new_matrix[i].append(sum_)\n    return new_matrix\n    \ndef matrix_transpose(matrix):\n    '''\n    Transpose a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            new_matrix[i].append(matrix[j][i])\n    return new_matrix\n    \ndef determinant(matrix):\n    '''\n    Calculate the determinant of a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            if(i==j):\n                new_matrix[i].append(matrix[i][j])\n            else:\n                new_matrix[i].append(matrix[i][j]*matrix[j][i])\n    return new_matrix[0][0]\n    \ndef get_min(matrix):\n    '''\n    Calculate the minimum of a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            new_matrix[i].append(min(matrix[i][j], matrix[i][j+1]))\n    return new_matrix\n    \ndef determinate_matrix(matrix):\n    '''\n    Calculate the determinate matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            if(i==j):\n                new_matrix[i].append(1)\n            else:\n                new_matrix[i].append(determinant(matrix))\n    return new_matrix\n    \ndef minor(matrix):\n    '''\n    Calculate the minor matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            new_matrix[i].append(minor(matrix[i][j]))\n    return new_matrix\n    \ndef permute(array):\n    '''\n    Permute a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(array)):\n        new_matrix.append([])\n        for j in range(len(array)):\n            new_matrix[i].append(array[j])\n    return new_matrix\n    \ndef max_column(matrix):\n    '''\n    Calculate the maximum column in a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        max_num = max(matrix[i])\n        for j in range(len(matrix[0])):\n            if(j==i):\n                new_matrix[i].append(max_num)\n            else:\n                new_matrix[i].append(max_num*matrix[j][i])\n    return new_matrix\n    \ndef mult_column(matrix, element):\n    '''\n    Multiply a column in a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            new_matrix[i].append(element)\n    return new_matrix\n    \ndef find_signs(matrix):\n    '''\n    Find the signs of a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            sign = 0\n            if(matrix[i][j]>0):\n                sign = 1\n            new_matrix[i].append(sign)\n    return new_matrix\n    \ndef inv_matrix(matrix):\n    '''\n    Invert a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            new_matrix[i].append(1/matrix[i][j])\n    return new_matrix\n    \ndef normalize(matrix):\n    '''\n    Normalize a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            if(i==j):\n                new_matrix[i].append(1)\n            else:\n                new_matrix[i].append(matrix[i][j]/matrix[j][i])\n    return new_matrix\n    \ndef print_matrix(matrix):\n    '''\n    Print a matrix.\n    '''\n    # Your code here\n    for i in range(len(matrix)):\n        print(matrix[i])\n    \ndef get_inverse(matrix):\n    '''\n    Calculate the inverse of a matrix.\n    '''\n    # Your code here\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[0])):\n            if(i==j):\n                new_matrix[i].append(1)\n            else:\n                new_matrix[i].append(matrix[i][j]/matrix[j][i])\n    return new_matrix\n    \ndef get_row(matrix, i):\n    '''\n    Calculate the value of a row.\n    '''\n    # Your code here\n    new_matrix = []\n    for j in range(len(matrix)):\n        new_matrix.append([])\n        for k in range(len(matrix[0])):\n            new_matrix[i].append(matrix[i][j]*matrix[j][k])\n    return new_matrix\n    \ndef find_row(matrix, i):\n    '''\n    Find the values of a row.\n    '''\n    # Your code here\n    new_matrix = []\n    for j in range(len(matrix)):\n        new_matrix.append([])\n        for k in range(len(matrix[0])):\n            new_matrix[i].append(matrix[i]"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    import sys\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return 0\n    if N == 1:\n        return test_list[0][N-1]\n    if N == 2:\n        return max(test_list[0][0], max(test_list[1][N-2], test_list[1][N-1]))\n    \n    for i in range(N):\n        # 1. Check if there is a element in the ith row\n        # 2. Check if there is a element in the ith column\n        # 3. If there is a element, then compare it with the max element\n        # 4. Else\n        if test_list[i][N-1] > test_list[i][N-2]:\n            return test_list[i][N-1]\n        elif test_list[i][N-1] > test_list[i][N-2]:\n            return test_list[i][N-2]\n        elif test_list[i][N-1] < test_list[i][N-3]:\n            return max(test_list[i][N-1], test_list[i][N-2], test_list[i][N-3])\n        elif test_list[i][N-1] < test_list[i][N-4]:\n            return max(test_list[i][N-2], test_list[i][N-3], test_list[i][N-4])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_of_n = []\n    \n    for i in test_list:\n        max_of_n.append(max(i))\n        \n    return max_of_n[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[0][N - 1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N - 1] > max_value:\n            max_value = test_list[i][N - 1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max:\n            max = row[N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][N]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge2lists(lst1, lst2):\n        '''\n        Write a python function which takes two lists of integers and returns a new list where the elements of both lists have the elements in the second position of the larger list.\n        '''\n        temp_list = []\n        i = 0\n        j = 0\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i][0] < lst2[j][0]:\n                temp_list.append(lst1[i])\n                i += 1\n            else:\n                temp_list.append(lst2[j])\n                j += 1\n        while i < len(lst1):\n            temp_list.append(lst1[i])\n            i += 1\n        while j < len(lst2):\n            temp_list.append(lst2[j])\n            j += 1\n        return temp_list\n    return merge2lists(lst1, lst2)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        lst1 = lst[i]\n        lst2 = lst[(i+1)%len(lst)]\n        new_lst.append([lst1[0],lst2[0]])\n    return new_lst\n    \ndef merge_two_lists(lst1,lst2):\n    '''\n    Write a python function which takes two lists of integers, and returns the same list, but with the first element of each sublist and the second one in the second list.\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        lst1_ele = lst1[i]\n        lst2_ele = lst2[i]\n        new_lst.append([lst1_ele,lst2_ele])\n    return new_lst\n    \ndef find_longest_comb(list1):\n    '''\n    Given a list of lists, returns the longest length of the longest list.\n    '''\n    longest_len = 0\n    for i in range(len(list1)):\n        longest_len = max(longest_len, len(list1[i]))\n    return longest_len\n    \ndef merge_the_tools(string, k):\n    '''\n    Given a string and an integer k, return a list of strings separated by at most k consecutive alphabetic letters. However, if there's no alphabetical substring of the input string, return an empty list.\n    '''\n    a = string.split(' ')\n    new_a = []\n    for i in range(len(a)):\n        new_a.append(a[i].lower())\n    new_a = list(set(new_a))\n    new_a = list(map(lambda x: x, new_a))\n    i=0\n    while (i < k):\n        a.append(a[i])\n        i+=1\n    for i in range(len(a)):\n        if i < k:\n            a[i] = a[i].capitalize()\n        else:\n            break\n    return a\n    \ndef is_palindrome(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_v2(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_v3(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    i,j = 0,len(s)-1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \ndef is_palindrome_v4(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    if s[::-1] == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #remove duplicate elements\n    d_lst = []\n    for i in lst:\n        if i not in d_lst:\n            d_lst.append(i)\n    #remove duplicates\n    d_lst = list(dict.fromkeys(d_lst))\n    return d_lst\n    \nprint(merge([[1,2],[3,4],[5,6],[7,8],[8,9],[9,10]]))"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    output = []\n    for sublist in lst:\n        output.append(sublist[0])\n        output.append(sublist[1])\n    return output\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0: \n        return []\n    if len(lst) == 1: \n        return lst\n    # sort the lists\n    lst = sorted(lst, key = lambda x: x[0])\n    # find the first element in each sublist\n    first = lst[0]\n    # find the second element in each sublist\n    second = lst[1]\n    # create the new list\n    new_list = []\n    # add elements to the new list \n    for i in range(len(first)):\n        new_list.append(first[i])\n    for i in range(len(second)):\n        new_list.append(second[i])\n    # return the new list\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # FILL IN YOUR CODE HERE\n    return None"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    i = 0\n    while i < len(lst):\n        j = 0\n        k = i\n        while k < len(lst):\n            if lst[k][0] > lst[j][0]:\n                new_lst.append([lst[k][0], lst[j][1]])\n                k = k + 1\n            else:\n                j = j + 1\n        i = i + 1\n    return new_lst\ndef merge2(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    i = 0\n    j = 0\n    while i < len(lst):\n        if j < len(lst):\n            if lst[i][0] > lst[j][0]:\n                new_lst.append([lst[i][0], lst[j][1]])\n                i = i + 1\n                j = j + 1\n            else:\n                j = j + 1\n        else:\n            j = j + 1\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        lst[i] = lst[i][0:2]\n        merged_list.append(lst[i])\n    return merged_list\n    \ndef merge_2(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        lst[i] = lst[i][0:2]\n        merged_list.append(lst[i])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        if not result:\n            result.append([])\n        for j in i:\n            result[-1].append(j)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    answer=[]\n    for i in range(len(lst)):\n        first=lst[i][0]\n        second=lst[i][1]\n        answer.append([first,second])\n    return answer\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumm_sum = 0\n    for item in test_list:\n        cumm_sum += item[1]\n    return cumm_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = 0\n    for i in range(len(test_list)):\n        cummulative += test_list[i]\n    return cummulative\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #find the sum of all the numbers in the tuple\n    cum = 0\n    for i in test_list:\n        cum = cum + i\n    #return the cummulative sum\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in test_list:\n        i = list(i)\n        i.sort()\n        for j in range(len(i)-1):\n            if i[j] > i[j+1]:\n                i[j], i[j+1] = i[j+1], i[j]\n    return sum(i)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for value in test_list:\n        sum += value\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #print(test_list)\n    if len(test_list) == 0:\n        return\n    \n    if type(test_list) is tuple:\n        test_list = list(test_list)\n        \n    total_sum = 0\n    for elem in test_list:\n        if type(elem) is int:\n            total_sum += elem\n        elif type(elem) is float:\n            total_sum += elem\n        elif type(elem) is str:\n            total_sum += len(elem)\n        else:\n            return None\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumm_sum = 0\n    for i in range(len(test_list)):\n        cumm_sum += test_list[i]\n    return cumm_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(num_tuple)/len(num_tuple)\n    \ndef get_average(nums):\n    '''\n    Given a list of numbers, return the average of those numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef get_greatest(nums):\n    '''\n    Given a list of numbers, return the number with the greatest sum.\n    '''\n    return max(nums)\n    \ndef get_smallest(nums):\n    '''\n    Given a list of numbers, return the number with the smallest sum.\n    '''\n    return min(nums)\n    \ndef get_sum(nums):\n    '''\n    Given a list of numbers, return the sum of all numbers.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \ndef get_product(nums):\n    '''\n    Given a list of numbers, return the product of those numbers.\n    '''\n    return 1\n    \ndef has_cycle(nums):\n    '''\n    Given a list of numbers, return true if there exists a cycle in it.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n    \ndef check_palindrome(nums):\n    '''\n    Given a list of numbers, check if it is palindrome or not.\n    '''\n    return nums == nums[::-1]\n    \ndef count_prime_factors(num):\n    '''\n    Given a number, return the count of prime factors.\n    '''\n    factors = []\n    for i in range(2,num):\n        if num % i == 0:\n            factors.append(i)\n    return len(factors)\n    \ndef product_greater_than(num):\n    '''\n    Given a list of integers, return a list of the product of all integers that are greater than num.\n    '''\n    return [num*i for i in range(1,num+1) if i*num>i]\n    \ndef product_greater_than_2(num):\n    '''\n    Given a list of integers, return a list of the product of all integers that are greater than num.\n    '''\n    return [num*i for i in range(1,num+1) if num*i>i]\n    \ndef remove_third_from_list(nums):\n    '''\n    Given a list of numbers, remove third from it.\n    '''\n    return nums[:3] + nums[4:]\n    \ndef reverse_list(nums):\n    '''\n    Given a list, return a list in reverse order.\n    '''\n    return nums[::-1]\n    \ndef contains_duplicate(nums):\n    '''\n    Given a list of numbers, return True if there are duplicate numbers in it.\n    '''\n    return len(set(nums)) > len(nums)\n    \ndef average(nums):\n    '''\n    Given a list of numbers, return the average of those numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef has_duplicate(nums):\n    '''\n    Given a list of numbers, return True if there are duplicates in it.\n    '''\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            return True\n        else:\n            nums_dict[num] = 1\n    return False\n    \ndef get_number_of_divisors(n):\n    '''\n    Given a number, return the number of divisors of that number.\n    '''\n    if n<=3:\n        return 1\n    else:\n        return get_number_of_divisors(n//2) + get_number_of_divisors(n//2+1)\n    \ndef get_sum_of_digits(num):\n    '''\n    Given a number, return the sum of the digits of that number.\n    '''\n    if num <= 0:\n        return 0\n    else:\n        return num%10 + get_sum_of_digits(int(num/10))\n    \ndef string_compression(string):\n    '''\n    Given a string, compress it using the following algorithm:\n    '''\n    compressed = []\n    for letter in string:\n        if len(compressed) <= len(string):\n            compressed.append(letter)\n        else:\n            if letter == compressed[len(compressed)-1]:\n                compressed.append(letter)\n            else:\n                compressed.append(letter)\n                compressed.append(letter)\n    return ''.join(compressed)\n    \ndef remove_at_most_n(n, array):\n    '''\n    Given a list of integers, remove at most n elements from it, return the new list.\n    '''\n    return [i for i in array if i<n]\n    \ndef is_power_of_two(num):\n    '''\n    Given a number, return True if it is a power of two.\n    '''\n    if num==0:\n        return False\n    while num%2==0:\n        num/=2\n    return num==1\n    \ndef odd_or_even(nums):\n    '''\n    Given a list of numbers, return the odd or even number.\n    '''\n    return nums[0]\n    \ndef sum_digits(n):\n    '''\n    Given a number, return its sum of the digits.\n    '''\n    return sum(map(int,str(n)))\n    \ndef main():\n    print('-='*20)\n    print('H A N G M A N'.center(50))\n    print('-='*20)\n    \n    nums = list(map(int, input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0446\u0435\u043b\u044b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b: ').split()))\n    nums.sort(reverse=True)\n    \n    print(f'\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: {nums}')\n    print(f'\u0427\u0438\u0441\u043b\u043e \u0440\u0430\u0432\u043d\u043e: {sum(nums)}')\n    \n    print(f'\u0427\u0438\u0441\u043b\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439: {len(nums)-get_number_of_divisors(sum(nums))}')\n    print(f'\u0427\u0438\u0441\u043b\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a: {get_number_of_divisors(sum(nums))}')\n    \n    print(f'\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043f\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0430\u043c: {find_prime_factor(nums)}')\n    print(f'\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442: {find_prime_factor(get_sum_of_digits(sum(nums))//10)}')\n    \n    print(f'\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043f\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u043c\u0443 \u0446\u0435\u043b\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443: {find_prime_factor(sum(nums)/10)}')\n    \n    print(f'\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443: {find_prime_factor(get_sum_of_digits(sum(nums)))}')\n    \n    print(f'\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443: {find_prime_factor(max(nums))}')\n    \n    print(f'\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043f\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0443 \u0447\u0438\u0441\u043b\u0443: {find_prime_factor(average(nums))}')\n    \n    print(f"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: (sum(x)/len(x)), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(nums)/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    list_sum = []\n    for i in range(len(nums)):\n        list_sum.append(sum(nums[i]))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Write your code here\n    total_of_list = []\n    for i in range(len(nums)):\n        total_of_list.append(sum(nums[i]))\n    avg = []\n    for i in range(len(total_of_list)):\n        avg.append(total_of_list[i]/len(total_of_list))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(n) / len(n) for n in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Hint: use the len() function to calculate the number of items in a tuple.\n    total = len(nums[0])\n    print(total)\n    # https://stackoverflow.com/questions/487095/calculating-the-average-of-a-tuple-of-tuples\n    return sum(nums)/total"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in zip(*nums)]\n    \ndef average_list(nums):\n    '''\n    Write a function which takes a list of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: use tuple comprehension to create a list of tuples\n    tuple_list = list(map(tuple, nums))\n    return tuple(sum(t) / len(t) for t in tuple_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        averages.append(sum(i) / len(i))\n    return averages\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def modulo(test_tup1, test_tup2):\n        '''\n        Write a function which takes two tuples of the same length and performs the element wise modulo.\n        '''\n        return ((test_tup1[0] - test_tup2[0]) % (test_tup1[1] - test_tup2[1])), (test_tup1[0] % (test_tup2[1]))\n    \n    return modulo(test_tup1, test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for element in test_tup1:\n        result = (result[0] + element, result[1] + element)\n    for element in test_tup2:\n        result = (result[0] + element, result[1] + element)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    modulo = 0\n    # loop through both tuples\n    for i in range(len(tup1)):\n        if i % len(tup2) == 0:\n            modulo = tup1[i] % tup2[i]\n            #print(tup1[i],tup2[i],modulo)\n    return modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Tuples have to be of same length')\n        return\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo = 0\n    i = 0\n    while i < len(test_tup1):\n        if test_tup1[i] % test_tup2[i] == 0:\n            modulo += test_tup1[i]\n            i += 1\n        else:\n            break\n    return modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #create empty list\n    tuple_mod = []\n    #loop through the tuples and calculate the element wise modulo\n    for i in range(len(test_tup1)):\n        x = test_tup1[i]\n        y = test_tup2[i]\n        #check for common values\n        if x == y:\n            #compute the modulo and add it to the empty list\n            modulo = test_tup1[i]\n            tuple_mod.append(modulo)\n        else:\n            #calculate the element wise modulo\n            tuple_mod.append(x%y)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tuple = test_tup1 + test_tup2\n    return new_tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    mod_tup1 = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    print(mod_tup1)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Method 1: \n    #     if first tuple is empty, return first tuple and first tuple\n    #     if second tuple is empty, return second tuple and second tuple\n    #     if len(first tuple)!= len(second tuple): return None\n    #     else:\n    #         return tuple(map(lambda x,y: x%y, first tuple, second tuple))\n    \n    # Method 2: \n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n    else:\n        return None\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(list(map(lambda x, y: x % y, test_tup1, test_tup2)))\n    return result\n    \ndef test_tuple():\n    '''\n    Test tuples.\n    '''\n    assert tuple_modulo((1,2,3), (4,5,6)) == (0, 1, 2)\n    assert tuple_modulo((1,2,3), (4,5,6)) == (4, 0, 2)\n    assert tuple_modulo((1,2,3), (4,5,6)) == (4, 5, 0)\n    assert tuple_modulo((1,2,3), (4,5,6)) == (0, 0, 0)\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(d, steps):\n        for j in range(d, steps):\n            if ((i + j) % 2)!= 0:\n                jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == 0 or steps == 0:\n        return 1\n    return min_Jumps(steps-1, d) + min_Jumps(steps-1, d-1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    for i in range(1, steps + 1):\n        if d == (d, 0):\n            return i\n        else:\n            J += 1\n            d = (d - 1, 0)\n    return J\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 1\n    # Set up the initial path as 0, 0, d, 0, d, d, 0, d, 0,...\n    path = [0, 0, d, 0, d, d, 0, d, 0]\n    # Initialize a list of current indexes in the path \n    current_path = [0, 0]\n    # Iterate through each step in the steps array\n    for step in steps: \n        if step!= 0: \n            # Calculate the next step\n            new_step = step + path[current_path[0]]\n            if new_step > d: \n                # Update the path \n                path[current_path[0]] = path[current_path[0]] + path[current_path[0]]\n                current_path[0] = current_path[0] + 1\n            else: \n                current_path[0] = current_path[0] + 1\n    # Return the number of jumps required.\n    return min(path[-1], path[-2])"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def is_valid_jump(step,d,a):\n        return not (step > d or step == d and a[step-1][step-1] == -1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # YOUR CODE HERE\n    def check_Jumps(row, column, origin, steps, d):\n        if row == 0:\n            return steps[column] == 0\n        else:\n            if origin[0] + d == origin[0] + steps[column]:\n                return check_Jumps(row - 1, column, origin, steps, d) or check_Jumps(row - 1, column + 1, origin, steps, d)\n            else:\n                return False\n        # END_YOUR_ANSWER\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Base case\n    if d == 0: \n        return steps\n    if d == 1: \n        return min(steps)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if the path is found \n    if steps == 0: \n        return steps\n    # Append the minimum number of jumps to the path \n    if steps < d: \n        steps += min_Jumps(steps, d) \n    return steps \n    # Check if there are any more paths \n    # to reach the point \n    # that is not found. \n    # If there are, add one to steps. \n    # Otherwise, repeat the previous step. \n    # If it is not found, return -1. \n    # Note that this line will be outside of the loop. \n    # Thus, the function will never return -1. \n    return min_Jumps(steps, d) \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    print(steps, d)\n    if d == 0: \n        return 1\n    elif d == 1: \n        return 0\n    else: \n        return steps + min_Jumps(steps + 1, d - 1) \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return steps\ndef check_Jumps(steps,d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return steps\ndef distance_vector(vec1,vec2):\n    '''\n    Write a function to calculate the distance between two vectors, where the magnitude of the two vectors is the magnitude of the difference between two vectors.\n    '''\n    return math.sqrt(pow(vec1[0]-vec2[0],2)+pow(vec1[1]-vec2[1],2))\ndef vector_magnitude(vec1):\n    '''\n    Write a function to calculate the magnitude of a vector.\n    '''\n    return math.sqrt(pow(vec1[0],2)+pow(vec1[1],2))\ndef vector_norm(vec):\n    '''\n    Write a function to calculate the magnitude of a vector.\n    '''\n    return pow(vec[0],2)+pow(vec[1],2)\ndef vector_unit(vec):\n    '''\n    Write a function to calculate the magnitude of a vector.\n    '''\n    return math.sqrt(pow(vec[0],2)+pow(vec[1],2))\ndef normal_vector(vec):\n    '''\n    Write a function to calculate the magnitude of a vector.\n    '''\n    return math.sqrt(pow(vec[1],2)+pow(vec[0],2))\ndef angle(v1,v2):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return math.acos(vector_unit(v1)/vector_norm(v1))\ndef angle_vector(vec1,vec2):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return math.acos(vector_norm(vec1)/vector_norm(vec2))\ndef max_angle(vec1, vec2):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return max(angle(vec1,vec2),angle_vector(vec1,vec2))\ndef min_angle(vec1, vec2):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return min(angle(vec1,vec2),angle_vector(vec1,vec2))\ndef search(v, vlist):\n    '''\n    Write a function to return the index of the element that is closest to a given vector.\n    '''\n    return vlist.index(min([vlist.index(v),vlist.index(vec)]))\ndef min_dot_vector(vec1, vec2):\n    '''\n    Write a function to calculate the minimum dot product between two vectors\n    '''\n    return vector_norm(vec1)*vec1[0] + vector_norm(vec1)*vec1[1]\ndef dot_vector(vec1, vec2):\n    '''\n    Write a function to calculate the dot product between two vectors\n    '''\n    return vector_norm(vec1)*vec1[0] + vector_norm(vec1)*vec1[1]\ndef vector_angle(vec1,vec2):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return math.acos(vector_norm(vec1)/vector_norm(vec2))\ndef vector_unit_angle(vec1):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return math.acos(vector_norm(vec1)/vector_norm(vec1))\ndef angle_between(vec1, vec2):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return math.acos(vector_norm(vec1)/vector_norm(vec2))\ndef normal_vector_angle(vec1,vec2):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return math.acos(vector_norm(vec1)/vector_norm(vec2))\ndef unit_vector_angle(vec1):\n    '''\n    Write a function to calculate the angle between two vectors\n    '''\n    return math.acos(vector_norm(vec1)/vector_norm(vec1))\ndef distance_between(vec1, vec2):\n    '''\n    Write a function to calculate the distance between two vectors\n    '''\n    return math.sqrt(pow(vec1[0]-vec2[0],2)+pow(vec1[1]-vec2[1],2))\ndef remove_first(lst):\n    '''\n    Write a function to remove the first item in a list, if the list is not empty.\n    '''\n    if lst:\n        return lst.pop(0)\n    else:\n        return None\ndef remove_last(lst):\n    '''\n    Write a function to remove the last item in a list, if the list is not empty.\n    '''\n    if lst:\n        return lst.pop(-1)\n    else:\n        return None\ndef remove_first_item(lst):\n    '''\n    Write a function to remove the first item in a list, if the list is not empty.\n    '''\n    if lst:\n        return lst[0]\n    else:\n        return None\ndef remove_last_item(lst):\n    '''\n    Write a function to remove the last item in a list, if the list is not empty.\n    '''\n    if lst:\n        return lst.pop()\n    else:\n        return None\ndef remove_first_and_last(lst):\n    '''\n    Write a function to remove the first item in a list, and the last item in a list, if the list is not empty.\n    '''\n    if lst:\n        return lst[0], lst[-1]\n    else:\n        return None\ndef print_list(lst):\n    '''\n    Write a function to print a list.\n    '''\n    print(lst)\ndef reverse_list(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    return lst[::-1]\ndef test_norm(lst):\n    '''\n    Write a function to calculate the length of a list\n    '''\n    return len(lst)\ndef test_square(lst):\n    '''\n    Write a function to calculate the square of a list\n    '''\n    return pow(lst[0],2)+pow(lst[1],2)+pow(lst[2],2)\ndef test_sum(lst):\n    '''\n    Write a function to calculate the sum of a list\n    '''\n    return sum(lst)\ndef test_norm_length(lst):\n    '''\n    Write a function to calculate the length of a list\n    '''\n    return len(lst)\ndef find_index(lst, item):\n    '''\n    Write a function to return the index of an item in a list\n    '''\n    i = 0\n    while(i < len(lst)):\n        if lst[i] == item:\n            return i\n        i += 1\n    return -1\ndef intersection(lst1,lst2):\n    '''\n    Write a function to return a list of all the indexes of elements that are in both lists.\n    '''\n    indexes = []\n    for i in range(0,len(lst1)):\n        if lst1[i] in lst2:\n            indexes.append(i)\n    return indexes\ndef intersection_intersect(lst1,lst2):\n    '''\n    Write a function to return the indexes of elements that are in both lists.\n    '''\n    i = 0\n    while(i < len(lst1)):\n        if lst1[i] in lst2:\n            return [i]\n        i += 1\n    return []\ndef to_string(lst):\n    '''\n    Write a function to return a string.\n    '''\n    return str(lst)\ndef max_elements(lst):\n    '''\n    Write a function to return the maximu"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Recursive way\n    # def merge(l1,l2):\n    #     if len(l1)==0 or len(l2)==0:\n    #         return []\n    #     elif l1[0]<l2[0]:\n    #         return [l1[0]]+merge(l1[1:],l2)\n    #     else:\n    #         return [l2[0]]+merge(l1,l2[1:])\n    #\n    # return merge(nums1,nums2)\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if nums1[i]<nums2[j]:\n    #             nums1[i],nums2[j]=nums2[j],nums1[i]\n    # return nums1\n    # list1=nums1+nums2\n    # list2=nums2+nums1\n    # return list1,list2\n    # def merge_sort(arr):\n    #     if len(arr)<2:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    # def merge_sort(arr):\n    #     if len(arr)<2:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    # def merge_sort(arr):\n    #     if len(arr)<=1:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    # def merge_sort(arr):\n    #     if len(arr)<2:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    # def merge_sort(arr):\n    #     if len(arr)<=1:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    # def merge_sort(arr):\n    #     if len(arr)<=1:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    # def merge_sort(arr):\n    #     if len(arr)<=1:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    # def merge_sort(arr):\n    #     if len(arr)<=1:\n    #         return arr\n    #     mid=len(arr)//2\n    #     left=arr[:mid]\n    #     right=arr[mid:]\n    #     left=merge_sort(left)\n    #     right=merge_sort(right)\n    #     return merge(left,right)\n    # return merge_sort(nums1+nums2)\n    def quick_sort(nums):\n        def merge(arr1,arr2):\n            if len(arr1)<len(arr2):\n                arr1,arr2=arr2,arr1\n            while len(arr1)>0 and len(arr2)>0:\n                if arr1[0]<arr2[0]:\n                    nums[0],nums[arr1[0]]=arr1[0],nums[0]\n                else:\n                    nums[0],nums[arr2[0]]=arr2[0],nums[0]\n                arr1=arr1[1:]\n                arr2=arr2[1:]\n        return merge(nums[:len(nums)//2]+nums[len(nums)//2:],nums[len(nums)//2:])\n    nums=[6,5,4,3,2,1,0]\n    print(quick_sort(nums))\n    # for i in range(len(nums)):\n    #     print(nums[i])\n    # return nums\n    # class Solution:\n    #     def sortArray(self, nums: List[int]) -> List[int]:\n    #         def merge(a,b):\n    #             if len(a)<=len(b):\n    #                 return a+b\n    #             return b+a\n    #         return merge(nums[:len(nums)//2]+nums[len(nums)//2:],nums[len(nums)//2:])\n    # return nums\n    # class Solution:\n    #     def sortArray(self, nums: List[int]) -> List[int]:\n    #         def merge(a,b):\n    #             if len(a)<len(b):\n    #                 return a+b\n    #             return b+a\n    #         return merge(nums[:len(nums)//2]+nums[len(nums)//2:],nums[len(nums)//2:])\n    # return nums\n    # class Solution:\n    #     def sortArray(self, nums: List[int]) -> List[int]:\n    #         def merge(a,b):\n    #             if len(a)<len(b):\n    #                 return a+b\n    #             return b+a\n    #         return merge(nums[:len(nums)//2]+nums[len(nums)//2:],nums[len(nums)//2:])\n    # return nums\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    length1=len(nums1)\n    length2=len(nums2)\n    index=0\n    result=[]\n    if length1<length2:\n        for i in range(length1):\n            index+=1\n            result.append(nums1[i])\n        for j in range(length2):\n            index+=1\n            result.append(nums2[j])\n        return result\n    else:\n        for i in range(length1):\n            index+=1\n            result.append(nums1[i])\n        for j in range(length2):\n            index+=1\n            result.append(nums2[j])\n        return result\n    \ndef multiply_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    length1=len(nums1)\n    length2=len(nums2)\n    index=0\n    result=[]\n    if length1<length2:\n        for i in range(length1):\n            index+=1\n            result.append(nums1[i])\n        for j in range(length2):\n            index+=1\n            result.append(nums2[j])\n        return result\n    else:\n        for i in range(length1):\n            index+=1\n            result.append(nums1[i])\n        for j in range(length2):\n            index+=1\n            result.append(nums2[j])\n        return result\n    \ndef apply_list(nums1,nums2,m):\n    '''\n    Write a function to apply two lists element wise.\n    '''\n    length1=len(nums1)\n    length2=len(nums2)\n    index=0\n    result=[]\n    if length1<length2:\n        for i in range(length1):\n            index+=1\n            result.append(nums1[i])\n        for j in range(length2):\n            index+=1\n            result.append(nums2[j])\n        return result\n    else:\n        for i in range(length1):\n            index+=1\n            result.append(nums1[i])\n        for j in range(length2):\n            index+=1\n            result.append(nums2[j])\n        return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append([])\n        for j in range(len(nums2)):\n            if nums1[i]==nums2[j]:\n                new_list[i].append(nums1[i])\n            else:\n                new_list[i].append(nums2[j])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        temp_list1 = nums1\n        temp_list2 = nums2\n    else:\n        temp_list1 = nums2\n        temp_list2 = nums1\n    lst_sum = []\n    while len(temp_list1) > 0:\n        if len(temp_list1)!= 0:\n            lst_sum.append(temp_list1.pop())\n        if len(temp_list2)!= 0:\n            lst_sum.append(temp_list2.pop())\n    print(lst_sum)\n    return lst_sum\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    length=len(nums1)\n    if len(nums2)>length:\n        print(\"Recieved a List greater than the length of the second list\")\n        return\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i=0\n    j=0\n    x=0\n    while i<len(nums1):\n        while j<len(nums2):\n            if nums1[i]==nums2[j]:\n                x+=1\n            j+=1\n        j=0\n        i+=1\n    return x\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # a=[]\n    # b=[]\n    # for i in range(0,len(nums1)):\n    #     a.append(nums1[i])\n    #     b.append(nums2[i])\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    for i in nums1:\n        if i in nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        num_list1 = nums1[0::]\n        num_list2 = nums2[0::]\n        num_list = num_list1 + num_list2\n        num_list.sort()\n        div_list = [num_list[i] / num_list[i-1] for i in range(1,len(num_list))]\n        return div_list\n    except:\n        return \"List must be of the same length\"\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # preprocess the input\n    if not nums1:\n        return []\n    if not nums2:\n        return []\n    \n    # find the max length\n    max_length = max(len(nums1),len(nums2))\n    \n    # preprocess the input\n    if max_length == 0:\n        return []\n    \n    # find the index of the first element\n    first_index = max_length-1\n    for i in range(0,first_index):\n        if nums1[i] > nums2[i]:\n            first_index = i\n            break\n    \n    # find the index of the last element\n    last_index = max_length-1\n    for i in range(max_length-2, -1, -1):\n        if nums1[i] > nums2[i]:\n            last_index = i\n            break\n    \n    # calculate the common element\n    a = nums1[first_index]\n    b = nums2[last_index]\n    c = nums1[first_index:last_index+1]\n    \n    # return the element pair\n    return [a,b,c]\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_lst = list(test_str)\n    i = 0\n    while i < len(test_str_lst):\n        j = len(test_str_lst) - 1\n        test_str_lst[i], test_str_lst[j] = test_str_lst[j], test_str_lst[i]\n        i += 1\n    return \"\".join(test_str_lst)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    test_str = test_str[::-1]\n    test_str =''.join(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l = []\n    for i in range(0, len(test_str)):\n        l.append(test_str[i])\n    return l\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return ''\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = list(test_str)\n    \n    for i in range(len(num_list)):\n        if num_list[i]!= '0':\n            num_list[i] = '.'\n        num_list[i] = num_list[i].zfill(3)\n    \n    test_str = ''.join(num_list)\n    \n    return test_str\n    \n    \ndef get_bracket_amount(test_str):\n    '''\n    Write a function to count the number of opening and closing brackets.\n    '''\n    cnt_open = 0\n    cnt_close = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '(':\n            cnt_open += 1\n        elif test_str[i] == ')':\n            cnt_close += 1\n            \n    return cnt_open + cnt_close\n    \n    \ndef get_num_chars(test_str):\n    '''\n    Write a function to count the number of characters.\n    '''\n    num_char = 0\n    for i in range(len(test_str)):\n        if test_str[i] == '0' or test_str[i] == '.':\n            num_char += 1\n    \n    return num_char\n    \n    \ndef get_num_quotations(test_str):\n    '''\n    Write a function to count the number of numbers in a given string.\n    '''\n    num_quotations = 0\n    for i in range(len(test_str)):\n        if test_str[i] == '0':\n            num_quotations += 1\n    \n    return num_quotations\n    \n    \ndef get_num_asterisks(test_str):\n    '''\n    Write a function to count the number of times '*' appears in the given string.\n    '''\n    num_asterisks = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '*':\n            num_asterisks += 1\n    \n    return num_asterisks\n    \n    \ndef get_num_colon(test_str):\n    '''\n    Write a function to count the number of times ':' appears in the given string.\n    '''\n    num_colon = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == ':':\n            num_colon += 1\n    \n    return num_colon\n    \n    \ndef get_num_comma(test_str):\n    '''\n    Write a function to count the number of times ',' appears in the given string.\n    '''\n    num_comma = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == ',':\n            num_comma += 1\n    \n    return num_comma\n    \n    \ndef get_num_dash(test_str):\n    '''\n    Write a function to count the number of times '-' appears in the given string.\n    '''\n    num_dash = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '-':\n            num_dash += 1\n    \n    return num_dash\n    \n    \ndef get_num_strict_brackets(test_str):\n    '''\n    Write a function to count the number of strict brackets.\n    '''\n    num_strict = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '(':\n            num_strict += 1\n        elif test_str[i] == ')':\n            num_strict -= 1\n    \n    return num_strict\n    \n    \ndef get_num_weak_brackets(test_str):\n    '''\n    Write a function to count the number of weak brackets.\n    '''\n    num_weak = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '{' or test_str[i] == '}':\n            num_weak += 1\n    \n    return num_weak\n    \n    \ndef get_num_dashes(test_str):\n    '''\n    Write a function to count the number of dashes.\n    '''\n    num_dashes = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '-':\n            num_dashes += 1\n    \n    return num_dashes\n    \n    \ndef get_num_punctuation(test_str):\n    '''\n    Write a function to count the number of punctuation marks.\n    '''\n    num_punctuation = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '?' or test_str[i] == '!':\n            num_punctuation += 1\n    \n    return num_punctuation\n    \n    \ndef get_num_eacute(test_str):\n    '''\n    Write a function to count the number of eacute.\n    '''\n    num_eacute = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == 'E':\n            num_eacute += 1\n    \n    return num_eacute\n    \n    \ndef get_num_circumflex(test_str):\n    '''\n    Write a function to count the number of circumflex.\n    '''\n    num_circumflex = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == 'I':\n            num_circumflex += 1\n    \n    return num_circumflex\n    \n    \ndef get_num_minus(test_str):\n    '''\n    Write a function to count the number of minus signs.\n    '''\n    num_minus = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '-':\n            num_minus += 1\n    \n    return num_minus\n    \n    \ndef get_num_asterisk(test_str):\n    '''\n    Write a function to count the number of asterisks.\n    '''\n    num_asterisks = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '*':\n            num_asterisks += 1\n    \n    return num_asterisks\n    \n    \ndef get_num_zero(test_str):\n    '''\n    Write a function to count the number of zeroes.\n    '''\n    num_zeroes = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '0':\n            num_zeroes += 1\n    \n    return num_zeroes\n    \n    \ndef get_num_one(test_str):\n    '''\n    Write a function to count the number of ones.\n    '''\n    num_ones = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '1':\n            num_ones += 1\n    \n    return num_ones\n    \n    \ndef get_num_two(test_str):\n    '''\n    Write a function to count the number of twos.\n    '''\n    num_twos = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '2':\n            num_twos += 1\n    \n    return num_twos\n    \n    \ndef get_num_three(test_str):\n    '''\n    Write a function to count the number of threes.\n    '''\n    num_threes = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] == '3':\n            num_threes += 1\n    \n    return num_threes\n    \n    \ndef get_num_four(test_str):\n    '''\n    Write a function to count the number of fours.\n    '''\n    num_fours = 0\n    \n    for i in range(le"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.replace(',','')\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp = list()\n    for i in test_str:\n        if i.isdigit() == False:\n            temp.append(i)\n    num = \"\".join(temp)\n    num = num.zfill(len(num))\n    return num\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    '''\n    # Simple solution\n    a_list = test_str.split()\n    for i in range(len(a_list)):\n        a_list[i] = int(a_list[i])\n    return''.join(map(str,a_list))\n    '''\n    # Better solution\n    numbers = list(map(int, test_str.split()))\n    while numbers:\n        numbers.append(numbers.pop(0))\n    return \" \".join(map(str, numbers))\n    '''\n    \n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_int = list(map(int, test_str.split(',')))\n    test_str_int.sort(reverse=True)\n    test_str = ','.join([str(i) for i in test_str_int])\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    def move_num_2(my_str):\n        my_list = my_str.split(' ')\n        new_list = []\n        for i in my_list:\n            if i.isdigit():\n                new_list.append(i)\n        new_list.reverse()\n        new_str =''.join(new_list)\n        return new_str\n    return move_num_2(test_str)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    res = 0\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if (a[j] % a[i] == 0):\n                res += 1\n    return res\ndef range_subset(a,r,n):\n    '''\n    Write a function to find the subset of a that sums to exactly r.\n    '''\n    return range_subset_with_one(a,r,n+1,0,r)\ndef range_subset_with_one(a,r,n,sum,r0):\n    '''\n    Write a function to find the subset of a that sums to exactly r.\n    '''\n    if (sum == r0):\n        return [0,0]\n    if (sum < r0):\n        return [0,0]\n    if (sum > r):\n        return [0,0]\n    if (r < n):\n        if (sum + a[r] >= r):\n            return [a[r],r]\n        else:\n            return range_subset_with_one(a,r+1,n,sum+a[r],r0+1)\n    else:\n        if (sum + a[n] >= r):\n            return [a[n],n]\n        else:\n            return range_subset_with_one(a,0,n-1,sum+a[n],r0)"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = set()\n    N = len(a)\n    for i in range(N):\n        for j in range(i+1, N):\n            if a[j] % a[i] == 0:\n                s.add(a[j])\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max = 0\n    i = 0\n    j = 0\n    while i < len(a) and j < len(a):\n        while a[i] % a[j] == 0:\n            if a[i] >= a[j]:\n                j += 1\n            else:\n                i += 1\n            if j == len(a):\n                j = 0\n                i += 1\n        if a[i] > max:\n            max = a[i]\n        i += 1\n        j += 1\n    return max\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    n = len(a)\n    temp = a[0]\n    ans = a[0]\n    \n    # Write your code here.\n    if n < 2:\n        return 0\n    else:\n        for i in range(1, n):\n            if ans % temp == 0:\n                temp = ans\n            ans += temp\n    \n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    smallest_subset = []\n    n = len(a)\n    for i in range(1, n):\n        j = i\n        while (a[i-1] % a[j-1] == 0) and (j-1) > 0:\n            j -= 1\n        smallest_subset.append(a[i-1])\n        a[i-1] = a[j-1]\n        a[j-1] = a[i-1]\n    print(smallest_subset)\n    return smallest_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # All possible combinations of numbers\n    # all_numbers = []\n    # for i in range(1, a[0]+1):\n    #     for j in range(1, a[1]+1):\n    #         all_numbers.append([i, j])\n    # # print(all_numbers)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Since we have to find the max of the whole list, we can use the max and min function\n    # The max and min function of the list is a function that returns the number of maximum elements in a given list.\n    # We know that the list is an array, and the max and min function are both functions.\n    # To get the max and min we can use the function max.\n    # The maximum of every element in the list is an integer.\n    # If the list is not divisible, then we don't know how many elements of the list are divisible.\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #return max(len(list(set(a))) for a in permutations(a))\n    #return max([len(set(a)) for a in a])\n    return max(len(set(a)) for a in a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def find_all_divisibles(a, n):\n        '''\n        Return all possible divisibles in the list a.\n        '''\n        if n == 0:\n            return []\n        divisibles = []\n        for i in range(0, len(a)):\n            if a[i] % n == 0:\n                divisibles.append(a[i])\n        return divisibles\n    \n    # Calculate all possible divisibles\n    def get_all_divisibles(a):\n        '''\n        Return all possible divisibles in the list a.\n        '''\n        if len(a) == 1:\n            return a\n        new_list = []\n        for i in a:\n            if i not in new_list:\n                new_list.append(i)\n        return get_all_divisibles(new_list)\n    \n    a = get_all_divisibles(a)\n    \n    # Find the largest subset with all its divisibles\n    def find_largest_subset(a):\n        '''\n        Return the largest subset with all its divisibles.\n        '''\n        n = len(a)\n        for i in range(0, n-1):\n            for j in range(i+1, n):\n                a1 = a[i]\n                a2 = a[j]\n                if a1 % a2 == 0:\n                    new_subset = [a2]\n                    for k in range(j, n):\n                        if a[k] % a2 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a1)\n                    for k in range(i, n):\n                        if a[k] % a1 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a[n-1])\n                    a[i] = a1\n                    a[j] = a2\n                    a[n-1] = a1\n                    a[n] = a2\n                    a[n-2] = new_subset\n                    return a[:n]\n    \n    # print(find_all_divisibles(a))\n    # print(find_largest_subset(a))\n    \n    # Find all the sub-sets with only one divisible\n    def get_all_divisibles_even(a):\n        '''\n        Return all possible divisibles with only one divisible.\n        '''\n        if len(a) == 1:\n            return a\n        new_list = []\n        for i in a:\n            if i % 2 == 0:\n                new_list.append(i)\n        return get_all_divisibles_even(new_list)\n    \n    a = get_all_divisibles_even(a)\n    \n    # Find the largest subset with only one divisible\n    def find_largest_subset_even(a):\n        '''\n        Return the largest subset with only one divisible.\n        '''\n        n = len(a)\n        for i in range(0, n-1):\n            for j in range(i+1, n):\n                a1 = a[i]\n                a2 = a[j]\n                if a1 % a2 == 0:\n                    new_subset = [a2]\n                    for k in range(j, n):\n                        if a[k] % a2 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a1)\n                    for k in range(i, n):\n                        if a[k] % a1 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a[n-1])\n                    a[i] = a1\n                    a[j] = a2\n                    a[n-1] = a1\n                    a[n] = a2\n                    a[n-2] = new_subset\n                    return a[:n]\n    \n    # print(find_all_divisibles_even(a))\n    # print(find_largest_subset_even(a))\n    \n    # print(len(find_all_divisibles(a)))\n    # print(len(find_largest_subset(a)))\n    \n    # Find all the sub-sets with both divisibles\n    def get_all_divisibles_both(a):\n        '''\n        Return all possible divisibles.\n        '''\n        if len(a) == 1:\n            return a\n        new_list = []\n        for i in a:\n            new_list.append(i)\n        for i in a:\n            if i % 2 == 0:\n                new_list.append(i)\n        for i in range(0, len(a)):\n            if i % 2 == 0:\n                new_list.append(a[i])\n        return get_all_divisibles_both(new_list)\n    \n    a = get_all_divisibles_both(a)\n    \n    # print(find_all_divisibles_both(a))\n    # print(find_largest_subset_both(a))\n    \n    # Find the largest subset with both divisibles\n    def find_largest_subset_both(a):\n        '''\n        Return the largest subset with both divisibles.\n        '''\n        n = len(a)\n        for i in range(0, n-1):\n            for j in range(i+1, n):\n                a1 = a[i]\n                a2 = a[j]\n                if a1 % a2 == 0:\n                    new_subset = [a2]\n                    for k in range(j, n):\n                        if a[k] % a2 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a1)\n                    for k in range(i, n):\n                        if a[k] % a1 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a[n-1])\n                    a[i] = a1\n                    a[j] = a2\n                    a[n-1] = a1\n                    a[n] = a2\n                    a[n-2] = new_subset\n                    return a[:n]\n    \n    # print(find_all_divisibles_both(a))\n    # print(find_largest_subset_both(a))\n    \n    # Find the largest subset with both divisibles\n    def get_all_divisibles_both2(a):\n        '''\n        Return all possible divisibles.\n        '''\n        if len(a) == 1:\n            return a\n        new_list = []\n        for i in a:\n            if i % 2 == 0:\n                new_list.append(i)\n        for i in range(0, len(a)):\n            if i % 2 == 0:\n                new_list.append(a[i])\n        return get_all_divisibles_both2(new_list)\n    \n    a = get_all_divisibles_both2(a)\n    \n    # print(find_all_divisibles_both2(a))\n    # print(find_largest_subset_both2(a))\n    \n    # Find the largest subset with both divisibles\n    def find_largest_subset_both2(a):\n        '''\n        Return the largest subset with both divisibles.\n        '''\n        n = len(a)\n        for i in range(0, n-1):\n            for j in range(i+1, n):\n                a1 = a[i]\n                a2 = a[j]\n                if a1 % a2 == 0:\n                    new_subset = [a2]\n                    for k in range(j, n):\n                        if a[k] % a2 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a1)\n                    for k in range(i, n):\n                        if a[k] % a1 == 0:\n                            new_subset.append(a[k])\n                    new_subset.append(a[n-1])\n                    a[i] = a1\n                    a[j] = a"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    res=[]\n    \n    def is_divisible(num):\n        if num%2==0:\n            return False\n        if num//2==0:\n            return True\n        return False\n        \n    def subset(a,n,index):\n        if n==0:\n            return\n        if n==1:\n            if a[index]%2!=0:\n                return\n            res.append(a[index])\n            return\n        for i in range(index,len(a)):\n            if is_divisible(a[i]):\n                subset(a,n-1,i)\n        return\n    \n    subset(a,len(a),0)\n    return max(res)\n    \ndef smallest_multiple(n):\n    '''\n    Return the smallest multiple of the input number.\n    '''\n    \n    def is_multiple(num):\n        if num//2==0:\n            return False\n        if num%2==0:\n            return True\n        return False\n    \n    res=[]\n    def is_multiple(num):\n        if is_multiple(num//2):\n            res.append(num//2)\n            return True\n        if num%2==0:\n            return False\n        return False\n    \n    for i in range(1,n):\n        if is_multiple(i):\n            res.append(i)\n    return min(res)\n    \ndef largest_multiple(n):\n    '''\n    Return the largest multiple of the input number.\n    '''\n    \n    def is_multiple(num):\n        if num//2==0:\n            return False\n        if num%2==0:\n            return True\n        return False\n    \n    res=[]\n    def is_multiple(num):\n        if is_multiple(num//2):\n            res.append(num//2)\n            return True\n        if num%2==0:\n            return False\n        return False\n    \n    for i in range(1,n):\n        if is_multiple(i):\n            res.append(i)\n    return max(res)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # you can use the median() function from the math module\n    # for this question\n    mid = n // 2\n    # if the length of both lists is odd, we will take middle value\n    if n % 2 == 0:\n        med = (arr1[mid] + arr2[mid]) / 2\n    # if the length of both lists is even, we will take the middle value\n    else:\n        med = (arr1[mid] + arr2[mid]) / 2\n    return med\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr1[0]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if len(arr1) > len(arr2):\n        median = (arr1 + arr2) // 2\n    else:\n        median = (arr2 + arr1) // 2\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == len(arr2):\n        index_a = 0\n        index_b = 0\n        if n == 1:\n            index_a = len(arr1) - 1\n            index_b = 0\n        else:\n            index_a = len(arr1) - 1\n            index_b = len(arr2) - 1\n        \n        if index_a < index_b:\n            median = (index_a + index_b + 1) // 2\n            median_1 = arr1[median]\n            median_2 = arr2[median]\n        else:\n            median = (index_b + index_a + 1) // 2\n            median_1 = arr1[median]\n            median_2 = arr2[median]\n        return median_1 + median_2 + 1 // 2\n    else:\n        return arr1[0] + arr2[0] + 1 // 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == 0:\n        return None\n    if l2 == 0:\n        return None\n    if l1 == l2:\n        return (arr1[0] + arr2[0])/2\n    p = (l1 + l2)//2\n    # To use binary search, we need to find the middle point\n    if arr1[p] < arr2[p]:\n        return get_median(arr1, arr2, p + 1)\n    else:\n        return get_median(arr2, arr1, p - 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    mid = len(arr1) // 2\n    \n    if len(arr1) % 2 == 0:\n        if arr1[mid] < arr2[mid]:\n            return (arr1[mid] + arr2[mid]) / 2\n        return arr1[mid]\n    else:\n        return arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Write your code here\n    if n % 2!= 0:\n        return (arr1[n//2] + arr2[n//2])/2\n    return (arr1[n//2] + arr2[n//2])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    size = len(arr1)\n    if n%2 == 0:\n        return ((arr1[int(n/2)]+arr2[int(n/2)])/2)\n    elif n%2!= 0:\n        return arr1[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = arr1[0] + arr2[0]\n    left = 0\n    right = len(arr1) - 1\n    while(left <= right):\n        median += arr1[left] + arr2[right]\n        if(median == n):\n            median = (median + arr1[left]) / 2\n        elif(median > n):\n            median = median / 2\n            left += 1\n        elif(median < n):\n            median = median / 2\n            right -= 1\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n = len(arr1)\n    if n == 0:\n        return None\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #initialise to zero\n    sum = 0\n    #loop through the list\n    for i in range(len(nums)):\n        sum += (nums[i]**n)\n    #return the power\n    return sum\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    numbers = []\n    for num in nums:\n        numbers.append(num ** n)\n    return numbers\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # for n in range(len(nums)):\n    #     print(nums[n])\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    result = []\n    \n    for num in nums:\n        result.append(num**n)\n        \n    return resul"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #Implement Your Code Here\n    if len(nums) == 0:\n        return []\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if len(nums) <= 0:\n    #     return []\n    # elif len(nums) == 1:\n    #     return [nums[0]]\n    # elif len(nums) == 2:\n    #     return [nums[1]**2]\n    # elif len(nums) == 3:\n    #     return [nums[1]**3]\n    # elif len(nums) == 4:\n    #     return [nums[1]**4]\n    # elif len(nums) == 5:\n    #     return [nums[1]**5]\n    # elif len(nums) == 6:\n    #     return [nums[1]**6]\n    # elif len(nums) == 7:\n    #     return [nums[1]**7]\n    # else:\n    #     return [nums[1]**8]\n    nums2 = []\n    for num in nums:\n        nums2.append(num**n)\n    return nums2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    n_power = [x**n for x in nums]\n    return(n_power)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # For 0 to len(nums)\n    if n < 0:\n        return None\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    num_power = 1\n    for i in range(len(nums)):\n        num_power = num_power * nums[i]\n    return num_power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # get the length of the input string\n    length = len(string)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.upper() == string:\n        return True\n    return False"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper("
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for ch in string:\n        if ch.isupper():\n            result += ch.upper()\n        else:\n            result += ch\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n    \nprint(is_upper('SIVIN'))\nprint(is_upper('joe'))\nprint(is_upper('siva'))\nprint(is_upper('_'))\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == string.upper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = newList[::-1]\n    print('new_list : ', new_list)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 1:\n        return newList\n    \n    middle_point = len(newList) // 2\n    left_part = newList[:middle_point]\n    right_part = newList[middle_point:]\n    left_part = list(left_part)\n    right_part = list(right_part)\n    temp = left_part\n    left_part = right_part\n    right_part = temp\n    \n    newList[:middle_point] = left_part\n    newList[middle_point:] = right_part\n    return newList\n    \n    "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #create a new empty list and add elements into it\n    new_list = []\n    #pass in a new list to the variable\n    new_list.append(newList[0])\n    new_list.append(newList[-1])\n    #return the list with the swapped elements\n    return new_list\n    \n    #another test function\n    "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)): \n        newList[i], newList[0] = newList[0], newList[i] \n    \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList) \n    newList[0], newList[n-1] = newList[n-1], newList[0] \n    \n    \ndef merge(List1, List2, len1, len2):\n    '''\n    Write a python function to merge two sorted linked lists and return it as a sorted list.\n    Input: Two sorted linked lists of length n and m respectively.\n    n: the length of the first linked list.\n    m: the length of the second linked list.\n    Output: A sorted linked list of length m.\n    '''\n    resultList = LinkedList()\n    \n    for i in range(0, len1):\n        if (List1[i] < List2[i]):\n            resultList.add_to_tail(List1[i])\n        else:\n            resultList.add_to_tail(List2[i])\n    \n    \n    for i in range(0, len2):\n        resultList.add_to_tail(List2[i])\n    \n    \n    for i in range(0, len1):\n        resultList.add_to_tail(List1[i])\n    \n    for i in range(len1, len2):\n        resultList.add_to_tail(List2[i])\n        \n    return resultList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList) \n    for i in range(n-1): \n        temp = newList[i] \n        newList[i] = newList[i+1] \n        newList[i+1] = temp \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if(len(newList) <= 1): \n        return newList\n    \n    first_index = 0\n    last_index = len(newList)-1\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    tempList = newList[0:1] + newList[-1:]\n    print(\"After first and last element swapped\", tempList)\n    return tempList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0, newList.pop()) \n    newList.insert(len(newList), newList.pop()) \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(2,r) :\n        area += (r/2) * (1+((r/2)**2))\n    area = area/2\n    return area\ndef b_area(r) :  \n    '''\n    Write a python function to calculate the area of a b-shape with a given radius.\n    '''\n    area = 0\n    for i in range(2,r) :\n        area += ((r*(r-1))/2) * (1+((r-1)*(r-1)))\n    area = area/2\n    return area\ndef main() :  \n    '''\n    Write a python function to calculate the area of a triangle with the given width and height.\n    '''\n    print(\"Enter the diameter of the triangle's base: \")\n    base = float(input())\n    print(\"Enter the height of the triangle: \")\n    height = float(input())\n    area = triangle_area(base)\n    area = area + triangle_area(height)\n    area = area + triangle_area(2*base)\n    print(\"The area of the triangle is: %.1f\" % area)\nmain("
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1,r):\n        if r - (i*i) > r:\n            area = area + (r - (i*i))\n        else :\n            area = area + (r - (i*i))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = 2 * pi * r ** 2\n    if (r == 0):\n        return A\n    else:\n        L = 2 * pi * r\n        if (L / 2 < r):\n            return L * ((r**2) / 2) + A\n        elif (L / 2 > r):\n            return L * ((r**2) / 2) + A\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r < 0):\n        print('Incomplete input')\n    elif (r == 0) :\n        print('Square')\n    elif (r == 1) :\n        print('Cube')\n    else :\n        print('Square of side',r,' is', r * r * 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #the range of the area\n    r_max = int(r)\n    #the number of semi-circular points\n    n = len(r)\n    #loop through the points\n    for i in range(n):\n        for j in range(i+1,n):\n            #calculate the area\n            a = (r[i] + r[j])*(r[i] - r[j])\n            #add to the maximum\n            if a > r_max:\n                r_max = a\n    return r_max\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def triangle_area(r) :\n        if r > 1 : \n            return ((1/2)*r*(r + 1))\n        elif r == 1 : \n            return 0\n        else : \n            return 1/3\n    return triangle_area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Step 1\n    # Check if a given radius is a number\n    if type(r)!= type(int()):\n        raise TypeError(\"r must be a number\")\n    # Check if the radius is valid\n    if r < 0 :\n        raise ValueError(\"r must be a positive number\")\n    # Check if the radius is valid\n    if r >= 0 :\n        # Define a variable to store the result\n        result = 0.0\n        # Define an iterator\n        iterator = 0\n        # Create a while loop to iterate\n        while iterator < r:\n            # Check the value of the iterator\n            if iterator == r/2 :\n                result += 1\n            # Update the iterator\n            iterator += 1\n        # Check if the result is a positive integer\n        if result >= 0 :\n            return result\n        # If the result is negative, return an error\n        else:\n            raise ValueError(\"The area of a triangle is less than the given radius\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 3.14\n    s = 3\n    if r <= 0:\n        return 0\n    else:\n        while r > s:\n            s = s*s\n            r = r*r\n        return r*a*a\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.141592 * (r ** 2)) / 2\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end == 0:\n        return -1\n    mid = int((start+end)/2)\n    print('mid',mid)\n    if array[mid] == mid:\n        return mid\n    else:\n        if array[mid-1] == mid:\n            return mid-1\n        else:\n            if array[mid+1] == mid:\n                return mid+1\n            else:\n                return find_First_Missing(array,start=mid,end=mid+1)\n    \n    return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    \n    if start == end:\n        return start\n    \n    if array[start] < array[end]:\n        # if start and end index of array are not in descending order\n        # then it means there is a gap\n        return find_First_Missing(array,start+1,end)\n    else:\n        # if start and end index of array are not in ascending order\n        # then it means there is a gap\n        return find_First_Missing(array,start,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    #check if start and end are equal\n    if start == end:\n        return end\n    \n    #calculate the middle value\n    mid = (start+end)//2\n    #find the first missing number\n    First_Missing = find_First_Missing(array,start,mid)\n    #find the last missing number\n    Last_Missing = find_Last_Missing(array,mid,end)\n    #return the minimum number\n    return First_Missing if First_Missing<=Last_Missing else Last_Missing\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start >= end:\n        return None\n    mid = (start + end) // 2\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array) - 1\n    \n    if start >= end:\n        return None\n    \n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid:\n        \n        return mid\n    \n    \n    if array[mid] > mid:\n        \n        return find_First_Missing(array,start,mid-1)\n    \n    else:\n        \n        return find_First_Missing(array,mid+1,end)\n        \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start<=end:\n        index=find_Second_Missing(array,start,end)\n        if index==None:\n            return array[index]\n        return array[index]\n    return array[start]\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    output = string.replace(' ','%20')\n    return output\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_str = ''\n    for char in string:\n        if char!='':\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = ''\n    for char in string:\n        if char =='':\n            result += '%20'\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for i in string:\n        if i =='':\n            new_string += '%20'\n        else:\n            new_string += i\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char == \" \":\n            new_string += char + \"%20\"\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string_without_spaces = string.replace(' ', '%20')\n    return string_without_spaces\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string_list = list(string)\n    for index in range(len(string_list)):\n        if string_list[index] =='':\n            string_list[index] = '%20'\n    return ''.join(string_list)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if len(list)%2==0:\n        evens=[]\n        for i in list:\n            if i%2==0:\n                evens.append(i)\n        return evens\n    else:\n        return [list[0]]\n        \n    \ndef CheckPermutation(list, permutation):\n    '''\n    Write a python function to check whether a given permutation is possible. \n    '''\n    if len(permutation)!=len(list):\n        return False\n    else:\n        for i in range(len(permutation)):\n            if permutation[i] not in list:\n                return False\n        return True\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even = []\n    odd = []\n    \n    for i in range(len(list)):\n        if i % 2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n            \n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(f\"Even numbers: {even_list}\")\n    print(f\"Odd numbers: {odd_list}\")\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = list[:]\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            evens[i] = list[i]\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            list_even.append(list[i])\n    return list_even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = list[:] \n    odd = list[:] \n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    \n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = ele[1] + sub\n    if sub[0] > len(matrix) - 1 or sub[0] < 0:\n        return None\n    if matrix[sub[0]][sub[1]] == 0:\n        adjac(sub, adjac(sub, sub[0]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub \n    sub.append(ele)\n    return adjac(ele[1], sub) + adjac(ele[0], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # This will be the returned list\n    result = []\n    # If given coordinate is already an index, just return it\n    if (type(ele) == int):\n        return [ele]\n    # If given coordinate is a tuple, return its list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, return its list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == list:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == list:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a list, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], sub + [ele[1]])\n    # If given coordinate is a tuple, add the tuple to the list\n    elif type(ele) == tuple:\n        return adjac(ele[0], su"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return sub.copy()\n    elif ele[1] - 1 >= 0: sub.append((ele[0], ele[1] - 1))\n    elif ele[0] + 1 < len(grid): sub.append((ele[0] + 1, ele[1]))\n    else: sub.append(tuple((ele[0] + 1, ele[1])))\n    if ele[1] + 1 < len(grid): sub.append(tuple((ele[0], ele[1] + 1)))\n    else: sub.append(tuple((ele[0], ele[1] + 1)))\n    if ele[0] - 1 >= 0: sub.append(tuple((ele[0] - 1, ele[1])))\n    elif ele[0] + 1 < len(grid): sub.append(tuple((ele[0] + 1, ele[1])))\n    else: sub.append(tuple((ele[0] + 1, ele[1])))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    try: \n        return ele[0], ele[1]\n    except:\n        for i in range(len(sub)):\n            if sub[i] == ele:\n                return sub[i][0], sub[i][1]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (ele[0], ele[1] + sub) if ele[1] < N and ele[0] < M else (ele[1], ele[0] + sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    n = len(ele)\n    return [ ele[i] for i in range(n - 1) if (i + 1 < n) and ele[i]!= ele[i + 1] ]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return False\n    elif ele == (0,0): return True\n    else:\n        sub.append(ele)\n        return adjac(ele[0],sub) or adjac(ele[1],sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [ ele[0] + ele[1], ele[0] - ele[1], ele[1] + ele[0] ]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if 0 <= x < n and 0 <= y < m: \n        if sub!= []: sub.append((x, y))\n        else: sub = [ (x, y) ]\n        adjac( ele, sub )\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\").replace(\"-\",\"_\").replace(\".\",\"_\").replace(\"/\",\"_\").replace(\"$\",\"_\").replace(\"?\",\"_\").replace(\"!\",\"_\").replace(\";\",\"_\").replace(\":\",\"_\").replace(\"\\\"\",\"_\").replace(\"&\",\"_\").replace(\"@\",\"_\").replace(\"&\",\"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Your code here\n    \n    return text.replace(' ', '_')\n    # Replace spaces with underscores in a string\n    # Return the new string\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for letter in text:\n        if letter!='':\n            new_text += letter.replace(' ','_')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_str = \"\"\n    for char in text:\n        if char == \" \" or char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n            new_str = new_str + \" \"\n        else:\n            new_str = new_str + char\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('\\n', '_').replace('\\r', '_').replace(' ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n', '_').replace('\\t', '_').replace('.','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('\\t','_')\n    text = text.replace('\\n','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('\\t', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\r', '_')\n    text = text.replace('\\v', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace'' with an underscore\n    text = text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('.', '_'"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[-1]\n            num_list.pop()\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Use the above function to determine which of the numbers is 0.\n    for num in num_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for element in num_list:\n        if element!= 0:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i+1] = num_list[i]\n            num_list[i] = 0\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index_of_zero = []\n    for n in range(0,len(num_list)):\n        if num_list[n] == 0:\n            index_of_zero.append(n)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, value in enumerate(num_list):\n        if value == 0:\n            num_list.insert(index+1, 0)\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index=0\n    while index<len(num_list):\n        if num_list[index]==0:\n            num_list.pop(index)\n        else:\n            index+=1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) > 0:\n        for i in range(len(num_list)):\n            if num_list[i]!= 0:\n                num_list.insert(i, 0)\n                break\n        return num_list\n    else:\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.pop(num_list.index(num))\n            num_list.append(0)\n            return num_list\n        elif num!= 0:\n            num_list.append(num)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            num_list[index+1:len(num_list)] = num_list[index+1:len(num_list)] + num_list[index+1:]\n    return num_list\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    l = len(arr)\n    s = 0\n    for i in range(0,l-1) :\n        s = s + arr[i] ^ arr[i+1]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # sort the array\n    arr.sort()\n    n = len(arr)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(i,n):\n            ans += arr[i]^arr[j]\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    l=len(arr)\n    i=0\n    while i<l-1:\n        if arr[i]!=arr[i+1]:\n            return arr[i]+arr[i+1]\n        i+=1\n    return arr[i]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans=0\n    for i in range(len(arr)) :\n        ans+=arr[i]&arr[i]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0,n-1) : \n        total += arr[i]\n    total+=arr[n-1]\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    if n == 1 : \n        return arr[0]\n    \n    # if it is not of length 2, \n    # add the element to the end of the list \n    for i in range(n-1) : \n        arr.append(arr[i]^arr[i+1]) \n    \n    # take care of case where arr[i] is 0 \n    if arr[i] == 0 : \n        return pair_xor_Sum(arr,n-1) \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    # if arr[i] is not 1, \n    # take the first element of arr \n    elif arr[i]!= 1 : \n        return pair_xor_Sum(arr,n-1) \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_2(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_3(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_4(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_5(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_6(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_7(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_8(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_9(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < n : \n        print(\"Please provide greater than the given list\") \n        return\n    \n    sum = 0\n    for i in range(n) : \n        sum += arr[i]\n    \n    # if arr[i] is 0, \n    # take the first element of arr \n    if arr[i] == 0 : \n        return arr[0] \n    \n    # if arr[i] is 1, \n    # take the first element of arr \n    elif arr[i] == 1 : \n        return arr[0] \n    \n    else : \n        return pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_10(arr,n):\n    '"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    cnt = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            #print(arr[i],arr[j])\n            cnt += arr[j] ^ arr[i] \n    return cnt\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(n) : \n        x = x^arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    (1)Check if arr is empty or not\n    (2)Check if n is less than 0\n    (3)Compare the sum of all numbers\n    (4)Print sum\n    '''\n    sum = 0\n    if len(arr) <= 0 or n <= 0 :\n        print(\"Invalid input\")\n        return -1\n    for i in range(len(arr)) :\n        sum += arr[i]\n    print(sum)\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    maxheap = []\n    minheap = []\n    for i in iterable:\n        if len(maxheap) < heapq.nlargest(1, iterable) * 2 + 1:\n            heapq.heappush(maxheap, i)\n        else:\n            heapq.heappushpop(minheap, i)\n    return minheap + [None] + maxheap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # heapify\n    heap = []\n    for el in iterable:\n        if not el in heap:\n            heapq.heappush(heap, el)\n        else:\n            heapq.heappushpop(heap, el)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=heapq.nlargest)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Return the given list after sorting\n    hq.heapify(iterable)\n    # The original iterable is not modified\n    return hq.heapify(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # heapsort is O(nlogn) where n is the number of elements\n    # O(nlogn)\n    # complexity is nlog(n)\n    # time complexity is O(nlogn)\n    # space complexity is O(n)\n    heap = []\n    for element in iterable:\n        heapq.heappush(heap, element)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # write your code here\n    heap = []\n    for value in iterable:\n        if value not in heap:\n            heapq.heappush(heap, value)\n        else:\n            val = heapq.heappop(heap)\n            heapq.heappush(heap, val)\n    return [value for value in heap]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # Assign the first element to be at the top of the heap\n    heap = []\n    \n    # Check the number of elements\n    if(len(iterable) < 2):\n        return iterable\n    \n    # Create a new element with its value\n    current_element = heapq.heappop(heap)\n    \n    # Check if the element can be added\n    # to the heap\n    if(current_element[1] < iterable[0]):\n        heapq.heappush(heap, (current_element[0], current_element[1]))\n        \n        # Move the element to the end of the list\n        # if needed\n        heapq.heappush(heap, (iterable[-1], iterable[0]))\n    else:\n        # If the element is not the smallest\n        # so it is removed from the heap\n        heapq.heappush(heap, (iterable[0], iterable[-1]))\n        \n        # Move the element to the end of the list\n        # if needed\n        heapq.heappush(heap, (iterable[-1], iterable[0]))\n    \n    # Return the sorted list\n    return [heapq.heappop(heap)[1] for i in range(len(heap))]\n    \nif __name__ == \"__main__\":\n    a = [3,2,6,1,4,9,8,7,5]\n    heap_sort(a)\n    print(a)"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=heapq.nlargest, reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)//2 - 1, -1, -1):\n        hq.heapify(iterable)\n        for j in range(i):\n            hq.heapreplace(iterable, hq.heappop(iterable) + iterable[j])\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return hq.heapify(h)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost=0\n    if(sale_amount>0):\n        total_cost=sale_amount*actual_cost\n    else:\n        total_cost=0\n    if(total_cost==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = 0\n    loss = 0\n    if actual_cost < sale_amount:\n        profit = sale_amount - actual_cost\n        loss = 0\n    return profit,loss\n    \n    \ndef main():\n    # Ask the user for the sale amount\n    sale_amount = float(input(\"Please enter your sale amount: \"))\n    # Check the amount is positive\n    profit, loss = noprofit_noloss(sale_amount)\n    if profit > 0:\n        # Calculate the profit amount \n        profit_amount = profit * sale_amount\n        # Calculate the profit amount minus the loss amount\n        loss_amount = sale_amount - profit_amount\n        print(f\"\\nProfit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n        # Print the profit amount and the loss amount\n        print(f\"Profit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n    else:\n        print(\"Insufficient sale amount\")\n    # Ask the user for the product and check whether they have enough product\n    product = input(\"Please enter the product you want to sell: \")\n    sale_amount = float(input(\"Please enter the sale amount: \"))\n    # Calculate the sale amount minus the product\n    sale_amount -= sale_amount * product\n    # Check the sale amount is positive\n    profit, loss = noprofit_noloss(sale_amount)\n    if profit > 0:\n        # Print the sale amount\n        print(f\"\\nSale amount: ${sale_amount}\")\n        print(f\"Product: {product}\")\n        print(f\"Profit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n    else:\n        print(\"Sale amount can't be negative\")\n    # Ask the user for the cost \n    cost = float(input(\"Please enter the cost of the product: \"))\n    # Check the cost is positive\n    profit, loss = noprofit_noloss(cost)\n    if profit > 0:\n        # Calculate the profit amount \n        profit_amount = profit * cost\n        # Calculate the profit amount minus the loss amount\n        loss_amount = sale_amount - profit_amount\n        print(f\"\\nProfit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n        # Print the profit amount and the loss amount\n        print(f\"Profit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n    else:\n        print(\"Sale amount can't be negative\")\n    # Ask the user for the profit amount\n    profit = float(input(\"Please enter the profit amount: \"))\n    # Check the profit amount is positive\n    profit, loss = noprofit_noloss(profit)\n    if profit > 0:\n        # Calculate the profit amount \n        profit_amount = profit * sale_amount\n        # Calculate the profit amount minus the loss amount\n        loss_amount = sale_amount - profit_amount\n        print(f\"\\nProfit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n        # Print the profit amount and the loss amount\n        print(f\"Profit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n    else:\n        print(\"Sale amount can't be negative\")\n    # Ask the user for the loss amount\n    loss = float(input(\"Please enter the loss amount: \"))\n    # Check the loss amount is positive\n    profit, loss = noprofit_noloss(loss)\n    if profit > 0:\n        # Calculate the profit amount \n        profit_amount = profit * sale_amount\n        # Calculate the profit amount minus the loss amount\n        loss_amount = sale_amount - profit_amount\n        print(f\"\\nProfit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n        # Print the profit amount and the loss amount\n        print(f\"Profit amount: ${profit_amount}\")\n        print(f\"Loss amount: ${loss_amount}\")\n    else:\n        print(\"Sale amount can't be negative\")\n    \n    \nmain()"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Write your code here\n    return actual_cost<sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return 0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #check if there is profit or not\n    if actual_cost>0 and sale_amount>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Define the variables\n    c = 2.5\n    k = 0.16\n    T = 3 #Celsius\n    r = 101325 #Kelvin\n    temp = (v*k)/r #convert to celsius\n    #calculate the wind chill\n    wind_chill = (c + (k*(T - temp)))\n    #Convert the wind chill index to an integer\n    wind_chill = int(wind_chill)\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = v * 9.0 / 5 + 32\n    t1 = 273.15 + (t * 9.0 / 5)\n    return (100.0 - (0.621371 * t1 + 0.447311 * c))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wch = (0.621371 + 0.357579*t + 0.04275*v)/(1.0 + 0.16756*t - 0.00028031*v)\n    return wch\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #return round(v*1.6093/math.log(v),2)\n    return round(v*100/math.sqrt(v),2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 0.6215\n    b = (a*math.log(v/3.6)+38.75)\n    c = a*(math.log(t/400)+20)\n    d = (c*(t*2.23))/b\n    if d > 100:\n        return 100\n    else:\n        return round(d,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((9*(v**0.16))/(v+0.0001),2)\n    \ndef convert_to_celsius(fahrenheit):\n    '''\n    Write a function that converts a given fahrenheit value into the celsius value.\n    '''\n    return (fahrenheit-32)*5/9\n    \ndef wind_speed(v,t):\n    '''\n    Write a function that returns the wind speed given the wind velocity and a temperature in celsius.\n    '''\n    return round((v-32)*(5/9),2)\n    \ndef wind_bearing(v,t):\n    '''\n    Write a function that returns the wind bearing given the wind velocity and a temperature in degrees.\n    '''\n    return round((360-((v-32)*(5/9))),2)\n    \ndef wind_dir(v,t):\n    '''\n    Write a function that returns the wind direction given the wind velocity and a temperature in degrees.\n    '''\n    return round((math.atan(v/t) - math.pi/2),2)\n    \ndef wind_dir_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return (math.atan(v/t) - math.pi/2) * 180/math.pi\n    \ndef wind_spd(v,t):\n    '''\n    Write a function that returns the wind speed given the wind velocity and a temperature in meters/second.\n    '''\n    return round((v/t)*(5/9),2)\n    \ndef wind_spd_rad(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return (v/t)*(5/9) * 180/math.pi\n    \ndef wind_spd_m(v,t):\n    '''\n    Write a function that returns the wind speed given the wind velocity and a temperature in meters/second.\n    '''\n    return round(v/t * 5/9,2)\n    \ndef wind_spd_km(v,t):\n    '''\n    Write a function that returns the wind speed given the wind velocity and a temperature in kilometers/hour.\n    '''\n    return round((v/t) * 3.6,2)\n    \ndef wind_spd_km_2(v,t):\n    '''\n    Write a function that returns the wind speed given the wind velocity and a temperature in kilometers/hour.\n    '''\n    return round(v/t * 3.6,2)\n    \ndef wind_dir_km(v,t):\n    '''\n    Write a function that returns the wind direction given the wind velocity and a temperature in kilometers/hour.\n    '''\n    return round((math.atan(v/t)*3.6) - (math.pi/2),2)\n    \ndef wind_dir_km_2(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return (math.atan(v/t) - math.pi/2) * 180/math.pi\n    \ndef wind_dir_deg(v,t):\n    '''\n    Write a function that returns the wind direction as a degrees value.\n    '''\n    return (180 - ((v - 32)*(5/9))/(v+0.0001)) * 180/math.pi\n    \ndef wind_dir_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return (math.atan(v/t) - math.pi/2) * 180/math.pi\n    \ndef wind_dir_deg_2(v,t):\n    '''\n    Write a function that returns the wind direction as a degrees value.\n    '''\n    return (180 - ((v - 32)*(5/9))/(v+0.0001)) * 180/math.pi\n    \ndef wind_dir_rad_2(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return (math.atan(v/t) - math.pi/2) * 180/math.pi\n    \ndef wind_spd_km_2_deg(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round((v/t) * 3.6,2)\n    \ndef wind_spd_km_2_rad(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round((v/t) * 3.6,2)\n    \ndef wind_spd_deg_2_deg(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round((v/t) * 3.6,2)\n    \ndef wind_spd_deg_2_rad(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round((v/t) * 3.6,2)\n    \ndef wind_spd_m_deg(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round(v/t * 5/9,2)\n    \ndef wind_spd_m_rad(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round(v/t * 5/9,2)\n    \ndef wind_spd_km_deg(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round((v/t) * 5/9,2)\n    \ndef wind_spd_km_rad(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return round((v/t) * 5/9,2)\n    \ndef wind_spd_deg_deg(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return (v/t) * 5/9\n    \ndef wind_spd_deg_rad(v,t):\n    '''\n    Write a function that returns the wind speed as a radians value.\n    '''\n    return (v/t) * 5/9\n    \ndef wind_dir_deg_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return round(math.atan(v/t),2)\n    \ndef wind_dir_deg_2_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return (math.atan(v/t) - math.pi/2) * 180/math.pi\n    \ndef wind_dir_rad_2_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return round(math.atan(v/t) - math.pi/2) * 180/math.pi\n    \ndef wind_dir_deg_deg_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return round((v/t) * 180/math.pi,2)\n    \ndef wind_dir_deg_2_deg_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return round((v/t) * 180/math.pi,2)\n    \ndef wind_dir_deg_rad_2_deg_rad(v,t):\n    '''\n    Write a function that returns the wind direction as a radians value.\n    '''\n    return round((v/t) * 180/math.pi,2)\n    \ndef wind_speed_deg_rad(v,t):\n    '''\n    Write a function that returns the wind speed as a ra"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_chill = (v/3.6)*(1.8+0.6215*t+0.6215*t**2)\n    return round(w_chill,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert the wind velocity from km/h to celsius\n    wind_speed = math.log(v/9.0)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # store input temperature in Celsius\n    tCelsius = (t - 32) / 1.8\n    # calculate wind chill index\n    chill = (v**5.257) / (tCelsius**4.0 + (v**2.0) / (tCelsius**2.0 + (v**0.0065) / (tCelsius**0.16 + (v**0.0063) / (tCelsius**0.32 + (v**0.0065) / (tCelsius**0.43 + (v**0.0065) / (tCelsius**0.60 + (v**0.0065) / (tCelsius**0.71 + (v**0.0065) / (tCelsius**0.81 + (v**0.0065) / (tCelsius**0.92 + (v**0.0065) / (tCelsius**0.97 + (v**0.0065) / (tCelsius**0.99 + (v**0.0065) / (tCelsius**0.011 + (v**0.0065) / (tCelsius**0.021 + (v**0.0065) / (tCelsius**0.038 + (v**0.0065) / (tCelsius**0.065 + (v**0.0065) / (tCelsius**0.085 + (v**0.0065) / (tCelsius**0.119 + (v**0.0065) / (tCelsius**0.155 + (v**0.0065) / (tCelsius**0.187 + (v**0.0065) / (tCelsius**0.206 + (v**0.0065) / (tCelsius**0.242 + (v**0.0065) / (tCelsius**0.272 + (v**0.0065) / (tCelsius**0.282 + (v**0.0065) / (tCelsius**0.301 + (v**0.0065) / (tCelsius**0.335 + (v**0.0065) / (tCelsius**0.348 + (v**0.0065) / (tCelsius**0.376 + (v**0.0065) / (tCelsius**0.379 + (v**0.0065) / (tCelsius**0.413 + (v**0.0065) / (tCelsius**0.453 + (v**0.0065) / (tCelsius**0.479 + (v**0.0065) / (tCelsius**0.498 + (v**0.0065) / (tCelsius**0.512 + (v**0.0065) / (tCelsius**0.533 + (v**0.0065) / (tCelsius**0.561 + (v**0.0065) / (tCelsius**0.669 + (v**0.0065) / (tCelsius**0.722 + (v**0.0065) / (tCelsius**0.754 + (v**0.0065) / (tCelsius**0.802 + (v**0.0065) / (tCelsius**0.825 + (v**0.0065) / (tCelsius**0.848 + (v**0.0065) / (tCelsius**0.908 + (v**0.0065) / (tCelsius**0.927 + (v**0.0065) / (tCelsius**0.944 + (v**0.0065) / (tCelsius**0.959 + (v**0.0065) / (tCelsius**0.987 + (v**0.0065) / (tCelsius**0.1000 + (v**0.0065) / (tCelsius**0.1121 + (v**0.0065) / (tCelsius**0.1166 + (v**0.0065) / (tCelsius**0.1188 + (v**0.0065) / (tCelsius**0.1194 + (v**0.0065) / (tCelsius**0.1206 + (v**0.0065) / (tCelsius**0.1229 + (v**0.0065) / (tCelsius**0.1255 + (v**0.0065) / (tCelsius**0.1280 + (v**0.0065) / (tCelsius**0.1292 + (v**0.0065) / (tCelsius**0.1312 + (v**0.0065) / (tCelsius**0.1326 + (v**0.0065) / (tCelsius**0.1342 + (v**0.0065) / (tCelsius**0.1371 + (v**0.0065) / (tCelsius**0.1406 + (v**0.0065) / (tCelsius**0.1425 + (v**0.0065) / (tCelsius**0.1444 + (v**0.0065) / (tCelsius**0.1459 + (v**0.0065) / (tCelsius**0.1492 + (v**0.0065) / (tCelsius**0.1514 + (v**0.0065) / (tCelsius**0.1533 + (v**0.0065) / (tCelsius**0.1548 + (v**0.0065) / (tCelsius**0.1573 + (v**0.0065) / (tCelsius**0.1607 + (v**0.0065) / (tCelsius**0.1625 + (v**0.0065) / (tCelsius**0.1636 + (v**0.0065) / (tCelsius**0.1641 + (v**0.0065) / (tCelsius**0.1663 + (v**0.0065) / (tCelsius**0.1681 + (v**0.0065) / (tCelsius**0.1713 + (v**0.0065) / (tCelsius**0.1732 + (v**0.0065) / (tCelsius**0.1748 + (v**0.0065) / (tCelsius**0.1764 + (v**0.0065) / (tCelsius**0.1782 + (v**0.0065) / (tCelsius**0.1802 + (v**0.0065) / (tCelsius**0.1826 + (v**0.0065) / (tCelsius**0.1844 + (v**0.0065) / (tCelsius**0.1859 + (v**0.0065) / (tCelsius**0.1897 + (v**0.0065) / (tCelsius**0.1900 + (v**0.0065) / (tCelsius**0.1902 + (v**0.0065) / (tCelsius**0.1924 + (v**0.0065) / (tCelsius**0.1939 + (v**0.0065) / (tCelsius**0.1957 + (v**0.0065) / (tCelsius**0.1975 + (v**0.0065) / (tCelsius**0.1978 + (v**0.0065) / (tCelsius**0.1984 + (v**0.0065) / (tCelsius**0.1993 + (v**0.0065) / (tCelsius**0.2000 + (v**0.0065) / (tCelsius**0.2026 + (v**0.0065) / (tCelsius**0.2042 + (v**0.0065) / (tCelsius**0.2051 + (v**0.0065) / (tCelsius**0.2064 + (v**0.0065) / (tCelsius**0.2083 + (v**0.0065) / (tCelsius**0.2100 + (v**0.0065) / (tCelsius**0.2103 + (v**0.0065) / (tCelsius**0.2124 + (v**0.0065) / (tCelsius**0.2149 + (v**0.0065) / (tCelsius**0.2163 + (v**0.0065) / ("
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = (v*1.6)/0.621371\n    t = (t*1.8)-273.15\n    r = 11.7*math.exp(v/(1.8*t))\n    return r\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_copy = sample_names.copy()\n    sample_names_copy = list(set(sample_names_copy))\n    sample_names_copy.sort(key=len)\n    return sample_names_copy\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name.isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_names = []\n    for name in sample_names:\n        if name[0].islower():\n            new_names.append(name)\n    return len(new_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = list(map(lambda name: name.lower(), sample_names))\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for sample in sample_names:\n        if sample[0] == 'a':\n            result += len(sample[1])\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def is_name(name):\n        return name.islower()\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    names = [name.lower() for name in sample_names if not name.startswith('a')]\n    \n    return sum([len(name) for name in names])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(s.lower()) for s in sample_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(0,len(items)):\n        if items[i]=='(' or items[i]==')':\n            items[i]=' '\n    return ''.join(items)\ndef get_suffix(s):\n    '''\n    Write a function to return the suffix of a word.\n    '''\n    i=0\n    list_s=[]\n    while i<len(s):\n        if s[i]=='(':\n            list_s.append(')'+s[i])\n            i+=1\n        elif s[i]=='*':\n            list_s.append('*'+s[i])\n            i+=1\n        elif s[i]=='+':\n            list_s.append('+'+s[i])\n            i+=1\n        elif s[i]=='-':\n            list_s.append('-'+s[i])\n            i+=1\n        elif s[i]=='.':\n            list_s.append('.'+s[i])\n            i+=1\n        elif s[i]=='/':\n            list_s.append('/'+s[i])\n            i+=1\n        elif s[i]==''and s[i+1]=='/':\n            list_s.append(' ')\n            i+=2\n        elif s[i]==''and s[i+1]=='*':\n            list_s.append(' ')\n            i+=2\n        elif s[i]==''and s[i+1]=='+':\n            list_s.append(' ')\n            i+=2\n        elif s[i]==''and s[i+1]=='-' and s[i+2]=='-':\n            list_s.append(' ')\n            i+=3\n        elif s[i]==''and s[i+1]=='*' and s[i+2]=='*':\n            list_s.append(' ')\n            i+=3\n        elif s[i]==''and s[i+1]=='+' and s[i+2]=='+':\n            list_s.append(' ')\n            i+=3\n        elif s[i]==''and s[i+1]=='-' and s[i+2]=='-':\n            list_s.append(' ')\n            i+=3\n        else:\n            i+=1\n    return ''.join(list_s)\ndef parens(item):\n    '''\n    Use this function to split a string into parentheses.\n    '''\n    i=0\n    count=0\n    result=''\n    while i<len(item):\n        if item[i]=='(':\n            count+=1\n            if count>0:\n                result+=')'+remove_parenthesis(item[i:])\n            else:\n                result+=')'+item[i:]\n            i+=1\n        elif item[i]==')':\n            count-=1\n            if count>0:\n                result+=')'+remove_parenthesis(item[i:])\n            else:\n                result+=')'+item[i:]\n            i+=1\n        elif item[i]=='*':\n            count+=1\n            if count>0:\n                result+=')'+remove_parenthesis(item[i:])\n            else:\n                result+=')'+item[i:]\n            i+=1\n        elif item[i]=='+':\n            count+=1\n            if count>0:\n                result+=')'+remove_parenthesis(item[i:])\n            else:\n                result+=')'+item[i:]\n            i+=1\n        elif item[i]=='-':\n            count+=1\n            if count>0:\n                result+=')'+remove_parenthesis(item[i:])\n            else:\n                result+=')'+item[i:]\n            i+=1\n        elif item[i]=='.':\n            count+=1\n            if count>0:\n                result+=')'+remove_parenthesis(item[i:])\n            else:\n                result+=')'+item[i:]\n            i+=1\n        elif item[i]=='/':\n            count+=1\n            if count>0:\n                result+=')'+remove_parenthesis(item[i:])\n            else:\n                result+=')'+item[i:]\n            i+=1\n        elif item[i]==''and count>0:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==0:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==2:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==3:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==4:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==5:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==6:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==7:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==8:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==9:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==10:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==11:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==12:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==13:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==14:\n            if count==1:\n                result+=')'+item[i:]\n            else:\n                result+=')'+remove_parenthesis(item[i:])\n            i+=1\n        elif item[i]==''and count==15:\n            if count==1:\n                result+=')"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = list(items)\n    for i in range(len(items)):\n        if items[i] == '(':\n            items.pop(i)\n        else:\n            if len(items) >= 2:\n                if items[i-1] == '(':\n                    items[i-1] = ''\n                elif items[i-2] == '(':\n                    items[i-2] = ''\n    return ''.join(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    list_to_remove = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            list_to_remove.append(items[i])\n        else:\n            if len(list_to_remove)!= 0:\n                list_to_remove.pop()\n    return list_to_remove\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 1:\n        return items\n    for item in items:\n        if item[0] == '(' and item[-1] == ')':\n            left = items[:items.index(item)]\n            right = items[items.index(item)+1:]\n            right = right[:-1]\n            items = left + [item + right]\n            break\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == '(':\n            if i > 0 and items[i-1] == '(':\n                items[i] = ''\n                items[i-1] = ''\n            else:\n                items[i] = ''\n        elif items[i] == ')':\n            if i > 0 and items[i-1]!= ')':\n                items[i] = ''\n                items[i-1] = ''\n            else:\n                items[i] = ''\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    str_input = ''.join(re.sub(r'\\([^)]+\\)', '', items[0]))\n    if str_input == '':\n        return str_input\n    else:\n        return str_input[1:-1]\ndef connect_to_parentheses(items):\n    '''\n    Given an iterable string, write a function that turns it into a single string where all parenthesis are doubled.\n    '''\n    p_string = ''\n    items = items.split('(')\n    for item in items:\n        if item == '':\n            continue\n        else:\n            new_item = item[1:-1]\n            p_string += '(' + new_item + ')'\n    return p_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for i in items:\n        if i!= '(':\n            res.append(i)\n        else:\n            res.append(')')\n            \n    return ''.join(res)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''.join(items)\n    s1 = s.replace(')','')\n    s2 = s1.replace('(','')\n    s3 = s2.split(' ')\n    return s3\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\\\\\(.*?\\)', '', ''.join(items)).replace('(', '').replace(')', '').replace('[', '').replace(']', '')\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not items:\n        return ''\n    p, lst, rt = items[0], [], []\n    for i in range(len(items)):\n        if items[i] == ')':\n            if p == '(':\n                rst = ''.join(rt)\n            else:\n                p = '( '\n                rt = []\n            rt.append(i)\n        elif items[i] == '(':\n            rt.append(i)\n        elif items[i] == ')':\n            rt.append(i)\n        else:\n            rt.append(i)\n    rt.append(i + 1)\n    return ''.join(items[1:-1]) + ''.join(rt)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n%2==1:\n        return 3\n    else:\n        return 4"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2!= 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 4 == 3\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        m = n - 1\n        k = n + 1\n        while m < n:\n            if (k == n):\n                return k\n            else:\n                if (m == 0):\n                    return k\n                if (m == 1):\n                    return k\n                k = k + 1\n                m = m + 1\n            m = m + 1\n        return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n % 2)!= 0:\n        print(n, \"is not a nonagonal number\")\n        return\n    else:\n        for j in range(1, n):\n            if (n - j) >= 1:\n                if (n - j) % 2 == 0:\n                    print(n, \"is a nonagonal number\")\n                    return\n        print(n, \"is not a nonagonal number\")\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n+1):\n        if n%i == 0:\n            return False\n    return Tru"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # write your code here\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        left_index = (n-1)//2\n        right_index = n-1-left_index\n        if left_index>0:\n            return is_nonagonal(left_index)\n        elif right_index>0:\n            return is_nonagonal(right_index)\n        else:\n            return 1\nn = 5\nprint(is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        return n\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2!= 1\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_match_wordz_start_wordz_end_wordz_start_wordz_end_wordz_start_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end_wordz_end"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z', text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"[^z]*(z[^z])*\"\n    if not pattern.match(text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text.split()) == 0 or len(text) == 0:\n        return False\n    elif len(text) <= 2:\n        return False\n    else:\n        for char in text:\n            if char!= 'z' and char!= 'Z' and char!= '0' and char!= '1' and char!= '2':\n                return False\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.findall(r'z', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #start = 'z'\n    start = 'z'\n    end = 'z'\n    word_list = []\n    for char in text:\n        if char!= start:\n            if char not in word_list:\n                word_list.append(char)\n            else:\n                word_list.append('z')\n                if char == end:\n                    break\n        else:\n            if char == end:\n                break\n    if len(word_list) > 0:\n        return \"\".join(word_list)\n    else:\n        return \"\"\n    #return text"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = '([\\w ]{2,}z)'\n    result = re.search(pattern,text)\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    n = 0\n    for i in range(len(text)):\n        if text[i] == \"z\":\n            n += 1\n        elif text[i].startswith(\"z\") and text[i+1]!= \"z\":\n            n += 1\n    if text[0] == \"z\":\n        return n\n    return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_len = len(text)\n    if(text[0]!= 'z'):\n        return(False)\n    return(text_len == 1)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    is_z = re.search('[zZ]',text)\n    is_punc = re.search('[.,;:!]',text)\n    is_whitespace = re.search('\\s',text)\n    is_len = re.search('[^a-zA-Z0-9]',text)\n    is_1_to_n_words = re.search('[0-9]',text)\n    is_l_end = re.search('[a-zA-Z0-9]',text)\n    is_lower = re.search('[a-z]',text)\n    is_l_start = re.search('[a-zA-Z]',text)\n    is_a_to_z = re.search('[A-Z]',text)\n    is_y_to_z = re.search('[Y]',text)\n    is_y_to_a = re.search('[A-Z]',text)\n    is_z_to_z = re.search('[Z]',text)\n    is_z_to_punc = re.search('[P]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_p = re.search('[P]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_z_to_c = re.search('[C]',text)\n    is_z_to_z = re.search('[Z]',text)\n    is_z_to_y = re.search('[Y]',text)\n    is_y_to_c = re.search('[C]',text)\n    is_y_to_y = re.search('[Y]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_p = re.search('[P]',text)\n    is_punc_to_p = re.search('[P]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_p = re.search('[P]',text)\n    is_punc_to_p = re.search('[P]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_p = re.search('[P]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_z = re.search('[Z]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_c = re.search('[C]',text)\n    is_punc_to_l = re.search('[Y]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_l = re.search('[a-zA-Z]',text)\n    is_punc_to_r = re.search('[a-zA-Z]',text)\n    is_punc_to_y = re.search('[Y]',text)\n    is_punc_to_z = re.search('"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)): \n        for j in range(len(input) - i - 1): \n            if input[j] > input[j + 1]: \n                input[j], input[j + 1] = input[j + 1], input[j] \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    output = []\n    for i in range(k):\n        output.append(input[n-1-i])\n    for i in range(k, n):\n        output.append(input[i])\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)-k): \n        output.append(input[i]) \n        #print(\"The output is :\",output)\n    input = output\n    #print(\"The input is :\",input)\n    return input\n    #print(\"The input is :\",input)\n    \ndef length(input): \n    '''\n    Write a python function to count the number of elements in the given array.\n    '''\n    count = 0\n    for i in range(len(input)): \n        count = count + 1\n    #print(\"The count is :\", count)\n    return count\n    #print(\"The count is :\", count)\n    \ndef reverse(input): \n    '''\n    Write a python function to reverse an array.\n    '''\n    temp = 0\n    j = len(input)-1\n    while j >= 0: \n        temp = input[j] \n        input[j] = input[-1] \n        input[-1] = temp \n        j -= 1 \n        #print(\"The input is :\", input)\n    #print(\"The input is :\", input)\n    return input\n    #print(\"The input is :\", input)\n    \ndef rotate_left(input, count): \n    '''\n    Write a python function to rotate the given array of size n by n.\n    '''\n    temp = []\n    for i in range(len(input)-count): \n        temp.append(input[i]) \n    #print(\"The temp is :\",temp)\n    for i in range(count): \n        input[count+i] = temp[-i-1] \n        #print(\"The temp is :\",input)\n    return input\n    #print(\"The temp is :\",input)\n    \ndef rotate_right(input, count): \n    '''\n    Write a python function to rotate the given array of size n by n.\n    '''\n    temp = []\n    for i in range(len(input)-count): \n        temp.append(input[i]) \n    #print(\"The temp is :\",temp)\n    for i in range(count, len(input)): \n        input[i] = temp[-i-1] \n        #print(\"The temp is :\",input)\n    return input\n    #print(\"The temp is :\",input)\n    \ndef divide(input): \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    f = 1\n    for i in range(1, len(input)): \n        f = f * input[i] \n    #print(\"The Factorial is :\",f)\n    return f\n    #print(\"The Factorial is :\",f)\n    \ndef reverse_recursive(input, count): \n    '''\n    Write a python function to reverse an array using recursion.\n    '''\n    if len(input) == 0: \n        return []\n    else: \n        output = []\n        temp = []\n        for i in range(len(input)-count): \n            temp.append(input[i])\n        temp = reverse_recursive(temp, count)\n        temp = reverse_recursive(temp, count)\n        output.append(temp)\n        #print(\"The output is :\",output)\n        for i in range(count): \n            output[i] = output[i] + temp[i]\n        #print(\"The output is :\",output)\n        return output\n    #print(\"The output is :\",output)\n    \ndef sum_array(input): \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    output = 0\n    for i in range(len(input)): \n        output = output + input[i]\n    #print(\"The output is :\",output)\n    return output\n    #print(\"The output is :\",output)\n    \ndef summation(input): \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    output = 0\n    if len(input) == 0: \n        return 0\n    else: \n        for i in range(len(input)): \n            output = output + input[i]\n        #print(\"The output is :\",output)\n        return output\n    #print(\"The output is :\",output)\n    \ndef main(): \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #print(\"Example 1:\")\n    #input = [1, 2, 3, 4, 5]\n    #print(\"The result is :\", end=\" \")\n    #print(sum(input))\n    #print(\"The result is :\", end=\" \")\n    #print(sum_array(input))\n    #print(\"The result is :\", end=\" \")\n    #print(summation(input))\n    #print(\"Example 2:\")\n    #input = [1, 1, 1, 1, 1]\n    #print(\"The result is :\", end=\" \")\n    #print(summation(input))\n    #print(\"The result is :\", end=\" \")\n    #print(sum_array(input))\n    #print(\"Example 3:\")\n    #input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    #print(\"The result is :\", end=\" \")\n    #print(summation(input))\n    #print(\"The result is :\", end=\" \")\n    #print(sum_array(input))\n    #print(\"Example 4:\")\n    #input = [1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    #print(\"The result is :\", end=\" \")\n    #print(summation(input))\n    #print(\"The result is :\", end=\" \")\n    #print(sum_array(input))\n    #print(\"Example 5:\")\n    #input = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1][:k]\n    "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return reverse_Array(input, k, len(input)-1)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1][:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    array = []\n    for i in range(len(input)):\n        array.append(input[i])\n    i = len(input)-1\n    for j in range(k-1):\n        array[i] = array[i-j]\n        i -= 1\n    return array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k % n\n    for i in range(n - k):\n        input[i], input[i+k] = input[i+k], input[i]\n    print('Input array is now:'+ str(input))\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev = 0\n    for i in range(k, len(input)):\n        rev = input[i] + rev\n    return rev\n    \ndef find_K_in_Array(arr, k):\n    '''\n    Write a python function to find the kth element in an array upto a given position.\n    '''\n    try:\n        # Make this an array to support iteration on it\n        arr = list(arr)\n        # Start at the first position and reverse the array\n        for i in range(k-1, len(arr)):\n            arr[i] = arr[i-k]\n        # Return the index of the element found\n        return arr.index(max(arr))\n    except ValueError:\n        return -1\n        \ndef reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = 0\n    for i in range(k, len(input)):\n        reverse = input[i] + reverse\n    return reverse\n    \ndef find_K_in_Array(arr, k):\n    '''\n    Write a python function to find the kth element in an array upto a given position.\n    '''\n    try:\n        arr = list(arr)\n        for i in range(k-1, len(arr)):\n            arr[i] = arr[i-k]\n        return arr.index(max(arr))\n    except ValueError:\n        return -1\n        "
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_dict = {'username': 'peter', 'age': 37}\n    if test_dict:\n        if isinstance(test_dict, dict):\n            test_tup = test_tup + (test_dict,)\n        elif isinstance(test_dict, tuple):\n            test_tup = test_tup + test_dict\n        elif isinstance(test_dict, list):\n            for i in test_dict:\n                if isinstance(i, dict):\n                    test_tup = test_tup + (i,)\n                elif isinstance(i, tuple):\n                    test_tup = test_tup + test_dict[i]\n                elif isinstance(i, list):\n                    for j in i:\n                        if isinstance(j, dict):\n                            test_tup = test_tup + (j,)\n                        elif isinstance(j, tuple):\n                            test_tup = test_tup + test_dict[j]\n                        elif isinstance(j, list):\n                            for k in j:\n                                if isinstance(k, dict):\n                                    test_tup = test_tup + (k,)\n                                elif isinstance(k, tuple):\n                                    test_tup = test_tup + test_dict[k]\n                                elif isinstance(k, list):\n                                    for l in k:\n                                        if isinstance(l, dict):\n                                            test_tup = test_tup + (l,)\n                                        elif isinstance(l, tuple):\n                                            test_tup = test_tup + test_dict[l]\n                                        elif isinstance(l, list):\n                                            for m in l:\n                                                if isinstance(m, dict):\n                                                    test_tup = test_tup + (m,)\n                                                elif isinstance(m, tuple):\n                                                    test_tup = test_tup + test_dict[m]\n                                                elif isinstance(m, list):\n                                                    for n in m:\n                                                        if isinstance(n, dict):\n                                                            test_tup = test_tup + (n,)\n                                                elif isinstance(m, tuple):\n                                                    test_tup = test_tup + test_dict[m]\n                                                elif isinstance(m, list):\n                                                    for o in m:\n                                                        if isinstance(o, dict):\n                                                            test_tup = test_tup + (o,)\n                                                elif isinstance(m, tuple):\n                                                    test_tup = test_tup + test_dict[m]\n                                                elif isinstance(m, list):\n                                                    for p in m:\n                                                        if isinstance(p, dict):\n                                                            test_tup = test_tup + (p,)\n                                                else:\n                                                    test_tup = test_tup + (m,)\n        else:\n            test_tup = test_tup + (test_dict,)\n    else:\n        test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    output_tuple = (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_dict)\n    return output_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup.append(key)\n        test_tup.append(test_dict[key])\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_dict, dict):\n        raise TypeError(\"The dictionary passed is not a dictionary\")\n    \n    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0]+test_dict['delta'], test_tup[1]+test_dict['theta'])\n    test_tup = (test_tup[0]+test_dict['alpha'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['beta'])\n    test_tup = (test_tup[0]+test_dict['gamma'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['gamma'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['beta'])\n    test_tup = (test_tup[0]+test_dict['gamma'], test_tup[1]+test_dict['gamma'])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup += key, value\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    temp_tup = []\n    for k,v in test_dict.items():\n        temp_tup.append((k,v))\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    test_tup += test_dict\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k, v in test_dict.items():\n        test_tup.append((k, v))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # TODO: Complete this function\n    for key in test_dict:\n        test_tup.append((key, test_dict[key]))\n    # your code goes here\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    paths = []\n    for i in range(rows):\n        for j in range(cols):\n            if cost[i][j] == 0:\n                paths.append([i,j])\n            elif cost[i][j] == -1:\n                break\n    \n    path = []\n    while paths:\n        path.append(paths.pop(0))\n        if path[-1] == [rows-1,cols-1]:\n            return path\n        for i in range(rows):\n            for j in range(cols):\n                if cost[i][j] == -1 and (i,j) not in path:\n                    cost[i][j] = 0\n                    paths.append([i,j])\n    \n    return None\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Store the final result\n    ans = 0\n    # Initialize a empty queue\n    queue = []\n    # Add the values to the queue\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # If value is not 0, add it to the queue\n            if cost[i][j] > 0:\n                # Add it to the queue\n                queue.append((i, j, cost[i][j]))\n    # Remove the zero elements from the queue\n    queue = queue[1:]\n    # Iterate through the queue\n    while len(queue) > 0:\n        # Start a loop to iterate through the queue\n        for i in range(len(queue)):\n            # Calculate the current path\n            currentPath = queue.pop(0)\n            # Calculate the total cost\n            totalCost = currentPath[0] * currentPath[1] * cost[currentPath[2]][currentPath[2]]\n            # Check if the total cost is already the maximum\n            # If so, update the answer\n            if totalCost > ans:\n                ans = totalCost\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    m = len(cost[0])\n    dp = [[0]*n for i in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n-1):\n        dp[i][i] = cost[i][i] + dp[i][i+1]\n    for i in range(m-1):\n        dp[m-1-i][m-1-i] = cost[m-1-i][m-1-i] + dp[m-1-i][m-1-i-1]\n    answer = dp[-1][-1]/n\n    return answe"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    average = cost[0][0]\n    max_path = [[n-1]]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total = 0\n    row = len(cost)\n    col = len(cost[0])\n    for r in range(row):\n        for c in range(col):\n            if r == 0 and c == 0:\n                total += cost[r][c]\n            else:\n                total += cost[r][c] / cost[r-1][c]\n    return total\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for x in range(N)] for y in range(N)]\n    for i in range(N):\n        for j in range(N):\n            dp[i][j] = cost[i][j] / (i+1) + cost[i][j] / (j+1)\n    for i in range(N):\n        for j in range(N):\n            dp[i][j] = dp[i][j]/2\n    return sum(dp[0])/N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    res = 0\n    for r in range(N):\n        for c in range(N):\n            if r==0 and c==0:\n                pass\n            elif r==0:\n                res+=cost[r][c]\n            elif r==N-1:\n                res+=cost[r-1][c]\n            elif c==0:\n                res+=cost[r][c]\n            else:\n                res+=cost[r][c]/cost[r-1][c]\n    return res/N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    totalCost = 0\n    for i in range(N):\n        totalCost += cost[i][i]\n    average = totalCost / N\n    print(\"Average path cost: \"+str(average))\n    return(average)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == 0:\n        return 0\n    if cost == 1:\n        return 1\n    if cost == 2:\n        return 1 / (len(cost) - 1)\n    maximum = -1\n    for path in cost:\n        if path[0] == '1':\n            maximum += 1\n        else:\n            maximum = 0\n    return maximum / (len(cost) - 1)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    f = [0]*N\n    def dfs(i,j):\n        if f[i]!= 0 and f[i] + cost[i][j] <= f[j]:\n            return\n        f[i] = f[j] + cost[i][j]\n        dfs(i,j-1)\n        dfs(i-1,j)\n        dfs(i+1,j)\n    dfs(0,0)\n    return f[0]/N\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if h<students[student][0] or w<students[student][1]:\n            print(student)\n            return\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return students[list(filter(lambda s: h<s[0] or w<s[1],students.items()))]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.values():\n        if student[1] < (h[0]):\n            if student[1] > (w[0]):\n                students[student[0]] = student\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #CREATE A DICTIONARY OF ALL STUDENTS WHO WERE IN AN AREIA\n    areas = {}\n    #Loop through the data and see if there are any students with the same name, if there are any - add them to the dictionary\n    for student in students.keys():\n        #if it's not a dictionary\n        if type(students[student])!= dict:\n            # add the student's name to the list of areas, if the student's name is in the dictionary\n            if student in areas:\n                areas[student] = areas[student] + (students[student])\n            # otherwise, add the student's name to the list of areas, if it's already in the dictionary\n            else:\n                areas[student] = students[student]\n        else:\n            # if the student name is in the dictionary, add it's area to the dictionary\n            areas[student] = areas[student] + (students[student])\n    # find the areas that have no students in common\n    for area in areas.keys():\n        if len(areas[area])!= 0:\n            # if the area is in the dictionary, get the students that have the same area\n            for name, area_students in areas.items():\n                if area in area_students:\n                    # if the name matches, remove it from the list and add it to the dictionary\n                    areas[area].remove(name)\n                    areas[area] = areas[area] + (name)\n    # find the area that has the lowest height, lowest weight\n    # Add the lowest height to the area dictionary, and add it to the areas dictionary\n    lowest_heights = {}\n    lowest_weight = {}\n    for area in areas.keys():\n        # if the area has at least one student, and if the height and weight are above the minimum, keep it in the dictionary\n        if len(areas[area]) > 0 and len(areas[area]) < h and len(areas[area]) >= w:\n            lowest_heights[area] = areas[area]\n            lowest_weight[area] = areas[area]\n    return lowest_heights, lowest_weight\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students.pop(max(students.keys()))\n    students.pop(min(students.keys()))\n    \n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for student in students:\n        student_height = student[1][0]\n        student_weight = student[1][1]\n        if student_height>h and student_weight>w:\n            filtered[student[0]] = (student_height,student_weight)\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    def get_height_weight(height, weight):\n        if float(weight) >= float(height):\n            return True\n        else:\n            return False\n    \n    def get_height_weight_min(height, weight):\n        if float(weight) >= float(height):\n            return (float(weight), float(height))\n        else:\n            return (float(weight), float(height))\n    \n    def print_students(students):\n        if students == None:\n            print(\"Empty list\")\n        else:\n            for student in students:\n                print(student)\n    \n    students = []\n    \n    if (type(h)!= tuple) or (type(w)!= tuple):\n        print(\"Please enter the tuple of height and weight\")\n        return False\n    else:\n        for i in range(0,len(students)):\n            height = float(h[i][0])\n            weight = float(h[i][1])\n            student = Student(students[i][0],students[i][1],height,weight)\n            if get_height_weight(height, weight):\n                students.append(student)\n                print(student)\n                print_students(students)\n        return students\n    \n    \n    \ndef get_height_weight_max(students):\n    '''\n    The input is given as - a list of students. Write a function to find the highest height and weight.\n    '''\n    \n    if students == None:\n        print(\"Empty list\")\n    else:\n        for student in students:\n            if student.get_height_weight_min()[1] < student.get_height_weight(student.get_height_weight_min()[0],student.get_height_weight_min()[1])[1]:\n                student.set_height_weight_max(student.get_height_weight_min()[0],student.get_height_weight_min()[1])\n                print(\"The maximum height is\", student.get_height_weight_max()[0],\"and\",student.get_height_weight_max()[1],\"weight\")\n            else:\n                print(\"The maximum height is\",student.get_height_weight_max()[0],\"and\",student.get_height_weight_max()[1],\"weight\")\n                \n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data = []\n    for student in students.keys():\n        student_height = students[student][0]\n        student_weight = students[student][1]\n        if student_height > h or student_weight > w:\n            data.append(student)\n    return data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if not students:\n        return []\n    filtered_data = []\n    for i in students.keys():\n        if students[i][h] > h and students[i][w] > w:\n            filtered_data.append(i)\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students=[]\n    for student in students:\n        if (student[0] in h and student[1]>=w):\n            filtered_students.append(student)\n    return filtered_students\n    \n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    n = len(nums1)\n    for i in range(n):\n        for j in range(n):\n            if nums1[i]!= nums2[j]:\n                return 1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n1= len(nums1)\n    n2= len(nums2)\n    ans= 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d = dict()\n    for i in range(len(nums1)):\n        d[nums1[i]] = d.get(nums1[i], 0) + 1\n        d[nums2[i]] = d.get(nums2[i], 0) + 1\n    return [k for k, v in d.items() if v == 2]\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    c = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    def same_pair(x, y):\n        return x == y or x + 1 == y or x - 1 == y or x * y == y\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    list_index = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            list_index.append(i)\n    return len(list_index)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n1=len(nums1)\n    n2=len(nums2)\n    count=0\n    for i in range(n1):\n        for j in range(n2):\n            if nums1[i]==nums2[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_list = []\n    for nums in nums1:\n        for num in nums:\n            if num not in count_list:\n                count_list.append(nums)\n    for nums in nums2:\n        for num in nums:\n            if num not in count_list:\n                count_list.append(nums)\n    return len(count_list)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d=dict()\n    count=0\n    for i, j in zip(nums1, nums2):\n        if i==j:\n            count+=1\n        else:\n            if d.get(i)==None or d.get(i)==i:\n                d[i]=count\n            else:\n                count=d[i]\n                d[i]=count+1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(nums1)):\n        if nums1[i] in dict1 and nums2[i] in dict2:\n            return (dict1[nums1[i]], dict2[nums2[i]])\n        else:\n            dict1[nums1[i]] = 1\n            dict2[nums2[i]] = 1\n    return (0, 0)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # TODO: use the math module to calculate the sum of the digits\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit)\n    return sum_of_digits ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    while power > 0:\n        if (power % base) == 0:\n            power_sum += power // base\n        power //= base\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # TODO: Write your code here.\n    if base == 1:\n        return 0\n    if power == 0:\n        return 1\n    if power == 2:\n        return 1\n    return base + power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 1:\n        return base\n    else:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    while power >= 0:\n        power_sum += power\n        power -= base\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif power == 0:\n        return 1\n    elif power > 0:\n        return power_base_sum(base - 1, power) + base * power_base_sum(base - 1, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    power = abs(power)\n    while power > 0:\n        digit = int(base)\n        sum += digit\n        base = str(digit)\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while base!= 0:\n        result += base % 10\n        base = base // 10\n    return result * power\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_4(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_5(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_6(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_7(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_8(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_9(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_10(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_11(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_12(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_13(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_14(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_15(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n    "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #store values\n    quotations = re.findall('(?:[^\"\\']|\\'[^\\']*\\'|\\\"[^\\']*\\\")', text1)\n    quotations = list(map(lambda x: x.strip(),quotations))\n    quotations = list(filter(lambda x: x!= \"\",quotations))\n    #return quotations\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_find = text1.find('\"')\n    if quotation_find!=-1:\n        print(\"ERROR: quotation is present.\")\n        exit()\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('(?<!\\\\)\"{}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\\"{}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\\"{}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\\"{}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\\\\\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text1)\n    # Replace all of the quotation marks with a space\n    text1 = re.sub('\"{}\"', \" \", text"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.search(\"(?<=^[^,])[',(].*[)](?=(\\s|$))\", text1)\n    print(\"Extracted quotation marks ','\"+result.group(0)+\"' from the given text: \")\n    return result.group(0)\ndef extract_special_characters(text):\n    '''\n    Write a function to extract a given string of special characters.\n    '''\n    result = re.findall(r'[\\'][A-Z]|[a-z]+',text)\n    print(\"Extracted special characters '\\' and ',' from the given text: \")\n    return result\ndef remove_extra_characters(text):\n    '''\n    Write a function to remove the extra characters from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted extra characters '\\' and ',' from the given text: \")\n    return result\ndef remove_punctuation(text):\n    '''\n    Write a function to remove the punctuation characters from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted punctuation characters '\\' and ',' from the given text: \")\n    return result\ndef remove_stop_words(text):\n    '''\n    Write a function to remove the stop words from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted stop words '\\' and ',' from the given text: \")\n    return result\ndef remove_short_word_list(text):\n    '''\n    Write a function to remove short words from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted short words from the given text: \")\n    return result\ndef remove_numbers(text):\n    '''\n    Write a function to remove numbers from the given text.\n    '''\n    result = re.sub(r'[^0-9]', '', text)\n    print(\"Extracted numbers from the given text: \")\n    return result\ndef remove_lower_case_letter(text):\n    '''\n    Write a function to remove the lower case letters from the given text.\n    '''\n    result = re.sub(r'[a-z]', '', text)\n    print(\"Extracted lower case letters from the given text: \")\n    return result\ndef remove_uppercase_letter(text):\n    '''\n    Write a function to remove the uppercase letters from the given text.\n    '''\n    result = re.sub(r'[A-Z]', '', text)\n    print(\"Extracted uppercase letters from the given text: \")\n    return result\ndef remove_space_between_letters(text):\n    '''\n    Write a function to remove the space between letters from the given text.\n    '''\n    result = re.sub(r'[ ]{2,}','', text)\n    print(\"Extracted space between letters from the given text: \")\n    return result\ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all the numbers from the given text.\n    '''\n    result = re.sub(r'[^0-9]', '', text)\n    print(\"Extracted all numbers from the given text: \")\n    return result\ndef remove_all_special_characters(text):\n    '''\n    Write a function to remove all the special characters from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted all special characters from the given text: \")\n    return result\ndef remove_all_stop_words(text):\n    '''\n    Write a function to remove all the stop words from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted all stop words from the given text: \")\n    return result\ndef remove_all_short_word_list(text):\n    '''\n    Write a function to remove all the short words from the given text.\n    '''\n    result = re.sub(r'[^0-9]', '', text)\n    print(\"Extracted all short words from the given text: \")\n    return result\ndef remove_all_numbers_and_special_characters(text):\n    '''\n    Write a function to remove all the numbers and special characters from the given text.\n    '''\n    result = re.sub(r'[^0-9]', '', text)\n    print(\"Extracted all numbers and special characters from the given text: \")\n    return result\ndef remove_all_uppercase_letters_and_special_characters(text):\n    '''\n    Write a function to remove all the uppercase letters and special characters from the given text.\n    '''\n    result = re.sub(r'[A-Z]', '', text)\n    print(\"Extracted all uppercase letters and special characters from the given text: \")\n    return result\ndef remove_all_space_between_letters_and_special_characters(text):\n    '''\n    Write a function to remove all the space between letters and special characters from the given text.\n    '''\n    result = re.sub(r'[ ]{2,}','', text)\n    print(\"Extracted all space between letters and special characters from the given text: \")\n    return result\ndef remove_all_letters_and_special_characters(text):\n    '''\n    Write a function to remove all the letters and special characters from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted all letters and special characters from the given text: \")\n    return result\ndef remove_all_letters_and_special_characters_and_numbers(text):\n    '''\n    Write a function to remove all the letters and special characters and numbers from the given text.\n    '''\n    result = re.sub(r'[^0-9a-zA-Z]', '', text)\n    print(\"Extracted all letters and special characters and numbers from the given text: \")\n    return result\ndef remove_all_numbers_and_special_characters_and_numbers(text):\n    '''\n    Write a function to remove all the numbers and special characters and numbers from the given text.\n    '''\n    result = re.sub(r'[^0-9]', '', text)\n    print(\"Extracted all numbers and special characters and numbers from the given text: \")\n    return result\ndef remove_all_uppercase_letters_and_special_characters_and_numbers(text):\n    '''\n    Write a function to remove all the uppercase letters and special characters and numbers from the given text.\n    '''\n    result = re.sub(r'[A-Z]', '', text)\n    print(\"Extracted all uppercase letters and special characters and numbers from the given text: \")\n    return result\ndef remove_special_characters(text):\n    '''\n    Write a function to remove the special characters from the given text.\n    '''\n    result = re.sub(r'[^a-zA-Z0-9\\'\\\u2019_\u2018]', '', text)\n    print(\"Extracted special characters from the given text: \")\n    return result\ndef remove_all_numbers_and_special_characters_and_numbers_and_special_characters(text):\n    '''\n    Write a function to remove all the numbers and special characters and numbers and special characters and numbers from the given text.\n    '''\n    result = re.sub(r'[^0-9]', '', text)\n    print(\"Extracted all numbers and special character"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotations = ['\"\"', '\u201c', '\u201d', '\u2018', '\u2019', '\u201d', '\u201c', '\u2019', '\"', '\"', '\u2018', '\u2019', '\u201c', '\u201d', '\u201c', '\u2018', '\u2019', '\u201c', '\u201d']\n    result = ''\n    i = 0\n    while i < len(text1):\n        if text1[i:i+len(quotations)] == quotations:\n            j = i+len(quotations)\n            while j < len(text1) and text1[j] in quotations:\n                j += 1\n            result = text1[i:j]\n            text1 = text1[j:]\n            i = j\n        else:\n            j = i\n            while j < len(text1) and text1[j] in quotations:\n                j += 1\n            result = text1[i:j]\n            text1 = text1[j:]\n            i = j\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace(\"\u2019\", \"\")\n    text = text.replace(\"\u2018\", \"\")\n    text = text.replace(\"\u201c\", \"\")\n    text = text.replace(\"\u201d\", \"\")\n    text = text.replace(\"\u2019\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace('\"', \"\")\n    text = text.replace(\"\\n\", \"\")\n    text = text.replace(\"  \", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\"{\", \"\")\n    text = text.replace(\"}\", \"\")\n    text = text.replace(\"&\", \"\")\n    text = text.replace(\";\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"?\", \"\")\n    text = text.replace(\" \", \"\")\n    text = text.replace(\"\\t\", \"\")\n    text = text.replace(\"\\n\", \"\")\n    text = text.replace(\"\\r\", \"\")\n    text = text.replace(\"\\xa0\", \"\")\n    text = text.replace(\"\\u3000\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200b\", \"\")\n    text = text.replace(\"\\u200d\", \"\")\n    text = text.replace(\"\\u200f\", \"\")\n    text = text.replace(\"\\u00a0\", \"\")\n    text = text.replace(\"\\u0020\", \"\")\n    text = text.replace(\"\\u200c\", \"\")\n    text = text.replace(\"\\u200"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_regex = re.compile(r'(\\s|,)')\n    quotations = quotation_regex.split(text1)\n    values = []\n    for quote in quotations:\n        if quote:\n            values.append(quote)\n    values = [value.strip() for value in values]\n    return values\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values=re.findall('\"([^\"]+)\"',text1)\n    for value in values:\n        print(value)\n        \ndef extract_id(text1):\n    '''\n    Write a function to extract numeric values between quotation marks \" \" of the given string.\n    '''\n    values=re.findall('(\\d+)',text1)\n    for value in values:\n        print(value)\n        \ndef extract_email(text1):\n    '''\n    Write a function to extract email address of the given string.\n    '''\n    values=re.findall('@([a-zA-Z0-9_\\-\\.]+)',text1)\n    for value in values:\n        print(value)\n        \ndef extract_phone(text1):\n    '''\n    Write a function to extract phone number of the given string.\n    '''\n    values=re.findall('\\d{3}\\-\\d{3}\\-\\d{3}',text1)\n    for value in values:\n        print(value)\n        \ndef extract_amount(text1):\n    '''\n    Write a function to extract amount value of the given string.\n    '''\n    values=re.findall('([\\d.]+)',text1)\n    for value in values:\n        print(value)\n        \ndef extract_product(text1):\n    '''\n    Write a function to extract product name from the given string.\n    '''\n    values=re.findall('\\w+',text1)\n    for value in values:\n        print(value)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_regex = '\"'\n    quot_list = re.findall(quot_regex,text1)\n    return quot_list\ndef extract_quotation1(text2):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_regex = '\"'\n    quot_list = re.findall(quot_regex,text2)\n    return quot_list\ndef extract_time(text3):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_regex = '\"'\n    quot_list = re.findall(quot_regex,text3)\n    return quot_list\ndef extract_time1(text4):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_regex = '\"'\n    quot_list = re.findall(quot_regex,text4)\n    return quot_list\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = len(test_tup)\n    for i in range(1,t_N):\n        t_i = test_tup[i]\n        t_1 = t_1 * t_i\n    return t_1\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(0,len(test_tup)):\n        result = result + (t_i*t_{i+1})\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    for i in range(len(test_tup)-1):\n        t_i = test_tup[i+1]\n        t_1 = t_1 * t_i\n    return (t_1, test_tup[-1])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # your code goes here\n    return t_1 * t_i\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    test_tup = test_tup[::-1]\n    t_1, t_2 = test_tup\n    n = len(t_1)\n    #print(t_1,t_2)\n    res = list(t_1)\n    for i in range(n-1):\n        res[i] = t_2[i] * t_1[i]\n    return tuple(res)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup = new_tup + (i, )\n    return new_tup\n    \ndef divide_by_twos(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / 2.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup = new_tup + (i, )\n    return new_tup\n    \ndef evaluate(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns the value of t_i * t_{i+1}.\n    '''\n    new_tup = multiply_elements(test_tup)\n    new_tup = divide_by_twos(new_tup)\n    return new_tup\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda t: t[0]*t[1], test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1:]\n    mult = 1\n    for i in range(len(t_1)):\n        mult = mult * t_1[i]\n    for i in range(len(t_2)):\n        mult = mult * t_2[i]\n    return (t_1, t_2, mult)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #create a empty tuple\n    t_1_mult = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_mult += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_mult += (test_tup[i+1])\n    #return the tuple\n    return t_1_mult\n    \n    \ndef add_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n    '''\n    #create a empty tuple\n    t_1_add = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_add += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_add += (test_tup[i+1])\n    #return the tuple\n    return t_1_add\n    \n    \n    \ndef divide_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / t_{i+1}.\n    '''\n    #create a empty tuple\n    t_1_div = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_div += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_div += (test_tup[i+1])\n    #return the tuple\n    return t_1_div\n    \n    \ndef subtract_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i - t_{i+1}.\n    '''\n    #create a empty tuple\n    t_1_sub = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_sub += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_sub += (test_tup[i+1])\n    #return the tuple\n    return t_1_sub\n    \n    \ndef multiply_by_two(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * 2.\n    '''\n    #create a empty tuple\n    t_1_2 = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_2 += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_2 += (test_tup[i+1])\n    #return the tuple\n    return t_1_2\n    \n    \ndef divide_by_two(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / 2.\n    '''\n    #create a empty tuple\n    t_1_2 = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_2 += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_2 += (test_tup[i+1])\n    #return the tuple\n    return t_1_2\n    \n    \ndef subtract_by_two(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i - t_{i+1}.\n    '''\n    #create a empty tuple\n    t_1_2 = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_2 += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_2 += (test_tup[i+1])\n    #return the tuple\n    return t_1_2\n    \n    \n    \n    \ndef multiply_three(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * 3.\n    '''\n    #create a empty tuple\n    t_1_3 = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_3 += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_3 += (test_tup[i+1])\n    #return the tuple\n    return t_1_3\n    \n    \ndef divide_three(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / 3.\n    '''\n    #create a empty tuple\n    t_1_3 = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_3 += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_3 += (test_tup[i+1])\n    #return the tuple\n    return t_1_3\n    \n    \n    \ndef subtract_three(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i - t_{i+1}.\n    '''\n    #create a empty tuple\n    t_1_3 = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t_1_3 += (test_tup[i],)\n        #modify the tuple to include the i-th element\n        t_1_3 += (test_tup[i+1])\n    #return the tuple\n    return t_1_3\n    \n    \n    \ndef multiply_four(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * 4.\n    '''\n    #create a empty tuple\n    t_1_4 = ()\n    #iterate through the tuple\n    for i in range(len(test_tup)-1):\n        #add the i-th element to the tuple\n        t"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #Dont edit the code below\n    return test_tup\n    \ndef save_tuple_as_text(test_tup, name):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and a name of a text file to write the current tuple to. \n    '''\n    #Dont edit the code below\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=[]\n    for i in range(len(lst1)):\n        sum.append(lst1[i]+lst2[i])\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = 0\n    for i in range(len(lst1)):\n        result += lst1[i]\n    for i in range(len(lst2)):\n        result += lst2[i]\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #Your code here\n    lst1 = lst1 + lst2\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_elements=[]\n    for i in range(len(lst1)):\n        sum_elements.append(lst1[i]+lst2[i])\n    return sum_elements\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1==[] and lst2==[]:\n        return 0\n    elif lst1==[] or lst2==[]:\n        return [0]\n    elif lst1[0]==lst2[0]:\n        return [lst1[0]+lst2[0]]\n    elif lst1[0]<lst2[0]:\n        return [lst1[0]+lst2[0]]+sum_list(lst1[1:],lst2[1:])\n    elif lst1[0]>lst2[0]:\n        return sum_list(lst1[1:],lst2[1:])+[lst1[0]+lst2[0]]\n    else:\n        return lst1[0]+lst2[0]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #raise NotImplementedError\n    lst1.sort()\n    lst2.sort()\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return []\n    result = []\n    for i in range(0,len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #lst_sums = []\n    #for i in lst1:\n        #for j in lst2:\n            #lst_sums.append(i+j)\n    lst_sums = [i+j for i in lst1 for j in lst2]\n    return lst_sums\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s=0\n    for i in lst1:\n        s+=i\n    for j in lst2:\n        s+=j\n    return s\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        if nums[i] in lst:\n            continue\n        else:\n            lst.append(nums[i])\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 1:\n        return nums\n    count = {}\n    for i in range(len(nums)):\n        if nums[i] in count:\n            count[nums[i]] = count[nums[i]] + 1\n        else:\n            count[nums[i]] = 1\n    for key, value in count.items():\n        if value == 1:\n            del(count[key])\n    return list(count.keys())\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    '''\n    Time Complexity:\n        1) O(n^2)\n        2) O(n)\n    '''\n    #numbers = list(nums)\n    grouped = groupby(nums, nums)\n    nums_ = []\n    for key, value in grouped:\n        if value:\n            nums_ += list(value)\n        else:\n            nums_.append(key)\n    return nums_\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    # Make a list of all the elements in the list\n    for i in nums:\n        # make a list of all the elements not consecutive\n        if i not in new_list:\n            new_list.append(i)\n    # return the new list\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for i, num in enumerate(nums):\n        if num not in seen:\n            yield num\n        else:\n            seen.add(num)\n    \n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a set\n    set_nums = set(nums)\n    # iterate over each element\n    for i in range(0, len(nums)):\n        # see if a particular element is already present\n        if nums[i] in set_nums:\n            # increment the count\n            set_nums.remove(nums[i])\n        # if it is, there is a match!\n        else:\n            # increment the count\n            set_nums.add(nums[i])\n    return set_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    d = []\n    for x in nums:\n        if x not in d:\n            d.append(x)\n    return d\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # IMPORTANT: Notice that we are using a built-in python function \"Counter\" for this exercise.\n    # Counter will count numbers in a sequence\n    # that is a list of tuples.\n    # Example: Counter('abcd') => {1: 1, 2: 2, 3: 1}\n    \n    # notice that we are using a built-in function \"Counter\" for this exercise.\n    # for i in nums:\n    #     if i in counter:\n    #         counter[i] += 1\n    #     else:\n    #         counter[i] = 1\n    #     return counter\n    \n    return [i for i, c in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Initialize an array to store the repeated numbers\n    duplicated = set()\n    # Store the current index of the list\n    curr = 0\n    # Loop through each element in the list\n    for i in range(len(nums)):\n        # If the current element's value is not the same as the previous element,\n        # add it to the set of duplicate numbers\n        if nums[i]!= nums[curr]:\n            duplicated.add(nums[i])\n        # Increment the current index\n        curr += 1\n    # Return the set of duplicate numbers\n    return duplicated\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*math.pi*r) * (math.sin(h/2)**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone:\n    a = 4/3 * math.pi * (r**3)\n    # Define the angle theta:\n    theta = math.acos(a)\n    # Define the radius:\n    rho = r**2\n    # Define the height:\n    h_dot = h\n    # Check if the cone is inside the ground:\n    if (math.fabs(rho) <= 1):\n        # Calculate the surface area of the cone:\n        s = 4 * (1 - math.cos(theta)) * math.pi * (r**2) * h_dot\n        # Calculate the angular displacement of the cone:\n        theta_dot = (math.acos(s/rho) - theta) * 2 * math.pi / rho\n        # Return the resulting surface area:\n        return s * (math.cos(theta) + math.cos(theta_dot) + math.cos(theta))\n    else:\n        # Calculate the surface area of the cone:\n        s = 4 * (1 - math.cos(theta)) * math.pi * (r**2) * h_dot\n        # Calculate the angular displacement of the cone:\n        theta_dot = (math.acos(s/rho) - theta) * 2 * math.pi / rho\n        # Return the resulting surface area:\n        return s * (math.cos(theta) + math.cos(theta_dot) + math.cos(theta))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the surface.\n    return r * h * math.tanh(math.atan(h/r))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*h)/(2*math.pi*(math.tan(math.pi*r)))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Coordinate\n    X = r*math.cos(math.radians(180))*math.sin(math.radians(90-h))\n    Y = r*math.sin(math.radians(180))*math.sin(math.radians(90-h))\n    Z = r*math.cos(math.radians(90-h))\n    #Circle's reference point\n    Cx = X\n    Cy = Y\n    #Radius\n    R = math.sqrt(X**2+Y**2)\n    #Area\n    A = math.pi*R*R\n    #Applying the cos and sin functions\n    X = Cx*math.cos(math.radians(90-h))\n    Y = Cy*math.sin(math.radians(90-h))\n    Z = Z*math.cos(math.radians(90-h))\n    A = A/math.sqrt(X**2+Y**2)\n    return A\ndef ellipse(r,h):\n    '''\n    Write a function to calculate the ellipse of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef hyperbola(r,h):\n    '''\n    Write a function to calculate the hyperbola of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef tessellation(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef polygon(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef triangle(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef square(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef circle(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef polygon_ellipse(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef polygon_hyperbola(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef polygon_tessellation(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef polygon_square(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n    B = r*(1-h)\n    C = r*(1+h)\n    D = r*(1-h)\n    A = math.sqrt(A**2+B**2)\n    B = math.sqrt(B**2+C**2)\n    C = math.sqrt(C**2+D**2)\n    D = math.sqrt(D**2+A**2)\n    return A,B,C,D\ndef polygon_circle(r,h):\n    '''\n    Write a function to calculate the surface area of a triangle given its major and minor axes.\n    '''\n    A = r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    area_of_cones = math.pi * r**2 * h**2 * math.sin(math.pi*r/2)\n    return area_of_cones\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r*r)/(math.pi*h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the frontal surface area of a cone given radius r and the height h.\n    '''\n    return (r*h)/(3*(math.pi*r))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0\n    return area\ndef surface_areas(r,h):\n    '''\n    Write a function that returns the surface areas.\n    '''\n    # assume we have a positive slope\n    return math.tan(math.radians(h)) * r * 2\ndef check_window_point(x,y):\n    '''\n    This function checks if a certain window_point is on the edge of the screen.\n    '''\n    if x >= 0 and x <= WINDOW_LENGTH:\n        if y >= 0 and y <= WINDOW_HEIGHT:\n            return True\n    return False\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = 4 * h / 3\n    return 4 * r * math.sin(h / 3) * math.pi * math.sqrt(3) / 6 * a\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern_replace = re.compile(\"([^a-zA-Z0-9_ \\t])\")\n    new_text = pattern_replace.sub(r\"\\1: \\2\", text)\n    new_text = pattern_replace.sub(r\"\\1: \\1\\2\", new_text)\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    s=text.replace(' ',':')\n    s=s.replace(',','::')\n    s=s.replace('.','::')\n    s=s.replace('-','::')\n    s=s.replace('.','::')\n    return s\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[^0-9a-zA-Z_]', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('\\s*,\\s*', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace space and commas with a colon.\n    text = re.sub(r'\\s+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # First, replace the spaces with a space\n    text = text.replace(' ','')\n    # Next, replace commas with a comma\n    text = text.replace(',','')\n    # Finally, replace dots with a dot\n    text = text.replace('.', '.')\n    return text\ndef replace_numbers(text):\n    '''\n    Write a function that takes a string and replaces all numbers with a number separator.\n    For example, if the string is \"5.99 23.12\", then the function should return \"5.9923\"\n    '''\n    # First, replace the numbers with a number separator\n    text = text.replace(',', '.')\n    # Second, replace all other numbers with a space\n    text = text.replace('.','')\n    return text\ndef remove_html_tags(text):\n    '''\n    Write a function that takes a string as input and returns the string with\n    the <b> and <i> tags removed.\n    '''\n    # First, replace all <b> with a space\n    text = text.replace('<b>','')\n    # Second, replace all <i> with a space\n    text = text.replace('<i>','')\n    # Third, remove all other tags and spaces\n    text = re.sub(r'(<.*?>)|(<.*?>)|(<.*?>)|(<.*?>)','', text, flags=re.S)\n    return text\ndef process_data(input_file):\n    '''\n    Reads the input file and returns a list of lists.\n    The inner lists contain lists of the text and the number\n    '''\n    raw_data = open(input_file, 'r').read().split('\\n')\n    data = []\n    for i in range(len(raw_data)):\n        data.append([raw_data[i].replace('\\n', ''), re.sub(r'[^\\d.\\,]', '', raw_data[i])])\n    data = list(filter(lambda x: x[1], data))\n    return data\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"^\\s+\", \":\", text)\n    text = re.sub(\"\\.\\.+\", \":\", text)\n    text = re.sub(\"^[.,]$\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[ ]+',' :', text)\n    text = re.sub('[,]',' :',text)\n    text = re.sub('[,]',' :',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re.sub(r'\\s{2,}', ':', text)\n    text = re"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for match in re.finditer(r\"[\\s,;:_]\", text):\n        text = text[:match.start()] + match.group() + text[match.end():]\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if len(A) == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n    if A[0] == x:\n        return 0\n    mid = len(A)//2\n    if A[mid] == x:\n        return mid\n    if A[mid] < x:\n        return find_first_occurrence(A[mid+1:], x)\n    else:\n        return find_first_occurrence(A[:mid], x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # To find the first occurrence of x in the array\n    idx = A.index(x)\n    # Return the index of the first occurrence of x\n    return idx\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if x not in A:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # Traverse through the list and find the first occurrence of the number\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    \n    return -"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first occurrence\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # For a sorted array, return the first index of the first occurrence of x\n    # Initialize a counter, to keep track of the number in the array,\n    # and the index in the array\n    count = 0\n    index = 0\n    # While the counter is greater than or equal to the length of the array\n    while count < len(A):\n        # Check if the element is present\n        if A[count] == x:\n            # Set the index, and update the count\n            index = count\n            count += 1\n        # If the element is not present, increment the counter\n        else:\n            count += 1\n    # Return the index\n    return index\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            return index\n        index = index + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left_idx, right_idx = 0, len(A)-1\n    while left_idx <= right_idx:\n        mid = (left_idx + right_idx) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left_idx = mid + 1\n        else:\n            right_idx = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    sum_Prod = 0\n    prod = 1\n    curr_sum = 0\n    for i in range(1, n):\n        prod *= arr[i]\n        curr_sum += prod\n        sum_Prod += curr_sum\n    return sum_Prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if j < len(arr[i]):\n                sum += arr[i][j]\n    return sum\n    \n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def sumOfSubArrayProd(arr,i,j):\n        return sum(arr[i:j+1])\n    \n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            ans += sumOfSubArrayProd(arr,i,j)\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    import math\n    size = len(arr)\n    if size == 0:\n        return 0\n    n = size\n    prod = 1\n    res = []\n    #find the sum of all subarrays\n    for i in range(0, size):\n        temp = arr[i]\n        temp1 = arr[i]\n        for j in range(i, size):\n            #subarray sum is temp1 * temp\n            #we take the sum of the subarrays with the product of temp, as the new values\n            temp2 = temp * prod\n            temp1 = temp1 * temp1\n            #add the subarrays sum in the result array\n            res.append(temp1)\n            prod = prod * temp1\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # TODO: your code goes here\n    sum = 0\n    l = len(arr)\n    for i in range(l):\n        for j in range(i+1,l):\n            sum += (arr[i]*arr[j])\n    return sum\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Get length of array\n    n = len(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    arr.sort()\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1, n):\n            sum += arr[i] * arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sub_list = []\n    for i in range(0,len(arr)):\n        if i!= 0:\n            sub_list.append(arr[i])\n    sub_list.append(arr[-1])\n    sum = 0\n    for i in range(len(sub_list)-1):\n        sum += sub_list[i]*sub_list[i+1]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = [0] + arr\n    ret = [0]\n    for i in range(1, len(arr)):\n        ret.append(ret[i-1] + arr[i])\n    return ret[-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # if n is odd, return sum of itself\n    if n%2 == 0:\n        return arr[0] + arr[n//2]\n    else:\n        # sum of products of arr[i] and arr[i + 1]\n        return arr[0] + arr[n//2] + arr[n//2 + 1]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i, j, n = 0, 0, n\n    while n > 0:\n        n = n >> 1\n        i += 1\n        j += 1\n        \n    for _ in range(i):\n        n = n + 1\n        \n    for _ in range(j):\n        n = n << 1\n    \n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    b = n\n    carry = 0\n    while b:\n        # bit of the nth bit\n        k = b&1\n        # bit of the previous nth bit\n        if k == 1:\n            carry = 1\n            b = b >> 1\n        else:\n            # do not add the carry if we are not at the last bit\n            if b >= 32:\n                carry = 1\n                b = b & (b - 1)\n            else:\n                # add the carry\n                b = b | (carry << 1)\n                carry = 1\n    if carry:\n        # add the last bit\n        b = b | 1\n    return b\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Your code here\n    # for i in range(n):\n    #     n = n & 1\n    #     n = n| 1\n    # return n\n    \n    # time complexity of this algorithm is O(n)\n    \n    # n = n & 1\n    # n = n| 1\n    \n    n = n ^ 1\n    n = n | 1\n    return n\n    \ndef main():\n    # res = set_middle_bits(int(input(\"Enter a number:\")))\n    # print(res)\n    res = set_middle_bits(10)\n    print(res)\n    print(set_middle_bits(10))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & 0xffffffff\n    i = (n >> 24) & 0xffffffff\n    j = (n >> 16) & 0xffffffff\n    k = (n >> 8) & 0xffffffff\n    l = n & 0xffffffff\n    m = ((k << 24) | (j << 16) | (i << 8) | l)\n    return m\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = bin(n)[2:]\n    res = res.zfill(8)\n    print(f'Res: {res}')\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = bin(n)[2:] #first digit\n    if len(x) == 1:\n        x = '0' + x #last digit\n    else:\n        x = x[:-1] #last digit\n    print(x)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Your code here\n    print(\"The result is: \" + str(format(n, 'b')))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int(bin(n)[2:])\n    \ndef set_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int(bin(n)[3:])\n    \ndef get_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int(bin(n)[5:], 2)\n    \ndef toggle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & (n - 1)\n    \ndef div(n, divisor):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n % divisor\n    \ndef swap_bits(n, i, j):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int(bin(n)[:i] + bin(n)[i+1:j] + bin(n)[j+1:])\n    \ndef decompose_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(0, n, 2):\n        yield i, i + 1, i + 2\n        \ndef get_integer(n, bits):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(bits):\n        yield n % 2, i, i + 1\n        n = n // 2\n    \ndef get_bit(n, bits):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(bits):\n        yield (n >> i) & 1, i, i + 1\n        n >>= 1\n        \ndef get_bit_values(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(n):\n        yield n >> i\n        n >>= 1\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    new_n = n ^ (n >> 1)\n    new_n = new_n << 1\n    new_n = new_n | (n >> 1)\n    return new_n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def bin_to_dec(n):\n        '''\n        Convert binary number to decimal\n        '''\n        return (int(n, 2))\n    \n    def dec_to_bin(n):\n        '''\n        Convert decimal number to binary\n        '''\n        return (bin(n)[2:])\n    \n    def bin_to_hex(n):\n        '''\n        Convert binary number to hexadecimal\n        '''\n        return (hex(n)[2:])\n    \n    def hex_to_bin(n):\n        '''\n        Convert hexadecimal number to binary\n        '''\n        return (bin(int(n, 16))[2:])\n    \n    def bin_to_oct(n):\n        '''\n        Convert binary number to octal\n        '''\n        return (oct(n)[2:])\n    \n    def oct_to_bin(n):\n        '''\n        Convert octal number to binary\n        '''\n        return (bin(int(n, 8))[2:])\n    \n    def bin_to_hexadecimal(n):\n        '''\n        Convert binary number to hexadecimal\n        '''\n        return (hex(int(n, 2))[2:])\n    \n    def hex_to_binadecimal(n):\n        '''\n        Convert hexadecimal number to binary\n        '''\n        return (bin(int(n, 16))[2:])\n    \n    def bin_to_octadecimal(n):\n        '''\n        Convert binary number to octadecimal\n        '''\n        return (oct(int(n, 8))[2:])\n    \n    def oct_to_binadecimal(n):\n        '''\n        Convert octadecimal number to binary\n        '''\n        return (bin(int(n, 8))[2:])\n    \n    def bin_to_decadecimal(n):\n        '''\n        Convert binary number to decimal\n        '''\n        return (int(n, 2))\n    \n    def dec_to_binadecimal(n):\n        '''\n        Convert decimal number to binary\n        '''\n        return (bin(int(n, 2))[2:])\n    \n    def bin_to_octadecimal(n):\n        '''\n        Convert binary number to octadecimal\n        '''\n        return (oct(int(n, 8))[2:])\n    \n    def oct_to_binadecimal(n):\n        '''\n        Convert octadecimal number to binary\n        '''\n        return (bin(int(n, 8))[2:])\n    \n    def bin_to_decadecimal(n):\n        '''\n        Convert binary number to decimal\n        '''\n        return (int(n, 2))\n    \n    n = bin_to_dec(n)\n    n = bin_to_hex(n)\n    n = bin_to_oct(n)\n    n = bin_to_bin(n)\n    n = bin_to_binadecimal(n)\n    n = bin_to_octadecimal(n)\n    n = bin_to_octadecimal(n)\n    n = bin_to_hexadecimal(n)\n    n = bin_to_octadecimal(n)\n    n = bin_to_decadecimal(n)\n    \n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l, m = 0, 1\n    while True:\n        if a[l] <= x:\n            if l == m:\n                break\n            l += 1\n        else:\n            m += 1\n            if m == len(a):\n                break\n    return m\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l, m = 0, len(a) - 1\n    while l < m:\n        if a[l] <= x:\n            if l == m:\n                break\n            l += 1\n        else:\n            m -= 1\n            if l == 0:\n                break\n    return m\ndef binary_search(a, x):\n    '''\n    Write a function to return the index of an item in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l, r = 0, len(a) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\ndef selection_sort(a):\n    '''\n    Sort a given unsorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        lowest = i\n        for j in range(i + 1, len(a)):\n            if a[lowest] > a[j]:\n                lowest = j\n        a[i], a[lowest] = a[lowest], a[i]\n    return a\ndef shell_sort(a):\n    '''\n    Sort a given unsorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def sort_iterate(arr):\n        n = len(arr)\n        for i in range(n - 1, 0, -1):\n            for j in range(i):\n                if arr[j] > arr[j + 1]:\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n        return arr\n    def sort_insertion(arr):\n        for i in range(1, len(arr)):\n            x = arr[i]\n            j = i\n            while j > 0 and arr[j - 1] > x:\n                arr[j] = arr[j - 1]\n                j -= 1\n            arr[j] = x\n        return arr\n    for i in range(n):\n        arr = [a[i] for i in range(n) if i % 2 == 0]\n        arr = sort_iterate(arr)\n        arr = sort_insertion(arr)\n        a[i] = arr\n    return a\ndef merge_sort(a):\n    '''\n    Sort a given unsorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def sort_iterate(arr):\n        n = len(arr)\n        left = 0\n        right = n - 1\n        mid = (left + right) // 2\n        while left < right:\n            if arr[left] < arr[mid]:\n                arr[left], arr[mid] = arr[mid], arr[left]\n                left += 1\n            else:\n                right -= 1\n        return arr\n    def sort_insertion(arr):\n        for i in range(1, len(arr)):\n            x = arr[i]\n            j = i\n            while j > 0 and arr[j - 1] > x:\n                arr[j] = arr[j - 1]\n                j -= 1\n            arr[j] = x\n        return arr\n    for i in range(n):\n        arr = [a[i] for i in range(n) if i % 2 == 0]\n        arr = sort_iterate(arr)\n        arr = sort_insertion(arr)\n        a[i] = arr\n    return a\ndef bubble_sort(a):\n    '''\n    Sort a given unsorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a) - 1):\n        for j in range(0, len(a) - i - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    return a\ndef heapify(a, i):\n    '''\n    Heapify a given array of size n.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if i == len(a) - 1:\n        return\n    left_index = 2 * i + 1\n    right_index = 2 * i + 2\n    if left_index < len(a) and a[i] < a[left_index]:\n        smallest = left_index\n    else:\n        smallest = i\n    if right_index < len(a) and a[smallest] < a[right_index]:\n        smallest = right_index\n    if smallest!= i:\n        a[i], a[smallest] = a[smallest], a[i]\n        heapify(a, smallest)\ndef heap_sort(a):\n    '''\n    Sort a given unsorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def heapify_sort(a, i):\n        left_index = 2 * i + 1\n        right_index = 2 * i + 2\n        if left_index < len(a) and a[i] < a[left_index]:\n            smallest = left_index\n        else:\n            smallest = i\n        if right_index < len(a) and a[smallest] < a[right_index]:\n            smallest = right_index\n        if smallest!= i:\n            a[i], a[smallest] = a[smallest], a[i]\n            heapify_sort(a, smallest)\n    for i in range(len(a)):\n        heapify(a, i)\n    for i in range(len(a) - 1, 0, -1):\n        a[i], a[0] = a[0], a[i]\n        heapify_sort(a, 0)\n        print(a)\ndef merge_sort(a):\n    '''\n    Sort a given unsorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def sort_iterate(arr):\n        n = len(arr)\n        if n <= 1:\n            return arr\n        mid = n // 2\n        left = sort_iterate(arr[:mid])\n        right = sort_iterate(arr[mid:])\n        return merge(left, right)\n    def merge(left, right):\n        i, j = 0, 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] < righ"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    if index == 0:\n        return index\n    return index-1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i < len(a):\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return -1\n    else:\n        return idx\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if x <= a[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # make sure a is sorted\n    if a[0]!= x:\n        return None\n    if len(a) == 1:\n        return 0\n    else:\n        low = a[0]\n        mid = a[1]\n        high = a[-1]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a[0]:\n        x = a[0]\n    i = 0\n    j = 0\n    while i < len(a) and a[i] < x:\n        i = i + 1\n    if i >= len(a):\n        return i\n    while j < len(a) and x <= a[j]:\n        j = j + 1\n    return j\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    if l <= x < r:\n        while r > l and a[r] < x:\n            r -= 1\n        a[l:r+1] = [x]\n        return r\n    else:\n        return -1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i].upper() in vowels:\n            count += 1\n        else:\n            if count == 0:\n                return False\n            count -= 1\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a','e','i','o','u']\n    vowel = re.compile(vowels)\n    if vowel.match(string):\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # convert string to lowercase\n    string = string.lower()\n    # replace all 'A' to 'a'\n    string = string.replace('a','a')\n    # remove any spaces in the string\n    string = re.sub(\"\\s+\",\" \", string)\n    # split the string into individual words \n    words = string.split()\n    # Iterate through the words and check if the word is starting with a vowel. If the word is starting with vowel, then add the word to the returned string. \n    # If the word is not starting with a vowel, then remove the word from the string. \n    # Time: O(n)\n    # Space: O(1)\n    for word in words:\n        if word[0].lower() in vowels:\n            string = string.replace(word[0].lower(), word[0].upper()+word[1:])\n        else:\n            string = string.replace(word[0].lower(), word[1:])\n    return string \n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].lower() in ['a', 'e', 'i', 'o', 'u']:\n        return True\n    else:\n        return False\ndef is_vowel(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef is_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant or not using regex.\n    '''\n    if re.search('[^aeiouAEIOU]', string):\n        return True\n    else:\n        return False\ndef is_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and the consonant and consonant and consonant or not using regex.\n    '''\n    if re.search(r'[aeiouAEIOU]', string):\n        return True\n    else:\n        if re.search('[^aeiouAEIOU]', string[::-1]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in \"AEIOU\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return string[0] in ['a', 'e', 'i', 'o', 'u']\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # if true, then ignore everything after the first vowel \n    # so the string starts with a vowel \n    if(re.fullmatch(regex,string[0])):\n        return True\n    # if not, then if not, then true \n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)!= None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if len(string) == 1: \n        return True \n    elif re.match(regex, string) is not None: \n        return True \n    else: \n        return False \ndef replace_dashes(string): \n    '''\n    Write a function to replace dashes in the given string.\n    '''\n    string = string.replace('-','') \n    string = string.replace('--','') \n    string = string.replace('--','') \n    string = string.replace('-','') \n    return string \ndef remove_punctuation(string): \n    '''\n    Write a function to remove the given string characters that are not part of the alphabet \n    '''\n    #Remove the given string characters that are not part of the alphabet \n    string = re.sub(\"[^aeiouAEIOU]\",\"\",string) \n    #Remove the puctuation at the start and end of the string \n    string = re.sub(\"[^a-zA-Z]\", \" \", string) \n    #Remove the white spaces at the end of the string \n    string = re.sub(\" +\", \" \", string) \n    #Remove the \"--\" \n    string = re.sub(\"--\", \" \", string) \n    return string \ndef capitalize_first(string): \n    '''\n    Write a function to capitalize the given string \n    '''\n    string = string.capitalize() \n    return string \ndef clean_word(string): \n    '''\n    Write a function to clean the given string and return it \n    '''\n    #Remove the repeated characters \n    string = re.sub(\"[^aeiouAEIOU]+\",\"\",string) \n    #Remove the capital letters \n    string = re.sub(\"[^A-Za-z]+\", \" \", string) \n    #Remove the apostrophes \n    string = re.sub(\"'\", \" \", string) \n    #Remove the quotes \n    string = re.sub(r\"\\\"\", \" \", string) \n    #Capitalize the string \n    string = string.capitalize() \n    #Remove the spaces at the end of the string \n    string = re.sub(\" +\", \" \", string) \n    #Remove the punctuation at the start and end of the string \n    string = re.sub(\"[^a-zA-Z]\", \" \", string) \n    #Remove the white spaces at the end of the string \n    string = re.sub(\" +\", \" \", string) \n    return string \ndef clean_word_file(file_path): \n    '''\n    Write a function to clean the given string file and return it \n    '''\n    #Replace the double dashes with single dashes \n    string = replace_dashes(string) \n    #Replace the punctuation with spaces \n    string = remove_punctuation(string) \n    #Capitalize the first word \n    string = capitalize_first(string) \n    #Remove the apostrophes \n    string = re.sub(\"'\", \" \", string) \n    #Capitalize the second word \n    string = string.capitalize() \n    #Remove the spaces at the end of the string \n    string = re.sub(\" +\", \" \", string) \n    #Remove the double dashes \n    string = re.sub(\"--\", \" \", string) \n    #Remove the punctuation at the start and end of the string \n    string = re.sub(\"[^a-zA-Z]\", \" \", string) \n    #Capitalize the third word \n    string = string.capitalize() \n    #Remove the whitespaces at the end of the string \n    string = re.sub(\" +\", \" \", string) \n    #Replace the double dashes with single dashes \n    string = replace_dashes(string) \n    return string \ndef clean_stop_word(string): \n    '''\n    Write a function to clean the given string and return it \n    '''\n    #Remove the special characters \n    string = re.sub(\"[^a-zA-Z]\", \" \", string) \n    #Remove the apostrophes \n    string = re.sub(\"'\", \" \", string) \n    #Capitalize the first word \n    string = string.capitalize() \n    #Remove the whitespaces at the end of the string \n    string = re.sub(\" +\", \" \", string) \n    #Capitalize the second word \n    string = string.capitalize() \n    #Remove the special characters \n    string = re.sub(\"[^a-zA-Z]\", \" \", string) \n    return string \ndef clean_file(file_path): \n    '''\n    Write a function to clean the given string and return it \n    '''\n    #Read the file and clean it \n    with open(file_path, 'r') as file: \n        string = file.read() \n        string = re.sub(\"[^a-zA-Z]\", \" \", string) \n        string = re.sub(\"'\", \" \", string) \n        string = re.sub(\"[^a-zA-Z]+\", \" \", string) \n        return string \ndef check_file(file_path): \n    '''\n    Write a function to check whether the given file is a stop word or not \n    '''\n    #Read the file and clean it \n    with open(file_path, 'r') as file: \n        string = file.read() \n        string = replace_dashes(string) \n        string = replace_dashes(string) \n        string = remove_punctuation(string) \n        string = replace_dashes(string) \n        string = remove_punctuation(string) \n        string = clean_word(string) \n        string = clean_word(string) \n        string = clean_word_file(file_path) \n        string = clean_stop_word(string) \n        #Check whether the given string is a stop word or not \n        return string \ndef find_word(file_path): \n    '''\n    Write a function to find the word which is the most frequent \n    '''\n    #Read the file and clean it \n    with open(file_path, 'r') as file: \n        string = file.read() \n        string = remove_punctuation(string) \n        string = replace_dashes(string) \n        string = replace_dashes(string) \n        string = remove_punctuation(string) \n        string = replace_dashes(string) \n        string = remove_punctuation(string) \n        string = clean_word(string) \n        string = clean_word(string) \n        string = clean_file(file_path) \n        string = check_file(file_path) \n        string = string.split(\" \") \n        string = sorted(string, key = lambda x: len(x), reverse = True) \n        string = string[0] \n        return string \ndef get_most_freq(file_path): \n    '''\n    Write a function to get the word which is the most frequent \n    '''\n    #Read the file and clean it \n    with open(file_path, 'r') as file: \n        string = file.read() \n        string = remove_punctuation(string) \n        string = replace_dashes(string) \n        string = replace_dashes(string) \n        string = remove_punctuation(string) \n        string = replace_dashes(string) \n        string = remove_punctuation(string) \n        string = replace_dashes(string) \n        string = remove_punctuation(string) \n        string = clean_word(string) \n        string = clean_word(string) \n        string = clean_file(file_path) \n        string = check_file(file_path) \n        string = string.split(\" \") \n        string = sorted(string, key = lambda x: len(x), reverse = True) \n        string = string[0] \n        return string \ndef get_tf(word"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1 or n==0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 2:\n        return n\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    return n*geometric_sum(n-1)\nprint(geometric_sum(7))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 0: \n        raise ValueError(\"Invalid number\")\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    sum = 0\n    while(True):\n        num = n / 10\n        count += 1\n        sum += num\n        if sum == n:\n            break\n    return count\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index_of_smallest_triangular_number=0\n    i=2\n    while (i*i<=n):\n        if(n%i==0):\n            if(n%(i*i)==0):\n                return i\n        i+=1\n    return index_of_smallest_triangular_number\n    \ndef find_NextIndex(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index_of_smallest_triangular_number=0\n    i=2\n    while (i*i<=n):\n        if(n%i==0):\n            if(n%(i*i)==0):\n                return i\n        i+=1\n    return index_of_smallest_triangular_number\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    assert n>=0,\"n must be a positive number greater than 0\"\n    if n<=0:\n        raise ValueError(\"n must be a positive number greater than 0\")\n    s = int(math.sqrt(n))\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    elif n==5:\n        return 4\n    elif n==6:\n        return 5\n    elif n==7:\n        return 6\n    elif n==8:\n        return 7\n    elif n==9:\n        return 8\n    elif n==10:\n        return 9\n    elif n==11:\n        return 10\n    elif n==12:\n        return 11\n    else:\n        a = int(math.sqrt(n))\n        if n%a == 0:\n            return -1\n        else:\n            return int(math.sqrt(n)//a)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 10:\n        return n\n    # n is a number from 1 to 9\n    for i in range(1,10):\n        if n % i == 0:\n            n = n / i\n            break\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Algorithm\n    # Note: if a is the smallest triangular number, then\n    # the answer is the index of it.\n    # Example: 2, 8, 12, 24,...\n    # S = list(range(1, n))\n    # S.sort(reverse=True)\n    # return S[math.ceil(n/2)]\n    return math.ceil(n/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = n\n    while (num > 0):\n        index = math.sqrt(num)\n        if (index == 0):\n            print(\"{} is a triangular number\".format(num))\n            break\n        elif (index % 2 == 0):\n            print(\"{} is not a triangular number\".format(num))\n            break\n        else:\n            print(\"{} is a triangular number\".format(num))\n            break\n        num = int(num / 2)\n    return\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for x in range(n+1):\n        p = n * (n+1)\n        if p%10 == 1:\n            return int(p/10)\n        elif p%10 == 3:\n            return int(p/10) - 1\n        elif p%10 == 5:\n            return int(p/10) - 2\n        elif p%10 == 7:\n            return int(p/10) - 3\n        elif p%10 == 9:\n            return int(p/10) - 4\n        elif p%10 == 11:\n            return int(p/10) - 5\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def check_for_triangular_number(n):\n        '''\n        Initialize triangular number to 0 and find the index of smallest triangular number.\n        '''\n        if n == 0:\n            return 0\n        triangular_number = 1\n        while n > triangular_number:\n            triangular_number += 1\n            if n % triangular_number == 0:\n                return 1\n            else:\n                pass\n        return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sum = 0\n    count = 0\n    while n > 0:\n        sum += n % 10\n        n = math.floor(n / 10)\n    return sum - math.log10(n)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Write your code here\n    tup = []\n    for i in test_tup:\n        tup.append(i)\n    return dict(zip(tup,tup))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)):\n        dict[test_tup[i][0]] = test_tup[i][1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in test_tup:\n        test_dict[i] = 0\n    for i in test_tup:\n        test_dict[i] = test_dict[i] + 1\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    my_dict['key'] = test_tup[0]\n    my_dict['value'] = test_tup[1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup = tuple(test_tup)\n    result = {}\n    for i in tup:\n        result[i] = None\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    for i in range(len(test_tup)):\n        res[i] = test_tup[i]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)):\n        dict_tup[test_tup[i][0]] = test_tup[i][1]\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create empty dictionary\n    dictionary = {}\n    # iterate over elements\n    for i in test_tup:\n        # convert each element to a key\n        dictionary[i] = test_tup.index(i)\n    return dictionary\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #first define two lists\n    char_list = []\n    for i in range(len(s)) :\n        char_list.append(s[i])\n    for i in range(len(s)) :\n        char_list.append(s[i])\n    #print(char_list)\n    #print(type(char_list))\n    same = 0\n    #set a counter\n    char_counter = 0\n    #loop through the list\n    for i in char_list :\n        #print(i)\n        #print(type(i))\n        char_counter += 1\n        if i!= same :\n            print(char_list[char_counter-1])\n            print(i)\n            print(type(i))\n            same = i\n            char_counter = 0\n    print(char_list[char_counter-1])\n    print(i)\n    print(type(i))\n    #return the same character\n    return char_list[char_counter-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Hint: you can look at the count of how many each character is in the string.\n    #Count the number of each character from the string.\n    count = [0] * 256\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i == i :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # code goes here\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (s == s[::-1])\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    import string\n    return all(map(str.isalpha,s))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i not in character_set:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    import re\n    if type(s)!= str :\n        return False\n    if re.search(r'[^A-Za-z_]+',s)!= None :\n        return False\n    if re.search(r'[^A-Za-z_0-9]+',s)!= None :\n        return False\n    return True\n    \n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    cnt=0\n    for i in s:\n        if i==' ':\n            cnt+=1\n    if cnt>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    x1 = side / 2\n    x2 = side / 2\n    x3 = side / 2\n    x4 = side / 2\n    x5 = side / 2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # area of tetrahedron\n    a = side * (side - 1) / 2\n    print('The area of the tetrahedron with side length:', a, 'cm^2')\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_sqr = math.pow(side,2)\n    return side_sqr * math.sqrt(3)/4 * math.sqrt(5)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side / 2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Validating the input\n    if side == 'I':\n        print('It is an I-tetrahedron.')\n    elif side == 'V':\n        print('It is a V-tetrahedron.')\n    else:\n        print('It is an E-tetrahedron.')\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 6 * side\n    print(\"The area of the tetrahedron with sides of: \", side, \" is\", area)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * math.sqrt(3)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        side = 1.0\n    else:\n        side = side / 2.0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1.0\n    if side == 1:\n        return 1.0\n    elif side == 2:\n        return 6.0\n    elif side == 3:\n        return 12.0\n    elif side == 4:\n        return 24.0\n    elif side == 5:\n        return 48.0\n    elif side == 6:\n        return 96.0\n    elif side == 7:\n        return 192.0\n    elif side == 8:\n        return 384.0\n    elif side == 9:\n        return 544.0\n    elif side == 10:\n        return 768.0\n    elif side == 11:\n        return 576.0\n    elif side == 12:\n        return 768.0\n    elif side == 13:\n        return 768.0\n    elif side == 14:\n        return 768.0\n    elif side == 15:\n        return 768.0\n    elif side == 16:\n        return 768.0\n    elif side == 17:\n        return 768.0\n    elif side == 18:\n        return 768.0\n    elif side == 19:\n        return 768.0\n    elif side == 20:\n        return 768.0\n    elif side == 21:\n        return 768.0\n    elif side == 22:\n        return 768.0\n    elif side == 23:\n        return 768.0\n    elif side == 24:\n        return 768.0\n    elif side == 25:\n        return 768.0\n    elif side == 26:\n        return 768.0\n    elif side == 27:\n        return 768.0\n    elif side == 28:\n        return 768.0\n    elif side == 29:\n        return 768.0\n    elif side == 30:\n        return 768.0\n    elif side == 31:\n        return 768.0\n    elif side == 32:\n        return 768.0\n    elif side == 33:\n        return 768.0\n    elif side == 34:\n        return 768.0\n    elif side == 35:\n        return 768.0\n    elif side == 36:\n        return 768.0\n    elif side == 37:\n        return 768.0\n    elif side == 38:\n        return 768.0\n    elif side == 39:\n        return 768.0\n    elif side == 40:\n        return 768.0\n    elif side == 41:\n        return 768.0\n    elif side == 42:\n        return 768.0\n    elif side == 43:\n        return 768.0\n    elif side == 44:\n        return 768.0\n    elif side == 45:\n        return 768.0\n    elif side == 46:\n        return 768.0\n    elif side == 47:\n        return 768.0\n    elif side == 48:\n        return 768.0\n    elif side == 49:\n        return 768.0\n    elif side == 50:\n        return 768.0\n    elif side == 51:\n        return 768.0\n    elif side == 52:\n        return 768.0\n    elif side == 53:\n        return 768.0\n    elif side == 54:\n        return 768.0\n    elif side == 55:\n        return 768.0\n    elif side == 56:\n        return 768.0\n    elif side == 57:\n        return 768.0\n    elif side == 58:\n        return 768.0\n    elif side == 59:\n        return 768.0\n    elif side == 60:\n        return 768.0\n    elif side == 61:\n        return 768.0\n    elif side == 62:\n        return 768.0\n    elif side == 63:\n        return 768.0\n    elif side == 64:\n        return 768.0\n    elif side == 65:\n        return 768.0\n    elif side == 66:\n        return 768.0\n    elif side == 67:\n        return 768.0\n    elif side == 68:\n        return 768.0\n    elif side == 69:\n        return 768.0\n    elif side == 70:\n        return 768.0\n    elif side == 71:\n        return 768.0\n    elif side == 72:\n        return 768.0\n    elif side == 73:\n        return 768.0\n    elif side == 74:\n        return 768.0\n    elif side == 75:\n        return 768.0\n    elif side == 76:\n        return 768.0\n    elif side == 77:\n        return 768.0\n    elif side == 78:\n        return 768.0\n    elif side == 79:\n        return 768.0\n    elif side == 80:\n        return 768.0\n    elif side == 81:\n        return 768.0\n    elif side == 82:\n        return 768.0\n    elif side == 83:\n        return 768.0\n    elif side == 84:\n        return 768.0\n    elif side == 85:\n        return 768.0\n    elif side == 86:\n        return 768.0\n    elif side == 87:\n        return 768.0\n    elif side == 88:\n        return 768.0\n    elif side == 89:\n        return 768.0\n    elif side == 90:\n        return 768.0\n    elif side == 91:\n        return 768.0\n    elif side == 92:\n        return 768.0\n    elif side == 93:\n        return 768.0\n    elif side == 94:\n        return 768.0\n    elif side == 95:\n        return 768.0\n    elif side == 96:\n        return 768.0\n    elif side == 97:\n        return 768.0\n    elif side == 98:\n        return 768.0\n    elif side == 99:\n        return 768.0\n    elif side == 100:\n        return 768.0\n    elif side == 101:\n        return 768.0\n    elif side == 102:\n        return 768.0\n    elif side == 103:\n        return 768.0\n    elif side == 104:\n        return 768.0\n    elif side == 105:\n        return 768.0\n    elif side == 106:\n        return 768.0\n    elif side == 107:\n        return 768.0\n    elif side == 108:\n        return 768.0\n    elif side == 109:\n        return 768.0\n    elif side == 110:\n        return 768.0\n    elif side == 111:\n        return 768.0\n    elif side == 112:\n        return 768.0\n    elif side == 113:\n        return 768.0\n    elif side == 114:\n        return 768.0\n    elif side == 115:\n        return 768.0\n    elif side == 116:\n        return 768.0\n    elif side == 117:\n        return 768.0\n    elif side == 118:\n        return 768.0\n    elif side == 119:\n        return 768.0\n    elif side == 120:\n        return 768.0\n    elif side == 121:\n        return 768.0\n    elif side == 122:\n        return 768.0\n    elif side == 123:\n        return 768.0\n    elif side == 124:\n        return 768.0\n    elif side == 125:\n        return 768.0\n    elif side == 126:\n        return 768.0\n    elif side == 127:\n        return 768.0\n    elif side == 128:\n        return 768.0\n    elif side == 129:\n        return 768.0\n    elif side == 130:\n        return 768.0\n    elif side == 131:\n        return 768.0\n    elif side == 132:\n        return 768.0\n    elif side == 133:\n        return 768.0\n    elif side == 134:\n        return 768.0\n    elif side == 135:\n        return 768.0\n    elif side == 136:\n        return 768.0\n    elif side == 137:\n        return 768.0\n    elif side == 138:\n        return 768.0\n    elif side == 139:\n        return 768.0\n    elif side == 140:\n        return 768.0\n    elif side == 141:\n        return 768.0\n    elif side == 142:\n        return 768.0\n    elif side == 143:\n        return 76"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < 2:\n        return list\n    else:\n        return list[1:] + list[:1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    i = length - m\n    j = m - 1\n    while i >= 0:\n        list[i+j] = list[i]\n        i -= 1\n        j -= 1\n    j = m - 1\n    while j >= 0:\n        list[j] = list[j+m-1]\n        j -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    k = l - 1\n    while k >= 0:\n        if list[k] < list[k + 1]:\n            list[k], list[k + 1] = list[k + 1], list[k]\n        k -= 1\n    for i in range(m):\n        list[i], list[m] = list[m], list[i]\n    print(list)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[::-1]\n    m = m % len(list)\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n-m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    print(list)\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list[i], list[0] = list[0], list[i]\n    print(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    # Function to rotate a list\n    def rotate_list(ls):\n        # Create a new list with the specified number\n        # of elements in it\n        new_ls = []\n        for i in range(len(ls)):\n            # Add new elements to new list\n            new_ls.append(ls[len(ls)-1-i])\n        \n        # Return the new list\n        return new_ls\n    \n    # Return the list after rotating\n    return rotate_list(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    if(l<=1):\n        return list\n    i = (l-2)//2\n    l_tmp = list[i]\n    list[i] = list[l-1]\n    list[l-1] = l_tmp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    \n    for i in range(len(list) - 1, -1, -1):\n        new_list.append(list[i])\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return (test_tup is None) or (len(test_tup) == 0)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    tup_list = list(test_tup)\n    tup_list.append(None)\n    return tuple(tup_list)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    elif isinstance(test_tup, tuple):\n        return any(check_none(value) for value in test_tup)\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return True\n    else:\n        return False\n        \ndef check_empty(test_tup):\n    '''\n    Write a function to check if the given tuple has any empty or not.\n    '''\n    if test_tup[0] == () or test_tup[0] == None:\n        return True\n    else:\n        return False\n        \ndef check_tuple(test_tup):\n    '''\n    Write a function to check if the given tuple has any empty or not.\n    '''\n    if test_tup[0] == () or test_tup[0] == None:\n        return True\n    else:\n        return False\n        \ndef check_list(test_tup):\n    '''\n    Write a function to check if the given tuple has any empty or not.\n    '''\n    if test_tup[0] == () or test_tup[0] == None:\n        return True\n    else:\n        return False\n        \ndef is_valid_input(test_tup):\n    '''\n    Write a function to check if the tuple is valid or not.\n    '''\n    for el in test_tup:\n        if not is_valid_input(el):\n            return False\n    return True\n    \ndef to_check_digit(num):\n    '''\n    Write a function to check the check digit of a number.\n    '''\n    if isinstance(num, int):\n        if num % 10 == 1 and num >= 0:\n            return check_digit(num//10)\n        else:\n            return \"Your number is not a valid number.\"\n    else:\n        return \"Your number must be a number.\"\n        \ndef check_digit(num):\n    '''\n    Write a function to check the check digit of a number.\n    '''\n    dig = 0\n    if num >= 1 and num <= 9:\n        dig = num - 1\n    elif num >= 10 and num <= 99:\n        dig = num - 10\n    elif num >= 100 and num <= 999:\n        dig = num - 100\n    else:\n        dig = \"Your number is not a valid number.\"\n    return dig\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        test_tup[0]\n        test_tup[0] = None\n    except IndexError:\n        return \"tuple has no value\"\n    else:\n        return \"tuple has no value\"\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        for i in test_tup:\n            if i is not None:\n                return False\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    digits_within_range = [i for i in range(1, 10) if startnum%i==0 and endnum%i==0]\n    \n    return digits_within_range\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum < startnum:\n        return\n    divisor = 2\n    for num in range(startnum, endnum + 1):\n        if not (num % divisor):\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Find the range\n    low, high = 0, 10**9 + 1\n    while low <= high:\n        mid = low + (high - low)//2\n        # Check if the number is divisible by every digit in the range\n        if mid == startnum and mid == endnum:\n            return ''.join([str(x) for x in range(10)])\n        elif mid == startnum:\n            if endnum - mid == 1:\n                return str(mid)\n            else:\n                return '{}-{}'.format(str(mid), str(endnum - mid))\n        elif mid == endnum:\n            if startnum - mid == 1:\n                return str(mid)\n            else:\n                return '{}-{}'.format(str(mid), str(startnum - mid))\n        # If the mid value is smaller than the mid value\n        elif mid < mid:\n            low = mid\n        # If the mid value is larger than the mid value\n        else:\n            high = mid\n    return \"0\"\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisibles = []\n    for x in range(startnum, endnum+1):\n        if x % 10 == 0:\n            divisibles.append(x)\n    return divisibles\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #Finds all numbers divisible by the digits from startnum to endnum (inclusive)\n    digits = []\n    for i in range(startnum, endnum + 1):\n        if (i % 10 == 0):\n            digits.append(i)\n    #Returns the list of numbers divisible by every digit in the digits list\n    return digits\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #create a list of all numbers from startnum to endnum inclusive\n    numbers=range(startnum,endnum+1)\n    #create a dictionary to store the digits of each number\n    digits_dict={i:int(str(i)[0]) for i in numbers}\n    #create a set to hold all numbers\n    numbers_set=set(numbers)\n    #create an iterator for all digits\n    digits_set=iter(digits_dict.values())\n    #create a set to hold all numbers with digits\n    all_digits=numbers_set&digits_set\n    #add all numbers to a new set\n    new_set=all_digits-digits_set\n    #create a list to store all the new set\n    new_list=list(new_set)\n    #create a function to return the last number of the set\n    def last_digit(n):\n        return n%10\n    #return the last number\n    return new_list[-1]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible = []\n    for i in range(startnum, endnum+1):\n        i = str(i)\n        if int(i) % 10 == 0:\n            divisible.append(int(i))\n    return divisible\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum < startnum:\n        return None\n    for i in range(startnum, endnum+1):\n        if is_prime(i):\n            yield i\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num):\n        # convert num to a string\n        num = str(num)\n        # loop through digits in num\n        for digit in num:\n            # check if the digit is divisible by any digits in num\n            if int(digit) % 10 == 0:\n                return True\n        # if the number is divisible by all digits in num, return True\n        return False\n    \n    # function to find if the divisibility is valid\n    def is_valid_divisibility(startnum, endnum, divisibility):\n        # the range of the numbers we are trying to find is the range of the numbers\n        # divisibility is the number of the divisibility\n        # for example: if divisibility is 3, then we want to find the numbers divisible by 3,\n        # since we start at 3, we want to find 2, since we start at 3, we want to find 1, etc\n        # so the range of the numbers is [3, 4]\n        # this means it will return all the numbers divisible by 3 and 4\n        if divisibility == 0:\n            return startnum <= endnum\n        # we will check if the number starts with any digits and\n        # then we will check that each digit is a divisible by the same number\n        # and if it is, we return True\n        elif startnum[0] == endnum[0]:\n            return is_divisible(int(startnum[1])) and is_divisible(int(endnum[1]))\n        else:\n            # we will check if the number starts with any digits and\n            # then we will check that each digit is a divisible by the same number\n            # and if it is, we return True\n            if startnum[0] == endnum[0]:\n                return is_divisible(int(startnum[1])) and is_divisible(int(endnum[1]))\n            else:\n                return False\n    # the input value is the range of the numbers we want to check\n    # the divisibility is the range of the numbers\n    # and is 0 by default\n    # so we will return the range of the numbers as [3, 4]\n    # if it is 0, it will return the range of the numbers as [0, 1]\n    return is_valid_divisibility(startnum, endnum, divisibility)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    list_of_numbers = []\n    \n    for x in range(startnum, endnum):\n        list_of_numbers.append(x)\n        \n    for y in range(1, 10):\n        for z in range(y, 10):\n            if z in list_of_numbers:\n                print(z, end=' ')\n            else:\n                print(z, end=' ')\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r > 0) and (a >= 0) and (a <= 360):\n        sector = r*a*math.sin(math.radians(a))\n        print(sector)\n    else:\n        print('invalid angle')\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r > 0) and (a >= 0) and (a <= 360):\n        sector = r*a*math.cos(math.radians(a))\n        print(sector)\n    else:\n        print('invalid angle')\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r <= 0.0:\n        print('invalid radius')\n        return None\n    elif a <= 0.0:\n        print('invalid angle')\n        return None\n    elif r*r + a*a <= 1.0:\n        return r*r*a\n    elif r*r + a*a > 1.0:\n        if r*r + a*a > 1.0:\n            return r*r*a*math.pi/180\n        else:\n            return (r*r*a + r*r*(a/a))*math.pi\n    elif r*r + a*a > 1.0:\n        return r*r*a*math.pi\n    else:\n        return r*r*a*math.pi*math.cos(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.sin(math.radians(a))\ndef sector_length(r,a):\n    '''\n    Write a function to find length of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.cos(math.radians(a))\ndef sector_angle(r,a):\n    '''\n    Write a function to find angle of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.degrees(math.atan(math.sqrt(a)))\ndef sectors_as_polygon(r,a):\n    '''\n    Write a function to calculate the polygon with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_as_polygon(r,a):\n    '''\n    Write a function to calculate the polygon with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_as_sector(r,a):\n    '''\n    Write a function to calculate the sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_as_sector(r,a):\n    '''\n    Write a function to calculate the sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_as_sector(r,a):\n    '''\n    Write a function to calculate the sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_as_sector_polygon(r,a):\n    '''\n    Write a function to calculate the polygon sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_as_sector_polygon(r,a):\n    '''\n    Write a function to calculate the polygon sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_polygon_as_sector_polygon(r,a):\n    '''\n    Write a function to calculate the sector polygon sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_polygon_as_sector_polygon(r,a):\n    '''\n    Write a function to calculate the sector polygon sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_sector_as_sector(r,a):\n    '''\n    Write a function to calculate the sector sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_sector_as_sector(r,a):\n    '''\n    Write a function to calculate the sector sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_sector_as_sector_polygon(r,a):\n    '''\n    Write a function to calculate the sector sector polygon sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return r*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_sector_as_sector_polygon(r,a):\n    '''\n    Write a function to calculate the sector sector polygon sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_sector_as_sector(r,a):\n    '''\n    Write a function to calculate the sector sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:\n        return a*math.sin(math.radians(a)),math.cos(math.radians(a))\ndef sector_polygon_sector_polygon(r,a):\n    '''\n    Write a function to calculate the sector polygon sector polygon sector with specified radius and angle. It should return None if the angle is larger than 360 degrees.\n    '''\n    if r > math.sqrt(a):\n        return None\n    elif r < math.sqrt(a):\n        return None\n    else:"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    area = None\n    angle = None\n    # Calculate the area and assign the result to area\n    area = r*(math.cos(a))\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return area, angle\ndef sector_radius(r,a):\n    '''\n    Write a function to calculate the radius of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_radius = None\n    angle = None\n    # Calculate the radius and assign it to sector_radius\n    sector_radius = r*math.cos(a)\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_radius, angle\ndef sector_height(r,a):\n    '''\n    Write a function to calculate the height of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_height = None\n    angle = None\n    # Calculate the height and assign it to sector_height\n    sector_height = (math.sin(a)*r)/(math.cos(a))\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_height, angle\ndef sector_perimeter(r,a):\n    '''\n    Write a function to calculate the perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_perimeter = None\n    angle = None\n    # Calculate the perimeter and assign it to sector_perimeter\n    sector_perimeter = r*(math.sin(a))\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_perimeter, angle\ndef sector_area(r,a):\n    '''\n    Write a function to calculate the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_area = None\n    angle = None\n    # Calculate the area and assign it to sector_area\n    sector_area = r*math.sin(a)\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_area, angle\ndef sector_radius(r,a):\n    '''\n    Write a function to calculate the radius of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_radius = None\n    angle = None\n    # Calculate the radius and assign it to sector_radius\n    sector_radius = math.sin(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_radius, angle\ndef sector_height(r,a):\n    '''\n    Write a function to calculate the height of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_height = None\n    angle = None\n    # Calculate the height and assign it to sector_height\n    sector_height = math.cos(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_height, angle\ndef sector_perimeter(r,a):\n    '''\n    Write a function to calculate the perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_perimeter = None\n    angle = None\n    # Calculate the perimeter and assign it to sector_perimeter\n    sector_perimeter = math.sin(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_perimeter, angle\ndef sector_area(r,a):\n    '''\n    Write a function to calculate the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_area = None\n    angle = None\n    # Calculate the area and assign it to sector_area\n    sector_area = r*math.cos(a)\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_area, angle\ndef sector_radius(r,a):\n    '''\n    Write a function to calculate the radius of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_radius = None\n    angle = None\n    # Calculate the radius and assign it to sector_radius\n    sector_radius = math.cos(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_radius, angle\ndef sector_height(r,a):\n    '''\n    Write a function to calculate the height of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_height = None\n    angle = None\n    # Calculate the height and assign it to sector_height\n    sector_height = math.sin(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_height, angle\ndef sector_perimeter(r,a):\n    '''\n    Write a function to calculate the perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_perimeter = None\n    angle = None\n    # Calculate the perimeter and assign it to sector_perimeter\n    sector_perimeter = math.sin(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_perimeter, angle\ndef sector_area(r,a):\n    '''\n    Write a function to calculate the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_area = None\n    angle = None\n    # Calculate the area and assign it to sector_area\n    sector_area = math.cos(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_area, angle\ndef sector_radius(r,a):\n    '''\n    Write a function to calculate the radius of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare variables to store the values\n    sector_radius = None\n    angle = None\n    # Calculate the radius and assign it to sector_radius\n    sector_radius = math.sin(a)*r\n    # Calculate the angle and assign it to angle\n    angle = (a*math.pi)//180\n    # Return the result\n    return sector_radius, angle\ndef sector_height(r,a):\n    '''\n    Write a function to calculate the height of a sector. The function takes the radius and angle a"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    rad = math.radians(r)\n    an = math.atan(a)\n    return ((2 * math.sin(rad) * math.sin(an) * math.cos(rad)) / r)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a>180 or a<0:\n        return None\n    if a==0:\n        return 0\n    if r==0:\n        return 0\n    if a%360==0:\n        return math.sqrt(r*r-a*a)\n    elif a==360:\n        return (r*r)/(a*(a-360))\n    else:\n        t1=sector_area(r,a-360)\n        t2=sector_area(r,a-90)\n        t3=sector_area(r,a+90)\n        t4=sector_area(r,a+360)\n        if t1==None or t2==None or t3==None or t4==None:\n            return None\n        return (t1+t2+t3+t4)/2\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r < 0:\n        return None\n    if (math.tan(math.radians(a))) <= r/a:\n        return r\n    else:\n        return sector_area(r,math.tan(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0.5*math.pi or a > 2*math.pi:\n        return None\n    elif a <= math.pi/4 or a > math.pi/2:\n        return r*math.sin(a)\n    elif a <= math.pi:\n        return r*math.cos(a)\n    else:\n        return r*(math.sin(a))*(math.cos(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > a:\n        print('ERROR: Invalid angle!')\n        return None\n    if a == 360:\n        print('WARNING: angle is 360 degrees, this is not a sector.')\n        return None\n    if a == 0:\n        print('ERROR: angle is zero degrees, this is not a sector.')\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    radians=math.radians(a)\n    #Makes the sector of a circle\n    x=(1/math.cos(radians))*math.cos(radians)*r\n    y=(1/math.cos(radians))*math.sin(radians)*r\n    return None\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    x_len = len(X)\n    y_len = len(Y)\n    z_len = len(Z)\n    #1) Starting with the starting index \n    lcs_i = [0]*(x_len+1)\n    #2) The ending index of the LCS\n    lcs_i[0] = 0\n    #3) lcs_i[i] = max(lcs_i[i-1], lcs_i[i-2], lcs_i[i-3]) \n    #for i in range(1, x_len + 1):\n    for i in range(1, y_len + 1):\n        for j in range(1, z_len + 1):\n            if X[i-1] == Z[j-1]:\n                lcs_i[i] = lcs_i[i-1] + 1\n            elif Y[j-1] == Z[i-1]:\n                lcs_i[i] = lcs_i[i-1]\n            else:\n                lcs_i[i] = max(lcs_i[i-1], lcs_i[i-2], lcs_i[i-3])\n    return lcs_i[x_len+y_len+z_len]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # X = [ \"abcd\", \"bcd\", \"cdx\" ]\n    # Y = [ \"adf\", \"bef\" ]\n    # Z = [ \"afd\", \"bef\" ]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n        return 0\n    if X[0] == Y[0] and Y[0] == Z[0]:\n        return 1\n    if len(X) > len(Y) or len(Y) > len(Z) or len(Z) > len(X):\n        return 0\n    if X[0] == Z[0] and Y[0] == Z[0]:\n        return 1\n    if len(X) < len(Y) or len(Y) < len(Z) or len(Z) < len(X):\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_length, Y_length, Z_length = len(X), len(Y), len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l1 = len(X)\n    l2 = len(Y)\n    l3 = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    L = [[-1 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = m + n - 1\n    if (l == 0): \n        return 0\n    if (l == 1): \n        return 1\n    \n    dp = [[0] * (l + 1) for i in range(l + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                dp[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n    return dp[m][n] \n \n \ndef lcs_of_four(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = m + n - 1\n    if (l == 0): \n        return 0\n    if (l == 1): \n        return 1\n    \n    dp = [[0] * (l + 1) for i in range(l + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                dp[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n    return dp[m][n] \n \n \ndef lcs_of_five(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given five string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-five-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = m + n - 1\n    if (l == 0): \n        return 0\n    if (l == 1): \n        return 1\n    \n    dp = [[0] * (l + 1) for i in range(l + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                dp[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n    return dp[m][n] \n \n \ndef lcs_of_six(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given six string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-six-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = m + n - 1\n    if (l == 0): \n        return 0\n    if (l == 1): \n        return 1\n    \n    dp = [[0] * (l + 1) for i in range(l + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                dp[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n    return dp[m][n] \n \n \ndef lcs_of_seven(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given seven string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-seven-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = m + n - 1\n    if (l == 0): \n        return 0\n    if (l == 1): \n        return 1\n    \n    dp = [[0] * (l + 1) for i in range(l + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                dp[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n    return dp[m][n] \n \n \ndef lcs_of_eight(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given eight string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-eight-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = m + n - 1\n    if (l == 0): \n        return 0\n    if (l == 1): \n        return 1\n    \n    dp = [[0] * (l + 1) for i in range(l + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                dp[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n    return dp[m][n] \n \n \ndef lcs_of_nine(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given nine string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-nine-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = m + n - 1\n    if (l == 0): \n        return 0\n    if (l == 1): \n        return 1\n    \n    dp = [[0] * (l + 1) for i in range(l + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                dp[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n    return dp[m][n] \n \n \ndef lcs_of_ten(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given ten string sequence. https://www.geeksforgeek"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = max(X, Y, Z)\n    n = max(X, Y, Z)\n    f = [[0 for x in range(m+1)] for y in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Z[j-1]:\n                f[i][j] = f[i-1][j-1] + 1\n            else:\n                f[i][j] = max(f[i-1][j], f[i][j-1])\n    return f[n][m]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = [[0 for i in range(len(X) + 1)] for j in range(len(Y) + 1)]\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n    return lcs[len(X)][len(Y)] \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == len(Y) == len(Z):\n        if X == Y == Z:\n            return len(X)\n        else:\n            return 0\n    elif len(X) > len(Y) > len(Z):\n        if Z[:len(X)] == X:\n            return len(X) + lcs_of_three(Z[len(X):], Y, Z[len(X):])\n        elif Z[:len(Y)] == Y:\n            return len(Y) + lcs_of_three(X, Z[len(Y):], Z[:len(Y)])\n        elif Z[:len(Z)] == Z:\n            return len(Z) + lcs_of_three(X, Y, Z[len(Z):])\n    else:\n        if Z[:len(Z)] == Z:\n            return len(Z) + lcs_of_three(X, X, Z[len(Z):])\n        elif Z[:len(Y)] == Y:\n            return len(Y) + lcs_of_three(X, X, Z[:len(Y)])\n        elif Z[:len(Z)] == Z:\n            return len(Z) + lcs_of_three(X, Y, Z[:len(Z)])\n        \ndef lcs_of_four(X, Y, Z, W): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    if len(X) == len(Y) == len(Z) == len(W):\n        if X == Y == W:\n            return len(X)\n        elif W == Z:\n            return len(W)\n        elif W[:len(X)] == X:\n            return len(X) + lcs_of_four(W[len(X):], Y, W[:len(X)], Z[len(X):])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[len(W):], W[:len(W)], Z[:len(W)])\n    elif len(X) > len(Y) > len(Z) > len(W):\n        if W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, Y, W[len(W):], Z[:len(W)])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[:len(W)], W[len(W):], Z[:len(W)])\n    elif len(X) < len(Y) < len(Z) < len(W):\n        if W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[len(W):], W[:len(W)], Z[:len(W)])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[:len(W)], W[len(W):], Z[:len(W)])\n    elif len(Y) < len(Z) < len(W):\n        if W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, Y, W[:len(W)], Z[:len(W)])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[:len(W)], W[len(W):], Z[:len(W)])\n    elif len(Y) > len(Z) > len(W):\n        if W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, Y, W[:len(W)], Z[:len(W)])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[:len(W)], W[len(W):], Z[:len(W)])\n    elif len(Z) < len(W):\n        if W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, Y, W[:len(W)], Z[:len(W)])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[:len(W)], W[len(W):], Z[:len(W)])\n    elif len(Z) > len(W):\n        if W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, Y, W[:len(W)], Z[:len(W)])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[:len(W)], W[len(W):], Z[:len(W)])\n    elif len(Z) < len(W):\n        if W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, Y, W[:len(W)], Z[:len(W)])\n        elif W[:len(W)] == W:\n            return len(W) + lcs_of_four(X, W[:len(W)], W[len(W):], Z[:len(W)])\n    return 0\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile('^\\w+[ \\-]+\\w+$')\n    return re.sub(pattern,'', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str1 = \"\"\n    for i in str1:\n        if i.istitle() == False:\n            if i.isupper() == True:\n                new_str1 += \" \" + i.lower() + \" \"\n            else:\n                new_str1 += i + \" \"\n        else:\n            new_str1 += i\n    return new_str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.lower()\n    str1=str1.replace(str1.split()[0], \" \")\n    str1=str1.replace(str1.split()[0] + \" \", \" \")\n    return str1\ndef words_cleaning(text):\n    text=text.lower()\n    text=text.split()\n    text=text[:len(text)-1]\n    text=text[:len(text)-1]\n    text=capital_words_spaces(text)\n    text=text.split(\" \")\n    text=text[:len(text)-1]\n    text=text[:len(text)-1]\n    return text\ndef make_capital_words(text):\n    text=capital_words_spaces(text)\n    text=text.split()\n    text=text[:len(text)-1]\n    text=text[:len(text)-1]\n    return text\ndef open_file(file):\n    return open(file,'r')\ndef add_newline(file):\n    with open(file,'r') as f:\n        newfile=open(file+'_new','w')\n        newfile.write(file[:len(file)-1])\ndef remove_newline(file):\n    with open(file,'r') as f:\n        newfile=open(file+'_new','w')\n        newfile.write(\"\")\ndef remove_empty(file):\n    with open(file,'r') as f:\n        newfile=open(file+'_new','w')\n        newfile.write(\"\")\ndef remove_all_empty(file):\n    with open(file,'r') as f:\n        newfile=open(file+'_new','w')\n        newfile.write(\"\")\ndef remove_all_newline(file):\n    with open(file,'r') as f:\n        newfile=open(file+'_new','w')\n        newfile.write(\"\")\ndef remove_all_line(file):\n    with open(file,'r') as f:\n        newfile=open(file+'_new','w')\n        for i in range(1,len(f.readlines())):\n            if f.readline()==\"\":\n                newfile.write(\"\")\ndef remove_all_lines(file):\n    with open(file,'r') as f:\n        newfile=open(file+'_new','w')\n        for i in range(1,len(f.readlines())):\n            if f.readline()==\"\":\n                newfile.write(\"\")\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Code here\n    t = re.split('\\W', str1)\n    for i in range(len(t)):\n        for j in range(len(t[i])):\n            if t[i][j].isupper():\n                t[i] = t[i].upper()\n                t[i] = t[i] +''\n            else:\n                t[i] = t[i] +''\n    return''.join(t)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    lst = []\n    for word in str1.split():\n        if word[0].upper() in capital_words:\n            lst.append(word +'')\n        else:\n            lst.append(word +'')\n    return''.join(lst)\ndef capital_words_numbers(str1):\n    '''\n    Write a function that turns all the letters of a given string into numbers.\n    '''\n    lst = []\n    for word in str1.split():\n        lst.append(word[0].upper() + word[1:].replace('.',''))\n    return''.join(lst)\ndef letters_and_numbers(str1):\n    '''\n    This function is used to get the letters and numbers from a given string.\n    '''\n    lst = []\n    for word in str1.split():\n        if word[0].isalpha() and word[0] in string.digits:\n            lst.append(word +'')\n        else:\n            lst.append(word +'')\n    return''.join(lst)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    if str1 == '':\n        return ''\n    \n    temp_word = str1\n    temp_word = temp_word.replace(' ',' ')\n    temp_word = temp_word.replace('  ','')\n    \n    #print(temp_word)\n    \n    return temp_word\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_new = str1.split()\n    str1_new =''.join(str1_new)\n    return str1_new\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'^(\\w+)\\s+', r'\\1 ', str1, flags=re.MULTILINE)\ndef lower_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with lower case letters in a given string.\n    '''\n    return re.sub(r'^(\\w+)\\s+', r'\\1 ', str1, flags=re.MULTILINE)\ndef words_only(str1):\n    '''\n    Write a function to split a string into a list of words, ignoring special characters, without space.\n    '''\n    return re.findall(r'\\w+', str1)\ndef replace_special_char(str1):\n    '''\n    Write a function to replace special characters in a given string.\n    '''\n    return str1.replace('?', '.').replace(':', '-').replace('!', '!').replace('\"', '-').replace('$', '$')\ndef pig_latin(str1):\n    '''\n    Write a function to replace the spaces in a given string with 'ay' or 'ah'.\n    '''\n    return re.sub(r'\\s+', 'ay', str1)\ndef remove_punct(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef number_separated_words(str1):\n    '''\n    Write a function to split a string into a list of words, separating each word into digits, starting with the next word\n    '''\n    return re.findall(r'\\d+', str1)\ndef english_words(str1):\n    '''\n    Write a function to split a string into a list of words, splitting each word into separate words, starting with the next word\n    '''\n    return re.findall(r'\\w+', str1)\ndef remove_special_char(str1):\n    '''\n    Write a function to replace special characters in a given string.\n    '''\n    return str1.replace('?', '.').replace(':', '-').replace('!', '!').replace('\"', '-').replace('$', '$')\ndef pig_latin_special(str1):\n    '''\n    Write a function to replace the special characters in a given string.\n    '''\n    return str1.replace('.', '.').replace(',', ',').replace('!', '!').replace('?', '?').replace(':', ':').replace(';', ';')\ndef remove_punct_special(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.upper()\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1[0:i] +'' + str1[i:].upper() +'' + str1[i:]\n        elif str1[i].islower():\n            str1 = str1[0:i] +'' + str1[i:].lower() +'' + str1[i:]\n        elif str1[i].isspace():\n            str1 = str1[0:i] +'' +'' + str1[i:].strip() +'' + str1[i:]\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = ''\n    for word in str1.split():\n        if word[0]!= word[0].upper():\n            str2 += word[0] +''\n        else:\n            str2 += word[0]\n    return str2\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return []\n    # sort list in place\n    nums_str.sort(key=lambda x: (x[1],x[0]))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(i,len(nums_str)):\n            if nums_str[i] > nums_str[j]:\n                nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(i+1, len(nums_str)):\n            if nums_str[i] > nums_str[j]:\n                temp = nums_str[i]\n                nums_str[i] = nums_str[j]\n                nums_str[j] = temp\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    #sort the list using sorted() function\n    sorted_str_list = sorted(nums_str)\n    #set the index and return the sorted list\n    return sorted_str_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    #Initialization\n    nums = []\n    \n    #Iterate the list\n    for num in nums_str:\n        \n        #Convert to number\n        num = int(num)\n        \n        #Append num to nums\n        nums.append(num)\n        \n    #Sort the list\n    nums.sort()\n    \n    #Return the list\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(len(nums_str)-i-1):\n            if nums_str[j] > nums_str[j+1]:\n                temp = nums_str[j]\n                nums_str[j] = nums_str[j+1]\n                nums_str[j+1] = temp\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    num_sorted = []\n    for num in nums_str:\n        num = num.lstrip('+-')\n        num = num.rstrip('.')\n        num = num.split('.')\n        num_sorted.append(num)\n    \n    num_sorted.sort()\n    \n    return num_sorted\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for num in nums_str:\n        num = float(num)\n        if num > 0:\n            new_list.append(num)\n        else:\n            new_list.append(float(-num))\n    print(new_list)\n    new_list.sort()\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    i=0\n    for num in nums_str:\n        if num >= '0' and num <= '9':\n            nums_str[i] = num\n            i += 1\n    i = 0\n    for num in nums_str:\n        if num >= 'A' and num <= 'Z':\n            nums_str[i] = num\n            i += 1\n    i = 0\n    for num in nums_str:\n        if num >= 'a' and num <= 'z':\n            nums_str[i] = num\n            i += 1\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if not nums_str:\n        return []\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # TODO: add test_list and test_tup to the list\n    \n    # TODO: use append to add test_list and test_tup to the list\n    \n    # TODO: use the built-in function pop to remove the element from the list\n    \n    # TODO: use the built-in function extend to add the tuple to the list\n    \n    # TODO: use the built-in function sorted to sort the list by test_tup\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorted to sort the list by test_list\n    \n    # TODO: use the built-in function sorte"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    if not test_list:\n        return test_tup\n    else:\n        test_tup = tuple(test_tup)\n        test_list.append(test_tup)\n        return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    result = test_list[:]\n    result.append(test_tup)\n    return result\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list == []:\n        raise AssertionError('Please add a tuple first.')\n    else:\n        test_list.append(tuple(test_tup))\n        return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left, right = 2 * i + 1, 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return True\n    if right < len(arr) and arr[right] < arr[i]:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #Code here\n    if len(arr) == 0:\n        return True\n    if arr[i] < arr[(i * 2) + 1]:\n        return False\n    return check_min_heap_helper(arr[(i * 2) + 1:], (i * 2) + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return (arr[i] < arr[2*i+1] and arr[2*i+1] < arr[2*i+2])\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] > arr[i//2] and arr[i] > arr[(i*2)+1]:\n        return False\n    if arr[i] > arr[(i*2)+1] and arr[i] > arr[i//2]:\n        return False\n    if arr[i] > arr[(i*2)+2] and arr[i] > arr[(i*2)+3]:\n        return False\n    return check_min_heap_helper(arr, i//2) and check_min_heap_helper(arr, (i*2)+1) and check_min_heap_helper(arr, (i*2)+2) and check_min_heap_helper(arr, (i*2)+3)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[(i+1)//2] and arr[(i+1)//2] < arr[i]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i > 0 and arr[i] >= arr[i//2]) or (i < len(arr) and arr[i] >= arr[-1]):\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap(arr, i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    check_index = i\n    if check_index > len(arr) - 1:\n        return True\n    else:\n        if arr[check_index] > arr[i]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= (len(arr) - 1)//2:\n        return True\n    if arr[i] < arr[i//2] or arr[i] < arr[len(arr) - 1 - i//2] or arr[len(arr) - 1 - i//2] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, i + 1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    while i < n: \n        j = 1\n        while j <= n: \n            if i == j: \n                print(i, end = \" \")\n                print(j, end = \" \")\n                print(j * j, end = \" \")\n                print(n, end = \" \")\n                print(n * n, end = \" \")\n                print(n * n * n, end = \" \")\n            j += 1\n        i += 1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    elif n == 4: \n        return 3\n    elif n == 5: \n        return 4\n    elif n == 6: \n        return 5\n    elif n == 7: \n        return 6\n    elif n == 8: \n        return 7\n    elif n == 9: \n        return 8\n    elif n == 10: \n        return 9\n    elif n == 11: \n        return 10\n    elif n == 12: \n        return 11\n    elif n == 13: \n        return 12\n    elif n == 14: \n        return 13\n    elif n == 15: \n        return 14\n    else:\n        return None\n    \ndef isprime(n):\n    '''\n    Check if a number is prime.\n    https://www.geeksforgeeks.org/prime-number-examples-dp-dp-array/ \n    '''\n    if n == 0 or n == 1:\n        return False\n    if n%2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    p = {\n        0: 0,\n        1: 1,\n        2: 1,\n        3: 1,\n        4: 2,\n        5: 2,\n        6: 3,\n        7: 4,\n        8: 5,\n        9: 6,\n        10: 7,\n        11: 8,\n        12: 9,\n        13: 10,\n        14: 11,\n        15: 12,\n        16: 13,\n        17: 14,\n        18: 15,\n        19: 16,\n        20: 17,\n        21: 18,\n        22: 19,\n        23: 20,\n        24: 21,\n        25: 22,\n        26: 23,\n        27: 24,\n        28: 25,\n        29: 26,\n        30: 27,\n        31: 28,\n        32: 29,\n        33: 30,\n        34: 31,\n        35: 32,\n        36: 33,\n        37: 34,\n        38: 35,\n        39: 36,\n        40: 37,\n        41: 38,\n        42: 39,\n        43: 40,\n        44: 41,\n        45: 42,\n        46: 43,\n        47: 44,\n        48: 45,\n        49: 46,\n        50: 47,\n        51: 48,\n        52: 49,\n        53: 50,\n        54: 51,\n        55: 52,\n        56: 53,\n        57: 54,\n        58: 55,\n        59: 56,\n        60: 57,\n        61: 58,\n        62: 59,\n        63: 60,\n        64: 61,\n        65: 62,\n        66: 63,\n        67: 64,\n        68: 65,\n        69: 66,\n        70: 67,\n        71: 68,\n        72: 69,\n        73: 70,\n        74: 71,\n        75: 72,\n        76: 73,\n        77: 74,\n        78: 75,\n        79: 76,\n        80: 77,\n        81: 78,\n        82: 79,\n        83: 80,\n        84: 81,\n        85: 82,\n        86: 83,\n        87: 84,\n        88: 85,\n        89: 86,\n        90: 87,\n        91: 88,\n        92: 89,\n        93: 90,\n        94: 91,\n        95: 92,\n        96: 93,\n        97: 94,\n        98: 95,\n        99: 96,\n        100: 97,\n        101: 98,\n        102: 99,\n        103: 100,\n        104: 101,\n        105: 102,\n        106: 103,\n        107: 104,\n        108: 105,\n        109: 106,\n        110: 107,\n        111: 108,\n        112: 109,\n        113: 110,\n        114: 111,\n        115: 112,\n        116: 113,\n        117: 114,\n        118: 115,\n        119: 116,\n        120: 117,\n        121: 118,\n        122: 119,\n        123: 120,\n        124: 121,\n        125: 122,\n        126: 123,\n        127: 124,\n        128: 125,\n        129: 126,\n        130: 127,\n        131: 128,\n        132: 129,\n        133: 130,\n        134: 131,\n        135: 132,\n        136: 133,\n        137: 134,\n        138: 135,\n        139: 136,\n        140: 137,\n        141: 138,\n        142: 139,\n        143: 140,\n        144: 141,\n        145: 142,\n        146: 143,\n        147: 144,\n        148: 145,\n        149: 146,\n        150: 147,\n        151: 148,\n        152: 149,\n        153: 150,\n        154: 151,\n        155: 152,\n        156: 153,\n        157: 154,\n        158: 155,\n        159: 156,\n        160: 157,\n        161: 158,\n        162: 159,\n        163: 160,\n        164: 161,\n        165: 162,\n        166: 163,\n        167: 164,\n        168: 165,\n        169: 166,\n        170: 167,\n        171: 168,\n        172: 169,\n        173: 170,\n        174: 171,\n        175: 172,\n        176: 173,\n        177: 174,\n        178: 175,\n        179: 176,\n        180: 177,\n        181: 178,\n        182: 179,\n        183: 180,\n        184: 181,\n        185: 182,\n        186: 183,\n        187: 184,\n        188: 185,\n        189: 186,\n        190: 187,\n        191: 188,\n        192: 189,\n        193: 190,\n        194: 191,\n        195: 192,\n        196: 193,\n        197: 194,\n        198: 195,\n        199: 196,\n        200: 197,\n        201: 198,\n        202: 199,\n        203: 200,\n        204: 201,\n        205: 202,\n        206: 203,\n        207: 204,\n        208: 205,\n        209: 206,\n        210: 207,\n        211: 208,\n        212: 209,\n        213: 210,\n        214: 211,\n        215: 212,\n        216: 213,\n        217: 214,\n        218: 215,\n        219: 216,\n        220: 217,\n        221: 218,\n        222: 219,\n        223: 220,\n        224: 221,\n        225: 222,\n        226: 223,\n        227: 224,\n        228: 225,\n        229: 226,\n        230: 227,\n        231: 228,\n        232: 229,\n        233: 230,\n        234: 231,\n        235: 232,\n        236: 233,\n        237: 234,\n        238: 235,\n        239: 236,\n        240: 237,\n        241: 238,\n        242: 239,\n        243: 240,\n        244: 241,\n        245: 242,\n        246: 243,\n        247: 244,\n        248: 245,\n        249: 246,\n        250: 247,\n        251: 248,\n        252: 249,\n        253: 250,\n        254: 251,\n        255: 252,\n        256: 253,\n        257: 254,\n        258: 255,\n        259: 256,\n        260: 257,\n        261: 258,\n        262: 259,\n        263: 260,\n        264: 261,\n        265: 262,\n        266: 263,\n        267: 264,\n        268: 265,\n        269: 266,\n        270: 267,\n        271: 268,\n        272: 269,\n        273: 270,\n        274: 271,\n        275: 272,\n        276: 273,\n        277: 274,\n        278: 275,\n        279: 276,\n        280: 277,\n        281: 278,\n        282: 279,\n        283: 280,\n        284: 281,\n        285: 282,\n        286: 283,\n        287: 284,\n        288: 285,\n        289: 286,\n        290: 287,\n        291: 288,\n        292: 289,\n        293: 290,\n        294: 291,\n        295: 292,\n        296: 293,\n        297: 294,\n        298: 295,\n        299: 296,\n        300: 297,\n        301: 298,\n        302: 299,\n        303: 300,\n        304: 301,\n        305: 302,\n        306: 303,\n        307: 304,\n        308: 305,\n        309: 306,\n        310: 307,\n        311: 308,\n        312: 309,\n        313: 310,\n        314: 311,\n        315: 312,\n        316: 313,\n        317: 314,\n        318: 315,\n        319: 316,\n        320: 317,\n        321: 318,\n        322: 319,\n        323: 320"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    '''\n    # First approach:\n    \n    # is there a formula to calculate the nth jacobsthal number?\n    \n    # n is the current number being calculated, n = 2n + 1\n    # if n = 1, a jacobsthal number = 1\n    # if n = 2, a jacobsthal number = 1 + 1 + 1 + 1 + 1\n    # if n = 3, a jacobsthal number = 1 + 1 + 1 + 1 + 1 + 1 + 1\n    #...\n    \n    # n = 5\n    # n = 6\n    # n = 7\n    # n = 8\n    n = 5\n    n = 6\n    n = 7\n    n = 8\n    n = 9\n    n = 10\n    n = 11\n    n = 12\n    n = 13\n    n = 14\n    n = 15\n    n = 16\n    n = 17\n    n = 18\n    n = 19\n    n = 20\n    n = 21\n    n = 22\n    n = 23\n    n = 24\n    n = 25\n    n = 26\n    n = 27\n    n = 28\n    n = 29\n    n = 30\n    n = 31\n    n = 32\n    n = 33\n    n = 34\n    n = 35\n    n = 36\n    n = 37\n    n = 38\n    n = 39\n    n = 40\n    n = 41\n    n = 42\n    n = 43\n    n = 44\n    n = 45\n    n = 46\n    n = 47\n    n = 48\n    n = 49\n    n = 50\n    n = 51\n    n = 52\n    n = 53\n    n = 54\n    n = 55\n    n = 56\n    n = 57\n    n = 58\n    n = 59\n    n = 60\n    n = 61\n    n = 62\n    n = 63\n    n = 64\n    n = 65\n    n = 66\n    n = 67\n    n = 68\n    n = 69\n    n = 70\n    n = 71\n    n = 72\n    n = 73\n    n = 74\n    n = 75\n    n = 76\n    n = 77\n    n = 78\n    n = 79\n    n = 80\n    n = 81\n    n = 82\n    n = 83\n    n = 84\n    n = 85\n    n = 86\n    n = 87\n    n = 88\n    n = 89\n    n = 90\n    n = 91\n    n = 92\n    n = 93\n    n = 94\n    n = 95\n    n = 96\n    n = 97\n    n = 98\n    n = 99\n    n = 100\n    n = 101\n    n = 102\n    n = 103\n    n = 104\n    n = 105\n    n = 106\n    n = 107\n    n = 108\n    n = 109\n    n = 110\n    n = 111\n    n = 112\n    n = 113\n    n = 114\n    n = 115\n    n = 116\n    n = 117\n    n = 118\n    n = 119\n    n = 120\n    n = 121\n    n = 122\n    n = 123\n    n = 124\n    n = 125\n    n = 126\n    n = 127\n    n = 128\n    n = 129\n    n = 130\n    n = 131\n    n = 132\n    n = 133\n    n = 134\n    n = 135\n    n = 136\n    n = 137\n    n = 138\n    n = 139\n    n = 140\n    n = 141\n    n = 142\n    n = 143\n    n = 144\n    n = 145\n    n = 146\n    n = 147\n    n = 148\n    n = 149\n    n = 150\n    n = 151\n    n = 152\n    n = 153\n    n = 154\n    n = 155\n    n = 156\n    n = 157\n    n = 158\n    n = 159\n    n = 160\n    n = 161\n    n = 162\n    n = 163\n    n = 164\n    n = 165\n    n = 166\n    n = 167\n    n = 168\n    n = 169\n    n = 170\n    n = 171\n    n = 172\n    n = 173\n    n = 174\n    n = 175\n    n = 176\n    n = 177\n    n = 178\n    n = 179\n    n = 180\n    n = 181\n    n = 182\n    n = 183\n    n = 184\n    n = 185\n    n = 186\n    n = 187\n    n = 188\n    n = 189\n    n = 190\n    n = 191\n    n = 192\n    n = 193\n    n = 194\n    n = 195\n    n = 196\n    n = 197\n    n = 198\n    n = 199\n    n = 200\n    n = 201\n    n = 202\n    n = 203\n    n = 204\n    n = 205\n    n = 206\n    n = 207\n    n = 208\n    n = 209\n    n = 210\n    n = 211\n    n = 212\n    n = 213\n    n = 214\n    n = 215\n    n = 216\n    n = 217\n    n = 218\n    n = 219\n    n = 220\n    n = 221\n    n = 222\n    n = 223\n    n = 224\n    n = 225\n    n = 226\n    n = 227\n    n = 228\n    n = 229\n    n = 230\n    n = 231\n    n = 232\n    n = 233\n    n = 234\n    n = 235\n    n = 236\n    n = 237\n    n = 238\n    n = 239\n    n = 240\n    n = 241\n    n = 242\n    n = 243\n    n = 244\n    n = 245\n    n = 246\n    n = 247\n    n = 248\n    n = 249\n    n = 250\n    n = 251\n    n = 252\n    n = 253\n    n = 254\n    n = 255\n    n = 256\n    n = 257\n    n = 258\n    n = 259\n    n = 260\n    n = 261\n    n = 262\n    n = 263\n    n = 264\n    n = 265\n    n = 266\n    n = 267\n    n = 268\n    n = 269\n    n = 270\n    n = 271\n    n = 272\n    n = 273\n    n = 274\n    n = 275\n    n = 276\n    n = 277\n    n = 278\n    n = 279\n    n = 280\n    n = 281\n    n = 282\n    n = 283\n    n = 284\n    n = 285\n    n = 286\n    n = 287\n    n = 288\n    n = 289\n    n = 290\n    n = 291\n    n = 292\n    n = 293\n    n = 294\n    n = 295\n    n = 296\n    n = 297\n    n = 298\n    n = 299\n    n = 300\n    n = 301\n    n = 302\n    n = 303\n    n = 304\n    n = 305\n    n = 306\n    n = 307\n    n = 308\n    n = 309\n    n = 310\n    n = 311\n    n = 312\n    n = 313\n    n = 314\n    n = 315\n    n = 316\n    n = 317\n    n = 318\n    n = 319\n    n = 320\n    n = 321\n    n = 322\n    n = 323\n    n = 324\n    n = 325\n    n = 326\n    n = 327\n    n = 328\n    n = 329\n    n = 330\n    n = 331\n    n = 332\n    n = 333\n    n = 334\n    n = 335\n    n = 336\n    n = 337\n    n = 338\n    n = 339\n    n = 340\n    n = 341\n    n = 342\n    n = 343\n    n = 344\n    n = 345\n    n = 346\n    n = 347\n    n = 348\n    n = 349\n    n = 350\n    n = 351\n    n = 352\n    n = 353\n    n = 354\n    n = 355\n    n = 356\n    n = 357\n    n = 358\n    n = 359\n    n = 360\n    n = 361\n    n = 362\n    n = 363\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        j = 0\n        while j <= n:\n            j = j + 1\n            print(j)\n            return j\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<=0:\n        raise ValueError(\"n must be a positive integer\")\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return n*(n-1)*(2*n-1)//6\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n    elif n == 86:\n        return 86\n    elif n == 87:\n        return 87\n    elif n == 88:\n        return 88\n    elif n == 89:\n        return 89\n    elif n == 90:\n        return 90\n    elif n == 91:\n        return 91\n    elif n == 92:\n        return 92\n    elif n == 93:\n        return 93\n    elif n == 94:\n        return 94\n    elif n == 95:\n        return 95\n    elif n == 96:\n        return 96\n    elif n == 97:\n        return 97\n    elif n == 98:\n        return 98\n    elif n == 99:\n        return 99\n    elif n == 100:\n        return 100\n    elif n == 101:\n        return 101\n    elif n == 102:\n        return 102\n    elif n == 103:\n        return 103\n    elif n == 104:\n        return 104\n    elif n == 105:\n        return 105\n    elif n == 106:\n        return 106\n    elif n == 107:\n        return 107\n    elif n == 108:\n        return 108\n    elif n == 109:\n        return 109\n    elif n == 110:\n        return 110\n    elif n == 111:\n        return 111\n    elif n == 112:\n        return 112\n    elif n == 113:\n        return 113\n    elif n == 114:\n        return 114\n    elif n == 115:\n        return 115\n    elif n == 116:\n        return 116\n    elif n == 117:\n        return 117\n    elif n == 118:\n        return 118\n    elif n == 119:\n        return 119\n    elif n == 120:\n        return 120\n    elif n == 121:\n        return 121\n    elif n == 122:\n        return 122\n    elif n == 123:\n        return 123\n    elif n == 124:\n        return 124\n    elif n == 125:\n        return 125\n    elif n == 126:\n        return 126\n    elif n == 127:\n        return 127\n    elif n == 128:\n        return 128\n    elif n == 129:\n        return 129\n    elif n == 130:\n        return 130\n    elif n == 131:\n        return 131\n    elif n == 132:\n        return 132\n    elif n == 133:\n        return 133\n    elif n == 134:\n        return 134\n    elif n == 135:\n        return 135\n    elif n == 136:\n        return 136\n    elif n == 137:\n        return 137\n    elif n == 138:\n        return 138\n    elif n == 139:\n        return 139\n    elif n == 140:\n        return 140\n    elif n == 141:\n        return 141\n    elif n == 142:\n        return 142\n    elif n == 143:\n        return 143\n    elif n == 144:\n        return 144\n    elif n == 145:\n        return 145\n    elif n == 146:\n        return 146\n    elif n == 147:\n        return 147\n    elif n == 148:\n        return 148\n    elif n == 149:\n        return 149\n    elif n == 150:\n        return 150\n    elif n == 151:\n        return 151\n    elif n == 152:\n        return 152\n    elif n == 153:\n        return 153\n    elif n == 154:\n        return 154\n    elif n == 155:\n        return 155\n    elif n == 156:\n        return 156\n    elif n == 157:\n        return 157\n    elif n == 158:\n        return 158\n    elif n == 159:\n        return 159\n    elif n == 160:\n        return 160\n    elif n == 161:\n        return 161\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Write your code here\n    def jacobsthal_num(n):\n        j = 0\n        for i in range(1, n+1):\n            j+=1\n            if j == n:\n                return i\n            else:\n                j+=1\n                j = jacobsthal_num(i)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0: return 0\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 4\n    if n == 5: return 5\n    if n == 6: return 6\n    if n == 7: return 7\n    if n == 8: return 8\n    if n == 9: return 9\n    if n == 10: return 10\n    if n == 11: return 11\n    if n == 12: return 12\n    if n == 13: return 13\n    if n == 14: return 14\n    if n == 15: return 15\n    if n == 16: return 16\n    if n == 17: return 17\n    if n == 18: return 18\n    if n == 19: return 19\n    if n == 20: return 20\n    if n == 21: return 21\n    if n == 22: return 22\n    if n == 23: return 23\n    if n == 24: return 24\n    if n == 25: return 25\n    if n == 26: return 26\n    if n == 27: return 27\n    if n == 28: return 28\n    if n == 29: return 29\n    if n == 30: return 30\n    if n == 31: return 31\n    if n == 32: return 32\n    if n == 33: return 33\n    if n == 34: return 34\n    if n == 35: return 35\n    if n == 36: return 36\n    if n == 37: return 37\n    if n == 38: return 38\n    if n == 39: return 39\n    if n == 40: return 40\n    if n == 41: return 41\n    if n == 42: return 42\n    if n == 43: return 43\n    if n == 44: return 44\n    if n == 45: return 45\n    if n == 46: return 46\n    if n == 47: return 47\n    if n == 48: return 48\n    if n == 49: return 49\n    if n == 50: return 50\n    if n == 51: return 51\n    if n == 52: return 52\n    if n == 53: return 53\n    if n == 54: return 54\n    if n == 55: return 55\n    if n == 56: return 56\n    if n == 57: return 57\n    if n == 58: return 58\n    if n == 59: return 59\n    if n == 60: return 60\n    if n == 61: return 61\n    if n == 62: return 62\n    if n == 63: return 63\n    if n == 64: return 64\n    if n == 65: return 65\n    if n == 66: return 66\n    if n == 67: return 67\n    if n == 68: return 68\n    if n == 69: return 69\n    if n == 70: return 70\n    if n == 71: return 71\n    if n == 72: return 72\n    if n == 73: return 73\n    if n == 74: return 74\n    if n == 75: return 75\n    if n == 76: return 76\n    if n == 77: return 77\n    if n == 78: return 78\n    if n == 79: return 79\n    if n == 80: return 80\n    if n == 81: return 81\n    if n == 82: return 82\n    if n == 83: return 83\n    if n == 84: return 84\n    if n == 85: return 85\n    if n == 86: return 86\n    if n == 87: return 87\n    if n == 88: return 88\n    if n == 89: return 89\n    if n == 90: return 90\n    if n == 91: return 91\n    if n == 92: return 92\n    if n == 93: return 93\n    if n == 94: return 94\n    if n == 95: return 95\n    if n == 96: return 96\n    if n == 97: return 97\n    if n == 98: return 98\n    if n == 99: return 99\n    if n == 100: return 100\n    if n == 101: return 101\n    if n == 102: return 102\n    if n == 103: return 103\n    if n == 104: return 104\n    if n == 105: return 105\n    if n == 106: return 106\n    if n == 107: return 107\n    if n == 108: return 108\n    if n == 109: return 109\n    if n == 110: return 110\n    if n == 111: return 111\n    if n == 112: return 112\n    if n == 113: return 113\n    if n == 114: return 114\n    if n == 115: return 115\n    if n == 116: return 116\n    if n == 117: return 117\n    if n == 118: return 118\n    if n == 119: return 119\n    if n == 120: return 120\n    if n == 121: return 121\n    if n == 122: return 122\n    if n == 123: return 123\n    if n == 124: return 124\n    if n == 125: return 125\n    if n == 126: return 126\n    if n == 127: return 127\n    if n == 128: return 128\n    if n == 129: return 129\n    if n == 130: return 130\n    if n == 131: return 131\n    if n == 132: return 132\n    if n == 133: return 133\n    if n == 134: return 134\n    if n == 135: return 135\n    if n == 136: return 136\n    if n == 137: return 137\n    if n == 138: return 138\n    if n == 139: return 139\n    if n == 140: return 140\n    if n == 141: return 141\n    if n == 142: return 142\n    if n == 143: return 143\n    if n == 144: return 144\n    if n == 145: return 145\n    if n == 146: return 146\n    if n == 147: return 147\n    if n == 148: return 148\n    if n == 149: return 149\n    if n == 150: return 150\n    if n == 151: return 151\n    if n == 152: return 152\n    if n == 153: return 153\n    if n == 154: return 154\n    if n == 155: return 155\n    if n == 156: return 156\n    if n == 157: return 157\n    if n == 158: return 158\n    if n == 159: return 159\n    if n == 160: return 160\n    if n == 161: return 161\n    if n == 162: return 162\n    if n == 163: return 163\n    if n == 164: return 164\n    if n == 165: return 165\n    if n == 166: return 166\n    if n == 167: return 167\n    if n == 168: return 168\n    if n == 169: return 169\n    if n == 170: return 170\n    if n == 171: return 171\n    if n == 172: return 172\n    if n == 173: return 173\n    if n == 174: return 174\n    if n == 175: return 175\n    if n == 176: return 176\n    if n == 177: return 177\n    if n == 178: return 178\n    if n == 179: return 179\n    if n == 180: return 180\n    if n == 181: return 181\n    if n == 182: return 182\n    if n == 183: return 183\n    if n == 184: return 184\n    if n == 185: return 185\n    if n == 186: return 186\n    if n == 187: return 187\n    if n == 188: return 188\n    if n == 189: return 189\n    if n == 190: return 190\n    if n == 191: return 191\n    if n == 192: return 192\n    if n == 193: return 193\n    if n == 194: return 194\n    if n == 195: return 195\n    if n == 196: return 196\n    if n == 197: return 197\n    if n == 198: return 198\n    if n == 199: return 199\n    if n == 200: return 200\n    if n == 201: return 201\n    if n == 202: return 202\n    if n == 203: return 203\n    if n == 204: return 204\n    if n == 205: return 205\n    if n == 206: return 206\n    if n == 207: return 207\n    if n == 208: return 208\n    if n == 209: return 209\n    if n == 210: return 210\n    if n == 211: return 211\n    if n == 212: return 212\n    if n == 213: return 213\n    if n == 214: return 214\n    if n == 215: return 215\n    if n ="
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #\n    # EASY (O(n^2))\n    #\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialise the mink value and the mink index of the tuple list\n    min_k = 0\n    min_index = 0\n    min_val = 0\n    \n    for i in range(len(test_list)):\n        if test_list[i][1] > min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    \n    # Compare the mink value and the tuple in case of a tie\n    if min_val == 0:\n        min_val = test_list[min_index][1]\n        min_index = min_index\n    \n    # Check if the index is a perfect match to the minimum k value\n    if test_list[min_index][1] == min_val:\n        # Increase the minimum k value by 1, also check if the index is a perfect match\n        if test_list[min_index][0] == test_list[min_index + 1][0]:\n            min_k += 1\n    \n    # Check if the index is a perfect match to the minimum k value\n    if test_list[min_index][1] == min_val:\n        # Increase the minimum k value by 1, also check if the index is a perfect match\n        if test_list[min_index][0] == test_list[min_index + 1][0]:\n            min_k += 1\n        \n    # Return the minimum k value\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_tuple_list = sorted(test_list, key=lambda x: x[1])\n    minimum_count = 0\n    minimum = 0\n    for i in range(len(sorted_tuple_list)):\n        if i == 0:\n            minimum_count += sorted_tuple_list[i][1]\n        else:\n            if minimum_count < sorted_tuple_list[i][1]:\n                minimum_count = sorted_tuple_list[i][1]\n                minimum = sorted_tuple_list[i][0]\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum_k = []\n    count = 0\n    for i in test_list:\n        count += 1\n        if count < K:\n            minimum_k.append(i)\n    return minimum_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test case: k = 1\n    # k = 2\n    # k = 3\n    # k = 4\n    # k = 5\n    # k = 6\n    # k = 7\n    # k = 8\n    # k = 9\n    # k = 10\n    # k = 11\n    # k = 12\n    # k = 13\n    # k = 14\n    # k = 15\n    # k = 16\n    # k = 17\n    # k = 18\n    # k = 19\n    # k = 20\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def kmin(x):\n        return x if x < K else (x - 1)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum_k = len(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                minimum_k = min(minimum_k, j-i)\n    return minimum_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = float('inf')\n    # base case: all elements in the list are at the same location\n    if (all(test_list[i] == test_list[0] for i in range(1, len(test_list)))):\n        minimum = len(test_list)\n    # check if we have reached the end\n    if (len(test_list) <= K):\n        return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #check that the list is sorted\n    test_list = sorted(test_list)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    l4.append(l2[j])\n                    break\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l3:\n            index_list.append(i)\n    for i in range(len(l2)):\n        if l2[i] in index_list:\n            index_list.remove(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list_common_elements = list()\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i in j and k in l1:\n                    list_common_elements.append(i)\n    return list_common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    common_list.append(l1[i])\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    index = 0\n    while index < len(l1):\n        if l1[index] in l2[index] and l2[index] in l3[index]:\n            common_elements.append(l1[index])\n        index += 1\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            index_list.append(l2.index(l1[i]))\n        if l1[i] in l3:\n            index_list.append(l3.index(l1[i]))\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    count = 0\n    if len(l1) == len(l2) == len(l3):\n        return list(set(l1) & set(l2) & set(l3))\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l2) > len(l3) > len(l1):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l2) > len(l3) > len(l1):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        for i in range(len(l1)):\n            if l1[i] == l3[i]:\n                count += 1\n        for j in range(len(l2)):\n            if l2[j] == l3[i]:\n                count += 1\n        return [l1[i] for i in range(count)]\n    elif len(l1) > len(l2) > len(l3):\n        for i in range(len(l2)):\n            if l2[i] == l3[i]:\n                count += 1\n        for j in range(len(l1)):\n            if l1[j] == "
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    num_list = []\n    num_list.append(numbers[0])\n    num_list.append(numbers[1])\n    num_list.append(numbers[2])\n    num_list.append(numbers[3])\n    num_list.append(numbers[4])\n    num_list.append(numbers[5])\n    num_list.append(numbers[6])\n    num_list.append(numbers[7])\n    num_list.append(numbers[8])\n    num_list.append(numbers[9])\n    num_list.append(numbers[10])\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # A few tests\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    # Divide the list into two parts\n    pivot = numbers[0]\n    low = []\n    high = []\n    for num in numbers:\n        if num < pivot:\n            low.append(num)\n        else:\n            high.append(num)\n    # Recursive function\n    if len(low) >= 2:\n        return min(low) + second_smallest(low)\n    if len(high) >= 2:\n        return max(high) + second_smallest(high)\n    # Return the first element of the list\n    return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest_num = numbers[0]\n    for x in numbers:\n        if x < second_smallest_num:\n            second_smallest_num = x\n    return second_smallest_num\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    print(second_smallest(numbers))\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 2:\n        return numbers[1]\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 0:\n        return -1\n    i = 0\n    while numbers[i] < numbers[i + 1]:\n        i += 1\n    return numbers[i]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # code goes here\n    # iterate through the list and check if the number is odd\n    # if it is not odd, take the smallest number\n    # otherwise, take the second smallest number\n    # return the two numbers\n    numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    smallest_number = numbers[0]\n    second_smallest = numbers[1]\n    for number in numbers:\n        if number > smallest_number:\n            smallest_number = number\n        elif number < smallest_number:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n    return smallest\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'^a(\\s|$)', text)\n    if match!= None:\n        return(match.group(1))\n    else:\n        return(False)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('.', '').replace(',', '').replace('(', '').replace(')', '').replace('!', '').replace('?', '')\n    text = text.replace('\\n', '')\n    result = re.search('(?<=\\w)(\\w+)', text)\n    if result is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    l_text = text.split()\n    l_text_len = len(l_text)\n    if l_text_len == 1:\n        l_text ='' + l_text\n    if l_text_len > 1:\n        l_text ='' + l_text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub('\\s', '', text)\n    text = re.sub('\\b', '', text)\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match('a.*b', text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # string without the 'a' character\n    sub_string = text[1:len(text)-1]\n    # split string to separate the 'a' character\n    sub_string = sub_string.split('a')\n    # find zero or one characters\n    zero_or_one = sub_string[0]\n    zero_or_one_found = False\n    for char in zero_or_one:\n        if char == 'b':\n            zero_or_one_found = True\n    if not zero_or_one_found:\n        # if 'b' is not found, replace the 'a' character\n        zero_or_one = 'b'\n        sub_string = sub_string[1:]\n        for char in sub_string:\n            if char == zero_or_one:\n                sub_string = sub_string.replace(char, 'a')\n    # return the string without the 'a' character\n    return sub_string[0] + ''.join(sub_string[1:])\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('a', 'a').replace('b', 'b').replace('b', 'a').replace('A', 'a').replace('B', 'b').replace('B', 'b').replace('B', 'a').replace('B', 'b').replace('B', 'B')\n    pattern = re.compile('[a-zA-Z]')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a[\\w\\s]*\\b', text):\n        return re.search(r'a[\\w\\s]*\\b', text).group()\n    elif re.search(r'b[\\w\\s]*\\b', text):\n        return re.search(r'b[\\w\\s]*\\b', text).group()\n    else:\n        return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # define a regex pattern\n    pat = r'(?<![a-z])[a-z][a-z]{2}(?![a-z])'\n    # find all the matches\n    matches = re.finditer(pat, text)\n    # loop through the matches\n    for match in matches:\n        # match.start() is the index of the matched substring in the text\n        # match.end() is the index of the unmatched substring\n        # match.group() is the text of the matched substring\n        # the group() method returns the first match\n        print(match.group())\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(r'a\\w+\\b')\n    m = p.search(text)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i] == test_list[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] > test_list[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if test_list[i] == test_list[j] and test_list[i] in reverse:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pair=0\n    if len(test_list)==1:\n        return 1\n    for i in range(len(test_list)-1):\n        if test_list[i]!=test_list[i+1]:\n            count_pair+=1\n    return count_pair\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if test_list[i] == test_list[j + 1]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # return {x: y.count(x) for x in set(x for y in test_list if x == y)}\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list: return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    l = len(test_list)\n    for i in range(l):\n        for j in range(i + 1, l):\n            if test_list[i] == test_list[j] and (i - j) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_list = []\n    for index in range(len(test_list) - 1):\n        if test_list[index] == test_list[index + 1]:\n            count_list.append([test_list[index], test_list[index + 1]])\n    return count_list\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and i!= j:\n                return test_list[i] * 2\n    return 0\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #Fill in\n    result=dict()\n    result[(list1[0][0],list1[0][1])]=0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            result[(list1[i][0],list1[i][1])]+=1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    import collections\n    d=collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {list1[i]: list1.count(list1[i]) for i in range(len(list1))}\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    i = 0\n    while i < len(list1):\n        dict1[list1[i]] = dict1.get(list1[i], 0) + 1\n        i += 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result_dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)-i):\n            if list1[j] in result_dic.keys():\n                result_dic[list1[j]] += 1\n            else:\n                result_dic[list1[j]] = 1\n    return result_dic\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {\"{}\".format(i):len(list(set(list1))) for i in list1}\n    \ndef str_to_dict(st):\n    '''\n    Write a function to convert a string into a dictionary. Each key is the name of the word in the string and each value is the number of times the word is repeated in the string.\n    '''\n    return {\"{}\".format(i):len(list(set(st.split()))) for i in st}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Declare a dictionary to count lists in a list\n    dictionary = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = dict()\n    for i in range(len(list1)):\n        counter[list1[i]] = list1.count(list1[i])\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def count_occurrences(list1):\n        '''\n        Write a function to return the count of the occurencies in the given list.\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) < 6:\n        return False\n    if num[0]!= '-' and num[0]!= '+':\n        return False\n    if num[1:3]!= '0' and num[1:3]!= '.':\n        return False\n    if num[3:4]!= '0' and num[3:4]!= '.':\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if num.endswith('.0'):\n            num = num[:-2]\n        return len(num) == len(str(int(num)))"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.replace('.', '', 1).isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    \n    factor = 1\n    for i in range(len(num)):\n        if num[i].isdigit():\n            if num[i] == '.':\n                return False\n            factor = 10 ** i\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit() and len(num) == 10:\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if(type(num)!= str):\n        raise TypeError(\"can only handle string type\")\n    if(num[0]!= '-'):\n        raise ValueError(\"string should start with a -\")\n    if(num[-1]!= '.'):\n        raise ValueError(\"string should end with a.\")\n    if(len(num) > 1):\n        raise ValueError(\"string should only have one '.'\")\n    \n    i = 1\n    while(i < len(num)):\n        if(num[i] == '.'):\n            if(num[i-1]!= '0' and num[i-1]!= '1'):\n                raise ValueError(\"decimal number should only have one '.'\")\n        \n            if(num[i+1]!= '0' and num[i+1]!= '1'):\n                raise ValueError(\"decimal number should only have one '.'\")\n            \n            i += 2\n        else:\n            i += 1\n    \n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for num in arr:\n            if num not in arr:\n                return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # valid_element = 0\n    # for num in arr:\n    #     if arr.count(num) == 1:\n    #         valid_element += 1\n    # return valid_element\n    # other_elements = []\n    # for num in arr:\n    #     if num not in other_elements:\n    #         other_elements.append(num)\n    # return len(other_elements) == 1\n    #\n    # valid_element = 0\n    # for num in arr:\n    #     if num in arr:\n    #         valid_element += 1\n    # return valid_element\n    \n    return (len([num for num in arr if arr.count(num) == 1]) == 1)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize the list\n    '''\n    List of numbers\n    '''\n    numbers = [n for n in range(1, 10001)]\n    '''\n    Array of numbers\n    '''\n    # Iterate through the array\n    '''\n    for i in range(len(arr)):\n        j = i + 1\n        # Get the value of j\n        j = j % len(arr)\n        # Check if this element is equal to the target element\n        if arr[j]!= i:\n            return False\n    # Return true\n    return True\n    \n    '''\n    Bonus:\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize the list\n    '''\n    List of numbers\n    '''\n    numbers = [n for n in range(1, 10001)]\n    '''\n    Array of numbers\n    '''\n    # Iterate through the array\n    '''\n    for i in range(len(arr)):\n        j = i + 1\n        # Get the value of j\n        j = j % len(arr)\n        # Check if this element is equal to the target element\n        if arr[j]!= i:\n            return False\n    # Return true\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i = 0\n    new_arr = []\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return arr[0] == arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i-1] == arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # TODO: Write your code here\n    return not any(arr.count(x)==1 for x in arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    from itertools import combinations\n    if len(arr) == 1:\n        if arr[0] not in arr:\n            return False\n        else:\n            return True\n    else:\n        combs = [combinations(arr,i) for i in range(1,len(arr)+1)]\n        for combs_dict in combs:\n            if all(x == set(arr) for x in combs_dict.values()):\n                return True\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(0,len(arr)):\n            if arr[i] not in arr[i+1:len(arr)]:\n                return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return arr == 1\n    else:\n        flag = True\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                flag = False\n        return flag\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3>12):\n        return False\n    elif(monthnum3<=0):\n        return False\n    else:\n        if(monthnum3==1):\n            if(monthnum3==2):\n                if(monthnum3==3):\n                    if(monthnum3==4):\n                        if(monthnum3==5):\n                            if(monthnum3==6):\n                                if(monthnum3==7):\n                                    if(monthnum3==8):\n                                        if(monthnum3==9):\n                                            if(monthnum3==10):\n                                                if(monthnum3==11):\n                                                    if(monthnum3==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            if(monthnum3==2):\n                if(monthnum3==3):\n                    if(monthnum3==4):\n                        if(monthnum3==5):\n                            if(monthnum3==6):\n                                if(monthnum3==7):\n                                    if(monthnum3==8):\n                                        if(monthnum3==9):\n                                            if(monthnum3==10):\n                                                if(monthnum3==11):\n                                                    if(monthnum3==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                if(monthnum3==3):\n                    if(monthnum3==4):\n                        if(monthnum3==5):\n                            if(monthnum3==6):\n                                if(monthnum3==7):\n                                    if(monthnum3==8):\n                                        if(monthnum3==9):\n                                            if(monthnum3==10):\n                                                if(monthnum3==11):\n                                                    if(monthnum3==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\ndef check_monthnumber_month(monthnum4):\n    '''\n    Write a function that checks whether a given month is a leap year or not.\n    '''\n    if(monthnum4>=1 and monthnum4<=12):\n        if(monthnum4==1):\n            if(monthnum4==2):\n                if(monthnum4==3):\n                    if(monthnum4==4):\n                        if(monthnum4==5):\n                            if(monthnum4==6):\n                                if(monthnum4==7):\n                                    if(monthnum4==8):\n                                        if(monthnum4==9):\n                                            if(monthnum4==10):\n                                                if(monthnum4==11):\n                                                    if(monthnum4==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumber_year(monthnum5):\n    '''\n    Write a function that checks whether a given month is a leap year or not.\n    '''\n    if(monthnum5>=1 and monthnum5<=12):\n        if(monthnum5==1):\n            if(monthnum5==2):\n                if(monthnum5==3):\n                    if(monthnum5==4):\n                        if(monthnum5==5):\n                            if(monthnum5==6):\n                                if(monthnum5==7):\n                                    if(monthnum5==8):\n                                        if(monthnum5==9):\n                                            if(monthnum5==10):\n                                                if(monthnum5==11):\n                                                    if(monthnum5==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumber_day(monthnum6):\n    '''\n    Write a function that checks whether a given month is a leap year or not.\n    '''\n    if(monthnum6>=1 and monthnum6<=12):\n        if(monthnum6==1):\n            if(monthnum6==2):\n                if(monthnum6==3):\n                    if(monthnum6==4):\n                        if(monthnum6==5):\n                            if(monthnum6==6):\n                                if(monthnum6==7):\n                                    if(monthnum6==8):\n                                        if(monthnum6==9):\n                                            if(monthnum6==10):\n                                                if(monthnum6==11):\n                                                    if(monthnum6==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumber_month_year(monthnum7):\n    '''\n    Write a function that checks whether a given month is a leap year or not.\n    '''\n    if(monthnum7>=1 and monthnum7<=12):\n        if(monthnum7==1):\n            if(monthnum7==2):\n                if(monthnum7==3):\n                    if(monthnum7==4):\n                        if(monthnum7==5):\n                            if(monthnum7==6):\n                                if(monthnum7==7):\n                                    if(monthnum7==8):\n                                        if(monthnum7==9):\n                                            if(monthnum7==10):\n                                                if(monthnum7==11):\n                                                    if(monthnum7==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumber_day_year(monthnum8):\n    '''\n    Write a function that checks whether a given month is a leap year or not.\n    '''\n    if(monthnum8>=1 and monthnum8<=12):\n        if(monthnum8==1):\n            if(monthnum8==2):\n                if(monthnum8==3):\n                    if(monthnum8==4):\n                        if(monthnum8==5):\n                            if(monthnum8==6):\n                                if(monthnum8==7):\n                                    if(monthnum8==8):\n                                        if(monthnum8==9):\n                                            if(monthnum8==10):\n                                                if(monthnum8==11):\n                                                    if(monthnum8==12):\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumber_year_month(monthnum9):\n    '''\n    Write a function that checks whether a given month is a leap year o"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 >= 13:\n        raise ValueError(\"Number of months must be between 1 to 12.\")\n    return monthnum3 >= 31\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 == \"01\"):\n        print(\"The month number of January is 31 days\")\n    elif(monthnum3 == \"02\"):\n        print(\"The month number of February is 28 days\")\n    elif(monthnum3 == \"03\"):\n        print(\"The month number of March is 29 days\")\n    elif(monthnum3 == \"04\"):\n        print(\"The month number of April is 30 days\")\n    elif(monthnum3 == \"05\"):\n        print(\"The month number of May is 31 days\")\n    elif(monthnum3 == \"06\"):\n        print(\"The month number of June is 30 days\")\n    elif(monthnum3 == \"07\"):\n        print(\"The month number of July is 31 days\")\n    elif(monthnum3 == \"08\"):\n        print(\"The month number of August is 30 days\")\n    elif(monthnum3 == \"09\"):\n        print(\"The month number of September is 31 days\")\n    elif(monthnum3 == \"10\"):\n        print(\"The month number of October is 31 days\")\n    elif(monthnum3 == \"11\"):\n        print(\"The month number of November is 30 days\")\n    elif(monthnum3 == \"12\"):\n        print(\"The month number of December is 31 days\")\n    else:\n        print(\"Incorrect month number\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==2 or monthnum3==3 or monthnum3==4 or monthnum3==5 or monthnum3==6 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==11 or monthnum3==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #If Month is a leap year:\n    if(monthnum3 == 1):\n        if(monthnum3 == 2):\n            if(monthnum3 == 3):\n                if(monthnum3 == 4):\n                    if(monthnum3 == 5):\n                        if(monthnum3 == 6):\n                            if(monthnum3 == 7):\n                                if(monthnum3 == 8):\n                                    if(monthnum3 == 9):\n                                        if(monthnum3 == 10):\n                                            if(monthnum3 == 11):\n                                                if(monthnum3 == 12):\n                                                    return False\n                                            else:\n                                                return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                    else:\n                                            return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                else:\n                                            return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    #If Month is not a leap year:\n    else:\n        if(monthnum3 == 2):\n            if(monthnum3 == 3):\n                if(monthnum3 == 4):\n                    if(monthnum3 == 5):\n                        if(monthnum3 == 6):\n                            if(monthnum3 == 7):\n                                if(monthnum3 == 8):\n                                    if(monthnum3 == 9):\n                                        if(monthnum3 == 10):\n                                            if(monthnum3 == 11):\n                                                if(monthnum3 == 12):\n                                                    return False\n                                            else:\n                                                return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                        else:\n                                            return False\n                                else:\n                                            return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not 0 <= monthnum3 <= 12:\n        print(\"Please enter a valid month number.\")\n        monthnum3 = input(\"Month: \")\n    elif monthnum3 > 12 or monthnum3 < 1:\n        print(\"Please enter a valid month number.\")\n        monthnum3 = input(\"Month: \")\n    else:\n        print(\"\")\n        print(\"\"\"\n            \\t  _____\n            \\t|_   _|\n            | ___ |\n            |   | |\n            |___|_|\n            \"\"\")\n        print(\"Month: \" + str(monthnum3) + \" is a valid month.\")\n        print(\"\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 > 12:\n        return False\n    else:\n        if len(str(monthnum3)) == 2:\n            if int(str(monthnum3)[0]) <= 31:\n                return True\n            else:\n                return False\n        else:\n            if int(str(monthnum3)[0]) <= 31:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if type(monthnum3) == int:\n        if (monthnum3 >= 1 and monthnum3 <= 12):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) in range(1, 13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) < 1 or int(monthnum3) > 12:\n        raise ValueError('{} is not a valid value of the month number.'.format(monthnum3))\n    else:\n        return True\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = sys.maxsize\n    for i in range(n-1):\n        min_diff = min(min_diff, abs(arr[i]-arr[i+1]))\n    return min_diff\ndef main():\n    '''\n    write your own code here\n    '''\n    arr=[int(x) for x in input().split()]\n    n = len(arr)\n    min_diff = find_min_diff(arr,n)\n    print(min_diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    l,r = 0,len(arr)-1\n    while l < r :\n        if arr[l] + arr[r] < arr[l] + arr[r-1] :\n            l += 1\n        elif arr[l] + arr[r] > arr[l] + arr[r+1]:\n            r -= 1\n        else:\n            return arr[l] + arr[r]\n    return arr[r]+arr[l]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    l=[]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            l.append(arr[i]-arr[j])\n    return min(l)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        curr_diff = arr[i] - arr[i-1]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\ndef find_max_diff(arr,n):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-maximum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        curr_diff = arr[i] - arr[i-1]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # code here\n    min_diff = float('inf')\n    cur_diff = -1\n    i,j = 0,0\n    while i < n:\n        cur_diff = arr[i] - arr[j]\n        if cur_diff < min_diff:\n            min_diff = cur_diff\n            j = i\n        i = i + 1\n    \n    # code here\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Your code here\n    # minimum difference of two elements\n    minimum = arr[0]\n    for i in range(1,n):\n        minimum = min(minimum, arr[i])\n    return minimum"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2,n):\n        min_diff = min(min_diff,arr[i]-arr[i-2])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if (n == 0): \n        return 0\n    if (n == 1): \n        return arr[0] - arr[1] \n    left_min = find_min_diff(arr[0:n//2],n//2) \n    right_min = find_min_diff(arr[n//2:],n-n//2) \n    return max(arr[n//2] - arr[n-n//2], left_min - right_min) \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = sys.maxsize\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] - arr[j] < min_diff:\n                min_diff = arr[i] - arr[j]\n    return min_diff\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = arr[0] - arr[1]\n    for i in range(2, n):\n        if diff > arr[i] - arr[i-1]:\n            diff = arr[i] - arr[i-1]\n    return diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == \"0\":\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr += 1\n    return ctr"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    dig_ctr = 0\n    for char in str:\n        if char.isdigit():\n            dig_ctr+=1\n    return dig_ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    total = 0\n    for char in str:\n        if char.isdigit():\n            total += 1\n    return total\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - sum([1 if str[i] == str[i + 1] else 0 for i in range(len(str) - 1)])\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter=0\n    for i in range(0,len(str)):\n        if(str[i]==' '):\n            counter+=1\n        else:\n            counter-=1\n    return counter\ndef number_concat(str):\n    '''\n    Write a python function to concatenate a string of two numbers and two numbers in a string.\n    '''\n    return str+str\ndef main():\n    '''\n    Write a python function to convert a string into the same string without spaces.\n    '''\n    print(number_concat('Python'))\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # Local variables\n    n = 0\n    # Iterate through all the characters\n    for i in str:\n        # Check if the current character is a digit\n        if i.isdigit():\n            # Increment the counter\n            n += 1\n    # Return the number of digits\n    return n\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return True\n    if n == 2: \n        return True\n    if n == 3: \n        return True\n    if n == 4: \n        return True\n    if n == 5: \n        return True\n    if n == 6: \n        return True\n    if n == 7: \n        return True\n    if n == 8: \n        return True\n    if n == 9: \n        return True\n    if n == 10: \n        return True\n    if n == 11: \n        return True\n    if n == 12: \n        return True\n    if n == 13: \n        return True\n    if n == 14: \n        return True\n    if n == 15: \n        return True\n    if n == 16: \n        return True\n    if n == 17: \n        return True\n    if n == 18: \n        return True\n    if n == 19: \n        return True\n    if n == 20: \n        return True\n    if n == 21: \n        return True\n    if n == 22: \n        return True\n    if n == 23: \n        return True\n    if n == 24: \n        return True\n    if n == 25: \n        return True\n    if n == 26: \n        return True\n    if n == 27: \n        return True\n    if n == 28: \n        return True\n    if n == 29: \n        return True\n    if n == 30: \n        return True\n    if n == 31: \n        return True\n    if n == 32: \n        return True\n    if n == 33: \n        return True\n    if n == 34: \n        return True\n    if n == 35: \n        return True\n    if n == 36: \n        return True\n    if n == 37: \n        return True\n    if n == 38: \n        return True\n    if n == 39: \n        return True\n    if n == 40: \n        return True\n    if n == 41: \n        return True\n    if n == 42: \n        return True\n    if n == 43: \n        return True\n    if n == 44: \n        return True\n    if n == 45: \n        return True\n    if n == 46: \n        return True\n    if n == 47: \n        return True\n    if n == 48: \n        return True\n    if n == 49: \n        return True\n    if n == 50: \n        return True\n    if n == 51: \n        return True\n    if n == 52: \n        return True\n    if n == 53: \n        return True\n    if n == 54: \n        return True\n    if n == 55: \n        return True\n    if n == 56: \n        return True\n    if n == 57: \n        return True\n    if n == 58: \n        return True\n    if n == 59: \n        return True\n    if n == 60: \n        return True\n    if n == 61: \n        return True\n    if n == 62: \n        return True\n    if n == 63: \n        return True\n    if n == 64: \n        return True\n    if n == 65: \n        return True\n    if n == 66: \n        return True\n    if n == 67: \n        return True\n    if n == 68: \n        return True\n    if n == 69: \n        return True\n    if n == 70: \n        return True\n    if n == 71: \n        return True\n    if n == 72: \n        return True\n    if n == 73: \n        return True\n    if n == 74: \n        return True\n    if n == 75: \n        return True\n    if n == 76: \n        return True\n    if n == 77: \n        return True\n    if n == 78: \n        return True\n    if n == 79: \n        return True\n    if n == 80: \n        return True\n    if n == 81: \n        return True\n    if n == 82: \n        return True\n    if n == 83: \n        return True\n    if n == 84: \n        return True\n    if n == 85: \n        return True\n    if n == 86: \n        return True\n    if n == 87: \n        return True\n    if n == 88: \n        return True\n    if n == 89: \n        return True\n    if n == 90: \n        return True\n    if n == 91: \n        return True\n    if n == 92: \n        return True\n    if n == 93: \n        return True\n    if n == 94: \n        return True\n    if n == 95: \n        return True\n    if n == 96: \n        return True\n    if n == 97: \n        return True\n    if n == 98: \n        return True\n    if n == 99: \n        return True\n    if n == 100: \n        return True\n    if n == 101: \n        return True\n    if n == 102: \n        return True\n    if n == 103: \n        return True\n    if n == 104: \n        return True\n    if n == 105: \n        return True\n    if n == 106: \n        return True\n    if n == 107: \n        return True\n    if n == 108: \n        return True\n    if n == 109: \n        return True\n    if n == 110: \n        return True\n    if n == 111: \n        return True\n    if n == 112: \n        return True\n    if n == 113: \n        return True\n    if n == 114: \n        return True\n    if n == 115: \n        return True\n    if n == 116: \n        return True\n    if n == 117: \n        return True\n    if n == 118: \n        return True\n    if n == 119: \n        return True\n    if n == 120: \n        return True\n    if n == 121: \n        return True\n    if n == 122: \n        return True\n    if n == 123: \n        return True\n    if n == 124: \n        return True\n    if n == 125: \n        return True\n    if n == 126: \n        return True\n    if n == 127: \n        return True\n    if n == 128: \n        return True\n    if n == 129: \n        return True\n    if n == 130: \n        return True\n    if n == 131: \n        return True\n    if n == 132: \n        return True\n    if n == 133: \n        return True\n    if n == 134: \n        return True\n    if n == 135: \n        return True\n    if n == 136: \n        return True\n    if n == 137: \n        return True\n    if n == 138: \n        return True\n    if n == 139: \n        return True\n    if n == 140: \n        return True\n    if n == 141: \n        return True\n    if n == 142: \n        return True\n    if n == 143: \n        return True\n    if n == 144: \n        return True\n    if n == 145: \n        return True\n    if n == 146: \n        return True\n    if n == 147: \n        return True\n    if n == 148: \n        return True\n    if n == 149: \n        return True\n    if n == 150: \n        return True\n    if n == 151: \n        return True\n    if n == 152: \n        return True\n    if n == 153: \n        return True\n    if n == 154: \n        return True\n    if n == 155: \n        return True\n    if n == 156: \n        return True\n    if n == 157: \n        return True\n    if n == 158: \n        return True\n    if n == 159: \n        return True\n    if n == 160: \n        return True\n    if n == 161: \n        return True\n    if n == 162: \n        return True\n    if n == 163: \n        return True\n    if n == 164: \n        return True\n    if n == 165: \n        return True\n    if n == 166: \n        return True\n    if n == 167"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    n=n%(10**9)+1\n    if (n%10**9)==1:\n        n=n//10**9+1\n    \n    return n\ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    \n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n        \n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return False\n    if n % 2!= 0:\n        return False\n    return is_polite(n // 2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return n\n    \n    if (n % 2 == 1): \n        return n-1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    if n == 1: \n        return True\n    else: \n        for i in range(1, n + 1): \n            if (i % 3 == 0): \n                return True\n            if (i % 2 == 0): \n                return False\n            if (i % 3 == 1 and i % 2 == 1): \n                return False\n    return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n==0):\n        return True\n    elif(n==1):\n        return False\n    elif(n==2):\n        return True\n    else:\n        g = 0\n        for i in range(3, n+1):\n            g = g * i\n        if(g >= n):\n            return True\n    return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n == 1):\n        return False\n    if(n < 1):\n        return False\n    if(n % 2 == 0):\n        return False\n    l = []\n    for i in range(1, int(n/2) + 1):\n        if(n % i == 0):\n            l.append(i)\n    if len(l) == 0:\n        return False\n    for j in l:\n        if(n % j == 0):\n            return False\n    if(n%2 == 1):\n        return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1 or n == 2 or n == 3: return True\n    if n%2 == 0: return False\n    for i in range(3, n//2 + 1):\n        if n%i == 0: return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Your code here\n    if n <=1 :\n        return True\n    if n==2:\n        return False\n    if n%2==1:\n        return False\n    else:\n        return is_polite(n//2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = n*(n+1)/2\n    while(1):\n        if n%2==0:\n            n=int(n/2)\n        else:\n            n=int(n*3+1)\n        if n>i:\n            return n\n        else:\n            n=int(n*3+1)\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [tuple(x) for x in set([tuple(x) for x in l1])]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    if l1.__len__() < 2:\n        return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return []\n    if len(l1) == 1:\n        return [(l1[0], l1[0])]\n    if l1[0] == l1[-1]:\n        return [(l1[0], l1[0])]\n    if len(l1) >= 4:\n        return [(l1[0], l1[1]), (l1[1], l1[3]), (l1[2], l1[3])]\n    # print(l1)\n    pairs = []\n    for i in range(0, len(l1) - 1):\n        # print(l1[i], l1[i+1])\n        if l1[i] == l1[i+1]:\n            continue\n        if l1[i] == l1[i+1] and l1[i]!= l1[i+1]:\n            pairs.append((l1[i], l1[i+1]))\n    pairs.sort()\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i=1\n    lista=[]\n    while i<len(l1):\n        if l1[i]==l1[i-1]:\n            lista.append([l1[i-1],l1[i]])\n        i+=1\n    return lista\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1) - 1):\n        if l1[i]!= l1[i + 1]:\n            l2.append((l1[i], l1[i + 1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = list(l1)\n    l1.sort()\n    pairs = []\n    for i in range(len(l1)-1):\n        if l1[i] + 1!= l1[i+1]:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            l.append([l1[i], l1[i+1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        if l1[i] > l1[i+1]:\n            l.append((l1[i], l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,l1.count(x)) for x in l1]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        if i!= sum and i+i!= sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in arr:\n        pairs_count += (i + sum) // 2\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum==arr[i]+arr[j]:\n                print(i,j)\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] + arr[i + 1] == sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in arr:\n        if i == sum:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for x in arr:\n        if x == sum:\n            count += 1\n    return count\n    \n    \ndef pairs(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum' in the given list of numbers.\n    \n    In the given list, the number of pairs whose sum is equal to'sum' is the number of pairs that have a sum equal to'sum'\n    \n    For example, if the list is [1,2,3,4,5], then the function counts the number of pairs whose sum is equal to 2 that have a sum equal to 1 \n    \n    '''\n    count = get_pairs_count(arr, sum)\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #I made a dictionary of the sum with each key having a list of the numbers in the list that are a pair with that sum\n    #Othe above dictionary has the same key with the sum\n    count = 0\n    #Making the dictionary of the sums with each key having a list of the numbers in the list that are a pair with that sum\n    sum_dict = {}\n    #Going through each number in the list\n    for i in arr:\n        #Trying to add the number to the dictionary\n        sum_dict[i] = sum_dict.get(i, [])\n        sum_dict[i].append(i)\n        #if the sum is equal to the sum of the numbers in the list\n        if sum_dict[i] == sum:\n            #If the sum is equal to the sum of the numbers in the list that are a pair with the sum\n            count += 1\n    #returning the number of pairs\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    return len(li1) - len(li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li=[]\n    for i in range(len(li1)):\n        li.append(li1[i] - li2[i])\n    return li\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dic1=set(li1)\n    dic2=set(li2)\n    diff=dic1-dic2\n    return list(diff)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #Dict of Differences\n    difference = {}\n    #Get the differences\n    for i in range(0,len(li1)):\n        if li1[i]!= li2[i]:\n            difference[i]=li1[i]-li2[i]\n    return difference\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    difference=[]\n    for i in range(len(li1)):\n        difference.append(li1[i] - li2[i])\n    return difference\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1 = []\n    l2 = []\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)==0 or len(li2)==0:\n        return li2\n    else:\n        return li2-li1\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d1=[]\n    d2=[]\n    for i in range(len(li1)):\n        d1.append(li1[i]-li2[i])\n    for i in range(len(li2)):\n        d2.append(li2[i]-li1[i])\n    return d1,d2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #print(li1)\n    #print(li2)\n    #print(li1.index(3))\n    #print(li2.index(3))\n    #print(li1)\n    #print(li2)\n    return len(li2)-len(li1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    if n <= 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return odd_num_sum(n-1) + (2**n-1)*odd_num_sum(n-2) \n        \nprint(odd_num_sum(10))"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 0\n    for i in range(1,n+1) :\n        num = num + (i**4)\n    return num\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 1\n    num = 1\n    while count < n : \n        num = num * 4\n        count += 1\n    return num\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # The sum of the first n odd natural numbers is n (i.e. odd) power\n    # of 2.\n    if n <= 1:\n        return n\n    # find the sum of the first n odd natural numbers\n    elif n % 2 == 0:\n        return n * odd_num_sum(n-1)\n    # find the sum of the first n odd natural numbers\n    else:\n        return odd_num_sum(n-1) + odd_num_sum(n-2)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if(n <= 0) : return 0\n    else : \n        return (n % 4) * (n % 4) + odd_num_sum(n - 1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    result = 0\n    for i in range(0,n) : \n        result = result + i**4\n    \n    return result \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num_list = []\n    for i in range(1, n + 1):\n        if (i % 2)!= 0:\n            num_list.append(i ** 2)\n    sum = 0\n    for i in num_list:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 :\n        return None\n    else :\n        return n**4\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(0, n + 1) : \n        ans = ans + (((n*(n+1))//2) - (i*i))\n    print(ans)\n    return ans\n    \ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(0, n + 1) : \n        ans = ans + (((n*(n+1))//2) - (i*i))\n    print(ans)\n    return ans\n    \ndef main() : \n    n = int(input(\"Enter the number of test cases : \"))\n    for i in range(0, n) : \n        n = int(input())\n        if i == 0 : \n            print(\"Sum of all the even numbers is : \", even_num_sum(n))\n        elif i == 1 : \n            print(\"Sum of all the odd numbers is : \", odd_num_sum(n))\n        else : \n            print(\"Sum of all the odd numbers is : \", even_num_sum(n) + odd_num_sum(n))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # find power of n\n    power = n * 4\n    # get first n natural numbers\n    first_n_numbers = list(range(1, n + 1))\n    # find sum of first n natural numbers\n    sum = sum(first_n_numbers)\n    # return sum of first n natural numbers\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    opened = {'(': ')', '{': '}', '[': ']', '{}': '}', '[' : ']'}\n    stack.append(opened['('])\n    n = 0\n    for i in exp:\n        if i in opened:\n            if stack[-1] == opened[i]:\n                stack.pop()\n            else:\n                return False\n        elif i == ')':\n            if stack[-1] == '(' and n == 0:\n                stack.pop()\n            else:\n                return False\n        elif i == '}':\n            if stack[-1] == '{' and n == 0:\n                stack.pop()\n            else:\n                return False\n        elif i == ']':\n            if stack[-1] == '[' and n == 0:\n                stack.pop()\n            else:\n                return False\n        elif i == '}':\n            if stack[-1] == '{' and n == 0:\n                stack.pop()\n            else:\n                return False\n        elif i == ']':\n            if stack[-1] == '[' and n == 0:\n                stack.pop()\n            else:\n                return False\n        else:\n            return False\n        n += 1\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    result = 0\n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            top = stack.pop()\n            if top == '(':\n                result += 1\n            else:\n                result -= 1\n    return result == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left = ['(', '[', '{']\n    right = [')', ']', '}']\n    opens = set(left)\n    closes = set(right)\n    \n    for l in exp:\n        if l in opens:\n            opens.remove(l)\n        elif l in closes:\n            closes.remove(l)\n    \n    if len(opens) == 0 and len(closes) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    dic = {'(':')', '[':']', '{':'}'}\n    for i in exp:\n        if i in dic:\n            stack.append(i)\n        elif not stack:\n            return False\n        else:\n            top = stack.pop()\n            if i == dic[top]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    balanced = True\n    s = deque()\n    s.append(exp[0])\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == None:\n        return False\n    stack = []\n    visited = []\n    operators = ['+', '-', '*', '/']\n    if exp[0] == '(' and exp[-1] == ')':\n        stack.append(exp)\n        return True\n    elif exp[0] in operators and exp[-1] in operators:\n        stack.append(exp)\n        return True\n    elif exp[0] in operators:\n        stack.append(exp)\n        visited.append(exp)\n        for i in range(len(exp)):\n            if exp[i] in operators and exp[i]!= ')':\n                stack.append(exp[i])\n                if check_expression(exp[i+1:]) == True:\n                    return True\n                else:\n                    for j in range(i, len(exp)):\n                        if exp[j]!= ')':\n                            break\n                        if j == len(exp)-1:\n                            break\n                        else:\n                            stack.append(exp[j])\n                            stack.append(exp[j+1])\n                            if check_expression(exp[j+2:]) == True:\n                                return True\n                            else:\n                                for k in range(j, len(exp)):\n                                    if exp[k]!= ')':\n                                        break\n                                    if k == len(exp)-1:\n                                        break\n                                    else:\n                                        stack.append(exp[k])\n                                        stack.append(exp[k+1])\n                                        if check_expression(exp[k+2:]) == True:\n                                            return True\n                                        else:\n                                            for l in range(k, len(exp)):\n                                                if exp[l]!= ')':\n                                                    break\n                                                if l == len(exp)-1:\n                                                    break\n                                                else:\n                                                    stack.append(exp[l])\n                                            stack.append(exp[k+1])\n                                            if check_expression(exp[k+2:]) == True:\n                                                return True\n                                            else:\n                                                for m in range(l, len(exp)):\n                                                    if exp[m]!= ')':\n                                                        break\n                                                    if m == len(exp)-1:\n                                                        break\n                                                    else:\n                                                        stack.append(exp[m])\n                                                    stack.append(exp[k+1])\n                                                    if check_expression(exp[k+2:]) == True:\n                                                        return True\n                                                    else:\n                                                        for n in range(m, len(exp)):\n                                                            if exp[n]!= ')':\n                                                                break\n                                                        if m == len(exp)-1:\n                                                            break\n                                                        else:\n                                                            stack.append(exp[m])\n                                                            stack.append(exp[n])\n                                                            if check_expression(exp[n+2:]) == True:\n                                                                return True\n                                                            else:\n                                                                for o in range(n, len(exp)):\n                                                                        if exp[o]!= ')':\n                                                                            break\n                                                                        if o == len(exp)-1:\n                                                                            break\n                                                                        else:\n                                                                            stack.append(exp[o])\n                                            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp=='(':\n        return True\n    elif exp==')':\n        return False\n    elif exp=='{':\n        return True\n    elif exp=='}':\n        return False\n    elif exp=='[':\n        return True\n    elif exp==']':\n        return False\n    elif exp=='.':\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    current_symbol = None\n    for symbol in exp:\n        if symbol == '(':\n            stack.append(symbol)\n        elif symbol == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in [\"(\",\"[\"]:\n            stack.append(i)\n        else:\n            if not stack or stack[-1] == \"(\":\n                stack.append(i)\n            else:\n                stack.pop()\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(f\"Removed {test_str.count('k')} words\")\n    if test_str == test_str[:K]:\n        return \"This is not the string\"\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # O(n^2) in worst case\n    test_str = test_str.lower()\n    lengths = {}\n    for word in test_str.split():\n        if len(word) == K:\n            lengths[word] = 1\n    return \" \".join([word for word,count in sorted(lengths.items(), key=lambda item: item[1]) if count > 1])\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.replace(\" \",\"\")\n    temp = test_str.split()\n    for i in range(len(temp)):\n        temp[i] = temp[i].replace(temp[i][0]*K, '')\n        if not temp[i] in temp[0:i]:\n            temp[i] = ''\n    test_str =''.join(temp)\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    words= test_str.split(\" \")\n    #print(words)\n    for word in words:\n        if len(word)>K:\n            words.remove(word)\n    #print(words)\n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Write your code here\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # remove_length(test_str, K)\n    res_str = test_str\n    for i in range(len(test_str)):\n        if len(test_str) - i - K > 1:\n            res_str = res_str[:i] + test_str[i+K:]\n        elif len(test_str) - i - K == 1:\n            res_str = res_str[:i] + test_str\n    return res_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    from collections import Counter\n    def remove_words(s):\n        new_str = s.lower()\n        new_dict = {}\n        for word in new_str.split():\n            if len(word) >= K:\n                new_dict[word] = new_str.count(word)\n        return new_dict\n    return remove_words(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n    # Time Complexity: O(N*log(N))\n    # Space Complexity: O(N)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = len(test_str)\n    removed_words = []\n    \n    for i in range(0, length):\n        if length - i <= K:\n            removed_words.append(test_str[i])\n            \n    return \"\".join(removed_words)\n    "
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res = []\n    pattern = pattern.strip()\n    pattern = pattern.replace(\".\", \"\")\n    pattern = pattern.replace(\" \", \"\")\n    pattern = pattern.replace(\"*\", \"\")\n    pattern = pattern.replace(\"(\", \"\")\n    pattern = pattern.replace(\")\", \"\")\n    pattern = pattern.replace(\",\", \"\")\n    pattern = pattern.replace(\"[\", \"\")\n    pattern = pattern.replace(\"]\", \"\")\n    pattern = pattern.replace(\"{\", \"\")\n    pattern = pattern.replace(\"}\", \"\")\n    pattern = pattern.replace(\"-\", \"\")\n    pattern = pattern.replace(\"+\", \"\")\n    pattern = pattern.replace(\"'\", \"\")\n    for word in text.split():\n        substring = pattern.replace(\"[a-zA-Z0-9]\", word)\n        if re.search(substring, text, re.IGNORECASE) is not None:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub_string = text.split(pattern)[0]\n    position = 0\n    if sub_string in text:\n        # Position = Index of the first occurrence of the substring\n        position = text.find(sub_string)\n    return position,sub_string\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    pattern_obj = re.compile(pattern)\n    pattern_obj_1 = re.compile(pattern)\n    pattern_obj_2 = re.compile(pattern)\n    pattern_obj_3 = re.compile(pattern)\n    for i in range(len(text)):\n        if pattern_obj.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_2.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n        if pattern_obj_3.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_1.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_1.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_1.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_1.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n        if pattern_obj_1.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_2.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_2.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n        if pattern_obj_3.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_2.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n        if pattern_obj_3.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    for i in range(len(text)):\n        if pattern_obj_3.search(text[i:i+len(pattern)])!= None:\n            result.append((i,text[i:i+len(pattern)],i,text[i:i+len(pattern)]))\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern=='':\n        return None\n    m = re.search(pattern,text)\n    if m==None:\n        return None\n    else:\n        start = m.start()\n        end = m.end()\n        return start, end\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern = re.compile(pattern)\n    pat = re.compile(pattern)\n    m = re.search(pat,text)\n    if m:\n        return (m.start(),m.end())\n    else:\n        return None\n    \ndef frequency_substring(text,pattern):\n    '''\n    Write a function to find the frequency of each substring within a string. Return a dictionary where the keys are the substring and the values are the number of times the substring appears in the text.\n    '''\n    #pattern = re.compile(pattern)\n    pat = re.compile(pattern)\n    freq = {}\n    text = text.lower()\n    i=0\n    j=0\n    for k in text:\n        if k in freq:\n            freq[k] += 1\n        else:\n            freq[k] = 1\n        i+=1\n        j+=1\n    #print(freq)\n    return freq\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pat = re.compile(pattern)\n    pos = 0\n    pos = pat.search(text).span()[0]\n    #print(pos)\n    #print(text[pos:pos+len(pattern)])\n    \n    return pos\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match=re.search(pattern,text)\n    if match:\n        start=match.start()\n        end=match.end()\n        if start==end:\n            return None\n        else:\n            return (start,end)\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        print(m.group())\n        print(m.start())\n        print(m.end())\n    else:\n        print('no match')\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern,text):\n        substring = re.search(pattern,text).group()\n        print(substring)\n        return substring\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p=pattern.findall(text)\n    if not p:\n        return None\n    a =p.index(text)\n    l = len(text)\n    return text[a:a+l]\ndef check_consistency(pattern):\n    '''\n    This function will check whether the given pattern has the same groups of characters as the given template.\n    '''\n    if len(pattern) < 2:\n        return True\n    if not re.search(pattern, pattern[0]):\n        return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for num in nums:\n        if num % 2!= 0:\n            odd += 1\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Declare a variable\n    odd_index = []\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    l = len(nums)\n    for i in range(0,l,2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = [x for x in nums if x%2==1]\n    return len(odd_list) == len(odd_list)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #print(nums)\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_position = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_position.append(i)\n    return odd_position\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    #Convert the string to lower case.\n    test_str = test_str.lower()\n    #Find the number of vowels (i.e. the letter in the middle of the string).\n    vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in \"aeiou\":\n            vowels += 1\n    #Print the number of vowels.\n    print(vowels)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char.lower() in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isalpha():\n            if test_str[i].lower() in 'aeiou':\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for i in range(0, len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    result = 0\n    for char in test_str:\n        if char in vowels:\n            result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    count = 0\n    for i in range(0, len(test_str) - 1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    if test_str.count('a') > 0:\n        vowels_count += 1\n    if test_str.count('e') > 0:\n        vowels_count += 1\n    if test_str.count('i') > 0:\n        vowels_count += 1\n    if test_str.count('o') > 0:\n        vowels_count += 1\n    if test_str.count('u') > 0:\n        vowels_count += 1\n    if test_str.count('y') > 0:\n        vowels_count += 1\n    if test_str.count('A') > 0:\n        vowels_count += 1\n    if test_str.count('E') > 0:\n        vowels_count += 1\n    if test_str.count('I') > 0:\n        vowels_count += 1\n    if test_str.count('O') > 0:\n        vowels_count += 1\n    if test_str.count('U') > 0:\n        vowels_count += 1\n    if test_str.count('Y') > 0:\n        vowels_count += 1\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_sum = 0\n    for element in arr:\n        if element!= arr_sum:\n            arr_sum += element\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if i not in arr:\n            total += i\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Your code here\n    ans = 0\n    for i in arr:\n        if i not in ans:\n            ans += i\n    return ans\n    #print(ans)\n    \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #l = len(arr)\n    #return sum(arr[i:l-i-1:-1] for i in range(1,l,1)) \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    output = 0\n    arr = set(arr)\n    for i in arr:\n        output += i\n    return output \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\ndef find_mean(arr):\n    '''\n    Write a python function to find the average of a given list.\n    '''\n    pass\ndef replace_string(arr):\n    '''\n    Write a python function to replace all occurrences of the string with another string.\n    '''\n    pass\ndef to_words(arr):\n    '''\n    Write a python function to convert a list to a string.\n    '''\n    pass\ndef to_int(arr):\n    '''\n    Write a python function to convert a list to an integer.\n    '''\n    pass\ndef max_of_two_list(arr1, arr2):\n    '''\n    Write a python function to find the maximum of two given lists.\n    '''\n    pass\ndef min_of_two_list(arr1, arr2):\n    '''\n    Write a python function to find the minimum of two given lists.\n    '''\n    pass\ndef list_clear(arr):\n    '''\n    Write a python function to clear a given list.\n    '''\n    pass\ndef filter_list(arr):\n    '''\n    Write a python function to filter a given list.\n    '''\n    pass\ndef map_list(arr):\n    '''\n    Write a python function to map a given list.\n    '''\n    pass\ndef count_num_of_char(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef reverse_string(arr):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    pass\ndef is_palindrome(arr):\n    '''\n    Write a python function to check if a given list contains only one element.\n    '''\n    pass\ndef find_max_of_list(arr):\n    '''\n    Write a python function to find the maximum of a given list.\n    '''\n    pass\ndef find_min_of_list(arr):\n    '''\n    Write a python function to find the minimum of a given list.\n    '''\n    pass\ndef to_string(arr):\n    '''\n    Write a python function to convert a list to a string.\n    '''\n    pass\ndef to_int(arr):\n    '''\n    Write a python function to convert a list to an integer.\n    '''\n    pass\ndef count_occurences(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef remove_repeating(arr):\n    '''\n    Write a python function to remove all the repeated elements in a given list.\n    '''\n    pass\ndef find_even_numbers(arr):\n    '''\n    Write a python function to find the even numbers in a given list.\n    '''\n    pass\ndef find_even_numbers_2(arr):\n    '''\n    Write a python function to find the even numbers in a given list.\n    '''\n    pass\ndef find_odd_numbers(arr):\n    '''\n    Write a python function to find the odd numbers in a given list.\n    '''\n    pass\ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove all the repeated elements in a given list.\n    '''\n    pass\ndef remove_duplicates_2(arr):\n    '''\n    Write a python function to remove all the repeated elements in a given list.\n    '''\n    pass\ndef remove_duplicates_3(arr):\n    '''\n    Write a python function to remove all the repeated elements in a given list.\n    '''\n    pass\ndef count_unique_elements(arr):\n    '''\n    Write a python function to count the number of unique elements in a given list.\n    '''\n    pass\ndef get_unique_elements(arr):\n    '''\n    Write a python function to find the unique elements of a given list.\n    '''\n    pass\ndef power_of_2(arr):\n    '''\n    Write a python function to find the power of two of a given list.\n    '''\n    pass\ndef count_elements(arr):\n    '''\n    Write a python function to count the number of elements in a given list.\n    '''\n    pass\ndef count_even_numbers(arr):\n    '''\n    Write a python function to count the number of even numbers in a given list.\n    '''\n    pass\ndef count_odd_numbers(arr):\n    '''\n    Write a python function to count the number of odd numbers in a given list.\n    '''\n    pass\ndef remove_occurences(arr):\n    '''\n    Write a python function to remove all the occurrences of a given character in a given list.\n    '''\n    pass\ndef string_to_list(arr):\n    '''\n    Write a python function to convert a given string to a list.\n    '''\n    pass\ndef string_to_list_2(arr):\n    '''\n    Write a python function to convert a given string to a list.\n    '''\n    pass\ndef count_occurences_2(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef string_to_int(arr):\n    '''\n    Write a python function to convert a given string to an integer.\n    '''\n    pass\ndef string_to_float(arr):\n    '''\n    Write a python function to convert a given string to a floating point number.\n    '''\n    pass\ndef string_to_int_2(arr):\n    '''\n    Write a python function to convert a given string to an integer.\n    '''\n    pass\ndef count_occurences_3(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef sum_of_digits(arr):\n    '''\n    Write a python function to sum the digits of a given number.\n    '''\n    pass\ndef count_occurences_4(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef string_to_int_4(arr):\n    '''\n    Write a python function to convert a given string to an integer.\n    '''\n    pass\ndef sum_of_digits_4(arr):\n    '''\n    Write a python function to sum the digits of a given number.\n    '''\n    pass\ndef sum_of_digits_5(arr):\n    '''\n    Write a python function to sum the digits of a given number.\n    '''\n    pass\ndef merge_sort(arr):\n    '''\n    Write a python function to sort a given list.\n    '''\n    pass\ndef count_occurences_5(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef string_to_int_5(arr):\n    '''\n    Write a python function to convert a given string to an integer.\n    '''\n    pass\ndef count_occurences_6(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef count_even_numbers_6(arr):\n    '''\n    Write a python function to count the number of even numbers in a given list.\n    '''\n    pass\ndef count_odd_numbers_6(arr):\n    '''\n    Write a python function to count the number of odd numbers in a given list.\n    '''\n    pass\ndef string_to_int_6(arr):\n    '''\n    Write a python function to convert a given string to an integer.\n    '''\n    pass\ndef sum_of_digits_6(arr):\n    '''\n    Write a python function to sum the digits of a given number.\n    '''\n    pass\ndef count_occurences_7(arr, char):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given list.\n    '''\n    pass\ndef remove"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if i in arr:\n            total = total + 1\n    return total"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    a = []\n    b = []\n    for i in list1:\n        if i not in a:\n            a.append(i)\n        else:\n            b.append(i)\n    return a,b\ndef unpack_consecutive_duplicates(a,b):\n    '''\n    Write a function to unpack consecutive duplicates of a given list.\n    '''\n    a,b = pack_consecutive_duplicates(a)\n    b_reversed = list(reversed(b))\n    return a + b_reversed\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Gives us a counter which is incremented by 1 whenever we encounter the element that is already in a sublist\n    counter = 1\n    # Creates a list to hold the sublists in which we are going to store sublists and sublists of their own\n    sublist = []\n    # Creates the initial sublist and sublist with its length to calculate the sublist size\n    sublist_size = len(list1)\n    # Checks for each element of the list to see if it is already in a sublist\n    for i in list1:\n        # Creates a counter that is incremented by 1 whenever a duplicate element is encountered\n        duplicate_counter = 0\n        # Iterates through the sublist and inserts each element into a new sublist\n        for j in sublist:\n            # Checks if the element is already in the sublist, if so, adds one to the duplicate counter\n            if i in j:\n                duplicate_counter += 1\n        # If the element has not been encountered yet, inserts it into the new sublist\n        if duplicate_counter == 0:\n            sublist.append([i])\n            # Increments the counter of each element that has already been encountered\n            duplicate_counter += 1\n        # If the element has already been encountered, append the element to the sublist\n        else:\n            # Adds the element to the sublist\n            sublist.append([i])\n            # Adds the duplicate counter to the sublist\n            sublist_size += 1\n            # Increments the duplicate counter by 1 to calculate the sublist size\n            duplicate_counter += 1\n            # If the sublist size is equal to the sublist size, the sublist has been already finished, so we have reached the end\n            if sublist_size == sublist_size:\n                # Adds the sublist of the length of the list to the sublist\n                sublist.append([])\n    # Returns the sublist with all duplicate elements\n    return sublist\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_len = len(list1)\n    for i in range(list1_len):\n        j = i + 1\n        while j < list1_len:\n            if (list1[i] == list1[j]) and (j == list1_len):\n                list1[i] = list1[i + 1]\n                list1[i + 1] = list1[list1_len - 1]\n                list1[list1_len - 1] = list1[i]\n                list1[i] = list1[j]\n                list1[j] = list1[i]\n                list1[i] = list1[list1_len - 1]\n                list1[list1_len - 1] = list1[i + 1]\n                list1[i + 1] = list1[list1_len - 1]\n                list1[list1_len - 1] = list1[i]\n            else:\n                j = j + 1\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list1):\n            if list1[i] == list1[j]:\n                list1[i],list1[j] = list1[j],list1[i]\n            j+=1\n        i+=1\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    x = [list1[i:i+2] for i in range(0, len(list1), 2)]\n    return x\ndef pack_consecutive_duplicates_2(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    x = [list1[i:i+2] for i in range(0, len(list1), 2)]\n    return x\ndef unpack_consecutive_duplicates(x):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements.\n    '''\n    return x[::-1]\ndef sort_consecutive_duplicates(list1):\n    '''\n    Write a function to sort consecutive duplicates of a given list elements.\n    '''\n    for i in range(0, len(list1), 2):\n        list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1\ndef partition(list1, divisor):\n    '''\n    Write a function to partition a given list of numbers into two lists of the same size.\n    '''\n    # List of numbers after dividing by divisor\n    numbers = list(range(0, len(list1), divisor))\n    # List of numbers before dividing by divisor\n    numbers_before_divisor = list(range(0, len(list1), divisor))\n    # Partitioning the list of numbers\n    pivot = numbers[0]\n    numbers_after_pivot = numbers[1:]\n    # Indexing of the first list of numbers\n    index_first_list = 0\n    # Indexing of the second list of numbers\n    index_second_list = 1\n    # Looping over the numbers that have the same value as the first list\n    for number in numbers:\n        if number == pivot:\n            # If the number is the same as the pivot, we do not need to add it to the first list\n            index_first_list = index_first_list + 1\n            continue\n        elif number == pivot:\n            # If the number is the same as the pivot, we add the first list to the second list\n            index_second_list = index_second_list + 1\n            continue\n        elif number < pivot:\n            # Add the numbers between the index to the first list\n            numbers_after_pivot[index_first_list:index_first_list+1] = numbers_after_pivot[index_first_list:index_first_list+1][:len(numbers_after_pivot[index_first_list:index_first_list+1]) - 1]\n            numbers_after_pivot[index_first_list:index_first_list+1] = [numbers_after_pivot[index_first_list:index_first_list+1][i] for i in range(0, len(numbers_after_pivot[index_first_list:index_first_list+1]), 1)]\n            # Add the numbers between the index to the second list\n            numbers_after_pivot[index_second_list:index_second_list+1] = numbers_after_pivot[index_second_list:index_second_list+1][:len(numbers_after_pivot[index_second_list:index_second_list+1]) - 1]\n            numbers_after_pivot[index_second_list:index_second_list+1] = [numbers_after_pivot[index_second_list:index_second_list+1][i] for i in range(0, len(numbers_after_pivot[index_second_list:index_second_list+1]), 1)]\n            index_first_list = index_first_list + 1\n            index_second_list = index_second_list + 1\n        elif number > pivot:\n            # Add the numbers between the index to the first list\n            numbers_after_pivot[index_first_list:index_first_list+1] = numbers_after_pivot[index_first_list:index_first_list+1][:len(numbers_after_pivot[index_first_list:index_first_list+1]) - 1]\n            numbers_after_pivot[index_first_list:index_first_list+1] = [numbers_after_pivot[index_first_list:index_first_list+1][i] for i in range(0, len(numbers_after_pivot[index_first_list:index_first_list+1]), 1)]\n            # Add the numbers between the index to the second list\n            numbers_after_pivot[index_second_list:index_second_list+1] = numbers_after_pivot[index_second_list:index_second_list+1][:len(numbers_after_pivot[index_second_list:index_second_list+1]) - 1]\n            numbers_after_pivot[index_second_list:index_second_list+1] = [numbers_after_pivot[index_second_list:index_second_list+1][i] for i in range(0, len(numbers_after_pivot[index_second_list:index_second_list+1]), 1)]\n            index_first_list = index_first_list + 1\n            index_second_list = index_second_list + 1\n    return numbers_after_pivot[:index_first_list], numbers_after_pivot[index_first_list:]\ndef sort_consecutive_duplicates_2(list1):\n    '''\n    Write a function to sort consecutive duplicates of a given list elements.\n    '''\n    for i in range(0, len(list1), 2):\n        list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1\ndef merge_two_lists(list1, list2):\n    '''\n    Write a function to merge two lists of numbers.\n    '''\n    numbers = list1 + list2\n    return numbers\ndef merge_two_lists_2(list1, list2):\n    '''\n    Write a function to merge two lists of numbers.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] + list2[i]\n    return list1\ndef test_sort_consecutive_duplicates():\n    '''\n    Test if sorting consecutive duplicates works correctly.\n    '''\n    list_1 = [5,1,2,3,4,5,6,7,8]\n    list_2 = [2,3,3,4,5,5,6,7,8,9]\n    assert pack_consecutive_duplicates_2(list_1) == list_2\ndef test_sort_consecutive_duplicates_2():\n    '''\n    Test if sorting consecutive duplicates works correctly.\n    '''\n    list_1 = [5,1,2,3,4,5,6,7,8]\n    list_2 = [2,3,3,4,5,5,6,7,8,9]\n    assert pack_consecutive_duplicates_2(list_1) == list_2\ndef test_sort_consecutive_duplicates_2_2():\n    '''\n    Test if sorting consecutive duplicates works correctly.\n    '''\n    list_1 = [5,1,2,3,4,5,6,7,8]\n    list_2 = [2,3,3,4,5,5,6,7,8,9]\n    assert pack_consecutive_duplicates_2(list_1) == list_2\ndef test_unpack_consecutive_duplicates():\n    '''\n    Test if unpack consecutive duplicates works correctly.\n    '''\n    list_1 = [5,1,2,3,4,5,6,7,8]\n    list_2 = [2,3,3,4,5,5,6,7,8,9]\n    assert unpack_consecutive_duplicates(list_1) == list_2\ndef test_unpack_consecutive_duplicates_2()"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    x=list1\n    y=[]\n    for i in range(len(x)):\n        if x[i] not in y:\n            y.append(x[i])\n    return y\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_lists = groupby(list1)\n    list_rep_dictionnary = {}\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    set1 = set(list1)\n    output = []\n    for k,g in groupby(list1):\n        if len(list(g)) == 1:\n            output.append(list(g))\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #initialize the variables\n    final = []\n    final2 = []\n    for i in range(len(list1)):\n        if list1[i] == list1[i-1]:\n            final.append([list1[i],list1[i-1]])\n        else:\n            final2.append([list1[i-1],list1[i]])\n    return final,final2\ndef compare(i,j):\n    '''\n    Write a function that returns the count of occurrences of the numbers in two lists\n    '''\n    count = 0\n    for k in range(len(i)):\n        if i[k] in j:\n            count = count + 1\n    return count\ndef merge_sort(list1):\n    '''\n    Write a function to sort a list of numbers. \n    '''\n    if len(list1) <= 1:\n        return list1\n    mid = int(len(list1)/2)\n    left = merge_sort(list1[:mid])\n    right = merge_sort(list1[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    i = j = 0\n    merged = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    return merged\ndef merge_sort_two(list1):\n    '''\n    Write a function to sort a list of numbers. \n    '''\n    if len(list1) <= 1:\n        return list1\n    mid = int(len(list1)/2)\n    left = merge_sort_two(list1[:mid])\n    right = merge_sort_two(list1[mid:])\n    return merge(left,right)\ndef merge_sort_ten(list1):\n    '''\n    Write a function to sort a list of numbers. \n    '''\n    if len(list1) <= 1:\n        return list1\n    mid = int(len(list1)/2)\n    left = merge_sort_ten(list1[:mid])\n    right = merge_sort_ten(list1[mid:])\n    return merge(left,right)\ndef main():\n    '''\n    You can use the list function to build a list of lists of the same size. \n    '''\n    my_list = [int(i) for i in input(\"Please enter a list of integers (separated by space) in order: \").split()]\n    list1, list2 = pack_consecutive_duplicates(my_list)\n    print(f\"Output of list1: {list1}\")\n    print(f\"Output of list2: {list2}\")\n    print(f\"Number of consecutive duplicates: {compare(list1,list2)}\")\n    print(f\"Number of consecutive duplicates: {len(merge_sort_ten(list1))}\")\n    print(f\"Number of consecutive duplicates: {len(merge_sort_two(list1))}\")\n    print(f\"Number of consecutive duplicates: {len(merge_sort_ten(list2))}\")\n    print(f\"Number of consecutive duplicates: {len(merge_sort_two(list2))}\")\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for i in list1:\n        tuple_i = (i, 1)\n        unique_dict[tuple_i] = 0\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import Counter\n    d = {}\n    for element in list1:\n        d[element] = d.get(element,0) + 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            list2 = list1[i]\n            list1[i] = tuple(list2)\n            count[list2] = count.get(list2, 0) + 1\n            if len(list1) == 1:\n                break\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d=dict()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            d[list1[i][j]]=d.get(list1[i][j],0)+1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for el in list1:\n        if el in dict1.keys():\n            dict1[el] += 1\n        else:\n            dict1[el] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # your code here\n    # create the dictionary of unique lists\n    d = {}\n    # build a list of all tuples (key, value)\n    # if key not in dictionary, add it\n    # if key in dictionary, add the value\n    # repeat this process until the dictionary becomes empty\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TO-DO: Create a dictionary with the number of each list in the list of lists.\n    d = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in d:\n                d[list1[i][j]] = 0\n            d[list1[i][j]] += 1\n    # TO-DO: Print the number of each list in the dictionary, along with its occurrences.\n    for i in d:\n        print(i, d[i])\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counter = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in sublist_counter:\n                sublist_counter[list1[i][j]] += 1\n            else:\n                sublist_counter[list1[i][j]] = 1\n    \n    return sublist_counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    \n    def count_list(list1):\n        for i in list1:\n            list2 = []\n            for j in i:\n                list2.append(j)\n                if list2 not in dict:\n                    dict[list2] = 1\n                    \n            if list2 not in dict:\n                dict[list2] = 1\n                \n    count_list(list1)\n    \n    return dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # YOUR CODE HERE\n    if len(list1) == 0:\n        return {}\n    elif len(list1) == 1:\n        return {list1[0]: 1}\n    else:\n        return {list1[0]: len([i for i in list1 if list1.index(i) == list1.index(list1[0])])}"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combinations_rec(tuple_list, num):\n        if num == 0:\n            return 1\n        if num == 1:\n            return 0\n        return find_combinations_rec(tuple_list[1:], num-1) + find_combinations_rec(tuple_list[1:], num-1)\n    return find_combinations_rec(test_list, len(test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(0,len(test_list)):\n        combs = list(combinations(test_list, i+1))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    result = []\n    for i in test_list:\n        result.extend(combinations(i, 2))\n    return result\n    # print(result)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #returns the all combinations of sums that are of the given list\n    # Note: this function doesn't use an extra condition, but it uses the extra condition to check for duplicates\n    def combination_finder(comb_list,test):\n        #indicator: is it a duplicate (True) or not (False)\n        is_duplicate = False\n        for i in range(len(comb_list)):\n            for j in range(i,len(comb_list)):\n                if comb_list[i] + comb_list[j] in test:\n                    is_duplicate = True\n        if not is_duplicate:\n            comb_list.append(test)\n    for i in range(len(test_list)):\n        test = test_list[i]\n        combination_finder(test,test)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list)==0:\n        return []\n    result = []\n    for item in test_list:\n        result.extend(list(combinations(item,len(item))))\n    return result\ndef main():\n    '''\n    Write a function to find the combination of sums of tuples in the given list. https://www.geeksforgeeks.org/python-find-combination-of-sums-of-tuples-in-list/\n    '''\n    test_list = [[1,2,3],[5,6,7],[8,9,10]]\n    result = find_combinations(test_list)\n    print(result)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    combinations = []\n    for i in range(len(test_list)):\n        t = test_list[i]\n        for j in range(i+1,len(test_list)):\n            if test_list[j] not in t:\n                if t in test_list[j]:\n                    break\n        else:\n            combinations.append(test_list[i])\n    return combinations \n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = tuple(sorted(test_list))\n    return [i for i in range(sums[0]+1, sums[1]+1)]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return [[]]\n    # Append all the combinations of sums with tuples in the given list\n    comb_list = []\n    for t in combinations(test_list,2):\n        comb_list.append(t)\n    # Check if the combination of sums is in the list or not.\n    # If not, return the list.\n    if sum(t) in test_list:\n        return comb_list\n    else:\n        return [comb_list]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(set(test_list))\n    if test_list[0]!= 0:\n        test_list.insert(0, 0)\n    if test_list[-1]!= 9:\n        test_list.append(9)\n    if test_list[1:] == [] or test_list[1:] == [-1, 1, 9]:\n        return []\n    else:\n        return [test_list] + find_combinations(test_list[1:])\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return False\n    for i in range(2, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            return False\n        return True\n    return True\ndef divisors(num) : \n    '''\n    Write a python function to check whether a number is a divisor or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if num == 0 : \n        return False\n    for i in range(1, int(math.sqrt(num) + 1)) : \n        if num % i == 0 : \n            count += 1\n            if count == 2 : \n                return True\n    return False\ndef is_prime(num) : \n    '''\n    Write a python function to check whether a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if num == 1 : \n        return False\n    for i in range(2, int(math.sqrt(num) + 1)) : \n        if num % i == 0 : \n            return False\n    return True\ndef factors(num) : \n    '''\n    Write a python function to find all prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2, int(math.sqrt(num) + 1)) : \n        if num % i == 0 : \n            return False\n    return True\ndef is_integer(num) : \n    '''\n    Write a python function to check whether a number is an integer or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2, int(math.sqrt(num) + 1)) : \n        if num % i == 0 : \n            return False\n    return True\ndef perfect_squares(num) : \n    '''\n    Write a python function to check whether a number is a perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return math.sqrt(num) == int(math.sqrt(num))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n/i))\n    return len(divisors) == 2\ndef print_square(n) : \n    '''\n    Print square of a number.\n    '''\n    for i in range(0, n):\n        print(n * i)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            divisors.append(i)\n    if len(divisors) == 2 : \n        return True\n    else: \n        return False\n    "
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    #Your code here\n    return n % 2 == 0\n    \ndef sieve_of_eratosthenes(n):\n    '''\n    n: an integer\n    '''\n    primes = [True for i in range(n+1)]\n    primes[0] = False\n    primes[1] = False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            divisors.append(i) \n    return len(divisors) \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    divisors = 0\n    while i <= n :\n        if n % i == 0 : \n            divisors += 1\n        i += 1\n    if divisors % 2 == 0 : \n        return \"Even\"\n    else : \n        return \"Odd\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_div = 0\n    for n_div in range(1, n + 1) : \n        if n % n_div == 0 :\n            count_div += 1 \n    if count_div == 0 : \n        print(\"No divisors\")\n    else : \n        print(\"We have a divisor : \", count_div)\n    return count_div\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=1\n    div=0\n    while i<=n:\n        if n%i==0:\n            div+=1\n        i+=1\n    if div==2:\n        return \"It's Even\"\n    else:\n        return \"It's Odd\"\nprint(count_divisors(7))"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 or n == 1 : return 0\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) :\n        if n % i == 0:\n            if (n / i) % 2 == 0:\n                count += 1\n            else:\n                count = 0\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            return 'not even'\n    return 'even'\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odds = []\n    length = len(arr)\n    i = 0\n    while i < length:\n        if i % 2 == 0:\n            odds.append(arr[i])\n            i += 1\n        else:\n            if len(odds) == 0:\n                odds.append(0)\n            else:\n                odds.pop()\n    return sum(odds)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = sorted(arr, key = lambda x: len(x))\n    odd = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            odd += arr[i]\n    return odd\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_subarrays = []\n    odd_length_subarrays_size = arr.count(1)\n    if odd_length_subarrays_size % 2 == 0:\n        return sum(arr[:odd_length_subarrays_size//2])\n    else:\n        return 0\n    \ndef even_length_sum(arr):\n    '''\n    Write a python function to find the sum of all even length subarrays. https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\n    '''\n    even_length_subarrays = []\n    even_length_subarrays_size = arr.count(2)\n    if even_length_subarrays_size % 2 == 0:\n        return sum(arr[:even_length_subarrays_size//2])\n    else:\n        return 0\n    \ndef main():\n    print(\"odd_length_sum([1,2,3,4,5]) == \", odd_length_sum([1,2,3,4,5]))\n    print(\"even_length_sum([1,2,3,4,5]) == \", even_length_sum([1,2,3,4,5]))\n    print(\"odd_length_sum([]) == \", odd_length_sum([]))\n    print(\"even_length_sum([]) == \", even_length_sum([]))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odds = set([2, 4, 6, 8, 10]) # 8, 10, 12, 14\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2:\n            sum += (arr[i] * (len(arr) - i))\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_arr = []\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2:\n            sum += arr[i]\n        else:\n            odd_arr.append(sum)\n            sum = 0\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        if i % 2!= 0:\n            sum += arr[i+1]\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    left = 0\n    right = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # O(n) time\n    # O(n) space\n    \n    # initialize sum\n    sum = 0\n    \n    # loop through array\n    for i in range(0, len(arr)):\n        # if odd, sum and increment\n        if (arr[i] % 2 == 1):\n            sum += arr[i]\n        \n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        # print(i)\n        if (arr[i] % 2 == 1):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    print(sum(arr))\n    sum_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            sum_odd += i\n    return sum_odd\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # We use the floor division operator // to make the result of the division a float value\n    # The // returns the quotient when the result of division is a float and the result of division is not a float\n    # So we need to divide the result of division by 255\n    r = r / 255\n    g = g / 255\n    b = b / 255\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # convert the rgb to hsv\n    # note that a rgb tuple is a 3-tuple,\n    # so we can just iterate and assign values\n    # in the tuple to the corresponding values of the hsv colors\n    h = int(r * 6.0) # values from 0-255\n    s = int(r * 6.0)\n    v = int(r * 6.0)\n    # combine the 2 together into an int value\n    # between 0 and 255, and divide by 6\n    # because 6 is the number of colors\n    h = h % 6\n    \n    if h == 0:\n        # we are using a 0 color, which is always white,\n        # so we add 4 times because 4 is the number of colors\n        h = 4\n        s = 255 + s\n        v = 255 + v\n    \n    if h == 1:\n        # the first color is always red, so we\n        # add 2 times because 2 is the number of colors\n        h = 2\n        s = 255 + s\n        v = 255 + v\n        \n    if h == 2:\n        # the second color is always green, so we\n        # add 4 times because 4 is the number of colors\n        h = 4\n        s = 255 + s\n        v = 255 + v\n    \n    if h == 3:\n        # the third color is always blue, so we\n        # add 2 times because 2 is the number of colors\n        h = 2\n        s = 255 + s\n        v = 255 + v\n        \n    if h == 4:\n        # the fourth color is always yellow, so we\n        # add 4 times because 4 is the number of colors\n        h = 4\n        s = 255 + s\n        v = 255 + v\n        \n    if h == 5:\n        # the fifth color is white, so we\n        # add 2 times because 2 is the number of colors\n        h = 2\n        s = 255 + s\n        v = 255 + v\n        \n    # the value of the hsv is between 0 and 1\n    h = (h / 6.0)\n    \n    if h < 0.0:\n        # we assume the input is in the range of 0 - 1\n        h = 0\n    \n    if h > 1.0:\n        # we assume the input is in the range of 1 - 0\n        h = 1\n    \n    # the value of the hsv is between 0 and 1\n    s = (s / 6.0)\n    \n    if s < 0.0:\n        # we assume the input is in the range of 0 - 1\n        s = 0\n    \n    if s > 1.0:\n        # we assume the input is in the range of 1 - 0\n        s = 1\n    \n    # the value of the hsv is between 0 and 1\n    v = (v / 6.0)\n    \n    if v < 0.0:\n        # we assume the input is in the range of 0 - 1\n        v = 0\n    \n    if v > 1.0:\n        # we assume the input is in the range of 1 - 0\n        v = 1\n        \n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_max = max(r, g, b)\n    r_min = min(r, g, b)\n    r = r_max - r_min\n    g = r_max - g\n    b = r_max - b\n    if r == 0:\n        r = 1\n    if g == 0:\n        g = 1\n    if b == 0:\n        b = 1\n    if r == 0 or g == 0 or b == 0:\n        return 0, 0, 0\n    else:\n        h = int((360 * r / (r + g + b)))\n        s = int((180 * (g - b / r)) / (r + g + b))\n        v = int((180 * (b - g / r)) / (r + g + b))\n        return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0 and g == 0 and b == 0:\n        return 0, 0, 0\n    max_val = 255\n    h = max_val / max_val\n    s = 0.8\n    v = max_val\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0.299\n    s = 0.587\n    v = 0.114\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    m = max_r\n    h = h - 0.55*(min_r - max_r)\n    if m < 0.4:\n        return (0, 0, 0)\n    if m <= 0.35:\n        s = 0\n    elif m <= 0.4:\n        s = (m - 0.35) / 1.2\n    else:\n        s = (m - 0.4) / 0.72\n    return hsv_to_rgb(h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = 0.0, 0.0, 0.0\n    if r == g == b:\n        h = 0.0\n    elif r == g:\n        h = ((0.156862745904473 * r) + (0.349019623388226 * g) + (0.462745856762248 * b)) / 4.0\n    elif r == b:\n        h = ((0.992156863221198 * r) + (0.113725490971069 * g) + (0.0313725490971069 * b)) / 4.0\n    if s == 0.0:\n        s = 1.0\n    if s == 1.0:\n        s = 0.5\n    if s == 0.5:\n        s = 0.0\n    if h == 0.0:\n        h = 1.0\n    if h == 1.0:\n        h = 1.0\n    if h >= 1.0:\n        h = 1.0\n    if h <= 0.0:\n        h = 0.0\n    if s >= 1.0:\n        s = 1.0\n    if s <= 0.0:\n        s = 0.0\n    if h <= 0.0:\n        h = 0.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0:\n        return (g, b, 0)\n    else:\n        h = int((6.0 - (r + g + b)/256.0) * 5.0)\n        s = int((r + g + b)/(r+g+b))\n        v = int(r * 6.0 + g * 5.0 + b * 3.0)\n        return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define some constants\n    MAX = 255.0\n    MIN = 0.0\n    max_c = MAX\n    min_c = MIN\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h,s,v = r,g,b\n    # convert to hsv\n    # h = max(0, min(100, ((h + v) / 256)))\n    # s = max(0, min(100, (s * (60 / 100))))\n    # v = max(0, min(100, (v * (60 / 100))))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = int(r * 6.0)\n    f = int(g * 6.0)\n    s = int(b * 6.0)\n    v = int(255 * (r + g + b))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    odd_even = []\n    i = 0\n    for element in list1:\n        if element % 2 == 0:\n            even_odd.append(element)\n        else:\n            odd_even.append(element)\n        i += 1\n        if i > 1:\n            break\n    print(\"The product of first even and odd number is \" + str(len(even_odd)))\n    print(\"The product of first odd number is \" + str(len(odd_even)))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        return list1[0]*list1[1]\n    else:\n        return list1[0]*list1[1] + list1[0]*list1[2]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # TODO: complete this function\n    s=1\n    for i in range(len(list1)-1):\n        s*=list1[i]\n    return s\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    new_list = []\n    for n in list1:\n        if n % 2 == 0:\n            new_list.append(n)\n        else:\n            new_list.append(n*2)\n    return new_list\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1_even = [i for i in list1 if i % 2 == 0]\n    list1_odd = [i for i in list1 if i % 2!= 0]\n    list_product = [i*j for i,j in zip(list1_even,list1_odd)]\n    return list_product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for number in list1:\n        if (number % 2) == 0:\n            product *= number\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        even_odd = 1\n    else:\n        even_odd = 0\n    product = 1\n    for i in range(0, len(list1), 2):\n        if i == 0:\n            product *= list1[i]\n        else:\n            if even_odd == 1:\n                product *= list1[i]\n            else:\n                product *= list1[i] * 2\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    c=0\n    for i in list1:\n        if i%2==0:\n            c+=i\n        else:\n            c+=i\n    return c\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # Set the first and last value as 0\n    first_value = 0\n    last_value = len(list1)-1\n    \n    # If the input is not a list or if the input is an empty list, then print an error message.\n    if not isinstance(list1, list):\n        print('Error: list1 must be a list')\n        return \n    \n    # Loop through the input list.\n    for index, item in enumerate(list1):\n        # If the index is even, just increment the first value by the product of the input item and the index.\n        if index % 2 == 0:\n            first_value = first_value * item\n            \n        # If the index is odd, just increment the first value by the product of the input item and the index.\n        else:\n            last_value = last_value - 1\n            first_value = first_value * item\n            \n        # Print the first value, the index, and the product of the input item.\n        print(index, first_value, item)\n    \n    # Print the result.\n    print(first_value, last_value, item)\n    \n    # Check if the user entered a negative number.\n    if first_value < 0:\n        print('Error: first number must be positive')\n        return\n    \n    # Check if the user entered a negative number.\n    if last_value < 0:\n        print('Error: last number must be positive')\n        return\n    \n    # Check if the user entered a positive number.\n    if first_value > len(list1):\n        print('Error: first number must be less than the length of the list')\n        return\n    \n    # Check if the user entered a positive number.\n    if last_value > len(list1)-1:\n        print('Error: last number must be less than the length of the list')\n        return\n    \n    # Return the result.\n    return first_value * last_value\n    "
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    '''\n    test_str = ('a', '1', 'b', '2')\n    '''\n    test_str = (1, 'b', '2', 'a')\n    # test_str = ((1, 'b', '2'), 'a')\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str[0] == '(' and test_str[len(test_str)-1] == ')':\n        return tuple_str_int(test_str[1:len(test_str)])\n    elif test_str[0] == '{' and test_str[len(test_str)-1] == '}':\n        return tuple_str_int(test_str[1:len(test_str)])\n    elif test_str[0] == '[':\n        return tuple_str_int(test_str[1:len(test_str)])\n    elif test_str[0] == ']' and test_str[len(test_str)-1] == ']':\n        return tuple_str_int(test_str[1:len(test_str)])\n    else:\n        return None\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    try:\n        if len(test_str)!= 1:\n            raise ValueError('You can only convert a single tuple.')\n        elif type(test_str[0])!= int:\n            raise ValueError('The first element of the tuple must be an int.')\n        else:\n            return test_str\n    except TypeError as err:\n        print('\\nThe error message: %s' % err)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str[0]) + int(test_str[1])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_str(test_str):\n    '''\n    Write a function to convert tuple string to string.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_bool(test_str):\n    '''\n    Write a function to convert tuple string to float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to string and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to float tuple, string and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_float_str(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_str_bool_str_float(test_str):\n    '''\n    Write a function to convert tuple string to string and boolean tuple, string and float tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_str_bool_str(test_str):\n    '''\n    Write a function to convert tuple string to float tuple, string and boolean tuple, string and float tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_str_bool_float_str_bool_str(test_str):\n    '''\n    Write a function to convert tuple string to string and boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_str_bool_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to string and boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_str_bool_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to float tuple, string and boolean tuple, string and float tuple, string and boolean tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_str_bool_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to string and boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_str_bool_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to float tuple, string and boolean tuple, string and float tuple, string and boolean tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_str_bool_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to float tuple, string and boolean tuple, string and boolean tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_str_bool_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to float tuple, string and boolean tuple, string and boolean tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_bool_str_float_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple, string and float tuple, string and float tuple and boolean tuple.\n    '''\n    result = eval(test_str)\n    return result\n    \ndef tuple_str_float_str_bool_str_bool_str_bool(test_str):\n    '''\n    Write a function t"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_tuple = test_str.split(\",\")\n    for i in temp_tuple:\n        temp_tuple[temp_tuple.index(i)] = int(i)\n    return temp_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str is None:\n        return None\n    else:\n        return tuple([int(e) for e in test_str.split()])\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        j = bisect.bisect_right(a, x, i+1)\n        if j == n:\n            return i\n        else:\n            j = bisect.bisect_left(a, x, j+1)\n    return n\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # check if x is in a sorted list\n    if a == None:\n        return None\n    # if a[-1] < x then return None\n    if x == a[-1]:\n        return None\n    # find the next index where x is less than a[-1]\n    i = bisect.bisect_left(a, x)\n    # if i is beyond the end of the list, return None\n    if i > len(a) - 1:\n        return None\n    # return a[i]\n    return a[i]\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # all the elements that are greater than the value to insert\n    p = bisect.bisect_right(a, x)\n    # the index of the right element that is the next smaller value\n    i = p + 1\n    while i < len(a) and a[i] < x:\n        i += 1\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low == len(a):\n        return len(a) - 1\n    else:\n        return low\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x)\n    if l == 0:\n        return a.append(x)\n    return l-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    return i - 1\n    \ndef partition_naive(a, x):\n    left, right = 0, len(a) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n    \ndef partition(a, x):\n    \"\"\"\n    Partition a sorted array and return two arrays:\n    the first is a sorted and has been sorted array (an extension of the first)\n    the second is a sorted array (an extension of the second)\n    \"\"\"\n    if len(a) <= 1:\n        return a, a\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while True:\n        if r <= l:\n            if a[l] < x:\n                return l\n            elif a[r] > x:\n                return r\n            else:\n                return r\n        if a[r] < x:\n            l = r\n            r = (r + 1) % len(a)\n        elif a[r] > x:\n            r = (r + 1) % len(a)\n        else:\n            return r\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    if i >= len(a):\n        return 0\n    else:\n        return i\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-3])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-4])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-5])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-6])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-7])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-8])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-9])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[0-2])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split()\n    #Check to see if the text is in the regular expression\n    #and if not, return false\n    if(re.search(regex, text)!= None):\n        #Replace the regular expression match\n        text = re.sub(regex, '', text)\n        #If the text is not the same as the regular expression,\n        #return false\n        if(text!= text_words):\n            return False\n        #Else, return true\n        return True\n    else:\n        #Return false if the text is not a valid regular expression\n        return False\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    #Gets the regular expression used for this function\n    regex = r'a(b*[^a-z])(b[1-9])'\n    #Converts the text to lower case\n    text = text.lower()\n    #Split the text into words\n    text_words = text.split("
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    i = 0\n    found = False\n    while not found:\n        i = text.find(text[i:])\n        if i!= -1:\n            i = i + 3\n        else:\n            found = True\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #re.findall(r'a\\b', text)\n    #re.findall(r'^a\\b', text)\n    #re.findall(r'(a\\b)', text)\n    #re.findall(r'\\b(a\\b)', text)\n    #re.findall(r'a(b)?\\b', text)\n    #re.findall(r'a(b)*', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a*', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', text)\n    #re.findall(r'a+', tex"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'\\w+a{3}', text)\n    if result == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = r\"[a-zA-Z][a-zA-Z0-9]*[0-9]*b\"\n    pattern = re.compile(regex)\n    if pattern.search(text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a([bcdfghjklmnpqrstvwxyz])(b)$'\n    return re.match(pattern, text)\ndef test():\n    assert text_match_three(\"aaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.search(r'\\A(?=\\w)\\w*b\\b', text)\n    return m\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    text = text.replace(\"a\", \"b\")\n    matches = re.search(\"[a-z]b\", text)\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    return pattern.search(text)!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Split text into a list of words.\n    words = text.split(' ')\n    # Loop over the words, checking if they contain a number.\n    for word in words:\n        if not re.match(r'\\d', word):\n            return False\n    return True\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split()\n    test_str = test_str.split()\n    new_tuple = tuple(test_list)\n    new_tuple_string = ', '.join(map(str, new_tuple))\n    return new_tuple_string\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for item in test_str.split():\n        new_list.append(int(item))\n    return tuple(new_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # TODO: Create a new tuple from the given string and the given list.\n    # raise NotImplementedError\n    pass"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str is None:\n        return []\n    \n    if test_list is None:\n        return []\n    \n    try:\n        if isinstance(test_list, int):\n            tuple_list = []\n            for i in range(test_list):\n                tuple_list.append(test_str)\n        elif isinstance(test_list, list):\n            tuple_list = list()\n            for i in range(test_list):\n                tuple_list.append(test_str)\n        else:\n            tuple_list = test_list\n        return tuple_list\n    except TypeError:\n        return []\n    except IndexError:\n        return []\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (0, 0)\n    index = 0\n    for letter in test_str:\n        new_tuple[index] = letter\n        index += 1\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list)!= len(test_str):\n        raise ValueError('Length of tuples are different.')\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for i in test_list:\n        new_tuple += (i, )\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    a = test_list.copy()\n    t = list(a)\n    for i in range(len(test_str)):\n        t[i] = test_str[i]\n    return tuple(t)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_list, tuple(map(lambda x: int(x), test_str.split()))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and nums[i] not in nums[:i]:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return True if [num for index,num in enumerate(nums) if index % 2 == 0] == [] else False\n    \n    \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst = list(range(1,1001,2))\n    return all(e%2==0 for e in lst)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            evens.append(nums[i])\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2 == 0 for i in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            continue\n        else:\n            return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0 and i%2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(i % 2 == 0):\n            continue\n        if(nums[i] % 2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove the tuple from the list and return the new tuple.\n    if test_tup:\n        new_tup = ()\n        for i, v in enumerate(test_tup):\n            if type(v) is tuple:\n                new_tup += v[i:]\n        return new_tup\n    else:\n        return ()\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0], test_tup[1], test_tup[2]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_tuple(x):\n        x = x[1]\n        return x\n    return tuple(map(remove_tuple, test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = ()\n    for i in test_tup:\n        tup += i\n    return tup\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    list1 = test_tup[0]\n    list2 = test_tup[1]\n    new_tup = list1, list2\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    # remove (1,2)\n    return test_tup[1],test_tup[0]\n    \n    # remove 'blue' from tuple\n    #return (test_tup[0],test_tup[1])\n    \n    # remove 'green' from tuple\n    #return (test_tup[0],test_tup[1],test_tup[2])\n    \n    \n    # remove'red' from tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3])\n    \n    \n    # remove the last item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2])\n    \n    # remove the first item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3])\n    \n    # remove the third item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3],test_tup[4])\n    \n    \n    \n    # remove the first item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2])\n    \n    # remove the third item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3],test_tup[4])\n    \n    \n    \n    # remove the last item from the tuple\n    #return (test_tup[0],test_tup[1])\n    \n    \n    # remove the first item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2])\n    \n    \n    # remove the last item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3])\n    \n    \n    \n    # remove the third item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3],test_tup[4])\n    \n    \n    \n    \n    # remove the first item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2])\n    \n    # remove the last item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3])\n    \n    \n    \n    # remove the third item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3],test_tup[4])\n    \n    \n    \n    \n    # remove the last item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3],test_tup[4])\n    \n    \n    \n    \n    # remove the third item from the tuple\n    #return (test_tup[0],test_tup[1],test_tup[2],test_tup[3])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # your code goes here\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tuple = ()\n    for element in test_tup:\n        nested_tuple += element\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(test_tup)\n    # removing the tuple\n    tuple_to_remove = test_tup\n    # iterating through the elements of the tuple\n    for element in tuple_to_remove:\n        # comparing the elements in the tuple\n        if type(element) is tuple:\n            # adding the element of the tuple to the list\n            tuple_to_remove.append(element[1])\n    # returning the new list\n    return tuple_to_remove\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    output_count = 0\n    \n    if type(input_list)!= list:\n        print('The given input is not a list')\n        return output_count\n    \n    else:\n        for item in input_list:\n            if type(item) == list:\n                output_count += count_list(item)\n            else:\n                output_count += 1\n        return output_count\n    \n    # Write your code here!\n    \n    \nif __name__ == '__main__':\n    fruits = ['apple', 'banana', 'cherry']\n    print(count_list(fruits))\n    \n    \n    \n    "
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_cnt = 0\n    for i in input_list:\n        if type(i) == list:\n            list_cnt += 1\n    return list_cnt\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j]==\"[\" or input_list[i][j]==\"]\":\n                if input_list[i][j+1]==\".\":\n                    input_list[i][j]=input_list[i][j+1]\n                    del input_list[i][j+1]\n    return input_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for list in input_list:\n        if type(list) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #solution\n    # list_counter = 0\n    # for i in input_list:\n    #     if isinstance(i, list):\n    #         list_counter += 1\n    # return list_counter\n    #  return count_list(input_list)\n    for i in input_list:\n        if isinstance(i, list):\n            # print(\"CHECKING IF LIST IS A LIST\", i)\n            list_counter = 0\n            for j in i:\n                if isinstance(j, list):\n                    list_counter += 1\n            # print(\"CHECKING IF LISTS ARE SAME\", list_counter)\n            return list_counter\n        else:\n            # print(\"NOT A LIST\")\n            return 0\n    # print(\"END\")\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += len(i) \n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for x in input_list: \n        if isinstance(x, list):\n            count += len(x)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for item in input_list:\n        if type(item) == list:\n            counter += len(item)\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    # initialize the count variable with 0\n    count = 0\n    # iterate through the input list, printing each element\n    for item in input_list:\n        # if the current item is a list\n        if type(item) is list:\n            # increment the count by 1\n            count += 1\n    # print the total number of lists\n    print(count)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index = arr.find(x)\n    if index == -1:\n        return -1\n    else:\n        return index\n    \n    \n    "
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last=len(arr)-1\n    for i in range(last,0,-1):\n        if arr[i]==x:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left+right)//2\n        if x > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pos = 0\n    while(arr[pos]<x):\n        pos+=1\n    return pos\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return right\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Your code here\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] < x and arr[j] > x:\n            return j\n        if arr[i] > x:\n            j = j - 1\n        elif arr[j] < x:\n            i = i + 1\n        else:\n            j = j - 1\n    return -1\n    \nprint(last([1,2,3,4,5,6,7,8,9,10],4))\nprint(last([1,2,3,4,5,6,7,8,9,10],8))\nprint(last([1,2,3,4,5,6,7,8,9,10],8))\nprint(last([1,2,3,4,5,6,7,8,9,10],8))\nprint(last([1,2,3,4,5,6,7,8,9,10],8))"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Write your code here.\n    l=0\n    r=len(arr)-1\n    while(l<=r):\n        mid=(l+r)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            r=mid-1\n        else:\n            l=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    len_arr = len(arr)\n    if (len_arr==0):\n        return -1\n    \n    if (len_arr==1):\n        if (arr[0]<x):\n            return 0\n        else:\n            return len_arr-1\n    \n    low_i = 0\n    high_i = 0\n    mid_i = 0\n    \n    while (high_i<len_arr):\n        if (arr[high_i]>x):\n            high_i = high_i + 1\n        else:\n            mid_i = high_i + 1\n            high_i = high_i + 1\n            break\n    \n    while (low_i<mid_i):\n        if (arr[low_i]>x):\n            low_i = low_i + 1\n        else:\n            mid_i = low_i + 1\n            low_i = low_i + 1\n            break\n    \n    return mid_i-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if len(arr) == 0 or arr == None:\n    #     return None\n    \n    if len(arr) == 0 or arr == None:\n        return None\n    \n    if x < arr[0]:\n        return 0\n    \n    if x > arr[-1]:\n        return len(arr) - 1\n    \n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        return last(arr[mid+1:],x)\n    else:\n        return last(arr[:mid],x)\n        \n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # open the text and find the start and end of the text\n    start_index = text.find('a')\n    end_index = text.find('b')\n    # compare the start and end of the text\n    if start_index!= -1 and end_index!= -1:\n        # set the start and end of the text as variables\n        start = start_index\n        end = end_index\n        # a match should be found\n        match = start_index!= -1\n        # If match is true\n        if match:\n            # if the text starts with 'aa' and the text ends with 'bb'\n            if text[start+1:end].lower() == 'aa' or text[start+1:end].lower() == 'bb':\n                # print the start and end\n                print('Start:'+ text[start:end])\n                print('End:'+ text[start+1:end])\n    else:\n        print('Error: The start and end of the text is not valid.')\n        print('Please enter an appropriate text.')\n        \ndef text_starts_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'\n    '''\n    # open the text and find the start and end of the text\n    start_index = text.find('a')\n    end_index = text.find('b')\n    # compare the start and end of the text\n    if start_index!= -1 and end_index!= -1:\n        # set the start and end of the text as variables\n        start = start_index\n        end = end_index\n        # a match should be found\n        match = start_index!= -1\n        # If match is true\n        if match:\n            # if the text starts with 'aa' and the text ends with 'bb'\n            if text[start+1:end].lower() == 'aa' or text[start+1:end].lower() == 'bb':\n                # print the start and end\n                print('Start:'+ text[start:end])\n                print('End:'+ text[start+1:end])\n    else:\n        print('Error: The start and end of the text is not valid.')\n        print('Please enter an appropriate text.')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a(?=[b])(.*)', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Use findall\n    m_end = re.findall('\\(.*a.*\\)', text)\n    # Print results\n    for x in m_end:\n        print(x)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = re.search(r'a\\s*\\b',text)\n    b = re.search(r'\\b\\s*a',text)\n    if b!= None:\n        b = b.group()\n        b = b.strip()\n        if a!= None:\n            print('Text startb/endb: '+b)\n        else:\n            print('Text startb/endb: '+text)\n    else:\n        print('Text startb/endb: '+text)\n    return\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    '''\n    Match the first instance of a and end with a.\n    '''\n    if text[0:3]=='a':\n        if re.search('b',text[3:],re.IGNORECASE):\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.sub('(a)(b)', r'\\1\\2', text)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\b\\w*a?b?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\b\\w*a?b?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'c' followed by anything, ending in 'd'.\n    '''\n    pattern = re.compile(r'\\b\\w*c?d?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endc(text):\n    '''\n    Write a function that matches a string that has an 'c' followed by anything, ending in 'd'.\n    '''\n    pattern = re.compile(r'\\b\\w*c?d?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'd' followed by anything, ending in 'f'.\n    '''\n    pattern = re.compile(r'\\b\\w*d?f?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endd(text):\n    '''\n    Write a function that matches a string that has an 'd' followed by anything, ending in 'f'.\n    '''\n    pattern = re.compile(r'\\b\\w*d?f?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'h' followed by anything, ending in 'i'.\n    '''\n    pattern = re.compile(r'\\b\\w*h?i?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endh(text):\n    '''\n    Write a function that matches a string that has an 'h' followed by anything, ending in 'i'.\n    '''\n    pattern = re.compile(r'\\b\\w*h?i?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has an 'l' followed by anything, ending in 'n'.\n    '''\n    pattern = re.compile(r'\\b\\w*l?n?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endl(text):\n    '''\n    Write a function that matches a string that has an 'l' followed by anything, ending in 'n'.\n    '''\n    pattern = re.compile(r'\\b\\w*l?n?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has an'm' followed by anything, ending in 'o'.\n    '''\n    pattern = re.compile(r'\\b\\w*m?o?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endm(text):\n    '''\n    Write a function that matches a string that has an'm' followed by anything, ending in 'o'.\n    '''\n    pattern = re.compile(r'\\b\\w*m?o?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endn(text):\n    '''\n    Write a function that matches a string that has an 'n' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*n?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endn(text):\n    '''\n    Write a function that matches a string that has an 'n' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*n?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endp(text):\n    '''\n    Write a function that matches a string that has an 'p' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*p?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endp(text):\n    '''\n    Write a function that matches a string that has an 'p' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*p?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endq(text):\n    '''\n    Write a function that matches a string that has an 'q' followed by anything, ending in 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*q?z?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endq(text):\n    '''\n    Write a function that matches a string that has an 'q' followed by anything, ending in 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*q?z?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endr(text):\n    '''\n    Write a function that matches a string that has an 'r' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*r?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endr(text):\n    '''\n    Write a function that matches a string that has an 'r' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*r?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_ends(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in's'.\n    '''\n    pattern = re.compile(r'\\b\\w*s?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_ends(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in's'.\n    '''\n    pattern = re.compile(r'\\b\\w*s?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endt(text):\n    '''\n    Write a function that matches a string that has an 't' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*t?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_enda_endt(text):\n    '''\n    Write a function that matches a string that has an 't' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r'\\b\\w*t?y?\\b')\n    result = pattern.findall(text)\n    return result\n    \ndef text_starta_endw(text):\n    '''\n    Write a function that matches a string that has an 'w' followed by anythin"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_to_match =''.join(text)\n    pattern = '(a|b)'\n    return re.search(pattern, text_to_match)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    text = text.lower()\n    for word in text.split(' '):\n        if re.search(r'\\w{1,}', word) and word[-1]!= 'b':\n            print('Not a valid phrase. First letter of word must be a letter')\n            return 1\n    print('Valid phrase.')\n    return 0\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_total = 0\n    for key, value in dict.items():\n        sum_total += value\n    return sum_total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.items():\n        sum = sum + item[1]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for i in dict.values():\n        total_sum += i\n    return total_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for i in dict.values():\n        sum_value = sum_value + i\n    return sum_value\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for i in dict.values():\n        summ += i\n    return summ\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #we need to find the sum of all odd numbers from l to r-1 \n    #using a loop \n    '''\n    When we see a number n, if it is divisible by 2,\n    it is odd.  In other words, we can only find the sum of the odd numbers between 0 and n-1. \n    '''\n    sum = 0\n    for i in range(n,n-2,-1):\n        if i%2 == 1:\n            sum += i\n    print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        print(\"Incorrect input.\")\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 21\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 25\n    elif n == 13:\n        return 27\n    elif n == 14:\n        return 29\n    elif n == 15:\n        return 31\n    elif n == 16:\n        return 33\n    elif n == 17:\n        return 35\n    elif n == 18:\n        return 37\n    elif n == 19:\n        return 39\n    elif n == 20:\n        return 41\n    elif n == 21:\n        return 43\n    elif n == 22:\n        return 45\n    elif n == 23:\n        return 47\n    elif n == 24:\n        return 49\n    elif n == 25:\n        return 51\n    elif n == 26:\n        return 53\n    elif n == 27:\n        return 55\n    elif n == 28:\n        return 57\n    elif n == 29:\n        return 59\n    elif n == 30:\n        return 61\n    elif n == 31:\n        return 63\n    elif n == 32:\n        return 65\n    elif n == 33:\n        return 67\n    elif n == 34:\n        return 69\n    elif n == 35:\n        return 71\n    elif n == 36:\n        return 73\n    elif n == 37:\n        return 75\n    elif n == 38:\n        return 77\n    elif n == 39:\n        return 79\n    elif n == 40:\n        return 81\n    elif n == 41:\n        return 83\n    elif n == 42:\n        return 85\n    elif n == 43:\n        return 87\n    elif n == 44:\n        return 89\n    elif n == 45:\n        return 91\n    elif n == 46:\n        return 93\n    elif n == 47:\n        return 95\n    elif n == 48:\n        return 97\n    elif n == 49:\n        return 99\n    elif n == 50:\n        return 101\n    elif n == 51:\n        return 103\n    elif n == 52:\n        return 105\n    elif n == 53:\n        return 107\n    elif n == 54:\n        return 109\n    elif n == 55:\n        return 111\n    elif n == 56:\n        return 113\n    elif n == 57:\n        return 115\n    elif n == 58:\n        return 117\n    elif n == 59:\n        return 119\n    elif n == 60:\n        return 121\n    elif n == 61:\n        return 123\n    elif n == 62:\n        return 125\n    elif n == 63:\n        return 127\n    elif n == 64:\n        return 129\n    elif n == 65:\n        return 131\n    elif n == 66:\n        return 133\n    elif n == 67:\n        return 135\n    elif n == 68:\n        return 137\n    elif n == 69:\n        return 139\n    elif n == 70:\n        return 141\n    elif n == 71:\n        return 143\n    elif n == 72:\n        return 145\n    elif n == 73:\n        return 147\n    elif n == 74:\n        return 149\n    elif n == 75:\n        return 151\n    elif n == 76:\n        return 153\n    elif n == 77:\n        return 155\n    elif n == 78:\n        return 157\n    elif n == 79:\n        return 159\n    elif n == 80:\n        return 161\n    elif n == 81:\n        return 163\n    elif n == 82:\n        return 165\n    elif n == 83:\n        return 167\n    elif n == 84:\n        return 169\n    elif n == 85:\n        return 171\n    elif n == 86:\n        return 173\n    elif n == 87:\n        return 175\n    elif n == 88:\n        return 177\n    elif n == 89:\n        return 179\n    elif n == 90:\n        return 181\n    elif n == 91:\n        return 183\n    elif n == 92:\n        return 185\n    elif n == 93:\n        return 187\n    elif n == 94:\n        return 189\n    elif n == 95:\n        return 191\n    elif n == 96:\n        return 193\n    elif n == 97:\n        return 195\n    elif n == 98:\n        return 197\n    elif n == 99:\n        return 199\n    elif n == 100:\n        return 201\n    elif n == 101:\n        return 203\n    elif n == 102:\n        return 205\n    elif n == 103:\n        return 207\n    elif n == 104:\n        return 209\n    elif n == 105:\n        return 211\n    elif n == 106:\n        return 213\n    elif n == 107:\n        return 215\n    elif n == 108:\n        return 217\n    elif n == 109:\n        return 219\n    elif n == 110:\n        return 221\n    elif n == 111:\n        return 223\n    elif n == 112:\n        return 225\n    elif n == 113:\n        return 227\n    elif n == 114:\n        return 229\n    elif n == 115:\n        return 231\n    elif n == 116:\n        return 233\n    elif n == 117:\n        return 235\n    elif n == 118:\n        return 237\n    elif n == 119:\n        return 239\n    elif n == 120:\n        return 241\n    elif n == 121:\n        return 243\n    elif n == 122:\n        return 245\n    elif n == 123:\n        return 247\n    elif n == 124:\n        return 249\n    elif n == 125:\n        return 251\n    elif n == 126:\n        return 253\n    elif n == 127:\n        return 255\n    elif n == 128:\n        return 257\n    elif n == 129:\n        return 259\n    elif n == 130:\n        return 261\n    elif n == 131:\n        return 263\n    elif n == 132:\n        return 265\n    elif n == 133:\n        return 267\n    elif n == 134:\n        return 269\n    elif n == 135:\n        return 271\n    elif n == 136:\n        return 273\n    elif n == 137:\n        return 275\n    elif n == 138:\n        return 277\n    elif n == 139:\n        return 279\n    elif n == 140:\n        return 281\n    elif n == 141:\n        return 283\n    elif n == 142:\n        return 285\n    elif n == 143:\n        return 287\n    elif n == 144:\n        return 289\n    elif n == 145:\n        return 291\n    elif n == 146:\n        return 293\n    elif n == 147:\n        return 295\n    elif n == 148:\n        return 297\n    elif n == 149:\n        return 299\n    elif n == 151:\n        return 301\n    elif n == 153:\n        return 303\n    elif n == 154:\n        return 305\n    elif n == 155:\n        return 307\n    elif n == 156:\n        return 309\n    elif n == 157:\n        return 311\n    elif n == 158:\n        return 313\n    elif n == 159:\n        return 315\n    elif n == 160:\n        return 317\n    elif n == 161:\n        return 319\n    elif n == 162:\n        return 321\n    elif n == 163:\n        return 323\n    elif n == 164:\n        return 325\n    elif n == 165:\n        return 327\n    elif n == 166:\n        return 329\n    elif n == 167:\n    "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i%2==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # if l <= r, return 0\n    if n <= 0:\n        return 0\n    else:\n        # check if l <= x <= r, return 0\n        if n % 2 == 0:\n            return 0\n        else:\n            return n + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    if n%2==0:\n        return n\n    n=int(n)\n    #n=int(input('Enter the number'))\n    n=int(input('Enter the number'))\n    n=int(n)\n    if n==0:\n        return 0\n    if n%2==1:\n        if n==2:\n            return 1\n        return n\n    else:\n        if n>2:\n            s=n+sum_odd(n-1)\n            return s\n        else:\n            return 0"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for x in range(1, n + 1):\n        if x % 2 == 1:\n            sum += x\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n <= 1): \n        return n \n    else: \n        sum = 0\n        while (n >= 2): \n            if (n % 2!= 0): \n                sum = sum + n \n            n = n - 1 \n        return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    l = 0\n    r = n\n    count = 0\n    while (l <= r):\n        if (l % 2 == 1):\n            l = l + 1\n        else:\n            count = count + 1\n            r = r - 1\n    return count\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i]\n    return ans\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr.sort()\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in range(0, len(arr)):\n        s+=arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for element in arr:\n        sum += element\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n>>31\n    r = n>>30\n    s = n>>29\n    t = n>>28\n    u = n>>27\n    n = r<<29 | l << 28 | s << 27 | t << 26 | u << 25\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def do_left(n, d):\n        if d == 0:\n            return n\n        else:\n            return n & (n-1) >> d\n    def do_right(n,d):\n        if d == 0:\n            return n\n        else:\n            return n | (n<<d)\n    return do_right(do_left(n, d), d)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xffffffff\n    return (n ^ d) | ((n >> (32-d)) & 0xffffffff)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    i=n\n    j=n\n    while i>=1:\n        j=i%10\n        n=n//10\n        i=n\n        n=i\n    n=n+d\n    n=n-j\n    n=n%10\n    n=n-j\n    n=n+d\n    n=n%10\n    n=n-j\n    n=n+d\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n & ((1<<(d+1))-1)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = -d\n    d = d % 32\n    if d == 32:\n        n = n & 0xffffffff\n    else:\n        n = (n << d) | ((n >> 32) & 0xffffffff)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n>>d%32\n    if (n&1):\n        n=(n>>1)+1\n    return (n>>d%32)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d \n    n = n ^ (n >> 32) \n    n = n ^ (n >> 32)\n    n = n ^ (n >> 32)\n    n = n >> d \n    n = n ^ (n >> d) \n    n = n ^ (n >> d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n & 0xffffffff\n    l = (l << d) | (l >> (32-d))\n    return l\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('[\\n\\r]+', '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = str(text)\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\" \",\"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_non_printable(text):\n    '''\n    Write a function to remove all non-printable characters from a string.\n    '''\n    return re.sub(r'[^\\x00-\\x7F]+', '', text)\ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all non-numeric characters from a string.\n    '''\n    return re.sub(r'[^0-9]+', '', text)\ndef remove_all_caps(text):\n    '''\n    Write a function to remove all capital letters from a string.\n    '''\n    return re.sub(r'[A-Z]+', '', text)\ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_all_symbols(text):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_all_punct(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # re.sub('\\s+','', text)\n    return re.sub(' +','', text)\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub('[^\\w\\s]', '', text)\ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_all_letters(text):\n    '''\n    Write a function to remove all letters from a string.\n    '''\n    return re.sub('[a-zA-Z]', '', text)\ndef remove_duplicates(text):\n    '''\n    Write a function to remove duplicates from a string.\n    '''\n    return re.sub('[^\\w\\s]', '', text).lower().replace(' ', '').replace('-', '')\ndef remove_all_words(text):\n    '''\n    Write a function to remove all words from a string.\n    '''\n    return re.sub(r'\\w+','', text).lower().replace(' ', '').replace('-', '')\ndef remove_space_characters(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub('\\s+','', text)\ndef remove_special_characters(text):\n    '''\n    Write a function to remove special characters from a string.\n    '''\n    return re.sub(r'[^\\w\\s]','', text)\ndef remove_dots(text):\n    '''\n    Write a function to remove all dots from a string.\n    '''\n    return re.sub('\\.{1}', '', text)\ndef remove_caps(text):\n    '''\n    Write a function to remove all capital letters from a string.\n    '''\n    return re.sub('[^A-Za-z]', '', text)\ndef remove_symbols(text):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef normalize(text):\n    '''\n    Write a function to normalize a string.\n    '''\n    return text.lower().replace(' ', '-').replace('-','')\ndef remove_numbers_out_of_range(text):\n    '''\n    Write a function to remove all numbers from a string that are between\n    zero and one hundred and less than 1000.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_special_characters_out_of_range(text):\n    '''\n    Write a function to remove all special characters from a string that are\n    between one hundred and above 1000.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', text)\ndef remove_numbers_beyond_1000(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_numbers_beyond_first_occurrence(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first occurrence.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_numbers_beyond_last_occurrence(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a last occurrence.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_numbers_beyond_first_and_last_occurrence(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_numbers_beyond_first_occurrence_and_last_occurrence(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_numbers_beyond_first_and_last_occurrence(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain a punctuation.\n    '''\n    return re.sub('[^a-zA-Z]','', text)\ndef remove_numbers_beyond_first_and_last_occurrence_punctuation(text):\n    '''\n    Write a function to remove all numbers from a string that are greater than\n    1000 and have a first and last occurrences and contain "
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_emails(text):\n    '''\n    Write a function to remove all emails from a string.\n    '''\n    return re.sub(r'\\w+@\\w+\\.\\w+', '', text)\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_all_letters(text):\n    '''\n    Write a function to remove all letters from a string.\n    '''\n    return re.sub(r'[a-zA-Z]', '', text)\ndef remove_duplicates(text):\n    '''\n    Write a function to remove duplicates from a string.\n    '''\n    return re.sub(r'\\w+', '', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_emails(text):\n    '''\n    Write a function to remove all emails from a string.\n    '''\n    return re.sub(r'\\w+@\\w+\\.\\w+', '', text)\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_chars(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_all_words(text):\n    '''\n    Write a function to remove all words from a string.\n    '''\n    return re.sub(r'\\w+','', text)\ndef remove_all_text(text):\n    '''\n    Write a function to remove all text from a string.\n    '''\n    return remove_all_punctuation(text)\ndef remove_all_sentences(text):\n    '''\n    Write a function to remove all sentences from a string.\n    '''\n    return re.sub(r'\\s+','', text)\ndef remove_all_lines(text):\n    '''\n    Write a function to remove all lines from a string.\n    '''\n    return re.sub(r'[\\n\\r]+','', text)\ndef remove_all_quotes(text):\n    '''\n    Write a function to remove all quotes from a string.\n    '''\n    return re.sub(r'\"','', text)\ndef remove_all_eol(text):\n    '''\n    Write a function to remove all eol characters from a string.\n    '''\n    return re.sub(r'\\n', '', text)\ndef remove_all_hashtag(text):\n    '''\n    Write a function to remove all hashtag from a string.\n    '''\n    return re.sub(r'#', '', text)\ndef remove_all_dot(text):\n    '''\n    Write a function to remove all double dots from a string.\n    '''\n    return re.sub(r'\\.\\.', '', text)\ndef remove_all_acronym(text):\n    '''\n    Write a function to remove all acronym from a string.\n    '''\n    return re.sub(r'\\w{1,5}', '', text)\ndef remove_all_emph(text):\n    '''\n    Write a function to remove all emph from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_stubs(text):\n    '''\n    Write a function to remove all in/out/etc from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_currency(text):\n    '''\n    Write a function to remove all currency from a string.\n    '''\n    return re.sub(r'\\$', '', text)\ndef remove_all_combos(text):\n    '''\n    Write a function to remove all combinations of letters from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_caps(text):\n    '''\n    Write a function to remove all caps in a string.\n    '''\n    return re.sub(r'\\s+','', text)\ndef remove_all_phone(text):\n    '''\n    Write a function to remove all phone numbers from a string.\n    '''\n    return re.sub(r'\\(?\\d{3}\\)?[- \\s]*\\(?\\d{3}\\)?[- \\s]*\\(?\\d{3}\\)?[- \\s]*\\(?\\d{3}\\)?','', text)\ndef remove_all_title(text):\n    '''\n    Write a function to remove all title from a string.\n    '''\n    return re.sub(r'\\b(?<=\\W)\\w+\\b', '', text)\ndef remove_all_emoji(text):\n    '''\n    Write a function to remove all emojis from a string.\n    '''\n    return re.sub(r'[\\U0001F600-\\U0001F64F]+', '', text)\ndef remove_all_url(text):\n    '''\n    Write a function to remove all url from a string.\n    '''\n    return re.sub(r'\\[\\w+\\]', '', text)\ndef remove_all_quotes_and_quotes(text):\n    '''\n    Write a function to remove all quotes and quotes from a string.\n    '''\n    return re.sub(r'\"','', text)\ndef remove_all_double_quotes(text):\n    '''\n    Write a function to remove all double quotes from a string.\n    '''\n    return re.sub(r'\\w+','', text)\ndef remove_all_quotes_and_quotes_and_quotes(text):\n    '''\n    Write a function to remove all quotes and quotes from a string.\n    '''\n    return re.sub(r'\"','', text)\ndef remove_all_urls(text):\n    '''\n    Write a function to remove all urls from a string.\n    '''\n    return re.sub(r'[\\w-]+\\.(?:jpg|jpeg|png)', '', text)\ndef remove_all_tags(text):\n    '''\n    Write a function to remove all tags from a string.\n    '''\n    return re.sub(r'[\\w-]+', '', text)\ndef remove_all_no_underscores(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_tags_and_titles(text):\n    '''\n    Write a function to remove all tags and titles from a string.\n    '''\n    return re.sub(r'\\w+\\s+\\w+','', text)\ndef remove_all_special(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub(r'[^\\w\\s]+','', text)\ndef remove_all_special_characters(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub(r'[^\\w\\s]+','', text)\ndef remove_all_single_character(text):\n    '''\n    Write a function to remove all single characters from a string.\n    '''\n    return re.sub(r'[^a-z\\s]','', text)\ndef remove_all_digits(text):"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x>y and x>z:\n        print('{} is greater than {} and {} is greater than {}.'.format(x,y,z,z))\n    elif y>z:\n        print('{} is greater than {} and {} is greater than {}.'.format(y,x,z,z))\n    else:\n        print('{} is greater than {} and {} is greater than {}.'.format(z,y,x,z))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"########## test_three_equal ##########\")\n    print(x,y,z)\n    print(\"x: \" + str(x))\n    print(\"y: \" + str(y))\n    print(\"z: \" + str(z))\n    x_count = 0\n    y_count = 0\n    z_count = 0\n    for i in range(0,3):\n        if x[i] == y[i]:\n            x_count += 1\n        if x[i] == z[i]:\n            y_count += 1\n        if y[i] == z[i]:\n            z_count += 1\n    print(\"x_count: \" + str(x_count))\n    print(\"y_count: \" + str(y_count))\n    print(\"z_count: \" + str(z_count))\n    return x_count == y_count and z_count == y_count and x_count == z_count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_count = 0\n    y_count = 0\n    z_count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and x[i]!= z[i] and x[i]!= '.':\n            x_count += 1\n        elif x[i]!= y[i] and x[i]!= z[i] and x[i]!= '.':\n            y_count += 1\n        else:\n            z_count += 1\n    print(f\"Number of equal numbers from {x} and {y} = {x_count}\\nNumber of equal numbers from {z} and {y} = {y_count}\\nNumber of equal numbers from {z} and {x} = {z_count}\")\n    if x_count == y_count == z_count == 3:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print('a, b, and c')\n    print(x, y, z)\n    print('a', 'b', 'c')\n    print(len(x), len(y), len(z))\n    print(sum(x), sum(y), sum(z))\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n')\n    print('a', 'b', 'c', sep = '\\n'"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x)==len(y)==len(z)\n    dict={}\n    for i in range(len(x)):\n        if x[i] in dict:\n            dict[x[i]]+=1\n        else:\n            dict[x[i]]=1\n    for k in dict:\n        if dict[k]==3:\n            return True\n    return False\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x,\"+\",y,\"+\",z,\"=\",x+y+z)\n    return (x+y+z)\n    print(x,y,z)\n    return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z==0:\n        return 1\n    elif x==0:\n        return 2\n    elif y==0:\n        return 3\n    elif z==0:\n        return 4\n    elif x>y>z:\n        return 5\n    elif y>z:\n        return 6\n    elif z>x:\n        return 7\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    numbers=x+y+z\n    print(f\"{numbers}\")\n    count=0\n    for i in range(3):\n        if numbers==i:\n            count+=1\n    print(f\"Total number of equal numbers = {count}\")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    for i in range(x):\n        if x==y and x==z:\n            pass\n        elif y==z:\n            pass\n        else:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = x\n    y = y\n    z = z\n    if x==y or x==z or y==z:\n        return 0\n    if x==y or x==z:\n        return 1\n    if y==z or y==x:\n        return 2\n    if x==y:\n        return 3\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    s,n=0,len(arr)\n    while n:\n        if n & 1:\n            arr.append(arr.pop(0))\n        else:\n            arr.insert(0,arr.pop())\n        n = n >> 1\n        s += 1\n    return s\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    counter = 0\n    count = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr) - 1\n    count = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    m = n//2\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Brute force approach\n    # time complexity: O(n^2)\n    # space complexity: O(1)\n    if len(arr) == 1:\n        return 1\n    elif len(arr) == 2:\n        return 1 if arr[0] > arr[1] else 0\n    else:\n        prev = arr[0]\n        curr = arr[1]\n        count = 0\n        while curr!= prev:\n            count += 1\n            prev = curr\n            curr = arr[curr%len(arr)]\n        return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) <= 1:\n        return 0\n    else:\n        mid = len(arr) // 2\n        if arr[mid] < arr[mid - 1]:\n            return count_rotation(arr[:mid]) + count_rotation(arr[mid:])\n        else:\n            return count_rotation(arr[:mid]) + count_rotation(arr[mid+1:])\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    d = arr[0]\n    count = 0\n    for i in range(1, n):\n        if arr[i] > d:\n            d = arr[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    n=len(arr)\n    for i in range(n):\n        if arr[i]==arr[n-1]:\n            count+=1\n            n=n-1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # your code goes here\n    n = len(arr)\n    rotations = 0\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n    return rotations\n        \narr = [1, 2, 3, 4, 5, 6]"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        rem = n % 2\n        if rem == 0:\n            return False\n        else:\n            return is_perfect_square(n // 2)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(n**0.5)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return True\n    elif (n < 0) :\n        return False\n    elif (n%2 == 0) :\n        return is_perfect_square(n//2)\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=1 :\n        return False\n    if (n%2==0) :\n        return False\n    if (n%3==0) :\n        return False\n    if (n%5==0) :\n        return False\n    square_root = int(math.sqrt(n))\n    if square_root*square_root==n :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    is_perfect_square = (n & 1)\n    if (n!= 0):\n        is_perfect_square = is_perfect_square * (is_perfect_square - 1)\n        is_perfect_square = is_perfect_square * n\n    return is_perfect_square\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    \n    if n%2 == 0 :\n        return False\n    if n == 3 :\n        return True\n    if n == 5 :\n        return True\n    if n == 7 :\n        return True\n    if n == 11 :\n        return True\n    \n    return False\n    \n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = 1\n    while (n % s == 0) :\n        n /= s\n        s += 1\n    if n == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    else:\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        else:\n            return is_perfect_square(n-1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    elif n == 2 :\n        return True\n    elif n % 2 == 0 :\n        return False\n    else :\n        sqr = int(n**0.5)\n        if n == sqr :\n            return True\n        elif n == 1 or n == sqr :\n            return False\n        else :\n            return False\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # your code here\n    if (n > 1) :\n        for i in range(2, int(math.sqrt(n)+1)) :\n            if (n % i == 0) :\n                return False\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if(arr[i]%2!=0):\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    count = 0\n    for num in arr:\n        count += 1\n        if num % 2 == 0:\n            count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Initialize result to False \n    result = False \n    \n    # For every element in the list \n    for num in arr: \n        # Check if the current number is even \n        if num % 2 == 0: \n            # If the current number is even, \n            # then set result to True \n            result = True \n            break\n    # If not even then return False \n    return result \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # create an array of numbers\n    num = [int(i) for i in arr]\n    # create an array of products\n    prod = [i * j for i,j in zip(num,num[1:])]\n    # make a loop to iterate through the product\n    for i in range(len(prod)):\n        # if product is even\n        if prod[i] % 2 == 0:\n            # return True, if product is even\n            return True\n        # if product is not even\n        else:\n            # return False, if product is not even\n            return False\n    # if product is even then return False\n    # else return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product=1\n    for i in range(len(arr)):\n        product*=arr[i]\n    if(product%2==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = True\n    for i in range(0, len(arr)):\n        if arr[i]%2!= 0:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n        if count%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    c=1\n    for num in arr:\n        c*=num\n    return c==1\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n            if sum > highest_sum:\n                highest_sum = sum\n    return highest_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for lst in lists:\n        if len(lst) > 0:\n            lst.sort()\n            temp = [list(lst[0])]\n            for elem in lst[1:]:\n                temp.append(sum(elem))\n            temp = list(set(temp))\n            temp.sort()\n            max_list.append(temp)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for list_item in lists:\n        total = 0\n        for item in list_item:\n            total += item\n        if total > max_list[-1]:\n            max_list = [total]\n        else:\n            max_list.append(total)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # your code here\n    pass"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_max = []\n    for list_i in lists:\n        list_max.append(max(list_i))\n    return list_max\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max(max_list):\n                max_list = lists[i][j]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in range(len(lists)):\n        sum = 0\n        for j in range(len(lists[i])):\n            sum += lists[i][j]\n        if sum > max_sum[0]:\n            max_sum = [sum,lists[i]]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total_sum = 0\n    highest_sum = 0\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    result = []\n    result = lists[0]\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if lists[i][j] > lists[i][j+1]:\n                if result == []:\n                    result = lists[i]\n                elif lists[i]!= []:\n                    result = lists[i] + result\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    temp = test_str[0]\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l = []\n    for i in range(len(test_str)):\n        if(ord(test_str[i]) >= ord('A') and ord(test_str[i]) <= ord('Z')):\n            l.append(test_str[i])\n    max_run = l[0]\n    for i in range(1, len(l)):\n        if(l[i] > max_run):\n            max_run = l[i]\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_char = 0\n    for char in test_str:\n        if char.isupper():\n            if max_char < len(char):\n                max_char = len(char)\n    return max_char\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # loop through every char\n    for char in test_str:\n        if char.isupper():\n            count = 0\n            for i in range(len(char)):\n                if char[i].isupper():\n                    count += 1\n            if count > 0:\n                return char\n    return char\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(str(test_str).upper(), key = str.casefold)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    for char in test_str:\n        if char.isupper():\n            max_count += 1\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upp = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] >= test_str[i].upper():\n                max_upp += 1\n            else:\n                max_upp = max(max_upp, i + 1)\n    return max_upp\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upp = []\n    for i in test_str:\n        if i.isupper():\n            upp.append(i)\n    return max(upp)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if i % 2!= 0:\n            i += 1\n        else:\n            i += 1\n    return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # code here\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums)%2 == 1 else nums[nums[0]]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if (len(nums) % 2) == 1 else nums[len(nums) // 2"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    result = []\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # if list is empty, return None\n    if len(nums) == 0:\n        return None\n    # if list is a single value, return it\n    elif len(nums) == 1:\n        return nums[0]\n    # else, iterate through list and find the index of the first value that is not odd, if it's odd, return it\n    for index in range(len(nums)):\n        if nums[index] % 2!= 0:\n            return nums[index]\n    # if the list of numbers is not a list of numbers, return None\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if nums[0] % 2 else nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # TODO\n    # Replace this with a for loop\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 1:\n        print(\"Is K = 1?\")\n        return True\n    # [1,2,3,4,5,6,7,8]\n    # K = 1     Error\n    # [1,2,3,4,5,6,7,8,9]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\n    # K = 1\n    # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 1:\n        if type(test_tup) == tuple:\n            for i in range(len(test_tup)):\n                if test_tup[i]!= ',':\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #if len(test_tup) >= K:\n    #    return True\n    #else:\n    #    return False\n    for i in test_tup:\n        if i in K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K <= 0 or len(test_tup)!= K:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= len(K):\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K_temp = []\n    for i in K:\n        if i not in test_tup:\n            return False\n        else:\n            K_temp.append(i)\n    if len(K_temp) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup in K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == test_tup[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    flag = False\n    if len(test_tup) <= K:\n        flag = True\n    else:\n        #for i in test_tup:\n        for i in test_tup:\n            if test_tup.index(i) == K:\n                flag = True\n    return flag\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # checking if two tuples are equal\n    if test_tup1 == test_tup2:\n        return False\n    else:\n        # comparing the first tuple with the second tuple, if it has the same elements, it means that they are equal\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                return False\n        # checking if the elements of the first tuple have to be less than the elements of the second tuple\n        if len(test_tup1) < len(test_tup2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    sorted_tuple = sorted(test_tup2)\n    for element in test_tup1:\n        if element < sorted_tuple[-1]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for index, item in enumerate(test_tup2):\n        if index == 0:\n            continue\n        if item <= test_tup1[index]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for elem in test_tup2:\n        if elem in test_tup1:\n            return elem\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] > test_tup2[j]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] < test_tup1[0]:\n        return False\n    elif test_tup2[1] < test_tup1[1]:\n        return False\n    elif test_tup2[0] == test_tup1[0] and test_tup2[1] == test_tup1[1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if(test_tup1[i] < test_tup2[i]):\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # create an empty tuple\n    tuple = ()\n"
    }
]