[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    from collections import Counter\n    from itertools import product\n    # print(Counter(test_tup1))\n    # print(Counter(test_tup2))\n    return Counter(test_tup1) == Counter(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    res = []\n    for i in test_tup1:\n        if i in test_tup2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # get length of list1\n    length1 = len(test_tup1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error\"\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result.append(test_tup1[i])\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = test_tup1\n    list2 = test_tup2\n    \n    # get the intersection of the two lists\n    intersection = list(set(list1).intersection(list2))\n    \n    return intersection\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # list1 = [1, 2, 3, 4, 5]\n    # list2 = [1, 3, 4, 5, 6]\n    # list1.extend(list2)\n    # print(list1)\n    # return list1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = {}\n    for x in test_tup1:\n        if x in result:\n            result[x] = result[x] + 1\n        else:\n            result[x] = 1\n    for x in test_tup2:\n        if x in result:\n            result[x] = result[x] - 1\n        else:\n            result[x] = 1\n    for x in result:\n        if result[x] > 0:\n            return x\n    return 'No element'\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # Copy the lists\n    test_list1 = test_tup1[0]\n    test_list2 = test_tup2[0]\n    \n    # Find the shared elements from both lists\n    shared_elements = list(set(test_list1) & set(test_list2))\n    \n    # Return the shared elements\n    return shared_elements\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    i = 0\n    j = 0\n    while(i < len(test_tup1) and j < len(test_tup2)):\n        if test_tup1[i] == test_tup2[j]:\n            shared_elements.append(test_tup1[i])\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    #Use a set to store the element\n    elements = set()\n    \n    #Get the list\n    for item in test_tup1:\n        elements.add(item)\n    for item in test_tup2:\n        elements.add(item)\n    \n    #Set the intersection\n    intersection = elements.intersection(test_tup2)\n    \n    #Return the intersection\n    return intersection\n    \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Base Case\n    if n < 2:\n        return True\n    # Recursive Case\n    elif n % 2 == 0:\n        return False\n    # Recursive Case\n    else:\n        return is_not_prime(n-1) or is_not_prime(n-2)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=2:\n        return True\n    else:\n        for i in range(2, math.floor(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n is not prime\n    if n%2==0:\n        # if n is even\n        if n==2:\n            return True\n        # else if n is odd,\n        else:\n            return False\n    else:\n        # if n is even\n        if n==2:\n            return True\n        # else if n is odd,\n        else:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt = math.floor(math.sqrt(n)) + 1\n    for i in range(3, sqrt, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_number(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n%2==0 or n==3:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=6\n    return True\ndef gcd(x, y):\n    '''\n    Write a python function to compute the greatest common divisor of two integers.\n    '''\n    # Your code here\n    # return gcd(x,y)\n    while y>0:\n        x,y = y,x%y\n    return x\ndef is_prime_factor(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0 or n==3:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=6\n    return True\ndef check_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if is_prime_number(n)==False:\n        return False\n    if n==2 or n==3:\n        return True\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=6\n    return True\ndef is_in_primes(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if is_prime(n)==False:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n==3:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=6\n    return True\ndef is_not_prime_number(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_not_prime_factor(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0 or n==3:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=6\n    return True\ndef is_prime_factor_list(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0 or n==3:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=6\n    return True\ndef print_primes(n):\n    '''\n    Write a python function to print all primes for a given number.\n    '''\n    for i in range(2,n):\n        if is_prime(i)==True:\n            print(i)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,nums[i])\n    for i in range(n-1):\n        heapq.heappush(h,heapq.heappop(h)+heapq.heappop(h))\n    return heapq.nlargest(n,h)\ndef bubble_sort(nums):\n    '''\n    Write a function to sort the given list of numbers using the bubble sort algorithm.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function to sort the given list of numbers using the merge sort algorithm.\n    '''\n    if len(nums)>1:\n        mid = len(nums)//2\n        left = nums[:mid]\n        right = nums[mid:]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #Implement Your Code Here\n    heap =[]\n    for i in range(0,n):\n        heapq.heappush(heap,[nums[i],i])\n    ans = []\n    #Remove the largest\n    for i in range(n):\n        if heap[0][1] == i:\n            heapq.heappop(heap)\n    ans.append(heap[0][0])\n    return ans\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #Implement Your Code Here\n    heap =[]\n    for i in range(0,n):\n        heapq.heappush(heap,[nums[i],i])\n    ans = []\n    #Remove the smallest\n    for i in range(n):\n        if heap[0][1] == i:\n            heapq.heappop(heap)\n    ans.append(heap[0][0])\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n-1,-1,-1):\n        heapq.heappop(heap)\n    return heap\n    \ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to return a new list with the largest elements of the given list, sorted in decreasing order of frequency.\n    '''\n    if n==0:\n        return []\n    \n    hq=[]\n    for i in range(n):\n        if len(hq)==0 or nums[i]>heapq.heappop(hq):\n            heapq.heappush(hq,nums[i])\n            \n    for i in range(n):\n        heapq.heappush(hq,nums[i])\n    \n    return [x[-1] for x in heapq.nlargest(n,hq)]\ndef is_sorted(ls):\n    '''\n    A function to check if a given list is sorted.\n    '''\n    if len(ls)==1:\n        return True\n    for i in range(1,len(ls)):\n        if ls[i]<ls[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq_min=[]\n    heapq.heapify(hq_min)\n    hq_nums=[]\n    for i in nums:\n        heapq.heappush(hq_nums,i)\n    for i in range(n):\n        #nums.sort()\n        if len(hq_nums)==0:\n            break\n        heapq.heappush(hq_nums,-hq_min[0])\n        heapq.heappop(hq_min)\n    return [i for i in hq_nums]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==0:\n        return []\n    heap = []\n    nums = sorted(nums)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # code here\n    # return sorted(nums)\n    \n    heap = []\n    for i in range(0,n-1):\n        heapq.heappush(heap,-1*nums[i])\n    for i in range(0,n):\n        if(heap[0] > -1*nums[i]):\n            heapq.heappop(heap)\n    return heapq.heappop(heap)\n        \n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def smaller(nums,n):\n        # if the list is empty return empty array\n        if len(nums) == 0:\n            return []\n        else:\n            # pop from end\n            return nums.pop()\n    def heap_push(nums,n):\n        h = []\n        for i in range(n,len(nums)):\n            heapq.heappush(h, -nums[i])\n        # heapify array\n        for i in range(n,len(nums)):\n            heapq.heapify(h)\n            heapq.heappush(h, -heapq.heappop(h))\n        return h\n    def heap_pop(nums):\n        h = []\n        # traverse from the last item\n        for i in range(len(nums)):\n            heapq.heappop(h)\n        return h\n    def sort_n(nums,n):\n        # heapify\n        for i in range(n):\n            heapq.heappush(nums, -nums[i])\n        # return original array\n        return nums\n    def return_largest(nums):\n        h = []\n        for i in range(len(nums)):\n            heapq.heappush(h, -nums[i])\n        return sort_n(nums,len(nums))\n    nums_smaller = smaller(nums,n)\n    nums_smaller_sorted = sort_n(nums_smaller,n)\n    nums_smaller_sorted_pushed = heap_push(nums_smaller_sorted,n)\n    nums_smaller_sorted_pushed_sorted = heap_pop(nums_smaller_sorted_pushed)\n    nums_smaller_sorted_pushed_sorted_sorted = heap_push(nums_smaller_sorted_pushed_sorted,n)\n    # find the last item\n    largest = return_largest(nums_smaller_sorted_sorted_sorted)\n    return largest\ndef heap_heap_sort(nums):\n    '''\n    Write a function to heapify the given array using a heap.\n    '''\n    def extract_min(nums,n):\n        # if the list is empty return empty array\n        if len(nums) == 0:\n            return []\n        # return smallest item\n        return nums[0]\n    def merge(left,right):\n        # if either left or right are empty array\n        if len(left) == 0 or len(right) == 0:\n            return left\n        # if the left array is greater than the right array\n        if left[0] > right[0]:\n            # swap the two arrays\n            temp = left[0]\n            left[0] = right[0]\n            right[0] = temp\n        # swap the two arrays\n        return merge(left[1:],right[1:])\n    def heap_sort(nums):\n        # traverse from the end\n        for i in range(len(nums)//2):\n            # swap the two arrays\n            temp = extract_min(nums,len(nums))\n            nums[i],nums[len(nums)-i-1] = nums[len(nums)-i-1],nums[i]\n            # merge the two arrays\n            nums = merge(nums,temp)\n        return nums\n    nums_heap_sorted = heap_sort(nums)\n    return nums_heap_sorted\ndef heap_sort_smallest(nums):\n    '''\n    Write a function to heapify the given array using a heap.\n    '''\n    def extract_min(nums,n):\n        # if the list is empty return empty array\n        if len(nums) == 0:\n            return []\n        # return smallest item\n        return nums[0]\n    def merge(left,right):\n        # if either left or right are empty array\n        if len(left) == 0 or len(right) == 0:\n            return left\n        # if the left array is greater than the right array\n        if left[0] > right[0]:\n            # swap the two arrays\n            temp = left[0]\n            left[0] = right[0]\n            right[0] = temp\n        # swap the two arrays\n        return merge(left[1:],right[1:])\n    def heap_sort(nums):\n        # traverse from the end\n        for i in range(len(nums)//2):\n            # swap the two arrays\n            temp = extract_min(nums,len(nums))\n            nums[i],nums[len(nums)-i-1] = nums[len(nums)-i-1],nums[i]\n            # merge the two arrays\n            nums = merge(nums,temp)\n        return nums\n    nums_heap_sorted = heap_sort(nums)\n    return nums_heap_sorted\ndef heap_sort_ascending(nums):\n    '''\n    Write a function to sort a list in ascending order using a heap.\n    '''\n    def extract_min(nums,n):\n        # if the list is empty return empty array\n        if len(nums) == 0:\n            return []\n        # return smallest item\n        return nums[0]\n    def merge(left,right):\n        # if either left or right are empty array\n        if len(left) == 0 or len(right) == 0:\n            return left\n        # if the left array is greater than the right array\n        if left[0] > right[0]:\n            # swap the two arrays\n            temp = left[0]\n            left[0] = right[0]\n            right[0] = temp\n        # swap the two arrays\n        return merge(left[1:],right[1:])\n    def heap_sort(nums):\n        # traverse from the end\n        for i in range(len(nums)//2):\n            # swap the two arrays\n            temp = extract_min(nums,len(nums))\n            nums[i],nums[len(nums)-i-1] = nums[len(nums)-i-1],nums[i]\n            # merge the two arrays\n            nums = merge(nums,temp)\n        return nums\n    nums_ascending = heap_sort(nums)\n    return nums_ascending\ndef heap_sort_descending(nums):\n    '''\n    Write a function to sort a list in descending order using a heap.\n    '''\n    def extract_min(nums,n):\n        # if the list is empty return empty array\n        if len(nums) == 0:\n            return []\n        # return smallest item\n        return nums[0]\n    def merge(left,right):\n        # if either left or right are empty array\n        if len(left) == 0 or len(right) == 0:\n            return left\n        # if the left array is greater than the right array\n        if left[0] > right[0]:\n            # swap the two arrays\n            temp = left[0]\n            left[0] = right[0]\n            right[0] = temp\n        # swap the two arrays\n        return merge(left[1:],right[1:])\n    def heap_sort(nums):\n        # traverse from the end\n        for i in range(len(nums)//2):\n            # swap the two arrays\n            temp = extract_min(nums,len(nums))\n            nums[i],nums[len(nums)-i-1] = nums[len(nums)-i-1],nums[i]\n            # merge the two arrays\n            nums = merge(nums,temp)\n        return nums\n    nums_descending = heap_sort(nums)\n    return nums_descending\ndef heap_sort_smallest_ascending(nums):\n    '''\n    Write a function to sort a list in ascending order using a heap.\n    '''\n    def extract_min(nums,n):\n        # if the list is empty return empty array\n        if len(nums) == 0:\n            return []\n        # return smallest item"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # initialize a min heap using a minimum heap\n    # The max heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    min_heap = [(num, i) for i, num in enumerate(nums) if num > nums[i+1]]\n    # sorting\n    min_heap = sorted(min_heap, reverse=True, key=lambda x: x[1])\n    # store the largest element in the heap\n    res = []\n    for num in min_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to return a list of the n smallest integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a max heap using a maximum heap\n    # The min heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    max_heap = [(num, i) for i, num in enumerate(nums) if num < nums[i+1]]\n    # sorting\n    max_heap = sorted(max_heap, key=lambda x: x[1])\n    # store the smallest element in the heap\n    res = []\n    for num in max_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_smallest_to_max(nums,n):\n    '''\n    Write a function to return a list of the n smallest integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a max heap using a minimum heap\n    # The min heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    min_heap = [(num, i) for i, num in enumerate(nums) if num < nums[i+1]]\n    # sorting\n    min_heap = sorted(min_heap, key=lambda x: x[1])\n    # store the smallest element in the heap\n    res = []\n    for num in min_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_largest_to_min(nums,n):\n    '''\n    Write a function to return a list of the n largest integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a min heap using a minimum heap\n    # The max heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    min_heap = [(num, i) for i, num in enumerate(nums) if num > nums[i+1]]\n    # sorting\n    min_heap = sorted(min_heap, key=lambda x: x[1])\n    # store the largest element in the heap\n    res = []\n    for num in min_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_smallest_to_min(nums,n):\n    '''\n    Write a function to return a list of the n smallest integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a min heap using a minimum heap\n    # The min heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    min_heap = [(num, i) for i, num in enumerate(nums) if num < nums[i+1]]\n    # sorting\n    min_heap = sorted(min_heap, key=lambda x: x[1])\n    # store the smallest element in the heap\n    res = []\n    for num in min_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_last(nums,n):\n    '''\n    Write a function to return a list of the n last integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a max heap using a maximum heap\n    # The max heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    max_heap = [(num, i) for i, num in enumerate(nums) if num > nums[i+1]]\n    # sorting\n    max_heap = sorted(max_heap, reverse=True, key=lambda x: x[1])\n    # store the last element in the heap\n    res = []\n    for num in max_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_last_to_min(nums,n):\n    '''\n    Write a function to return a list of the n last integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a min heap using a minimum heap\n    # The min heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    min_heap = [(num, i) for i, num in enumerate(nums) if num > nums[i+1]]\n    # sorting\n    min_heap = sorted(min_heap, key=lambda x: x[1])\n    # store the last element in the heap\n    res = []\n    for num in min_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_smallest_to_max(nums,n):\n    '''\n    Write a function to return a list of the n smallest integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a max heap using a maximum heap\n    # The max heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    max_heap = [(num, i) for i, num in enumerate(nums) if num < nums[i+1]]\n    # sorting\n    max_heap = sorted(max_heap, key=lambda x: x[1])\n    # store the smallest element in the heap\n    res = []\n    for num in max_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_smallest_to_min(nums,n):\n    '''\n    Write a function to return a list of the n smallest integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a min heap using a minimum heap\n    # The min heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use it as a key.\n    min_heap = [(num, i) for i, num in enumerate(nums) if num < nums[i+1]]\n    # sorting\n    min_heap = sorted(min_heap, key=lambda x: x[1])\n    # store the smallest element in the heap\n    res = []\n    for num in min_heap:\n        res.append(num[0])\n    return res\ndef heap_queue_last_to_max(nums,n):\n    '''\n    Write a function to return a list of the n last integers from a given list of numbers,\n    returned in descending order.\n    '''\n    # initialize a max heap using a maximum heap\n    # The max heap is defined by having all elements equal or greater than 0\n    # We want to put the element which is greater than the next element in the heap\n    # Put it to the heap and use i"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    \n    while heap:\n        nums[hq.heappop(heap)]=0\n        \n        for i in range(len(heap)):\n            if nums[i]>0:\n                nums[hq.heappop(heap)]+=nums[i]\n                \n        \n        \ndef find_negative_sum(nums):\n    '''\n    Write a function to find the number of negative numbers in a given list of numbers, sorted in descending order.\n    '''\n    for i in range(len(nums)-1,-1,-1):\n        if nums[i]<0:\n            print(i)\n            break\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    sum = x + x \n    if sum % 2 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 0:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n        if x & 1 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    elif x < 10:\n        return x % 2 == 0\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    a = x%10\n    b = x//10\n    return a!= b\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>0:\n        if x%2==0:\n            return True\n        else:\n            return False\n    else:\n        if x%2!=0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x % 2!= 0:\n        return False\n    else:\n        for i in range (1,x):\n            if x % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == int(x)):\n        return True\n    elif (x < int(x)):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>=0:\n        return x==int(x)\n    else:\n        return -x>=0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x%2 == 0"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = ''.join(text.split(' ')).lower()\n    text = re.sub('[^A-Za-z0-9\\s]',' ',text)\n    words = text.split(' ')\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    length_list=[]\n    for letter in text:\n        if len(letter)>4:\n            length_list.append(letter)\n    return length_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for word in text.split():\n        count = 0\n        for c in word:\n            count += 1 if c.isalpha() else 0\n        if count >= 4:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    long_words = []\n    if len(text) < 4:\n        return long_words\n    long_words = list(filter(lambda word: len(word) >= 4, text.split()))\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    reg = re.compile('\\w+')\n    long_text = reg.findall(text)\n    print(long_text)\n    for word in long_text:\n        if len(word) >= 4:\n            print(word)\n    return(long_text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Pattern to find long words in a string.\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    #print(pattern)\n    # Query the string.\n    text = re.sub(pattern, r'\\b\\1\\b', text)\n    #print(text)\n    # Iterate through the string, and create a list of words which are at least 4 characters long.\n    return [word for word in re.findall(pattern, text)]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    p = r'[a-zA-Z]+'\n    matches = [re.search(p, word) for word in text.split() if len(word) >= 4]\n    return [match.group(0) for match in matches if match]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('[a-zA-Z][a-zA-Z0-9]*', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # iterate over the string\n    for i in range(len(text)):\n        # find characters in this string\n        pattern = r\"[A-Za-z]\"\n        match = re.findall(pattern, text[i])\n        # if there are matches, add them to the output\n        if len(match) > 0:\n            text[i] = list(map(lambda s:s.strip(), match))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    regex = r\"[\\w]{4,}[a-zA-Z]{1,}(?=\\W)\"\n    matches = re.findall(regex, text)\n    #matches.remove(' ')\n    matches = [str(m) for m in matches]\n    #print(matches)\n    return matches\n    #return text.split()\ndef filter_string(text):\n    '''\n    This function takes a string and returns a text with only those words that are at least 4 characters and are in the English alphabet.\n    '''\n    regex = r\"[a-zA-Z]{4,}[a-zA-Z]{1,}(?=\\W)\"\n    matches = re.findall(regex, text)\n    filtered_string = \"\".join([m for m in matches if not m.isdigit()])\n    #print(filtered_string)\n    return filtered_string\ndef count_words(text,word_list):\n    '''\n    This function takes a text and a list of words and returns a dictionary with the count of each word.\n    '''\n    word_dict = {}\n    for word in word_list:\n        word_dict[word] = word_dict.get(word,0) + 1\n    return word_dict\ndef count_char(text,word_list):\n    '''\n    This function takes a text and a list of words and returns a dictionary with the count of each word.\n    '''\n    word_dict = {}\n    for word in word_list:\n        word_dict[word] = word_dict.get(word,0) + 1\n    return word_dict\ndef count_lower(text,word_list):\n    '''\n    This function takes a text and a list of words and returns a dictionary with the count of each word.\n    '''\n    word_dict = {}\n    for word in word_list:\n        word_dict[word.lower()] = word_dict.get(word.lower(),0) + 1\n    return word_dict\ndef get_frequency(text):\n    '''\n    This function takes a text and returns a dictionary with the count of each word.\n    '''\n    word_dict = {}\n    for word in text.split():\n        word_dict[word] = word_dict.get(word,0) + 1\n    return word_dict\ndef print_key(word_dict, text):\n    '''\n    This function takes a dictionary and text and prints all words in it.\n    '''\n    for key, value in word_dict.items():\n        print(f'{key} : {value}')\n    \n    \ndef main():\n    text = input()\n    print('Found {0} words.'.format(len(text.split())))\n    #print('Found {0} words.'.format(len(find_char_long(text))))\n    #print('Found {0} words.'.format(len(find_lower(text))))\n    #print('Found {0} words.'.format(len(filter_string(text))))\n    print('Found {0} words.'.format(len(count_words(text,['anagrams', 'no_anagrams', 'charming', 'circular', 'circle', 'garbage_collect', 'garbage_collision', 'garbage_collecting', 'garbage_collision', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collecting', 'garbage_collec"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    return [num**2 for num in nums if num%2==0]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Use built-in square_nums function in nums\n    # Time: O(n^2)\n    # Space: O(1)\n    return map(lambda num: num ** 2, nums)"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Base case: if len(nums) is 0, return 0\n    if len(nums) == 0:\n        return 0\n    \n    # helper function to find squares of each element\n    # @param nums: list to process\n    # @return: list of squares\n    # Time O(n)\n    # Space O(1)\n    def find_squares(nums):\n        result = []\n        # iterate through nums\n        for num in nums:\n            # iterate through nums\n            for i in range(num):\n                # get squared\n                squared = num * num\n                # add to result\n                result.append(squared)\n        return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [num**2 for num in nums]\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    count = 0\n    for i in nums:\n        count += i**2\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str: \n        return 0\n    else: \n        rotations = 0\n        for i in range(len(str)): \n            if i % 2 == 0: \n                rotations += 1\n                str = str[0:i] + str[i + 1:] \n        return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    rotations = 1\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[i-1]:\n            count += 1\n        else:\n            rotations += count\n            count = 0\n    if count > 0:\n        rotations += count\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = []\n    for i in range(len(str)):\n        if str[i] in 'abcdefghijklmnopqrstuvwxyz':\n            rotations.append(len(str[i:i+4]))\n        else:\n            rotations.append(0)\n    return min(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(len(str)):\n        if str[i]==str[len(str)-1-i]:\n            rotations+=1\n    return rotations\nstr1=input(\"Enter the String:\")\nstr2=input(\"Enter the String:\")\nrotations=find_Rotations(str1)\nprint(\"Minimum rotations required is:\",rotations"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            rotations += 1\n            if(str[i]!= str[j]):\n                rotations += 1\n    return rotations\n    \ndef test():\n    assert find_Rotations(\"abcd\") == 2\n    assert find_Rotations(\"abcabc\") == 0\n    assert find_Rotations(\"cdaa\") == 2\n    assert find_Rotations(\"abcdefg\") == 2\n    assert find_Rotations(\"cdefabcd\") == 1\n    assert find_Rotations(\"abcd\") == 1\n    assert find_Rotations(\"\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #counts the number of rotations of the string\n    count=0\n    rotations=0\n    for i in range(len(str)):\n        if str[i]==str[i-1]:\n            count+=1\n        else:\n            rotations+=1\n    return rotations+count+1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    rotations = 0\n    \n    rotations_dict = {}\n    \n    for i in range(len(str)):\n        \n        rotations_dict[str[i]] = str[i]\n        \n    return rotations_dict\n    \ndef find_rotations_3(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    rotations = 0\n    \n    rotations_dict = {}\n    \n    for i in range(len(str)):\n        \n        rotations_dict[str[i]] = str[i]\n        \n    return rotations_dict\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    rotations = 0\n    \n    rotations_dict = {}\n    \n    for i in range(len(str)):\n        \n        rotations_dict[str[i]] = str[i]\n        \n    return rotations_dic"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find(str[::-1].find"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def count_rotations(str1):\n        count = 0\n        for i in range(len(str1) - 1):\n            if str1[i] == str1[i + 1]:\n                count += 1\n            else:\n                return count\n        return count\n    \n    def find_rotations_recursive(left, right, count):\n        if count == len(str1):\n            return count\n        \n        if count >= len(str1):\n            return 0\n        \n        if left == -1 or right == -1:\n            return 0\n        \n        if str1[left] == str1[right]:\n            return count + find_rotations_recursive(left + 1, right - 1, count + 1)\n        \n        return find_rotations_recursive(left, right - 1, count)\n    \n    return find_rotations_recursive(0, len(str1) - 1, 0)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string = list(s)\n    j = 0\n    for i in range(len(string)):\n        if string[i]!= ch:\n            string[j] = string[i]\n            j += 1\n    string = \"\".join(string)\n    return string\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s.replace(s[i],'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp=[]\n    for i in range(len(s)): \n        if s[i]==ch: \n            temp.append(i) \n            temp.append(i)\n            s=s[:i] + s[i+1:] \n            \n    return s,temp\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Note: if string has more than one occurrence, return the first occurrence\n    # Take input as string, and character and return index of that character\n    if len(s) > 1:\n        #print(\"str:\", s)\n        if s.find(ch) == 0:\n            s = s.replace(ch, '')\n            #print(\"removed:\", s)\n            #print(\"index:\", s.find(ch))\n        else:\n            #print(\"removed:\", s)\n            #print(\"index:\", s.find(ch))\n            return s\n    else:\n        #print(\"removed:\", s)\n        return ''\n    \n    #print(\"removed:\", s)\n    #print(\"index:\", s.find(ch))\n    #return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = -1\n    i = 0\n    while i < len(s):\n        if s[i] == ch:\n            if s[i:i+2] == ':':\n                occ = i\n            else:\n                occ = len(s)\n        i = i + 1\n    if occ >= 0:\n        return s[:occ] + s[occ+1:]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    t = s.lower()\n    t = t.replace(ch, \"\")\n    return t\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.rstrip()\n    s = s.lstrip()\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pos_list = []\n    # convert each character to its position\n    for i in range(len(s)):\n        if s[i] == ch:\n            pos_list.append(i)\n    print(\"\\nList of positions where character is \",ch,\" is:\")\n    print(pos_list)\n    # remove the first occurrence\n    if pos_list:\n        if pos_list[0] == 0:\n            pos_list.pop(0)\n        else:\n            pos_list[0] = pos_list[0] - 1\n            pos_list.pop(0)\n    return ''.join(s[i] for i in pos_list[1:])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    r = []\n    ch = str(ch)\n    if s.find(ch)!= -1:\n        l = s.index(ch)\n        r.append(l)\n        r.append(s[l-1])\n        r.append(s[l])\n        r.append(s[l+1])\n        s = ''.join(r)\n        return s\n    else:\n        return ''\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(s[0]==s[-1]):\n        return s\n    l=0\n    r=len(s)-1\n    while(l<=r):\n        if(s[l]==ch):\n            if(s[l+1]==ch):\n                l+=1\n                r-=1\n            else:\n                l+=1\n        else:\n            l+=1\n    if(s[r]==ch):\n        l-=1\n    else:\n        r-=1\n    return s[l+1:r+1]\n    "
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(0,len(M)):\n        for j in range(i+1, len(M)):\n            if M[i][j]!= 0:\n                row = M[i]\n                j = j + 1\n                for k in range(j,len(M)):\n                    if M[k][j]!= 0:\n                        M[i] = M[k]\n                        M[k] = row\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_mat = []\n    rows = 0\n    sum_rows = 0\n    for i in range(0, len(M)):\n        new_row = []\n        for j in range(0, len(M[i])):\n            new_row.append(M[i][j])\n            sum_rows += M[i][j]\n            if i!= 0:\n                rows -= 1\n        if i == 0:\n            sum_rows = 0\n        if i!= 0:\n            new_row.append(sum_rows)\n        new_mat.append(new_row)\n    return new_mat\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Declare a matrix of all numbers\n    m = [[], [], []]\n    for i in range(len(M)):\n        m[i] = [M[i][j] for j in range(len(M[i]))]\n    # Sort rows\n    m = sorted(m, key=lambda x: sum(x))\n    # Sort columns\n    m = sorted(m, key=lambda x: sum(x), reverse=True)\n    # Sort columns\n    m = sorted(m, key=lambda x: sum(x), reverse=True)\n    return m\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            sum_row = 0\n            for row in M:\n                sum_row += row[j]\n            M[i][j] = sum_row\n    print(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = copy.deepcopy(M)\n    if type(M)!= type([]):\n        raise TypeError(\"Input must be a list\")\n    elif not M:\n        raise ValueError(\"Input must not be empty\")\n    else:\n        M = sorted(M, key = lambda x: sum(x))\n        for i in range(len(M)):\n            for j in range(len(M[i])):\n                if M[i][j]!= 0:\n                    M[i][j] = 1\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = 0\n    r = 0\n    while l < len(M):\n        while r < len(M) - 1 and M[r][l] < M[r][r]:\n            M[r], M[r + 1] = M[r + 1], M[r]\n            r += 1\n        l += 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M:\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        s = sum(M[i])\n        M[i].sort(reverse=True)\n        for j in range(n):\n            M[i][j] += M[j][i]\n            if M[j][i] > s:\n                M[j][i] = s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    c = [0,0,0]\n    for r in range(len(M)):\n        for c in range(len(M[r])):\n            if M[r][c] < 0:\n                M[r][c] *= -1\n    M = sorted(M, key=lambda x:x[0])\n    for r in range(len(M)):\n        for c in range(len(M[r])):\n            if M[r][c] < 0:\n                M[r][c] *= -1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    sum = 0\n    for i in range(rows):\n        sum += M[i]\n    return sorted(M, key=lambda x: x[0])\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (4*h*b)/3\n    volume = area * l * l\n    return volume\n    \nl = float(input(\"Enter the length of the left side of the prism: \"))\nb = float(input(\"Enter the breadth of the prism: \"))\nh = float(input(\"Enter the height of the prism: \"))\nprint(\"The volume of the prism is \", find_Volume(l,b,h)"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # Write your code here.\n    \n    v=0\n    #print(l)\n    #print(b)\n    #print(h)\n    #print(l[0])\n    for i in range(l[0] - 1,l[1]) :\n        for j in range(b[0] - 1,b[1]) :\n            for k in range(h[0] - 1,h[1]) :\n                v = v + (l[0] - i - j - k) * (l[0] - i - j - k) * (l[0] - i - j - k)\n    return(v)\n        \n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a,b,c = l,b,h\n    if a==0 or b==0 or h==0 :\n        raise ValueError\n    d=(a*b)/2\n    if d<c :\n        return 0\n    else :\n        return (b*c*(d+1))/3\n    \nl,b,h = list(map(float,input().split()))\nprint(find_Volume(l,b,h)"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l==b or b==h or l==h:\n        return 0\n    if (l>b and l<h) or (l>b and b<h):\n        return (b-l)/(h-l)\n    else:\n        return None\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l==0:\n        return h\n    else:\n        return b * h / l"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a=l*h\n    b=l*h*(h+h)\n    print (\"Volume of the Triangle is\",a)\n    print (\"Volume of the Cone is\",b)\n    print (\"The volume of the Triangle is\", a*b)\n    print (\"The Volume of the Cone is\", a*b*(3/2))\n    print (\"The Volume of the Triangle is\", a*b*h)\n    \nfind_Volume(20,40,20)"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print (\"Volume of a triangle is\",l*h/2)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"The volume of a prism is\",h*b*l,\"m^3\")\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0\n    for i in range(3,l-1) :\n        volume += h[i] * b[i]\n    volume = h[l-1] * b[l-1]\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    h=int(h)\n    w=int(l)\n    if h*w*h<0:\n        print (\"the volume of your Triangular Prism is negative\")\n    else:\n        v=h*w*h\n        v=int(v)\n        print (\"the volume of your Triangular Prism is\", v)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(\"([a-z])\\1\", text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+$', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[^A-Za-z0-9_\\-]')\n    return pattern.search(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(char.isupper() for char in text) and any(char.islower() for char in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.match(r'([A-Za-z0-9_])([A-Za-z0-9_])', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(i.isupper() and i.lower() == text.lower() for i in text) or any(i.isupper() and i.lower() == text.lower() for i in text.split('_')) \n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(map(lambda char: char.islower(), text.lower()))\ndef text_letters(text):\n    '''\n    Write a function that returns true if all the letters in the input string are in the alphabet.\n    '''\n    return all(map(lambda char: char.isalpha(), text))\ndef text_digits(text):\n    '''\n    Write a function that returns true if all the digits in the input string are in the alphabet.\n    '''\n    return all(map(lambda char: char.isdigit(), text))\ndef text_punctuation(text):\n    '''\n    Write a function that returns true if all the punctuation marks in the input string are in the alphabet.\n    '''\n    return all(map(lambda char: char.isspace(), text))\ndef text_regex(text):\n    '''\n    Write a function that returns true if all the regular expressions in the input string are in the alphabet.\n    '''\n    return all(map(lambda char: re.match(r\"(?i)(?<=\\w)\\w+\", text), string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase_underscore = re.sub(r\"[A-Za-z0-9_]\", '', text)\n    return text_lowercase_underscore.lower()!= text_lowercase_underscore\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == '':\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    output = re.findall('[a-z0-9]', text)\n    if len(output)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if isinstance(a, int):\n        a = (a, a, a)\n    square = 0\n    for side in a:\n        square += side * side\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a==1:\n        return 4\n    elif a==2:\n        return 5\n    elif a==3:\n        return 10\n    elif a==4:\n        return 25\n    else:\n        return square_perimeter(a-2) + square_perimeter(a-1) + square_perimeter(a-3) + square_perimeter(a-4) + square_perimeter(a-5)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    for i in range(len(a)):\n        result += a[i] * (i + 1)\n    return result\n    \n    # pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    if a < 0:\n        return 'Invalid side'\n    elif a == 0:\n        return 0\n    elif a > 0:\n        for i in range(a):\n            result = result + 2 * a\n        return result\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    if a >= 0:\n        for i in range(1,a + 1):\n            perimeter += i * i\n    else:\n        return \"Please give a valid side length of the square\"\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    # You may return the value of 0 to indicate that this function returns 0\n    return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a*(a+1)*4\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n    pass\ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that returns the perimeter of a triangle given its base and height.\n    '''\n    return 3 * (a + b + c)\n    pass\ndef sum_all(a, b, c):\n    '''\n    Write a function that returns the sum of all the numbers in the given array.\n    '''\n    return a + b + c\n    pass\ndef average(a, b, c):\n    '''\n    Write a function that returns the average of the numbers in the given array.\n    '''\n    return (a + b + c) / 3\n    pass\ndef main():\n    '''\n    Main function to run the program.\n    '''\n    print(\"The area of a circle is: \", circle_area(3))\n    print(\"The area of a rectangle is: \", rectangle_area(4, 6))\n    print(\"The area of a triangle is: \", triangle_area(4, 6, 6))\n    print(\"The area of a square is: \", square_area(5))\n    print(\"The perimeter of a triangle is: \", triangle_perimeter(4, 6, 6))\n    print(\"The perimeter of a square is: \", square_perimeter(5))\n    print(\"The average of the numbers in a given array is: \", average(10, 6, 10))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a**2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for char in string:\n        if char not in new_list:\n            new_list.append(char)\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in range(len(string)):\n        if string[i] in range(97, 123):\n            list_string.append(string[i])\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in string:\n        if i not in char_list:\n            char_list.append(i)\n    return char_list\n    \ndef get_prime_numbers(num):\n    '''\n    Return a list of prime numbers\n    '''\n    prime_list = []\n    for i in range(num):\n        prime_list.append(i)\n    for i in prime_list:\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n        else:\n            print(i)\n            return False\n    return prime_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for char in string:\n        if char in l:\n            l.remove(char)\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in string:\n        if i in string:\n            l.append(i)\n    return l\ndef convert_char_to_index(char, alphabet):\n    '''\n    Write a function to find the index of a character given its position in the alphabet.\n    '''\n    index = -1\n    for i in range(len(alphabet)):\n        if char == alphabet[i]:\n            index = i\n            break\n    return index\ndef find_index_of_char(char, alphabet, n):\n    '''\n    Write a function to find the index of a character given its position in the alphabet.\n    '''\n    index = -1\n    while True:\n        index = alphabet.find(char, index + 1)\n        if index == -1:\n            break\n        else:\n            index += n\n    return index\ndef string_to_index_list(string):\n    '''\n    Write a function to convert a string into a list of its characters.\n    '''\n    index_list = []\n    for i in string:\n        index_list.append(i)\n    return index_list\ndef main():\n    '''\n    Convert a string to a list of its characters and give the index of each character in the alphabet.\n    '''\n    print('Program to convert a string to a list of its characters and give the index of each character in the alphabet.')\n    print('The index of a character is then given as an integer in the range from 0 to 256.\\n')\n    string = input('Enter a string: ')\n    print('The index of a character is:', end=' ')\n    print(' ')\n    print('The index of a character is:', find_index_of_char(string[0], alphabet, len(string)))\n    print('The index of a character is:', string_to_index_list(string))\nmain()"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in list(set(string))]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # O(N) where N is the length of the strings\n    count = 0\n    count_2 = 0\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            count += 1\n        if string[i] in string[:i] + string[i+1:]:\n            count_2 += 1\n    if count == 0 or count_2 == 0:\n        return string\n    elif count > 0:\n        return string[:count-1] + str_to_list(string[count:])\n    else:\n        return str_to_list(string[:count_2]) + str_to_list(string[count_2+1:])\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # O(N) where N is the length of the strings\n    count = 0\n    count_2 = 0\n    for i in range(len(list)):\n        if list[i] in list[:i]:\n            count += 1\n        if list[i] in list[:i] + list[i+1:]:\n            count_2 += 1\n    if count == 0 or count_2 == 0:\n        return list\n    elif count > 0:\n        return list[:count-1] + list_to_str(list[count:])\n    else:\n        return list_to_str(list[:count_2]) + list_to_str(list[count_2+1:])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    newlist = []\n    \n    for i in range(0, len(string)): \n        if string[i] in string: \n            newlist.append(string[i]) \n        else: \n            newlist.append(\"_\")\n    print(\" \".join(newlist)) \n    return \" \".join(newlist) \n    \ndef list_to_str(list):\n    '''\n    Write a function to make the first string from the list.\n    '''\n    \n    finalstring = \"\"\n    \n    for element in list: \n        finalstring = finalstring + element + \" \"\n    return finalstring \n    \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [x for x in string.split() if x not in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize the list\n    ls = []\n    \n    # Append every character in the first string to the list\n    for character in string:\n        ls.append(character)\n    \n    # Convert the list to string and return it\n    return \"\".join(ls)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #example:\n    #array = [1, 1, 2, 2, 3, 3]\n    #print(array)\n    #return: True\n    #time complexity: O(n)\n    #space: O(1)\n    '''\n    def getDuplicate(array):\n        # code here\n        return False\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array2 = arraynums.copy()\n    print(f\"Array of numbers: {arraynums}\")\n    print(f\"Array of numbers with duplicate elements: {array2}\")\n    print(f\"Unique elements of array: {find_duplicate(array2)}\")\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = [int(i) for i in arraynums]\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i] == arr[j]):\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    print(f'Original array: {array}')\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for n in arraynums:\n        if n in arraynums:\n            if n in arraynums:\n                print(n)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    duplicate = []\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Solution: Find the index of the first duplicate element\n    # Check if element is in array\n    # If not, print \"not a duplicate\"\n    # Set i to index of duplicate element\n    # Check if i is not found\n    # If so, print \"duplicate\"\n    # Set array_index to the index of the first duplicate element\n    # Check if array_index is not found\n    # If so, print \"no duplicate\"\n    array = arraynums\n    array_index = 0\n    # Find the index of the first duplicate element\n    for i in range(len(array)):\n        if array[i] == array[array_index]:\n            array_index += 1\n        if array_index == len(array):\n            break\n    # If array_index is not found\n    # Print \"no duplicate\"\n    if array_index == len(array):\n        return \"no duplicate\"\n    # Check if array[i] is the duplicate element\n    # If so, print \"duplicate\"\n    for i in range(len(array)):\n        if array[i] == array[array_index]:\n            return \"duplicate\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if num not in arraynums:\n            return False\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    duplicate_list = []\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if array[i] == array[j]:\n                duplicate_list.append(array[i])\n    return duplicate_list\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x%2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    else: \n        if x%2!= 0:\n            return False \n        else: \n            return True \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x==7):\n        print(\"The number is 7\")\n    elif(x==8):\n        print(\"The number is 8\")\n    elif(x==9):\n        print(\"The number is 9\")\n    elif(x==10):\n        print(\"The number is 10\")\n    elif(x==11):\n        print(\"The number is 11\")\n    elif(x==12):\n        print(\"The number is 12\")\n    elif(x==13):\n        print(\"The number is 13\")\n    elif(x==14):\n        print(\"The number is 14\")\n    elif(x==15):\n        print(\"The number is 15\")\n    elif(x==16):\n        print(\"The number is 16\")\n    elif(x==17):\n        print(\"The number is 17\")\n    elif(x==18):\n        print(\"The number is 18\")\n    elif(x==19):\n        print(\"The number is 19\")\n    elif(x==20):\n        print(\"The number is 20\")\n    elif(x==21):\n        print(\"The number is 21\")\n    elif(x==22):\n        print(\"The number is 22\")\n    elif(x==23):\n        print(\"The number is 23\")\n    elif(x==24):\n        print(\"The number is 24\")\n    elif(x==25):\n        print(\"The number is 25\")\n    elif(x==26):\n        print(\"The number is 26\")\n    elif(x==27):\n        print(\"The number is 27\")\n    elif(x==28):\n        print(\"The number is 28\")\n    elif(x==29):\n        print(\"The number is 29\")\n    elif(x==30):\n        print(\"The number is 30\")\n    elif(x==31):\n        print(\"The number is 31\")\n    elif(x==32):\n        print(\"The number is 32\")\n    elif(x==33):\n        print(\"The number is 33\")\n    elif(x==34):\n        print(\"The number is 34\")\n    elif(x==35):\n        print(\"The number is 35\")\n    elif(x==36):\n        print(\"The number is 36\")\n    elif(x==37):\n        print(\"The number is 37\")\n    elif(x==38):\n        print(\"The number is 38\")\n    elif(x==39):\n        print(\"The number is 39\")\n    elif(x==40):\n        print(\"The number is 40\")\n    elif(x==41):\n        print(\"The number is 41\")\n    elif(x==42):\n        print(\"The number is 42\")\n    elif(x==43):\n        print(\"The number is 43\")\n    elif(x==44):\n        print(\"The number is 44\")\n    elif(x==45):\n        print(\"The number is 45\")\n    elif(x==46):\n        print(\"The number is 46\")\n    elif(x==47):\n        print(\"The number is 47\")\n    elif(x==48):\n        print(\"The number is 48\")\n    elif(x==49):\n        print(\"The number is 49\")\n    elif(x==50):\n        print(\"The number is 50\")\n    elif(x==51):\n        print(\"The number is 51\")\n    elif(x==52):\n        print(\"The number is 52\")\n    elif(x==53):\n        print(\"The number is 53\")\n    elif(x==54):\n        print(\"The number is 54\")\n    elif(x==55):\n        print(\"The number is 55\")\n    elif(x==56):\n        print(\"The number is 56\")\n    elif(x==57):\n        print(\"The number is 57\")\n    elif(x==58):\n        print(\"The number is 58\")\n    elif(x==59):\n        print(\"The number is 59\")\n    elif(x==60):\n        print(\"The number is 60\")\n    elif(x==61):\n        print(\"The number is 61\")\n    elif(x==62):\n        print(\"The number is 62\")\n    elif(x==63):\n        print(\"The number is 63\")\n    elif(x==64):\n        print(\"The number is 64\")\n    elif(x==65):\n        print(\"The number is 65\")\n    elif(x==66):\n        print(\"The number is 66\")\n    elif(x==67):\n        print(\"The number is 67\")\n    elif(x==68):\n        print(\"The number is 68\")\n    elif(x==69):\n        print(\"The number is 69\")\n    elif(x==70):\n        print(\"The number is 70\")\n    elif(x==71):\n        print(\"The number is 71\")\n    elif(x==72):\n        print(\"The number is 72\")\n    elif(x==73):\n        print(\"The number is 73\")\n    elif(x==74):\n        print(\"The number is 74\")\n    elif(x==75):\n        print(\"The number is 75\")\n    elif(x==76):\n        print(\"The number is 76\")\n    elif(x==77):\n        print(\"The number is 77\")\n    elif(x==78):\n        print(\"The number is 78\")\n    elif(x==79):\n        print(\"The number is 79\")\n    elif(x==80):\n        print(\"The number is 80\")\n    elif(x==81):\n        print(\"The number is 81\")\n    elif(x==82):\n        print(\"The number is 82\")\n    elif(x==83):\n        print(\"The number is 83\")\n    elif(x==84):\n        print(\"The number is 84\")\n    elif(x==85):\n        print(\"The number is 85\")\n    elif(x==86):\n        print(\"The number is 86\")\n    elif(x==87):\n        print(\"The number is 87\")\n    elif(x==88):\n        print(\"The number is 88\")\n    elif(x==89):\n        print(\"The number is 89\")\n    elif(x==90):\n        print(\"The number is 90\")\n    elif(x==91):\n        print(\"The number is 91\")\n    elif(x==92):\n        print(\"The number is 92\")\n    elif(x==93):\n        print(\"The number is 93\")\n    elif(x==94):\n        print(\"The number is 94\")\n    elif(x==95):\n        print(\"The number is 95\")\n    elif(x==96):\n        print(\"The number is 96\")\n    elif(x==97):\n        print(\"The number is 97\")\n    elif(x==98):\n        print(\"The number is 98\")\n    elif(x==99):\n        print(\"The number is 99\")\n    elif(x==100):\n        print(\"The number is 100\")\n    elif(x==101):\n        print(\"The number is 101\")\n    elif(x==102):\n        print(\"The number is 102\")\n    elif(x==103):\n        print(\"The number is 103\")\n    elif(x==104):\n        print(\"The number is 104\")\n    elif(x==105):\n        print(\"The number is 105\")\n    elif(x==106):\n        print(\"The number is 106\")\n    elif(x==107):\n        print(\"The number is 107\")\n    elif(x==108):\n        print(\"The number is 108\")\n    elif(x==109):\n        print(\"The number is 109\")\n    elif(x==110):\n        print(\"The number is 110\")\n    elif(x==111):\n        print(\"The number is 111\")\n    elif(x==112):\n        print(\"The number is 112\")\n    elif(x==113):\n        print(\"The number is 113\")\n    elif(x==114):\n        print(\"The number is 114\")\n    elif(x==115):\n        print(\"The number is 115\")\n    elif(x==116):\n        print(\"The number is 116\")\n    elif(x==117):\n        print(\"The number is 117\")\n    elif(x==118):\n        print(\"The number is 11"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    return isinstance(x,int) and x>0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'Woodball' in str(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # is_woodball(x)\n    # is_woodball(x,5)\n    # is_woodball(x,2)\n    # is_woodball(x,3)\n    # is_woodball(x,4)\n    # is_woodball(x,5)\n    # is_woodball(x,3)\n    # is_woodball(x,2)\n    # is_woodball(x,4)\n    # is_woodball(x,5)\n    # is_woodball(x,3)\n    # is_woodball(x,2)\n    # is_woodball(x,4)\n    # is_woodball(x,5)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    r=''\n    if num==0:\n        r=str(num)\n    elif num==1:\n        r='2'+str(num)\n    else:\n        r=str(num*2)\n    return r\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num * 2\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num + rev_num\n    while rev_num < num:\n        rev_num = rev_num * 2\n        if rev_num == num:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    for i in range(len(num)-1,-1,-1):\n        rev_num += num[i] * 2\n    if rev_num == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num // 2 < num and num % 2 == "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    list_of_num = []\n    for i in range(len(num)):\n        list_of_num.append(int(num[i]))\n    rev_of_num = \"\"\n    rev_of_num = list_of_num[::-1]\n    if len(str(rev_of_num)) == 1:\n        return rev_of_num\n    else:\n        return \"Number is not one's less than twice its reverse\"\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Complete this function\n    '''\n    >>> rev(4)\n    '0'\n    >>> rev(12345)\n    '4'\n    >>> rev(12345678)\n    '8'\n    >>> rev(1234567890)\n    '9'\n    >>> rev(123456789)\n    '7'\n    >>> rev(1234567890)\n    '1'\n    '''\n    if num == 0:\n        return '0'\n    elif num < 0:\n        return '0'\n    elif num < 2**32:\n        return str(num)[::-1]\n    elif num == 2**32:\n        return '2'\n    elif num < 2**256:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**256:\n        return '3'\n    elif num < 2**512:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**512:\n        return '4'\n    elif num < 2**1024:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1024:\n        return '5'\n    elif num < 2**1536:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1536:\n        return '6'\n    elif num < 2**1844:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1844:\n        return '7'\n    elif num < 2**2048:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2048:\n        return '8'\n    elif num < 2**2880:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2880:\n        return '9'\n    elif num < 2**32:\n        return str(num)[::-1]\n    elif num == 2**32:\n        return '10'\n    elif num < 2**256:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**256:\n        return '11'\n    elif num < 2**512:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**512:\n        return '12'\n    elif num < 2**1024:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1024:\n        return '13'\n    elif num < 2**1536:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1536:\n        return '14'\n    elif num < 2**1844:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1844:\n        return '15'\n    elif num < 2**2048:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2048:\n        return '16'\n    elif num < 2**2880:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2880:\n        return '17'\n    elif num < 2**32:\n        return str(num)[::-1]\n    elif num == 2**32:\n        return '18'\n    elif num < 2**256:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**256:\n        return '19'\n    elif num < 2**512:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**512:\n        return '20'\n    elif num < 2**1024:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1024:\n        return '21'\n    elif num < 2**1536:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1536:\n        return '22'\n    elif num < 2**1844:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1844:\n        return '23'\n    elif num < 2**2048:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2048:\n        return '24'\n    elif num < 2**2880:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2880:\n        return '25'\n    elif num < 2**32:\n        return str(num)[::-1]\n    elif num == 2**32:\n        return '26'\n    elif num < 2**256:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**256:\n        return '27'\n    elif num < 2**512:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**512:\n        return '28'\n    elif num < 2**1024:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1024:\n        return '29'\n    elif num < 2**1536:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1536:\n        return '30'\n    elif num < 2**1844:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1844:\n        return '31'\n    elif num < 2**2048:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2048:\n        return '32'\n    elif num < 2**2880:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**2880:\n        return '33'\n    elif num < 2**32:\n        return str(num)[::-1]\n    elif num == 2**32:\n        return '34'\n    elif num < 2**256:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**256:\n        return '35'\n    elif num < 2**512:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**512:\n        return '36'\n    elif num < 2**1024:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1024:\n        return '37'\n    elif num < 2**1536:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n    elif num == 2**1536:\n        return '38'\n    elif num < 2**1844:\n        return str(num)[::-1][:2] + str(num)[::-1][1:]\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # write your code here\n    if num==0:\n        return True\n    else:\n        return False\n    # raise NotImplementedError('Need to write an implementation')\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # your code here\n    if num < 0:\n        return False\n    while num > 0:\n        r = num % 10\n        num = num // 10\n        if r > 2:\n            return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # looping through the digits\n    for i in range(len(str(num))):\n        # set the digits of the number\n        num = num * 10\n        # to check the number\n        if num < 2:\n            # if there is no remainder\n            if i == len(str(num)) - 1:\n                # if it is one the output\n                return 'One'\n            # if it is two\n            else:\n                # return the result\n                return 'Two'\n    return 'Not one'"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize the first few numbers\n    num1 = 0\n    num2 = 0\n    num3 = 0\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = [int(x) for x in arr]\n    max = 0\n    for i in range(len(arr)) : \n        for j in range(i, len(arr)) :\n            n = arr[i] * arr[j] \n            if n > max : \n                max = n \n    return max \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr : \n        if i > max : \n            max = i\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i=0\n    num=0\n    #for each item in the list of digits\n    for item in arr:\n        #if the item is a digit, then it is the largest number\n        if item.isdigit()==True:\n            #if the number is the smallest, then it is the largest number\n            if num<int(item):\n                num=int(item)\n                i=i+1\n            #if the number is the same as the smallest number, then it is the largest number\n            if num==int(item):\n                i=i+1\n                num=0\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maximum = 0\n    for i in range(len(arr)) : \n        if arr[i] > maximum : \n            maximum = arr[i] \n    return maximum \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # A dictionary of the maximum number as key and the count as value\n    max_count = {}\n    # loop over the list of digits\n    for i in range(len(arr)) : \n        # to keep track of the max count \n        count = 0 \n        # loop over each number \n        for j in range(arr[i]) : \n            # increment the count for the given number \n            count += 1\n        # if the count is not in the dictionary, add it \n        if count not in max_count : \n            # add the max count to the dictionary \n            max_count[count] = count \n    # return the maximum number \n    return max(max_count.values()) \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    max_list = []\n    for i in arr : \n        if i not in max_list :\n            max_list.append(i)\n            max = max + 1\n            if len(max_list) == max : \n                return max_list[max-1]\n        \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    \n    for i in arr :\n        if largest < i :\n            largest = i\n    \n    return largest\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < y:\n        return -1\n    elif x > y:\n        return 1\n    elif x == y:\n        return 0\n    elif x > y:\n        return -1\n    else:\n        return 1\n    \ndef window_op(x,y):\n    '''\n    Write a python function to calculate the max value of all adjacent numbers\n    '''\n    if x < y:\n        return -1\n    elif x > y:\n        return 1\n    elif x == y:\n        return 0\n    elif x > y:\n        return -1\n    else:\n        return 1\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    elif x<0 and y<0:\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x==0:\n        return y==0\n    if y==0:\n        return x==0\n    if x==y:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0:\n        if y > 0:\n            return 1\n        elif y < 0:\n            return -1\n        else:\n            return 0\n    elif y > 0:\n        if x > 0:\n            return -1\n        elif x < 0:\n            return 1\n        else:\n            return 0\n    elif y < 0:\n        if x < 0:\n            return -1\n        elif x > 0:\n            return -1\n        else:\n            return 0\n    else:\n        return 0\ndef main():\n    '''\n    This program demonstrate the function of\n    '''\n    while True:\n        '''\n        1. The user should enter a number,\n        2. The user should enter two number.\n        3. The user should find the second number.\n        '''\n        try:\n            x=int(input(\"Enter a number: \"))\n            y=int(input(\"Enter a second number: \"))\n            if(x<0 and y<0):\n                print(\"The number is a negative number\")\n            elif(x>0 and y>0):\n                print(\"The number is a positive number\")\n            elif(x<0 and y<0):\n                print(\"The number is a negative number\")\n            else:\n                print(\"The number is a positive number\")\n        except:\n            print(\"Input a number\")\n        else:\n            break\n    print(\"\\nThe result is: \",opposite_Signs(x,y))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Same problem as in hashtable\n    return (x > y) - (x < y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x>=y or (x<y or x==y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    if x<0 and y<0:\n        return True\n    if x>0 and y>0:\n        return True\n    if x>0 and y<0:\n        return True\n    if x<0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #validate input\n    if type(x)!= int or type(y)!= int:\n        return \"Input should be an Integer\"\n    if x < 0 and y > 0:\n        return \"x must be bigger than 0 and y must be smaller than 0\"\n    if x < 0 and y < 0:\n        return \"x must be smaller than 0 and y must be bigger than 0\"\n    if x > 0 and y < 0:\n        return \"x must be bigger than 0 and y must be smaller than 0\"\n    if x > 0 and y > 0:\n        return \"x must be smaller than 0 and y must be bigger than 0\"\n    if x == y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -1:\n        return \"x and y are Equal to -1\"\n    if x == -1 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == 1:\n        return \"x and y are Equal to 1\"\n    if x == 1 and y == -2:\n        return \"x and y are Equal to -2\"\n    if x == -2 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == 2:\n        return \"x and y are Equal to 2\"\n    if x == 2 and y == 1:\n        return \"x and y are Equal to -1\"\n    if x == -1 and y == 2:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -3:\n        return \"x and y are Equal to -3\"\n    if x == -3 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -4:\n        return \"x and y are Equal to -4\"\n    if x == -4 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -5:\n        return \"x and y are Equal to -5\"\n    if x == -5 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -6:\n        return \"x and y are Equal to -6\"\n    if x == -6 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -7:\n        return \"x and y are Equal to -7\"\n    if x == -7 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -8:\n        return \"x and y are Equal to -8\"\n    if x == -8 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -9:\n        return \"x and y are Equal to -9\"\n    if x == -9 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -10:\n        return \"x and y are Equal to -10\"\n    if x == -10 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -11:\n        return \"x and y are Equal to -11\"\n    if x == -11 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -12:\n        return \"x and y are Equal to -12\"\n    if x == -12 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -13:\n        return \"x and y are Equal to -13\"\n    if x == -13 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -14:\n        return \"x and y are Equal to -14\"\n    if x == -14 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -15:\n        return \"x and y are Equal to -15\"\n    if x == -15 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -16:\n        return \"x and y are Equal to -16\"\n    if x == -16 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -17:\n        return \"x and y are Equal to -17\"\n    if x == -17 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -18:\n        return \"x and y are Equal to -18\"\n    if x == -18 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -19:\n        return \"x and y are Equal to -19\"\n    if x == -19 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -20:\n        return \"x and y are Equal to -20\"\n    if x == -20 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -21:\n        return \"x and y are Equal to -21\"\n    if x == -21 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -22:\n        return \"x and y are Equal to -22\"\n    if x == -22 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -23:\n        return \"x and y are Equal to -23\"\n    if x == -23 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -24:\n        return \"x and y are Equal to -24\"\n    if x == -24 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -25:\n        return \"x and y are Equal to -25\"\n    if x == -25 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -26:\n        return \"x and y are Equal to -26\"\n    if x == -26 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -27:\n        return \"x and y are Equal to -27\"\n    if x == -27 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -28:\n        return \"x and y are Equal to -28\"\n    if x == -28 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -29:\n        return \"x and y are Equal to -29\"\n    if x == -29 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -30:\n        return \"x and y are Equal to -30\"\n    if x == -30 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -31:\n        return \"x and y are Equal to -31\"\n    if x == -31 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -32:\n        return \"x and y are Equal to -32\"\n    if x == -32 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -33:\n        return \"x and y are Equal to -33\"\n    if x == -33 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -34:\n        return \"x and y are Equal to -34\"\n    if x == -34 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -35:\n        return \"x and y are Equal to -35\"\n    if x == -35 and y == 0:\n        return \"x and y are Equal to 0\"\n    if x == 0 and y == -36:\n        return \"x and y are Equal to -36\"\n    if x == "
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    while x < 0 or y < 0: \n        if x > y: \n            print(\"x is greater than y\") \n            return \n        x -= y \n        y -= x \n    else: \n        return \ndef main(): \n    ''' \n    This program is for taking input from user \n    '''\n    x = int(input(\"Enter the First Number: \")) \n    y = int(input(\"Enter the Second Number: \")) \n    opposite_Signs(x,y) \n    print(\"Program is complete!\") \nif __name__ == \"__main__\": \n    main() \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return n\n    if n == 2:\n        return n\n    if n == 3:\n        return n\n    if n == 4:\n        return n\n    if n == 5:\n        return n\n    if n == 6:\n        return n\n    if n == 7:\n        return n\n    if n == 8:\n        return n\n    if n == 9:\n        return n\n    if n == 10:\n        return n\n    if n == 11:\n        return n\n    if n == 12:\n        return n\n    if n == 13:\n        return n\n    if n == 14:\n        return n\n    if n == 15:\n        return n\n    if n == 16:\n        return n\n    if n == 17:\n        return n\n    if n == 18:\n        return n\n    if n == 19:\n        return n\n    if n == 20:\n        return n\n    if n == 21:\n        return n\n    if n == 22:\n        return n\n    if n == 23:\n        return n\n    if n == 24:\n        return n\n    if n == 25:\n        return n\n    if n == 26:\n        return n\n    if n == 27:\n        return n\n    if n == 28:\n        return n\n    if n == 29:\n        return n\n    if n == 30:\n        return n\n    if n == 31:\n        return n\n    if n == 32:\n        return n\n    if n == 33:\n        return n\n    if n == 34:\n        return n\n    if n == 35:\n        return n\n    if n == 36:\n        return n\n    if n == 37:\n        return n\n    if n == 38:\n        return n\n    if n == 39:\n        return n\n    if n == 40:\n        return n\n    if n == 41:\n        return n\n    if n == 42:\n        return n\n    if n == 43:\n        return n\n    if n == 44:\n        return n\n    if n == 45:\n        return n\n    if n == 46:\n        return n\n    if n == 47:\n        return n\n    if n == 48:\n        return n\n    if n == 49:\n        return n\n    if n == 50:\n        return n\n    if n == 51:\n        return n\n    if n == 52:\n        return n\n    if n == 53:\n        return n\n    if n == 54:\n        return n\n    if n == 55:\n        return n\n    if n == 56:\n        return n\n    if n == 57:\n        return n\n    if n == 58:\n        return n\n    if n == 59:\n        return n\n    if n == 60:\n        return n\n    if n == 61:\n        return n\n    if n == 62:\n        return n\n    if n == 63:\n        return n\n    if n == 64:\n        return n\n    if n == 65:\n        return n\n    if n == 66:\n        return n\n    if n == 67:\n        return n\n    if n == 68:\n        return n\n    if n == 69:\n        return n\n    if n == 70:\n        return n\n    if n == 71:\n        return n\n    if n == 72:\n        return n\n    if n == 73:\n        return n\n    if n == 74:\n        return n\n    if n == 75:\n        return n\n    if n == 76:\n        return n\n    if n == 77:\n        return n\n    if n == 78:\n        return n\n    if n == 79:\n        return n\n    if n == 80:\n        return n\n    if n == 81:\n        return n\n    if n == 82:\n        return n\n    if n == 83:\n        return n\n    if n == 84:\n        return n\n    if n == 85:\n        return n\n    if n == 86:\n        return n\n    if n == 87:\n        return n\n    if n == 88:\n        return n\n    if n == 89:\n        return n\n    if n == 90:\n        return n\n    if n == 91:\n        return n\n    if n == 92:\n        return n\n    if n == 93:\n        return n\n    if n == 94:\n        return n\n    if n == 95:\n        return n\n    if n == 96:\n        return n\n    if n == 97:\n        return n\n    if n == 98:\n        return n\n    if n == 99:\n        return n\n    if n == 100:\n        return n\n    if n == 101:\n        return n\n    if n == 102:\n        return n\n    if n == 103:\n        return n\n    if n == 104:\n        return n\n    if n == 105:\n        return n\n    if n == 106:\n        return n\n    if n == 107:\n        return n\n    if n == 108:\n        return n\n    if n == 109:\n        return n\n    if n == 110:\n        return n\n    if n == 111:\n        return n\n    if n == 112:\n        return n\n    if n == 113:\n        return n\n    if n == 114:\n        return n\n    if n == 115:\n        return n\n    if n == 116:\n        return n\n    if n == 117:\n        return n\n    if n == 118:\n        return n\n    if n == 119:\n        return n\n    if n == 120:\n        return n\n    if n == 121:\n        return n\n    if n == 122:\n        return n\n    if n == 123:\n        return n\n    if n == 124:\n        return n\n    if n == 125:\n        return n\n    if n == 126:\n        return n\n    if n == 127:\n        return n\n    if n == 128:\n        return n\n    if n == 129:\n        return n\n    if n == 130:\n        return n\n    if n == 131:\n        return n\n    if n == 132:\n        return n\n    if n == 133:\n        return n\n    if n == 134:\n        return n\n    if n == 135:\n        return n\n    if n == 136:\n        return n\n    if n == 137:\n        return n\n    if n == 138:\n        return n\n    if n == 139:\n        return n\n    if n == 140:\n        return n\n    if n == 141:\n        return n\n    if n == 142:\n        return n\n    if n == 143:\n        return n\n    if n == 144:\n        return n\n    if n == 145:\n        return n\n    if n == 146:\n        return n\n    if n == 147:\n        return n\n    if n == 148:\n        return n\n    if n == 149:\n        return n\n    if n == 150:\n        return n\n    if n == 151:\n        return n\n    if n == 152:\n        return n\n    if n == 153:\n        return n\n    if n == 154:\n        return n\n    if n == 155:\n        return n\n    if n == 156:\n        return n\n    if n == 157:\n        return n\n    if n == 158:\n        return n\n    if n == 159:\n        return n\n    if n == 160:\n        return n\n    if n == 161:\n        return n\n    if n == 162:\n        return n\n    if n == 163:\n        return n\n    if n == 164:\n        return n\n    if n == 165:\n        return n\n    if n == 166:\n        return n\n    if n == 167:\n        return n\n    if n == 168:\n        return n\n    if n == 169:\n        return n\n    if n == 170:\n        return n\n    if n == 171:\n        return n\n    if n == 172:\n        return n\n    if n == 173:\n        return n\n    if n == 174:\n        return n\n    if n == 175:\n        return n\n    if n == 176:\n        return n\n    if n == 177:\n        return n\n    if n == 178:\n        return n\n    if n == 179:\n        return n\n    if n == 180:\n        return n\n    if n == 181:\n        return n\n    if n == 182:\n        return n\n    if n == 183:\n        return n\n    if "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # return n in range(1, 10)\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 12\n    elif n==6:\n        return 15\n    elif n==7:\n        return 18\n    elif n==8:\n        return 21\n    elif n==9:\n        return 24\n    elif n==10:\n        return 36\n    elif n==11:\n        return 45\n    elif n==12:\n        return 48\n    elif n==13:\n        return 53\n    elif n==14:\n        return 54\n    elif n==15:\n        return 55\n    elif n==16:\n        return 58\n    elif n==17:\n        return 61\n    elif n==18:\n        return 64\n    elif n==19:\n        return 69\n    elif n==20:\n        return 72\n    elif n==21:\n        return 74\n    elif n==22:\n        return 79\n    elif n==23:\n        return 82\n    elif n==24:\n        return 84\n    elif n==25:\n        return 88\n    elif n==26:\n        return 92\n    elif n==27:\n        return 94\n    elif n==28:\n        return 99\n    elif n==29:\n        return 103\n    elif n==30:\n        return 106\n    elif n==31:\n        return 108\n    elif n==32:\n        return 112\n    elif n==33:\n        return 114\n    elif n==34:\n        return 119\n    elif n==35:\n        return 122\n    elif n==36:\n        return 124\n    elif n==37:\n        return 128\n    elif n==38:\n        return 132\n    elif n==39:\n        return 135\n    elif n==40:\n        return 138\n    elif n==41:\n        return 141\n    elif n==42:\n        return 144\n    elif n==43:\n        return 147\n    elif n==44:\n        return 148\n    elif n==45:\n        return 152\n    elif n==46:\n        return 154\n    elif n==47:\n        return 157\n    elif n==48:\n        return 158\n    elif n==49:\n        return 161\n    elif n==50:\n        return 164\n    elif n==51:\n        return 169\n    elif n==52:\n        return 172\n    elif n==53:\n        return 175\n    elif n==54:\n        return 178\n    elif n==55:\n        return 182\n    elif n==56:\n        return 185\n    elif n==57:\n        return 188\n    elif n==58:\n        return 192\n    elif n==59:\n        return 196\n    elif n==60:\n        return 198\n    elif n==61:\n        return 200\n    elif n==62:\n        return 204\n    elif n==63:\n        return 207\n    elif n==64:\n        return 208\n    elif n==65:\n        return 212\n    elif n==66:\n        return 214\n    elif n==67:\n        return 217\n    elif n==68:\n        return 218\n    elif n==69:\n        return 220\n    elif n==70:\n        return 224\n    elif n==71:\n        return 227\n    elif n==72:\n        return 228\n    elif n==73:\n        return 231\n    elif n==74:\n        return 234\n    elif n==75:\n        return 237\n    elif n==76:\n        return 238\n    elif n==77:\n        return 241\n    elif n==78:\n        return 244\n    elif n==79:\n        return 247\n    elif n==80:\n        return 248\n    elif n==81:\n        return 251\n    elif n==82:\n        return 254\n    elif n==83:\n        return 255\n    elif n==84:\n        return 257\n    elif n==85:\n        return 258\n    elif n==86:\n        return 261\n    elif n==87:\n        return 264\n    elif n==88:\n        return 268\n    elif n==89:\n        return 271\n    elif n==90:\n        return 274\n    elif n==91:\n        return 279\n    elif n==92:\n        return 282\n    elif n==93:\n        return 285\n    elif n==94:\n        return 289\n    elif n==95:\n        return 293\n    elif n==96:\n        return 297\n    elif n==97:\n        return 308\n    elif n==98:\n        return 313\n    elif n==99:\n        return 317\n    elif n==100:\n        return 323\n    elif n==101:\n        return 330\n    elif n==102:\n        return 335\n    elif n==103:\n        return 348\n    elif n==104:\n        return 351\n    elif n==105:\n        return 364\n    elif n==106:\n        return 365\n    elif n==107:\n        return 368\n    elif n==108:\n        return 371\n    elif n==109:\n        return 374\n    elif n==110:\n        return 377\n    elif n==111:\n        return 378\n    elif n==112:\n        return 382\n    elif n==113:\n        return 385\n    elif n==114:\n        return 388\n    elif n==115:\n        return 391\n    elif n==116:\n        return 396\n    elif n==117:\n        return 397\n    elif n==118:\n        return 398\n    elif n==119:\n        return 409\n    elif n==120:\n        return 412\n    elif n==121:\n        return 413\n    elif n==122:\n        return 420\n    elif n==123:\n        return 425\n    elif n==124:\n        return 437\n    elif n==125:\n        return 438\n    elif n==126:\n        return 451\n    elif n==127:\n        return 462\n    elif n==128:\n        return 463\n    elif n==129:\n        return 466\n    elif n==130:\n        return 467\n    elif n==131:\n        return 468\n    elif n==132:\n        return 471\n    elif n==133:\n        return 474\n    elif n==134:\n        return 477\n    elif n==135:\n        return 478\n    elif n==136:\n        return 481\n    elif n==137:\n        return 484\n    elif n==138:\n        return 487\n    elif n==139:\n        return 492\n    elif n==140:\n        return 494\n    elif n==141:\n        return 496\n    elif n==142:\n        return 497\n    elif n==143:\n        return 508\n    elif n==144:\n        return 510\n    elif n==145:\n        return 514\n    elif n==146:\n        return 517\n    elif n==147:\n        return 522\n    elif n==148:\n        return 523\n    elif n==149:\n        return 524\n    elif n==150:\n        return 527\n    elif n==151:\n        return 528\n    elif n==152:\n        return 531\n    elif n==153:\n        return 534\n    elif n==154:\n        return 539\n    elif n==155:\n        return 540\n    elif n==156:\n        return 543\n    elif n==157:\n        return 544\n    elif n==158:\n        return 547\n    elif n==159:\n        return 548\n    elif n==160:\n        return 551\n    elif n==161:\n        return 554\n    elif n==162:\n        return 557\n    elif n==163:\n        return 558\n    elif n==164:\n    "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # if n is an integer\n    if type(n) == int:\n        # if n is less than or equal to 2\n        if n <= 2:\n            # check whether the number is square\n            if n == 2:\n                return n\n            else:\n                # if n is greater than 2, it is a non-square number\n                return is_square(n)\n        else:\n            # if n is less than 3, it is a square number\n            return is_square(n)\n    else:\n        # if n is a string\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num_sqrt = (n**(1/2))\n    #first find the square root of num_sqrt\n    num_sqrt_sqrt = num_sqrt**2\n    #let the root of num_sqrt = n to be square root of num_sqrt\n    sqrt_num = num_sqrt_sqrt ** (1/2)\n    #let num_sqrt_sqrt = sqrt_num^(1/2)\n    #square root of num_sqrt = sqrt_num^(1/2)\n    #num_sqrt = sqrt_num\n    #sqrt_num = num_sqrt\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    h = int(n/2) \n    return int((n-h)*(n+h)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n==0):\n        return n\n    else:\n        return (n+1) * (n+1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = int(n ** 0.5)\n    sum = 0\n    for i in range(1, a + 1):\n        if i * i == n:\n            sum = sum + 1\n    return sum\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if(n == 0):\n        return False\n    if(n == 1):\n        return True\n    if(n == 2):\n        return False\n    if(n == 3):\n        return True\n    if(n == 4):\n        return False\n    if(n == 5):\n        return True\n    if(n == 6):\n        return False\n    if(n == 7):\n        return True\n    if(n == 8):\n        return False\n    if(n == 9):\n        return True\n    if(n == 10):\n        return False\n    if(n == 11):\n        return True\n    if(n == 12):\n        return False\n    if(n == 13):\n        return True\n    if(n == 14):\n        return False\n    if(n == 15):\n        return True\n    if(n == 16):\n        return False\n    if(n == 17):\n        return True\n    if(n == 18):\n        return False\n    if(n == 19):\n        return True\n    if(n == 20):\n        return False\n    if(n == 21):\n        return True\n    if(n == 22):\n        return False\n    if(n == 23):\n        return True\n    if(n == 24):\n        return False\n    if(n == 25):\n        return True\n    if(n == 26):\n        return False\n    if(n == 27):\n        return True\n    if(n == 28):\n        return False\n    if(n == 29):\n        return True\n    if(n == 30):\n        return False\n    if(n == 31):\n        return True\n    if(n == 32):\n        return False\n    if(n == 33):\n        return True\n    if(n == 34):\n        return False\n    if(n == 35):\n        return True\n    if(n == 36):\n        return False\n    if(n == 37):\n        return True\n    if(n == 38):\n        return False\n    if(n == 39):\n        return True\n    if(n == 40):\n        return False\n    if(n == 41):\n        return True\n    if(n == 42):\n        return False\n    if(n == 43):\n        return True\n    if(n == 44):\n        return False\n    if(n == 45):\n        return True\n    if(n == 46):\n        return False\n    if(n == 47):\n        return True\n    if(n == 48):\n        return False\n    if(n == 49):\n        return True\n    if(n == 50):\n        return False\n    if(n == 51):\n        return True\n    if(n == 52):\n        return False\n    if(n == 53):\n        return True\n    if(n == 54):\n        return False\n    if(n == 55):\n        return True\n    if(n == 56):\n        return False\n    if(n == 57):\n        return True\n    if(n == 58):\n        return False\n    if(n == 59):\n        return True\n    if(n == 60):\n        return False\n    if(n == 61):\n        return True\n    if(n == 62):\n        return False\n    if(n == 63):\n        return True\n    if(n == 64):\n        return False\n    if(n == 65):\n        return True\n    if(n == 66):\n        return False\n    if(n == 67):\n        return True\n    if(n == 68):\n        return False\n    if(n == 69):\n        return True\n    if(n == 70):\n        return False\n    if(n == 71):\n        return True\n    if(n == 72):\n        return False\n    if(n == 73):\n        return True\n    if(n == 74):\n        return False\n    if(n == 75):\n        return True\n    if(n == 76):\n        return False\n    if(n == 77):\n        return True\n    if(n == 78):\n        return False\n    if(n == 79):\n        return True\n    if(n == 80):\n        return False\n    if(n == 81):\n        return True\n    if(n == 82):\n        return False\n    if(n == 83):\n        return True\n    if(n == 84):\n        return False\n    if(n == 85):\n        return True\n    if(n == 86):\n        return False\n    if(n == 87):\n        return True\n    if(n == 88):\n        return False\n    if(n == 89):\n        return True\n    if(n == 90):\n        return False\n    if(n == 91):\n        return True\n    if(n == 92):\n        return False\n    if(n == 93):\n        return True\n    if(n == 94):\n        return False\n    if(n == 95):\n        return True\n    if(n == 96):\n        return False\n    if(n == 97):\n        return True\n    if(n == 98):\n        return False\n    if(n == 99):\n        return True\n    if(n == 100):\n        return False\n    if(n == 101):\n        return True\n    if(n == 102):\n        return False\n    if(n == 103):\n        return True\n    if(n == 104):\n        return False\n    if(n == 105):\n        return True\n    if(n == 106):\n        return False\n    if(n == 107):\n        return True\n    if(n == 108):\n        return False\n    if(n == 109):\n        return True\n    if(n == 110):\n        return False\n    if(n == 111):\n        return True\n    if(n == 112):\n        return False\n    if(n == 113):\n        return True\n    if(n == 114):\n        return False\n    if(n == 115):\n        return True\n    if(n == 116):\n        return False\n    if(n == 117):\n        return True\n    if(n == 118):\n        return False\n    if(n == 119):\n        return True\n    if(n == 120):\n        return False\n    if(n == 121):\n        return True\n    if(n == 122):\n        return False\n    if(n == 123):\n        return True\n    if(n == 124):\n        return False\n    if(n == 125):\n        return True\n    if(n == 126):\n        return False\n    if(n == 127):\n        return True\n    if(n == 128):\n        return False\n    if(n == 129):\n        return True\n    if(n == 130):\n        return False\n    if(n == 131):\n        return True\n    if(n == 132):\n        return False\n    if(n == 133):\n        return True\n    if(n == 134):\n        return False\n    if(n == 135):\n        return True\n    if(n == 136):\n        return False\n    if(n == 137):\n        return True\n    if(n == 138):\n        return False\n    if(n == 139):\n        return True\n    if(n == 140):\n        return False\n    if(n == 141):\n        return True\n    if(n == 142):\n        return False\n    if(n == 143):\n        return True\n    if(n == 144):\n        return False\n    if(n == 145):\n        return True\n    if(n == 146):\n        return False\n    if(n == 147):\n        return True\n    if(n == 148):\n        return False\n    if(n == 149):\n        return True\n    if(n == 150):\n        return False\n    if(n == 151):\n        return True\n    if(n == 152):\n        return False\n    if(n == 153):\n        return True\n    if(n == 154):\n        return False\n    if(n == 155):\n        return True\n    if(n == 156):\n        return False\n    if(n == 157):\n        return True\n    if(n == 158):\n        return False\n    if(n == 159):\n        return True\n    if(n == 160):\n        return False\n    if(n == 161):\n        return True\n    if(n == 162):\n        return False\n    if(n == 163):\n        return True\n    if(n == 164):\n        return False\n    if(n == 165):\n        return True\n    if(n == 166):\n        return False\n    if(n == 167):\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**3)//2 if (n**2 + (n-1))%2 == 0 else n\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = {}\n    for c in range(len(s)):\n        d[s[c]] = d.get(s[c], 0) + 1\n    res = 0\n    for s1,s2 in d.items():\n        if s1[0] == s1[-1]:\n            continue\n        res = max(res, s2)\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #https://www.geeksforgeeks.org/python-program-to-count-number-of-substrings-with-sum-of-digits-of-a-given-string-in-python-using-count/\n    s_set = set(s)\n    if len(s_set) == 0:\n        return 0\n    elif len(s_set) == 1:\n        return 1\n    else:\n        d = {}\n        c = 0\n        for i in s_set:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        for i in d.keys():\n            c += d[i] * (d[i] - 1) / 2\n        return c\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    l = len(s)\n    for i in range(l):\n        for j in range(i+1, l):\n            if s[i:j+1] == s[i:j] and s[i:j+1].isdigit():\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        sub = s[i:i+len(s)-1]\n        substrings[sub] += 1\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s=s.split()\n    s=sorted(s)\n    d=defaultdict(int)\n    for i in s:\n        d[i]+=1\n    d2=defaultdict(int)\n    d2.update(d)\n    for i in d2:\n        if d[i]==d[i+1]:\n            d2[i]=d[i]\n    return d2[sum(d2.values())]\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c=0\n    m = len(s)\n    for i in range(m-1):\n        if s[i] == s[i+1]:\n            c+=1\n    return c\ndef count_Substrings2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c=0\n    for i in range(len(s)-1):\n        j=i+1\n        while j<len(s):\n            if s[i] == s[j] and s[i]==s[j+1]:\n                c+=1\n            j+=1\n    return c\ndef SubstringswithDigits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = len(s)\n    c=0\n    for i in range(m):\n        if s[i] == s[i+1] and s[i]==s[i+2] and s[i]==s[i+3]:\n            c+=1\n    return c\ndef count_SubstringswithDigits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = len(s)\n    c=0\n    for i in range(m):\n        if s[i] == s[i+1] and s[i]==s[i+2] and s[i]==s[i+3]:\n            c+=1\n    return c\ndef modinv(n,p):\n    \"\"\"\n    Returns the modular inverse of a number and p (modulo).\n    \"\"\"\n    if (n == 0):\n        return 0\n    temp = n\n    r = p\n    while (r>0):\n        r = (r - (r & -r))  # if r is a remainder then r must be divided by r-1\n        temp = temp * 10\n    if (temp < 0):\n        temp = temp - p\n    return temp\ndef LCM(n,x):\n    \"\"\"\n    Returns the lowest common multiple of x and n.\n    \"\"\"\n    if n==0:\n        return 0\n    temp = n\n    r = x\n    while (r>0):\n        r = (r - (r & -r))  # if r is a remainder then r must be divided by r-1\n        temp = temp * 10\n    if (temp < 0):\n        temp = temp - x\n    return temp\ndef isprime(n):\n    \"\"\"\n    Returns true if n is a prime number.\n    \"\"\"\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef list_divide(x,y):\n    \"\"\"\n    Returns a list of the integer numbers which divide x,y.\n    \"\"\"\n    if(x==0):\n        return y\n    if(y==0):\n        return x\n    if(x==y):\n        return [x]\n    result=[]\n    for i in range(x,y):\n        if(isprime(i)==True):\n            result.append(i)\n    return result\ndef swap(n,x,y):\n    \"\"\"\n    Swaps the values of x and y.\n    \"\"\"\n    a=n[x]\n    n[x]=n[y]\n    n[y]=a\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of a and b.\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\ndef LCM2(n,x):\n    \"\"\"\n    Returns the lowest common multiple of x and n.\n    \"\"\"\n    if n==0:\n        return 0\n    temp=n\n    r=x\n    while (r>0):\n        r=gcd(r,r-1)\n        temp=temp*10\n    if (temp<0):\n        temp=temp - x\n    return temp\ndef isprime_2(n):\n    \"\"\"\n    Returns true if n is a prime number.\n    \"\"\"\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef countprime_2(n):\n    \"\"\"\n    Returns the number of prime numbers below n.\n    \"\"\"\n    c=0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if isprime_2(i)==True:\n            c+=1\n    return c\ndef isprime_3(n):\n    \"\"\"\n    Returns true if n is a prime number.\n    \"\"\"\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef countprime_3(n):\n    \"\"\"\n    Returns the number of prime numbers below n.\n    \"\"\"\n    c=0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if isprime_3(i)==True:\n            c+=1\n    return c\ndef isprime_4(n):\n    \"\"\"\n    Returns true if n is a prime number.\n    \"\"\"\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef countprime_4(n):\n    \"\"\"\n    Returns the number of prime numbers below n.\n    \"\"\"\n    c=0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if isprime_4(i)==True:\n            c+=1\n    return c\ndef Prime_factors(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings2(str(n))\ndef Prime_Factors2(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors3(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors4(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors5(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors6(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors7(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors8(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors9(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors10(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors11(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Substrings(str(n))\ndef Prime_Factors12(n):\n    \"\"\"\n    Returns the prime factors of n.\n    \"\"\"\n    return count_Su"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c = 0\n    for i in range(len(s)):\n        c += s.count(s[i])\n    return c\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum = 0\n    length = 0\n    for i in range(len(s)):\n        sum += int(s[i])\n        length += 1\n    return(sum - length)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = int(min(xs))\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # first, sort the list\n    xs.sort()\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not isinstance(xs, list):\n        raise TypeError('xs must be a list')\n    if len(xs)==0:\n        raise ValueError('xs must not be empty')\n    for i in xs:\n        if type(i)!= int and type(i)!= float:\n            raise TypeError('xs must contain only integers or floats')\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    return xs[0] if xs[0] < xs[1] else xs[1]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs)==0:\n        return None\n    if xs[0]==xs[-1]:\n        return xs[0]\n    return xs[0] if len(xs)>1 else xs[-1]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    smallest_index = 0\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    l = [num for num in xs if num < 100]\n    if len(l) == 0:\n        print(\"No numbers greater than 100\")\n    else:\n        print(f\"The smallest number in the list is: {min(l)}\")\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lowest_num = None\n    lowest_num_index = None\n    for index, item in enumerate(xs):\n        if item < lowest_num:\n            lowest_num = item\n            lowest_num_index = index\n    return lowest_num, lowest_num_index\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min=sys.maxsize\n    n=0\n    for num in xs:\n        if num<min:\n            min=num\n            n=xs.index(num)\n    return n,min\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # we will create an empty list\n    list_of_pairs = []\n    # loop through the given list\n    for i in range(len(test_list)):\n        # creating a pair\n        pair = (test_list[i], test_list[i+1])\n        # append it to the empty list\n        list_of_pairs.append(pair)\n    \n    # sort the pairs\n    list_of_pairs.sort()\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # YOUR CODE HERE\n    m = max(test_list)\n    max_difference = test_list.count(m)\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] - test_list[j] > max_diff:\n                max_diff = test_list[i] - test_list[j]\n    return max_diff\n    "
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the tuple\n    sorted_tuple = sorted(test_list)\n    # calculate the minimum and maximum numbers\n    minimum = max(sorted_tuple)\n    maximum = min(sorted_tuple)\n    # check for each element in the tuple\n    for x in sorted_tuple:\n        # check if the next element is less than or equal to the current element\n        if x < minimum:\n            minimum = x\n        if x > maximum:\n            maximum = x\n    return maximum - minimum\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] - test_list[j] > maximum:\n                maximum = test_list[i] - test_list[j]\n    return maximum\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    \n    else:\n        max_diff = 0\n        \n        for i in range(len(test_list)-1):\n            \n            if test_list[i] > test_list[i+1]:\n                continue\n            elif test_list[i] < test_list[i+1]:\n                max_diff = max(max_diff, test_list[i]-test_list[i+1])\n            else:\n                continue\n        \n        return max_diff\n    \n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = {}\n    for i in range(len(test_list)):\n        differences[i] = test_list[i][1] - test_list[i][0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                continue\n            else:\n                diff = test_list[i] - test_list[j]\n                if diff > max_difference:\n                    max_difference = diff\n    return max_difference\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # TODO: Sort your list of tuples using the second value of each tuple.\n    # Hint: Use the sorted() built-in to accomplish this task\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a empty list to store the input data\n    subjectmarks = []\n    # loop through the input data\n    for i in range(len(subjectmarks)):\n        # extract the i-th value of the tuple from the list\n        (name,marks) = subjectmarks[i]\n        # add the name and marks to the empty list\n        subjectmarks.append((name,marks))\n        # sort the list by the second value of each tuple\n    subjectmarks.sort()\n    # return the sorted list\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x:x[1], reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # INPUT: \n    # subjectmarks = [('id', '9'), ('id', '2'), ('id', '10')]\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda item: item[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda k:k[1])\n    print(sorted_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks,key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Write your code below this line\n    \n    return sorted_marks\n    \n    \ndef get_average(subject_marks):\n    '''\n    Return the average of all marks.\n    '''\n    total = 0\n    \n    for mark in subject_marks:\n        total += mark[1]\n    \n    return total/len(subject_marks)\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_elements = 0\n    for element in data_list:\n        sum_of_elements += element\n    return sum_of_elements\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        total += element\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if type(element) == int:\n            total += element\n        else:\n            total += element\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Write your code here.\n    output = []\n    for element in data_list:\n        if type(element) is list:\n            output.extend(recursive_list_sum(element))\n        else:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def recursive_flatten_list(data_list):\n        if not data_list:\n            return []\n        \n        if isinstance(data_list[0], list):\n            recursive_flatten_list(data_list[0])\n            return data_list[0] + recursive_flatten_list(data_list[1:])\n        else:\n            return [data_list[0]] + recursive_flatten_list(data_list[1:])\n    \n    return recursive_flatten_list(data_list)\n    \n    \n    \nif __name__ == \"__main__\":\n    print(sum_of_digits([0,1,2,3,4,5,6,7,8,9]))"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write the function recursively\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # YOUR CODE HERE\n    if(len(data_list) < 2):\n        return data_list\n    return [data_list[0]] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    \n    if len(data_list) == 1:\n        return data_list[0]\n    \n    if type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Your code here\n    return sum([item for sublist in data_list for item in sublist])\n    "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(\"The positive numbers in the list are: \")\n    print(list)\n    print(\"The number of positive numbers is: \", count)\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x>0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    # TODO: Your code here\n    positive_numbers = 0\n    \n    for item in list:\n        if item >= 0:\n            positive_numbers += 1\n    \n    return positive_numbers\n    \n    \n    \n    \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    total = 0\n    for i in list:\n        if i > 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    c=0\n    for i in list:\n        if i>0:\n            c+=1\n    return c\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_list = [num for num in list if num > 0]\n    pos_count = len(pos_list)\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # assume lst is a list of numbers.\n    # initialize an empty count variable\n    count = 0\n    # iterate through the list\n    for i in list:\n        # if i is positive, increment count\n        if i > 0:\n            count += 1\n    # return count\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n == 4: return 8\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if (n == 1):\n        return 1\n    \n    left = 1\n    for i in range(n-1):\n        left += 1\n        \n    right = n - 1\n    for i in range(n-1):\n        right -= 1\n        \n        if (left <= right):\n            left_half = left\n            right_half = right\n        \n            while(left_half < right_half):\n                left_half += 1\n                if (left_half == right_half):\n                    left_half += 1\n                    break\n            \n            left = left_half\n    \n    left_half = n - left\n    right_half = n - right\n    \n    left_half = bell_number(left_half)\n    right_half = bell_number(right_half)\n    \n    return left_half + right_half\n    \ndef partition(n, arr):\n    '''\n    Given an array and a value, return a partition of array.\n    '''\n    \n    left, right = 0, n\n    \n    while (left < right):\n        while (arr[left] < arr[right]):\n            left += 1\n        while (arr[right] > arr[left]):\n            right -= 1\n        \n        if (left < right):\n            arr[left], arr[right] = arr[right], arr[left]\n    \n    arr[left] = arr[right]\n    \n    return left + 1\n    \ndef main():\n    print (bell_number(6))\n    \nmain()\n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    d = {i:0 for i in range(n+1)}\n    for i in range(n+1):\n        d[i] = 1\n    for k in range(3, n+1):\n        for i in range(k, n+1):\n            d[i] += d[i-k]\n    return d[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: We need at least 2 elements to make sure we can\n    # find the number of ways to partition a set of bell numbers\n    if n <= 2:\n        return 1\n    # else, we need to find the sum of the numbers\n    # corresponding to the consecutive numbers between 1 and n\n    # in the bell numbers\n    return bell_number(n-2) + bell_number(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    '''\n    From https://www.geeksforgeeks.org/bell-number-divisors-set-1/\n    '''\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    for i in range(n-1):\n        if A[i]>A[i+1]:\n            return False\n        elif A[i]<A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (A[0] >= A[1]) and (A[len(A)-1] >= A[0]) and (A[len(A)-2] >= A[0]):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)): \n        if A[i] > A[i-1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    # we have a positive and a negative element\n    # we can't assign negative values to a variable\n    # this is actually a performance issue, so we will do a for loop\n    # and iterate over the array\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Create an empty list to store the elements.\n    A = [None] * len(A)\n    # Initialize an equal to zero.\n    i = 0\n    # Iterate through the array.\n    while i < len(A):\n        # Find the current element in A.\n        j = i + 1\n        # While the current element is not equal to 0.\n        while j < len(A):\n            # Compare the current element with the previous element.\n            if A[i] < A[j] and A[i] > 0:\n                # If the current element is greater than or equal to the previous element, we'll increase the i.\n                i += 1\n            if A[j] < A[i] and A[j] > 0:\n                # If the current element is less than or equal to the previous element, we'll decrease the i.\n                i -= 1\n            # If the current element is not equal to 0, we'll increase j by 1.\n            else:\n                # If the current element is not equal to 0, we'll decrease j by 1.\n                j -= 1\n        # If the current element is equal to zero, we'll increase i by 1.\n        if A[i] == 0:\n            i += 1\n    # If the array is monotonic, return true.\n    return i == len(A)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] >= A[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    try: \n        l = A.count(A[0])\n        if l == len(A):\n            return True\n    except IndexError: \n        return False\n    \n    for i in range(1, len(A)): \n        l = A[i].count(A[i-1]) \n        if l == len(A[i:]): \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    len_A = len(A)\n    if len_A <= 1:\n        return True\n    if A[0] <= A[1]:\n        return False\n    for i in range(len_A - 2):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == len(s):\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l) == len(s) and all([a == s[i] for i, a in enumerate(s)])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    for i in range(len(s)):\n        if not(l[0] == s[i]):\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s)==0:\n        return True\n    for i in range(len(l)):\n        if is_sublist(l[:i],s):\n            return True\n    return False\ndef is_sublist2(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(set(s).intersection(set(l)))\ndef is_sublist3(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_set = set(s)\n    for i in range(len(s)):\n        if s[i] in s_set:\n            s_set.remove(s[i])\n    return len(s_set)==len(s)\ndef is_sublist4(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(s))==len(s)\ndef is_sublist5(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l)==len(set(l).intersection(set(s)))\ndef is_sublist6(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(set(s))\ndef is_sublist7(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(s))==len(set(l))\ndef is_sublist8(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l)==len(set(s))\ndef is_sublist9(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l))==len(s)\ndef is_sublist10(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(set(l).intersection(set(s)))==len(set(s)):\n        return True\n    else:\n        return False\ndef is_sublist11(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(set(l).intersection(set(s)))==len(set(l)):\n        return True\n    else:\n        return False\ndef is_sublist12(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(set(s).intersection(set(l)))==len(set(s)):\n        return True\n    else:\n        return False\ndef is_sublist13(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(set(l).intersection(set(s)))==len(set(s)):\n        return True\n    else:\n        return False\ndef is_sublist14(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(s)\ndef is_sublist15(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(set(l))\ndef is_sublist16(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l))==len(set(s))\ndef is_sublist17(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(s)\ndef is_sublist18(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist19(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(set(l).intersection(set(s)))==len(set(l)):\n        return True\n    else:\n        return False\ndef is_sublist20(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(set(l).intersection(set(s)))==len(set(s)):\n        return True\n    else:\n        return False\ndef is_sublist21(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(set(l))\ndef is_sublist22(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(set(s))\ndef is_sublist23(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist24(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(set(s))\ndef is_sublist25(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist26(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).intersection(set(s)))==len(set(s))\ndef is_sublist27(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist28(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist29(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist30(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist31(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(s).intersection(set(l)))==len(set(l))\ndef is_sublist32(l,s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l).inte"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:j] == s for i in range(len(l)) for j in range(i + 1, len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i] == s[i] for i in range(len(l)))\n    \ndef merge_sort(l):\n    if len(l) == 1:\n        return l\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    left_sort = merge_sort(left)\n    right_sort = merge_sort(right)\n    return merge(left_sort, right_sort)\n    \ndef merge(left, right):\n    '''\n    Merge two sorted lists.\n    '''\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n    \ndef random_choice(l, k):\n    '''\n    Return a random element from given list.\n    '''\n    return l[random.randint(0, len(l) - 1)]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i]!= s[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i:i + s] == l[i:i + s] for i in range(len(l) - s + 1))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    tuple_list = []\n    for index in range(len(Input)):\n        for tuple_index in range(len(Input)):\n            if tuple_index == index:\n                tuple_list.append(Input[index])\n    if len(tuple_list) == len(set(tuple_list)):\n        return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def length_equal(tuple_):\n        try:\n            len(tuple_)\n        except Exception as err:\n            return False\n        return True\n    return len(Input) == len(set(map(length_equal, Input)))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n    \n    dictionary = {}\n    \n    for i in range(len(Input)):\n        if Input[i] in dictionary:\n            dictionary[Input[i]] += 1\n        else:\n            dictionary[Input[i]] = 1\n            \n    for keys in dictionary:\n        if dictionary[keys]!= 1:\n            return False\n    \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = 0\n    for i in Input:\n        n += len(i)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) % 2 == 0: #the number of even elements in the tuple is equal to the length of tuple\n        for i in range(len(Input)-1):\n            if Input[i] == Input[i+1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        lst.append(Input[i])\n    return all(len(x) == len(lst[i]) for i in range(len(lst)))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n    elif len(Input) > 2:\n        return False\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i] == Input[j]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def equal_tuple(x,y):\n        if len(x)!= len(y):\n            return False\n        for i in range(len(x)):\n            if x[i]!= y[i]:\n                return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    for i in range(len(Input)):\n        for j in range(len(Input) - i - 1):\n            if not Input[j][0] == Input[j + 1][0]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for element in Input:\n        if len(element)!= len(set(element)):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    print(nums)\n    "
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # the sorting algorithm\n    # sort the list in ascending order and swap the first element with the last one\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    # now sort the array\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(len(nums)):\n        for j in range(len(nums)-1,i,-1):\n            if nums[j] < nums[j-1]:\n                nums[j],nums[j-1] = nums[j-1],nums[j]\n            else:\n                break\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap_elem(e1, e2):\n        tmp = e1[:]\n        tmp[0], tmp[1] = tmp[1], tmp[0]\n        return tmp\n    \n    def comb_sort(nums):\n        '''\n        Sort the array in ascending order.\n        '''\n        arr = []\n        for i in range(len(nums)):\n            min_ind = i\n            min_val = nums[i]\n            for j in range(i+1, len(nums)):\n                if nums[j] < min_val:\n                    min_ind = j\n                    min_val = nums[j]\n            arr.append(min_ind)\n            nums[i], nums[min_ind] = nums[min_ind], nums[i]\n        return arr\n    \n    def quick_sort(nums, arr=[]):\n        '''\n        Sort the array in ascending order.\n        '''\n        if len(nums) <= 1:\n            return nums\n        \n        mid = len(nums) // 2\n        \n        def partition(nums, start, end):\n            pivot = nums[start]\n            while start < end:\n                while start < end and nums[end] >= pivot:\n                    end -= 1\n                nums[start] = nums[end]\n                while start < end and nums[start] <= pivot:\n                    start += 1\n                nums[end] = nums[start]\n            nums[start] = pivot\n            return start\n        \n        def sort(nums, arr=[]):\n            if len(arr) <= 1:\n                return arr\n            start, end = 0, len(arr) - 1\n            while start < end:\n                pivot = partition(arr, start, end)\n                if pivot == end:\n                    arr = arr[end:] + arr[:end]\n                    break\n                elif pivot == 0:\n                    arr = arr[:pivot] + arr[pivot + 1:]\n                    break\n                elif pivot < start:\n                    start = pivot\n                elif pivot > end:\n                    end = pivot\n            return arr\n        \n        return sort(nums, arr)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i=0\n    j=len(nums)-1\n    while i<j:\n        temp=nums[i]\n        while i<j and nums[j]>temp:\n            nums[i] = nums[j]\n            i+=1\n        while i<j and nums[i]<temp:\n            nums[j] = nums[i]\n            j-=1\n        nums[i] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) > 1:\n        p = len(nums)//2\n        while p>0:\n            for i in range(p):\n                if nums[i] > nums[p]:\n                    temp = nums[i]\n                    nums[i] = nums[p]\n                    nums[p] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    k=0\n    n=len(nums)\n    while n>1:\n        for i in range(0,n-1):\n            if nums[i]>nums[i+1]:\n                temp=nums[i]\n                nums[i]=nums[i+1]\n                nums[i+1]=temp\n                k+=1\n        n=n-1\n    print(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    n = len(nums)\n    \n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Base case\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x,y = 0,0\n    for n in range(n):\n        y,x = x+1,y+1\n        if x<n:\n            if n%2 == 0:\n                print('Square',n,':',y)\n            else:\n                print('Square',n,':',x)\n        else:\n            if n%2 == 0:\n                print('Square',n,':',y)\n            else:\n                print('Square',n,':',x)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Define variables\n    square_1 = n * n\n    square_2 = n * n\n    square_3 = n * n\n    square_4 = n * n\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def dif_Square(n):\n        return (n-n)\n    if dif_Square(n)>1:\n        return \"Not a Valid number\"\n    elif dif_Square(n)==1:\n        return \"2\"\n    elif dif_Square(n)==0:\n        return \"0\"\n    elif dif_Square(n)<0:\n        return \"Negative number\"\n    else:\n        return \"Valid\"\n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n>0:\n        return \"Positive number\"\n    else:\n        return \"Negative number\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        ans = dif_Square(n - 1)\n        if ans == 0:\n            return 0\n        elif ans == 1:\n            return 1\n        else:\n            return ans\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = n\n    if s<0:\n        return False\n    if (s%2)==0:\n        return False\n    elif (s==0):\n        return True\n    elif (s>0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_1 = n\n    square_2 = n-1\n    if n%2 == 0: \n        dif = abs(square_1 - square_2)\n        return dif\n    elif n%2!= 0: \n        dif = abs(square_1 - square_2)\n        return dif\n    else: \n        dif = n - square_2\n        return dif\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_value = n\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        d = square_value // 2\n        sq_diff = square_value % 2\n        res = dif_Square(d) + res \n        return res\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 1): \n        return True\n    elif (n == 2):\n        return True\n    elif(n < 2):\n        return False\n    else:\n        a = n//2\n        b = n - a\n        return (dif_Square(a) or dif_Square(b))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = lambda n: n*n \n    square_difference = lambda n: square(n) - square(n-1)\n    print(square_difference(5))\n    \n    #print(square(5))\n    \n    #print(square_difference(5))\n    \n    #print(square_difference(3))\n    \n    #print(square_difference(6))\n    \n    #print(square_difference(8))\n    \n    #print(square_difference(4))\n    \n    #print(square_difference(9))\n    \n    #print(square_difference(1))\n    \n    #print(square_difference(2))\n    \n    \n    \ndif_Square(7)"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    colors = sorted(colors)\n    patterns = sorted(patterns)\n    \n    for color in colors:\n        for pattern in patterns:\n            if color == pattern:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    l = []\n    for item in patterns:\n        l.append(item)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    new_patterns = []\n    for pattern in patterns:\n        for element in pattern:\n            if element not in new_patterns:\n                new_patterns.append(element)\n    return len(new_patterns)==len(colors)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_count = 0\n    patterns_len = len(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color1, color2 = colors[0], colors[1]\n    pattern1, pattern2 = patterns[0], patterns[1]\n    if pattern1.count(color1) + pattern2.count(color2) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        colors_pattern = patterns[i]\n        for j in range(len(colors)):\n            if colors[j]!= colors_pattern[j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        #print(\"patterns[i] = \",patterns[i])\n        #print(\"colors[i] = \",colors[i])\n        if len(colors[i]) == len(patterns[i]):\n            if patterns[i] in colors[i]:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i] in patterns[i]:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = []\n    for pattern in patterns:\n        if pattern == []:\n            patterns.append([])\n        patterns = patterns + pattern\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        for i in range(len(pattern)):\n            if pattern[i]!= colors[i]:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for tup in test_list:\n        if tup[1]%K==0:\n            res.append(tup)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        for i in range(1, item[1]+1):\n            if item[1] % i == 0:\n                new_list.append(item)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) < K:\n        return None\n    temp = []\n    for i in test_list:\n        if all(x % k for x in i):\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    tuples = []\n    \n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[j][0] % test_list[i][0] == 0:\n                tuples.append(test_list[i])\n    \n    for i in tuples:\n        test_list.remove(i)\n        \n    return tuples\n    \n    \ndef find_num_to_search_for(test_list, K):\n    '''\n    Write a function to find the length of the longest string where a,b,c, and so on forms are separated by K.\n    '''\n    \n    num_to_search_for = 0\n    for i in test_list:\n        num_to_search_for += len(i[0])\n    \n    num_to_search_for = num_to_search_for//len(test_list)\n    \n    return num_to_search_for\n    \n    \ndef find_num_to_find(test_list, K):\n    '''\n    Write a function to find the length of the longest string where a,b,c, and so on forms are separated by K.\n    '''\n    \n    num_to_find = 0\n    for i in test_list:\n        num_to_find += len(i[0])\n    \n    num_to_find = num_to_find//len(test_list)\n    \n    return num_to_find\n    \n    \ndef num_to_find(test_list):\n    '''\n    Write a function to find the length of the longest string where a,b,c, and so on forms are separated by K.\n    '''\n    \n    for i in test_list:\n        if len(i[0]) <= K:\n            return len(i[0])\n    \n    return len(test_list[0][0])\n    \n    \ndef find_count_of_longest_strings(test_list):\n    '''\n    Write a function that returns the count of the longest strings in the given list.\n    '''\n    \n    count = 0\n    for i in test_list:\n        if len(i[0]) > count:\n            count = len(i[0])\n    \n    return count\n    \n    \ndef find_count_of_longest_strings2(test_list):\n    '''\n    Write a function that returns the count of the longest strings in the given list.\n    '''\n    \n    for i in range(len(test_list)):\n        if len(test_list[i][0]) > len(test_list[i + 1][0]):\n            count = len(test_list[i][0])\n        else:\n            count = len(test_list[i + 1][0])\n            \n        if count > len(test_list[i][0]):\n            count = len(test_list[i][0])\n    \n    return count\n    \n    \ndef is_valid_substring(test_list, K):\n    '''\n    Write a function to check if the given string is a substring of the given list of strings.\n    '''\n    \n    if len(test_list) <= K:\n        return True\n    \n    substring = test_list[0][0]\n    for i in test_list:\n        if len(i[0]) > len(substring):\n            substring = i[0]\n    \n    return substring == test_list[0][0]\n    \n    \ndef find_duplicates(test_list):\n    '''\n    Write a function that finds all the duplicates in the given list.\n    '''\n    \n    duplicates = []\n    \n    for i in test_list:\n        if i[0] in duplicates:\n            duplicates.remove(i[0])\n        else:\n            duplicates.append(i[0])\n        \n    return duplicates\n    \n    \ndef is_unique_string(test_list):\n    '''\n    Write a function that checks if the given list is a unique string.\n    '''\n    \n    if len(test_list) == len(set(test_list)):\n        return True\n    \n    return False\n    \n    \ndef is_double_string(test_list):\n    '''\n    Write a function that checks if the given list is a double string.\n    '''\n    \n    for i in test_list:\n        if len(i[0]) == len(i[0]) or len(i[0]) == len(i[0]) and len(i[0]) == len(i[0]) and len(i[0]) == len(i[0]):\n            return True\n    \n    return False\n    \n    \ndef is_substring(test_list, K):\n    '''\n    Write a function that checks if the given string is a substring of the given list of strings.\n    '''\n    \n    if K >= len(test_list[0][0]):\n        return False\n    \n    if len(test_list[0][0]) == len(test_list[0][0]):\n        for i in test_list:\n            if len(i[0])!= len(test_list[0][0]):\n                return False\n            if len(i[0]) == len(test_list[0][0]):\n                if i[0] in test_list[0][0]:\n                    return False\n        \n    return True\n    \n    \ndef is_palindrome(test_list):\n    '''\n    Write a function that checks if the given list is a palindrome.\n    '''\n    \n    for i in range(len(test_list)):\n        if len(test_list[i][0])!= len(test_list[i][0]):\n            return False\n        \n        if test_list[i][0]!= test_list[i][0][::-1]:\n            return False\n    \n    return True\n    \n    \ndef is_palindrome_string(test_list):\n    '''\n    Write a function that checks if the given list is a palindrome.\n    '''\n    \n    for i in range(len(test_list)):\n        if len(test_list[i][0])!= len(test_list[i][0]):\n            return False\n        \n        if test_list[i][0]!= test_list[i][0][::-1]:\n            return False\n        \n    return True\n    \n    \ndef palindrome_to_string(test_list):\n    '''\n    Write a function that converts a list to a string.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0]\n        \n    return \"\".join(test_list)\n    \n    \ndef palindrome_to_string2(test_list):\n    '''\n    Write a function that converts a list to a string.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0]\n        \n    return \"\".join(test_list)\n    \n    \ndef palindrome_to_string3(test_list):\n    '''\n    Write a function that converts a list to a string.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0]\n        \n    return \"\".join(test_list)\n    \n    \ndef palindrome_to_string4(test_list):\n    '''\n    Write a function that converts a list to a string.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0]\n        \n    return \"\".join(test_list)\n    \n    \ndef palindrome_to_string5(test_list):\n    '''\n    Write a function that converts a list to a string.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0]\n        \n    return \"\".join(test_list)\n    \n    \nde"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = [(i[0], i[1]%K) for i in test_list]\n    tuples = []\n    for i in range(len(test_list)):\n        if test_list[i][1] % K == 0:\n            tuples.append(test_list[i])\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for test_tuple in test_list:\n        test_element = test_tuple[0]\n        test_element_length = len(test_element)\n        for i in range(test_element_length):\n            if test_element[i] % K == 0:\n                result.append(test_tuple)\n                break\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # make a copy of the list so that it can be modified\n    copied_list = test_list.copy()\n    \n    for i in range(len(test_list)):\n        # try and find all tuples that satisfy the condition\n        # (element should not be divisible by k)\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                if test_list[j] not in copied_list:\n                    copied_list.append(test_list[j])\n    \n    # return tuples that satisfy the condition (element should be divisible by k)\n    return copied_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    i = 0\n    result = []\n    test_list = sorted(test_list)\n    while i < len(test_list):\n        element = test_list[i]\n        # print(element[0])\n        if element[0] % K == 0:\n            result.append(element)\n        i += 1\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # your code goes here\n    pass\n    \n    \ndef sort_first_element(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef sort_second_element(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef get_2_to_10(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef is_even_length(test_list):\n    '''\n    Write a function to return True if the given list has an even number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef is_odd_length(test_list):\n    '''\n    Write a function to return True if the given list has an even number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef contains_first_even(test_list):\n    '''\n    Write a function to return True if the given list has an even number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef contains_first_odd(test_list):\n    '''\n    Write a function to return True if the given list has an odd number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef contains_second_even(test_list):\n    '''\n    Write a function to return True if the given list has an even number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef contains_second_odd(test_list):\n    '''\n    Write a function to return True if the given list has an odd number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef contains_3_even_elements(test_list):\n    '''\n    Write a function to return True if the given list has an even number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef contains_3_odd_elements(test_list):\n    '''\n    Write a function to return True if the given list has an odd number of elements and False otherwise.\n    '''\n    pass\n    \n    \ndef is_element_in_list(test_list, element):\n    '''\n    Write a function to return True if the given list contains the given element and False otherwise.\n    '''\n    pass\n    \n    \ndef is_element_in_list2(test_list, element):\n    '''\n    Write a function to return True if the given list contains the given element and False otherwise.\n    '''\n    pass\n    \n    \ndef remove_2(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_2_without_duplicates(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_first_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_last_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_some_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_some_even_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_some_even_elements2(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_some_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_some_odd_elements2(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_all_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_4_all_odd_elements2(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_without_duplicates(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements2(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements3(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements4(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements5(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_even_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_even_elements2(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_even_elements3(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_even_elements4(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_even_elements5(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements2(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements3(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements4(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_some_odd_elements5(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n    \n    \ndef remove_5_all_odd_elements(test_list):\n    '''\n    Write a function to return a sorted version of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tup_list = []\n    for element in test_list:\n        if element[0] % K == 0:\n            tup_list.append(element)\n    return tup_list\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    i = 0\n    while i < n: \n        x = n % 10\n        if x == 11: \n            print(n, \"is Divisible by 11\") \n            break\n        i += 1\n    if n % 10!= 11: \n        print(n, \"is not Divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 1:\n        return True\n    else:\n        return is_Divisible(n, 11)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def is_divisible(n): \n        '''\n        Write a python function to find whether a number is divisible by 11.\n        '''\n        pass\n        \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10!= 0: \n        return False\n    elif n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    n = n % 10\n    if n == 0 or n == 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n==1 or n==0:\n        return False\n    if n%1==0:\n        return False\n    if n%2==0:\n        return True\n    if n%3==0:\n        return False\n    if n%5==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n == 0: \n        return False\n    elif n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = 0\n    for word in s: \n        word_len += len(word)\n    if word_len % 2!= 0: \n        return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    lst = []\n    for i in s:\n        lst.append(i)\n    if len(s) % 2 == 1:\n        return f'The length of the word is not odd'\n    else:\n        return f'The length of the word is odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    def word_len_check(word): \n        '''\n        The function takes the argument word as input.\n        If the length of the word is odd, it returns \"Odd\"\n        Else, it returns the word as string.\n        '''\n        len_word = len(word)\n        if len_word % 2!= 0: \n            return \"Odd\"\n        else: \n            return word\n    return word_len_check(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return \"The word is odd!\"\n    else: \n        return \"The word is odd!\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Initialize the length variable \n    length = len(s) \n    # Initialize the count variable \n    count = 0\n    # Iterate over the string \n    for i in range(length): \n        # If the count equals 0, \n        # then the word is not odd \n        if count == 0: \n            # Increment the count \n            count = count + 1\n        # If the word is odd, \n        # then add 1 \n        elif s[i] % 2 == 1: \n            count = count + 1\n    # If the count equals the length, \n    # then the word is odd \n    if count == length: \n        return True\n    # If the length is not odd, \n    # then the word is not odd \n    else: \n        return False \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    answer = []\n    if n<=0: \n        return answer\n    if n==1: \n        return 1\n    if n==2: \n        return 2\n    for i in range(3,n+1): \n        answer.append(i) \n        answer.append(n-i)\n        n -= i\n        answer.append(n//i)\n    return answer\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    if n < 0: \n        print('Tetrahedral number of 0 cannot be calculated. Please try again') \n        return -1\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1 \n    else: \n        count = 1\n        while count <= n: \n            count *= 1.5\n            n -= 1\n        print(count) \n        return count \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return \"error\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 12\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n+1):\n        if (n + i == i - 1):\n            return i\n        if (n - i == i - 1):\n            return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Corner case\n    if n < 2:\n        return n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # A quadratic formula.\n    return (1 + n*(1+n)) / 6 \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    start = 0\n    end = n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return n\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 4\n    else: \n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n    "
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * tetrahedral_number(n - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # nth tetrahedral number = 2 * n * n / 4\n    return (n*n)/4\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 * math.pi * r ** 3) / 3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    \n    return 4*(r**3)/3*math.pi*(r**2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    result = 4/3*math.pi*r**3\n    return result\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Use math to calculate volume of sphere\n    volume = math.pi * (r ** 3)\n    #Return volume as a float\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = math.pi * r * r\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = pi*r*r\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(f\"Volume of the sphere with radius {r} is {volume(r)}\")\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    return strr\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    mod_str = strr\n    res = ''\n    for c in mod_str:\n        mod_int = ord(c) % 26\n        res += chr(mod_int)\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = \"\"\n    for i in range(len(strr)):\n        if (ord(strr[i])+ord(strr[i][0]))%26==ord(strr[i][-1]):\n            res = res + strr[i]\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ch_list=[]\n    for i in range(len(strr)):\n        ch_list.append(chr(ord(strr[i])%26+97))\n    return(ch_list)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if (len(strr) == 0):\n        return ''\n    if(len(strr) < 5):\n        return ''\n    if (strr[0] ==''):\n        return ''\n    if (strr[0]!= 'a' and strr[0]!= 'A' and strr[0]!= 'b' and strr[0]!= 'B' and strr[0]!= 'c' and strr[0]!= 'C' and strr[0]!= 'd' and strr[0]!= 'D' and strr[0]!= 'e' and strr[0]!= 'E' and strr[0]!= 'f' and strr[0]!= 'F' and strr[0]!= 'g' and strr[0]!= 'G' and strr[0]!= 'h' and strr[0]!= 'H' and strr[0]!= 'i' and strr[0]!= 'I' and strr[0]!= 'j' and strr[0]!= 'J' and strr[0]!= 'k' and strr[0]!= 'K' and strr[0]!= 'l' and strr[0]!= 'L' and strr[0]!='m' and strr[0]!= 'M' and strr[0]!= 'n' and strr[0]!= 'N' and strr[0]!= 'o' and strr[0]!= 'O' and strr[0]!= 'p' and strr[0]!= 'P' and strr[0]!= 'q' and strr[0]!= 'Q' and strr[0]!= 'r' and strr[0]!= 'R' and strr[0]!='s' and strr[0]!= 'S' and strr[0]!= 't' and strr[0]!= 'T' and strr[0]!= 'u' and strr[0]!= 'U' and strr[0]!= 'v' and strr[0]!= 'V' and strr[0]!= 'w' and strr[0]!= 'W' and strr[0]!= 'x' and strr[0]!= 'X' and strr[0]!= 'y' and strr[0]!= 'Y' and strr[0]!= 'z' and strr[0]!= 'Z'):\n        return ''\n    for i in strr:\n        if(ord(i) % 65 > 97):\n            return ''\n    return chr(ord(i) - 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in range(len(strr)):\n        strr[i] = chr(ord(strr[i])%26 + ord('A'))\n    return strr\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for char in range(ord(strr[0])-ord('A'), ord(strr[0])+ord('A')-ord('a')+1):\n        if char%26 == 0:\n            return chr(char)\n    return '#'\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = ''\n    for i in strr:\n        result += chr(ord(i) % 26 + ord('A'))\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod = 26\n    strr = str(strr)\n    s = \"\"\n    for i in strr:\n        ascii = ord(i)\n        s += chr(ascii % mod)\n    return s\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr) % 26 + ord('a'))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence=list(range(1,n+1))\n    # print(sequence)\n    sequence.insert(0,0)\n    # print(sequence)\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 1\n    if n < 10:\n        x = n\n    else:\n        x = n % 10\n    x1 = x % 10\n    n = n // 10\n    x2 = x % 10\n    if x == 1:\n        x = -1\n    x = x1 + x2\n    if x2 == 1:\n        x = -1\n    return x"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nums = range(n+1)\n    nums.sort()\n    i = 0\n    while i < n:\n        j = n - 1\n        while j >= i and nums[j] - nums[i] > 1:\n            j -= 1\n        nums[i] = nums[j] + 1\n        i += 1\n    return nums[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    print(n)\n    newman = '1'\n    for i in range(1, n+1):\n        newman += str(i) +''\n    return newman[0:-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0: \n        return None\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return sequence(n - 1) + sequence(n - 2)\n    \nprint sequence(3)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n + 1) * n * 2 + (n + 1) * 3 + "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # For n=0\n    if n==0:\n        return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # define current number \n    current = 1\n    # for loop \n    for i in range(2, n): \n        # update current \n        current = current * 10 + i \n        # define new number \n        new = current % 10 \n        # print new number \n        print(new) \n        # return the new number \n        return new \n    # return none \n    return None \n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*3.142*(r*r*r)\n    print(f'The surface area of a sphere with radius {r} is {area}.')\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    area = 12.7*r**3\n    print(f'The surface area of a cube with radius {r} is {area}.')\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 4*math.pi*(r**2)*h\n    print(f'The surface area of a cylinder with radius {r} and height {h} is {area}.')\ndef surfacearea_plane(r,n):\n    '''\n    Write a function that finds the surface area of a plane.\n    '''\n    area = 4*(r**2)*n\n    print(f'The surface area of a plane with radius {r} and number of sides {n} is {area}.')\ndef area_of_circle(r):\n    '''\n    Write a function that finds the area of a circle.\n    '''\n    area = 4*math.pi*r**2\n    print(f'The area of a circle with radius {r} is {area}.')\ndef area_of_sphere(r):\n    '''\n    Write a function that finds the area of a sphere.\n    '''\n    area = 4*3.142*(r**2)\n    print(f'The area of a sphere with radius {r} is {area}.')\ndef area_of_cube(r):\n    '''\n    Write a function that finds the area of a cube.\n    '''\n    area = 12.7*r**3\n    print(f'The area of a cube with radius {r} is {area}.')\ndef area_of_cylinder(r,h):\n    '''\n    Write a function that finds the area of a cylinder.\n    '''\n    area = 4*math.pi*(r**2)*h\n    print(f'The area of a cylinder with radius {r} and height {h} is {area}.')\ndef area_of_plane(r,n):\n    '''\n    Write a function that finds the area of a plane.\n    '''\n    area = 4*(r**2)*n\n    print(f'The area of a plane with radius {r} and number of sides {n} is {area}.')\ndef area_of_circle(r):\n    '''\n    Write a function that finds the area of a circle.\n    '''\n    area = 4*math.pi*r**2\n    print(f'The area of a circle with radius {r} is {area}.')\ndef area_of_sphere(r):\n    '''\n    Write a function that finds the area of a sphere.\n    '''\n    area = 4*3.142*(r**2)\n    print(f'The area of a sphere with radius {r} is {area}.')\ndef area_of_cube(r):\n    '''\n    Write a function that finds the area of a cube.\n    '''\n    area = 12.7*r**3\n    print(f'The area of a cube with radius {r} is {area}.')\ndef area_of_cylinder(r,h):\n    '''\n    Write a function that finds the area of a cylinder.\n    '''\n    area = 4*math.pi*(r**2)*h\n    print(f'The area of a cylinder with radius {r} and height {h} is {area}.')\ndef area_of_plane(r,n):\n    '''\n    Write a function that finds the area of a plane.\n    '''\n    area = 4*(r**2)*n\n    print(f'The area of a plane with radius {r} and number of sides {n} is {area}.')\ndef volume_of_circle(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    volume = 4*math.pi*(r**2)\n    print(f'The volume of a circle with radius {r} is {volume}.')\ndef volume_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    volume = 4*3.142*(r**2)\n    print(f'The volume of a sphere with radius {r} is {volume}.')\ndef volume_of_cube(r):\n    '''\n    Write a function that finds the volume of a cube.\n    '''\n    volume = 12.7*r**3\n    print(f'The volume of a cube with radius {r} is {volume}.')\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    volume = 4*math.pi*(r**2)*h\n    print(f'The volume of a cylinder with radius {r} and height {h} is {volume}.')\ndef volume_of_plane(r,n):\n    '''\n    Write a function that finds the volume of a plane.\n    '''\n    volume = 4*(r**2)*n\n    print(f'The volume of a plane with radius {r} and number of sides {n} is {volume}.')\ndef volume_of_circle(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    volume = 4*math.pi*r**2\n    print(f'The volume of a circle with radius {r} is {volume}.')\ndef volume_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    volume = 4*3.142*r**2\n    print(f'The volume of a sphere with radius {r} is {volume}.')\ndef volume_of_cube(r):\n    '''\n    Write a function that finds the volume of a cube.\n    '''\n    volume = 12.7*r**3\n    print(f'The volume of a cube with radius {r} is {volume}.')\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    volume = 4*math.pi*(r**2)*h\n    print(f'The volume of a cylinder with radius {r} and height {h} is {volume}.')\ndef volume_of_plane(r,n):\n    '''\n    Write a function that finds the volume of a plane.\n    '''\n    volume = 4*(r**2)*n\n    print(f'The volume of a plane with radius {r} and number of sides {n} is {volume}.')\ndef volume_of_circle(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    volume = 4*math.pi*(r**2)\n    print(f'The volume of a circle with radius {r} is {volume}.')\ndef volume_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    volume = 4*3.142*(r**2)\n    print(f'The volume of a sphere with radius {r} is {volume}.')\ndef volume_of_cube(r):\n    '''\n    Write a function that finds the volume of a cube.\n    '''\n    volume = 12.7*r**3\n    print(f'The volume of a cube with radius {r} is {volume}.')\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    volume = 4*math.pi*(r**2)*h\n    print(f'The volume of a cylinder with radius {r} and height {h} is {volume}.')\ndef volume_of_plane(r,n):\n    '''\n    Write a function that finds the volume of a plane.\n    '''\n    volume = 4*(r**2)*n\n    print(f'The volume of a plane with radius {r} and number of sides {n} is {volume}.')\ndef volume"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = (4/3)*math.pi*math.pow(r,3)\n    return S\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = math.sqrt(a*a)\n    return area\ndef perimeter_rectangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = a+b+c\n    return perimeter\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pi = math.pi\n    area = (4*math.pi*r**2)\n    return area\ndef diameter_rectangle(a,b,c):\n    '''\n    Write a function to find the diameter of a rectangle.\n    '''\n    area = (b*c)/2\n    diameter = math.sqrt(area)\n    return diameter\ndef diameter_circle(r):\n    '''\n    Write a function to find the diameter of a circle.\n    '''\n    area = math.pi*(r*r)\n    diameter = 2*(math.sqrt(area))\n    return diameter\ndef circumference_rectangle(a,b,c):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    area = (b*c)/2\n    circumference = math.sqrt(area)\n    return circumference\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    area = math.pi*(r*r)\n    circumference = 2*(math.sqrt(area))\n    return circumference\ndef area_square_rectangle(a,b,c):\n    '''\n    Write a function to find the area of a rectangle and the perimeter of a rectangle.\n    '''\n    perimeter = perimeter_rectangle(a,b,c)\n    area = area_square(a*b*c)\n    return area, perimeter\ndef area_square_circle(r):\n    '''\n    Write a function to find the area of a rectangle and the diameter of a circle.\n    '''\n    diameter = diameter_circle(r)\n    perimeter = perimeter_rectangle(r,r,r)\n    area = area_circle(r)\n    return area, diameter, perimeter\ndef area_square_rectangle_circle(a,b,c):\n    '''\n    Write a function to find the area of a rectangle and the circumference of a rectangle.\n    '''\n    area = area_square_rectangle(a,b,c)[0]\n    circumference = area_square_rectangle(a,b,c)[1]\n    return area, circumference\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = math.sqrt(b*b-4*a*c)\n    return area\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    area = math.sqrt(b*b-4*a*c)\n    perimeter = 2*(math.sqrt(area))\n    return perimeter\ndef area_triangle_circle(r):\n    '''\n    Write a function to find the area of a triangle and the circumference of a triangle.\n    '''\n    circumference = perimeter_triangle(r,r,r)\n    area = area_triangle(r,r,r)\n    return area, circumference\ndef perimeter_triangle_circle(r):\n    '''\n    Write a function to find the perimeter of a triangle and the circumference of a triangle.\n    '''\n    area = perimeter_triangle(r,r,r)\n    perimeter = 2*(math.sqrt(area))\n    return perimeter\ndef area_triangle_rectangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle and the perimeter of a rectangle.\n    '''\n    area = area_triangle(a,b,c)\n    perimeter = perimeter_rectangle(a,b,c)\n    area = area_rectangle(a,b,c)\n    return area, perimeter\ndef perimeter_triangle_rectangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle and the circumference of a rectangle.\n    '''\n    area = perimeter_triangle(a,b,c)\n    perimeter = perimeter_rectangle(a,b,c)\n    area = area_rectangle(a,b,c)\n    return area, perimeter\ndef area_circle_rectangle(r):\n    '''\n    Write a function to find the area of a circle and the perimeter of a rectangle.\n    '''\n    area = area_circle(r)\n    perimeter = perimeter_rectangle(r,r,r)\n    area = area_rectangle(r,r,r)\n    return area, perimeter\ndef perimeter_circle_rectangle(r):\n    '''\n    Write a function to find the perimeter of a circle and the circumference of a rectangle.\n    '''\n    area = perimeter_circle(r)\n    perimeter = perimeter_rectangle(r,r,r)\n    area = area_rectangle(r,r,r)\n    return area, perimeter\ndef area_circle_triangle(r):\n    '''\n    Write a function to find the area of a circle and the circumference of a triangle.\n    '''\n    area = area_circle(r)\n    perimeter = perimeter_triangle(r,r,r)\n    area = area_triangle(r,r,r)\n    return area, perimeter\ndef perimeter_circle_triangle(r):\n    '''\n    Write a function to find the perimeter of a circle and the circumference of a triangle.\n    '''\n    area = perimeter_circle(r)\n    perimeter = perimeter_triangle(r,r,r)\n    area = area_triangle(r,r,r)\n    return area, perimeter\ndef area_square_rectangle_circle_triangle(a,b,c,r):\n    '''\n    Write a function to find the area of a square and the circumference of a rectangle and the area of a circle and the circumference of a triangle.\n    '''\n    area = area_square_rectangle_circle(a,b,c,r)\n    perimeter = area_square_rectangle_circle(a,b,c,r)\n    area = area_triangle_circle(a,b,c)\n    perimeter = perimeter_triangle_circle(a,b,c)\n    area = area_circle_triangle(r)\n    return area, perimeter\ndef area_circle_rectangle_circle_triangle(r):\n    '''\n    Write a function to find the area of a circle and the circumference of a rectangle and the area of a circle and the circumference of a triangle.\n    '''\n    area = area_circle_rectangle(r)\n    perimeter = perimeter_circle_rectangle(r)\n    area = area_triangle_circle(r)\n    perimeter = perimeter_triangle_circle(r)\n    area = area_triangle_rectangle(r)\n    return area, perimeter\ndef area_circle_rectangle_triangle(r):\n    '''\n    Write a function to find the area of a circle and the circumference of a rectangle and the area of a circle and the circumference of a triangle.\n    '''\n    area = area_circle_rectangle(r)\n    perimeter = perimeter_circle_rectangle(r)\n    area = area_triangle_circle(r)\n    perimeter = perimeter_triangle_circle(r)\n    area = area_triangle_rectangle(r)\n    return area, perimeter\ndef area_circle_rectangle_circle_triangle(r):\n    '''\n    Write a function to find the area of a circle and the circumference of a rectangle and the area of a circle and the circumference of a triangle.\n    '''\n    area = area_circle_rectangle(r)\n    perimeter = perimeter_circle_rectangle(r)\n    area = area_triangle_circle(r)\n    perimeter = perimeter_triangle_circle(r)\n    area = area_triangle_rectangle(r)"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    A = math.pi * (r ** 2)\n    print(f\"The surface area of a sphere of radius {r} is {A}.\")\n    return A\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return r * r * math.pi * math.pow(2, 3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0 * (math.pi * r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*(math.pi*r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # area = 4/3 * pi * r^3\n    # formula for circumference:\n    # d/2 = 4 * pi * r\n    return 4/3 * math.pi * r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    R = r*r\n    A = 2*pi*R\n    return A\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n ** 2 + (n // 2) ** 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = [i for i in range(n)]\n    result[0], result[2], result[4], result[6] = result[2], result[4], result[6], result[0]\n    result[1], result[3], result[5], result[7] = result[3], result[5], result[7], result[1]\n    result[-1], result[-2], result[-4], result[-6] = result[-2], result[-4], result[-6], result[-1]\n    return sum(result)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n > 0 and n <= 16):\n        return (16 - n) * 6 + n\n    elif (n < 0):\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(3*n+1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    n = n\n    while (x < n):\n        y = x + 1\n        while (y <= n):\n            z = y + 1\n            while (z <= n):\n                hex = x + y + z\n                if hex % 2 == 0:\n                    print(hex)\n                z = z + 1\n            y = y + 1\n        x = x + 1\n    \nif __name__ == \"__main__\":\n    n = int(input())\n    centered_hexagonal_number(n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    square_nums = [\n    (0,0),\n    (0,1),\n    (0,2),\n    (0,3),\n    (0,4),\n    (1,0),\n    (1,1),\n    (1,2),\n    (1,3),\n    (1,4),\n    (2,0),\n    (2,1),\n    (2,2),\n    (2,3),\n    (2,4),\n    (3,0),\n    (3,1),\n    (3,2),\n    (3,3),\n    (3,4),\n    (4,0),\n    (4,1),\n    (4,2),\n    (4,3),\n    (4,4),\n    ]\n    def square_number(x,y):\n        '''\n        Return square of the number\n        '''\n        return ((x**2) + (y**2))**0.5\n    square_x = 0\n    square_y = 0\n    square_num = 1\n    for square_i in square_nums:\n        square_x += square_i[0]\n        square_y += square_i[1]\n        square_num *= square_x\n        square_num *= square_y\n    return square_num\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Your code here\n    # n=int(input())\n    # sum=0\n    # for i in range(n):\n    #     sum+=n\n    # print(sum)\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n<1:\n        raise ValueError(\"n must be at least 1\")\n    if n>=3:\n        raise ValueError(\"n must be less than or equal to 3\")\n    hexagon = []\n    for i in range(n):\n        if n%6 == 1:\n            hexagon.append(6)\n        elif n%6 == 2:\n            hexagon.append(4)\n        elif n%6 == 3:\n            hexagon.append(2)\n        elif n%6 == 4:\n            hexagon.append(1)\n        else:\n            hexagon.append(0)\n    return sum(hexagon)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n    \ndef count_combinations(data, total, dictionary):\n    '''\n    Write a function to count the number of unique values in a dictionary.\n    '''\n    result = 0\n    for key, value in dictionary.items():\n        if key in data:\n            result += 1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key, value in dict1.items():\n        if key in dict2:\n            merged[key] = dict1[key] + dict2[key]\n        else:\n            merged[key] = dict1[key]\n    for key, value in dict2.items():\n        if key in dict3:\n            merged[key] = dict2[key] + dict3[key]\n        else:\n            merged[key] = dict2[key]\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dic = dict1.copy()\n    merged_dic.update(dict2)\n    merged_dic.update(dict3)\n    return merged_dic\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1 is None:\n        return dict3\n    if dict2 is None:\n        return dict3\n    if dict3 is None:\n        return dict1\n    for key in dict2:\n        if key in dict1:\n            dict1[key] = merge_dictionaries_three(dict1[key], dict2[key], dict3[key])\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    merged_dict={}\n    # Merge dictionaries\n    for key in dict1:\n        if key in dict2:\n            merged_dict[key]=dict1[key]+dict2[key]\n    for key in dict3:\n        if key in dict2:\n            merged_dict[key]=dict1[key]+dict2[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict3.copy()\n    for key in dict1:\n        dict1[key] = dict1[key].copy()\n        dict2[key] = dict2[key].copy()\n        dict3[key] = dict3[key].copy()\n    return dict1, dict2, dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    dict_list = list(dict1.items()) + list(dict2.items()) + list(dict3.items())\n    \n    for k, v in dict_list:\n        if k in merged_dict.keys():\n            merged_dict[k].update(v)\n        else:\n            merged_dict[k] = v\n    return merged_dict\n    \ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    dict_list = list(dict1.items()) + list(dict2.items())\n    \n    for k, v in dict_list:\n        if k in merged_dict.keys():\n            merged_dict[k].update(v)\n        else:\n            merged_dict[k] = v\n    return merged_dict\n    \ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    dict_list = list(dict1.items()) + list(dict2.items())\n    \n    for k, v in dict_list:\n        if k in merged_dict.keys():\n            merged_dict[k].update(v)\n        else:\n            merged_dict[k] = v\n    return merged_dict\n    \ndef get_fibonacci(n):\n    '''\n    Return the nth Fibonacci number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return get_fibonacci(n-1) + get_fibonacci(n-2)\ndef get_fibonacci_recursive(n):\n    '''\n    Return the nth Fibonacci number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return get_fibonacci(n-1) + get_fibonacci(n-2)\ndef count_numbers(n):\n    '''\n    Return the number of times the nth Fibonacci number has been \n    repeated.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return count_numbers(n-1) + count_numbers(n-2)\ndef count_numbers_recursive(n):\n    '''\n    Return the number of times the nth Fibonacci number has been repeated.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return count_numbers_recursive(n-1) + count_numbers_recursive(n-2)\ndef check_number(n):\n    '''\n    Return whether n is a Fibonacci number or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        return check_number(n-1) and check_number(n-2)\ndef count_numbers_simple(n):\n    '''\n    Return the number of times the nth Fibonacci number has been repeated.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 + count_numbers_simple(n-1)\ndef count_numbers_simple_recursive(n):\n    '''\n    Return the number of times the nth Fibonacci number has been repeated.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 + count_numbers_simple_recursive(n-1)\ndef is_prime(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True\n    \ndef is_prime_recursive(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True\n    \ndef fibonacci_prime(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(1, n+1):\n            if is_prime_recursive(i) and is_prime_recursive(i+1):\n                return True\n        return False\n    \ndef fibonacci_prime_recursive(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(1, n+1):\n            if is_prime_recursive(i) and is_prime_recursive(i+1):\n                return True\n        return False\ndef fibonacci_recursive(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(1, n+1):\n            if is_prime_recursive(i) and is_prime_recursive(i+1):\n                return True\n        return False\n    \ndef fibonacci_recursive_prime(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(1, n+1):\n            if is_prime_recursive(i) and is_prime_recursive(i+1):\n                return True\n        return False\n        \ndef fibonacci_recursive_prime_recursive(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(1, n+1):\n            if is_prime_recursive(i) and is_prime_recursive(i+1):\n                return True\n        return False\n        \ndef fibonacci_simple(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(1, n+1):\n            if is_prime_simple(i) and is_prime_simple(i+1):\n                return True\n        return False\n    \ndef fibonacci_simple_recursive(n):\n    '''\n    Return whether the given number is prime or not.\n    '''\n    if n < 1:\n        return False\n    elif "
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # if dictionaries have different types then raise an exception\n    if len(dict1)!= len(dict2) or len(dict1)!= len(dict3):\n        raise Exception('Dictionaries have different types')\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter = collections.Counter(list1)\n    return counter\ndef words(list1):\n    '''\n    Write a function to get a dictionary, where each key is a word and each value is the frequency of that word.\n    '''\n    word_dict = dict()\n    for i in list1:\n        word_dict[i] = list1.count(i)\n    return word_dict\ndef frequency(list1):\n    '''\n    Write a function that takes a list of strings and return a dictionary where the keys are the words and the values are the frequencies of that word.\n    '''\n    word_dict = collections.Counter(list1)\n    return word_dict\ndef common(list1, list2):\n    '''\n    Write a function that takes two lists and returns a dictionary where the keys are the elements of both lists and the values are the elements of the common elements between the two lists.\n    '''\n    dict1 = collections.Counter(list1)\n    dict2 = collections.Counter(list2)\n    common = collections.Counter()\n    for i in dict1:\n        if i in dict2:\n            common[i] = dict1[i] + dict2[i]\n    return common\ndef is_sub_string(s, t):\n    '''\n    Write a function that takes a string s and a string t and returns True if s is a substring of t, otherwise return False.\n    '''\n    return t in s\ndef is_sub_string2(s, t):\n    '''\n    Write a function that takes a string s and a string t and returns True if s is a substring of t, otherwise return False.\n    '''\n    if len(s) == len(t):\n        return s in t\n    else:\n        return False\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # freq = collections.Counter(list1)\n    # print(\"The frequency of the elements in the list is :\\n\", freq)\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for element in list1:\n        if element not in freq:\n            freq[element]=0\n        freq[element]=freq[element]+1\n    return freq\n    \n    \ndef pick_an_element(list1,n):\n    '''\n    Return the nth smallest element of the given list.\n    '''\n    minimum=list1[0]\n    index=0\n    for i in range(len(list1)):\n        if minimum>list1[i]:\n            minimum=list1[i]\n            index=i\n    return list1[index]\n            \n            \n            \n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1_freq = collections.Counter(list1)\n    list1_freq = {k:v for (k,v) in list1_freq.items()}\n    return list1_freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if not list1:\n        raise TypeError(\"List must contain a non-empty list\")\n    elif not list1:\n        raise TypeError(\"List must contain a non-empty list\")\n    else:\n        #this is the empty list\n        freq_dic = {}\n        for item in list1:\n            if not item in freq_dic:\n                freq_dic[item] = 0\n            freq_dic[item] += 1\n        return freq_dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict={}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item]+=1\n        else:\n            freq_dict[item]=1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict={}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element]+=1\n        else:\n            freq_dict[element]=1\n    return freq_dict\ndef func(l1):\n    freq_dict=freq_count(l1)\n    freq_dict_items=list(freq_dict.items())\n    freq_dict_items.sort(key=lambda x:x[1],reverse=True)\n    return freq_dict_items\ndef get_key(l1):\n    '''\n    Return the first element in the list.\n    '''\n    return l1[0]\ndef get_value(l1):\n    '''\n    Return the element in the list that has the highest frequency.\n    '''\n    return l1[1]\ndef merge_sort(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <=1:\n        return l1\n    left_side=[]\n    right_side=[]\n    mid=int((len(l1)/2)-1)\n    # print(mid)\n    for i in range(0,mid):\n        left_side.append(l1[i])\n    for j in range(mid+1,len(l1)):\n        right_side.append(l1[j])\n    # print(left_side)\n    # print(right_side)\n    return merge_sort(left_side) + right_side\ndef calc_median(l1):\n    '''\n    Return the median of all the elements in a list.\n    '''\n    if len(l1)<=1:\n        return l1[0]\n    mid = int(len(l1)/2)\n    left = l1[:mid]\n    right = l1[mid:]\n    # print(mid)\n    # print(left)\n    # print(right)\n    return calc_median(left) + calc_median(right)\ndef remove_duplicates(l1):\n    '''\n    Remove duplicate elements from a list.\n    '''\n    return [l1[0]]+[l1[i] for i in range(1,len(l1))]\ndef merge(left,right):\n    left_copy=[]\n    right_copy=[]\n    i,j=0,0\n    while i<len(left) and j<len(right):\n        if left[i]<=right[j]:\n            left_copy.append(left[i])\n            i+=1\n        else:\n            right_copy.append(right[j])\n            j+=1\n    while i<len(left):\n        left_copy.append(left[i])\n        i+=1\n    while j<len(right):\n        right_copy.append(right[j])\n        j+=1\n    # print(left_copy)\n    # print(right_copy)\n    return left_copy+right_copy\ndef merge_sort_unique(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <= 1:\n        return l1\n    mid = int(len(l1)/2)\n    left = l1[:mid]\n    right = l1[mid:]\n    # print(mid)\n    # print(left)\n    # print(right)\n    # return merge_sort(left) + right\n    return merge_sort_unique(left) + merge_sort_unique(right)\ndef remove_duplicates_from_list(l1):\n    '''\n    Remove duplicate elements from a list.\n    '''\n    left_dup_set={}\n    right_dup_set={}\n    for i in range(len(l1)):\n        if l1[i] in left_dup_set:\n            left_dup_set[l1[i]]+=1\n        else:\n            left_dup_set[l1[i]]=1\n        if l1[i] in right_dup_set:\n            right_dup_set[l1[i]]+=1\n        else:\n            right_dup_set[l1[i]]=1\n    return left_dup_set,right_dup_set\ndef merge_sort_unique_from_list(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <= 1:\n        return l1\n    mid = int(len(l1)/2)\n    left = l1[:mid]\n    right = l1[mid:]\n    # print(mid)\n    # print(left)\n    # print(right)\n    # return merge_sort(left) + right\n    return merge_sort_unique_from_list(left) + merge_sort_unique_from_list(right)\ndef merge_sort_rec(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <=1:\n        return l1\n    mid = int(len(l1)/2)\n    left = merge_sort_rec(l1[:mid])\n    right = merge_sort_rec(l1[mid:])\n    # print(mid)\n    # print(left)\n    # print(right)\n    return merge(left,right)\ndef merge_sort_rec_unique(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <= 1:\n        return l1\n    mid = int(len(l1)/2)\n    left = merge_sort_rec_unique(l1[:mid])\n    right = merge_sort_rec_unique(l1[mid:])\n    # print(mid)\n    # print(left)\n    # print(right)\n    return merge(left,right)\ndef merge_sort_unique_rec(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <= 1:\n        return l1\n    mid = int(len(l1)/2)\n    left = merge_sort_rec_unique(l1[:mid])\n    right = merge_sort_rec_unique(l1[mid:])\n    # print(mid)\n    # print(left)\n    # print(right)\n    return merge(left,right)\ndef merge_sort_rec_unique_from_list(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <= 1:\n        return l1\n    mid = int(len(l1)/2)\n    left = merge_sort_rec_unique_from_list(l1[:mid])\n    right = merge_sort_rec_unique_from_list(l1[mid:])\n    # print(mid)\n    # print(left)\n    # print(right)\n    return merge(left,right)\ndef merge_sort_rec_unique_from_list_reverse(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <= 1:\n        return l1\n    mid = int(len(l1)/2)\n    left = merge_sort_rec_unique_from_list_reverse(l1[:mid])\n    right = merge_sort_rec_unique_from_list_reverse(l1[mid:])\n    # print(mid)\n    # print(left)\n    # print(right)\n    return merge(left,right)\ndef merge_sort_unique_from_list_reverse(l1):\n    '''\n    Sort a list in ascending order using merge sort.\n    '''\n    if len(l1) <= 1:\n        return l1\n    mid = int(len(l1)/2)\n    left = merge_sort_unique_from_list_reverse(l1[:mid])\n    right = merge_sort_unique_from_list_reverse(l1[mid:])\n    # print(mid)\n    # print(left)\n    # print(right)\n    return merge(left,right)\ndef partition(l1,l2):"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Let's create a variable that holds the largest number, and a variable to store the smallest number.\n    largest_num = 0\n    smallest_num = N\n    # Let's loop through each number.\n    for number in range(N,0,-1):\n        if largest_num == 0:\n            largest_num = number\n        elif number < smallest_num:\n            smallest_num = number\n    # If the smallest number is bigger than the largest number, we calculate that number.\n    if smallest_num > largest_num:\n        return smallest_num\n    else:\n        return largest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    f = int(N)\n    n = N\n    if f == 1:\n        return n\n    else:\n        while n > 2:\n            if (n % 10) == 0:\n                n = n // 10\n            else:\n                n = n * 10\n        return n\n    "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 100000:\n        return 10**9\n    elif N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        smallest = 1\n        smallest_num = 1\n        for i in range(3, N + 1):\n            smallest_num = smallest_num + 1\n            if smallest_num < i:\n                smallest_num = i\n        return smallest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if (N < 10):\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N==0:\n        return 0\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n    else:\n        return closest_num(N // 10) + (N % 10)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_smallest = min(N)\n    n_index = N.index(n_smallest)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        print('No smaller number exists')\n    elif N == 0:\n        print('0')\n    elif N == 1:\n        print('1')\n    else:\n        for i in range(2, N):\n            if N%i == 0:\n                print(i)\n                break\n                \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N % 2 == 0:\n        return closest_num(N/2)\n    return closest_num(N/2 - 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = sorted(N)\n    x = 0\n    for i in l:\n        if i == l[0]:\n            break\n        if l[0] < i:\n            x = x\n        else:\n            x = i\n    return x\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # return len(max(list1, key=len))\n    return max(list1, key=len)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Write your code here.\n    longest_word = []\n    for item in list1:\n        if len(item) > len(longest_word):\n            longest_word = item\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Create a string variable called word to store the word.\n    # Create a list called length_word that stores the word length.\n    # Loop through each element of the list, and find the maximum length.\n    # Print the maximum length to the screen.\n    word = []\n    length_word = []\n    for i in range(len(list1)):\n        word.append(list1[i])\n        length_word.append(len(word[i]))\n    length_max = max(length_word)\n    for i in range(len(length_word)):\n        if length_word[i] == length_max:\n            print(word[i], end=' ')\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    word = \"\"\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            word = word.strip()\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(len_log(list1[:-1]))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) > 1:\n        return len(max(list1, key=len))\n    else:\n        return 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(word) for word in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_lst = list(sub_str)\n    result = []\n    lst = list(str1)\n    for i in range(len(lst)):\n        if lst[i] in sub_str_lst:\n            result.append(lst[i])\n    if result == sub_str_lst:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Code here\n    sub_str_lst = list(sub_str)\n    sub_str_lst = list(sub_str)\n    a = []\n    for i in str1:\n        if i in sub_str_lst:\n            a.append(i)\n    if len(a) == len(sub_str):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # 1. we will start with the first index of string values\n    index = 0\n    # 2. we will end with the last index of string values\n    end_index = len(str1) - 1\n    # 3. we will loop till we find a substring\n    while (index <= end_index):\n        # 4. if the current index is greater than the end index we need to jump to the index at the end\n        # of the string\n        if (index > end_index):\n            break\n        # 5. if the current index is less than the first index we need to jump to the index at the start\n        # of the string\n        if (index < 0):\n            break\n        # 6. we are going to compare the string at the current index to the string at the end of the string\n        # and if it is a substring, we are going to jump to the index of the first sub string\n        if (str1[index] == sub_str[0]):\n            index += 1\n            # 7. if the current index is greater than the end index we need to jump to the index at the end\n            # of the string\n            if (index > end_index):\n                break\n        # 8. if the current index is less than the first index we need to jump to the index at the start\n        # of the string\n        if (index < 0):\n            break\n        # 9. we are going to compare the string at the current index to the string at the end of the string\n        # and if it is a substring, we are going to jump to the index of the first sub string\n        if (str1[index] == sub_str[1]):\n            index += 1\n            # 10. if the current index is greater than the end index we need to jump to the index at the end\n            # of the string\n            if (index > end_index):\n                break\n        # 11. if the current index is less than the first index we need to jump to the index at the start\n        # of the string\n        if (index < 0):\n            break\n        # 12. we are going to compare the string at the current index to the string at the end of the string\n        # and if it is a substring, we are going to jump to the index of the first sub string\n        if (str1[index] == sub_str[2]):\n            index += 1\n            # 13. if the current index is greater than the end index we need to jump to the index at the end\n            # of the string\n            if (index > end_index):\n                break\n        # 14. if the current index is less than the first index we need to jump to the index at the start\n        # of the string\n        if (index < 0):\n            break\n        index += 1\n    # 15. if all the substrings have been found we return True\n    if index == len(sub_str):\n        return True\n    # 16. return False\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    my_list = list(str1)\n    i = 0\n    j = 0\n    for i in range(len(str1)):\n        if my_list[i] == sub_str[0]:\n            for j in range(1, len(sub_str)):\n                if my_list[i + j]!= sub_str[j]:\n                    break\n            else:\n                return True\n        elif my_list[i] == sub_str[1]:\n            for j in range(1, len(sub_str)):\n                if my_list[i + j]!= sub_str[j]:\n                    break\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i, j = 0, 0\n    for c in sub_str:\n        if c in str1[i:j+1]:\n            j += 1\n        else:\n            i += 1\n    return True if j==len(str1) else False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_set = set(sub_str)\n    str_len = len(str1)\n    if len(sub_str_set) <= str_len:\n        return sub_str_set\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n    \nprint(find_substring(\"abcd\", \"cd\"))\nprint(find_substring(\"abcd\", \"abcd\"))\nprint(find_substring(\"abcd\", \"abcdabcd\"))"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1: return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return not is_undulating(n-1) and is_undulating(n-2)\n    \ndef add_at_end(list1, n):\n    '''\n    Write a function to add at the end the element in the list.\n    '''\n    if n == 0:\n        return\n    if len(list1) == 0:\n        list1.append(n)\n    else:\n        list1.insert(len(list1), n)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return 0 <= n <= 9\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(1, int(n/2)+1):\n            if n%i == 0:\n                return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    result = n % 10\n    if result == 0:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n \nprint(is_undulating(5))\nprint(is_undulating(8))\nprint(is_undulating(13))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2!= 0\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a ** b\n    except TypeError:\n        return 'Invalid input'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    c = a**b\n    print('a^b = {}'.format(c))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = min(test_list, key=itemgetter(1))\n    return smallest_second[0]\n    \ndef mean(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average value of the tuple.\n    '''\n    length = len(test_list)\n    total = 0\n    for item in test_list:\n        total += item[1]\n    return total/length\n    \ndef median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median value of the tuple.\n    '''\n    length = len(test_list)\n    if length % 2 == 0:\n        first = test_list[length//2]\n        second = test_list[(length//2)-1]\n    else:\n        first = test_list[length//2]\n        second = test_list[length//2+1]\n    return (first + second)/2\n    \ndef mode(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple whose mode is the value in the list.\n    '''\n    modes = {}\n    for item in test_list:\n        if item[0] not in modes:\n            modes[item[0]] = 0\n        modes[item[0]] += 1\n    mode = ''\n    for key in modes:\n        if modes[key] == 1:\n            mode = key\n    return mode\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = 0\n    index_min_second = 0\n    second_min = None\n    second_min_second = None\n    for tuple in test_list:\n        if tuple[1] < second_min:\n            second_min_second = second_min\n            second_min = tuple[1]\n            index_min_second = index_min\n        if second_min < tuple[1] < second_min_second:\n            second_min_second = second_min\n            second_min = tuple[1]\n            index_min_second = index_min\n    return second_min,second_min_second,index_min_second\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list)\n    print(min(test_list))\n    \n    \n    return test_list\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_tuple = sorted(test_list, key=itemgetter(1,0))\n    min_index = 0\n    if new_tuple[0][1] < new_tuple[1][1]:\n        min_index = 1\n    else:\n        min_index = 2\n    return new_tuple[min_index][0]\n    # also, you can use itertools.imap or iter(test_list)\n    # for x in test_list:\n    #     if x[1] < x[0]:\n    #         min_index = x[1]\n    #         break\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = test_list[0]\n    for i in test_list:\n        if(i[1] < result[1]):\n            result = i\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # test_list = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\n    # output = 1\n    # returns 1\n    # print(test_list)\n    smallest_values = sorted(test_list, key=itemgetter(1))\n    return smallest_values[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum:\n            minimum = test_list[i][0]\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # write your code here\n    minimum = test_list[0][0]\n    minimum_index = 0\n    for index, element in enumerate(test_list):\n        if element[0] < minimum:\n            minimum = element[0]\n            minimum_index = index\n    return minimum_index\n    #     #this code is called to get the minimum element in the sorted list\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length_of_list = len(lst)\n    min_length = len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list1=[]\n    list2=[]\n    min=len(lst)\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]>lst[j]:\n                list1.append(lst[i])\n                list2.append(lst[j])\n        list1.append(lst[i])\n        list2.append(lst[j])\n    return len(list1)+len(list2)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLength = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                minLength = min(len(lst[i]), minLength)\n    return minLength\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    return min(lst, key=len)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_length = len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = list(lst)\n    if len(lst) == 0:\n        return 0\n    \n    def Find_Length(lst):\n        '''\n        Write a python function to find the length of the smallest list in a list of lists.\n        '''\n        for i in range(len(lst)):\n            for j in range(i+1,len(lst)):\n                if lst[i] < lst[j]:\n                    lst[i], lst[j] = lst[j], lst[i]\n        return len(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    s = list()\n    for i in lst:\n        if len(i) > len(s):\n            s = i\n    return s\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Smallest = lst[0][0]\n    Smallest_index = 0\n    for i in range(0, len(lst)):\n        if lst[i][0] < smallest:\n            Smallest = lst[i][0]\n            Smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for x in range(len(lst)):\n        min_length = min(min_length, len(lst[x]))\n    return min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 2\n    while(i <= n):\n        if (n%i == 0):\n            count = count + 1\n        i = i + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for divisor in range(1, n+1):\n        if n%divisor==0:\n            divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<0:\n        raise ValueError('n must be a positive integer')\n    else:\n        a=1\n        while a<n:\n            if n%a==0:\n                print(a,'is not a divisor of', n)\n                break\n            else:\n                a+=1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        print(\"Please enter an integer greater than 0.\")\n        return None\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                return i\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    i = n\n    while (i > 0):\n        if (i%2 == 0):\n            divs += 1\n            i = i / 2\n        else:\n            i = i/2\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        raise ValueError(\"Negative Integer is not valid\")\n    elif n == 0:\n        return 1\n    else:\n        return n / len(str(n))\n        \ndef gcd(a, b):\n    '''\n    This function returns the greatest common divisor of two integers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return 1\n    return gcd(b, a % b)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<=1:\n        return 0\n    elif n%2==0:\n        return 1+divisor(n//2)\n    else:\n        return divisor(n/2)+divisor(n//2+1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1, n + 1):\n        if (n % i) == 0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequencies = {}\n    for lst in list1:\n        for ele in lst:\n            if ele in frequencies:\n                frequencies[ele] += 1\n            else:\n                frequencies[ele] = 1\n    return frequencies\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            frequency_dic[list1[i][j]] = frequency_dic.get(list1[i][j], 0) + 1\n    return frequency_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in list1[i]:\n                if list1[i][j] not in freq_dict:\n                    freq_dict[list1[i][j]] = 1\n                else:\n                    freq_dict[list1[i][j]] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in d:\n                d[list1[i][j]] = 0\n            d[list1[i][j]] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequencies = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequencies:\n                frequencies[element] += 1\n            else:\n                frequencies[element] = 1\n    return frequencies\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = dict()\n    for i in range(len(list1)):\n        d[list1[i][0]] = list1[i][1]\n    return d"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    frequency = {}\n    for lst in list1:\n        for el in lst:\n            if el in frequency.keys():\n                frequency[el] += 1\n            else:\n                frequency[el] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        for i in element:\n            if element[i] in frequency_dict.keys():\n                frequency_dict[element[i]] += 1\n            else:\n                frequency_dict[element[i]] = 1\n    return frequency_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) // len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #print(numbers)\n    i=0\n    while i < len(numbers):\n        number=0\n        while i < len(numbers):\n            number+=numbers[i]*(i+1)\n            i+=1\n        #print(number)\n        i+=1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [i*j for i,j in zip(numbers,numbers[1:])]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    def multiply_list(num_list):\n        '''\n        This function takes a list and multiplies each element with its length,\n        and returns a new list with the product of the original list.\n        '''\n        multiplied = []\n        for i in num_list:\n            multiplied.append(i * len(num_list))\n        return multiplied\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul_num = 1\n    for x in range(len(numbers)):\n        mul_num *= numbers[x]\n    return mul_num\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # Your code here\n    i=0\n    list_of_numbers=[]\n    while i<len(numbers):\n        num=numbers[i]\n        for j in range(len(numbers)):\n            if i==j:\n                list_of_numbers.append(num)\n            else:\n                num=num*numbers[j]\n        i=i+1\n    list_of_numbers=list_of_numbers[::-1]\n    return list_of_numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in numbers:\n        n = i\n        for j in range(len(numbers)):\n            if j!= 0:\n                n = n * numbers[j]\n        print(n, end=' ')\n    print()\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [number * numbers for number in numbers]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    int_val = int(n)\n    decimal_val = int_val\n    remainder = 0\n    binary_val = \"\"\n    while decimal_val:\n        remainder = decimal_val % 2\n        decimal_val //= 2\n        binary_val = str(remainder) + binary_val\n    if int_val == 1:\n        binary_val = '1'\n    elif int_val == 0:\n        binary_val = '0'\n    return binary_val\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    binary_output = \"\"\n    \n    for i in range(len(str(n))):\n        binary_output += '0'\n    return binary_output\n        \ndef binary_to_decimal(binary_string): \n    '''\n    Write a function to convert the binary string in a decimal number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    decimal_output = 0\n    \n    for i in range(len(binary_string)):\n        decimal_output += int(binary_string[i]) * 2 ** i\n        \n    return decimal_output\n    \ndef test_decimal_to_binary():\n    assert (decimal_to_binary(6) == '00100')\n    assert (decimal_to_binary(7) == '0010000')\n    assert (decimal_to_binary(15) == '01100111')\n    assert (decimal_to_binary(112) == '1000000000000000000000000000000000000')\n    \n    print('Passed all tests')\n    \ndef test_decimal_to_binary_0():\n    assert (decimal_to_binary(0) == '0000')\n    \n    print('Passed all tests')\n    \ndef test_binary_to_decimal():\n    assert (binary_to_decimal('11') == 6)\n    assert (binary_to_decimal('101') == 15)\n    assert (binary_to_decimal('100000000000001110001001') == 112)\n    print('Passed all tests')\n    \ndef test_binary_to_decimal_0():\n    assert (binary_to_decimal('00') == 0)\n    \n    print('Passed all tests')\n    \ndef test_decimal_to_binary_1():\n    assert (binary_to_decimal('11') == 6)\n    assert (binary_to_decimal('101') == 15)\n    assert (binary_to_decimal('100000000000001110001001') == 112)\n    print('Passed all tests')\n    \ndef test_decimal_to_binary_2():\n    assert (decimal_to_binary(7) == '00100')\n    assert (decimal_to_binary(15) == '01100111')\n    assert (decimal_to_binary(112) == '1000000000000000000000000000000000000')\n    \n    print('Passed all tests')\n    \ndef test_decimal_to_binary_3():\n    assert (decimal_to_binary
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    val = str(n)\n    if n >= 1:\n        val = val + \"1\"\n    else:\n        val = val[1:]\n    return val\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return \"1\" + decimal_to_binary(n/2) + \"0\" if n%2 else \"1\" + decimal_to_binary(n/2)\n    \ndef add_to_binary(binary_string,number):\n    '''\n    Return a string of binary equivalent that is the given number multiplied by binary_string, which is a string of 2^n integers.\n    '''\n    if binary_string[-1] == \"0\":\n        return binary_string + str(number)\n    else:\n        return binary_string[:-1] + str(number)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n > 0:\n        binary.append(str(n%2))\n        n = n//2\n    return ''.join(binary)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Your code here\n    return bin(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s=str(n)\n    l=len(s)\n    binary=\"\"\n    while l>0:\n        if s[l-1]=='0':\n            binary=binary+'0'\n            l=l-1\n        else:\n            binary=binary+'1'\n            l=l-1\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if not isinstance(n, int) or n <= 0: \n        raise ValueError('Decimal must be a non-negative integer') \n    if n < 0: \n        raise ValueError('Decimal must not be negative') \n    base = len(bin(n)) - 2\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_n = bin(n)[2:]\n    if len(bin_n) < 2:\n        return \"0\" + bin_n\n    else:\n        return bin_n\n        \ndef get_num_from_binary(bin_n):\n    '''\n    Write a function that converts a binary number to its decimal equivalent. \n    '''\n    return int(bin_n, 2)\n    \ndef main():\n    while True:\n        print(\"What is the decimal number? \")\n        dec = input()\n        print(\"How many bits do you want to convert the given number to? \")\n        num_b = input()\n        dec_to_bin = decimal_to_binary(int(dec))\n        num_b_to_bin = get_num_from_binary(dec_to_bin)\n        \n        if num_b == num_b_to_bin:\n            print(\"That number is correct\")\n        else:\n            print(\"That number is incorrect\")\n        \n        print(\"Do you want to continue? (y) (n)\")\n        answer = input()\n        if answer == \"y\":\n            continue\n        else:\n            break\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # find the index of the next smallest palindrome\n    for i in range(len(num) - 1):\n        if num[i] < num[i + 1]:\n            break\n    # find the next smallest palindrome\n    j = i + 1\n    while j <= len(num) - 1 and num[j] == num[j - 1]:\n        j += 1\n    return j\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = num\n    n = 1\n    while smallest * n < num:\n        smallest = smallest * n\n        n += 1\n    return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def next_smallest(A):\n        smallest = A[0]\n        next_smallest_index = 0\n        for i in range(1,len(A)):\n            if A[i] < smallest:\n                smallest = A[i]\n                next_smallest_index = i\n        return next_smallest_index\n    \n    def num_to_palindrome(num):\n        n = str(num)\n        i = len(n) - 1\n        smallest = 10**9\n        while i > 0:\n            num = n[i] + num\n            if int(num) < smallest:\n                smallest = int(num)\n            i -= 1\n        return smallest\n    \n    for i in range(len(A)):\n        num = num_to_palindrome(A[i])\n        if num < A[i]:\n            return num\n    return num_to_palindrome(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = abs(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    l=[]\n    n=str(num)\n    for i in range(len(n)-1,0,-1):\n        n=n[:i]+n[i+1:]\n        l.append(int(n))\n    l.sort()\n    return l[-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 10**9:\n        return int(num)\n    else:\n        num_2 = num*2\n        num_1 = num_2*2\n        while num_1 < 10**9:\n            if num_2 > 10**9:\n                return int(num)\n            else:\n                num_2 = num_2*2\n                num_1 = num_2*2\n                if num_1 < 10**9:\n                    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    if num % 2 == 1:\n        return 1\n    while True:\n        num = (num * 3) % (10**9 + 7)\n        if num == 0:\n            return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if (num < 0):\n        sys.exit('Please input an integer.')\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #TODO\n    return next_smallest_palindrome_gen(num, 0, 0)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    left, right = 0, len(str(num)) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if str(num) == str(palin(mid, mid))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(mid, right))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(mid, left))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(mid, 0))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(0, mid))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(left, mid))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(mid, right))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(mid, 0))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(mid, len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), mid))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), right))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)) - 1))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num))))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(0, mid))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), 0))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(0, mid))[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:\n            return int(str(num) + str(mid))\n        elif str(num) == str(palin(len(str(num)), len(str(num)))[::-1])[::-1]:"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Method #1\n    # O(n) time | O(1) space\n    arr = sorted(arr)\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if k == 0:\n        return arr[0]\n    if k > len(arr):\n        return -1\n    \n    return arr[k-1]\n    \ndef reverse_array(arr):\n    '''\n    Reverse the given array.\n    '''\n    \n    for i in range(len(arr)//2):\n        arr[i], arr[-i-1] = arr[-i-1], arr[i]\n    \n    return arr\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    left, right = 0, len(arr)-1\n    \n    #find the rightmost index that is not less than the kth element\n    while right - left + 1 - k < len(arr):\n        mid = (right - left + 1 - k)//2\n        if arr[mid] > k:\n            right = mid - 1\n        else:\n            left = mid\n    return arr[left+k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n    \ndef main():\n    print('1.Quick Sort')\n    print('2.Selection Sort')\n    print('3.Bubble Sort')\n    print('4.Insertion Sort')\n    print('5.Merge Sort')\n    print('6.Quick Sort with Auxiliary Array')\n    print('7.Select Sort')\n    print('8.Merge Sort with Auxiliary Array')\n    print('9.Find kth element')\n    choice = int(input('Enter a choice: '))\n    if choice == 1:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        quickSort(arr, 0, len(arr) - 1)\n        print('Sorted array:', arr)\n        pass\n    if choice == 2:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        selectionSort(arr)\n        print('Sorted array:', arr)\n        pass\n    if choice == 3:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        bubbleSort(arr)\n        print('Sorted array:', arr)\n        pass\n    if choice == 4:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        insertionSort(arr)\n        print('Sorted array:', arr)\n        pass\n    if choice == 5:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        mergeSort(arr)\n        print('Sorted array:', arr)\n        pass\n    if choice == 6:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        quickSortWithAux(arr, 0, len(arr) - 1)\n        print('Sorted array:', arr)\n        pass\n    if choice == 7:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        selectSort(arr)\n        print('Sorted array:', arr)\n        pass\n    if choice == 8:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        mergeSortWithAux(arr, 0, len(arr) - 1)\n        print('Sorted array:', arr)\n        pass\n    if choice == 9:\n        arr = [int(x) for x in input('Enter a sorted array: ').split()]\n        print('The input array is :', arr)\n        print('The number of elements in the array is:', len(arr))\n        kth_element(arr, int(input('Enter kth element: ')))\n        pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 1\n    j = arr[0]\n    if (k == 0):\n        return arr[0]\n    elif (k == 1):\n        return arr[0]\n    while (i <= len(arr)):\n        if arr[i] < j:\n            i += 1\n        else:\n            j = arr[i]\n            i += 1\n    return arr[i-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k==0:\n        return arr[0]\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    kth = arr[k-1]\n    for i in range(k):\n        if arr[i] > kth:\n            break\n        else:\n            arr[i] = arr[i+1]\n    arr[i+1] = kth\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    def my_function(word):\n        '''\n        Take in a string, and return a string of words separated by underscores\n        '''\n        # split the string by \"underscore\"\n        splt = word.split(\"_\")\n        # convert the string to a camel case string\n        return splt[0] + \"\".join(x.title() for x in splt[1:])\n    # convert the given input to camel case string\n    return my_function(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = \"\"\n    capital = False\n    for letter in word:\n        if letter.islower():\n            if letter.isupper():\n                camel += letter.capitalize()\n            elif letter.isupper():\n                capital = True\n            else:\n                camel += letter\n        elif letter.isupper():\n            capital = False\n        else:\n            camel += letter\n    return camel.lower() if capital else camel.upper()"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for char in word:\n        if char.isupper():\n            new_word += char.lower()\n        else:\n            new_word += char.upper()\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    swd = word.split('_')\n    return swd[0] + ''.join([s.capitalize() for s in swd[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string into words using the split method\n    word = word.split()\n    # Return the resulting list\n    return ''.join(word[0].title() + word[1:] for word in word)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    dic = {'A': 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E': 'e', 'F': 'f', 'G': 'g', 'H': 'h', 'I': 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M':'m', 'N': 'n', 'O': 'o', 'P': 'p', 'Q': 'q', 'R': 'r', 'S':'s', 'T': 't', 'U': 'u', 'V': 'v', 'W': 'w', 'X': 'x', 'Y': 'y', 'Z': 'z'}\n    return ''.join(dic[c] for c in word.title())\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = []\n    for i in word:\n        if i.isalpha():\n            new_word.append(i)\n        else:\n            new_word.append(i.lower())\n    camel_word = ''.join(new_word)\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i in word:\n        if i.isalnum():\n            result += i.lower()\n        else:\n            result += \"_\"\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Your code here\n    return word\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    def dfs(n, m, d, res):\n        if(n == m):\n            return res\n        if(d == 1):\n            return 1\n        if(n == 0 or m == 0):\n            return 0\n        if(n < 0 or m < 0):\n            return 0\n        return dfs(n-1, m, d-1, dfs(n, m-1, d, dfs(n-1, m, d, dfs(n, m-1, d, 0))))\n        \n    return dfs(n, m, m, 0)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    soln = []\n    visited = []\n    visited.append(n)\n    soln.append(n)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Step 1\n    if n == m:\n        return 0\n    # Step 2\n    eulerian_num = 1\n    for k in range(n-1):\n        if abs(m - 2*(k+1)) == abs(m - k):\n            eulerian_num = eulerian_num * 2\n        else:\n            break\n    # Step 3\n    # For 3 nodes, we need at least 2 edges\n    # Also, if it's more than 2, then we need to make 2 edges\n    if n >= 3:\n        return eulerian_num * 2 + (2*n-3)\n    return eulerian_num\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m == 2: \n        return n \n    elif n == 0: \n        if m == 0: \n            return n \n        elif m == 1: \n            return 1 \n        elif m == 2: \n            return 1 \n        else: \n            return 2 \n    else: \n        eulerian_num(n-1, m-1)\n        return eulerian_num(n-1, m)\n \n \n \ndef eulerian_number(n): \n    '''\n    Function that returns the Eulerian number of a(n).\n    '''\n    if n == 0: \n        return 1 \n    elif n == 1: \n        return 1 \n    else: \n        return eulerian_number(n-1) + eulerian_number(n-2) \n \n \n \ndef main(): \n    n = int(input()) \n    m = int(input()) \n    print(eulerian_number(n)) \n \n \nif __name__ == '__main__': \n    main() \n "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    temp = 0\n    if n == m: \n        return temp\n    if (n % 2) == 0: \n        x = (n // 2) \n    else: \n        x = (n - 1) // 2 \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            temp += i \n            if (x % 2) == 0: \n                if (n % (2*i)) == (n // (2*i)) - 1: \n                    temp += 1 \n            else: \n                if (n % (2*i)) == (n // (2*i)) + 1: \n                    temp += 1 \n    return temp \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # your code goes here\n    '''\n    If there are two edges in G, create a vertex and edge\n    If there are only two edges, return -1\n    '''\n    if n == m:\n        return n\n    \n    if m == 0 or n == 0:\n        return -1\n    \n    for i in range(0, n+1):\n        for j in range(0, m+1):\n            if i == n or j == m:\n                continue\n            if (n-i) + (m-j) == 0:\n                return i\n            \n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Eulerian Number is number of vertices that are connected in an Eulerian\n    # path of length m from the vertex with label n\n    # from the vertex with label m.\n    # The Eulerian number is a number of vertices such that the graph is\n    # a L, where L is the number of edges in the graph, and each edge connects\n    # vertex n to vertex m with a label L.\n    # For example, the graph on the diagonal connecting the vertices 1 and 2 is\n    # a L = 3, a L = 2, a L = 1, and a L = 0.\n    # Write a program to find the Eulerian number a(n, m).\n    # Hint: How to find the number of edges from vertex with label n to vertex\n    # with label m?\n    #\n    # Return\n    # '''\n    # We need to return the number of edges from vertex with label n to vertex\n    # with label m.\n    #\n    # If there are multiple Eulerian numbers, return any one of them.\n    #\n    # Algorithm\n    # 1. Initialize an empty dictionary.\n    # 2. init an empty dictionary.\n    # 3. Traverse the graph.\n    # 4. If the current vertex is a vertex with label m,\n    # update its dictionary if not.\n    # 5. Else, create a dictionary for the current vertex with label m.\n    # 6.\n    #\n    # @param n the index of the vertex that is to be checked\n    # @param m the index of the vertex that is to be checked\n    # @return the Eulerian number for vertex with label m\n    #\n    # Write an example for a graph with a graph on the diagonal connecting the vertices 1\n    # and 2. The graph on the diagonal connecting the vertices 1 and 2 is a\n    # L = 3, a L = 2, a L = 1, and a L = 0.\n    #\n    # @see eulerian_num(1, 2)\n    # @see eulerian_num(1, 3)\n    # @see eulerian_num(2, 1)\n    # @see eulerian_num(3, 2)\n    # @see eulerian_num(3, 3)\n    #\n    # @return the Eulerian number for vertex with label m\n    def eulerian_num(n, m):\n        # Init an empty dictionary.\n        d = {}\n        # Init an empty dictionary.\n        d[n] = 0\n        # Traverse the graph.\n        for i in range(m, n+1):\n            # Set the previous value of d[i] to -1.\n            d[i] = -1\n        # Traverse the graph.\n        for i in range(m, n+1):\n            # If the current vertex is a vertex with label m,\n            # update its dictionary.\n            if d[i] < 0:\n                d[i] = eulerian_num(n, i)\n        # Return the Eulerian number.\n        return d[m]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    q = [[0, 0, 0, 0],\n          [0, 0, 0, 1],\n          [0, 0, 0, 1],\n          [0, 0, 1, 0]]\n    # a(n, m) = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            q[k][0] += 1\n            q[k][1] += 1\n            q[k][2] += 1\n            q[k][3] += 1\n    q.append([0, 0, 0, 1])\n    q.append([1, 0, 0, 0])\n    q.append([0, 1, 0, 0])\n    q.append([0, 0, 1, 1])\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][2] < q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n            elif q[k][2] > q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n            elif q[k][2] == q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n    # print(q)\n    # a(n, m) = 0\n    q.pop(0)\n    q.pop(0)\n    q.append([1, 0, 0, 0])\n    q.append([0, 1, 0, 0])\n    q.append([0, 0, 1, 1])\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][3] < q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n            elif q[k][3] > q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n            elif q[k][3] == q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][1] < q[k][2]:\n                q[k][1] += 1\n                q[k][2] += 1\n            elif q[k][1] > q[k][2]:\n                q[k][1] += 1\n                q[k][2] += 1\n            elif q[k][1] == q[k][2]:\n                q[k][1] += 1\n                q[k][2] += 1\n    # print(q)\n    # a(n, m) = 0\n    q.pop(0)\n    q.pop(0)\n    q.append([0, 1, 0, 0])\n    q.append([0, 0, 1, 1])\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][0] < q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n            elif q[k][0] > q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n            elif q[k][0] == q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][2] < q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n            elif q[k][2] > q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n            elif q[k][2] == q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][3] < q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n            elif q[k][3] > q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n            elif q[k][3] == q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][0] < q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n            elif q[k][0] > q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n            elif q[k][0] == q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][2] < q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n            elif q[k][2] > q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n            elif q[k][2] == q[k][3]:\n                q[k][2] += 1\n                q[k][3] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][3] < q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n            elif q[k][3] > q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n            elif q[k][3] == q[k][2]:\n                q[k][3] += 1\n                q[k][2] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            k = i - j\n            if q[k][0] < q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n            elif q[k][0] > q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n            elif q[k][0] == q[k][1]:\n                q[k][0] += 1\n                q[k][1] += 1\n    # print(q)\n    # a(n, m) = 0\n    q = ["
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # find the eulerian number\n    ans = 0\n    for i in range(n):\n        ans = ans + i\n    \n    # Check if there are Eulerian numbers in the input\n    for i in range(1, ans+1):\n        if (ans % i) == 0:\n            if i!= n and (ans % i) == 0:\n                return i\n    \n    # If there are no Eulerian numbers\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    A_list = []\n    for i in range(n): \n        if i%2 == 1: \n            A_list.append(i)\n    numbers = A_list\n    check = True\n    while check: \n        check = False\n        for i in range(n-1): \n            if numbers[i] > numbers[i+1]: \n                check = True\n                temp = numbers[i] \n                numbers[i] = numbers[i+1] \n                numbers[i+1] = temp\n    return numbers[0]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 0:\n        return []\n    else:\n        for index, sublist in enumerate(input_list):\n            input_list[index] = sorted(sublist)\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(input_list):\n        j = i+1\n        while j < len(input_list):\n            if input_list[i] < input_list[j]:\n                temp = input_list[i]\n                input_list[i] = input_list[j]\n                input_list[j] = temp\n            j += 1\n        i += 1\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort(key=lambda x: len(x))\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] =='':\n                input_list[i][j] =''\n            else:\n                if input_list[i][j] == '.':\n                    input_list[i][j] = '\\n'\n                else:\n                    input_list[i][j] = input_list[i][j].upper()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_func(sublist):\n        return sorted(sublist, key = lambda x: x.count('.'))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        for i in range(0, len(sorted_sublist) - 1):\n            if sorted_sublist[i] < sorted_sublist[i + 1]:\n                sorted_sublist[i], sorted_sublist[i + 1] = sorted_sublist[i + 1], sorted_sublist[i]\n        #Sort the sublists\n        sorted_sublist = [sorted_sublist[i] for i in range(0, len(sorted_sublist))]\n        input_list = sorted_sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for idx, element in enumerate(sublist):\n            sublist[idx] = element.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Convert list to a list of strings\n    return_list = list(map(str,input_list))\n    #Shuffle the order of each string in the input list\n    random.shuffle(return_list)\n    return return_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if 't' in lst:\n        count = 0\n    else:\n        count = 1\n    for el in lst:\n        if el == 't':\n            count += 1\n    return count\ndef main():\n    print(count(lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(lambda lst: lst.count(True), lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    i=0\n    count=0\n    for x in lst:\n        if x:\n            i+=1\n        else:\n            count+=1\n    return (i,count)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #Example:\n    #>>> count([1,1,1,0,1,1,0,1,0,0,0,1])\n    #6\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    import numpy as np\n    def counttrue(lst):\n        return lst.count(True)\n    counttruelst = [counttrue(lst) for lst in lst]\n    return np.array(counttruelst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t=0\n    for i in lst:\n        if i == True:\n            t+=1\n    return t\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for ele in lst:\n        if ele:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in test_list:\n        test_tup.append(x)\n    return test_tup\n    \ndef get_shapes_from_list(test_list, test_tup):\n    '''\n    Write a function to return the shape of the given list.\n    '''\n    shapes = []\n    for x in test_list:\n        shapes.append(len(x))\n    for x in test_tup:\n        shapes.append(len(x))\n    return shapes\n    \ndef calc_average(test_tup):\n    '''\n    Write a function to return the average of the given tuples.\n    '''\n    return sum(test_tup)/len(test_tup)\n    \ndef get_list_tup(test_list):\n    '''\n    Write a function to return the tuple of the given list.\n    '''\n    return tuple(test_list)\n    \ndef print_list(test_list):\n    '''\n    Write a function to print the given list.\n    '''\n    for x in test_list:\n        print(x)\n    return None\n    \ndef main():\n    '''\n    Write a function to print the shapes of the first four test lists.\n    '''\n    \n    test_list = get_list_tup([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8, 9)])\n    test_tup = get_shapes_from_list(test_list, (1, 2, 3, 4))\n    print(test_list)\n    print(test_tup)\n    \n    print(calc_average((1, 2, 3, 4, 5)))\n    print_list(test_list)\n    print(test_tup)\n    \n    print(\"The list is: \")\n    print_list(test_list)\n    print(\"The tuple is:\")\n    print_tup = get_shapes_from_list(test_tup, (1, 2, 3, 4))\n    print(test_tup)\n    print(test_list)\n    \nif __name__ == \"__main__\":\n    main()\n    "
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"Add lists.\")\n    print(test_list)\n    print(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup_list = []\n    tup_list.append(test_list)\n    tup_list.append(test_tup)\n    return tup_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list)!= len(test_tup):\n        return 'Wrong length'\n    else:\n        for i in range(len(test_list)):\n            test_tup.append(test_list[i])\n        return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    \n    return test_list\n    \n    \n    \n    \n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in test_tup:\n        test_list.append(x)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    for list_item in test_list:\n        test_tup.append(list_item)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for pair in test_tup:\n        test_list.append(pair)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            merged.append(num1.pop(0))\n        elif num1[0] > num2[0]:\n            merged.append(num2.pop(0))\n        else:\n            merged.append(num3.pop(0))\n    \n    while num1:\n        merged.append(num1.pop(0))\n    while num2:\n        merged.append(num2.pop(0))\n    while num3:\n        merged.append(num3.pop(0))\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        if num1[0] < num2[0]:\n            arr.append(num1.pop(0))\n        else:\n            arr.append(num2.pop(0))\n    if num1!= []:\n        arr.extend(num1)\n    if num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_old(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        if num1[0] < num2[0]:\n            arr.append(num1.pop(0))\n        else:\n            arr.append(num2.pop(0))\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_old2(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        if num1[0] < num2[0]:\n            arr.append(num1.pop(0))\n        else:\n            arr.append(num2.pop(0))\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_old3(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        if num1[0] < num2[0]:\n            arr.append(num1.pop(0))\n        else:\n            arr.append(num2.pop(0))\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_old4(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        if num1[0] < num2[0]:\n            arr.append(num1.pop(0))\n        else:\n            arr.append(num2.pop(0))\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_old5(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        if num1[0] < num2[0]:\n            arr.append(num1.pop(0))\n        else:\n            arr.append(num2.pop(0))\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_old6(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        if num1[0] < num2[0]:\n            arr.append(num1.pop(0))\n        else:\n            arr.append(num2.pop(0))\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        arr.append(max(num1[0],num2[0]))\n        num1.pop(0)\n        num2.pop(0)\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new2(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        arr.append(max(num1[0],num2[0]))\n        num1.pop(0)\n        num2.pop(0)\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new3(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        arr.append(max(num1[0],num2[0]))\n        num1.pop(0)\n        num2.pop(0)\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new4(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        arr.append(max(num1[0],num2[0]))\n        num1.pop(0)\n        num2.pop(0)\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new5(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        arr.append(max(num1[0],num2[0]))\n        num1.pop(0)\n        num2.pop(0)\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new6(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        arr.append(max(num1[0],num2[0]))\n        num1.pop(0)\n        num2.pop(0)\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new7(num1,num2,num3):\n    '''\n    This is a bit of a clever solution to merge_sorted_list.\n    '''\n    arr=[]\n    while num1!= [] and num2!= []:\n        arr.append(min(num1[0],num2[0]))\n        num1.pop(0)\n        num2.pop(0)\n    while num1!= []:\n        arr.extend(num1)\n    while num2!= []:\n        arr.extend(num2)\n    return arr\ndef merge_sorted_list_new8(num1,nu"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    for i in range(0,len(num1)):\n        for j in range(0,len(num2)):\n            if num1[i] < num2[j] < num3:\n                merge_list.append(num1[i])\n                num1.pop(i)\n                num2.pop(j)\n                num3.pop(j)\n                break\n    merge_list += num2\n    merge_list += num3\n    return merge_list\ndef is_better(x,y):\n    '''\n    Write a function to check if two lists are better than each other.\n    '''\n    if len(x)<len(y):\n        return False\n    elif len(x)==len(y) and (x==list(range(1,len(x)+1)) or x==list(range(len(x)+1,len(x)+len(y)))):\n        return True\n    else:\n        return False\ndef merge_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    merge_list = []\n    for i in range(0,len(num1)):\n        if i<len(num2):\n            if is_better(num1[i],num2[i]):\n                merge_list.append(num1[i])\n                num1.pop(i)\n                num2.pop(i)\n                break\n    merge_list += num2\n    merge_list += num1\n    return merge_list\ndef bubble_sort_simple(arr):\n    '''\n    Write a function to perform a bubble sort on an array of integers.\n    '''\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j]>arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n    return arr\ndef bubble_sort_recursive(arr):\n    '''\n    Write a function to perform a bubble sort on an array of integers.\n    '''\n    def swap(a,b,arr):\n        '''\n        Swap first and last element of array.\n        '''\n        arr[a],arr[b]=arr[b],arr[a]\n    def bubble_sort_recursive(arr):\n        '''\n        Return sorted array.\n        '''\n        def bubble_sort_recursive(arr,left=0,right=None):\n            '''\n            Recursive bubble sort implementation.\n            '''\n            if right is None:\n                right=len(arr)-1\n            for i in range(left,right):\n                if arr[i]>arr[i+1]:\n                    swap(i,i+1,arr)\n            if left<right:\n                for i in range(left,right):\n                    swap(i,i+1,arr)\n            return arr\n        return bubble_sort_recursive(arr,0,len(arr)-1)\n    def bubble_sort_heap(arr):\n        '''\n        Return sorted array.\n        '''\n        if len(arr)==1:\n            return arr\n        return bubble_sort_heap(arr[:len(arr)//2])+[arr[len(arr)//2]]+bubble_sort_heap(arr[len(arr)//2:])\n    return bubble_sort_heap(arr)\ndef merge_sort(arr):\n    '''\n    Write a function to sort an unsorted array in linear time.\n    '''\n    def sort(arr,start,end):\n        if end-start<1:\n            return\n        if end-start==1:\n            return\n        mid = (start+end)//2\n        sort(arr,start,mid)\n        sort(arr,mid+1,end)\n        return arr\n    if len(arr)==0:\n        return []\n    arr=sort(arr,0,len(arr)-1)\n    return arr\ndef insert_sort(arr):\n    '''\n    Write a function to sort an unsorted array in linear time.\n    '''\n    def sort(arr,start,end):\n        if end-start<1:\n            return\n        if end-start==1:\n            return\n        mid = (start+end)//2\n        sort(arr,start,mid)\n        sort(arr,mid+1,end)\n        temp=arr[mid]\n        arr[mid]=arr[end]\n        arr[end]=temp\n    if len(arr)==0:\n        return []\n    arr=sort(arr,0,len(arr)-1)\n    return arr\ndef selection_sort(arr):\n    '''\n    Write a function to sort an unsorted array in linear time.\n    '''\n    def sort(arr,start,end):\n        if end-start<1:\n            return\n        if end-start==1:\n            return\n        index=start+end-1\n        min=arr[start]\n        for i in range(start+1,end+1):\n            if arr[i]<min:\n                min=arr[i]\n                index=i\n        arr[start],arr[index]=arr[index],arr[start]\n        sort(arr,start,index-1)\n        sort(arr,index+1,end)\n    if len(arr)==0:\n        return []\n    arr=sort(arr,0,len(arr)-1)\n    return arr\ndef quick_sort(arr):\n    '''\n    Write a function to sort an unsorted array in linear time.\n    '''\n    def sort(arr,start,end):\n        if end-start<1:\n            return\n        if end-start==1:\n            return\n        p=arr[start]\n        i=start+1\n        j=end\n        while True:\n            while i<j:\n                if arr[i]<p:\n                    arr[i],arr[j]=arr[j],arr[i]\n                    i+=1\n                j-=1\n            while i<j:\n                if arr[j]>p:\n                    arr[i],arr[j]=arr[j],arr[i]\n                    j-=1\n                j-=1\n            i+=1\n            j-=1\n    if len(arr)==0:\n        return []\n    arr=sort(arr,0,len(arr)-1)\n    return arr\ndef quick_sort_recursive(arr):\n    '''\n    Write a function to sort an unsorted array in linear time.\n    '''\n    def sort(arr,start,end):\n        if end-start<1:\n            return\n        if end-start==1:\n            return\n        p=arr[start]\n        i=start+1\n        j=end\n        while True:\n            while i<j:\n                if arr[i]<p:\n                    arr[i],arr[j]=arr[j],arr[i]\n                    i+=1\n                j-=1\n            while i<j:\n                if arr[j]>p:\n                    arr[i],arr[j]=arr[j],arr[i]\n                    i+=1\n                j-=1\n            i+=1\n            j-=1\n    if len(arr)==0:\n        return []\n    arr=sort(arr,0,len(arr)-1)\n    return arr\ndef shell_sort(arr):\n    '''\n    Write a function to sort an unsorted array in linear time.\n    '''\n    def sort(arr,start,end):\n        if end-start<1:\n            return\n        if end-start==1:\n            return\n        gap=arr[start]\n        for i in range(start,len(arr)-1):\n            while gap<arr[i+1] and i>=0:\n                arr[i],arr[i+1]=arr[i+1],arr[i]\n                i-=1\n            gap=arr[i+1]\n        arr[start],arr[-1]=arr[-1],arr[start]\n        sort(arr,start,end-1)\n        sort(arr,start+gap,end)\n    if len(arr)==0:\n        return []\n    arr=sort(arr,"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=j=0\n    result=[]\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    result += num1[i:]\n    result += num2[j:]\n    return result\ndef merge_list(list1,list2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    result=[]\n    while i<len(list1) and j<len(list2):\n        if list1[i]<list2[j]:\n            result.append(list1[i])\n            i+=1\n        else:\n            result.append(list2[j])\n            j+=1\n    result += list1[i:]\n    result += list2[j:]\n    return result\ndef merge_lists(list1,list2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    result=[]\n    while i<len(list1) and j<len(list2):\n        if list1[i]<list2[j]:\n            result.append(list1[i])\n            i+=1\n        else:\n            result.append(list2[j])\n            j+=1\n    result += list1[i:]\n    result += list2[j:]\n    return result\ndef split_into_three(list):\n    '''\n    Write a function to split a list into three groups.\n    '''\n    if len(list)%3==0:\n        return list\n    else:\n        return [list[i:i+3] for i in range(0,len(list),3)]\ndef merge_lists(list1,list2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    result=[]\n    while i<len(list1) and j<len(list2):\n        if list1[i]<list2[j]:\n            result.append(list1[i])\n            i+=1\n        else:\n            result.append(list2[j])\n            j+=1\n    result += list1[i:]\n    result += list2[j:]\n    return result\ndef merge_lists(list1,list2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    result=[]\n    while i<len(list1) and j<len(list2):\n        if list1[i]<list2[j]:\n            result.append(list1[i])\n            i+=1\n        else:\n            result.append(list2[j])\n            j+=1\n    result += list1[i:]\n    result += list2[j:]\n    return result\ndef merge_list(list1,list2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i])<=len(list2):\n            result.append(list1[i])\n            result.append(list2[i])\n        elif len(list2[i])<=len(list1):\n            result.append(list2[i])\n            result.append(list1[i])\n        else:\n            break\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    result=[]\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    result += num1[i:]\n    result += num2[j:]\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    result = []\n    for i in range(len(num1)):\n        if len(num1[i])<=len(num2):\n            result.append(num1[i])\n            result.append(num2[i])\n        elif len(num2[i])<=len(num1):\n            result.append(num2[i])\n            result.append(num1[i])\n        else:\n            break\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    result = []\n    i=0\n    j=0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    result += num1[i:]\n    result += num2[j:]\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    result = []\n    i=0\n    j=0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    result += num1[i:]\n    result += num2[j:]\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    result=[]\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    result += num1[i:]\n    result += num2[j:]\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    result = []\n    i=0\n    j=0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    result += num1[i:]\n    result += num2[j:]\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    result = []\n    i=0\n    j=0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    result += num1[i:]\n    result += num2[j:]\n    return result\ndef merge_two_sorted_lists(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    result = []\n    i=0\n    j=0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.appen"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) > len(num2):\n        num1.extend(num2)\n    elif len(num2) > len(num1):\n        num2.extend(num1)\n    elif len(num1) == len(num2):\n        num1.extend(num2)\n    else:\n        num1.extend(num2)\n        num2.extend(num1)\n    print(num1)\n    print(num2)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            sorted_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            sorted_list.append(num2[j])\n            j += 1\n        else:\n            sorted_list.append(num3[k])\n            k += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    heapq.heappush(num1,num3)\n    heapq.heappush(num2,num3)\n    heapq.heappush(num3,num2)\n    return num1,num2,num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = [num1[0],num1[1],num1[2]]\n    l2 = [num2[0],num2[1],num2[2]]\n    l3 = [num3[0],num3[1],num3[2]]\n    \n    l1.sort()\n    l2.sort()\n    l3.sort()\n    \n    l1_h = len(l1)\n    l2_h = len(l2)\n    l3_h = len(l3)\n    \n    i1 = 0\n    i2 = 0\n    i3 = 0\n    \n    s = []\n    \n    while i1<l1_h and i2<l2_h and i3<l3_h:\n        if l1[i1]<l2[i2]<l3[i3]:\n            s.append(l1[i1])\n            s.append(l2[i2])\n            s.append(l3[i3])\n            i1+=1\n            i2+=1\n            i3+=1\n        elif l1[i1]>l2[i2]>l3[i3]:\n            s.append(l1[i1])\n            i1+=1\n        else:\n            s.append(l2[i2])\n            i2+=1\n    \n    if i1<l1_h:\n        for i in range(i1,l1_h):\n            s.append(l1[i])\n    if i2<l2_h:\n        for i in range(i2,l2_h):\n            s.append(l2[i])\n    if i3<l3_h:\n        for i in range(i3,l3_h):\n            s.append(l3[i])\n    return s\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    sorted_list = []\n    for x in num1:\n        heapq.heappush(heap, x)\n    for x in num2:\n        heapq.heappush(heap, x)\n    for x in num3:\n        heapq.heappush(heap, x)\n    \n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    n = len(num1)\n    m = len(num2)\n    n1 = len(num3)\n    n2 = len(num3)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # f(a,b) = f(a%2,b%2)\n    # \n    # if n is odd then odd number, and the function return 1.\n    # if n is even number, it return 0.\n    # \n    # the inverse of f(2,2) is 0.\n    # the inverse of f(4,4) is 1.\n    # the inverse of f(8,8) is 0.\n    # the inverse of f(16,16) is 1.\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ls = []\n    for i in range(n):\n        ls.append(s[i])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n == 0):\n        return 0\n    elif(n%2 == 1):\n        return odd_Equivalent(s, n//2) + 1\n    elif(n%2 == 0):\n        return odd_Equivalent(s, n//2) + odd_Equivalent(s, n//2 + 1) \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    occurence = 0\n    for i in range(n):\n        for j in range(i+1):\n            if s[i] == s[j]:\n                occurence += 1\n    if occurence % 2 == 1:\n        return odd_Equivalent(s,n)\n    else:\n        return odd_Equivalent(s,n) + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n,2):\n        if s[i] % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if s[i-1] == '0':\n            count += 1\n        elif s[i-1] == '1':\n            count += 2\n    print(\"Even numbers: \", count)\n    print(\"Odd numbers: \", n-count)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    n = int(n)\n    n_list = list(str(n))\n    s = list(str(s))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Note:\n    #\n    # Rotating a string with an odd number of times will result in a rotated version of the string (no matter how it is rotated)\n    #\n    # Examples:\n    #\n    # odd_Equivalent('abc', 2) # returns 2\n    # odd_Equivalent('abcd', 3) # returns 3\n    # odd_Equivalent('abcdef', 5) # returns 7\n    # odd_Equivalent('abcefg', 7) # returns 2\n    #\n    # Input\n    #\n    # A string, s, of length n, that may contain digits 0-9, 0, 1, and 2.\n    #\n    # Output\n    #\n    # An integer, an odd number of numbers with an odd value when rotating the string.\n    #\n    # Examples:\n    #\n    # odd_Equivalent('abc', 2) # returns 2\n    # odd_Equivalent('abcd', 3) # returns 3\n    # odd_Equivalent('abcefg', 7) # returns 7\n    #\n    # n = 5\n    # n = 7\n    # n = 11\n    # n = 18\n    # n = 21\n    # n = 100\n    #\n    # odd_Equivalent(str, n) # returns 2\n    # odd_Equivalent('abcd', 3) # returns 3\n    # odd_Equivalent('abcefg', 7) # returns 7\n    #\n    #\n    # Hints\n    #\n    # We have two functions that take in an argument of the same type.  It can be used to check whether a string is a valid base64 string.\n    #\n    # we need to use a helper function to see if the string is a valid base64 string.\n    #\n    # 0 to 9.\n    #\n    # string_as_int('abcdef') # returns 1\n    # string_as_int('abcef') # returns 2\n    # string_as_int('abcefg') # returns 7\n    #\n    # 0 to 9.\n    #\n    # string_as_int('abcdefghijklmnopqrstuvwxyz') # returns 1\n    # string_as_int('abcefg') # returns 5\n    #\n    # 0 to 9.\n    #\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 8\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 10\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 11\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 12\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 13\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 14\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 15\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 16\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 17\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 18\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 19\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 20\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 21\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 22\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 23\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 24\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 25\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 26\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 27\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 28\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 29\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 30\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 31\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 32\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 33\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 34\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 35\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 36\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 37\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 38\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 39\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 40\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 41\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 42\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 43\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 44\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 45\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 46\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 47\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 48\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 49\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 50\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 51\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 52\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 53\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 54\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 55\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 56\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 57\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 58\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 59\n    # string_as_int('7abcdefghijklmnopqrstuvwxyz') # returns 60\n    # string_as_int('7abcdefghijk"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = str(s)\n    ans = 0\n    for i in s:\n        if (ord(i)%2==1):\n            ans += 2\n    return ans\ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    s = str(s)\n    ans = 0\n    for i in s:\n        if (ord(i)%2==0):\n            ans += 2\n    return ans\ndef create_s(n):\n    s = ''\n    while n>0:\n        s = chr(65+n%26) + s\n        n = n//26\n    return s\ndef find_even(s,n):\n    ans = 0\n    for i in range(0,n+1):\n        s = create_s(i)\n        ans = (odd_Equivalent(s,n))\n    return ans\ndef find_odd(s,n):\n    ans = 0\n    for i in range(0,n+1):\n        s = create_s(i)\n        ans = (even_Equivalent(s,n))\n    return ans\ndef is_reversed(s):\n    ans = 0\n    for i in range(0,len(s)):\n        if ord(s[i])%2==0:\n            ans += 1\n    return ans\ndef is_even(s):\n    ans = 0\n    for i in range(0,len(s)):\n        if ord(s[i])%2==0:\n            ans += 1\n    return ans\ndef count_n(s):\n    n=0\n    for i in range(0,len(s)):\n        if is_reversed(s[i]):\n            n += 2\n        elif is_even(s[i]):\n            n += 1\n        else:\n            n += 1\n    return n\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for index, value in enumerate(nestedlist[0]):\n        for item in nestedlist[1:]:\n            if value == item[index]:\n                common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        for i in range(0, len(nestedlist)):\n            if i!= 0 and i!= len(nestedlist) - 1:\n                if nestedlist[i] == nestedlist[i - 1] and nestedlist[i] == nestedlist[i + 1]:\n                    continue\n            else:\n                if nestedlist[i] == nestedlist[i - 1] or nestedlist[i] == nestedlist[i + 1]:\n                    continue\n            return nestedlist[i]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [x for x in nestedlist if x]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def is_in_list(nested_list):\n        '''\n        Returns True if any element of the given nested list is in the input list.\n        '''\n        return any(any(item in nested_list for item in nested_list))\n    \n    return is_in_list(nestedlist[0]) and is_in_list(nestedlist[1:])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_nested_list = []\n    # nested_list_1 = ['a', ['b'], 'c']\n    # nested_list_2 = ['a', ['b', 'c']]\n    # nested_list_3 = ['a', ['b', 'c'], ['d', 'e']]\n    # nested_list_4 = ['a', 'b', ['c'], 'd']\n    # nested_list_5 = ['a', 'b', ['c'], 'd', 'e']\n    for nestedlist in nestedlist:\n        if nestedlist not in common_nested_list:\n            common_nested_list.append(nestedlist)\n    # print(common_nested_list)\n    return common_nested_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [e for sublist in nestedlist for e in sublist]\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = list(set(nestedlist).intersection(*nestedlist))\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [nestedlist[0]]\n    # Can add something here to find the common elements in nested lists\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lst = []\n    for l in nestedlist:\n        for el in l:\n            if el in lst:\n                continue\n            lst.append(el)\n    return lst\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist)==0:\n        return []\n    if len(nestedlist)==1:\n        return nestedlist[0]\n    if len(nestedlist)==2:\n        return nestedlist[0] +'and'+ nestedlist[1]\n    if len(nestedlist)==3:\n        return nestedlist[0] +'and'+ nestedlist[1] +'and'+ nestedlist[2]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == None:\n        return True\n    else:\n        if len(list1) == 0:\n            return True\n        else:\n            return False\n    \n    \ndef not_empty_dit(list1):\n    '''\n    Write a function to check whether a dictionary is not empty or not.\n    '''\n    if list1 == None:\n        return False\n    else:\n        if len(list1)!= 0:\n            return False\n        else:\n            return True\n    \n    \ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    \n    \ndef is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    \n    \ndef is_string(s):\n    try:\n        str(s)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    \n    \ndef is_list(s):\n    try:\n        list(s)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    \n    \ndef not_list(s):\n    '''\n    Write a function to check whether a list or dictionary is not empty or not.\n    '''\n    if list(s) == None or not is_list(s):\n        return False\n    else:\n        return True\n    \n    \ndef to_upper(s):\n    '''\n    Write a function to convert a string to all uppercase.\n    '''\n    return s.upper()\n    \n    \ndef is_upper(s):\n    '''\n    Write a function to check whether a string is all uppercase or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif not is_string(s):\n        return False\n    elif not is_number(s):\n        return False\n    elif not is_integer(s):\n        return False\n    elif not is_list(s):\n        return False\n    \n    \ndef not_upper(s):\n    '''\n    Write a function to check whether a string is all lowercase or not.\n    '''\n    return not_string(s) and not is_number(s) and not is_integer(s) and not is_list(s)\n    \n    \ndef is_string_containing_symbol(s, symbol):\n    '''\n    Write a function to check whether a string contains a symbol.\n    '''\n    return s.count(symbol) > 0\n    \n    \ndef not_string_containing_symbol(s, symbol):\n    '''\n    Write a function to check whether a string does not contain a symbol.\n    '''\n    return not is_string_containing_symbol(s, symbol) and not not_number(s) and not not_symbol(s) and not not_list(s)\n    \n    \ndef is_symbol(s):\n    '''\n    Write a function to check whether a string is a symbol or not.\n    '''\n    return s == \"&\" or s == \"*\" or s == \":\" or s == \",\"\n    \n    \ndef not_symbol(s):\n    '''\n    Write a function to check whether a string does not contain a symbol.\n    '''\n    return not is_symbol(s) and not not_number(s) and not not_symbol(s) and not not_list(s)\n    \n    \ndef not_number(s):\n    '''\n    Write a function to check whether a string does not contain a number or not.\n    '''\n    return not is_integer(s) and not not_upper(s) and not not_list(s)\n    \n    \ndef not_upper_number(s):\n    '''\n    Write a function to check whether a string does not contain a number or not.\n    '''\n    return not is_upper(s) and not not_upper_number(s) and not not_number(s) and not not_list(s)\n    \n    \ndef not_list_number(s):\n    '''\n    Write a function to check whether a string does not contain a number or not.\n    '''\n    return not is_integer(s) and not not_upper(s) and not not_list(s) and not not_number(s) and not not_symbol(s)\n    \n    \ndef not_upper_list_number(s):\n    '''\n    Write a function to check whether a string does not contain a number or not.\n    '''\n    return not is_upper(s) and not not_upper_number(s) and not is_integer(s) and not not_upper_list(s) and not is_list(s)\n    \n    \ndef is_string_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string contains a symbol.\n    '''\n    return s.count(symbol) > 0\n    \n    \ndef not_string_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string does not contain a symbol.\n    '''\n    return not is_string_containing_all(s, symbol) and not not_number(s) and not not_symbol(s) and not not_list(s)\n    \n    \ndef not_number_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string does not contain a number.\n    '''\n    return not is_number(s) and not not_upper(s) and not not_list(s) and not not_symbol(s) and not not_upper_number(s)\n    \n    \ndef not_upper_number_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string does not contain a number.\n    '''\n    return not is_upper(s) and not not_upper_number(s) and not not_number(s) and not not_symbol(s) and not not_upper_list(s)\n    \n    \ndef not_upper_list_number_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string does not contain a number.\n    '''\n    return not is_upper(s) and not not_upper_number(s) and not is_integer(s) and not not_upper_list(s) and not is_list(s)\n    \n    \ndef not_upper_list_symbol_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string contains a symbol.\n    '''\n    return not is_upper(s) and not not_upper_number(s) and not is_integer(s) and not not_upper_list(s) and not not_symbol(s)\n    \n    \ndef not_upper_list_number_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string contains a number.\n    '''\n    return not is_upper(s) and not not_upper_number(s) and not is_integer(s) and not not_upper_list(s) and not is_list(s)\n    \n    \ndef is_symbol_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string contains a symbol.\n    '''\n    return s.count(symbol) > 0\n    \n    \ndef not_symbol_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string does not contain a symbol.\n    '''\n    return not is_symbol_containing_all(s, symbol) and not not_number(s) and not not_symbol(s) and not not_list(s)\n    \n    \ndef not_number_containing_all(s, symbol):\n    '''\n    Write a function to check whether a string does not contain a number.\n    '''\n    return not is_number(s) and not not_upper(s) and not not_list(s) and not not_symbol(s) and not not_upper_number(s)\n    \n    \ndef not_upper_number_containing_all(s, symbol):\n    '''\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for key,value in list1[i].items():\n            if not key in list1[i]:\n                return False\n            \n    return True\n    \n    "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j == None:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i] is not None:\n            if list1[i] == {}:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x)>0:\n            return False\n    return True\n    \ndef elements_in_dit(list1):\n    '''\n    Write a function to check whether all values of a dictionary are present or not.\n    '''\n    for i in range(0,len(list1)):\n        if len(list1[i])>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # empty = True\n    for dict1 in list1:\n        if dict1 == {}:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for key, value in i.items():\n            if value == 0:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all([item == {} for item in list1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    new_tuple = []\n    for i in nums:\n        new_tuple.append(int(i))\n    return new_tuple[0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for num in nums:\n        int_list.append(num)\n    return int(sum(int_list))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(num for num in nums if num > 0)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #return int(nums[0]) * 10 + int(nums[1])\n    return int(''.join(map(str,nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    s = ''\n    for i in range(0, len(nums)):\n        s += str(nums[i])\n    return int(s)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n    return nums[0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    temp = 0\n    for i in nums:\n        temp = temp + i\n    return temp\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [test_list[i].split(';') for i in range(len(test_list))]\n    return [float(i[0]) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # if a list contains a single element\n    if len(test_list) == 1:\n        # convert it to a list\n        test_list = list(map(float, test_list))\n        # return the result\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            new_list.append([float(x) for x in test_list[i][j]])\n    \n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for list_item in test_list:\n        list_item = [float(item) for item in list_item]\n        result_list.append(list_item)\n    return result_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    def convert_to_float(list_of_lists):\n        '''\n        Convert each element in the list to float type, and return that list.\n        '''\n        result = []\n        for list_element in list_of_lists:\n            for element in list_element:\n                result.append(float(element))\n        return result\n    \n    return convert_to_float(test_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convert_list = []\n    for i in test_list:\n        for j in i:\n            convert_list.append(j)\n    convert_list = list(set(convert_list))\n    float_list = []\n    for i in convert_list:\n        float_list.append(float(i))\n    return(float_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    assert type(test_list) == list, \"Input is not a list\"\n    assert len(test_list) > 0, \"List is empty\"\n    assert type(test_list[0]) == list, \"List[0] is not a list\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            assert type(test_list[i][j]) == list, \"Each list in the list is not a list\"\n    assert len(test_list) > 1, \"List of lists is too short\"\n    assert all(isinstance(el, float) for el in test_list[0]), \"Each element is not a float\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if not isinstance(test_list[i][j], float):\n                test_list[i][j] = list(map(float, test_list[i][j]))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # initializing variables\n    list_elements = []\n    float_elements = []\n    # looping over the list\n    for element in test_list:\n        if element[0] == 'None':\n            float_elements.append(element)\n        else:\n            list_elements.append(element)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 0:\n        return []\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    temp_list = string.split(' ')\n    return temp_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    splitter = \" \" \n    return [string.strip() for string in splitter.join(string.split()).split(splitter)] \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [item.strip() for item in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [x for x in string.split(' ')]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    for i in range(0, len(string), 2):\n        result.append(string[i:i+2])\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def part(arr, target):\n        if arr == []:\n            return False\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # assuming the array is sorted\n    if len(arr) == 1:\n        return arr[0]\n    # for loop for traversing the array in a sorted manner\n    for i in range(len(arr)):\n        # for every element in the array\n        for j in range(i,len(arr)):\n            if arr[j] == arr[i]:\n                # if both the arrays are equal, return that element\n                return arr[i]\n        # if not equal, there is more than one element in the array,\n        # so return the smallest one\n        return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0,len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        return -1\n    \n    \n    \n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    h = len(arr)\n    low = 0\n    high = high = 0\n    while(high < h):\n        if arr[high] == arr[high + 1]:\n            high += 1\n        elif arr[high] > arr[high + 1]:\n            arr[high], arr[high + 1] = arr[high + 1], arr[high]\n            high += 2\n        else:\n            high += 1\n    if high == 0:\n        return -1\n    else:\n        while(low <= high):\n            if arr[low] == arr[low + 1]:\n                low += 1\n            elif arr[low] < arr[low + 1]:\n                arr[low], arr[low + 1] = arr[low + 1], arr[low]\n                low += 2\n            else:\n                high -= 1\n        return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    index=0\n    arr_size=len(arr)\n    while index<arr_size:\n        count=0\n        while count<arr_size-index:\n            if arr[count]==arr[index]:\n                count+=1\n            else:\n                break\n        if count==arr_size-index:\n            index=index\n        else:\n            index+=1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # your code goes here\n    count = 0\n    # create a list of the elements in the array\n    # initialize the count as 1 (we can say it is 1 as an element that appears only once)\n    # Iterate through the array, if it's not already in the list, it's a new element, so increment the count\n    # if the count is the same as the first item in the array, return the first item in the list\n    # if the count is not the same as the first item in the array, return the last item in the list\n    # else, return the first item in the list\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while(i<len(arr)):\n        j = i+1\n        while(j<len(arr)):\n            if(arr[i] == arr[j]):\n                print(arr[j],arr[i])\n                j = j + 1\n            else:\n                j = j + 1\n        i = i+1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n==0 or n==1:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return arr[count-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 0:\n        return -1\n    for i in range(len(arr)):\n        count = 0\n        if arr[i]!= arr[count]:\n            count += 1\n        if count == 1:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    result = [list1[0]]\n    for i in range(1, len(list1)):\n        temp = max([list1[i][0] * result[i-1], list1[i][1] * result[i-1]])\n        result.append(temp)\n    return max(result)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    max_index = None\n    for index in range(len(list1)):\n        for i in range(index+1, len(list1)):\n            prod = list1[index][1] * list1[i][1]\n            if prod > max_prod:\n                max_prod = prod\n                max_index = index\n    if max_prod > 0:\n        print('product ='+ str(max_prod))\n        print('position ='+ str(max_index))\n    else:\n        print('product = 0')\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return list1[0][0] * list1[0][1]\n    else:\n        return max(list1[0][0]*list1[0][1], list1[0][1]*list1[1][0]*list1[1][1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = None\n    lst = []\n    # loop through the list\n    for i in list1:\n        if i not in lst:\n            lst.append(i)\n    # loop through the list\n    for i in lst:\n        for j in lst:\n            # find the maximum product between two tuples\n            if i > j:\n                result = i * j\n    print(result)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if(product > max_product):\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in list1:\n        for j in list1:\n            if i > j and i > max:\n                max = i\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    i=0\n    j=0\n    while i<len(list1)-1:\n        if list1[i][0]<list1[i+1][0] and list1[i][1]<list1[i+1][1]:\n            max_product=list1[i][0]*list1[i+1][0]\n            i=i+1\n        elif list1[i][0]<list1[i+1][1] and list1[i][1]<list1[i+1][0]:\n            max_product=list1[i][1]*list1[i+1][0]\n            i=i+1\n        elif list1[i][0]<list1[i+1][1] and list1[i][1]<list1[i+1][0]:\n            max_product=list1[i][0]*list1[i+1][1]\n            j=j+1\n        elif list1[i][0]<list1[i+1][0] and list1[i][1]<list1[i+1][1]:\n            max_product=list1[i][1]*list1[i+1][1]\n            j=j+1\n        elif list1[i][0]<list1[i+1][1] and list1[i][1]<list1[i+1][0]:\n            max_product=list1[i][0]*list1[i+1][1]\n            j=j+1\n        elif list1[i][0]<list1[i+1][0] and list1[i][1]<list1[i+1][1]:\n            max_product=list1[i][0]*list1[i+1][0]\n            i=i+1\n        else:\n            max_product=list1[i][1]*list1[i+1][1]\n            i=i+1\n    if j==0:\n        return max_product\n    else:\n        return max_product/j\n    \ndef min_product_tuple(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    min_product=0\n    i=0\n    j=0\n    while i<len(list1)-1:\n        if list1[i][0]>list1[i+1][0] and list1[i][1]>list1[i+1][1]:\n            min_product=list1[i][0]*list1[i+1][0]\n            i=i+1\n        elif list1[i][0]>list1[i+1][1] and list1[i][1]>list1[i+1][0]:\n            min_product=list1[i][1]*list1[i+1][0]\n            i=i+1\n        elif list1[i][0]>list1[i+1][1] and list1[i][1]>list1[i+1][0]:\n            min_product=list1[i][0]*list1[i+1][1]\n            j=j+1\n        elif list1[i][0]>list1[i+1][1] and list1[i][1]>list1[i+1][0]:\n            min_product=list1[i][1]*list1[i+1][1]\n            j=j+1\n        elif list1[i][0]<list1[i+1][1] and list1[i][1]<list1[i+1][0]:\n            min_product=list1[i][0]*list1[i+1][1]\n            i=i+1\n        elif list1[i][0]<list1[i+1][1] and list1[i][1]<list1[i+1][0]:\n            min_product=list1[i][1]*list1[i+1][1]\n            i=i+1\n        elif list1[i][0]<list1[i+1][0] and list1[i][1]<list1[i+1][1]:\n            min_product=list1[i][0]*list1[i+1][0]\n            i=i+1\n        else:\n            min_product=list1[i][1]*list1[i+1][1]\n            i=i+1\n    if j==0:\n        return min_product\n    else:\n        return min_product/j\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    list_product = list()\n    current_product = list1[0]\n    for i in range(1, len(list1)):\n        list_product.append(current_product * list1[i])\n        current_product = max(list_product)\n    return current_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0][0]\n    else:\n        max_value = list1[0][0]\n        for i in range(len(list1)):\n            for j in range(i+1,len(list1)):\n                if list1[i][0] > max_value and list1[j][0] > max_value:\n                    max_value = list1[i][0] * list1[j][0]\n        return max_value\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    # your code here\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1,limit) if (i!= 1) and (i % 2 == 0 and i % 3 == 0)]\n    result = sum(amicable_numbers)\n    print(\"The sum of amicable numbers is\",result)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    number = 1\n    while number < limit:\n        if is_amicable_number(number):\n            amicable.append(number)\n            for i in range(2, int(math.sqrt(number)) + 1):\n                if number % i == 0:\n                    break\n            else:\n                amicable.append(number)\n        number += 1\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = amicable_numbers_to_list(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers.append(1)\n    \n    for n in range(2, limit + 1):\n        if sum(amicable_numbers) % n == 0:\n            amicable_numbers.append(amicable_numbers[-1] * 2)\n            amicable_numbers.append(amicable_numbers[-1] * n)\n        \n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = 0\n    amicable_numbers = sum(filter(lambda n: n <= limit, range(1, limit)))\n    return amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    def sum_is_amicable(n):\n        '''\n        Sum all numbers from 1 to n (inclusive) where n is the value entered by the user.\n        '''\n        for i in range(1, n + 1):\n            if n % i == 0:\n                amicable_numbers.append(i)\n    \n    sum_is_amicable(limit)\n    \n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    count = 1\n    sum_ = 0\n    while count <= limit:\n        if is_prime(count):\n            for i in range(2, count + 1):\n                if count % i == 0:\n                    break\n            else:\n                sum_ += count\n        count += 1\n    return sum_\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.acos(cmath.sqrt(a**2 + b**2)))/2\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if type(a) == complex and type(b) == complex:\n        \n        d = b**2-4*a*cmath.cos(b)+cmath.sqrt(b**2-4*a*cmath.cos(b))\n        if d==0:\n            return 0\n        else:\n            return cmath.acos(d/abs(d))\n    else:\n        return 'The argument must be a real number'\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (a.real * b.imag + a.imag * b.real) / (a.real ** 2 + a.imag ** 2)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = math.acos(b/math.sqrt((a.real*a.real)+(a.imag*a.imag)))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return 0\n    else:\n        c=(cmath.sqrt(b*b-4*a*cmath.cos(a)))/2\n        return a/c\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        a = complex(a)\n        b = complex(b)\n        x = (b.real**2 + a.real**2 - b.imag**2 - a.imag**2)**0.5\n        y = (b.imag**2 + a.imag**2 - b.real**2 - a.real**2)**0.5\n        z = (b.real**2 + a.imag**2 - b.imag**2)**0.5\n        return round(cmath.acos(z/x),5)\n    except:\n        return 'Your inputs are not real numbers'\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Example:\n    #a = 3+5j\n    #b = 7-5j\n    #result: 2.5708370163\n    #a = -3+5j\n    #b = -7-5j\n    #result: -2.5708370163\n    #a = 1+5j\n    #b = 1-5j\n    #result: -0.41382165432\n    #a = 2+5j\n    #b = -4-5j\n    #result: 2.5708370163\n    return (cmath.acos(a)*cmath.pi/2 - cmath.acos(b)*cmath.pi/2)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    # get real part\n    r = c.real\n    # get imaginary part\n    i = c.imag\n    # return angle\n    return acos(r + i)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = complex(0,0)\n    angle = angle + a\n    angle = angle + b\n    angle = angle / 2\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # TODO: Complete this function\n    angle_complex = cmath.phase(b)\n    angle_complex = angle_complex.real\n    return angle_complex\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    left = 0\n    right = 0\n    while right < len(string):\n        left += string[right] == '0'\n        right += 1\n    right -= 1\n    right += 1\n    return left + string[left:right].count('1') - string[left:right].count('0')\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    result = ''\n    for i in range(len(string)):\n        if string[i] == '0':\n            result += '1'\n        else:\n            result += '0'\n        if i < len(string)-1:\n            if string[i+1] == '1':\n                max_diff += 1\n                result += '1'\n            elif string[i+1] == '0':\n                max_diff += 1\n                result += '0'\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    j = 0\n    \n    for i in range(len(string)):\n        j = string.find(string,i)\n        if j == -1:\n            break\n        if string[i] == \"0\":\n            ans +=1\n        else:\n            ans -=1\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Memoization\n    # O(n)\n    if len(string) == 1:\n        return 0\n    if len(string) <= 1:\n        return 1\n    \n    \n    # DP Table\n    # O(n)\n    # n = len(string)\n    # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] = 1 + max(0, dp[i-1][j-1] - 1)\n    # j = len(string)\n    # dp[i][j] = max(0, dp[i-1][j-1] - 1 + abs(string[i]-string[j-1]))\n    \n    # i = len(string) - 1\n    # j = len(string) - 1\n    \n    # dp[i][j] = max(0, dp[i-1][j-1] - 1 + abs(string[i]-string[j]))\n    \n    # return max(dp[i][j])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: \n        return 0\n    else: \n        return len(string) - len(string.replace('0', '1'))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # for i in range(len(string)):\n    #     if string[i] == '0':\n    #         return i\n    #     elif string[i] == '1':\n    #         if string[i-1] == '0':\n    #             return i-1\n    # return -1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    d = [0,0]\n    for i in range(len(string)):\n        if string[i] == '0':\n            d[0] = d[0]+1\n        elif string[i] == '1':\n            d[1] = d[1]+1\n    return max(d)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            max_diff += 1\n        else:\n            max_diff -= 1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    # Hint: You can use a for loop to accomplish this.\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    count_0 = 0\n    count_1 = 0\n    count0_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        elif string[i] == '1':\n            count1 += 1\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count0_1 += 1\n        elif string[i] == '1':\n            count_1_1 += 1\n    \n    if count_0 == count0_1:\n        return count_0\n    elif count_1 == count_0:\n        return count_1\n    else:\n        return count_0_1\n        \nstring = input(\"Enter binary string: \")\nprint(\"Length of binary string: \", find_length(string))"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        small = a\n        big = b\n    elif a==b:\n        small = a\n        big = a\n    small_c = 0\n    big_c = 0\n    for i in range(1,small+1):\n        if (a%i == 0) and (b%i == 0):\n            small_c+=i\n    for i in range(1,big+1):\n        if (a%i == 0) and (b%i == 0):\n            big_c+=i\n    sum = big_c-small_c\n    return sum\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a==0:\n        print(\"0 not found\")\n        return\n    if b==0:\n        print(\"0 not found\")\n        return\n    else:\n        return a+b\n    \nprint(sum(a=4,b=5))"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # define common divisor and power of 2\n    com = max(a,b)\n    l = 2\n    while l < com:\n        if a%l == 0 and b%l == 0:\n            result = a*b\n            com = l\n        elif a%l == 0:\n            com -= 1\n        elif b%l == 0:\n            com -= 1\n        l += 1\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0: \n        return 0\n    else: \n        return a + sum(a,b-1) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0: \n        return 0\n    if a > b: \n        a,b = b,a\n    s = 0\n    while b!= 0: \n        r = a % b \n        a = b \n        b = r \n        s = s + r \n    return s \n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return 0\n    else:\n        return a/b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < 0:\n        a = a % 10\n    if b < 0:\n        b = b % 10\n    result = []\n    for i in range(int(a/2),int(b/2)+1):\n        if i % 2 == 0:\n            result.append(i)\n    result.sort()\n    return result\n    \ndef product(a,b): \n    '''\n    Write a python function to find the product of two given numbers.\n    '''\n    result = []\n    for i in range(0, int(a/2)+1):\n        if i % 2 == 0:\n            result.append(i)\n    result.sort()\n    return result * b\n    \ndef sum_of_product(a,b): \n    '''\n    Write a python function to find the sum of a product of two numbers.\n    '''\n    return product(a,b) + product(b,a)\n    \ndef product_of_all(a,b): \n    '''\n    Write a python function to find the product of all numbers.\n    '''\n    result = []\n    for i in range(0, int(a/2)+1):\n        result.append(i)\n    result.sort()\n    return product(result[0],result[1])\n    \ndef sum_of_all(a,b): \n    '''\n    Write a python function to find the sum of all numbers.\n    '''\n    return product_of_all(a,b) + product_of_all(b,a)\n    \ndef product_of_divisible(a,b): \n    '''\n    Write a python function to find the product of divisors of two numbers.\n    '''\n    return product_of_all(a,b) * product_of_all(b,a)\n    \ndef product_of_divisible_two(a,b): \n    '''\n    Write a python function to find the product of divisors of two numbers.\n    '''\n    return product_of_all(a,b) * product_of_all(a,b) * product_of_all(b,a)\n    \ndef sum_of_divisible(a,b): \n    '''\n    Write a python function to find the sum of divisors of two numbers.\n    '''\n    return product_of_all(a,b) * product_of_divisible(a,b) + product_of_divisible_two(a,b)\n    \ndef sum_of_divisible_two(a,b): \n    '''\n    Write a python function to find the sum of divisors of two numbers.\n    '''\n    return product_of_all(a,b) * product_of_divisible(a,b) * product_of_divisible(b,a)\n    \ndef main(): \n    \n    print(sum_of_divisible(int(input('Number of entries: ')), int(input('Number of entries: '))))\n    \nif __name__ == \"__main__\":\n    main()\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a%b ==0:\n        return b\n    else:\n        return sum(a,b-a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        raise TypeError(\"Must be an int\")\n    if a % b == 0:\n        return a / b\n    else:\n        return None\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    try:\n        return x * y\n    except:\n        raise Exception('Please pass in a positive integer to multiply')\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    def plus_one(x, y):\n        '''\n        The addition of one is the addition of the numbers multiplied by 1\n        '''\n        def plus_one_more(x, y):\n            '''\n            The addition of one is the addition of the numbers multiplied by 1\n            '''\n            if (x % 2 == 0):\n                return x + y\n            else:\n                x = x + y\n                return plus_one_more(x, 2)\n        return plus_one_more(x, y)\n    if (x > y):\n        return plus_one(x, y)\n    else:\n        return x\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = x * y\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    try:\n        return int(x) * int(y)\n    except Exception as e:\n        print(e)\n        return \"Error: Invalid input\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print('x = ', x, ', y = ', y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = 0\n    for i in range(len(x)):\n        res += x[i] * y[i]\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    if x == 0:\n        if y == 0:\n            return 0\n        else:\n            return 1\n    elif y == 0:\n        return x\n    else:\n        return x * multiply_int(y, x)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    out = []\n    for i in str.split():\n        if len(i) > n:\n            out.append(i)\n    return out\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    counts = {}\n    for word in str.split():\n        if len(word) > n:\n            counts[word] = counts.get(word, 0) + 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    f = open(\"word_list.txt\", \"r\")\n    i = 0\n    while(i < n):\n        line = f.readline()\n        words = line.split()\n        for word in words:\n            if len(word) > i:\n                i += 1\n                print(word)\n                break\n        if i > n:\n            break\n        i += 1\n    f.close()\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    if len(str) > n:\n        return []\n    if str[0] in letters:\n        return []\n    return [str]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n == 0:\n        return ''\n    if n == 1:\n        return str\n    else:\n        return''.join(str_list(str_split(str, n)))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = list(str)\n    for i in range(len(str)):\n        if len(str[i])>=n:\n            str[i] = str[i][0:n]\n    return ''.join(str)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Create an empty list\n    res = []\n    # Iterate through all the words in the list\n    for i in range(n):\n        # Check if it is a word\n        if len(str) > 0:\n            # If yes, append it to the list\n            res.append(str[0])\n            # Remove the first character\n            str = str[1:]\n        # Else, keep it at the end of the list\n    return res"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    # keep track of length\n    lens = []\n    \n    # get length of word and append to list\n    for i in str:\n        if len(i) > n:\n            lens.append(len(i))\n    \n    # sort list\n    lens.sort()\n    \n    # find word with longest length\n    return max(lens)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    for row in range(len(my_matrix)):\n        for column in range(len(my_matrix[0])):\n            if my_matrix[row][column]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    count = 0\n    for row in my_matrix:\n        if row == row[::-1]:\n            count += 1\n    if count == 15:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if j < i:\n                if my_matrix[i][j] == '_':\n                    print(my_matrix[i][j])\n    print(\"the matrix is a magic square\")\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #this is an empty matrix\n    if(len(my_matrix) < 4 or len(my_matrix) == 4):\n        return False\n    #two numbers in the row\n    for row in range(len(my_matrix)):\n        #if the number of elements in the row is odd\n        if(row % 2 == 0):\n            #start and end of the matrix\n            if(row > 0 and row < len(my_matrix) - 1):\n                #if any of the elements in the row are odd\n                if(my_matrix[row][row] % 2!= 0):\n                    #if the squares of the elements in the matrix are not equal\n                    #then the matrix is not a magic square\n                    return False\n        #if the number of elements in the row is even\n        else:\n            #start and end of the matrix\n            if(row > 0 and row < len(my_matrix) - 1):\n                #if any of the elements in the row are even\n                if(my_matrix[row][row] % 2 == 0):\n                    #if the squares of the elements in the matrix are not equal\n                    #then the matrix is not a magic square\n                    return False\n    #the matrix is a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_square = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m2 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m3 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m4 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m5 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m6 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m7 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m8 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m9 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m10 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m11 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m12 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m13 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1],\n        [6, 5, 1, 4, 2, 9, 7, 3],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, 8, 9, 6, 1]\n    ]\n    my_squares_squares_m14 = [\n        [4, 2, 5, 8, 3, 1, 6, 7],\n        [1, 6, 9, 3, 7, 2, 8, 4],\n        [5, 7, 3, 4, "
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix_copy = my_matrix.copy()\n    row = 0\n    col = 0\n    for i in range(len(my_matrix_copy)):\n        for j in range(len(my_matrix_copy)):\n            if my_matrix_copy[i][j] == 1:\n                if row == 0:\n                    row = i\n                    col = j\n                elif row == len(my_matrix_copy) - 1:\n                    row = i\n                    col = 0\n                else:\n                    col = j\n                    row = 0\n    if row == col == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    square_count = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] == 1:\n                square_count += 1\n    if square_count == 4:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return square_test(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    squares_count = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 1:\n                squares_count += 1\n    if squares_count == 9:\n        return True\n    return False\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if nums is None or len(nums) < 1:\n        return None\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > nums.count(num):\n            return num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    item_freq = defaultdict(int)\n    for num in nums:\n        item_freq[num] += 1\n    max_freq = max(item_freq.values())\n    for i in item_freq:\n        if item_freq[i] == max_freq:\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0: return []\n    l = defaultdict(int)\n    for n in nums:\n        l[n] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # TODO: Write your code here\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    occurrences = defaultdict(int)\n    for num in nums:\n        occurrences[num] += 1\n    return max(occurrences, key=occurrences.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # declaring a dictionary to store the count\n    dict_count = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # find the maximum\n    maximum = -1\n    for num in nums:\n        if num > maximum:\n            maximum = num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # to calculate frequency of each element\n    freq_dict = defaultdict(int)\n    # create dictionary of frequency of each element\n    for n in nums:\n        freq_dict[n] += 1\n    # find the max element\n    max_occur = 0\n    max_value = 0\n    for i in freq_dict.keys():\n        if freq_dict[i] > max_occur:\n            max_occur = freq_dict[i]\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = None\n    max_count = -1\n    for num, count in freq.items():\n        if count > max_count or max_num is None:\n            max_num = num\n            max_count = count\n    \n    return max_num, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Your code here\n    frequent_item_dict = defaultdict(int)\n    for item in nums:\n        if item in frequent_item_dict:\n            frequent_item_dict[item] += 1\n    return max(frequent_item_dict, key = frequent_item_dict.get)\n        \n    #raise NotImplementedError\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u']\n    str1=str1.lower()\n    str1=list(str1)\n    index=0\n    str2=[]\n    str3=[]\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i] in vowels:\n            str2.append(str1[i])\n            str3.append(str1[i])\n        else:\n            index+=1\n            str2.append(str1[i])\n            str3.append(str1[index])\n    return (''.join(str3)+''.join(str2))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = 'aeiouAEIOU'\n    rev_str = ''\n    for char in str1:\n        if char in vowel:\n            rev_str = char + rev_str\n    return rev_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    a = str1\n    b = str1[::-1]\n    return b\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    my_str = ''\n    for i in str1:\n        if i in set(vowels):\n            my_str = my_str + i\n    return my_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TO DO...\n    # write a function\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    temp=[]\n    for i in range(len(str1)):\n        if str1[i]=='y':\n            if str1[i-1] not in ['a','e','i','o','u','A','E','I','O','U']:\n                temp.append(str1[i-1])\n    for i in range(len(temp)):\n        if temp[i] not in vowels:\n            temp[i]=str1[i]\n    return \"\".join(temp)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    new_str = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            new_str.append(str1[i])\n        else:\n            new_str.append(str1[i] + str1[i-1])\n    return ''.join(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    final_string = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            final_string.append(i)\n    final_string = ''.join(final_string)\n    return final_string\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_two(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using two pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_three(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using three pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_four(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using four pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_five(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using five pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_six(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using six pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_seven(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using seven pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_eight(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using eight pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_nine(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using nine pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_ten(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using ten pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(str1[i])\n                str1 = str1[:i] + str1[j + 1:].replace(str1[j],'').replace(' ', '').replace(' ','')\n                i = i + 1\n            else:\n                i = i + 1\n        return str1\n    \ndef reverse_vowels_eleven(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel) using eleven pointers.\n    '''\n    vowels = 'AEIOUaeiou'\n    if str1 == str(''):\n        return str('')\n    else:\n        i = 0\n        while i < len(str1):\n            if str1[i] in vowels:\n                j = str1[i:].index(st"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # TO DO: convert this function to a function\n    def string_form(tup):\n        s = '('\n        for x in tup:\n            s+= str(x)\n            s +=''\n        s = s[:-1] + ')'\n        return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string = string + str(i) + \" \"\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    out_string = \",\".join(tup1)\n    return out_string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(str(x) for x in tup1) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join(str(i) for i in tup1) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join([str(item) for item in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join([str(x) for x in tup1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # TODO: Write your code here\n    neg_num = 0\n    for num in nums:\n        if num < 0:\n            neg_num += num\n    return neg_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum - num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            sum = sum + nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += num\n    return negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s=0\n    for num in nums:\n        if num<0:\n            s+=num\n    return s\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Your code here\n    def hexagonal(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        elif n == 4:\n            return 3\n        elif n == 5:\n            return 4\n        elif n == 6:\n            return 5\n        elif n == 7:\n            return 6\n        elif n == 8:\n            return 7\n        elif n == 9:\n            return 8\n        else:\n            return 9\n    return hexagonal(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    else:\n        return 8\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 3\n    else:\n        if n%2 == 1:\n            return hexagonal_num(n-1) + 2 * hexagonal_num(n-2)\n        else:\n            return 3 * hexagonal_num(n-1) + 1 * hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    l = []\n    for i in range(0, n):\n        l.append(i)\n    for i in range(0, (n-1)):\n        l.append(l[i]+n)\n        l.append(l[i]-n)\n    print(l)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n%4 == 0):\n        return n\n    else:\n        return hexagonal_num(n-1)+6\n    \ndef is_prime(n): \n    '''\n    Check if n is a prime number.\n    '''\n    if n < 2: \n        return False\n    if n % 2 == 0: \n        return False\n    if n % 3 == 0: \n        return False\n    i = 5\n    while i*i <= n: \n        if n % i == 0: \n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError('The value must be positive.')\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # Recursive call\n    return hexagonal_num(n - 1) + hexagonal_num(n - 1) * 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n > 1 and n < 16:\n        return hexagonal_num(n-1) + hexagonal_num(n-2) + hexagonal_num(n-3)\n    else:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 2)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # your code goes here\n    # assume all elements of nums are 0\n    # traverse the array\n    # check if the number of zeros is zero\n    # increment the count\n    # return the value\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n    \ndef largest_zero(nums):\n    '''\n    Write a function to return the largest non-zero element in an array of integers.\n    '''\n    # your code goes here\n    # assume all elements of nums are 0\n    # check for non-zero elements in nums\n    # if non-zero, find the largest non-zero element\n    # return the largest non-zero element\n    max = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            max = max if max < nums[i] else nums[i]\n        \n    return max\n    \ndef is_palindrome(nums):\n    '''\n    Given an array of numbers, return true if all numbers are the same, and the difference between the largest and the smallest element,\n    otherwise return false.\n    '''\n    # your code goes here\n    # assume all elements of nums are 0\n    # check for non-zero elements in nums\n    # if non-zero, check if the largest and smallest non-zero elements are the same\n    # if there is no, then it is not a palindrome\n    # return the values as a boolean value\n    if nums[0] == 0 or nums[len(nums) - 1] == 0:\n        return True\n    if nums[0] > nums[len(nums) - 1]:\n        return False\n    return nums[0] == nums[len(nums) - 1]\n    \ndef find_greatest(nums):\n    '''\n    Given an array of integers, return the largest number in the array that has the greatest number of positive elements\n    '''\n    # your code goes here\n    # assume all elements of nums are 0\n    # check for non-zero elements in nums\n    # if non-zero, check for the largest and smallest non-zero elements\n    # if there is no, then it is not a palindrome\n    # return the largest non-zero element\n    max = 0\n    max_neg = 0\n    for i in nums:\n        if i < 0:\n            if max < i:\n                max = i\n            max_neg = i\n        elif i == 0:\n            if max_neg > 0:\n                max_neg = 0\n            elif max < 0:\n                max = max\n        else:\n            max_neg = max_neg - i\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(0, n):\n        if nums[i] == 0:\n            count = count + 1\n    return count/n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    sum_zeroes = sum(nums)\n    num_zeroes = 0\n    # create a counter for each non-zero\n    # for num in nums\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            num_zeroes += 1\n    # subtract the sums of each non-zero\n    num_zeroes = num_zeroes - sum_zeroes\n    return num_zeroes/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return (zero_count/len(nums))*100\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\ndef empty_array(nums):\n    '''\n    Write a function that prints out all the numbers from 1 to the number in the array.\n    '''\n    for i in range(len(nums)):\n        print(nums[i], end=' ')\ndef run_tests():\n    assert zero_count([1, 1, 1, 1, 1]) == 1.0\n    assert zero_count([1, 1, 0, 1, 1]) == 0.0\n    assert zero_count([1, 1, 1, 0, 0]) == 0.0\n    assert zero_count([1, 1, 1, 1, 0]) == 0.0\n    assert zero_count([1, 1, 1, 0, 1]) == 0.0\n    assert zero_count([1, 0, 1, 1, 0]) == 0.0\n    assert zero_count([1, 1, 1, 1, 1]) == 1.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 1, 1, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 1, 1, 1]) == 0.0\n    assert zero_count([1, 1, 1, 1, 1]) == 0.0\n    assert zero_count([1, 1, 1, 0, 0]) == 0.0\n    assert zero_count([1, 1, 1, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 1, 0, 0]) == 0.0\n    assert zero_count([1, 1, 1, 0, 1]) == 0.0\n    assert zero_count([1, 1, 1, 0, 1]) == 0.0\n    assert zero_count([1, 1, 1, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 1]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1, 1, 0, 0, 0]) == 0.0\n    assert zero_count([1"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return False\n    return is_Sum_Of_Powers_Of_Two(int(n/2))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow_2 = 1\n    for i in range(1,n):\n        pow_2 *= 2\n    if pow_2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def is_pow_of_two(n): \n        '''\n        Write a function to check if a number is a sum of 2 powers of two.\n        '''\n        while n%2==0: \n            n=n//2\n        if n<2**int(log(n+1,2)) and n>=0:\n            return True\n        return False\n    \n    def is_sum_of_pows_of_two(n): \n        '''\n        Return True if a given number can be represented as sum of powers of 2 or not.\n        '''\n        return n*(n+1)%10==1\n    \n    # Check if a given number can be represented as sum of powers of two.\n    return is_pow_of_two(n) and is_sum_of_pows_of_two(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1):\n        if n%i == 0:\n            sum_of_powers += i\n        else:\n            sum_of_powers += 1\n    if n == sum_of_powers:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n_i = n\n    if (n == 0):\n        return True\n    if (n == 1):\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n    \ndef findFactors(n): \n    '''\n    Find all factors of a given number.\n    '''\n    factors = []\n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n        i += 1\n    return factors\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # get no of terms\n    n = int(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        if (n%i == 0):\n            return False\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n=n**2\n    if (n==0):\n        return False\n    if (n==1):\n        return True\n    if (n==2):\n        return True\n    if (n==3):\n        return True\n    if (n==4):\n        return True\n    if (n==5):\n        return True\n    if (n==6):\n        return True\n    if (n==7):\n        return True\n    if (n==8):\n        return True\n    if (n==9):\n        return True\n    if (n==10):\n        return True\n    if (n==11):\n        return True\n    if (n==12):\n        return True\n    if (n==13):\n        return True\n    if (n==14):\n        return True\n    if (n==15):\n        return True\n    if (n==16):\n        return True\n    if (n==17):\n        return True\n    if (n==18):\n        return True\n    if (n==19):\n        return True\n    if (n==20):\n        return True\n    if (n==21):\n        return True\n    if (n==22):\n        return True\n    if (n==23):\n        return True\n    if (n==24):\n        return True\n    if (n==25):\n        return True\n    if (n==26):\n        return True\n    if (n==27):\n        return True\n    if (n==28):\n        return True\n    if (n==29):\n        return True\n    if (n==30):\n        return True\n    if (n==31):\n        return True\n    if (n==32):\n        return True\n    if (n==33):\n        return True\n    if (n==34):\n        return True\n    if (n==35):\n        return True\n    if (n==36):\n        return True\n    if (n==37):\n        return True\n    if (n==38):\n        return True\n    if (n==39):\n        return True\n    if (n==40):\n        return True\n    if (n==41):\n        return True\n    if (n==42):\n        return True\n    if (n==43):\n        return True\n    if (n==44):\n        return True\n    if (n==45):\n        return True\n    if (n==46):\n        return True\n    if (n==47):\n        return True\n    if (n==48):\n        return True\n    if (n==49):\n        return True\n    if (n==50):\n        return True\n    if (n==51):\n        return True\n    if (n==52):\n        return True\n    if (n==53):\n        return True\n    if (n==54):\n        return True\n    if (n==55):\n        return True\n    if (n==56):\n        return True\n    if (n==57):\n        return True\n    if (n==58):\n        return True\n    if (n==59):\n        return True\n    if (n==60):\n        return True\n    if (n==61):\n        return True\n    if (n==62):\n        return True\n    if (n==63):\n        return True\n    if (n==64):\n        return True\n    if (n==65):\n        return True\n    if (n==66):\n        return True\n    if (n==67):\n        return True\n    if (n==68):\n        return True\n    if (n==69):\n        return True\n    if (n==70):\n        return True\n    if (n==71):\n        return True\n    if (n==72):\n        return True\n    if (n==73):\n        return True\n    if (n==74):\n        return True\n    if (n==75):\n        return True\n    if (n==76):\n        return True\n    if (n==77):\n        return True\n    if (n==78):\n        return True\n    if (n==79):\n        return True\n    if (n==80):\n        return True\n    if (n==81):\n        return True\n    if (n==82):\n        return True\n    if (n==83):\n        return True\n    if (n==84):\n        return True\n    if (n==85):\n        return True\n    if (n==86):\n        return True\n    if (n==87):\n        return True\n    if (n==88):\n        return True\n    if (n==89):\n        return True\n    if (n==90):\n        return True\n    if (n==91):\n        return True\n    if (n==92):\n        return True\n    if (n==93):\n        return True\n    if (n==94):\n        return True\n    if (n==95):\n        return True\n    if (n==96):\n        return True\n    if (n==97):\n        return True\n    if (n==98):\n        return True\n    if (n==99):\n        return True\n    if (n==100):\n        return True\n    if (n==101):\n        return True\n    if (n==102):\n        return True\n    if (n==103):\n        return True\n    if (n==104):\n        return True\n    if (n==105):\n        return True\n    if (n==106):\n        return True\n    if (n==107):\n        return True\n    if (n==108):\n        return True\n    if (n==109):\n        return True\n    if (n==110):\n        return True\n    if (n==111):\n        return True\n    if (n==112):\n        return True\n    if (n==113):\n        return True\n    if (n==114):\n        return True\n    if (n==115):\n        return True\n    if (n==116):\n        return True\n    if (n==117):\n        return True\n    if (n==118):\n        return True\n    if (n==119):\n        return True\n    if (n==120):\n        return True\n    if (n==121):\n        return True\n    if (n==122):\n        return True\n    if (n==123):\n        return True\n    if (n==124):\n        return True\n    if (n==125):\n        return True\n    if (n==126):\n        return True\n    if (n==127):\n        return True\n    if (n==128):\n        return True\n    if (n==129):\n        return True\n    if (n==130):\n        return True\n    if (n==131):\n        return True\n    if (n==132):\n        return True\n    if (n==133):\n        return True\n    if (n==134):\n        return True\n    if (n==135):\n        return True\n    if (n==136):\n        return True\n    if (n==137):\n        return True\n    if (n==138):\n        return True\n    if (n==139):\n        return True\n    if (n==140):\n        return True\n    if (n==141):\n        return True\n    if (n==142):\n        return True\n    if (n==143):\n        return True\n    if (n==144):\n        return True\n    if (n==145):\n        return True\n    if (n==146):\n        return True\n    if (n==147):\n        return True\n    if (n==148):\n        return True\n    if (n==149):\n        return True\n    if (n==150):\n        return True\n    if (n==151):\n        return True\n    if (n==152):\n        return True\n    if (n==153):\n        return True\n    if (n==154):\n        return True\n    if (n==155):\n        return True\n    if (n==156):\n        return True\n    if (n==157):\n        return True\n    if (n==158):\n        return True\n    if (n==159):\n        return True\n    if (n==160):\n        return True\n    if (n==161):\n        return True\n    if (n==162):\n        return True\n    if (n==163):\n        return True\n    if (n==164):\n        return True\n    if (n==165):"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    for i in range(2,n+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    num = 2\n    while num < n:\n        sum += num * num\n        num += 1\n    if sum == n:\n        return True\n    else:\n        return False\n    \nprint(is_Sum_Of_Powers_Of_Two(1))\nprint(is_Sum_Of_Powers_Of_Two(2))\nprint(is_Sum_Of_Powers_Of_Two(3))\nprint(is_Sum_Of_Powers_Of_Two(4))\nprint(is_Sum_Of_Powers_Of_Two(5))\nprint(is_Sum_Of_Powers_Of_Two(18))\nprint(is_Sum_Of_Powers_Of_Two(10000000000))\nprint(is_Sum_Of_Powers_Of_Two(18))\nprint(is_Sum_Of_Powers_Of_Two(100000000000))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # This function calculates circumference of circle.\n    circum = 2 * 3.14 * r\n    print(circum)\n    # This function prints circumference of circle.\n    return circum\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * (r * math.pi)\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    pi = 3.14\n    return 2*pi*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*(math.pi*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # TODO: Write your code here\n    return 2*np.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for i in test_list:\n        for j in i:\n            flatten_list.append(j)\n    return flatten_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    #Your code here\n    numbers = []\n    for item in test_list:\n        if isinstance(item, list):\n            numbers.extend(item)\n    return numbers\n    \n    #Another way you can write\n    #numbers = []\n    #for item in test_list:\n    #    if isinstance(item, list):\n    #        numbers.extend(item)\n    #return numbers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst\n        elif len(lst) == 2:\n            return lst[0] + flatten(lst[1])\n        else:\n            return [lst[0]] + flatten(lst[1:])\n    return flatten(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            for k in i:\n                return_list.append(k)\n        else:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        result.update(i)\n    return list(result)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(map(lambda l: [int(x) for x in l], test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_set = set(test_list)\n    test_set_string = ''\n    for item in test_set:\n        test_set_string += str(item) + ','\n    test_set_string = test_set_string[:-1]\n    return test_set_string\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    set_num = []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) is not list:\n            result.append(item)\n        else:\n            for element in item:\n                result.append(element)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # convert all of the lists into a set\n    flattened = set(test_list)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(0, length - 1):\n        smallest = i\n        for j in range(i + 1, length):\n            if nums[j] < nums[smallest]:\n                smallest = j\n        nums[i], nums[smallest] = nums[smallest], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # The helper function to sort the list.\n    def helper(nums, start):\n        # We just need to check whether the start position is less than the end position\n        if start == len(nums):\n            return\n        # If we're at a start position and we're not at an end position, then we're sorting this element\n        elif start >= len(nums) - 1:\n            # Note that we can only sort the elements before the end, so we'll have to start at the end of the array\n            return\n        # We're at the end position, so we'll sort the elements after it\n        elif end > len(nums) - 1:\n            # Now we'll start at the end of the array and sort the elements after it\n            return\n        # We're at the start position, so we'll sort the elements before it\n        elif nums[start] > nums[end]:\n            # Now we're sorted before this element, so we'll sort after this element\n            return\n        # If we're at the start position, we can't sort the elements before this position, so we'll sort after this element\n        else:\n            return\n            \n    # Call the helper function with the sorted array.\n    helper(nums, 0)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_len = 0\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n            if nums[j] > max_len:\n                max_len = nums[j]\n    print(nums)\n    nums.sort()\n    print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = len(nums)-1\n    j = 0\n    while i >= 0:\n        if i >= 0 and nums[i] < nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n        i -= 1\n    i = 0\n    while j < len(nums) - 1:\n        if nums[j+1] < nums[j]:\n            j += 1\n        else:\n            nums[i] = nums[j]\n            i = i + 1\n            j = j + 1\n    return nums\n        "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        return nums[-1:] + nums[:len(nums)-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Sorting in ascending order\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return num"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #base case\n    if len(nums) == 1:\n        return nums\n    \n    #return a new list\n    left = nums[0]\n    right = nums[1]\n    #exchange nums[0] and nums[1]\n    nums[0], nums[1] = nums[1], nums[0]\n    #swap nums[1] and nums[0]\n    temp = nums[0]\n    nums[0] = nums[1]\n    nums[1] = temp\n    #sort left\n    pancake_sort(nums[0:len(nums)-1])\n    #sort right\n    pancake_sort(nums[len(nums)-1:len(nums)])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1,0,-1):\n        lowest_idx = i\n        for j in range(i):\n            if nums[j] < nums[lowest_idx]:\n                lowest_idx = j\n        \n        nums[lowest_idx],nums[i] = nums[i],nums[lowest_idx]\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n < 2:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n == 1:\n        return [nums]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    d={}\n    i=0\n    while i<len(list1):\n        if list1[i] not in d:\n            d[list1[i]]=i\n        elif list1[i] in d:\n            d[list1[i]]+=1\n        else:\n            d[list1[i]]=0\n        i+=1\n    i=0\n    while i<len(list2):\n        if list2[i] not in d:\n            d[list2[i]]=i\n        elif list2[i] in d:\n            d[list2[i]]+=1\n        else:\n            d[list2[i]]=0\n        i+=1\n    i=0\n    while i<len(list3):\n        if list3[i] not in d:\n            d[list3[i]]=i\n        elif list3[i] in d:\n            d[list3[i]]+=1\n        else:\n            d[list3[i]]=0\n        i+=1\n    print(d)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print(\"\\nThe number of identical items in the three lists are: \")\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]==list1[j] and list2[i]==list2[j] and list3[i]==list3[j]:\n                print(list1[i],\" \",list2[i],\" \",list3[i],\" \",end=\" \")\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_1=0\n    count_2=0\n    count_3=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list3[i]==list3[i]:\n            count_1=count_1+1\n        elif list1[i]==list3[i] and list3[i]==list2[i]:\n            count_2=count_2+1\n        elif list1[i]==list3[i] and list3[i]==list2[i]:\n            count_3=count_3+1\n    return(count_1,count_2,count_3)\n    \ndef count_diffpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are differnent in the same position of three given lists.\n    '''\n    count_1=0\n    count_2=0\n    count_3=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list3[i]!=list3[i]:\n            count_1=count_1+1\n        elif list1[i]==list3[i] and list3[i]!=list2[i]:\n            count_2=count_2+1\n        elif list1[i]==list3[i] and list3[i]!=list2[i]:\n            count_3=count_3+1\n    return(count_1,count_2,count_3)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        same_pair = 0\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i]==list2[j] and list1[i]==list3[j]:\n                    same_pair+=1\n        return same_pair\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count = count + 1\n    for i in list3:\n        for j in list3:\n            if i == j:\n                count = count + 1\n    return count\n    \nlist1 = [[0,1],[0,2,3,4],[0,5,6,7,8],[0,9,10,11,12]]\nlist2 = [[0,1,2,3,4],[0,5,6,7,8],[0,9,10,11,12]]\nlist3 = [[0,0,0],[0,0,0],[0,0,0]]\nprint(count_samepair(list1,list2,list3))"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair=0\n    same_pair_list1=[]\n    same_pair_list2=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and i!=j:\n                same_pair+=1\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            same_pair_list1.append(list1[i])\n    for j in range(len(list2)):\n        if list2[j]==list1[j]:\n            same_pair_list2.append(list2[j])\n    return same_pair,same_pair_list1,same_pair_list2\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num_list1 = 0\n    num_list2 = 0\n    num_list3 = 0\n    for i in list1:\n        if i in list3:\n            num_list1 += 1\n    for i in list2:\n        if i in list3:\n            num_list2 += 1\n    for i in list3:\n        if i in list1:\n            num_list3 += 1\n    return num_list1+num_list2+num_list3\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for x in list1:\n        for y in list2:\n            for z in list3:\n                if x == y == z:\n                    count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num_item_same = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            num_item_same += 1\n    return num_item_same\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same = []\n    for i in list1:\n        if i in list3:\n            same.append(i)\n            same.append(i)\n            same.append(i)\n    for i in list2:\n        if i in list1:\n            same.append(i)\n            same.append(i)\n            same.append(i)\n    for i in list3:\n        if i in list2:\n            same.append(i)\n            same.append(i)\n            same.append(i)\n    return len(same)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input)==1:\n        return len(Input[0])\n    else:\n        return find_lists(Input[1:]) + find_lists(Input[0:1])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input)!= 2:\n        return None\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code goes here\n    if len(Input)!= 2:\n        raise Exception('The tuple has to be of length 2')\n    if type(Input[0])!= int or type(Input[1])!= int:\n        raise Exception('Input should be a tuple of integers')\n    return(len(list(filter(lambda x: x.isdigit(), Input))))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # Note: it only takes tuples as parameters as they are iterated through.\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = 0\n    for i in range(0, len(Input)):\n        if (Input[i] in [\"{\", \"[\", \"(\", \")\"]):\n            l = l + 1\n    return l\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def list_count(lst, item):\n        '''\n        1. Check if item is in list\n        2. If item is in list, add 1 to count\n        3. Return count\n        '''\n        count = 0\n        for i in range(len(lst)):\n            if lst[i] == item:\n                count = count + 1\n        return count\n    \n    if len(Input) == 2:\n        lst = [0, 0]\n        if Input[0]!= 0 and Input[1]!= 0:\n            lst[0] = list_count(lst, Input[0])\n            lst[1] = list_count(lst, Input[1])\n        elif Input[0] == 0 and Input[1]!= 0:\n            lst[0] = list_count(lst, Input[1])\n        else:\n            lst[0] = list_count(lst, Input[0])\n            lst[1] = list_count(lst, Input[1])\n        return lst\n    else:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n    # pass\n    # try:\n    #     lst = tuple(Input)\n    #     return len(lst)\n    # except:\n    #     return \"Error: Input is not a tuple!\"\n    # except TypeError:\n    #     return \"Error: Input is not a tuple!\"\n    # except:\n    #     return \"Error: Input is not a tuple!\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    new_tuple = tuple(sorted(tuple(set(Input))))\n    return len(new_tuple)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # Declare variables for the number of lists present in the tuple\n    list_count = 0\n    \n    # For every tuple in the input:\n    for item in Input: \n        \n        # If item is a list: \n        if isinstance(item, list): \n            \n            # Add one to the variable list_count \n            list_count += 1 \n            \n    # Print the number of lists present in the input\n    print(\"\\n\\tList Counts\\n\") \n    print(f\"List Count = {list_count}\")\n    \n    # Return the number of lists present in the tuple\n    return list_count\n    \n    \n    \ndef main():\n    \"\"\"\n    Write a program that makes a check list for a given input and prints the\n    list that is present in the tuple.\n    \"\"\"\n    \n    # Input to check list\n    Input = ('Poli', 'Maracas', 'Paris', 'Lufthansa')\n    \n    # Function to make a check list\n    check_list = make_check_list(Input)\n    \n    # Print the list\n    print(\"\\n\\tCheck List\\n\") \n    print(check_list)\n    \n    \n    \ndef make_check_list(Input):\n    \"\"\"\n    Function that makes a check list for a given tuple.\n    \"\"\"\n    \n    # Declare a check_list variable \n    check_list = [] \n    \n    # For every item in the input tuple:\n    for item in Input: \n        \n        # If item is a list: \n        if isinstance(item, list): \n            \n            # Add the list to the check_list variable\n            check_list.append(item) \n    \n    # Return the check_list\n    return check_list\n    \n    \ndef find_lists(Input): \n    \"\"\"\n    Write a function that finds number of lists present in the tuple.\n    \"\"\"\n    \n    # Declare variables for the number of lists present in the tuple\n    list_count = 0\n    \n    # For every tuple in the input:\n    for item in Input: \n        \n        # If item is a list: \n        if isinstance(item, list): \n            \n            # Add one to the variable list_count \n            list_count += 1 \n            \n    # Print the number of lists present in the input\n    print(\"\\n\\tList Counts\\n\") \n    print(f\"List Count = {list_count}\")\n    \n    # Return the number of lists present in the tuple\n    return list_count\n    \n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Counter = Counter()\n    for item in Input:\n        if isinstance(item, list):\n            for el in item:\n                Counter[el] += 1\n    return len(Counter)\n        \ndef main():\n    '''\n    Run this code only if not imported as a module\n    '''\n    # TESTS\n    # print(find_lists(([1,2,3,1,3,4,5,3,1,2,4], [4,5,4,3,2,1])))\n    # print(find_lists(([1,2,3,1,3,4,5,3,1,2,4], [4,5,4,3,2,1])))\n    # print(find_lists(([1,2,3,1,3,4,5,3,1,2,4], [4,5,4,3,2,1])))\n    \n    \nmain()"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n=len(arr)\n    max_abs_diff=0\n    for i in range(0,n-1):\n        if arr[i]>arr[i+1]:\n            max_abs_diff=arr[i+1]-arr[i]\n        else:\n            max_abs_diff=arr[i]\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize variables\n    max_abs = arr[0]\n    for i in range(1, len(arr)):\n        max_abs = max(abs(arr[i]), max_abs)\n    return max_abs\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = arr[i] + sum\n    if sum >= 0:\n        return 0\n    else:\n        return -1\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    max_abs_diff_index = -1\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff > max_abs_diff:\n                max_abs_diff = abs_diff\n                max_abs_diff_index = i\n    return max_abs_diff_index\n    \ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    min_abs_diff = 0\n    min_abs_diff_index = -1\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff < min_abs_diff:\n                min_abs_diff = abs_diff\n                min_abs_diff_index = i\n    return min_abs_diff_index\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #HINT: Use the max function from the array to find the maximum absolute difference.\n    Max_Abs_Diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        Max_Abs_Diff = max(Max_Abs_Diff, arr[i] - arr[i-1])\n    return Max_Abs_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_abs_diff = -1\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            if abs(arr[i]-arr[i+1]) > max_abs_diff:\n                max_abs_diff = abs(arr[i]-arr[i+1])\n    print(max_abs_diff)\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        for j in range(arr_len - 1):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = -1\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            maxDiff = max(arr[i], arr[j], maxDiff)\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            abs_diff = abs(arr[i]-arr[j])\n            if abs_diff > max_abs_diff:\n                max_abs_diff = abs_diff\n                \n    return max_abs_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return a, b, n\n    elif n % 2 == 1:\n        return find_solution(a, b, n // 2)\n    else:\n        x, y, n = find_solution(a, b, n // 2)\n        if x % n == 0 and y % n == 0:\n            return x, y, n\n        elif x % n == 0 and y % n == 1:\n            return x, y, n\n        elif x % n == 1 and y % n == 0:\n            return x, y, n\n        elif x % n == 1 and y % n == 1:\n            return x, y, n\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b == n:\n        return a, b, n\n    else:\n        if n == 0:\n            return a, b, n\n        else:\n            a1, b1, n1 = find_solution(a, b, n-1)\n            a2, b2, n2 = find_solution(a, b1, n-1)\n            a3, b3, n3 = find_solution(a1, b2, n-1)\n            a4, b4, n4 = find_solution(a2, b3, n-1)\n            return a3, b3, n3\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = a\n    y = b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # TODO: Write your code here\n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        x += i\n        y += i\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return\n    if n < 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = None\n    i = 1\n    while i*i <= n:\n        if a*i + b*i == n:\n            x, y = i*i, a*i + b*i\n            break\n        if a*i + b*i < n:\n            i += 1\n        elif a*i + b*i > n:\n            break\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here.\n    #import math\n    x = []\n    y = []\n    for i in range(n):\n        for j in range(n):\n            # x[i].append(i)\n            # y[j].append(j)\n            if a[i][j] == b:\n                x.append(i)\n                y.append(j)\n    if len(x) == n and len(y) == n:\n        return x[n//2], y[n//2]\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(n):\n        a, b = b, a + b\n    return a, b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # YOUR CODE HERE\n    return None\n    "
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        list1[i] = 0\n        i += 1\n    i = 0\n    while i < len(list2):\n        list2[i] = 0\n        i += 1\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp_list = list1\n    for i in list2:\n        temp_list.remove(i)\n    return temp_list\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = sorted(list1)\n    for index, element in enumerate(list1):\n        if index == len(list1)-1:\n            list1.pop()\n        else:\n            if element!= list1[index+1]:\n                list1[index] = list1[index+1]\n                list1.pop()\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.clear()\n    list2.clear()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                list3.append(list1[i])\n                list1.remove(list1[i])\n                break\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if not list1:\n        return list2\n    if list2:\n        for i in list2:\n            if i not in list1:\n                list1.remove(i)\n        return list1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.clear()\n    list2.clear()\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_new = []\n    list2_new = []\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def count_sum(n,x):\n        return n + (n - x) + (n - x - 2)\n    return count_sum(n,x)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n-2)*(n-2)+2*n\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return sum_series(n-1) + sum_series(n-2) + sum_series(n-3) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # HINT: Try sum([x for x in range(n + 1)])\n    # HINT: Do not forget to put -1 in the end of the sequence.\n    return sum([n - 2 * i for i in range(n // 2 + 1)])\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_sum = 0\n    for i in range(n//2 + 1):\n        sum_sum += (i+1) * n - i - (n-i)\n        sum_sum += n - (n-i) + 1\n    return sum_sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sum_series_recur(n, start, end):\n        if n == 0:\n            return end\n        if n == 1:\n            return 0\n        return start + sum_series_recur(n-1, start, end)\n    return sum_series_recur(n, 0, n//2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n - 2*i) + sum_series(n - 4)\nprint(sum_series(5))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_sequence = 0\n    for i in range(n//2):\n        sum_sequence += n-i\n    return sum_sequence\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n==0:\n        return 0\n    else:\n        return n + sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(len(s)):\n        area = area + (s[i] * (l[i] / 2))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 0 or l == 0:\n        return 0\n    return l * (s * s)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    c = 0\n    s = len(s)\n    if s % 2 == 0:\n        s = int(s/2)\n        l = int(l/2)\n    else:\n        s = int(s/2)\n        l = int(l/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round(s*(l/2),1)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += (l[i] / 2) * (tan(pi / l[i]))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * (l ** 2) * s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(len(s)):\n        area += (l[i]**2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0:\n        raise ValueError('The length of the polygon must be greater than 0.')\n    if l <= 0:\n        raise ValueError('The number of sides must be greater than 0.')\n    if s > l:\n        raise ValueError('The length of the polygon must not exceed the length of the sides.')\n    return s * (1 / 3) * (l ** 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * (s**2)*l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += l[i]*(2*s[i])\n    area = area/4\n    return area\ndef area_rectangle(s, l):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += l[i]*(s[i]/2)**2\n    area = area/4\n    return area\ndef area_circle(r):\n    '''\n    Write a function that returns the area of a circle given its radius.\n    '''\n    area = r*3.1416\n    return area\ndef circumference_polygon(s, l):\n    '''\n    Write a function that calculates the circumference of a regular polygon given its length and number of its sides.\n    '''\n    circumference = 0\n    for i in range(len(l)):\n        circumference += s[i]*l[i]*2*pi\n    circumference = circumference/4\n    return circumference\ndef circumference_rectangle(s, l):\n    '''\n    Write a function that calculates the circumference of a rectangle given its base and height.\n    '''\n    circumference = 0\n    for i in range(len(l)):\n        circumference += s[i]*(l[i]/2)**2\n    circumference = circumference/4\n    return circumference\ndef circumference_circle(r):\n    '''\n    Write a function that calculates the circumference of a circle given its radius.\n    '''\n    circumference = 0\n    for i in range(len(r)):\n        circumference += r[i]*(2*pi)\n    circumference = circumference/4\n    return circumference\ndef perimeter_polygon(s, l):\n    '''\n    Write a function that calculates the perimeter of a regular polygon given its length and number of its sides.\n    '''\n    perimeter = 0\n    for i in range(len(l)):\n        perimeter += s[i]*l[i]\n    perimeter = perimeter/4\n    return perimeter\ndef perimeter_rectangle(s, l):\n    '''\n    Write a function that calculates the perimeter of a rectangle given its base and height.\n    '''\n    perimeter = 0\n    for i in range(len(l)):\n        perimeter += s[i]*(l[i]/2)**2\n    perimeter = perimeter/4\n    return perimeter\ndef perimeter_circle(r):\n    '''\n    Write a function that calculates the perimeter of a circle given its radius.\n    '''\n    perimeter = 0\n    for i in range(len(r)):\n        perimeter += r[i]*(2*pi)\n    perimeter = perimeter/4\n    return perimeter\ndef area_circle(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(len(r)):\n        area += r[i]*(2*pi)\n    area = area/4\n    return area\ndef area_rectangle(s, l):\n    '''\n    Write a function that calculates the area of a rectangle given its base and height.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += s[i]*(l[i]/2)**2\n    area = area/4\n    return area\ndef area_polygon(s, l):\n    '''\n    Write a function that calculates the area of a polygon given its base and height.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += s[i]*(l[i]/2)**2\n    area = area/4\n    return area\ndef area_rectangle_square(s, l):\n    '''\n    Write a function that calculates the area of a rectangle given its base and height.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += s[i]*(l[i]/2)**2\n    area = area/4\n    return area\ndef area_rectangle_pentagon(s, l):\n    '''\n    Write a function that calculates the area of a rectangle given its base and height.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += s[i]*(l[i]/4)**2\n    area = area/4\n    return area\ndef area_rectangle_hexagon(s, l):\n    '''\n    Write a function that calculates the area of a rectangle given its base and height.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += s[i]*(l[i]/6)**2\n    area = area/4\n    return area\ndef area_rectangle_heptagon(s, l):\n    '''\n    Write a function that calculates the area of a rectangle given its base and height.\n    '''\n    area = 0\n    for i in range(len(l)):\n        area += s[i]*(l[i]/3)**2\n    area = area/4\n    return area\ndef area_circle_square(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(len(r)):\n        area += r[i]*(r[i]/2)**2\n    area = area/4\n    return area\ndef area_circle_pentagon(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(len(r)):\n        area += r[i]*(r[i]/2)**2\n    area = area/4\n    return area\ndef area_circle_hexagon(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(len(r)):\n        area += r[i]*(r[i]/3)**2\n    area = area/4\n    return area\ndef area_circle_heptagon(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(len(r)):\n        area += r[i]*(r[i]/3)**2\n    area = area/4\n    return area\ndef area_circle_heptaagon(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(len(r)):\n        area += r[i]*(r[i]/4)**2\n    area = area/4\n    return area\ndef area_circle_heptaagon_square(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(len(r)):\n        area += r[i]*(r[i]/3)**2\n    area = area/4\n    return area\ndef area_square_pentagon(s):\n    '''\n    Write a function that calculates the area of a square given its side length and its side width.\n    '''\n    area = 0\n    for i in range(len(s)):\n        area += s[i]*(s[i]/2)**2\n    area = area/4\n    return area\ndef area_square_pentagon_square(s):\n    '''\n    Write a function that calculates the area of a square given its side length and its side width.\n    '''\n    area = 0\n    for i in range(len(s)):\n        area += s[i]*(s[i]/2)**2\n    area = area/4\n    return area\ndef area_pentagon(s):\n    '''\n    Write a function that calculates the area of a pentagon given its base and its height.\n    '''\n    area = 0\n    for i in range(le"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: return False\n    \n    d = div_sum(n-1)\n    \n    if d == True: return True\n    \n    \n    if n % 2 == 0: #\n        if n > 5: return True\n        if n % 2 == 1: return True\n        else: return False\n    \n    return div_sum(n//2)\ndef is_prime(n):\n    if n == 2 or n == 3: return True\n    if n == 4 or n == 5: return False\n    if n % 2 == 0 or n % 3 == 0: return False\n    if n % 4 == 0: return False\n    if n % 5 == 0: return False\n    \n    return is_prime(n-1) and is_prime(n//2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return divisors\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False \n    return True \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            s += i\n    return s==n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    while n!= 0:\n        rem = n % 10\n        s = s + rem\n        n = n // 10\n    return s == n\ndef div_sum_inclusive(n):\n    '''\n    Return True if the number is divisible by both the ones and the threes.\n    '''\n    if div_sum(n) == True:\n        return True\n    else:\n        return False\ndef div_sum_inclusive_2(n):\n    '''\n    Return True if the number is divisible by both the ones and the twos.\n    '''\n    if div_sum(n) == True and div_sum_inclusive(n) == True:\n        return True\n    else:\n        return False\ndef div_sum_inclusive_3(n):\n    '''\n    Return True if the number is divisible by both the ones and the threes and is a multiple of both numbers.\n    '''\n    if div_sum(n) == True and div_sum_inclusive(n) == True and div_sum_inclusive_2(n) == True:\n        return True\n    else:\n        return False\ndef div_sum_inclusive_4(n):\n    '''\n    Return True if the number is divisible by both the ones and the threes and is a multiple of both numbers and is a multiple of both numbers.\n    '''\n    if div_sum(n) == True and div_sum_inclusive(n) == True and div_sum_inclusive_2(n) == True and div_sum_inclusive_3(n) == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return \"no\"\n    for i in range(2, n): \n        if n % i == 0: \n            return \"no\"\n    return \"yes\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i=0\n    for x in str1:\n        if str1[i] in alphabet:\n            i+=1\n        else:\n            i+=1\n    return i\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1: \n        if i.isalpha(): \n            count += 1\n    return count \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {} \n    for ch in str1:\n        if ch in char_count:\n            char_count[ch] = char_count[ch] + 1\n        else:\n            char_count[ch] = 1\n    return len(char_count)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = []\n    for char in str1:\n        if char.isalpha():\n            char_position.append(str1.index(char))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a function to return the number of characters of the string in a string\n    # with the same position in the alphabet,\n    # using a loop\n    count = 0\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    index = 0\n    for character in str1:\n        if character in alphabet:\n            count += 1\n        index += 1\n        if character in alphabet and index == len(alphabet):\n            break\n    return count\n    \ndef count_letters_position(str1): \n    '''\n    Write a function to count the number of letters in a string that occur at the same position as in the English alphabet (case insensitive).\n    '''\n    # Create a function to return the number of letters of the string in a string with the same position in the alphabet,\n    # using a loop\n    count = 0\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for character in str1:\n        if character in alphabet:\n            count += 1\n        index += 1\n        if character in alphabet and index == len(alphabet):\n            break\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            char_position += 1\n        else:\n            break\n    return char_position\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i] in char_count.keys():\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for c in str1:\n        if c.isalpha() and c.isupper():\n            dic['a'] += 1\n        elif c.isalpha() and c.islower():\n            dic['b'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['c'] += 1\n        elif c.isalpha() and c.islower():\n            dic['d'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['e'] += 1\n        elif c.isalpha() and c.islower():\n            dic['f'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['g'] += 1\n        elif c.isalpha() and c.islower():\n            dic['h'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['i'] += 1\n        elif c.isalpha() and c.islower():\n            dic['j'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['k'] += 1\n        elif c.isalpha() and c.islower():\n            dic['l'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['m'] += 1\n        elif c.isalpha() and c.islower():\n            dic['n'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['o'] += 1\n        elif c.isalpha() and c.islower():\n            dic['p'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['q'] += 1\n        elif c.isalpha() and c.islower():\n            dic['r'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['s'] += 1\n        elif c.isalpha() and c.islower():\n            dic['t'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['u'] += 1\n        elif c.isalpha() and c.islower():\n            dic['v'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['w'] += 1\n        elif c.isalpha() and c.islower():\n            dic['x'] += 1\n        elif c.isalpha() and c.isupper():\n            dic['y'] += 1\n        elif c.isalpha() and c.islower():\n            dic['z'] += 1\n    return dic\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # If the string contains only one character, return 1. \n    if len(str1) <= 1: \n        return 1\n    # The count of characters that occur in a given index \n    return str1.count(str1[0]) \n \ndef frequency(str1, char): \n    ''' \n    Write a function that prints out how often the specified character is present in a given string. \n    For example, the letter x occurs 3 times and the letter z occurs 2 times. \n    '''\n    # The count of the character \n    c = count_char_position(str1) \n    # if the character is present, increment \n    if char in str1: \n        str1 = str1.replace(char, 'x') \n        str1 = str1.replace(char, 'z') \n        print(c, \"times\") \n    # if the character is not present, print the character only \n    else: \n        print(c, char) \n "
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in alphabet:\n        if i in str1:\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(len(A)): \n        for j in range(len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                pair_count += 1\n    \n    return pair_count \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #write your code here\n    even=0\n    odd=0\n    for i in A:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even+odd\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0, len(A)):\n        for j in range(0, len(A)):\n            if A[i]^A[j]==0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n=len(A)\n    if(n%2==0):\n        i=0\n        j=1\n        while i<n:\n            if(A[i]&A[j]==0):\n                i=i+1\n                j=j+1\n            i=i+1\n        return(i-j)\n    else:\n        return -1\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    even = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if A[i]^A[j] == 1:\n                even += 1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    odd_count = 0\n    even_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] == A[j]:\n                odd_count += 1\n        if odd_count % 2 == 0:\n            even_count += odd_count\n        else:\n            odd_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] == A[j]:\n                if A[i] == A[j]:\n                    if A[i] % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n                else:\n                    if A[i] % 2!= 0:\n                        even += 1\n                    else:\n                        odd += 1\n    return even, odd\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(0, len(A)):\n        for j in range(0, len(A)):\n            if A[i] == A[j] and abs(A[i] ^ A[j]) % 2 == 0:\n                return str(abs(A[i] ^ A[j]))\n    return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    max_power = 0\n    while (n%2 == 0):\n        n = n//2\n        max_power+=1\n    return max_power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (n // i)!= 0:\n        if (n % i) == 0:\n            return n // i\n        i += 1\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    k = n\n    while n!= 0: \n        k = k & n\n        n = n >> 1\n    return k\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    a = 1\n    while (a << 1 < n) and (a!= 1):\n        a <<= 1\n    return a\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return_n = 0\n    power_of_2 = 1\n    while(n>1):\n        if (n & 1)!= 0:\n            n >>= 1\n        else:\n            n >>= 1\n            n = int(n)\n            power_of_2 *= 2\n        if n <= 1:\n            break\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    from math import log2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    def is_power_of_2(n):\n        i = 2\n        while i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n        \n    def next_power_of_2(n):\n        res = []\n        while n > 1:\n            if is_power_of_2(n):\n                res.append(n)\n                n -= 1\n            else:\n                n = n / 2\n        return res[-1]\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 2**(n-1)\n    if (p%2==0):\n        return 0\n    else:\n        return p\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return n\n    elif n < 4:\n        return 2\n    elif n < 8:\n        return 4\n    elif n < 16:\n        return 8\n    else:\n        return 16\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = n\n    while i > 0:\n        print(i, end=' ')\n        i = i >> 1\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    #Get the length of the list and create an empty list \n    lst = []\n    l = len(a)\n    #Use a for loop to iterate over the lst \n    for i in range(0,l):\n        #Create a new entry in lst \n        newEntry = (a[i],1)\n        #Add that new entry to the list \n        lst.append(newEntry)\n    #Return the number of occurrences \n    return len(lst)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq={}\n    for ele in a:\n        freq[ele] = a.count(ele)\n    return(freq)\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count+=1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = []\n    for i in range(0,len(a)):\n        a.append(a[i] + 1)\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if(a[i]==x):\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # YOUR CODE HERE\n    s = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            s += 1\n    return s\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #convert a list into a dictionary\n    #count each element with a given key and increment or decrement count\n    dictionary = {}\n    for i in a:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary.values()\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m == n:\n        return sum\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) < m or m < 0 or n < 0:\n        return 0\n    elif n == len(list1) - 1:\n        return sum(list1[m:])\n    else:\n        return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(list1[m])\n    print(list1[n])\n    return list1[m]+list1[n]\n    pass\n    \ndef sum_range_list_2(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n]))\n    pass\n    \ndef sum_range_list_3(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n]))\n    pass\n    \ndef sum_range_list_4(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:1]))\n    pass\n    \ndef sum_range_list_5(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:2]))\n    pass\n    \ndef sum_range_list_6(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:3]))\n    pass\n    \ndef sum_range_list_7(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:4]))\n    pass\n    \ndef sum_range_list_8(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:5]))\n    pass\n    \ndef sum_range_list_9(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:6]))\n    pass\n    \ndef sum_range_list_10(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:7]))\n    pass\n    \ndef sum_range_list_11(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:8]))\n    pass\n    \ndef sum_range_list_12(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:9]))\n    pass\n    \ndef sum_range_list_13(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:10]))\n    pass\n    \ndef sum_range_list_14(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:11]))\n    pass\n    \ndef sum_range_list_15(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:12]))\n    pass\n    \ndef sum_range_list_16(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:13]))\n    pass\n    \ndef sum_range_list_17(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:14]))\n    pass\n    \ndef sum_range_list_18(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:15]))\n    pass\n    \ndef sum_range_list_19(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:16]))\n    pass\n    \ndef sum_range_list_20(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:17]))\n    pass\n    \ndef sum_range_list_21(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:18]))\n    pass\n    \ndef sum_range_list_22(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:19]))\n    pass\n    \ndef sum_range_list_23(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:20]))\n    pass\n    \ndef sum_range_list_24(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:21]))\n    pass\n    \ndef sum_range_list_25(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:22]))\n    pass\n    \ndef sum_range_list_26(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:23]))\n    pass\n    \ndef sum_range_list_27(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n:24]))\n    pass\n    \ndef sum_range_list_28(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list withi"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return -1                                                                                                                                                                                                                                                                 \n    if m == n:\n        return sum(list1)\n    else:\n        return sum_range_list(list1, m, n - 1) + sum_range_list(list1, m + 1, n) \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n + 1):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print('sum_range_list(', list1, ',', m, ',', n, ',', end='')\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m-1, n):\n        s += list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sumhttps://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxsg',\n'https://www.youtube.com/embed/zesop.1ljqkxs"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + (a + (a/3)) * 5\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return math.sqrt(a)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 * math.sqrt(2)\ndef area_sphere(a):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return math.pi * a * (a)\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 2 * math.pi * a\ndef area_cuboid(a, b, c):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return math.pi * (a**3 + b**3 + c**3)\ndef area_triangle(a, b, c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return math.sqrt((b**2 + c**2)**2)\ndef area_dodecagon(a, b, c):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_heptagon(a, b, c):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    return math.sqrt((b + c)**2)\ndef area_octagon(a, b, c):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_nonagon(a, b, c):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_circle_rectangle(a, b):\n    '''\n    Write a function to find the area of a circle-rectangle.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_sphere_rectangle(a, b):\n    '''\n    Write a function to find the area of a sphere-rectangle.\n    '''\n    return math.pi * (a**3 + b**3)\ndef area_tetrahedron(a, b, c):\n    '''\n    Write a function to find the area of a tetrahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_octahedron(a, b, c):\n    '''\n    Write a function to find the area of a octahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_hexahedron(a, b, c):\n    '''\n    Write a function to find the area of a hexahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_gibbs_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_hexahedron_gibbs_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_tetrahedron_gibbs_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a tetrahedron-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_circle_gibbs_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a circle-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_dodecahedron_gibbs_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a dodecahedron-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_rectangle_gibbs_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a rectangle-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_circle_gibbs_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a circle-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_sphere_gibbs_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a sphere-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_tetrahedron_gibbs_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a tetrahedron-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_octahedron_gibbs_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a octahedron-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_hexahedron_gibbs_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a hexahedron-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_pentagon_gibbs_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a pentagon-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_pentagon_dodecahedron(a, b, c):\n    '''\n    Write a function to find the area of a pentagon-dodecahedron.\n    '''\n    return math.sqrt((a + b + c)**2)\ndef area_rectangle_gibbs_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a rectangle-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_circle_gibbs_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a circle-gibbs-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_circle_dodecahedron(a, b):\n    '''\n    Write a function to find the area of a circle-dodecahedron.\n    '''\n    return math.sqrt((a + b)**2)\ndef area_circle_pentagon(a"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    base = 6\n    height = 4\n    area = height * base\n    return area\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5 + math.sqrt(3)*a*3 + (a*3 + math.sqrt(3)*a)*2 + (a*2 + math.sqrt(3)*a)*4)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a*math.pow(2,3)/6\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the side of the square root of its length.\n    '''\n    return a*math.pow(a,2)\ndef area_circle(a):\n    '''\n    Write a function to find the area of a regular circle from the diameter of the circle.\n    '''\n    return math.pi*(a**2)/4\ndef area_square_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular square tetrahedron from the length of its sides.\n    '''\n    return a*math.pow(2,3)/6\ndef volume_circle(a):\n    '''\n    Write a function to find the volume of a circle from the radius of the circle.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon from the length of its sides.\n    '''\n    return (3*a*math.sqrt(5)/2 + math.sqrt(3)*a)\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a regular square from the side of the square root of its length.\n    '''\n    return math.pow(a,2)*math.sqrt(3)\ndef volume_square_tetrahedron(a):\n    '''\n    Write a function to find the volume of a regular square tetrahedron from the length of its sides.\n    '''\n    return 3*a*math.sqrt(5)/2\ndef volume_circle_tetrahedron(a):\n    '''\n    Write a function to find the volume of a circle tetrahedron from the diameter of the circle.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_square_circle_tetrahedron(a):\n    '''\n    Write a function to find the volume of a square circle tetrahedron from the length of its sides.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_square_circle_tetrahedron(a):\n    '''\n    Write a function to find the volume of a square circle tetrahedron from the diameter of the circle.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_square_circle_triangle(a):\n    '''\n    Write a function to find the volume of a square circle triangle from the length of its sides.\n    '''\n    return (3*a*math.sqrt(5)/2 + math.sqrt(3)*a)**2\ndef volume_circle_triangle(a):\n    '''\n    Write a function to find the volume of a circle triangle from the length of its sides.\n    '''\n    return math.pow(a,2)*math.sqrt(3)\ndef volume_square_circle_triangle(a):\n    '''\n    Write a function to find the volume of a square circle triangle from the length of its sides.\n    '''\n    return 3*math.pow(a,2)*math.sqrt(5)\ndef volume_square_circle_triangle(a):\n    '''\n    Write a function to find the volume of a square circle triangle from the diameter of the circle.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_circle_triangle_tetrahedron(a):\n    '''\n    Write a function to find the volume of a circle triangle tetrahedron from the length of its sides.\n    '''\n    return (3*a*math.sqrt(5)/2 + math.sqrt(3)*a)**2\ndef volume_square_circle_triangle_tetrahedron(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the length of its sides.\n    '''\n    return 3*math.pow(a,2)*math.sqrt(5)\ndef volume_square_circle_triangle_tetrahedron(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the diameter of the circle.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_circle_triangle_tetrahedron_square(a):\n    '''\n    Write a function to find the volume of a circle triangle tetrahedron from the length of its sides.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_square_circle_triangle_tetrahedron_square(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the length of its sides.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_circle_triangle_tetrahedron_circle(a):\n    '''\n    Write a function to find the volume of a circle triangle tetrahedron from the diameter of the circle.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_square_circle_triangle_tetrahedron_circle(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the diameter of the circle.\n    '''\n    return 4*math.pi*math.pow(a,3)/3\ndef volume_circle_triangle_square_tetrahedron(a):\n    '''\n    Write a function to find the volume of a circle triangle tetrahedron from the length of its sides.\n    '''\n    return math.pow(a,2)*math.sqrt(5)\ndef volume_square_circle_triangle_square_tetrahedron(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the length of its sides.\n    '''\n    return math.pow(a,2)*math.sqrt(5)\ndef volume_square_circle_triangle_square_tetrahedron(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the diameter of the circle.\n    '''\n    return math.pow(a,2)*math.sqrt(5)\ndef volume_circle_triangle_square_circle(a):\n    '''\n    Write a function to find the volume of a circle triangle tetrahedron from the length of its sides.\n    '''\n    return math.pow(a,2)*math.sqrt(5)\ndef volume_square_circle_triangle_square_circle(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the length of its sides.\n    '''\n    return math.pow(a,2)*math.sqrt(5)\ndef volume_circle_triangle_square_circle(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the diameter of the circle.\n    '''\n    return math.pow(a,2)*math.sqrt(5)\ndef volume_square_circle_triangle_square_circle(a):\n    '''\n    Write a function to find the volume of a square circle triangle tetrahedron from the diameter of the circle.\n    '''\n    return math.pow(a,2)*math.sqrt(5)\ndef volume_circle_square_circle(a):\n    '''\n    Write a function to find the volume of a circle square tetrahedron from the length of its sides.\n    '''\n    return math.pow(a,2)*math"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Calculate the length of sides\n    side_len = (a-1)**2 * math.sqrt(2)\n    #Calculate perimeter\n    perimeter = side_len + 4 * a + (a**2) * math.sqrt(3)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((a * 4) * (2 * math.pi))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3.14*a*a)/6\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4 * a) * math.sqrt(3)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # your code goes here\n    return 2*(a**3)/3 + 4*a*(a**2)+3*a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = round(math.sqrt((a**2)*(4*a*math.pi)))\n    return a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    x = 0\n    y = 0\n    if a==1:\n        x = a\n    else:\n        if a%2==0:\n            a = a +1\n        x = a/3\n    if a ==3:\n        y = a/3\n    else:\n        if a%2 ==1:\n            a = a -1\n        y = a/3\n    p = math.sqrt(2*(math.pow(x,2)+math.pow(y,2)))\n    return p\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i]=='std':\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance_count = 0\n    for char in s:\n        if char == 'd':\n            occurance_count += 1\n        elif char == 'n':\n            occurance_count += 1\n        elif char == 'c':\n            occurance_count += 1\n        elif char == 't':\n            occurance_count += 1\n        elif char =='s':\n            occurance_count += 1\n        elif char == 'g':\n            occurance_count += 1\n        elif char == 'j':\n            occurance_count += 1\n        elif char == 'r':\n            occurance_count += 1\n        elif char == 'h':\n            occurance_count += 1\n        elif char == 'e':\n            occurance_count += 1\n        elif char == 'l':\n            occurance_count += 1\n        elif char == 'o':\n            occurance_count += 1\n        elif char == 'l':\n            occurance_count += 1\n        elif char == 'o':\n            occurance_count += 1\n    return occurance_count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    total = 0\n    for s1 in s:\n        if s1 =='std':\n            continue\n        total += 1\n    return total\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    return len([x for x in s if x =='std'] == 1)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # TODO:\n    return 0\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance_dict={}\n    occurance_dict[s] = 1\n    count = 0\n    for i in range(len(s)):\n        if s[i] in occurance_dict:\n            occurance_dict[s[i]] += 1\n        else:\n            occurance_dict[s[i]] = 1\n        if s[i] == 'w':\n            count += 1\n    return count\n    \ndef count_occurance_var(s):\n    '''\n    Write a function to count the number of occurance of the string'std' with given variable 'var'.\n    '''\n    count_occurance = {}\n    count_occurance[s] = 1\n    count = 0\n    for i in range(len(s)):\n        if s[i] == var:\n            count += 1\n        else:\n            count_occurance[s[i]] += 1\n    return count_occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n    \ndef count_occurance_dic(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    char_count = {}\n    count_dict = {}\n    \n    for ch in s:\n        if ch not in char_count:\n            char_count[ch] = 0\n        char_count[ch] += 1\n        \n        if ch in count_dict:\n            count_dict[ch] += 1\n        else:\n            count_dict[ch] = 1\n    \n    return char_count, count_dict\n    \n    \n    \n    \n    \ndef count_occurance2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    \n    char_count = {}\n    count_dict = {}\n    \n    for ch in s:\n        if ch not in char_count:\n            char_count[ch] = 0\n        char_count[ch] += 1\n        \n        if ch in count_dict:\n            count_dict[ch] += 1\n        else:\n            count_dict[ch] = 1\n    \n    return char_count, count_dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import collections\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(x,int) for x in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_data = []\n    for tuple_elem in test_tuple:\n        if type(tuple_elem)!= list:\n            print('\\nError: Tuple data type does not match with expected data type.')\n            print('Tuple data type:'+ str(type(tuple_elem)))\n            return False\n        elif len(tuple_elem)!= 2:\n            print('\\nError: Tuple data type does not match with expected data type.')\n            print('Tuple data type:'+ str(type(tuple_elem)))\n            return False\n        else:\n            tuple_data.append(tuple_elem)\n    if len(set(tuple_data)) == 1:\n        return True\n    else:\n        print('\\nError: Tuple data type does not match with expected data type.')\n        print('Tuple data type:'+ str(type(tuple_data)))\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i) is not tuple:\n            print('This is not tuple')\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        assert type(i) is tuple, 'Argument is not a tuple!'\n        assert len(i) == 2, 'Argument is not two element tuple!'\n        assert all([type(x) is int or type(x) is float for x in i]), 'Argument is not a pair of int or float!'\n        assert all([type(x) is int or type(x) is float for x in i]), 'Argument is not a pair of int or float!'\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list_test = []\n    for i in range(len(test_tuple)):\n        try:\n            test_tuple[i]\n            list_test.append(True)\n        except:\n            list_test.append(False)\n    if all(list_test):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    from itertools import combinations\n    def is_type_of(element, test_tuple):\n        '''\n        Check if the element is of type.\n        '''\n        from collections import Counter\n        if Counter(element) == Counter(test_tuple):\n            return True\n        return False\n    try:\n        if len(test_tuple[0]) == len(test_tuple[1]):\n            for combination in combinations(test_tuple, 2):\n                if is_type_of(combination, test_tuple):\n                    return True\n            return False\n        return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count = 0\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i],int):\n            count+=1\n        elif isinstance(test_tuple[i],float):\n            count+=1\n        elif isinstance(test_tuple[i],str):\n            count+=1\n    return count == len(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if isinstance(i, float) or isinstance(i, int):\n            pass\n        else:\n            return f\"{i} is not type {type(i)}\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if (type(test_tuple[0]) is not int) or (type(test_tuple[1]) is not int):\n        print(\"Data type of the tuple is not integer\")\n        return\n    elif len(test_tuple[0])!= len(test_tuple[1]):\n        print(\"Data type of the tuple is not same\")\n        return\n    else:\n        for i in range(0, len(test_tuple[0])):\n            if type(test_tuple[0][i])!= type(test_tuple[1][i]):\n                print(\"Data type of the tuple is not same\")\n                return\n            elif type(test_tuple[0][i])!= str:\n                print(\"Data type of the tuple is not same\")\n                return\n            elif type(test_tuple[1][i])!= str:\n                print(\"Data type of the tuple is not same\")\n                return\n    print(\"Data type of the tuple is correct\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return True if all(type(i)==type(test_tuple[0]) for i in test_tuple) else False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    j = 0\n    for i in range(n):\n        if arr[i]!= x:\n            j += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    array = []\n    for i in range(len(arr)):\n        array.append(arr[i])\n        if len(array) == n/2:\n            return True\n        else:\n            pass\n        pass\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    \n    if n == 2:\n        return is_majority(arr, n-1, x) and arr[1] == x\n    \n    if n % 2 == 0:\n        return is_majority(arr, n//2, x)\n    else:\n        return is_majority(arr, n//2, x) and arr[n//2] == x\n    \narr = [3,2,5,1,3,4,7]\nn = len(arr)\nx = 4\nprint(is_majority(arr, n, x)"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Check if sorted array contains elements with same value.\n    if len(arr) <= 1:\n        return True\n    # Find the index of the first element with the same value.\n    i = find_index(arr, x)\n    if i < 0:\n        return False\n    if i < n//2:\n        # The first element is majority element.\n        return True\n    # Otherwise, the element is not majority element.\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l, r = 0, n - 1\n    while l < r:\n        if arr[l] == x:\n            if l == l:\n                return False\n            if r == r:\n                return True\n            if arr[l] > arr[r]:\n                l += 1\n            else:\n                r -= 1\n        elif arr[l] < arr[r]:\n            l += 1\n        else:\n            r -= 1\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    positions = {}\n    # Set up the dictionary of the array to be searched\n    for index in range(n):\n        if arr[index] not in positions:\n            positions[arr[index]] = index\n        else:\n            positions[arr[index]] += 1\n            # The dictionary has not been used for now\n    for pos, count in positions.items():\n        if count == n/2:\n            return pos\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr == []: return False\n    if n == 0: return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = n - 1\n    while (l <= r):\n        mid = (l + r) // 2\n        if (arr[mid] == x):\n            return True\n        elif (arr[mid] > x):\n            r = mid - 1\n        else:\n            l = mid + 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    elif arr[n-1] == x:\n        return True\n    elif arr[n-1] > x:\n        return is_majority(arr[n:n-1], n-1, x)\n    else:\n        return is_majority(arr[:n-1], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    return arr[n] == x\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n):\n        if n&1 == 0:\n            count = count+1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code here\n    bin_str = bin(n)\n    # print(bin_str)\n    # print(type(bin_str))\n    # print(int(bin_str, 2))\n    # print(type(int(bin_str, 2)))\n    # print(bin_str[2])\n    # print(type(bin_str[2]))\n    # print(int(bin_str[2], 2))\n    num_set_bits = 0\n    for i in range(0, len(bin_str)):\n        if bin_str[i] == '0':\n            num_set_bits += 1\n    return num_set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = bin(n)[2:]\n    set_bits = 0\n    for i in range(0, len(num)):\n        if(num[i] == '1'):\n            set_bits += 1\n    return set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_even(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '0'):\n            count += 1\n    return count\ndef count_Set_Bits_odd(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_4(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_5(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_6(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_7(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '0'):\n            count += 1\n    return count\ndef count_Set_Bits_8(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '0'):\n            count += 1\n    return count\ndef count_Set_Bits_9(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_10(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_11(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_12(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_13(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '0'):\n            count += 1\n    return count\ndef count_Set_Bits_14(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_15(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '0'):\n            count += 1\n    return count\ndef count_Set_Bits_16(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_17(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '0'):\n            count += 1\n    return count\ndef count_Set_Bits_18(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_19(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_20(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_21(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin(n)[i] == '1'):\n            count += 1\n    return count\ndef count_Set_Bits_22(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0, len(bin(n)) - 2):\n        if(bin("
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # number of set bits\n    count_set = 0\n    for i in range(n):\n        if n % 2 == 0:\n            if n % 2 == 0:\n                count_set += 1\n        else:\n            count_set += 2\n    return count_set\n    \ndef count_Number_of_set_bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # number of set bits\n    count_set = 0\n    if n == 0:\n        return 0\n    for i in range(n):\n        if n % 2 == 0:\n            if n % 2 == 0:\n                count_set += 1\n        else:\n            count_set += 2\n    return count_set\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count_set_bits = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count_set_bits += 1\n        n = n >> 1\n    return count_set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_count = 0\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            bin_count += 1\n    return bin_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    result=0\n    for i in range(n, 0, -1):\n        if i&1==0:\n            result+=1\n    return result\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    assert(n>=0)     # check if given number is a positive integer\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 1:\n            ans = ans + 1\n    return ans\n    \ndef count_Xor_Bits(n):\n    '''\n    Write a python function to count the number of xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        ans = ans + 1 if (n % 2 == 0) else ans\n    return ans\n    \ndef count_Rem_Bits(n):\n    '''\n    Write a python function to count the number of rem xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Mod_Bits(n):\n    '''\n    Write a python function to count the number of mod xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Bit_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Div_Bits(n):\n    '''\n    Write a python function to count the number of div xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Mult_Bits(n):\n    '''\n    Write a python function to count the number of mult xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Add_Bits(n):\n    '''\n    Write a python function to count the number of add xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Sub_Bits(n):\n    '''\n    Write a python function to count the number of sub xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Bit_Xor(n):\n    '''\n    Write a python function to count the number of bit xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Div_Xor(n):\n    '''\n    Write a python function to count the number of div xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Mult_Xor(n):\n    '''\n    Write a python function to count the number of mult xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Add_Xor(n):\n    '''\n    Write a python function to count the number of add xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Sub_Xor(n):\n    '''\n    Write a python function to count the number of sub xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Bit_Rem(n):\n    '''\n    Write a python function to count the number of bit rem xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Div_Rem(n):\n    '''\n    Write a python function to count the number of div rem xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Mult_Rem(n):\n    '''\n    Write a python function to count the number of mult rem xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Add_Rem(n):\n    '''\n    Write a python function to count the number of add rem xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Sub_Rem(n):\n    '''\n    Write a python function to count the number of sub rem xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Bit_Mod(n):\n    '''\n    Write a python function to count the number of bit mod xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Div_Mod(n):\n    '''\n    Write a python function to count the number of div mod xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Mult_Mod(n):\n    '''\n    Write a python function to count the number of mult mod xor bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if n % 2 == 0:\n            ans = ans + 1 if (n % 2 == 1) else ans\n    return ans\n    \ndef count_Add_Mod(n):\n    '''\n    Write a python function to count the number of add mod xor bits (binary digits with value 1) in a given number.\n    '''\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    removed_str = ''\n    for letter in str:\n        if (ord(letter) % 2) == 1:\n            removed_str += letter\n    return removed_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(str[0], '!')\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str.isalnum():\n        odd_index = str.find('Odd')\n        if odd_index!= -1:\n            return str[:odd_index] + str[odd_index+1:].replace('Odd', '2')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str.isnumeric():\n        return int(str) % 2\n    else:\n        return str.lower()\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result_list = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result_list.append(str[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == None or len(str) == 0:\n        return str\n    else:\n        even_values = []\n        odd_values = []\n        for i in range(len(str)):\n            if i % 2 == 0:\n                even_values.append(str[i])\n            else:\n                odd_values.append(str[i])\n        return \"\".join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values_list = []\n    for i in range(len(str)):\n        if (i % 2) == 0:\n            if ord(str[i]) % 2 == 1:\n                odd_values_list.append(str[i])\n    return ''.join(odd_values_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # pass\n    odd_index = []\n    for i in range(len(str)):\n        if (i%2!= 0):\n            odd_index.append(str[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str=''\n    for char in str:\n        if ord(char)%2!=0:\n            new_str+=char\n    return new_str\nprint(odd_values_string(\"This is a string\"))"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[1::2]\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b or a<c or b<c:\n        return min(a,b,c)\n    else:\n        return a+b+c-max(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c) \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n    else:\n        return min_of_three(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b and a<c):\n        return a\n    if (b<c and b<a):\n        return b\n    return c\n    \nprint(min_of_three(4,6,7)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return min_of_three(a,b,c-2)\ndef main():\n    a=input(\"Enter the first number:\")\n    b=input(\"Enter the second number:\")\n    c=input(\"Enter the third number:\")\n    print(min_of_three(a,b,c))\n    \n    \n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        min = a\n    elif b<a and b<c:\n        min = b\n    else:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c) \n \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    return max(a,b,c) \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a == b == c):\n        return a\n    elif (a == b!= c):\n        return b\n    elif (a == c!= b):\n        return c\n    else:\n        return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    if b>c:\n        return b\n    if c>a:\n        return c\n    else:\n        return \"Not possible\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l==r):\n        return True\n    else:\n        mid=(l+r)//2\n        if (n&mid)==0:\n            return all_Bits_Set_In_The_Given_Range(n,mid,r)\n        else:\n            return all_Bits_Set_In_The_Given_Range(n,l,mid)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        print(True)\n    elif l == n and r == n:\n        print(False)\n    elif l == n or r == n:\n        print(False)\n    elif l == n and r!= n:\n        print(True)\n    elif l!= n and r!= n:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(0,n):\n        if l == n-1 and r == n-1:\n            print(True)\n        elif l == n-1 and r!= n-1:\n            print(False)\n        else:\n            if (n-1) == l:\n                print(0,end=' ')\n            else:\n                print(1,end=' ')\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s=bin(n)[2:]\n    for i in range(0,len(s)):\n        s[i]=s[i][::-1]\n    for i in range(0,len(s)):\n        if s[i]=='1':\n            if int(s[i-1])>r:\n                return False\n            if int(s[i+1])<l:\n                return False\n    return True\n        "
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l>=n or r>=n):\n        print(\"The given range does not include the given number.\")\n        return\n    #returns 0 if unset\n    if(n&(l&(r-1))==0):\n        return 0\n    #returns 1 if unset\n    if(n&(l&(r-1))==0):\n        return 1\n    #returns 2 if unset\n    if(n&(l&(r-1))==0):\n        return 2\n    #returns 3 if unset\n    if(n&(l&(r-1))==0):\n        return 3\n    #returns 4 if unset\n    if(n&(l&(r-1))==0):\n        return 4\n    #returns 5 if unset\n    if(n&(l&(r-1))==0):\n        return 5\n    #returns 6 if unset\n    if(n&(l&(r-1))==0):\n        return 6\n    #returns 7 if unset\n    if(n&(l&(r-1))==0):\n        return 7\n    #returns 8 if unset\n    if(n&(l&(r-1))==0):\n        return 8\n    #returns 9 if unset\n    if(n&(l&(r-1))==0):\n        return 9\n    #returns 10 if unset\n    if(n&(l&(r-1))==0):\n        return 10\n    #returns 11 if unset\n    if(n&(l&(r-1))==0):\n        return 11\n    #returns 12 if unset\n    if(n&(l&(r-1))==0):\n        return 12\n    #returns 13 if unset\n    if(n&(l&(r-1))==0):\n        return 13\n    #returns 14 if unset\n    if(n&(l&(r-1))==0):\n        return 14\n    #returns 15 if unset\n    if(n&(l&(r-1))==0):\n        return 15\n    #returns 16 if unset\n    if(n&(l&(r-1))==0):\n        return 16\n    #returns 17 if unset\n    if(n&(l&(r-1))==0):\n        return 17\n    #returns 18 if unset\n    if(n&(l&(r-1))==0):\n        return 18\n    #returns 19 if unset\n    if(n&(l&(r-1))==0):\n        return 19\n    #returns 20 if unset\n    if(n&(l&(r-1))==0):\n        return 20\n    #returns 21 if unset\n    if(n&(l&(r-1))==0):\n        return 21\n    #returns 22 if unset\n    if(n&(l&(r-1))==0):\n        return 22\n    #returns 23 if unset\n    if(n&(l&(r-1))==0):\n        return 23\n    #returns 24 if unset\n    if(n&(l&(r-1))==0):\n        return 24\n    #returns 25 if unset\n    if(n&(l&(r-1))==0):\n        return 25\n    #returns 26 if unset\n    if(n&(l&(r-1))==0):\n        return 26\n    #returns 27 if unset\n    if(n&(l&(r-1))==0):\n        return 27\n    #returns 28 if unset\n    if(n&(l&(r-1))==0):\n        return 28\n    #returns 29 if unset\n    if(n&(l&(r-1))==0):\n        return 29\n    #returns 30 if unset\n    if(n&(l&(r-1))==0):\n        return 30\n    #returns 31 if unset\n    if(n&(l&(r-1))==0):\n        return 31\n    #returns 32 if unset\n    if(n&(l&(r-1))==0):\n        return 32\n    #returns 33 if unset\n    if(n&(l&(r-1))==0):\n        return 33\n    #returns 34 if unset\n    if(n&(l&(r-1))==0):\n        return 34\n    #returns 35 if unset\n    if(n&(l&(r-1))==0):\n        return 35\n    #returns 36 if unset\n    if(n&(l&(r-1))==0):\n        return 36\n    #returns 37 if unset\n    if(n&(l&(r-1))==0):\n        return 37\n    #returns 38 if unset\n    if(n&(l&(r-1))==0):\n        return 38\n    #returns 39 if unset\n    if(n&(l&(r-1))==0):\n        return 39\n    #returns 40 if unset\n    if(n&(l&(r-1))==0):\n        return 40\n    #returns 41 if unset\n    if(n&(l&(r-1))==0):\n        return 41\n    #returns 42 if unset\n    if(n&(l&(r-1))==0):\n        return 42\n    #returns 43 if unset\n    if(n&(l&(r-1))==0):\n        return 43\n    #returns 44 if unset\n    if(n&(l&(r-1))==0):\n        return 44\n    #returns 45 if unset\n    if(n&(l&(r-1))==0):\n        return 45\n    #returns 46 if unset\n    if(n&(l&(r-1))==0):\n        return 46\n    #returns 47 if unset\n    if(n&(l&(r-1))==0):\n        return 47\n    #returns 48 if unset\n    if(n&(l&(r-1))==0):\n        return 48\n    #returns 49 if unset\n    if(n&(l&(r-1))==0):\n        return 49\n    #returns 50 if unset\n    if(n&(l&(r-1))==0):\n        return 50\n    #returns 51 if unset\n    if(n&(l&(r-1))==0):\n        return 51\n    #returns 52 if unset\n    if(n&(l&(r-1))==0):\n        return 52\n    #returns 53 if unset\n    if(n&(l&(r-1))==0):\n        return 53\n    #returns 54 if unset\n    if(n&(l&(r-1))==0):\n        return 54\n    #returns 55 if unset\n    if(n&(l&(r-1))==0):\n        return 55\n    #returns 56 if unset\n    if(n&(l&(r-1))==0):\n        return 56\n    #returns 57 if unset\n    if(n&(l&(r-1))==0):\n        return 57\n    #returns 58 if unset\n    if(n&(l&(r-1))==0):\n        return 58\n    #returns 59 if unset\n    if(n&(l&(r-1))==0):\n        return 59\n    #returns 60 if unset\n    if(n&(l&(r-1))==0):\n        return 60\n    #returns 61 if unset\n    if(n&(l&(r-1))==0):\n        return 61\n    #returns 62 if unset\n    if(n&(l&(r-1))==0):\n        return 62\n    #returns 63 if unset\n    if(n&(l&(r-1))==0):\n        return 63\n    #returns 64 if unset\n    if(n&(l&(r-1))==0):\n        return 64\n    #returns 65 if unset\n    if("
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print('checking set of bits in range {0} to {1}'.format(l,r))\n    for i in range(l,r):\n        print(i,bin(i),end=' ')\n    print(' ')\n    print('\\n\\n')\n    return bin(n).count('1')\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits = bin(n)[2:]\n    if len(bits)>=r-l+1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n in range(l,r+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l >= r:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (l<=n<=r and n&(n-1)==0)\ndef all_Bits_Set_In_The_Given_Range_Of_Size_2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range of size 2 or not.\n    '''\n    return (l<=n<=r and n&(n-1)==0 and n&(n-2)==0)\ndef all_Bits_Set_In_The_Given_Range_Of_Size_3(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range of size 3 or not.\n    '''\n    return (l<=n<=r and n&(n-1)==0 and n&(n-2)==0 and n&(n-3)==0)\ndef all_Bits_Set_In_The_Given_Range_Of_Size_4(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range of size 4 or not.\n    '''\n    return (l<=n<=r and n&(n-1)==0 and n&(n-2)==0 and n&(n-3)==0 and n&(n-4)==0)\ndef all_Bits_Set_In_The_Given_Range_Of_Size_5(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range of size 5 or not.\n    '''\n    return (l<=n<=r and n&(n-1)==0 and n&(n-2)==0 and n&(n-3)==0 and n&(n-4)==0 and n&(n-5)==0)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    output_arr = [0]*n\n    for i in range(n):\n        if arr[i] >= 0:\n            output_arr[arr[i]] = i + 1\n    return output_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    arr_size = len(arr)\n    for i in range(0, arr_size):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert arr[0] < arr[-1], 'Can only re-arrange the elements in the range of the array.'\n    \n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = abs(arr[i])\n            arr[arr[i] - 1] = -arr[arr[i] - 1]\n    \n    return arr\n    \ndef find_max_index(arr):\n    '''\n    Write a function that takes an array and returns the index of the maximum number in that array. \n    '''\n    for i in range(len(arr)):\n        if arr[i] > arr[0]:\n            return i\n    return 0\n    \ndef max_index(arr):\n    '''\n    Write a function that takes an array and returns the index of the maximum number in that array. \n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[0]:\n            return i\n    return 0\n    \ndef sorted_array(arr):\n    '''\n    Write a function that takes an array and returns the sorted array.\n    '''\n    if len(arr) == 0:\n        return arr\n    else:\n        return sorted_array(arr[1:]) + [arr[0]] + sorted_array(arr[:1] + arr[2:])\n    \ndef rev_string(arr):\n    '''\n    Write a function that takes an array and returns the reversed string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        arr[i] = str(arr[i])\n    \n    return arr\n    \ndef rotate_array(arr, n):\n    '''\n    Write a function that takes an array and an integer n, and returns the array rotated n times.\n    '''\n    assert arr[0] < arr[-1], 'Can only rotate the first element of the array.'\n    \n    for i in range(n):\n        arr[i] = arr[i + n]\n    \n    return arr\n    \ndef remove_all(arr, val):\n    '''\n    Write a function that takes an array and a value and returns it sorted in non-decreasing order.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= val:\n            arr[i] = remove_all(arr[i + 1:], val)\n    return arr\n    \ndef reverse_string(arr):\n    '''\n    Write a function that takes an array and returns it in reverse order.\n    '''\n    for i in range(len(arr)):\n        arr[i] = arr[i][::-1]\n    return arr\n    \ndef odd_numbers(arr):\n    '''\n    Write a function that takes an array and returns it in a sorted order.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            arr[i] = arr[i] + 1\n    return arr\n    \ndef even_numbers(arr):\n    '''\n    Write a function that takes an array and returns it in a sorted order.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n    return arr\n    \ndef get_sum(arr):\n    '''\n    Write a function that takes an array and returns the sum of all elements in the array.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        sum = sum + arr[i]\n    return sum\n    \ndef swap_elements(arr, pos1, pos2):\n    '''\n    Write a function that takes two positive integers, pos1 and pos2, and returns a new array with the elements of arr[pos1], followed by arr[pos2], in a sorted manner.\n    '''\n    n = len(arr)\n    arr[pos1] = arr[pos2]\n    arr[pos2] = arr[pos1]\n    \n    for i in range(n):\n        if arr[i] < arr[pos1]:\n            arr[i] = arr[pos1]\n            arr[pos1] = arr[i]\n        elif arr[i] > arr[pos2]:\n            arr[i] = arr[pos2]\n            arr[pos2] = arr[i]\n    return arr\n    \ndef sort_by_sum(arr):\n    '''\n    Write a function that takes an array and returns it sorted by the sum of all numbers in the array.\n    '''\n    n = len(arr)\n    sum = get_sum(arr)\n    arr = sorted_array(arr)\n    \n    for i in range(n):\n        arr[i] = sum + arr[i]\n    \n    return arr\n    \ndef insert_into_array(arr, val, pos):\n    '''\n    Write a function that takes an array and a value and returns it in the array after the value has been inserted at the position pos.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == val:\n            arr[i] = arr[pos]\n            arr[pos] = arr[i]\n            return arr\n    arr[pos] = val\n    return arr\n    \ndef merge_two_sorted_arrays(arr1, arr2):\n    '''\n    Write a function that takes two sorted arrays arr1 and arr2 and returns the sorted array.\n    '''\n    n = len(arr1) + len(arr2)\n    sorted_arr = sorted_array(arr1 + arr2)\n    for i in range(n):\n        if i < len(arr1):\n            arr1[i] = sorted_arr[i]\n        if i < len(arr2):\n            arr2[i] = sorted_arr[i + n]\n    return arr1 + arr2\n    \ndef apply_fn(fn, arr):\n    '''\n    Write a function that takes in a function fn and an array arr and returns the result of fn(arr).\n    '''\n    n = len(arr)\n    for i in range(n):\n        arr[i] = fn(arr[i])\n    return arr\n    \ndef fib_series(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib_series(n - 1) + fib_series(n - 2)\n    \ndef get_fib_series(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        a = 0\n        b = 1\n        for i in range(1, n):\n            c = a + b\n            a = b\n            b = c\n        return b\n    \ndef get_fib_series_memo(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    memo = {}\n    def fib_series_recur(n):\n        if n in memo:\n            return memo[n]\n        if n == 1 or n == 0:\n            return 1\n        if n == 2:\n            return 1\n        elif n < 2:\n            return 0\n        else:\n            memo[n] = fib_series_recur(n - 1) + fib_series_recur(n - 2)\n            return memo[n]\n    return fib_series_recur(n)\n    \ndef get_fib_series_memo_recur(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        memo "
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n = n % len(arr)\n    arr_arrange = []\n    for i in range(len(arr)):\n        arr_arrange.append(arr[i])\n    while n > 0:\n        if arr_arrange[n] < 0:\n            arr_arrange[n] = -arr_arrange[n]\n        else:\n            arr_arrange[n] = arr_arrange[n] * -1\n        n = n - 1\n    return arr_arrange\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n            start += 1\n    for i in range(n, n - start, -1):\n        arr[i] = arr[i - start]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[:n]\n    arr.sort()\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    x = [0] * n\n    pos = [0] * n\n    neg = [0] * n\n    \n    for i in range(n):\n        x[i] = int(arr[i])\n        \n        if x[i] < 0:\n            neg[i] = 1\n        else:\n            pos[i] = 1\n            \n    if n!= len(arr):\n        for i in range(n):\n            if pos[i] == 0:\n                x[i] = -x[i]\n                \n            if neg[i] == 1:\n                x[i] = -x[i]\n                \n    return x\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n    \ndef array_to_int_list(arr, n):\n    '''\n    Write a function that takes in an array of positive integers and an integer n, and returns an array of ints.\n    '''\n    for i in range(n):\n        arr[i] = arr[i] / -10\n    return arr\n    \ndef array_to_float_list(arr, n):\n    '''\n    Write a function that takes in an array of positive integers and an integer n, and returns an array of floats.\n    '''\n    for i in range(n):\n        arr[i] = arr[i] / -10\n    return arr\n    \ndef find_smallest_element(arr):\n    '''\n    Write a function that takes in an array, and returns the smallest number in the array.\n    '''\n    n = len(arr)\n    #find the smallest element\n    if n == 1:\n        return arr[0]\n    #find the the index\n    for i in range(n):\n        if arr[i] < 0:\n            smallest = arr[i]\n            break\n    #find the index of the smallest\n    for i in range(n-1):\n        if arr[i] < smallest and arr[i+1] < smallest:\n            smallest = arr[i]\n    return smallest\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # your code here\n    i = 0\n    while i < n:\n        arr[0] = i\n        j = i\n        while j < n and arr[j] < 0:\n            arr[j] = arr[j+1]\n        arr[j+1] = -arr[j]\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert isinstance(arr, list), \"input is not list\"\n    assert isinstance(n, int), \"input is not an integer\"\n    assert isinstance(n > 0), \"input n must be a positive integer\"\n    n_positive = len(arr)\n    n_negative = n_positive\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = - arr[i]\n            n_negative -= 1\n    for i in range(n_positive):\n        arr[i] = - arr[i]\n    for i in range(n_negative):\n        arr[i] = - arr[i]\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str(str1)\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    str1=str1.replace(\"\\t\",\"\")\n    str1=str1.replace(\"\\r\",\"\")\n    str1=str1.replace(\"\\t\",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    str1=str1.replace(\" \",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr = str1.replace(' ',char)\n    return newstr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,'_')\n    \ndef replace_digit(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces digit numbers in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,'D')\n    \ndef replace_special_char(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces special characters in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,'e')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.strip())\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,' ')\n    str1 = str1.replace(',',' ')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return str1.replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == char:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    index=str1.find(char)\n    str1=str1.replace(char,index)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(char,' ')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\").replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\" \",\"\")\n    \ndef create_dictionary_from_file():\n    '''\n    Read a file, and create a dictionary from it.\n    '''\n    f = open('/home/boussa/Documents/data/Sample_QC/Sample_QC.txt')\n    data = f.read()\n    data = data.splitlines()\n    dic = {}\n    for line in data:\n        (key, value) = line.split(\":\")\n        dic[key] = value\n    return dic\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if(list1==None or len(list1)<=n):\n        return []\n    else:\n        heap=[]\n        for i in range(0,n):\n            heapq.heappush(heap,list1[i])\n        res=[]\n        for i in range(0,n):\n            res.append(heapq.heappop(heap))\n        return res\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    heapq.heapify(list2)\n    for i in range(n):\n        list1=heapq.heappop(list2)\n        heapq.heappush(list2,-list1)\n        print(list1)\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    heap_list = list1\n    heapq.heapify(heap_list)\n    for i in range(n):\n        heapq.heappop(heap_list)\n    return heap_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,[item,0])\n    for i in range(n):\n        heapq.heappop(heap)[1]+=1\n    return heap\ndef nlargest(n,list):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of the n largest elements from the list.\n    '''\n    heap = []\n    for item in list:\n        heapq.heappush(heap,[item,0])\n    for i in range(n):\n        heapq.heappop(heap)[1]+=1\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) <= n:\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)==0:\n        return []\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    return_list = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    for i in range(0,n):\n        return_list.append(heapq.heappop(heap))\n    return return_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if item[0] not in heap:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef Largest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if item[0] not in heap:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef heapsort(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef h_heaplin(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef heapsort_x(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef h_heaplin(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef h_heaplin_x(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef bubble_sort(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef bubble_sort_x(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef heap_sort_x(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef heap_sort_2(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef bubble_sort_2(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef bubble_sort_3(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef bubble_sort_4(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef bubble_sort_5(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in list1:\n        if len(heap)>1:\n            heapq.heappush(heap, item)\n            if len(heap)>n:\n                heapq.heappop(heap)\n    return heap\ndef bubble_sort_6(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(hea"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1,reverse = True)[:n]\ndef print_time(list1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in list1:\n        if x >= 0:\n            print(x, end ='')\n    print()\ndef printing_time(list1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in list1:\n        if x >= 0:\n            print(x, end ='')\n    print()\ndef median(list1):\n    '''\n    Write a function that takes a list of numbers and returns the median of the list.\n    '''\n    print(sum(list1) / len(list1))\ndef sort_list(list1):\n    '''\n    Write a function that takes a list of numbers and returns the list in sorted order.\n    '''\n    list1.sort()\n    print(list1)\ndef print_list(list1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    print(list1)\ndef sorting(list1):\n    '''\n    Write a function that takes a list of numbers as an input and sorts it in ascending order.\n    '''\n    list1.sort()\n    print(list1)\ndef printing_numbers(list1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    print(len(list1))\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef sorting_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and sorts it in ascending order.\n    '''\n    heapq.heapify(heap1)\n    print(heapq.heappop(heap1))\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef sorting_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and sorts it in ascending order.\n    '''\n    heapq.heapify(heap1)\n    print(heapq.heappop(heap1))\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef heap_queue(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and sorts it in ascending order.\n    '''\n    heapq.heapify(heap1)\n    print(heapq.heappop(heap1))\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1), end ='')\n    print()\ndef printing_heap(heap1):\n    '''\n    Write a function that takes a list of numbers as an input and prints out the numbers in the list that are less than or equal to 0.\n    '''\n    for x in range(0, len(heap1)):\n        print(heapq.heappop(heap1)"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_num = 0\n    max_list = []\n    for i in range(n):\n        if list1[i] > max_num:\n            max_num = list1[i]\n            max_list.append(list1[i])\n    print(max_list)\n    return max_list\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = np.arccos(h/r)\n    v = r*np.sin(theta)\n    return v*(r*np.cos(theta))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = (4*(r**2)*np.pi*h)/(2*r)\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14159*((r**2)*(h**2))\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L = 2*r*h\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=r*h\n    z=1\n    return a,z\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A_cylinder = r*h**2\n    return A_cylinder\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Number of faces\n    n = int(r)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if(r>10):\n        x=r\n    else:\n        x=10\n    L=h*((-x/2)**2+(1+((-x)**2)**2)**2)/2\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # TODO: Write the function\n    pass"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    v1 = r*h\n    v2 = v1**(1/2)\n    v3 = v2**(1/2)\n    v3 = v3**(1/2)\n    v3 = v3**(1/2)\n    v4 = v3*v2\n    v4 = v4**(1/2)\n    v4 = v4**(1/2)\n    v4 = v4**(1/2)\n    v5 = v3*v2\n    v5 = v5**(1/2)\n    v5 = v5**(1/2)\n    v5 = v5**(1/2)\n    v6 = v3*v2\n    v6 = v6**(1/2)\n    v6 = v6**(1/2)\n    v6 = v6**(1/2)\n    v7 = v3*v2\n    v7 = v7**(1/2)\n    v7 = v7**(1/2)\n    v7 = v7**(1/2)\n    v8 = v4*v5\n    v8 = v8**(1/2)\n    v8 = v8**(1/2)\n    v8 = v8**(1/2)\n    v9 = v4*v5\n    v9 = v9**(1/2)\n    v9 = v9**(1/2)\n    v9 = v9**(1/2)\n    v10 = v4*v5\n    v10 = v10**(1/2)\n    v10 = v10**(1/2)\n    v10 = v10**(1/2)\n    v11 = v4*v5\n    v11 = v11**(1/2)\n    v11 = v11**(1/2)\n    v11 = v11**(1/2)\n    v12 = v4*v5\n    v12 = v12**(1/2)\n    v12 = v12**(1/2)\n    v12 = v12**(1/2)\n    v13 = v4*v5\n    v13 = v13**(1/2)\n    v13 = v13**(1/2)\n    v13 = v13**(1/2)\n    v14 = v4*v5\n    v14 = v14**(1/2)\n    v14 = v14**(1/2)\n    v14 = v14**(1/2)\n    v15 = v4*v5\n    v15 = v15**(1/2)\n    v15 = v15**(1/2)\n    v15 = v15**(1/2)\n    v16 = v4*v5\n    v16 = v16**(1/2)\n    v16 = v16**(1/2)\n    v16 = v16**(1/2)\n    v17 = v4*v5\n    v17 = v17**(1/2)\n    v17 = v17**(1/2)\n    v17 = v17**(1/2)\n    v18 = v4*v5\n    v18 = v18**(1/2)\n    v18 = v18**(1/2)\n    v18 = v18**(1/2)\n    v19 = v4*v5\n    v19 = v19**(1/2)\n    v19 = v19**(1/2)\n    v19 = v19**(1/2)\n    v20 = v4*v5\n    v20 = v20**(1/2)\n    v20 = v20**(1/2)\n    v20 = v20**(1/2)\n    v21 = v4*v5\n    v21 = v21**(1/2)\n    v21 = v21**(1/2)\n    v21 = v21**(1/2)\n    v22 = v4*v5\n    v22 = v22**(1/2)\n    v22 = v22**(1/2)\n    v22 = v22**(1/2)\n    v23 = v4*v5\n    v23 = v23**(1/2)\n    v23 = v23**(1/2)\n    v23 = v23**(1/2)\n    v24 = v4*v5\n    v24 = v24**(1/2)\n    v24 = v24**(1/2)\n    v24 = v24**(1/2)\n    v25 = v4*v5\n    v25 = v25**(1/2)\n    v25 = v25**(1/2)\n    v25 = v25**(1/2)\n    v26 = v4*v5\n    v26 = v26**(1/2)\n    v26 = v26**(1/2)\n    v26 = v26**(1/2)\n    v27 = v4*v5\n    v27 = v27**(1/2)\n    v27 = v27**(1/2)\n    v27 = v27**(1/2)\n    v28 = v4*v5\n    v28 = v28**(1/2)\n    v28 = v28**(1/2)\n    v28 = v28**(1/2)\n    v29 = v4*v5\n    v29 = v29**(1/2)\n    v29 = v29**(1/2)\n    v29 = v29**(1/2)\n    v30 = v4*v5\n    v30 = v30**(1/2)\n    v30 = v30**(1/2)\n    v30 = v30**(1/2)\n    v31 = v4*v5\n    v31 = v31**(1/2)\n    v31 = v31**(1/2)\n    v31 = v31**(1/2)\n    v32 = v4*v5\n    v32 = v32**(1/2)\n    v32 = v32**(1/2)\n    v32 = v32**(1/2)\n    v33 = v4*v5\n    v33 = v33**(1/2)\n    v33 = v33**(1/2)\n    v33 = v33**(1/2)\n    v34 = v4*v5\n    v34 = v34**(1/2)\n    v34 = v34**(1/2)\n    v34 = v34**(1/2)\n    v35 = v4*v5\n    v35 = v35**(1/2)\n    v35 = v35**(1/2)\n    v35 = v35**(1/2)\n    v36 = v4*v5\n    v36 = v36**(1/2)\n    v36 = v36**(1/2)\n    v36 = v36**(1/2)\n    v37 = v4*v5\n    v37 = v37**(1/2)\n    v37 = v37**(1/2)\n    v37 = v37**(1/2)\n    v38 = v4*v5\n    v38 = v38**(1/2)\n    v38 = v38**(1/2)\n    v38 = v38**(1/2)\n    v39 = v4*v5\n    v39 = v39**(1/2)\n    v39 = v39**(1/2)\n    v39 = v39**(1/2)\n    v40 = v4*v5\n    v40 = v40**(1/2)\n    v40 = v40**(1/2)\n    v40 = v40**(1/2)\n    v41 = v4*v5\n    v41 = v41**(1/2)\n    v41 = v41**(1/2)\n    v41 = v41**(1/2)\n    v42 = v4*v5\n    v42 = v42**(1/2)\n    v42 = v42**(1/2)\n    v42 = v42**(1/2)\n    v43 = v4*v5\n    v43 = v43**(1/2)\n    v43 = v43**(1/2)\n    v43 "
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l*l*l\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(l):\n        for j in range(i+1):\n            for k in range(j+1):\n                volume += 1\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 0\n    for i in range(l,0,-1):\n        v += 2*i*i*i\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l*l*l*l)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    try:\n        volume = 0\n        for side in l:\n            volume += side**3\n        return volume\n    except TypeError:\n        return 'TypeError!'\n        "
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 0\n    for i in range(l):\n        v += 2*(((i+1)**3) - ((i+1)**2))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Add your code here\n    l = int(l)\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    side_length = l * l\n    volume = (4.0 * math.pi) * (side_length**3)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l=int(l)\n    if l<=0:\n        raise ValueError('The side length must be greater than 0')\n    def volume(l):\n        return 3.14*(l**3)\n    return volume(l)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    lst = []\n    lst.append(n)\n    while True:\n        if (n&1) == 0:\n            break\n        lst.append(n&1)\n        n = n >> 1\n    return lst\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    output = []\n    output_dict = {}\n    for i in range(0, n + 1): \n        if (i % 2) == 0: \n            output.append(1)\n        else: \n            output.append(0)\n    output_dict = {i: output.count(1) for i in range(0, n + 1)}\n    return output_dict\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            a = bin(i)[2:]\n            a = a[::-1]\n            b = int(a, 2)\n            if b > n:\n                return\n            else:\n                i = b\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    odd_bits = bin(n).replace(\"0b\", \"\")\n    odd_bits_length = len(odd_bits)\n    even_bits = \"\"\n    if odd_bits_length % 2 == 0:\n        for i in range(0, odd_bits_length, 2):\n            if i+1 < odd_bits_length:\n                even_bits += odd_bits[i] + odd_bits[i+1]\n            else:\n                even_bits += odd_bits[i]\n    else:\n        for i in range(0, odd_bits_length, 2):\n            if i+1 < odd_bits_length:\n                even_bits += odd_bits[i] + odd_bits[i+1]\n            else:\n                even_bits += odd_bits[i]\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    str = bin(n)\n    str = str[2:]\n    return int(str, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n & 0b1 == 0b1: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = ''\n    for i in range(0, n):\n        if (i % 2) == 0:\n            result += '1'\n        else:\n            result += '0'\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # code goes here\n    n &= n-1\n    n |= (n>>1)\n    n |= (n>>2)\n    n |= (n>>3)\n    n |= (n>>4)\n    n |= (n>>5)\n    n |= (n>>6)\n    n |= (n>>7)\n    n |= (n>>8)\n    n |= (n>>9)\n    n |= (n>>10)\n    return n\n    \ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    # code goes here\n    n &= n-1\n    n |= (n>>1)\n    n |= (n>>2)\n    n |= (n>>3)\n    n |= (n>>4)\n    n |= (n>>5)\n    n |= (n>>6)\n    n |= (n>>7)\n    n |= (n>>8)\n    n |= (n>>9)\n    n |= (n>>10)\n    return n\n    \ndef set_of_bits_sum(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += n-i\n    return sum\n    \ndef get_sum_of_bits_sum(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \ndef get_sum_of_bits_sum2(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_2(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_3(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \ndef get_sum_of_bits_sum_4(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_5(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_6(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_7(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_8(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_9(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_10(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_11(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_12(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_13(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_14(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_15(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_16(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_17(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_18(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_19(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        sum += m-i\n    return sum\n    \n    \ndef get_sum_of_bits_sum_20(n, m): \n    '''\n    Write a python function to get the sum of all bits of a given number.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(n):\n        su"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n-1)\n    \ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    return n & 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 4294966586\n    res = 0\n    while n > 0:\n        if n & 1 == 1:\n            res += 2 ** (32 - 1)\n        n = n >> 1\n    return res\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    dictionary = {}\n    for x in test_list:\n        if x[0] in dictionary:\n            dictionary[x[0]] = dictionary[x[0]] + 1\n        else:\n            dictionary[x[0]] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #pass\n    result = dict()\n    for item in test_list:\n        if item[0] in result.keys():\n            result[item[0]] += 1\n        else:\n            result[item[0]] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # define a dictionary of tuples that are mapped to the number of times they appear in the list\n    tuple_counts = {}\n    # iterate through each tuple in the list to count the number of times it appears in the list\n    for tuple in test_list:\n        if tuple[0] in tuple_counts:\n            tuple_counts[tuple[0]] += 1\n        else:\n            tuple_counts[tuple[0]] = 1\n    # return the dictionary\n    return tuple_counts\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = dict()\n    for tuple in test_list:\n        if tuple not in dictionary.keys():\n            dictionary[tuple] = 1\n        else:\n            dictionary[tuple] += 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = {}\n    for i in test_list:\n        if i[0] in dict:\n            dict[i[0]] += 1\n        else:\n            dict[i[0]] = 1\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    dictionary = {}\n    for ele in test_list:\n        if ele[0] in dictionary.keys():\n            dictionary[ele[0]] += 1\n        else:\n            dictionary[ele[0]] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    results = {}\n    for tup in test_list:\n        if tup[0] in results:\n            results[tup[0]] += 1\n        else:\n            results[tup[0]] = 1\n    return results\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for pair in test_list:\n        if pair[0] not in d.keys():\n            d[pair[0]] = 1\n        else:\n            d[pair[0]] += 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #look through each tuple in the list\n    dict_occurences = {}\n    for i in test_list:\n        if i[0] in dict_occurences.keys():\n            dict_occurences[i[0]] = dict_occurences[i[0]] + 1\n        else:\n            dict_occurences[i[0]] = 1\n    return dict_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = dict()\n    for each in test_list:\n        test_dict[each[0]] = test_dict.get(each[0], 0) + 1\n    return test_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # if the string is empty, return 0\n    if str == \"\":\n        return 0\n    # if str has only one character\n    if len(str) == 1:\n        return 1\n    \n    # if the string has multiple characters, return 0\n    # because count() only returns the number of characters that are non-empty\n    # for example, if \"abc\" has multiple characters, it returns 0\n    # because \"abc\" has a length of 1, so we must assume there is only one character\n    # in the string.\n    # start = 0\n    # count = 0\n    # if the string has only one character, return 1\n    # because count() returns 0 for the string, so we need to return 0\n    # since there is only one character in the string\n    # so in that case count() will be 1\n    # if the string has multiple characters, return 1\n    # because count() returns 1 for the string, so we need to return 1\n    # since there are multiple characters in the string\n    # so in that case count() will be 2\n    # loop through the string, as long as we have non-empty characters,\n    # then count the number of non-empty substrings\n    # return count\n    # if the string has multiple characters, return 1\n    # because count() returns 1 for the string, so we need to return 1\n    # since there are multiple characters in the string\n    # so in that case count() will be 2\n    # loop through the string, as long as we have non-empty characters,\n    # then return 2\n    # if the string has multiple characters, return 2\n    # because count() returns 2 for the string, so we need to return 2\n    # since there are multiple characters in the string\n    # so in that case count() will be 3\n    start = 0\n    count = 0\n    while start < len(str) - 1:\n        sub_str = str[start:start + 2]\n        if sub_str!= \"\":\n            count += number_of_substrings(sub_str)\n        start += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str=='':\n        return 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_counter = 0\n    for i in range(len(str)-1):\n        substring_length = 0\n        for j in range(i,len(str)):\n            if str[j] == str[j+1]:\n                substring_length += 1\n            else:\n                break\n        if substring_length!= 0:\n            substring_counter += substring_length\n    return substring_counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter=0\n    for i in range(1,len(str)+1):\n        if str[0:i]!=str[i:]:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    sub_strings = { '0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    count = 0\n    for i in range(0, len(str)): \n        for j in range(0, i+1): \n            if str[j]!= str[i]: \n                count += sub_strings[str[j]] \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j] and (str[i]!= str[j] or str[i] in \"aeiouAEIOU\"):\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (2 ** ((m - 1) * (n - 1))) - 1\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert type(m)==int and m>0, 'Please enter an integer'\n    assert type(n)==int and n>=0, 'Please enter a positive integer'\n    assert type(m)==int and m<=m, 'Please enter an integer greater than or equal to m'\n    assert type(n)==int and n<=n, 'Please enter an integer less than or equal to n'\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(m*n/2)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #create an array for the sequence number\n    sequence_array = []\n    \n    #create a list of length n\n    sequence_list = [n]\n    \n    #create a loop to iterate through the length of the sequence\n    for i in range(n-1):\n        \n        #add the next element to the array of numbers to the sequence list\n        sequence_list.append(sequence_list[-1]*2)\n        \n    #create a loop to iterate through the length of the sequence\n    for i in range(m):\n        \n        #add the next element to the sequence list\n        sequence_list.append(sequence_list[-1]*2)\n        \n    #create a loop to iterate through the length of the sequence\n    for i in range(m-1):\n        \n        #add the next element to the sequence list\n        sequence_list.append(sequence_list[-1]*2)\n        \n    #create an array that contains the number of elements in the sequence\n    sequence_number_array = []\n    \n    #iterate through the array of numbers\n    for i in range(len(sequence_list)):\n        \n        #add the sequence number to the array\n        sequence_number_array.append(sequence_list[i])\n        \n    #create an array that contains the number of sequences of length n\n    sequence_number_array.sort()\n    \n    #create a loop to iterate through the sequence number array\n    for i in range(len(sequence_number_array)):\n        \n        #add the sequence number to the array\n        sequence_number_array.append(sequence_number_array[i])\n        \n    #return the number of sequences of length n\n    return len(sequence_number_array)\n        \n    \ndef check_if_all_digits_exist_in_the_array(array,digits):\n    '''\n    Write a function that takes a list of integers as input and checks if all the elements are unique and at least one of the digits is in the array.\n    '''\n    \n    #create an array of the digits in the array\n    digits_array = []\n    \n    #create an array to store the digits\n    digits_array = digits\n    \n    #create an array to store the sum of all the digits\n    sum_array = []\n    \n    #iterate through the array\n    for i in range(len(array)):\n        \n        #add the digits to the array\n        digits_array.append(array[i])\n        \n        #add the sum of the digits to the array\n        sum_array.append(array[i] + digits_array[i])\n        \n    #check if all the digits in the array are unique and at least one element is in the array\n    return all(digits_array == set(sum_array))\n    \n    \ndef get_all_digits(digits_array):\n    '''\n    Write a function that takes a list of digits as input and returns an array containing all the digits in the list.\n    '''\n    \n    #create an array\n    all_digits_array = []\n    \n    #iterate through the digits_array\n    for i in range(len(digits_array)):\n        \n        #add the number to the array\n        all_digits_array.append(digits_array[i])\n        \n    #return the array\n    return all_digits_array\n    \n    \ndef get_maximum_digit(array):\n    '''\n    Write a function that takes a list of digits as input and returns the maximum number of digits in the list.\n    '''\n    \n    #create an array\n    maximum_digits_array = []\n    \n    #iterate through the array\n    for i in range(len(array)):\n        \n        #add the number to the array\n        maximum_digits_array.append(array[i])\n        \n    #return the maximum digits\n    return maximum_digits_array\n    \n    \ndef get_remainder(array):\n    '''\n    Write a function that takes a list of digits as input and returns the remainder of the list.\n    '''\n    \n    #create an array\n    remainder_array = []\n    \n    #iterate through the array\n    for i in range(len(array)):\n        \n        #add the element to the array\n        remainder_array.append(array[i])\n        \n    #return the remainder\n    return remainder_array\n    \n    \ndef get_product(array):\n    '''\n    Write a function that takes a list of integers as input and returns a product.\n    '''\n    \n    #create an array\n    product_array = []\n    \n    #iterate through the array\n    for i in range(len(array)):\n        \n        #add the element to the array\n        product_array.append(array[i])\n        \n    #return the product\n    return product_array\n    \n    \ndef get_perfect_numbers(number_array):\n    '''\n    Write a function that takes a list of integers as input and returns a list of all the perfect numbers.\n    '''\n    \n    #create an array\n    perfect_number_array = []\n    \n    #iterate through the array\n    for i in range(len(number_array)):\n        \n        #add the number to the array\n        perfect_number_array.append(number_array[i])\n        \n    #return the perfect numbers\n    return perfect_number_array\n    \n    \ndef get_prime_numbers(number_array):\n    '''\n    Write a function that takes a list of integers as input and returns a list of all the prime numbers.\n    '''\n    \n    #create an array\n    prime_number_array = []\n    \n    #iterate through the array\n    for i in range(len(number_array)):\n        \n        #add the number to the array\n        prime_number_array.append(number_array[i])\n        \n    #return the prime numbers\n    return prime_number_array\n    \n    \ndef get_prime_numbers_with_odd_even(number_array):\n    '''\n    Write a function that takes a list of integers as input and returns a list of all the prime numbers with odd and even numbers.\n    '''\n    \n    #create an array\n    prime_number_array_with_odd_even = []\n    \n    #iterate through the array\n    for i in range(len(number_array)):\n        \n        #add the number to the array\n        prime_number_array_with_odd_even.append(number_array[i])\n        \n    #return the prime numbers with odd and even numbers\n    return prime_number_array_with_odd_even\n    \n    \ndef get_sum_of_digits(digits_array):\n    '''\n    Write a function that takes a list of digits as input and returns the sum of the digits in the list.\n    '''\n    \n    #create an array\n    sum_array = []\n    \n    #iterate through the array\n    for i in range(len(digits_array)):\n        \n        #add the digit to the array\n        sum_array.append(digits_array[i])\n        \n    #return the sum\n    return sum_array\n    \n    \ndef get_sum_of_digits_with_even(digits_array):\n    '''\n    Write a function that takes a list of digits as input and returns the sum of the digits in the list with even elements.\n    '''\n    \n    #create an array\n    sum_array = []\n    \n    #iterate through the array\n    for i in range(len(digits_array)):\n        \n        #add the digit to the array\n        sum_array.append(digits_array[i])\n        \n    #return the sum\n    return sum_array\n    \n    \ndef get_sum_of_digits_with_odd(digits_array):\n    '''\n    Write a function that takes a list of digits as input and returns the sum of the digits in the list with odd elements.\n    '''\n    \n    #create an array\n    sum_array = []\n    \n    #iterate through the array\n    for i in range(len(digits_array"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m > n:\n        raise ValueError(\"First argument must be less than the second.\")\n    if n > m:\n        raise ValueError(\"Second argument must be less than the first argument.\")\n    \n    # create a blank array to store the numbers\n    A = []\n    for x in range(n):\n        A.append(x)\n        \n    # loop through each element in m, n, and find all the other elements\n    for i in range(m-1,n-1):\n        if A[i] > A[i+1]:\n            return 0\n    return 1\n        \ndef get_first_positive(n):\n    '''\n    Write a function that takes in a positive integer n and returns the value of the first positive number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return n//2\n    else:\n        return n - 1\n        \ndef get_last_positive(n):\n    '''\n    Write a function that takes in a positive integer n and returns the value of the last positive number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return n - 1\n    else:\n        return n + 1\n    \ndef get_all_divisible_by_two(n):\n    '''\n    Write a function that takes in a positive integer n and returns the value of all positive numbers that are divisible by 2.\n    '''\n    for i in range(n):\n        if n % 2 == 0:\n            print(i)\n    \ndef get_sum_of_divisible_by_two(n):\n    '''\n    Write a function that takes in a positive integer n and returns the value of the sum of all numbers that are divisible by 2.\n    '''\n    if n == 1:\n        return 0\n    \n    sum = 0\n    for i in range(n):\n        if n % 2 == 0:\n            sum += i\n        else:\n            sum += i + 1\n    \n    return sum\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_sequences = 0\n    for i in range(m):\n        for j in range(n):\n            if m*n <= i+j+1:\n                num_sequences += 1\n    return num_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 0\n    if n <= 0:\n        return 0\n    if m <= 0:\n        return 0\n    \n    dp_table = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            if i + j < n:\n                dp_table[i][j] = dp_table[i][j + 1] + dp_table[i + 1][j] - dp_table[i + 1][j + 1]\n            else:\n                dp_table[i][j] = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #HINT: you may find the string methods helpful\n    total = 0\n    for i in range(1, m+1):\n        total += (i * (2 * i) + i) * (3 * i)\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(m,n+1):\n        #print(i)\n        for j in range(i,n+1):\n            #print(j)\n            if j%i == 0 and j%i!= 0:\n                total += 1\n    print(total)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def count_possible_sequences(m,n,max_index): \n        if(n < 1 or n >= max_index): \n            return 0\n        if(m < 1 or m > max_index): \n            return 0\n        index = 0\n        possible_sequences = 0\n        while(index < max_index): \n            if((m*index) <= n): \n                possible_sequences += 1\n            else: \n                break\n            index += 1\n        return possible_sequences\n    return count_possible_sequences(m,n,len(m))\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1,list2"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list2+list1[:-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2.pop())\n    return list1,list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # TODO: Replace the last element of the first list with elements of the second list\n    list1.pop(len(list1)-1)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1[-1]\n    list1[-1] = list2[0]\n    return result\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1 + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    return list1+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # TODO: Complete this function\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_char = 0\n    for i in str1:\n        if i =='' or i == '\\n':\n            count_char += 1\n    return count_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for i in str1:\n        c += 1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac=0\n    for char in str1:\n        charac=charac+1\n    return charac\n    \nprint(count_charac('hello world'))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char.isalnum():\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c=0\n    for i in str1:\n        if i==\" \":\n            c+=1\n        else:\n            c=0\n    return c\ndef clean_str(str):\n    '''\n    Write a function to clean a given string.\n    '''\n    return str.replace(\"  \",\" \")\ndef create_dict(str):\n    '''\n    Write a function that takes a string and returns a dictionary where each word in the string is key in the dictionary and the number of characters in the word is value.\n    '''\n    word_dict={}\n    word_list=str.split(\" \")\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word]=count_charac(word)\n    return word_dict\ndef create_dict_from_dict(str):\n    '''\n    Write a function that takes a dictionary and returns a string with each word in the dictionary separated by a \" \" character.\n    '''\n    word_dict={}\n    word_list=str.split(\" \")\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word]=count_charac(word)\n    return word_dict\ndef main():\n    str=input(\"Enter a string: \")\n    print(\"Number of characters: {}\".format(count_charac(str)))\n    print(\"Number of words: {}\".format(count_charac(str)))\n    str=clean_str(str)\n    print(\"Number of characters: {}\".format(count_charac(str)))\n    print(\"Number of words: {}\".format(count_charac(str)))\n    print(\"Dictionary: {}\".format(create_dict(str)))\n    print(\"Dictionary: {}\".format(create_dict_from_dict(str)))\nif __name__=='__main__':\n    main("
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #from collections import Counter\n    #c = Counter(str1.lower())\n    #return c.most_common()\n    #return len(str1)\n    return len(str1.lower())\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # All alphabets\n    alphabets = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    # All non-alphabets\n    nonalphabets = [' ','!','#','$','%','&','*','(',')','+','-','=','?','@','S','T','U','V','W','X','Y','Z']\n    # The total number of characters\n    total_char = 0\n    # Iterate through the string\n    for c in str1:\n        # Check if a character is in the alphabet\n        if c in alphabets:\n            total_char += 1\n        # Check if a character is in the non alphabet\n        elif c in nonalphabets:\n            total_char += 0\n    # Return the total number of characters\n    return total_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if (str1[i] == \" \"):\n            count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n    elif N == 2: \n        return 3\n    elif N == 3: \n        return 6\n    elif N == 4: \n        return 9\n    elif N == 5: \n        return 10\n    elif N == 6: \n        return 15\n    elif N == 7: \n        return 20\n    elif N == 8: \n        return 25\n    elif N == 9: \n        return 30\n    elif N == 10: \n        return 35\n    elif N == 11: \n        return 40\n    elif N == 12: \n        return 45\n    elif N == 13: \n        return 50\n    elif N == 14: \n        return 55\n    elif N == 15: \n        return 60\n    elif N == 16: \n        return 65\n    elif N == 17: \n        return 70\n    elif N == 18: \n        return 75\n    elif N == 19: \n        return 80\n    elif N == 20: \n        return 85\n    elif N == 21: \n        return 90\n    elif N == 22: \n        return 95\n    elif N == 23: \n        return 100\n    elif N == 24: \n        return 105\n    elif N == 25: \n        return 110\n    elif N == 26: \n        return 115\n    elif N == 27: \n        return 120\n    elif N == 28: \n        return 125\n    elif N == 29: \n        return 130\n    elif N == 30: \n        return 135\n    elif N == 31: \n        return 140\n    elif N == 32: \n        return 145\n    elif N == 33: \n        return 150\n    elif N == 34: \n        return 155\n    elif N == 35: \n        return 160\n    elif N == 36: \n        return 165\n    elif N == 37: \n        return 170\n    elif N == 38: \n        return 175\n    elif N == 39: \n        return 180\n    elif N == 40: \n        return 185\n    elif N == 41: \n        return 190\n    elif N == 42: \n        return 195\n    elif N == 43: \n        return 200\n    elif N == 44: \n        return 205\n    elif N == 45: \n        return 210\n    elif N == 46: \n        return 215\n    elif N == 47: \n        return 220\n    elif N == 48: \n        return 225\n    elif N == 49: \n        return 230\n    elif N == 50: \n        return 235\n    elif N == 51: \n        return 240\n    elif N == 52: \n        return 245\n    elif N == 53: \n        return 250\n    elif N == 54: \n        return 255\n    elif N == 55: \n        return 260\n    elif N == 56: \n        return 265\n    elif N == 57: \n        return 270\n    elif N == 58: \n        return 275\n    elif N == 59: \n        return 280\n    elif N == 60: \n        return 285\n    elif N == 61: \n        return 290\n    elif N == 62: \n        return 295\n    elif N == 63: \n        return 300\n    elif N == 64: \n        return 305\n    elif N == 65: \n        return 310\n    elif N == 66: \n        return 315\n    elif N == 67: \n        return 320\n    elif N == 68: \n        return 325\n    elif N == 69: \n        return 330\n    elif N == 70: \n        return 335\n    elif N == 71: \n        return 340\n    elif N == 72: \n        return 345\n    elif N == 73: \n        return 350\n    elif N == 74: \n        return 355\n    elif N == 75: \n        return 360\n    elif N == 76: \n        return 365\n    elif N == 77: \n        return 380\n    elif N == 78: \n        return 385\n    elif N == 79: \n        return 390\n    elif N == 80: \n        return 395\n    elif N == 81: \n        return 400\n    elif N == 82: \n        return 405\n    elif N == 83: \n        return 410\n    elif N == 84: \n        return 415\n    elif N == 85: \n        return 420\n    elif N == 86: \n        return 425\n    elif N == 87: \n        return 430\n    elif N == 88: \n        return 435\n    elif N == 89: \n        return 440\n    elif N == 90: \n        return 445\n    elif N == 91: \n        return 450\n    elif N == 92: \n        return 455\n    elif N == 93: \n        return 460\n    elif N == 94: \n        return 465\n    elif N == 95: \n        return 470\n    elif N == 96: \n        return 475\n    elif N == 97: \n        return 480\n    elif N == 98: \n        return 485\n    elif N == 99: \n        return 490\n    elif N == 100: \n        return 495\n    elif N == 101: \n        return 500\n    elif N == 102: \n        return 505\n    elif N == 103: \n        return 510\n    elif N == 104: \n        return 515\n    elif N == 105: \n        return 520\n    elif N == 106: \n        return 525\n    elif N == 107: \n        return 530\n    elif N == 108: \n        return 535\n    elif N == 109: \n        return 540\n    elif N == 110: \n        return 555\n    elif N == 111: \n        return 570\n    elif N == 112: \n        return 575\n    elif N == 113: \n        return 580\n    elif N == 114: \n        return 585\n    elif N == 115: \n        return 600\n    elif N == 116: \n        return 585\n    elif N == 117: \n        return 610\n    elif N == 118: \n        return 585\n    elif N == 119: \n        return 620\n    elif N == 120: \n        return 585\n    elif N == 121: \n        return 620\n    elif N == 122: \n        return 625\n    elif N == 123: \n        return 630\n    elif N == 124: \n        return 625\n    elif N == 125: \n        return 630\n    elif N == 126: \n        return 625\n    elif N == 127: \n        return 630\n    elif N == 128: \n        return 625\n    elif N == 129: \n        return 630\n    elif N == 130: \n        return 630\n    elif N == 131: \n        return 630\n    elif N == 132: \n        return 630\n    elif N == 133: \n        return 630\n    elif N == 134: \n        return 630\n    elif N == 135: \n        return 630\n    elif N == 136: \n        return 630\n    elif N == 137: \n        return 630\n    elif N == 138: \n        return 630\n    elif N == 139: \n        return 630\n    elif N == 140: \n        return 630\n    elif N == 141: \n        return 630\n    elif N == 142: \n        return 630\n    elif N == 143: \n        return 630\n    elif N == 144: \n        return 630\n    elif N == 145: \n        return 630\n    elif N == 146: \n        return 630\n    elif N == 147: \n        return 630\n    elif N == 148: \n        return 630\n    elif N == 149: \n        return 630\n    elif N == 150: \n        return 630\n    elif N == 151: \n        return 630\n    elif N == 152: \n        return 630\n    elif N == 153: \n        return 630\n    elif N == 154: \n    "
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    m = math.sqrt(N)\n    for i in range(m+1):\n        if i*i == N:\n            return (int(N/2),int(N/2))\n        elif N%i == 0:\n            return (int(N/i),int(N/i))\n        elif N%i!= 0:\n            m = m - i\n            return (int(N/2),int(N/2))\n    return (int(N/2),int(N/2))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        return -1\n    if (N % 2 == 0):\n        return (N + 1) * (N + 1)\n    else:\n        return (N - 1) * (N - 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sum = N \n    for i in range(1, int(math.sqrt(N))+1):\n        if N % i == 0:\n            sum += i\n            if i == int(math.sqrt(N)):\n                if sum!= N:\n                    return False\n                else:\n                    sum += 1\n    return sum == N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = 0\n    n = N\n    while n % 2 == 0:\n        n = n / 2\n        s += 1\n    if s > N:\n        return 0\n    a = math.sqrt(N)\n    while True:\n        n = a\n        a = n\n        while n % 2 == 0:\n            n = n / 2\n            s += 1\n        if s > N:\n            return 0\n        if n % 2!= 0:\n            return 0\n        if n == 1:\n            return n\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    def next_perfect_square(number):\n        if number == 0:\n            return 0\n        \n        if number < 0:\n            return 0\n        \n        if number % 2 == 0:\n            return next_perfect_square(number // 2)\n        \n        if number % 4 == 0:\n            return next_perfect_square((number + 1) // 2)\n        \n        return math.pow(number, 0.5)\n    \n    \n    def check_perfect_square(number):\n        if number == 0:\n            return 0\n        \n        if number % 2 == 0:\n            return number % 4 == 0\n        \n        if number % 4 == 0:\n            return math.pow(number, 0.5)\n        \n        return check_perfect_square(number - 1)\n    \n    \n    next_perfect_square_num = check_perfect_square(N)\n    \n    return next_perfect_square_num\n    \ndef is_perfect_square(N):\n    if N == 0:\n        return False\n    elif N == 1:\n        return True\n    elif N % 2 == 0:\n        return False\n    elif N % 4 == 0:\n        return True\n    return is_perfect_square(N // 2)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return N\n    elif N < 1:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 4:\n        return N\n    else:\n        N = math.sqrt(N)\n        N += 1\n        for i in range(N+2, int(math.sqrt(N)) + 1):\n            if ((N % i == 0) and (N // i == i)):\n                return i\n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N)) + 1\n    while(x <= N):\n        if(N % x == 0):\n            return x\n        x += 1\n    return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    from math import sqrt\n    if N < 1: \n        return\n    elif N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        square_of_2 = int(N**0.5)\n        if N == square_of_2 or N == square_of_2**2 + 1:\n            return square_of_2\n        else:\n            return next_Perfect_Square(N//square_of_2)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def sequence(arr, low, high):\n        if low >= high: return 0\n        if low == high: return arr[low]\n        mid = (low + high) // 2\n        left_max = sequence(arr, low, mid)\n        right_max = sequence(arr, mid+1, high)\n        left_sum = left_max + arr[low]\n        right_sum = right_max + arr[mid+1]\n        return max(left_sum, right_sum)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def find_max(arr): \n        '''\n        Find the maximum sum of a bitonic subsequence for a given array.\n        '''\n        if len(arr) == 1: return arr[0]\n        \n        sum_arr = sum(arr)\n        \n        for i in range(1, len(arr) - 1):\n            \n            if arr[i] > arr[i + 1]:\n                \n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            \n            if sum_arr > arr[i + 1]:\n                sum_arr = arr[i + 1]\n        \n        return sum_arr\n        \n    if len(arr) == 1: return arr[0]\n        \n    max_sum = find_max(arr)\n        \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            max_sum = max(max_sum, arr[i + 1])\n        \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return np.max(np.max(np.bitwise_and(arr[1:],arr[:-1]))+np.max(np.bitwise_and(arr[:-1],arr[1:])))\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    prev_sum = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # check if the input array is a bitonic series.\n    if len(arr) <= 1:\n        return arr[0]\n    \n    # check if the array is already bitonic\n    if arr[0] < arr[1]:\n        return arr[0]\n    \n    # find the start of the subsequence. \n    i = 1\n    j = 0\n    sum = 0\n    \n    # iterate over the array.\n    while i < len(arr):\n        sum += arr[i]\n        # increment the i if it is the first bitonic sequence.\n        if arr[i] > arr[i-1]:\n            sum += arr[i-1]\n            i += 1\n        # increment j if it is the last bitonic sequence.\n        elif arr[i] < arr[i-1]:\n            sum += arr[i-1]\n            j = i-1\n            i += 1\n    \n    # if the sequence is already bitonic then return the maximum.\n    if sum > 0:\n        return max_sum(arr[j:])\n    else:\n        return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # define a helper function that will return the max sum of the array\n    def helper(arr, start, end):\n        # base case, we have found the ending element\n        if start == end:\n            return arr[start]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Start the array with 0\n    arr = [0 for i in range(len(arr))]\n    max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Checks if the array is already sorted\n    if (len(arr) <= 1):\n        return arr[0]\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    while True:\n        temp = number\n        temp_square = math.pow(temp, 0.5)\n        if temp_square == number:\n            break\n        else:\n            number = temp_square\n    return number\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        raise TypeError('Negative numbers not supported.')\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 3\n    elif number % 2 == 0:\n        return number\n    elif number % 2!= 0:\n        square = (number * babylonian_squareroot(number // 2)) / number\n        return square\n    else:\n        square = babylonian_squareroot(number - (number // 2))\n        return square\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def b(number):\n        if number == 0:\n            return 1\n        elif number < 0:\n            return 0\n        elif number % 2 == 0:\n            return b(number // 2) + b(number // 2)\n        else:\n            return (b(number // 2) + b(number // 2))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 1\n    elif number < 2:\n        return 2\n    else:\n        return babylonian_squareroot(number-2) + babylonian_squareroot(number-1)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a, b, squareroot = 0, 0, 0\n    while b**2 - a > 0:\n        temp = b**2 - a\n        temp = abs(temp)\n        if temp > 2:\n            print(\"\\t\\t\\tBabylonian does not work with large and negative numbers\")\n        if temp < -2:\n            print(\"\\t\\t\\tBabylonian does not work with small numbers\")\n        if temp > 0:\n            b = temp\n        else:\n            a = temp\n        squareroot += 1\n    if b**2 - a > 0:\n        squareroot = b**2 - a\n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Write your code here.\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 1\n    while abs(squareroot ** 2 - number) >= 0.001:\n        squareroot = (number * squareroot - (number * (squareroot ** 2 - number))) / (squareroot ** 2 - number)\n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return number\n    elif number < 0:\n        raise ValueError('Number must be non-negative')\n    elif number == 1:\n        return 0\n    elif number == 2:\n        return 1\n    elif number % 2 == 0:\n        return number\n    else:\n        return babylonian_squareroot(number - 1) + babylonian_squareroot(number * 3 + 1)\n        \ndef compute_x(base, power):\n    '''\n    Write a function for computing x**power.\n    '''\n    if base == 1:\n        return power\n    elif base == 2:\n        return 1\n    else:\n        return compute_x(base - 1, power - 1) + compute_x(base - 2, power - 2) + compute_x(base - 3, power - 3)\n        \ndef compute_log(base, power):\n    '''\n    Write a function for computing log(x**power).\n    '''\n    if base == 0:\n        return 0\n    elif base == 1:\n        return power\n    else:\n        return compute_log(base - 1, power - 1) + compute_log(base - 2, power - 2) + compute_log(base - 3, power - 3)\n        \ndef compute_s(base, power):\n    '''\n    Write a function for computing s**power.\n    '''\n    if base == 1:\n        return power\n    elif base == 2:\n        return power\n    else:\n        return compute_s(base - 1, power - 1) + compute_s(base - 2, power - 2) + compute_s(base - 3, power - 3)\n        \ndef compute_chinese_remainder(a, b):\n    '''\n    Write a function for computing the Chinese Remainder Theorem.\n    '''\n    if a == 0:\n        return b\n    elif b == 0:\n        return -1\n    elif a == b:\n        return 0\n    else:\n        remainder = b % a\n        return compute_chinese_remainder(b // a, remainder)\n        \ndef compute_lcm(a, b):\n    '''\n    Write a function for computing the LCM.\n    '''\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return compute_lcm(a // b, b)\n    \ndef compute_prime(n):\n    '''\n    Write a function for computing the primes up to and including n.\n    '''\n    if n == 0:\n        return [None, None]\n    elif n == 1:\n        return [None, 1]\n    else:\n        first = compute_prime(n - 1)\n        second = compute_prime(n - 2)\n        return first[0] * second[0] + first[1] * second[1]\n        \ndef multiply_by_two(n):\n    '''\n    Write a function for computing the next multiple of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * multiply_by_two(n - 1)\n        \ndef next_prime(n):\n    '''\n    Write a function for computing the next prime.\n    '''\n    if n == 2:\n        return 2\n    else:\n        while not n%2:\n            n = n//2\n        return n + 1\n    \ndef prime(n):\n    '''\n    Write a function for computing the next prime.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        for x in range(2, n):\n            if n % x == 0:\n                return x\n                \ndef is_prime(n):\n    '''\n    Write a function for returning whether or not a number is prime.\n    '''\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    else:\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n    return True\n    \ndef is_probable_prime(n):\n    '''\n    Write a function for returning whether or not a number is probably prime.\n    '''\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    else:\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n    return True\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    s = 0\n    while number > 0:\n        r = number % 10\n        s += (r**2)\n        number //= 10\n    return s\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #case 1\n    # def lps(str): \n    if len(str) < 2: \n        return 1\n    #case 2\n    # def lps(str): \n    num = 1\n    #check whether length of the string is odd or even \n    str_len = len(str)\n    # for every char in the string\n    for i in range(0,str_len-1): \n        #check whether the char at the i-th index is a palindrome \n        if str[i] == str[i+1]: \n            #if not palindrome then increment num\n            #if it is palindrome then add one to num \n            num += 1\n        else: \n            #if the char at the i-th index is not a palindrome then add the palindrome length \n            num += lps(str[i:i+2]) \n    #return num\n    return num \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        dp = [[0 for i in range(len(str)+1)] for i in range(len(str)+1)]\n        dp[0][0] = 1\n        for i in range(len(str)):\n            for j in range(i+1):\n                if str[i] == str[j]:\n                    dp[i+1][j+1] = dp[i+1][j] + 2\n                else:\n                    dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n        return dp[len(str)][len(str)]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                if len(str) - i - 1 - j >= result:\n                    result = len(str) - i - 1 - j\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str =='':\n        return 0\n    else:\n        def lps(a):\n            if a =='':\n                return 0\n            else:\n                return max(lps(a[1:len(a)]), lps(a[1:len(a)]+a[::-1]))\n        return max(lps(str[1:]),lps(str[1:][::-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_lps = 0\n    string = str\n    lps_string = \"\"\n    start = 0\n    i = 0\n    j = 0\n    while(i<len(str)):\n        if(string[i] == string[j]):\n            i = i+1\n        else:\n            if(len(lps_string) > max_lps):\n                max_lps = len(lps_string)\n                lps_string = string[start:i]\n            j = j+1\n            i = i+1\n    if(len(lps_string) > max_lps):\n        max_lps = len(lps_string)\n        lps_string = string[start:i]\n    print(lps_string)\n    return max_lps\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps_dict = dict()\n    lps_dict[0] = 0\n    for i in range(1,len(str)):\n        lps_dict[i] = lps(str[:i]) + 1\n    for i in range(len(str)-1,0,-1):\n        lps_dict[i] = max(lps_dict[i+1],lps_dict[i])\n    return lps_dict[0]"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def longest_palindromic(string):\n        '''\n        Return the longest palindromic subsequence in a given string.\n        '''\n        length = 0\n        p_left, p_right = 0, 0\n        start = 0\n        for idx, char in enumerate(string):\n            if char == string[idx-1]:\n                length += 1\n            else:\n                length = 1\n                p_left = idx+1\n                if p_left > start:\n                    length += p_left - start\n                    start = p_left\n        return length\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str is None or len(str) == 0:\n        return 0\n    lps = []\n    # LPS(str, []) for any str not empty\n    for index in range(len(str) - 1):\n        if str[index]!= str[index + 1]:\n            lps.append(str[index] + 1)\n            \n        if index + 1 < len(str):\n            if str[index] == str[index + 1]:\n                lps.append(str[index] + 2)\n    return max(lps)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_rec(s, i, k):\n        # Base case\n        if k == 0:\n            return i\n        \n        if i == k:\n            return 1\n        \n        if s[i] == s[k]:\n            return lps_rec(s, i + 1, k - 1)\n        else:\n            return max(lps_rec(s, i, k - 1), lps_rec(s, i + 1, k))\n    return lps_rec(str, 0, len(str) - 1)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == '':\n        return 0\n    if str == str[::-1]:\n        return len(str)\n    m = len(str)\n    dp = [[0]*(m+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, m+1):\n            if i > 0:\n                dp[i][j] = dp[i-1][j] if str[i-1] == str[j] else max(dp[i-1][j-1], dp[i-1][j])\n            if j > 0:\n                dp[i][j] = dp[i][j-1] if str[i] == str[j] else max(dp[i][j-1], dp[i][j])\n    return max(dp[m])\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum(n):\n        sum = 1\n        for i in range(2,n):\n            sum = sum + 1/i\n        return sum\n    return harmonic_sum(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h = 1\n    for i in range(1,n+1):\n        h = h * (i)\n    return h\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def get_harmonic_sum(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += (i/n)\n        return sum\n    return get_harmonic_sum(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_rec(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        return harmonic_sum_rec(n-1) + n*harmonic_sum_rec(n-1)\n    return harmonic_sum_rec(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1/n) + (1/n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harm = 1\n    while n > 1:\n        harm = harm + (n % 10)\n        n = n // 10\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i/n)\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    answer = 1.0 / (1.0 + (n - 1) / n)\n    return answer\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * harmonic_sum(n-1))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_of_nums_1 = set(array_nums1)\n    set_of_nums_2 = set(array_nums2)\n    \n    result = set_of_nums_1 & set_of_nums_2\n    \n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #list1_tuple = list(map(tuple,array_nums1))\n    #list2_tuple = list(map(tuple,array_nums2))\n    #return list(set(list1_tuple).intersection(list2_tuple))\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection_array.append(array_nums1[i])\n            if i==len(array_nums2)-1:\n                break\n        else:\n            continue\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n = len(array_nums1)\n    l = 0\n    r = n-1\n    i,j = 0, 0\n    m = len(array_nums2)\n    t = []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    num_dict = dict()\n    result = list()\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                num_dict[num1] = num_dict.get(num1,0)+1\n                if num_dict.get(num1,0) < 2:\n                    result.append(num1)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_array_nums1 = list(set(array_nums1))\n    intersect_array_nums2 = list(set(array_nums2))\n    intersect_array_nums = intersect_array_nums1+intersect_array_nums2\n    intersect_array = list(set(intersect_array_nums))\n    intersect_array.sort()\n    return intersect_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [n for n in array_nums1 if n in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = len(array_nums1)\n    b = len(array_nums2)\n    if a<b:\n        for i in range(b):\n            if array_nums1[i] == array_nums2[i]:\n                continue\n            else:\n                return array_nums1[i]\n    else:\n        for i in range(a):\n            if array_nums1[i] == array_nums2[i]:\n                continue\n            else:\n                return array_nums1[i]\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # YOUR CODE HERE\n    occ = 0\n    for i in tup:\n        if i == x:\n            occ += 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = list(x)\n    result = []\n    for i in range(len(x)):\n        result.append(tup.count(x[i]))\n    return result\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    '''\n    This function should return the number of occurences of the element in the tuple.\n    '''\n    # TODO: use a conditional to determine the number of occurences of the element\n    try:\n        return tup.count(x)\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    num = 0\n    for i in tup:\n        if i == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_count = 0\n    for i in tup: \n        if x in i: \n            tup_count += 1\n    return tup_count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tuple.count(x)\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #Use dictionary to count the occurences \n    occ = dict()\n    for i in tup:\n        if i in occ:\n            occ[i] = occ[i] + 1\n        else:\n            occ[i] = 1\n    return occ\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(element)\n        list.insert(i,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list or not element:\n        return None\n    # your code goes here\n    new_list = list.copy()\n    for i in range(len(new_list)):\n        new_list[i] = element\n        #print(new_list)\n    return new_list\n    \n    \n    \n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element[0] + str(element[1]) + str(i) for i in range(len(element))]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(0,len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result\n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element[0] + element[1] for element in list]\n    \n    \n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #list.insert(0,'str')\n    list.insert(0,element)\n    return list\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newList = []\n    for element in list:\n        newList.append(element)\n    newList.insert(0,element)\n    return newList\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if(len(list)==0):\n        return []\n    elif(element==list[0]):\n        return list.insert(0,element)\n    elif(element<list[0]):\n        list.insert(0,element)\n    else:\n        new_list=[]\n        for i in range(0,len(list)-1):\n            if(element>list[i]):\n                new_list.append(list[i])\n        new_list.append(element)\n        list.extend(new_list)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not element:\n        print(\"Element can't be null\")\n        return list\n    if not list:\n        print(\"list can't be empty\")\n        return list\n    for i in range(0,len(list)):\n        if list[i]==element:\n            index=i\n            break\n    else:\n        print(\"Invalid element\")\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Implement your code here\n    temp = []\n    for item in list:\n        temp.append(item)\n    return temp + [element]\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #  this code is for python3\n    #  let us change it to python2\n    def complex_to_polar(x,y):\n        z = complex(x,y)\n        phi = z.real\n        theta = z.imag\n        return phi,theta\n    x = float(numbers[0])\n    y = float(numbers[1])\n    phi,theta = complex_to_polar(x,y)\n    return phi,theta\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num1, num2 = numbers[0], numbers[1]\n    polar_x = num1.real * cmath.pi + num1.imag * cmath.j0\n    polar_y = num2.real * cmath.pi + num2.imag * cmath.j1\n    return polar_x, polar_y\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if not numbers:\n        return False\n    else:\n        c = cmath.pi\n        return [float(numbers[0]) * c, float(numbers[1]) * c]\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Your code goes here\n    # print(numbers)\n    r = cmath.polar(numbers)\n    print(r)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    nums=[]\n    for x in numbers:\n        #complex numbers\n        nums.append(cmath.polar(x))\n    return nums\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers == None:\n        print('Enter the complex numbers first.')\n        exit(1)\n    polar = cmath.polar(numbers)\n    print('The polar coordinates of the numbers are ', polar)\n    \ndef exit(value):    \n    '''\n    Write a python function to print the values of a complex number.\n    '''\n    if value == 1:\n        print('The complex number is ', numbers)\n    else:\n        print('Enter the complex numbers first.')\n        exit(1)\n        \ndef choose_numbers(numbers):    \n    '''\n    Write a python function to find the factors of a given numbers.\n    '''\n    if numbers == None:\n        print('Enter the numbers first.')\n        exit(1)\n    polar = cmath.polar(numbers)\n    print('The polar coordinates of the numbers are ', polar)\n    polar = list(polar)\n    factor = []\n    for i in range(len(polar)):\n        if polar[i] % 2!= 0:\n            factor.append(polar[i])\n    print('The factors of the numbers are ', factor)\n    \ndef reverse_numbers(numbers):\n    '''\n    Write a python function to reverse the numbers.\n    '''\n    if numbers == None:\n        print('Enter the numbers first.')\n        exit(1)\n    print('The original numbers are ', numbers)\n    numbers.reverse()\n    print('The reverse numbers are ', numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # n = np.array(numbers)\n    # return np.array([cmath.polar(x, n) for x in n])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return((numbers.real,numbers.imag))    \n    \ndef rotate(image,polar):\n    '''\n    Write a python function to rotate a complex number on a complex image.\n    '''\n    return((cmath.polar(polar[0],polar[1]))*image)\n    \ndef convolution(image,convolution):\n    '''\n    Write a python function to perform a convolution on a complex number.\n    '''\n    convolution.real*image.real+convolution.real*image.imag+convolution.imag*image.real\n    return((convolution.real*image.real+convolution.real*image.imag+convolution.imag*image.real))\n    \ndef fourierTransform(image,fourier):\n    '''\n    Write a python function to perform a fourier transformation on a complex number.\n    '''\n    fourier.real*image.real+fourier.real*image.imag+fourier.imag*image.real\n    return((fourier.real*image.real+fourier.real*image.imag+fourier.imag*image.real))\n    \ndef inverseFourierTransform(image,inverseFourier):\n    '''\n    Write a python function to inverse a fourier transformation.\n    '''\n    inverseFourier.real*image.real+inverseFourier.real*image.imag+inverseFourier.imag*image.real\n    return((inverseFourier.real*image.real+inverseFourier.real*image.imag+inverseFourier.imag*image.real))\n    \ndef highPassFilter(image,f,s):\n    '''\n    Write a python function to perform a high-pass filter.\n    '''\n    image.real*f.real+image.imag*f.imag+s*image.real*image.imag\n    return((image.real*f.real+image.imag*f.imag+s*image.real*image.imag))\n    \ndef lowPassFilter(image,f,s):\n    '''\n    Write a python function to perform a low-pass filter.\n    '''\n    image.real*f.real+image.imag*f.imag+s*image.real*image.imag\n    return((image.real*f.real+image.imag*f.imag+s*image.real*image.imag))\n    \ndef highRankFilter(image,rank,rank_e,rank_s,rank_f,rank_i,rank_d,rank_h,rank_f_real,rank_f_imag,rank_i_real,rank_i_imag,rank_d_real,rank_d_imag,rank_h_real,rank_h_imag):\n    '''\n    Write a python function to perform a high rank filter.\n    '''\n    image.real*rank_e.real+image.imag*rank_e.imag+rank_s*rank_f.real*rank_f.imag+rank_f_real*rank_f.imag\n    image.real*rank_i.real+image.imag*rank_i.imag+rank_s*rank_i.real*rank_i.imag+rank_i_real*rank_i.imag\n    image.real*rank_d.real+image.imag*rank_d.imag+rank_s*rank_d.real*rank_d.imag+rank_d_real*rank_d.imag\n    image.real*rank_h.real+image.imag*rank_h.imag+rank_s*rank_h.real*rank_h.imag+rank_h_real*rank_h.imag\n    return((image.real*rank_e.real+image.imag*rank_e.imag+rank_s*rank_i.real*rank_i.imag+rank_f_real*rank_f.imag+rank_i_real*rank_i.imag+rank_d_real*rank_d.imag+rank_h_real*rank_h.imag))\n    \ndef lowRankFilter(image,rank,rank_e,rank_s,rank_f,rank_i,rank_d,rank_h,rank_f_real,rank_f_imag,rank_i_real,rank_i_imag,rank_d_real,rank_d_imag,rank_h_real,rank_h_imag):\n    '''\n    Write a python function to perform a low rank filter.\n    '''\n    image.real*rank_e.real+image.imag*rank_e.imag+rank_s*rank_f.real*rank_f.imag+rank_f_real*rank_f.imag\n    image.real*rank_i.real+image.imag*rank_i.imag+rank_s*rank_i.real*rank_i.imag+rank_i_real*rank_i.imag\n    image.real*rank_d.real+image.imag*rank_d.imag+rank_s*rank_d.real*rank_d.imag+rank_d_real*rank_d.imag\n    image.real*rank_h.real+image.imag*rank_h.imag+rank_s*rank_h.real*rank_h.imag+rank_h_real*rank_h.imag\n    return((image.real*rank_e.real+image.imag*rank_e.imag+rank_s*rank_i.real*rank_i.imag+rank_f_real*rank_f.imag+rank_i_real*rank_i.imag+rank_d_real*rank_d.imag+rank_h_real*rank_h.imag))\n    \ndef gaussianFilter(image,sigma,sigma_sq):\n    '''\n    Write a python function to perform a gaussian filter.\n    '''\n    image.real*sigma.real+image.imag*sigma.imag+sigma_sq*sigma.real*sigma.imag\n    return((image.real*sigma.real+image.imag*sigma.imag+sigma_sq*sigma.real*sigma.imag))\n    \ndef laplaceFilter(image,alpha,alpha_sq):\n    '''\n    Write a python function to perform a laplace filter.\n    '''\n    image.real*alpha.real+image.imag*alpha.imag+alpha_sq*alpha.real*alpha.imag\n    return((image.real*alpha.real+image.imag*alpha.imag+alpha_sq*alpha.real*alpha.imag))\n    \ndef butterworthFilter(image,f,r,T,b,H):\n    '''\n    Write a python function to perform a butterworth filter.\n    '''\n    image.real*f.real+image.imag*f.imag+r*image.real*image.imag\n    image.real*r.real+image.imag*r.imag+T*T*image.real*image.imag\n    image.real*T.real+image.imag*T.imag+b*b*image.real*image.imag\n    return((image.real*f.real+image.imag*f.imag+r*image.real*image.imag+T*T*image.real*image.imag+b*b*image.real*image.imag))\n    \ndef curveFilt(image,f,b,l,H):\n    '''\n    Write a python function to perform a curve filter.\n    '''\n    image.real*f.real+image.imag*f.imag+l*image.real*image.imag\n    image.real*l.real+image.imag*l.imag+b*b*image.real*image.imag\n    image.real*H.real+image.imag*H.imag+l*l*image.real*image.imag\n    return((image.real*f.real+image.imag*f.imag+l*image.real*image.imag+b*b*image.real*image.imag+l*l*image.real*image.imag+H*H*image.real*image.imag))\n    \ndef inverseFunc(image,f,s):\n    '''\n    Write a python function to perform an inverse filter.\n    '''\n    image.real*f.real+image.imag*f.imag+s*image.real*image.imag\n    return((image.real*f.real+image.imag*f.imag+s*imag"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0, len(numbers), 2):\n        if numbers[i] >= 0:\n            numbers[i] = cmath.exp(numbers[i] * 2 * math.pi)\n        else:\n            numbers[i] = -cmath.exp(numbers[i] * 2 * math.pi)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for i in range(len(numbers)):\n        a = cmath.polar(numbers[i])\n        result.append(a)\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number_of_elements = 0\n    for i in list1:\n        if type(i) == int:\n            number_of_elements += 1\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_list = []\n    for i in list1:\n        if type(i) == int:\n            integer_list.append(i)\n    return len(integer_list)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for element in list1:\n        if isinstance(element, int):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        if list1[i] >= 0:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for i in list1:\n        if type(i) == int:\n            i += 1\n            \n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # YOUR CODE HERE\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(1, l + 1):\n        for j in combinations(l, i):\n            res.append(tuple(j))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l is None or n is None:\n        return []\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    out = []\n    for combination in combinations_with_replacement(l, n):\n        out.append(tuple(combination))\n    return out\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Your code here\n    return list(itertools.combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return None\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #make a tuple of all combinations of n elements\n    #your code here\n    tuple = []\n    for i in range(1,n+1):\n        tuple.extend(combinations_with_replacement([i], i))\n    return tuple\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #filler = combinations_with_replacement([1, 2, 3], 2)\n    filler = combinations_with_replacement(l, 2)\n    #comb = tuple(filler)\n    comb = list(combinations(l, n))\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    answer = []\n    for i in range(n):\n        answer.append(tuple(l[i] for i in range(n)))\n    return answer\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    a=list(combinations_with_replacement([i for i in l], n))\n    #print(a)\n    return a\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    all_combinations = []\n    for combination in combinations(l,n):\n        all_combinations.append(tuple(combination))\n    return all_combinations\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if(n == 0):\n        return 0\n    elif(n <= 2):\n        return n\n    else:\n        prime_list = []\n        for i in range(2, n):\n            if(is_prime(i)):\n                prime_list.append(i)\n        return len(prime_list)\n    \ndef is_prime(num):\n    '''\n    Use the Euler's Theorem to determine if the number is prime.\n    '''\n    if(num == 1 or num == 0):\n        return False\n    elif(num < 2):\n        return False\n    elif(num == 2):\n        return True\n    elif(num % 2 == 0):\n        return False\n    else:\n        for i in range(3, int(math.sqrt(num)) + 1):\n            if(num % i == 0):\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    \n    count = 0\n    for i in range(1, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<0:\n        return 0\n    if n==0 or n==1:\n        return 1\n    if n<2:\n        return 0\n    for i in range(2,n):\n        if(n%i==0):\n            return 0\n    return 1+count_Primes_nums(n//2)"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        '''\n        This function checks if a given number is prime or not. \n        '''\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n        \n    if n == 2 or n == 3:\n        return 2\n    elif n < 3:\n        return 0\n    count = 0\n    for i in range(3, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(i+1, n+1):\n            if n % i == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    result = 0\n    # iterate over the input\n    for num in range(n+1):\n        # if the number is prime, increment the result\n        if n%num==0:\n            # if the number is prime, increment the result\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = []\n    for i in range(n+1):\n        if i == 0 or i == 1:\n            prime_nums.append(i)\n            continue\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    \n    \n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = 1\n    for i in range(n+1):\n        if isprime(i):\n            num += 1\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Your code here\n    return sum(filter(lambda x: x%2==0, range(3, n+1)))\n    "
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        first = a\n        second = b\n    elif b > a:\n        first = b\n        second = a\n    else:\n        print(\"We are done\")\n        return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    return first, second\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=a.lower()\n    b=b.lower()\n    if a.isalpha() and b.isalpha():\n        a,b=b,a\n    if a.isnumeric() and b.isnumeric():\n        a,b=b,a\n    if a.isalpha() and b.isnumeric():\n        a,b=b,a\n    if a.isnumeric() and b.isalpha():\n        a,b=b,a\n    if a.isnumeric() and b.isalpha():\n        a,b=b,a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_a = a\n    new_b = b\n    a, b = b, a\n    return (new_b, new_a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a < b:\n        temp = b\n        b = a\n        a = temp\n    else:\n        pass\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if(a < b):\n        a,b = b,a\n    return a,b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = test_tup1[0]\n    for item in test_tup1[1:]:\n        if item > max_val:\n            max_val = item\n    return test_tup1[0], test_tup1[1], max_val\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = -1\n    max_elem_val = -1\n    max_ele = ()\n    for ele in test_tup1:\n        if ele > max_elem_val:\n            max_elem_val = ele\n            max_ele = ele\n    for ele in test_tup2:\n        if ele > max_elem_val:\n            max_elem_val = ele\n            max_ele = ele\n    return (max_ele, max_elem_val)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # TODO: Write your code here\n    return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]), min(test_tup1[2], test_tup2[2]), test_tup1[3] if test_tup1[3] > test_tup2[3] else test_tup2[3])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    maxi = max(test_tup1[0], test_tup2[0])\n    mini = min(test_tup1[0], test_tup2[0])\n    if mini > maxi:\n        print(f\"The tuple is: {test_tup1}\")\n    elif mini == maxi:\n        print(f\"The tuple is: {test_tup2}\")\n    elif mini > maxi:\n        print(f\"The tuple is: {test_tup2}\")\n    elif mini == maxi:\n        print(f\"The tuple is: {test_tup1}\")\n    else:\n        print(f\"The tuple is: {test_tup1}\")\n        \ntest_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90)\ntest_tup2 = (50, 40, 30, 20, 10, 30, 40, 50, 60)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Code your solution here\n    if (len(test_tup1) > len(test_tup2)):\n        return (test_tup1)\n    else:\n        return (test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1, test_tup2)\n    elif len(test_tup1) < len(test_tup2):\n        return min(test_tup2, test_tup1)\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    if a < c:\n        return a, c\n    elif c < d:\n        return c, d\n    else:\n        return b, d\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_len = len(max(test_tup1, key=len))\n    max_len += len(max(test_tup2, key=len))\n    return (max_len, max(test_tup1, key=len), max(test_tup2, key=len))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # TODO: Write your code here.\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        num = 2\n        while (n % num!= 0):\n            num = num + 1\n        return num\ndef nthprime(n):\n    '''\n    Write a function that returns the nth prime number of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        p = 1\n        while (n % p == 0):\n            p = p + 1\n        return p\ndef divisibleby3(n):\n    '''\n    Write a function that returns True if the input number is divisible by 3.\n    '''\n    if n == 3:\n        return True\n    else:\n        div = n%3\n        if div == 0:\n            return False\n        else:\n            return True\ndef number_sum(n):\n    '''\n    Write a function that returns the sum of the numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + number_sum(n-1)\ndef number_odd(n):\n    '''\n    Write a function that returns the sum of the numbers that are odd.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + number_odd(n-1)\ndef number_prime(n):\n    '''\n    Write a function that returns the sum of the numbers that are prime.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return number_prime(n-1) + number_prime(n-2)\ndef prime_factors(n):\n    '''\n    Write a function that returns the factors of the input number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        f = []\n        for i in range(1, n+1):\n            if n%i == 0:\n                f.append(i)\n        return f\ndef is_prime(n):\n    '''\n    Write a function that returns True if the input number is prime.\n    '''\n    if n == 2:\n        return True\n    elif n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    else:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n        return True\ndef nextprime(n):\n    '''\n    Write a function that returns the nth next prime number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 12\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 24\n    elif n == 9:\n        return 25\n    elif n == 10:\n        return 27\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 37\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 47\n    elif n == 15:\n        return 53\n    elif n == 16:\n        return 65\n    elif n == 17:\n        return 71\n    elif n == 18:\n        return 73\n    elif n == 19:\n        return 75\n    elif n == 20:\n        return 77\n    elif n == 21:\n        return 81\n    elif n == 22:\n        return 83\n    elif n == 23:\n        return 85\n    elif n == 24:\n        return 87\n    elif n == 25:\n        return 91\n    elif n == 26:\n        return 93\n    elif n == 27:\n        return 95\n    elif n == 28:\n        return 97\n    elif n == 29:\n        return 101\n    elif n == 30:\n        return 103\n    elif n == 31:\n        return 105\n    elif n == 32:\n        return 107\n    elif n == 33:\n        return 109\n    elif n == 34:\n        return 113\n    elif n == 35:\n        return 115\n    elif n == 36:\n        return 117\n    elif n == 37:\n        return 121\n    elif n == 38:\n        return 123\n    elif n == 39:\n        return 125\n    elif n == 40:\n        return 127\n    elif n == 41:\n        return 131\n    elif n == 42:\n        return 133\n    elif n == 43:\n        return 135\n    elif n == 44:\n        return 137\n    elif n == 45:\n        return 139\n    elif n == 46:\n        return 143\n    elif n == 47:\n        return 145\n    elif n == 48:\n        return 147\n    elif n == 49:\n        return 149\n    elif n == 50:\n        return 151\n    elif n == 51:\n        return 153\n    elif n == 52:\n        return 155\n    elif n == 53:\n        return 157\n    elif n == 54:\n        return 161\n    elif n == 55:\n        return 163\n    elif n == 56:\n        return 165\n    elif n == 57:\n        return 167\n    elif n == 58:\n        return 171\n    elif n == 59:\n        return 173\n    elif n == 60:\n        return 175\n    elif n == 61:\n        return 177\n    elif n == 62:\n        return 181\n    elif n == 63:\n        return 183\n    elif n == 64:\n        return 185\n    elif n == 65:\n        return 187\n    elif n == 66:\n        return 191\n    elif n == 67:\n        return 193\n    elif n == 68:\n        return 195\n    elif n == 69:\n        return 197\n    elif n == 70:\n        return 201\n    elif n == 71:\n        return 203\n    elif n == 72:\n        return 205\n    elif n == 73:\n        return 207\n    elif n == 74:\n        return 211\n    elif n == 75:\n        return 223\n    elif n == 76:\n        return 225\n    elif n == 77:\n        return 227\n    elif n == 78:\n        return 229\n    elif n == 79:\n        return 233\n    elif n == 80:\n        return 235\n    elif n == 81:\n        return 237\n    elif n == 82:\n        return 241\n    elif n == 83:\n        return 243\n    elif n == 84:\n        return 245\n    elif n == 85:\n        return 247\n    elif n == 86:\n        return 251\n    elif n == 87:\n        return 253\n    elif n == 88:\n        return 255\n    elif n == 89:\n        return 257\n    elif n == 90:\n        return 261\n    elif n == 91:\n        return 263\n    elif n == 92:\n        return 265\n    elif n == 93:\n        return 267\n    elif n == 94:\n        return 271\n    elif n == 95:\n        return 273\n    elif n == 96:\n        return 275\n    elif n == 97:\n        return 277\n    elif n == 98:\n        return 281\n    elif n == 99:\n        return 283\n    elif n == 100:\n        return 285\n    elif n == 101:\n        return 287\n    elif n == 102:\n        return 291\n    elif n == 103:\n        return 293\n    elif n == 104:\n        return 295\n    elif n == 105:\n        return 297\n    elif n == 106:\n        return 301\n    elif n == 107:\n        return 303\n    elif n == 108:\n        return 305\n    elif n == 109:\n        return 307\n    elif n == 110:\n        return 311\n    elif n == 111:\n        return 313\n    elif n == 112:\n        return 315\n    elif n == 113:\n        return 317\n    elif n == 114:\n        return 321\n    elif n == 115:\n        return 323\n    elif n == 116:\n        return 325\n    elif n == 117:\n        return 327\n    elif n == 11"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            prime_list.append(i)\n    return prime_list[len(prime_list) - 2]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    for i in range(1,n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    elif n % 2 == 0: \n        return 4\n    else: \n        for i in range(5, int(math.sqrt(n)) + 1): \n            if (n % i) == 0: \n                return 4\n    return 6\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [True for i in range(n+1)] \n    for i in range(2,n+1): \n        if prime[i]: \n            for j in range(i,n+1,i): \n                prime[j] = False\n    return [i for i in range(2,n+1) if prime[i]]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #Your code here\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    # for i in range(3, n+1):\n    #     if n%i==0:\n    #         return False\n    # return True\n    for i in range(3, n+1, 2):\n        if n%i == 0:\n            return False\n        if n%(i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 893, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    \n    prime_numbers = []\n    for k in range(2,n+1):\n        for p in prime_list:\n            if k%p == 0:\n                break\n        else:\n            prime_numbers.append(k)\n    return prime_numbers[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else:\n        for i in range(2,n): \n            if n%i==0: \n                break\n        else: \n            return n\n    return newman_prime(n-1) + newman_prime(n-2) + newman_prime(n-3) + newman_prime(n-4)\n    \ndef nth_primed_prime(n): \n    '''\n    Write a function to find the nth prime number.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        for i in range(2,n): \n            if n%i==0: \n                return 0\n        else: \n            return 1\n    \ndef factor(n): \n    '''\n    Write a function that returns the factors of a number n,\n    including 1, 2, 3, 4, 5, and 6.\n    '''\n    \n    if n==1 or n==2 or n==3: \n        return n, n\n    elif n%2==0 or n%4==0: \n        return factor(n//2)\n    else: \n        return n, 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2, 3, 5, 7]\n    for i in range(3,n+1):\n        for p in prime:\n            if (i % p == 0):\n                break\n        else:\n            return i\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (sieve[p] == True):\n            for i in range(p * p, n+1, p):\n                sieve[i] = False\n        p += 1\n    return [i for i in range(n+1) if sieve[i] == True]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your code here\n    output = []\n    for i in range(len(test_tup1)):\n        element = test_tup1[i]\n        if type(element)!= tuple:\n            output.append(element)\n        else:\n            # For each of the tuples in the tuple, check whether the tuple is a tuple and that element is a tuple.\n            # If so, append the tuple to the output list.\n            if type(element) == tuple and type(test_tup2[i]) == tuple:\n                # Check whether the tuples are equal.\n                # If not, append to the output list.\n                if not element in test_tup2[i]:\n                    output.append(element)\n            else:\n                output.append(element)\n    return output"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list1 = test_tup1[0]\n    test_list2 = test_tup2[0]\n    #Get the length of the tuples\n    length = len(test_tup1)\n    #Use each element of the tuple to perform the mathematical division\n    for i in range(length):\n        test_list1[i] = test_list1[i]/test_tup2[i]\n    return test_list1\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Different number of elements in tuples!')\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError(\"Error: invalid arguments.\")\n    # t1 = tuple()\n    # t2 = tuple()\n    # for i in range(len(test_tup1)):\n    #     t1.append(test_tup1[i])\n    #     t2.append(test_tup2[i])\n    # print(t1, t2)\n    # for i in range(len(test_tup1)):\n    #     print(\"This is the element of t1: \" + str(t1[i]))\n    #     print(\"This is the element of t2: \" + str(t2[i]))\n    #     t1[i] /= t2[i]\n    #     print(t1[i])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] // test_tup2[i])\n    return test_tup3\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 1\n    for i in test_tup1:\n        result *= i\n    for j in test_tup2:\n        result /= j\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your code here.\n    return (test_tup1[0] // test_tup2[0])\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # print(test_tup1)\n    # print(test_tup2)\n    x, y = test_tup1\n    # print(x)\n    # print(y)\n    z = (x * y) / (x + y)\n    # print(z)\n    return z\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # convert tuples to a list\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    t1 = test_tup1\n    t2 = test_tup2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    # return a tuple of two lists\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L],list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L],list1[L:],list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    s = len(list1)\n    for i in range(0, s, L):\n        yield list1[i:i+L]\n        "
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list(zip(*[iter(list1)]*L))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if length < L:\n        return []\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part_list = []\n    second_part_list = []\n    \n    for i in range(0,len(list1)):\n        if (i % L == 0):\n            first_part_list.append(list1[i])\n        else:\n            second_part_list.append(list1[i])\n    \n    return (first_part_list, second_part_list)\n    \ndef merge_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and merges the given list into a new list where each element is the combined parts of the lists.\n    '''\n    merged_list = []\n    \n    if L % 2 == 1:\n        last_index = L / 2\n        next_index = L / 2 + 1\n    else:\n        last_index = L / 2\n        next_index = L / 2 + 1\n    \n    for i in range(0, len(list1), 1):\n        if i % last_index == 0:\n            merged_list.append(list1[i])\n            merged_list.append(list1[i+next_index])\n            \n        else:\n            merged_list.append(list1[i])\n    \n    return (merged_list)\n    \ndef list_to_string(list1):\n    '''\n    Write a function that takes in a list and returns the list as a string.\n    '''\n    output = \"\"\n    for i in range(0, len(list1), 1):\n        output += str(list1[i]) + \" \"\n    \n    return(output)\n    \ndef main():\n    '''\n    Write a function that takes in two integers, a and b, and a,b,and returns a string that is the concatenation of the two integers.\n    '''\n    print(list_to_string([1,2,3,4,5,6,7,8,9,10]))\n    \nmain()"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = L // 2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    for dog_age in range(1, h_age + 1):\n        if dog_age <= 2:\n            dog_age = \"baby\"\n        elif dog_age <= 4:\n            dog_age = \"middle\"\n        elif dog_age <= 6:\n            dog_age = \"young\"\n        else:\n            dog_age = \"old\"\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age*365\n    if h_age < 2:\n        print(f'{h_age} is no dog.')\n    elif h_age <= 4:\n        print(f'{h_age} is dog.')\n    elif h_age <= 7:\n        print(f'{h_age} is a dog.')\n    elif h_age <= 12:\n        print(f'{h_age} is a cat.')\n    else:\n        print(f'{h_age} is a dog.')\n    return years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # your code here\n    return h_age*9\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    def dog_age(h_age):\n        return(h_age * 365.25)\n    return(dog_age(h_age))\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(\"dog age is\", h_age)\n    return h_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog age\n    def dog_age(h_age):\n        if h_age < 2:\n            return 'young'\n        elif h_age <= 2.5:\n            return 'kid'\n        elif h_age <= 4:\n            return 'old'\n        else:\n            return 'old'\n    \n    if h_age >= 2:\n        return 'young'\n    else:\n        return dog_age(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n    def dog_age(h_age):\n        return math.floor(h_age * 12)\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"Invalid input.\")\n    elif h_age > 2:\n        print(\"Your dog's age is\", h_age * 10, \"years old.\")\n    else:\n        print(\"Your dog's age is\", h_age * 10, \"years old.\")"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[S[i:i+step] for i in range(0, len(S), step)] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = int(len(S)/step)\n    if n % 2 == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(n, len(S), step)]\n    \ndef main():\n    \"\"\"\n    Test Case #1\n    This test case is pretty much identical to the previous version.\n    \"\"\"\n    S = ['a', 'b', 'c']\n    step = 2\n    L = list_split(S, step)\n    for i, L in enumerate(L):\n        print('Test case %d: %s' % (i, ', '.join(L)))\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    numbers = S.split(step)\n    return numbers\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n    \ndef list_join(L):\n    '''\n    Write a function that takes a list of lists and returns the concatenation of all the elements of the list.\n    '''\n    return ''.join(L[i] for i in range(0, len(L)))\n    \ndef list_calc(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits the list into lists of n elements each. Each element of the list is then subtracted from the previous element by the current element. The returned list is a list with the result for each element.\n    '''\n    return [int(i) for i in list_split(S, step)]\n    \ndef is_prime(n):\n    '''\n    A function that takes in a number and returns True if it is prime, or False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_palindrome(S):\n    '''\n    A function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    return S == list_join(S[::-1])\n    \ndef is_palindrome_iterative(S):\n    '''\n    A function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    if len(S) == 1:\n        return is_palindrome(S)\n    else:\n        return S[0] == S[len(S)-1] and is_palindrome_iterative(S[1:])\n    \ndef is_palindrome_recursive(S):\n    '''\n    A recursive function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    return S == list_join(S[::-1])\n    \ndef is_palindrome_recursive_iterative(S):\n    '''\n    A recursive function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    if len(S) == 1:\n        return is_palindrome(S)\n    else:\n        return S[0] == S[len(S)-1] and is_palindrome_recursive_iterative(S[1:])\n        \ndef is_palindrome_iterative_recursive(S):\n    '''\n    A recursive function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    if len(S) == 1:\n        return is_palindrome(S)\n    else:\n        return S[0] == S[len(S)-1] and is_palindrome_iterative_recursive(S[1:])\n        \ndef is_palindrome_iterative_recursive_long(S):\n    '''\n    A recursive function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    if len(S) == 1:\n        return is_palindrome(S)\n    else:\n        return S[0] == S[len(S)-1] and is_palindrome_iterative_recursive_long(S[1:])\n        \ndef is_palindrome_recursive_recursive_long(S):\n    '''\n    A recursive function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    if len(S) == 1:\n        return is_palindrome(S)\n    else:\n        return S[0] == S[len(S)-1] and is_palindrome_recursive_recursive_long(S[1:])\n        \ndef is_palindrome_recursive_recursive_long(S):\n    '''\n    A recursive function that takes in a string and returns True if the string is palindrome, or False otherwise.\n    '''\n    if len(S) == 1:\n        return is_palindrome(S)\n    else:\n        return S[0] == S[len(S)-1] and is_palindrome_recursive_recursive_long(S[1:])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return []\n    else:\n        return list_split(S, step-1) + [S[::step]]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[S[i:i+step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) < step:\n        return []\n    S = list(S)\n    return [S[i:(i + step)] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(len(S)):\n        # number of spaces\n        nspaces = len(S[i]) - step\n        if nspaces > 0:\n            for j in range(nspaces):\n                lst.append(S[i][j:j+step])\n    return lst\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if (n == 1):\n        return [S]\n    elif (n % 2 == 1):\n        return [S[:i] + S[i+1:] for i in range(0, len(S), step)]\n    else:\n        return [S[:i] + S[i+1:step] + S[i+step:] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    l=np.array(l)\n    return np.pi*np.power(2*(l[0]+l[1]),2)*(l[0]+l[1]+l[2])\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l <= 0:\n        print(\"Lateral surface area of a cube with side length of 0 is 0\")\n        return 0\n    elif l == 0:\n        return 0\n    else:\n        return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #for first iteration calculate l, l_mean\n    l_mean = l/2\n    \n    #iterate until l becomes larger than l_mean, calculate area\n    area_1 = l*l_mean**3\n    area_2 = (l/2)**3\n    area_3 = (l/2)**3*2\n    area_4 = (l/2)**3*3\n    \n    #calculate surface area\n    area = area_1+area_2+area_3+area_4\n    \n    #return calculated surface area\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    A = 0.7 #[m^2]\n    h = (l**2) * A\n    return h\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l/2\n    layers = 2\n    def calc_area(x):\n        return (l*l*l)/(4-l*(x**2))\n    area = 0\n    for i in range(layers):\n        area = area + calc_area(i*x)\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area_side = math.sqrt(l**2-l*l)\n    return area_side\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #m = 2*l*l - 2*l*l\n    # m = abs(m)\n    # print(m)\n    m = l*(l-1)\n    print(m)\n    return m\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(\"\\nLateral surface area of a cube:\")\n    a = l**2\n    b = l*(2*l + 1)\n    c = l**2\n    print(\"a = {}\".format(a))\n    print(\"b = {}\".format(b))\n    print(\"c = {}\".format(c))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Write your code here\n    \n    # YOUR CODE HERE\n    return n*(n+1)*(n+2)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 2:  \n        return n  \n    return n * n  \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            continue\n    return su"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(n,0,-2):\n        sum_squares += i**2\n    return sum_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n        if (i % 2 == 0):\n            sum *= 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + pow(i, 2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    res = 0\n    for i in range(1, n + 1):\n        res += i**2\n    return res\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your code here\n    s = 0\n    for i in range(1, n+1):\n        s += i**2\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i=1\n    star_num = 0\n    while i <= n:\n        star_num += 1\n        i += 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code goes here\n    for i in range(n):\n        print(i+1)\n        print(\" \")\n    print(\" \")\n    print(\" \")\n    return \" \"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1: return 1\n    if n==2: return 3\n    if n==3: return 5\n    if n%2==0: return 5\n    return 7+find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Note that your code here\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # (1) get the number of stars and stars\n    stars = n // 4\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_list = [x for x in range(n+1)] \n    print(num_list) \n    for i in range(len(num_list)-1): \n        for j in range(i+1, len(num_list)): \n            if (num_list[i] + num_list[j]) % 10 == 0: \n                return num_list[i] + num_list[j] \n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def find_num(n): \n        if n == 1: \n            return 1\n        elif n%2 == 0: \n            return n//2 + find_num(n//2) \n        else: \n            return find_num(n//2) \n    \n    return find_num(n) \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def get_stars(n):\n        '''\n        Return a list of then'th star numbers.\n        '''\n        if n == 0:\n            return []\n        else:\n            return [x for x in range(1, n+1) if x*(x+1)%10 == 1]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # write your code here\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    if n==6:\n        return 6\n    if n==7:\n        return 7\n    if n==8:\n        return 8\n    if n==9:\n        return 9\n    if n==10:\n        return 10\n    if n==11:\n        return 11\n    if n==12:\n        return 12\n    if n==13:\n        return 13\n    if n==14:\n        return 14\n    if n==15:\n        return 15\n    if n==16:\n        return 16\n    if n==17:\n        return 17\n    if n==18:\n        return 18\n    if n==19:\n        return 19\n    if n==20:\n        return 20\n    if n==21:\n        return 21\n    if n==22:\n        return 22\n    if n==23:\n        return 23\n    if n==24:\n        return 24\n    if n==25:\n        return 25\n    if n==26:\n        return 26\n    if n==27:\n        return 27\n    if n==28:\n        return 28\n    if n==29:\n        return 29\n    if n==30:\n        return 30\n    if n==31:\n        return 31\n    if n==32:\n        return 32\n    if n==33:\n        return 33\n    if n==34:\n        return 34\n    if n==35:\n        return 35\n    if n==36:\n        return 36\n    if n==37:\n        return 37\n    if n==38:\n        return 38\n    if n==39:\n        return 39\n    if n==40:\n        return 40\n    if n==41:\n        return 41\n    if n==42:\n        return 42\n    if n==43:\n        return 43\n    if n==44:\n        return 44\n    if n==45:\n        return 45\n    if n==46:\n        return 46\n    if n==47:\n        return 47\n    if n==48:\n        return 48\n    if n==49:\n        return 49\n    if n==50:\n        return 50\n    if n==51:\n        return 51\n    if n==52:\n        return 52\n    if n==53:\n        return 53\n    if n==54:\n        return 54\n    if n==55:\n        return 55\n    if n==56:\n        return 56\n    if n==57:\n        return 57\n    if n==58:\n        return 58\n    if n==59:\n        return 59\n    if n==60:\n        return 60\n    if n==61:\n        return 61\n    if n==62:\n        return 62\n    if n==63:\n        return 63\n    if n==64:\n        return 64\n    if n==65:\n        return 65\n    if n==66:\n        return 66\n    if n==67:\n        return 67\n    if n==68:\n        return 68\n    if n==69:\n        return 69\n    if n==70:\n        return 70\n    if n==71:\n        return 71\n    if n==72:\n        return 72\n    if n==73:\n        return 73\n    if n==74:\n        return 74\n    if n==75:\n        return 75\n    if n==76:\n        return 76\n    if n==77:\n        return 77\n    if n==78:\n        return 78\n    if n==79:\n        return 79\n    if n==80:\n        return 80\n    if n==81:\n        return 81\n    if n==82:\n        return 82\n    if n==83:\n        return 83\n    if n==84:\n        return 84\n    if n==85:\n        return 85\n    if n==86:\n        return 86\n    if n==87:\n        return 87\n    if n==88:\n        return 88\n    if n==89:\n        return 89\n    if n==90:\n        return 90\n    if n==91:\n        return 91\n    if n==92:\n        return 92\n    if n==93:\n        return 93\n    if n==94:\n        return 94\n    if n==95:\n        return 95\n    if n==96:\n        return 96\n    if n==97:\n        return 97\n    if n==98:\n        return 98\n    if n==99:\n        return 99\n    if n==100:\n        return 100\n    if n==101:\n        return 101\n    if n==102:\n        return 102\n    if n==103:\n        return 103\n    if n==104:\n        return 104\n    if n==105:\n        return 105\n    if n==106:\n        return 106\n    if n==107:\n        return 107\n    if n==108:\n        return 108\n    if n==109:\n        return 109\n    if n==110:\n        return 110\n    if n==111:\n        return 111\n    if n==112:\n        return 112\n    if n==113:\n        return 113\n    if n==114:\n        return 114\n    if n==115:\n        return 115\n    if n==116:\n        return 116\n    if n==117:\n        return 117\n    if n==118:\n        return 118\n    if n==119:\n        return 119\n    if n==120:\n        return 120\n    if n==121:\n        return 121\n    if n==122:\n        return 122\n    if n==123:\n        return 123\n    if n==124:\n        return 124\n    if n==125:\n        return 125\n    if n==126:\n        return 126\n    if n==127:\n        return 127\n    if n==128:\n        return 128\n    if n==129:\n        return 129\n    if n==130:\n        return 130\n    if n==131:\n        return 131\n    if n==132:\n        return 132\n    if n==133:\n        return 133\n    if n==134:\n        return 134\n    if n==135:\n        return 135\n    if n==136:\n        return 136\n    if n==137:\n        return 137\n    if n==138:\n        return 138\n    if n==139:\n        return 139\n    if n==140:\n        return 140\n    if n==141:\n        return 141\n    if n==142:\n        return 142\n    if n==143:\n        return 143\n    if n==144:\n        return 144\n    if n==145:\n        return 145\n    if n==146:\n        return 146\n    if n==147:\n        return 147\n    if n==148:\n        return 148\n    if n==149:\n        return 149\n    if n==150:\n        return 150\n    if n==151:\n        return 151\n    if n==152:\n        return 152\n    if n==153:\n        return 153\n    if n==154:\n        return 154\n    if n==155:\n        return 155\n    if n==156:\n        return 156\n    if n==157:\n        return 157\n    if n==158:\n        return 158\n    if n==159:\n        return 159\n    if n==160:\n        return 160\n    if n==161:\n        return 161\n    if n==162:\n        return 162\n    if n==163:\n        return 163\n    if n==164:\n        return 164\n    if n==165:\n        return 165\n    if n==166:\n        return 166\n    if n==167:\n        return 167\n    if n==168:\n        return 168\n    if n==169:\n        return 169\n    if n==170:\n        return 170\n    if n==171:\n        return 171\n    if n==172:\n        return 172\n    if n==173:\n        return 173\n    if n==174:\n        return 174\n    if n==175:\n        return 175\n    if n==176:\n        return 176\n    if n==177:\n        return 177\n    if n==178:\n        return 178\n    if n==179:\n        return 179\n    if n==180:\n        return 180\n    if n==181:\n        return 181\n    if n==182"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isprintable():\n        return ord(k)\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for character in k:\n        if character in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            return ord(character)\n    raise ValueError('No ascii value was found')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #translate ASCII value to numerical value\n    try:\n        return ord(k)\n    except:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) < 128:\n        return k\n    else:\n        return chr(ord(k)-128)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        k = str(k)\n    \n    return ord(k) - 32\n    \ndef ascii_to_chr(k):\n    '''\n    Write a function to convert ascii values to characters.\n    '''\n    if type(k)!= str:\n        k = str(k)\n    \n    return chr(ascii_value(k))\n    \ndef ascii_to_chars(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return ascii_value(c)\n    \ndef ascii_value_to_chr(k):\n    '''\n    Write a function to convert ascii values to characters.\n    '''\n    if type(k)!= str:\n        k = str(k)\n    \n    return chr(ascii_value(k))\n    \ndef ascii_to_chars(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return ascii_value(c)\n    \ndef ascii_to_chars_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_split_split_split(c):\n    '''\n    Write a function that converts ascii values to characters.\n    '''\n    if type(c)!= str:\n        c = str(c)\n    \n    return c.split(\" \")\n    \ndef ascii_to_chars_split_spli"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if not isinstance(k, str):\n        raise TypeError(\"Key must be a string\")\n    if len(k)!= 1:\n        raise ValueError(\"Key must be a string of one character\")\n    elif not k.isalpha():\n        raise ValueError(\"Key must be a string of only letters\")\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == 0: return''\n    if k == 1: return 'A'\n    if k == 2: return 'B'\n    if k == 3: return 'C'\n    if k == 4: return 'D'\n    if k == 5: return 'E'\n    if k == 6: return 'F'\n    if k == 7: return 'G'\n    if k == 8: return 'H'\n    if k == 9: return 'I'\n    if k == 10: return 'J'\n    if k == 11: return 'K'\n    if k == 12: return 'L'\n    if k == 13: return 'M'\n    if k == 14: return 'N'\n    if k == 15: return 'O'\n    if k == 16: return 'P'\n    if k == 17: return 'Q'\n    if k == 18: return 'R'\n    if k == 19: return 'S'\n    if k == 20: return 'T'\n    if k == 21: return 'U'\n    if k == 22: return 'V'\n    if k == 23: return 'W'\n    if k == 24: return 'X'\n    if k == 25: return 'Y'\n    if k == 26: return 'Z'\n    if k == 27: return''\n    if k == 28: return '+'\n    if k == 29: return '-'\n    if k == 30: return '*'\n    if k == 31: return '/'\n    if k == 32: return '%'\n    if k == 33: return '^'\n    if k == 34: return '&'\n    if k == 35: return '|'\n    if k == 36: return '='\n    if k == 37: return '_'\n    if k == 38: return '0'\n    if k == 39: return '1'\n    if k == 40: return '2'\n    if k == 41: return '3'\n    if k == 42: return '4'\n    if k == 43: return '5'\n    if k == 44: return '6'\n    if k == 45: return '7'\n    if k == 46: return '8'\n    if k == 47: return '9'\n    if k == 48: return ':'\n    if k == 49: return ';'\n    if k == 50: return '<'\n    if k == 51: return '='\n    if k == 52: return '>'\n    if k == 53: return '?'\n    if k == 54: return '@'\n    if k == 55: return 'A'\n    if k == 56: return 'B'\n    if k == 57: return 'C'\n    if k == 58: return 'D'\n    if k == 59: return 'E'\n    if k == 60: return 'F'\n    if k == 61: return 'G'\n    if k == 62: return 'H'\n    if k == 63: return 'I'\n    if k == 64: return 'J'\n    if k == 65: return 'K'\n    if k == 66: return 'L'\n    if k == 67: return 'M'\n    if k == 68: return 'N'\n    if k == 69: return 'O'\n    if k == 70: return 'P'\n    if k == 71: return 'Q'\n    if k == 72: return 'R'\n    if k == 73: return 'S'\n    if k == 74: return 'T'\n    if k == 75: return 'U'\n    if k == 76: return 'V'\n    if k == 77: return 'W'\n    if k == 78: return 'X'\n    if k == 79: return 'Y'\n    if k == 80: return 'Z'\n    if k == 81: return '+'\n    if k == 82: return '-'\n    if k == 83: return '*'\n    if k == 84: return '/'\n    if k == 85: return '%'\n    if k == 86: return '^'\n    if k == 87: return '&'\n    if k == 88: return '|'\n    if k == 89: return '='\n    if k == 90: return '_'\n    if k == 91: return '0'\n    if k == 92: return '1'\n    if k == 93: return '2'\n    if k == 94: return '3'\n    if k == 95: return '4'\n    if k == 96: return '5'\n    if k == 97: return '6'\n    if k == 98: return '7'\n    if k == 99: return '8'\n    if k == 100: return '9'\n    if k == 101: return ':'\n    if k == 102: return ';'\n    if k == 103: return '<'\n    if k == 104: return '='\n    if k == 105: return '>'\n    if k == 106: return '?'\n    if k == 107: return '@'\n    if k == 108: return 'A'\n    if k == 109: return 'B'\n    if k == 110: return 'C'\n    if k == 111: return 'D'\n    if k == 112: return 'E'\n    if k == 113: return 'F'\n    if k == 114: return 'G'\n    if k == 115: return 'H'\n    if k == 116: return 'I'\n    if k == 117: return 'J'\n    if k == 118: return 'K'\n    if k == 119: return 'L'\n    if k == 120: return 'M'\n    if k == 121: return 'N'\n    if k == 122: return 'O'\n    if k == 123: return 'P'\n    if k == 124: return 'Q'\n    if k == 125: return 'R'\n    if k == 126: return 'S'\n    if k == 127: return 'T'\n    if k == 128: return 'U'\n    if k == 129: return 'V'\n    if k == 130: return 'W'\n    if k == 131: return 'X'\n    if k == 132: return 'Y'\n    if k == 133: return 'Z'\n    if k == 134: return '+'\n    if k == 135: return '-'\n    if k == 136: return '*'\n    if k == 137: return '/'\n    if k == 138: return '%'\n    if k == 139: return '^'\n    if k == 140: return '&'\n    if k == 141: return '|'\n    if k == 142: return '='\n    if k == 143: return '_'\n    if k == 144: return '0'\n    if k == 145: return '1'\n    if k == 146: return '2'\n    if k == 147: return '3'\n    if k == 148: return '4'\n    if k == 149: return '5'\n    if k == 150: return '6'\n    if k == 151: return '7'\n    if k == 152: return '8'\n    if k == 153: return '9'\n    if k == 154: return ':'\n    if k == 155: return ';'\n    if k == 156: return '<'\n    if k == 157: return '='\n    if k == 158: return '>'\n    if k == 159: return '?'\n    if k == 160: return '@'\n    if k == 161: return 'A'\n    if k == 162: return 'B'\n    if k == 163: return 'C'\n    if k == 164: return 'D'\n    if k == 165: return 'E'\n    if k == 166: return 'F'\n    if k == 167: return 'G'\n    if k == 168: return 'H'\n    if k == 169: return 'I'\n    if k == 170: return 'J'\n    if k == 171: return 'K'\n    if k == 172: return 'L'\n    if k == 173: return 'M'\n    if k == 174: return 'N'\n    if k == 175: return 'O'\n    if k == 176: return 'P'\n    if k == 177: return 'Q'\n    if k == 178: return 'R'\n    if k == 179: return 'S'\n    if k == 180: return 'T'\n    if k == 181: return 'U'\n    if k == 182: return 'V'\n    if k == 183: return 'W'\n    if k == 184: return 'X"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_table = {\n        ' ': 0, '!': 1, '@': 2, '#': 3, '$': 4, '%': 5, '&': 6, '\\'': 7,\n        '(': 8, ')': 9, '*': 10, '+': 11, '-': 12, '+': 13, '=': 14,\n        '/': 15, ':': 16, ';': 17, '<': 18, '>': 19, '?': 20, '@': 21,\n        'A': 22, 'B': 23, 'C': 24, 'D': 25, 'E': 26, 'F': 27, 'G': 28,\n        'H': 29, 'I': 30, 'J': 31, 'K': 32, 'L': 33, 'M': 34, 'N': 35,\n        'O': 36, 'P': 37, 'Q': 38, 'R': 39, 'S': 40, 'T': 41, 'U': 42,\n        'V': 43, 'W': 44, 'X': 45, 'Y': 46, 'Z': 47, '[' : 48, ']': 49,\n        'a': 50, 'b': 51, 'c': 52, 'd': 53, 'e': 54, 'f': 55, 'g': 56,\n        'h': 57, 'i': 58, 'j': 59, 'k': 60, 'l': 61,'m': 62, 'n': 63,\n        'o': 64, 'p': 65, 'q': 66, 'r': 67,'s': 68, 't': 69, 'u': 70,\n        'v': 71, 'w': 72, 'x': 73, 'y': 74, 'z': 75, '{': 76, '}': 77,\n        ' ': 78, '!' : 79, '@': 80, '#': 81, '$': 82, '%': 83, '&': 84,\n        '\\'': 85, '(': 86, ')': 87, '*': 88, '+': 89, '-': 90, '+': 91,\n        '=': 92, '/': 93, ':': 94, ';': 95, '<': 96, '>': 97, '?': 98,\n        'A': 99, 'B': 100, 'C': 101, 'D': 102, 'E': 103, 'F': 104, 'G': 105,\n        'H': 106, 'I': 107, 'J': 108, 'K': 109, 'L': 110, 'M': 111, 'N': 112,\n        'O': 113, 'P': 114, 'Q': 115, 'R': 116, 'S': 117, 'T': 118, 'U': 119,\n        'V': 120, 'W': 121, 'X': 122, 'Y': 123, 'Z': 124, '[': 125, ']': 126,\n        'a': 127, 'b': 128, 'c': 129, 'd': 130, 'e': 131, 'f': 132, 'g': 133,\n        'h': 134, 'i': 135, 'j': 136, 'k': 137, 'l': 138,'m': 139, 'n': 140,\n        'o': 141, 'p': 142, 'q': 143, 'r': 144,'s': 145, 't': 146, 'u': 147,\n        'v': 148, 'w': 149, 'x': 150, 'y': 151, 'z': 152, '{': 153, '}': 154,\n        ' ': 155, '!' : 156, '@': 157, '#': 158, '$': 159, '%': 160, '&': 161,\n        '\\'': 162, '(': 163, ')': 164, '*': 165, '+': 166, '-': 167, '+': 168,\n        '=': 169, '/': 170, ':': 171, ';': 172, '<': 173, '>': 174, '?': 175,\n        'A': 176, 'B': 177, 'C': 178, 'D': 179, 'E': 180, 'F': 181, 'G': 182,\n        'H': 183, 'I': 184, 'J': 185, 'K': 186, 'L': 187, 'M': 188, 'N': 189,\n        'O': 190, 'P': 191, 'Q': 192, 'R': 193, 'S': 194, 'T': 195, 'U': 196,\n        'V': 197, 'W': 198, 'X': 199, 'Y': 200, 'Z': 201, '[' : 202, ']': 203,\n        'a': 204, 'b': 205, 'c': 206, 'd': 207, 'e': 208, 'f': 209, 'g': 210,\n        'h': 211, 'i': 212, 'j': 213, 'k': 214, 'l': 215,'m': 216, 'n': 217,\n        'o': 218, 'p': 219, 'q': 220, 'r': 221,'s': 222, 't': 223, 'u': 224,\n        'v': 225, 'w': 226, 'x': 227, 'y': 228, 'z': 229, '{': 230, '}': 231,\n        ' ': 232, '!' : 233, '@': 234, '#': 235, '$': 236, '%': 237, '&': 238,\n        '\\'': 239, '(': 240, ')': 241, '*': 242, '+': 243, '-': 244, '+': 245,\n        '=': 246, '/': 247, ':': 248, ';': 249, '<': 250, '>': 251, '?': 252,\n        'A': 253, 'B': 254, 'C': 255, 'D': 256, 'E': 257, 'F': 258, 'G': 259,\n        'H': 260, 'I': 261, 'J': 262, 'K': 263, 'L': 264, 'M': 265, 'N': 266,\n        'O': 267, 'P': 268, 'Q': 269, 'R': 270, 'S': 271, 'T': 272, 'U': 273,\n        'V': 274, 'W': 275, 'X': 276, 'Y': 277, 'Z': 278, '[' : 279, ']': 280,\n        'a': 281, 'b': 282, 'c': 283, 'd': 284, 'e': 285, 'f': 286, 'g': 287,\n        'h': 288, 'i': 289, 'j': 290, 'k': 291, 'l': 292,'m': 293, 'n': 294,\n        'o': 295, 'p': 296, 'q': 297, 'r': 298,'s': 299, 't': 300, 'u': 301,\n        'v': 302, 'w': 303, 'x': 304, 'y': 305, 'z': 306, '{': 307, '}': 308,\n        ' ': 309, '!' : 310, '@': 311, '#': 312, '$': 313, '%': 314, '&': 315,\n        '\\'': 316, '(': 317, ')': 318, '*': 319, '+': 320, '-': 321, '+': 322,\n        '=': 323, '/': 324, ':': 325, ';': 326, '<': 327, '>': 328, '?': 329,\n        'A': 330, 'B': 331, 'C': 332, 'D': 333, 'E': 334, 'F': 335, 'G': 336,\n        'H': 337, 'I': 338, 'J': 339, 'K': 340, 'L': 341, 'M': 342, 'N': 343,\n        'O': 344, 'P': 345, 'Q': 346, 'R': 347, 'S': 348, 'T': 349, 'U': 350,\n        'V': 351, 'W': 352, 'X': 353, 'Y': 354, 'Z': 355, '[' : 356, ']': 357,\n        'a': 358, 'b': 359, 'c': 360, 'd': 361, 'e': 362, 'f': 363, 'g': 364,\n        'h': 365, 'i': 366, 'j': 367, 'k': 368, 'l': 369,'m': 370, 'n': 371,\n        'o': 372, 'p': 373, 'q': 374, 'r': 375,'s': 376, 't': 377, 'u': 378,\n        'v': 379, 'w'"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_index.append(i)\n    return sum(even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum = even_sum + arr[i]\n            even_index_sum = even_index_sum + 1\n    return even_sum, even_index_sum\n    \ndef main():\n    arr = [9,2,5,8,6,3,4,7,10,9,8,1,5,8]\n    even_sum, even_index_sum = sum_even_and_even_index(arr)\n    print(f'Even numbers: {even_sum}, in even indexes: {even_index_sum}')\n    \nmain("
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if(i%2==0):\n            sum=sum+arr[i]\n    return sum\nprint(sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Write your code here\n    even_sum = 0\n    odd_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % 2 == 0:\n            odd_sum += arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Edge Cases\n    if len(arr) < 2:\n        return 0\n    \n    # Add all even numbers\n    even_sums = sum_even(arr)\n    \n    # Initialize a zero list\n    zeros_indexes = []\n    \n    # Traverse to the even numbers\n    for i in range(0, len(arr), 2):\n        if arr[i] == 0:\n            zeros_indexes.append(i)\n    \n    # Add the sum of the even numbers\n    for num in zeros_indexes:\n        even_sums += sum_even(arr[num:num+2])\n    \n    return even_sums\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    while (even_index < len(arr)):\n        if (even_index % 2 == 0):\n            even_sum += arr[even_index]\n        if (even_index % 2 == 1):\n            if (arr[even_index] % 2 == 0):\n                even_sum += arr[even_index]\n            else:\n                even_sum += arr[even_index]\n        even_index += 1\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens=0\n    i=0\n    while i<len(arr):\n        if arr[i]%2==0:\n            evens+=arr[i]\n            i+=1\n        else:\n            i+=1\n    return evens\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<0:\n        return 'Invalid input'\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 5\n    elif n==3:\n        return 10\n    elif n==4:\n        return 50\n    elif n==5:\n        return 100\n    else:\n        for i in range(1,n+1):\n            n=n-1\n            if n%5==0:\n                break\n            else:\n                i=i+1\n        return (n+1)**i\nprint(even_Power_Sum(5)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # your code here\n    if n < 0:\n        print(\"error\")\n        return 0\n    else:\n        sum = 0\n        for i in range(1,n+1):\n            if(i % 2) == 0:\n                sum += i**5\n        return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # total = 0\n    # for i in range(1, n):\n    #     if i%3 == 0:\n    #         total += i\n    # return total\n    return sum([i**3 for i in range(1, n+1) if i%3 == 0])\n    # return sum([i**2 for i in range(1, n+1) if i%3 == 0])\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # Your code here\n    sum=0\n    for i in range(1, n+1):\n        if i%3==0:\n            sum=sum+i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    for x in range(1, n+1):\n        sum = 0\n        for y in range(1, x+1):\n            sum = sum + y**y\n        if sum % 5 == 0:\n            print(sum)\n    \neven_Power_Sum(6"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # find the sum of the first n even natural numbers, between 1 and 10\n    # use for loop to go through each number, which is the nth power,\n    # get the first nth power, then check the next number\n    # if the next number is not even, add it to the sum\n    # if the next number is even, subtract the sum\n    # if the next number is odd, subtract the sum\n    \n    # TO DO: create an empty list called even_sum\n    even_sum = []\n    \n    # starting from the number n, check every integer between 1 to 10\n    for i in range(1, 11):\n        # check if the next number is even\n        if i % 2 == 0:\n            # add the next number to the sum\n            # if the next number is odd, add it to the sum\n            # if the next number is even, subtract the sum\n            even_sum.append(i**5)\n            \n    # get the sum of even numbers\n    even_sum = sum(even_sum)\n    \n    # return the sum of even numbers\n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        power = int(x ** 5)\n        sum += power\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if (n==0):\n        return 0\n    if (n==1):\n        return 1\n    if (n==2):\n        return 2\n    if (n==3):\n        return 4\n    if (n==4):\n        return 8\n    if (n==5):\n        return 16\n    \n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_list = []\n    for x in test_list:\n        r_list.append(x[1])\n    return r_list\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    f_list = []\n    for x in test_list:\n        f_list.append(x[0])\n    return f_list\n    \ndef reverse(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the reverse of each tuple.\n    '''\n    r_list = []\n    for x in test_list:\n        r_list.append(x[0])\n    return r_list\n    \ndef is_match(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns True if each tuple in the list is a match, else False.\n    '''\n    for x in test_list:\n        if x[0]!= x[1]:\n            return False\n    return True\n    \ndef contains_duplicate(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns True if there are duplicates in the list, else False.\n    '''\n    for x in test_list:\n        if x[0] in test_list and x[1] in test_list:\n            return True\n    return False\n    \ndef two_list_diffs(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of the differences between all the elements of the first list and the elements of the second list.\n    '''\n    l1 = rear_extract(test_list)\n    l2 = front_extract(test_list)\n    l2.reverse()\n    l2 = reverse(l2)\n    d1 = []\n    for i in range(len(l1)):\n        d1.append(l1[i])\n        d1.append(l2[i])\n    return d1\n    \ndef count_elements(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the number of elements in the list.\n    '''\n    if not test_list:\n        return 0\n    return len(test_list)\n    \ndef last_three(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the last three items in the list.\n    '''\n    return test_list[-3:]\n    \ndef has_duplicates(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns True if there are duplicates in the list, else False.\n    '''\n    for x in test_list:\n        if x in test_list:\n            return True\n    return False\n    \ndef has_consecutive_elements(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns True if there are consecutive elements in the list, else False.\n    '''\n    for x in test_list:\n        if x[0] == x[1] and x[0] == x[2]:\n            return True\n    return False\n    \ndef next_largest(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the next largest element in the list.\n    '''\n    for x in test_list:\n        if x[1] == test_list[0][1]:\n            return x\n    return test_list[0]\n    \ndef largest_nonrepeating_sublist(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the largest non-repeating sublist in the list.\n    '''\n    l = []\n    for x in test_list:\n        if x not in l:\n            l.append(x)\n    return l\n    \ndef item_count(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the number of items in the list.\n    '''\n    count = 0\n    for x in test_list:\n        count = count + 1\n    return count\n    \ndef last_item_index(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the index of the last item in the list.\n    '''\n    if not test_list:\n        return None\n    return test_list[-1][1]\n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing only the elements that are duplicates, but not in the list.\n    '''\n    l = []\n    for x in test_list:\n        if x not in l:\n            l.append(x)\n    return l\n    \ndef remove_numbers(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing only the elements that are not numbers.\n    '''\n    l = []\n    for x in test_list:\n        if not x[0].isdigit():\n            l.append(x)\n    return l\n    \ndef insert_first(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the first element in the list.\n    '''\n    l = rear_extract(test_list)\n    return l[0]\n    \ndef add_first(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the first element in the list.\n    '''\n    l = front_extract(test_list)\n    return l[0]\n    \ndef add_last(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the last element in the list.\n    '''\n    l = rear_extract(test_list)\n    return l[-1]\n    \ndef remove_last(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing only the elements that are not in the list.\n    '''\n    l = rear_extract(test_list)\n    return l[:-1]\n    \ndef add_last_and_return(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing only the elements that are not in the list and add the last item.\n    '''\n    l = rear_extract(test_list)\n    l.append(l[-1])\n    return l\n    \ndef add_last_and_return_list(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing only the elements that are not in the list and add the last item.\n    '''\n    l = rear_extract(test_list)\n    l.append(l[-1])\n    return l\n    \ndef list_contains_duplicates(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns True if there are duplicates in the list, else False.\n    '''\n    l = rear_extract(test_list)\n    d = []\n    for x in l:\n        d.append(x)\n    return d\n    \ndef list_contains_consecutive(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns True if there are consecutive elements in the list, else False.\n    '''\n    l = rear_extract(test_list)\n    d = []\n    for x in l:\n        if x[0] == x[1]:\n            d.append(x)\n    return d\n    \ndef remove_first(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the first element in the list.\n    '''\n    l = front_extract(test_list)\n    return l[0]\n    \ndef remove_last(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the last element in the list.\n    '''\n    l = rear_extrac"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(0,len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #create empty array to store rear elements\n    rear = []\n    #create list of tuples\n    rear_list = test_list\n    #iterate through the test list and append each tuple to rear_list\n    for i in range(0,len(rear_list)):\n        rear.append(rear_list[i][1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for t in test_list:\n        rear_list.append(t[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for k,v in test_list:\n        rear.append(k)\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    test_list_rear = []\n    for i in range(len(test_list)):\n        test_list_rear.append(test_list[i][1])\n    return test_list_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [a[0] for a in test_list]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_out = ( test_tup1[0], test_tup2[0] )\n    for i in range(1, len(test_tup1)):\n        tup_out += (test_tup1[i] - test_tup2[i])\n    return tup_out\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup2)):\n        new_tup.append(test_tup2[i] - test_tup1[i])\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    test_tup1 = test_tup1[1:] # Deletes the index of the second tuple from the tuple\n    test_tup2 = test_tup2[1:] # Deletes the index of the second tuple from the tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_difference = []\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x,y:x-y, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(\">>> Function has been implemented!\")\n    print(\">>> Output is: \", end=\"\")\n    print(test_tup1 - test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Write your code here.\n    temp = test_tup1\n    test_tup1 = test_tup2\n    test_tup2 = temp\n    temp = test_tup1\n    temp[0] = test_tup2\n    return temp\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        if i!= len(test_tup2):\n            test_list.append(test_tup1[i] - test_tup2[i])\n        else:\n            test_list.append(test_tup1[i])\n    return test_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n > 0: \n        return sum([(k**2) * even_binomial_Coeff_Sum(n-k) for k in range(1,int(math.floor(n**0.5))+1)])\n    else:\n        return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    odd_bin_coeff = math.factorial(n)\n    even_bin_coeff = n * math.factorial(n - 1)\n    return odd_bin_coeff * even_bin_coeff"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Coeff_Sum=0\n    for i in range(2, n, 2):\n        Coeff_Sum+=math.factorial(i)//(math.factorial(i-2) * math.factorial(i-1))\n    return Coeff_Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return (even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n // 2))\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n // 2)\ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return (odd_binomial_Coeff_Sum(n - 1) + odd_binomial_Coeff_Sum(n // 2))\n    else:\n        return odd_binomial_Coeff_Sum(n - 1) + odd_binomial_Coeff_Sum(n // 2)\ndef binomial_coefficient(n,m):\n    '''\n    Function that returns the binomial coefficient for the nth term in a polynomial of the form n*m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif m == 0:\n        return 1\n    elif m == 1:\n        return 1\n    elif n < 0:\n        return binomial_coefficient(n, -m)\n    elif n > m:\n        return binomial_coefficient(n - m, m)\n    else:\n        return binomial_coefficient(n - m, m) + binomial_coefficient(n - m, m - 1)\ndef nth_binomial_coeff_Sum(n,m):\n    '''\n    Function that takes in a positive integer n and returns its sum of every power of n to the nth term.\n    '''\n    return binomial_coefficient(n,m)\ndef main():\n    '''\n    Entry point for program.\n    '''\n    n = 1\n    while n <= 5:\n        print(nth_binomial_coeff_Sum(n, 0))\n        n = n + 1\nmain()"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # find the sum of all even binomial coefficients\n    sum = 0\n    for i in range(n):\n        sum = sum + (1/n)*even_binomial_Coeff_Sum(n-i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    odd_sum = 0\n    for i in range(1, n + 1):\n        #print(i, 'i')\n        #print(f'{i}', end='')\n        #print(f'{(n - i):.1f}')\n        odd_sum += (i - 1) * (f'{(n - i):.1f}')\n    return odd_sum\n    \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n // 2) \n    \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n < 0):\n        return None\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return 1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<=0:\n        return 0\n    result = 0\n    for i in range(1,n+1):\n        result+=even_binomial_Coeff_Sum(i)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    i = 0\n    sum = 0\n    if(n < 0):\n        return (\"ERROR: Negative Number\")\n    elif(n == 0):\n        return (1)\n    elif(n == 1):\n        return (1)\n    elif(n % 2 == 0):\n        return (even_binomial_Coeff_Sum(int(n / 2)) * 2)\n    elif(n % 2 == 1):\n        return (even_binomial_Coeff_Sum(int(n / 2)) * 1)\n    while (i < n):\n        sum = sum + (even_binomial_Coeff_Sum(i) * even_binomial_Coeff_Sum(int(n / i)))\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = h*3.14*(r**2)\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*r*h\ndef volume_rectangle(r,l):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the volume.\n    '''\n    return l*l\ndef volume_square(l):\n    '''\n    Write a function that takes in the length of a rectangle and returns the the volume.\n    '''\n    return l*l\ndef volume_cube(l):\n    '''\n    Write a function that takes in the length of a cube and returns the the volume.\n    '''\n    return l*l*l\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\ndef volume_rectangle(r,l):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the volume.\n    '''\n    return l*r*h\ndef volume_square(l):\n    '''\n    Write a function that takes in the length of a square and returns the the volume.\n    '''\n    return l*l\ndef volume_cube(l):\n    '''\n    Write a function that takes in the length of a cube and returns the the volume.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4 * 3.14 * r * r * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*(h**3)*(math.pi*r**3)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 4*r*h**3\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # YOUR CODE HERE\n    return (2*(pi*r*r))/(3.14*((pi**2)*h))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(\"volume of a cylinder with radius \", r, \" and height \", h, \" is\",volume_cylinder(r,h))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    from math import pi\n    radius = r\n    height = h\n    volume = math.pi*(radius**2)*(height**2)\n    print(volume)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*2.718281828\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(f'The volume of the cylinder is: {cylinder(r,h)}')\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = dict()\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for i,j in dict.items():\n        if j >= n:\n            filtered[i] = j\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = True\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for k,v in dict.items():\n        if v >= n:\n            result.update({k:v})\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict = {}\n    for key in dict:\n        if dict[key] >= n:\n            newDict[key] = 1\n        else:\n            newDict[key] = 0\n    return newDict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    final_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            final_dict[key] = value\n    return final_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #return {} if not a dictionary\n    if not isinstance(dict, dict):\n        return None\n    # get keys and values\n    keys = list(dict.keys())\n    values = list(dict.values())\n    # filter on n\n    filt = []\n    for i in range(len(values)):\n        if values[i] > n:\n            filt.append(keys[i])\n    # return dictionary with new filtered keys and values\n    return {keys[i]: filt[i] for i in range(len(keys))}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if n >= value:\n            filtered_dict[key] = value\n    return filtered_dict\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #A simple solution is to use a set\n    res=set()\n    \n    #Create a for loop to iterate through the dictionary, if the value is greater than n, then add it to the set\n    for i in dict.keys():\n        if dict[i]>n:\n            res.add(i)\n    #return the set\n    return res\n    \n    "
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for item in test_tup:\n        if item < test_tup[0]:\n            count = count + 1\n        \n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(len(test_tup)):\n            if test_tup[i]!= test_tup[0]:\n                break\n            else:\n                count += 1\n        return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    start_index = test_tup[0].index(test_tup[1])\n    count = 0\n    for i in range(0, start_index):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[-1])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup[i]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Iterate through the list of the tuple\n    for x in test_tup:\n        # If x is in the tuple, count how many times it occurs before x\n        if x in test_tup:\n            test_tup.remove(x)\n    # Return the number of elements that occur before the tuple element in the given tuple\n    return len(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) <= 0:\n        return 0\n    t = len(test_tup)\n    j = 0\n    while j < t:\n        if test_tup[j] > test_tup[t - 1]:\n            j += 1\n        else:\n            break\n    return j - 1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # count the number of the index of the tuple element\n    index = 0\n    # create a variable for the index of the tuple element\n    element = test_tup[index]\n    # count the number of the index after the tuple element\n    while index < len(test_tup) - 1:\n        element = test_tup[index]\n        index += 1\n    return index\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for x in test_tup:\n        if x < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 21\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 25\n    elif n == 13:\n        return 27\n    elif n == 14:\n        return 29\n    elif n == 15:\n        return 31\n    elif n == 16:\n        return 33\n    elif n == 17:\n        return 35\n    elif n == 18:\n        return 37\n    elif n == 19:\n        return 39\n    elif n == 20:\n        return 41\n    elif n == 21:\n        return 43\n    elif n == 22:\n        return 45\n    elif n == 23:\n        return 47\n    elif n == 24:\n        return 49\n    elif n == 25:\n        return 51\n    elif n == 26:\n        return 53\n    elif n == 27:\n        return 55\n    elif n == 28:\n        return 57\n    elif n == 29:\n        return 59\n    elif n == 30:\n        return 61\n    elif n == 31:\n        return 63\n    elif n == 32:\n        return 65\n    elif n == 33:\n        return 67\n    elif n == 34:\n        return 69\n    elif n == 35:\n        return 71\n    elif n == 36:\n        return 73\n    elif n == 37:\n        return 75\n    elif n == 38:\n        return 77\n    elif n == 39:\n        return 79\n    elif n == 40:\n        return 81\n    elif n == 41:\n        return 83\n    elif n == 42:\n        return 85\n    elif n == 43:\n        return 87\n    elif n == 44:\n        return 89\n    elif n == 45:\n        return 91\n    elif n == 46:\n        return 93\n    elif n == 47:\n        return 95\n    elif n == 48:\n        return 97\n    elif n == 49:\n        return 99\n    elif n == 50:\n        return 101\n    elif n == 51:\n        return 103\n    elif n == 52:\n        return 105\n    elif n == 53:\n        return 107\n    elif n == 54:\n        return 109\n    elif n == 55:\n        return 111\n    elif n == 56:\n        return 113\n    elif n == 57:\n        return 115\n    elif n == 58:\n        return 117\n    elif n == 59:\n        return 119\n    elif n == 60:\n        return 121\n    elif n == 61:\n        return 123\n    elif n == 62:\n        return 125\n    elif n == 63:\n        return 127\n    elif n == 64:\n        return 129\n    elif n == 65:\n        return 131\n    elif n == 66:\n        return 133\n    elif n == 67:\n        return 135\n    elif n == 68:\n        return 137\n    elif n == 69:\n        return 139\n    elif n == 70:\n        return 141\n    elif n == 71:\n        return 143\n    elif n == 72:\n        return 145\n    elif n == 73:\n        return 147\n    elif n == 74:\n        return 149\n    elif n == 75:\n        return 151\n    elif n == 76:\n        return 153\n    elif n == 77:\n        return 155\n    elif n == 78:\n        return 157\n    elif n == 79:\n        return 159\n    elif n == 80:\n        return 161\n    elif n == 81:\n        return 163\n    elif n == 82:\n        return 165\n    elif n == 83:\n        return 167\n    elif n == 84:\n        return 169\n    elif n == 85:\n        return 171\n    elif n == 86:\n        return 173\n    elif n == 87:\n        return 175\n    elif n == 88:\n        return 177\n    elif n == 89:\n        return 179\n    elif n == 90:\n        return 181\n    elif n == 91:\n        return 183\n    elif n == 92:\n        return 185\n    elif n == 93:\n        return 187\n    elif n == 94:\n        return 189\n    elif n == 95:\n        return 191\n    elif n == 96:\n        return 193\n    elif n == 97:\n        return 195\n    elif n == 98:\n        return 197\n    elif n == 99:\n        return 199\n    elif n == 100:\n        return 201\n    elif n == 101:\n        return 203\n    elif n == 102:\n        return 205\n    elif n == 103:\n        return 207\n    elif n == 104:\n        return 209\n    elif n == 105:\n        return 211\n    elif n == 106:\n        return 213\n    elif n == 107:\n        return 215\n    elif n == 108:\n        return 217\n    elif n == 109:\n        return 219\n    elif n == 110:\n        return 221\n    elif n == 111:\n        return 223\n    elif n == 112:\n        return 225\n    elif n == 113:\n        return 227\n    elif n == 114:\n        return 229\n    elif n == 115:\n        return 231\n    elif n == 116:\n        return 233\n    elif n == 117:\n        return 235\n    elif n == 118:\n        return 237\n    elif n == 119:\n        return 239\n    elif n == 120:\n        return 241\n    elif n == 121:\n        return 243\n    elif n == 122:\n        return 245\n    elif n == 123:\n        return 247\n    elif n == 124:\n        return 249\n    elif n == 125:\n        return 251\n    elif n == 126:\n        return 253\n    elif n == 127:\n        return 255\n    elif n == 128:\n        return 257\n    elif n == 129:\n        return 259\n    elif n == 130:\n        return 261\n    elif n == 131:\n        return 263\n    elif n == 132:\n        return 265\n    elif n == 133:\n        return 267\n    elif n == 134:\n        return 269\n    elif n == 135:\n        return 271\n    elif n == 136:\n        return 273\n    elif n == 137:\n        return 275\n    elif n == 138:\n        return 277\n    elif n == 139:\n        return 279\n    elif n == 140:\n        return 281\n    elif n == 141:\n        return 283\n    elif n == 142:\n        return 285\n    elif n == 143:\n        return 287\n    elif n == 144:\n        return 289\n    elif n == 145:\n        return 291\n    elif n == 146:\n        return 293\n    elif n == 147:\n        return 295\n    elif n == 148:\n        return 297\n    elif n == 149:\n        return 299\n    elif n == 150:\n        return 301\n    elif n == 151:\n        return 303\n    elif n == 152:\n        return 305\n    elif n == 153:\n        return 307\n    elif n == 154:\n        return 309\n    elif n == 155:\n        return 311\n    elif n == 156:\n        return 313\n    elif n == 157:\n        return 315\n    elif n == 158:\n        return 317\n    elif n == 159:\n        return 319\n    elif n == 160:\n        return 321\n    elif n == 161:\n        return 323\n    elif n == 162:\n        return 325\n    elif n == 163:\n        return 327\n    elif n == 164:\n        return 329\n    elif n == 165:\n        return 331\n    elif n == 166:\n        return 333\n    elif n == 167:\n        return 335\n    elif n == 168:\n        return 33"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return True if n % 2 == 0 else False \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<=1: \n        return n\n    for i in range(1, n): \n        if n%i==0: \n            return n//i \n    return None\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    a = 10**10\n    for i in range(1,n):\n        a = a*(n-i)\n        \n    return a\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    c = n-1\n    if n == 1: \n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4: \n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11: \n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 51\n    if n == 17:\n        return 53\n    if n == 18:\n        return 59\n    if n == 19:\n        return 61\n    if n == 20:\n        return 67\n    if n == 21:\n        return 71\n    if n == 22:\n        return 73\n    if n == 23:\n        return 79\n    if n == 24:\n        return 83\n    if n == 25:\n        return 89\n    if n == 26:\n        return 97\n    if n == 27:\n        return 101\n    if n == 28:\n        return 103\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 119\n    if n == 32:\n        return 123\n    if n == 33:\n        return 131\n    if n == 34:\n        return 137\n    if n == 35:\n        return 151\n    if n == 36:\n        return 147\n    if n == 37:\n        return 161\n    if n == 38:\n        return 173\n    if n == 39:\n        return 179\n    if n == 40:\n        return 181\n    if n == 41:\n        return 183\n    if n == 42:\n        return 189\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 201\n    if n == 47:\n        return 203\n    if n == 48:\n        return 209\n    if n == 49:\n        return 211\n    if n == 50:\n        return 223\n    if n == 51:\n        return 227\n    if n == 52:\n        return 229\n    if n == 53:\n        return 233\n    if n == 54:\n        return 239\n    if n == 55:\n        return 241\n    if n == 56:\n        return 243\n    if n == 57:\n        return 247\n    if n == 58:\n        return 251\n    if n == 59:\n        return 253\n    if n == 60:\n        return 255\n    if n == 61:\n        return 257\n    if n == 62:\n        return 261\n    if n == 63:\n        return 263\n    if n == 64:\n        return 269\n    if n == 65:\n        return 271\n    if n == 66:\n        return 277\n    if n == 67:\n        return 281\n    if n == 68:\n        return 283\n    if n == 69:\n        return 289\n    if n == 70:\n        return 291\n    if n == 71:\n        return 293\n    if n == 72:\n        return 295\n    if n == 73:\n        return 297\n    if n == 74:\n        return 301\n    if n == 75:\n        return 303\n    if n == 76:\n        return 307\n    if n == 77:\n        return 311\n    if n == 78:\n        return 313\n    if n == 79:\n        return 317\n    if n == 80:\n        return 331\n    if n == 81:\n        return 333\n    if n == 82:\n        return 335\n    if n == 83:\n        return 337\n    if n == 84:\n        return 341\n    if n == 85:\n        return 343\n    if n == 86:\n        return 347\n    if n == 87:\n        return 349\n    if n == 88:\n        return 363\n    if n == 89:\n        return 357\n    if n == 90:\n        return 371\n    if n == 91:\n        return 373\n    if n == 92:\n        return 375\n    if n == 93:\n        return 377\n    if n == 94:\n        return 379\n    if n == 95:\n        return381\n    if n == 96:\n        return 385\n    if n == 97:\n        return 387\n    if n == 98:\n        return391\n    if n == 99:\n        return393\n    if n == 100:\n        return395\n    if n == 101:\n        return397\n    if n == 102:\n        return399\n    if n == 103:\n        return401\n    if n == 104:\n        return403\n    if n == 105:\n        return407\n    if n == 106:\n        return411\n    if n == 107:\n        return413\n    if n == 108:\n        return415\n    if n == 109:\n        return417\n    if n == 110:\n        return421\n    if n == 111:\n        return423\n    if n == 112:\n        return427\n    if n == 113:\n        return431\n    if n == 114:\n        return433\n    if n == 115:\n        return437\n    if n == 116:\n        return441\n    if n == 117:\n        return443\n    if n == 118:\n        return449\n    if n == 119:\n        return451\n    if n == 120:\n        return453\n    if n == 121:\n        return457\n    if n == 122:\n        return461\n    if n == 123:\n        return463\n    if n == 124:\n        return465\n    if n == 125:\n        return467\n    if n == 126:\n        return471\n    if n == 127:\n        return473\n    if n == 128:\n        return475\n    if n == 129:\n        return477\n    if n == 130:\n        return481\n    if n == 131:\n        return483\n    if n == 132:\n        return487\n    if n == 133:\n        return491\n    if n == 134:\n        return493\n    if n == 135:\n        return497\n    if n == 136:\n        return501\n    if n == 137:\n        return503\n    if n == 138:\n        return505\n    if n == 139:\n        return507\n    if n == 140:\n        return511\n    if n == 141:\n        return513\n    if n == 142:\n        return515\n    if n == 143:\n        return517\n    if n == 144:\n        return519\n    if n == 145:\n        return521\n    if n == 146:\n        return523\n    if n == 147:\n        return527\n    if n == 148:\n        return531\n    if n == 149:\n        return533\n    if n == 150:\n        return539\n    if n == 151:\n        return551\n    if n == 152:\n        return553\n    if n == 153:\n        return555\n    if n == 154:\n        return557\n    if n == 155:\n        return561\n    if n == 156:\n        return563\n    if n == 157:\n        return567\n    if n == 158:\n        return571\n    if n == 159:\n        return573\n    if n == 160:\n        return575\n    if n == 161:\n        return577\n    if n == 162:\n        return581\n    if n == 163:\n        return583\n    if n == 164:\n        return585\n    if n == 165:\n        return587\n    if n == 166:\n        return591\n    if n == 167:\n        return593\n    if n == 168:\n        return597\n    if n == 169:\n        return599\n    if n == 170:\n        return601\n    if n == 171:\n        return603\n    if n == 172:\n        return605\n    if n == 173:\n        return607\n    if n == 174:\n        return609\n    if n == 175:\n        return611\n    if n == 176:\n        return613\n    if n == 177:\n        return615\n    if n == 178:\n        return617\n    if n == 179:\n        return619\n    if n == 180:\n        return621\n    if n == 181:\n        return623\n    if n ="
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    numbers = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29] \n    i = 0\n    sum = 0\n    while i < len(numbers):\n        sum += numbers[i]\n        i = i+1\n    return sum\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0: return None\n    elif n==0: return 0\n    elif n==1: return 1\n    elif n==2: return 1\n    elif n==3: return 2\n    elif n==4: return 4\n    elif n==5: return 5\n    elif n==6: return 6\n    elif n==7: return 7\n    elif n==8: return 8\n    elif n==9: return 9\n    elif n==10: return 10\n    elif n==11: return 11\n    elif n==12: return 12\n    elif n==13: return 13\n    elif n==14: return 14\n    elif n==15: return 15\n    elif n==16: return 16\n    elif n==17: return 17\n    elif n==18: return 18\n    elif n==19: return 19\n    elif n==20: return 20\n    elif n==21: return 21\n    elif n==22: return 22\n    elif n==23: return 23\n    elif n==24: return 24\n    elif n==25: return 25\n    elif n==26: return 26\n    elif n==27: return 27\n    elif n==28: return 28\n    elif n==29: return 29\n    elif n==30: return 30\n    elif n==31: return 31\n    elif n==32: return 32\n    elif n==33: return 33\n    elif n==34: return 34\n    elif n==35: return 35\n    elif n==36: return 36\n    elif n==37: return 37\n    elif n==38: return 38\n    elif n==39: return 39\n    elif n==40: return 40\n    elif n==41: return 41\n    elif n==42: return 42\n    elif n==43: return 43\n    elif n==44: return 44\n    elif n==45: return 45\n    elif n==46: return 46\n    elif n==47: return 47\n    elif n==48: return 48\n    elif n==49: return 49\n    elif n==50: return 50\n    elif n==51: return 51\n    elif n==52: return 52\n    elif n==53: return 53\n    elif n==54: return 54\n    elif n==55: return 55\n    elif n==56: return 56\n    elif n==57: return 57\n    elif n==58: return 58\n    elif n==59: return 59\n    elif n==60: return 60\n    elif n==61: return 61\n    elif n==62: return 62\n    elif n==63: return 63\n    elif n==64: return 64\n    elif n==65: return 65\n    elif n==66: return 66\n    elif n==67: return 67\n    elif n==68: return 68\n    elif n==69: return 69\n    elif n==70: return 70\n    elif n==71: return 71\n    elif n==72: return 72\n    elif n==73: return 73\n    elif n==74: return 74\n    elif n==75: return 75\n    elif n==76: return 76\n    elif n==77: return 77\n    elif n==78: return 78\n    elif n==79: return 79\n    elif n==80: return 80\n    elif n==81: return 81\n    elif n==82: return 82\n    elif n==83: return 83\n    elif n==84: return 84\n    elif n==85: return 85\n    elif n==86: return 86\n    elif n==87: return 87\n    elif n==88: return 88\n    elif n==89: return 89\n    elif n==90: return 90\n    elif n==91: return 91\n    elif n==92: return 92\n    elif n==93: return 93\n    elif n==94: return 94\n    elif n==95: return 95\n    elif n==96: return 96\n    elif n==97: return 97\n    elif n==98: return 98\n    elif n==99: return 99\n    elif n==100: return 100\n    elif n==101: return 101\n    elif n==102: return 102\n    elif n==103: return 103\n    elif n==104: return 104\n    elif n==105: return 105\n    elif n==106: return 106\n    elif n==107: return 107\n    elif n==108: return 108\n    elif n==109: return 109\n    elif n==110: return 110\n    elif n==111: return 111\n    elif n==112: return 112\n    elif n==113: return 113\n    elif n==114: return 114\n    elif n==115: return 115\n    elif n==116: return 116\n    elif n==117: return 117\n    elif n==118: return 118\n    elif n==119: return 119\n    elif n==120: return 120\n    elif n==121: return 121\n    elif n==122: return 122\n    elif n==123: return 123\n    elif n==124: return 124\n    elif n==125: return 125\n    elif n==126: return 126\n    elif n==127: return 127\n    elif n==128: return 128\n    elif n==129: return 129\n    elif n==130: return 130\n    elif n==131: return 131\n    elif n==132: return 132\n    elif n==133: return 133\n    elif n==134: return 134\n    elif n==135: return 135\n    elif n==136: return 136\n    elif n==137: return 137\n    elif n==138: return 138\n    elif n==139: return 139\n    elif n==140: return 140\n    elif n==141: return 141\n    elif n==142: return 142\n    elif n==143: return 143\n    elif n==144: return 144\n    elif n==145: return 145\n    elif n==146: return 146\n    elif n==147: return 147\n    elif n==148: return 148\n    elif n==149: return 149\n    elif n==150: return 150\n    elif n==151: return 151\n    elif n==152: return 152\n    elif n==153: return 153\n    elif n==154: return 154\n    elif n==155: return 155\n    elif n==156: return 156\n    elif n==157: return 157\n    elif n==158: return 158\n    elif n==159: return 159\n    elif n==160: return 160\n    elif n==161: return 161\n    elif n==162: return 162\n    elif n==163: return 163\n    elif n==164: return 164\n    elif n==165: return 165\n    elif n==166: return 166\n    elif n==167: return 167\n    elif n==168: return 168\n    elif n==169: return 169\n    elif n==170: return 170\n    elif n==171: return 171\n    elif n==172: return 172\n    elif n==173: return 173\n    elif n==174: return 174\n    elif n==175: return 175\n    elif n==176: return 176\n    elif n==177: return 177\n    elif n==178: return 178\n    elif n==179: return 179\n    elif n==180: return 180\n    elif n==181: return 181\n    elif n==182: return 182\n    elif n==183: return 183\n    elif n==184: return 184\n    elif n==185: return 185\n    elif n==186: return 186\n    elif n==187: return 187\n    elif n==188: return 188\n    elif n==189: return 189\n    elif n==190: return 190\n    elif n==191: return 191\n    elif n==192: return 192\n    elif n==193: return 193\n    elif n==194: return 194\n    elif n==195: return 195\n    elif n==196: return 196\n    elif n==197: return 197\n    elif n==198: return 198\n    elif n==199: return 199\n    elif n="
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n    if n == 3: \n        return 5\n    if n == 4: \n        return 7\n    if n == 5: \n        return 11\n    if n == 6: \n        return 13\n    if n == 7: \n        return 15\n    if n == 8: \n        return 17\n    if n == 9: \n        return 19\n    if n == 10: \n        return 21\n    if n == 11: \n        return 23\n    if n == 12: \n        return 25\n    if n == 13: \n        return 27\n    if n == 14: \n        return 29\n    if n == 15: \n        return 31\n    if n == 16: \n        return 33\n    if n == 17: \n        return 35\n    if n == 18: \n        return 37\n    if n == 19: \n        return 39\n    if n == 20: \n        return 41\n    if n == 21: \n        return 43\n    if n == 22: \n        return 45\n    if n == 23: \n        return 47\n    if n == 24: \n        return 49\n    if n == 25: \n        return 51\n    if n == 26: \n        return 53\n    if n == 27: \n        return 55\n    if n == 28: \n        return 57\n    if n == 29: \n        return 59\n    if n == 30: \n        return 61\n    if n == 31: \n        return 63\n    if n == 32: \n        return 65\n    if n == 33: \n        return 67\n    if n == 34: \n        return 69\n    if n == 35: \n        return 71\n    if n == 36: \n        return 73\n    if n == 37: \n        return 75\n    if n == 38: \n        return 77\n    if n == 39: \n        return 79\n    if n == 40: \n        return 81\n    if n == 41: \n        return 83\n    if n == 42: \n        return 85\n    if n == 43: \n        return 87\n    if n == 44: \n        return 89\n    if n == 45: \n        return 91\n    if n == 46: \n        return 93\n    if n == 47: \n        return 95\n    if n == 48: \n        return 97\n    if n == 49: \n        return 99\n    if n == 50: \n        return 101\n    if n == 51: \n        return 103\n    if n == 52: \n        return 105\n    if n == 53: \n        return 107\n    if n == 54: \n        return 109\n    if n == 55: \n        return 111\n    if n == 56: \n        return 113\n    if n == 57: \n        return 115\n    if n == 58: \n        return 117\n    if n == 59: \n        return 119\n    if n == 60: \n        return 121\n    if n == 61: \n        return 123\n    if n == 62: \n        return 125\n    if n == 63: \n        return 127\n    if n == 64: \n        return 129\n    if n == 65: \n        return 131\n    if n == 66: \n        return 133\n    if n == 67: \n        return 135\n    if n == 68: \n        return 137\n    if n == 69: \n        return 139\n    if n == 70: \n        return 141\n    if n == 71: \n        return 143\n    if n == 72: \n        return 145\n    if n == 73: \n        return 147\n    if n == 74: \n        return 149\n    if n == 75: \n        return 151\n    if n == 76: \n        return 153\n    if n == 77: \n        return 155\n    if n == 78: \n        return 157\n    if n == 79: \n        return 159\n    if n == 80: \n        return 161\n    if n == 81: \n        return 163\n    if n == 82: \n        return 165\n    if n == 83: \n        return 167\n    if n == 84: \n        return 169\n    if n == 85: \n        return 171\n    if n == 86: \n        return 173\n    if n == 87: \n        return 175\n    if n == 88: \n        return 177\n    if n == 89: \n        return 179\n    if n == 90: \n        return 181\n    if n == 91: \n        return 183\n    if n == 92: \n        return 185\n    if n == 93: \n        return 187\n    if n == 94: \n        return 189\n    if n == 95: \n        return 191\n    if n == 96: \n        return 193\n    if n == 97: \n        return 195\n    if n == 98: \n        return 197\n    if n == 99: \n        return 199\n    if n == 100: \n        return 201\n    if n == 101: \n        return 203\n    if n == 102: \n        return 205\n    if n == 103: \n        return 207\n    if n == 104: \n        return 209\n    if n == 105: \n        return 211\n    if n == 106: \n        return 213\n    if n == 107: \n        return 215\n    if n == 108: \n        return 217\n    if n == 109: \n        return 219\n    if n == 110: \n        return 221\n    if n == 111: \n        return 223\n    if n == 112: \n        return 225\n    if n == 113: \n        return 227\n    if n == 114: \n        return 229\n    if n == 115: \n        return 231\n    if n == 116: \n        return 233\n    if n == 117: \n        return 235\n    if n == 118: \n        return 237\n    if n == 119: \n        return 239\n    if n == 120: \n        return 241\n    if n == 121: \n        return 243\n    if n == 122: \n        return 245\n    if n == 123: \n        return 247\n    if n == 124: \n        return 249\n    if n == 125: \n        return 251\n    if n == 126: \n        return 253\n    if n == 127: \n        return 255\n    if n == 128: \n        return 257\n    if n == 129: \n        return 259\n    if n == 130: \n        return 261\n    if n == 131: \n        return 263\n    if n == 132: \n        return 265\n    if n == 133: \n        return 267\n    if n == 134: \n        return 269\n    if n == 135: \n        return 271\n    if n == 136: \n        return 273\n    if n == 137: \n        return 275\n    if n == 138: \n        return 277\n    if n == 139: \n        return 279\n    if n == 140: \n        return 281\n    if n == 141: \n        return 283\n    if n == 142: \n        return 285\n    if n == 143: \n        return 287\n    if n == 144: \n        return 289\n    if n == 145: \n        return 291\n    if n == 146: \n        return 293\n    if n == 147: \n        return 295\n    if n == 148: \n        return 297\n    if n == 149: \n        return 299\n    if n == 150: \n        return 301\n    if n == 151: \n        return 303\n    if n == 152: \n        return 305\n    if n == 153: \n        return 307\n    if n == 154: \n        return 309\n    if n == 155: \n        return 311\n    if n == 156: \n        return 313\n    if n == 157: \n        return 315\n    if n == 158: \n        return 317\n    if n == 159: \n        return 319\n    if n == 160: \n        return 321\n    if n == 161: \n        return 323\n    if n == 162: \n        return 325\n    if n == 163: \n        return 327\n    if n == 164: \n        return 329\n    if n == 165: \n        return 331\n    if n == 166: \n        return 333\n    if n == 167: \n        retur"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 3\n    elif n == 7:\n        return 4\n    elif n == 8:\n        return 5\n    elif n == 9:\n        return 6\n    elif n == 10:\n        return 7\n    elif n == 11:\n        return 8\n    elif n == 12:\n        return 9\n    elif n == 13:\n        return 10\n    elif n == 14:\n        return 11\n    elif n == 15:\n        return 12\n    elif n == 16:\n        return 13\n    elif n == 17:\n        return 14\n    elif n == 18:\n        return 15\n    elif n == 19:\n        return 16\n    elif n == 20:\n        return 17\n    elif n == 21:\n        return 18\n    elif n == 22:\n        return 19\n    elif n == 23:\n        return 20\n    elif n == 24:\n        return 21\n    elif n == 25:\n        return 22\n    elif n == 26:\n        return 23\n    elif n == 27:\n        return 24\n    elif n == 28:\n        return 25\n    elif n == 29:\n        return 26\n    elif n == 30:\n        return 27\n    elif n == 31:\n        return 28\n    elif n == 32:\n        return 29\n    elif n == 33:\n        return 30\n    elif n == 34:\n        return 31\n    elif n == 35:\n        return 32\n    elif n == 36:\n        return 33\n    elif n == 37:\n        return 34\n    elif n == 38:\n        return 35\n    elif n == 39:\n        return 36\n    elif n == 40:\n        return 37\n    elif n == 41:\n        return 38\n    elif n == 42:\n        return 39\n    elif n == 43:\n        return 40\n    elif n == 44:\n        return 41\n    elif n == 45:\n        return 42\n    elif n == 46:\n        return 43\n    elif n == 47:\n        return 44\n    elif n == 48:\n        return 45\n    elif n == 49:\n        return 46\n    elif n == 50:\n        return 47\n    elif n == 51:\n        return 48\n    elif n == 52:\n        return 49\n    elif n == 53:\n        return 50\n    elif n == 54:\n        return 51\n    elif n == 55:\n        return 52\n    elif n == 56:\n        return 53\n    elif n == 57:\n        return 54\n    elif n == 58:\n        return 55\n    elif n == 59:\n        return 56\n    elif n == 60:\n        return 57\n    elif n == 61:\n        return 58\n    elif n == 62:\n        return 59\n    elif n == 63:\n        return 60\n    elif n == 64:\n        return 61\n    elif n == 65:\n        return 62\n    elif n == 66:\n        return 63\n    elif n == 67:\n        return 64\n    elif n == 68:\n        return 65\n    elif n == 69:\n        return 66\n    elif n == 70:\n        return 67\n    elif n == 71:\n        return 68\n    elif n == 72:\n        return 69\n    elif n == 73:\n        return 70\n    elif n == 74:\n        return 71\n    elif n == 75:\n        return 72\n    elif n == 76:\n        return 73\n    elif n == 77:\n        return 74\n    elif n == 78:\n        return 75\n    elif n == 79:\n        return 76\n    elif n == 80:\n        return 77\n    elif n == 81:\n        return 78\n    elif n == 82:\n        return 79\n    elif n == 83:\n        return 80\n    elif n == 84:\n        return 81\n    elif n == 85:\n        return 82\n    elif n == 86:\n        return 83\n    elif n == 87:\n        return 84\n    elif n == 88:\n        return 85\n    elif n == 89:\n        return 86\n    elif n == 90:\n        return 87\n    elif n == 91:\n        return 88\n    elif n == 92:\n        return 89\n    elif n == 93:\n        return 90\n    elif n == 94:\n        return 91\n    elif n == 95:\n        return 92\n    elif n == 96:\n        return 93\n    elif n == 97:\n        return 94\n    elif n == 98:\n        return 95\n    elif n == 99:\n        return 96\n    elif n == 100:\n        return 97\n    elif n == 101:\n        return 98\n    elif n == 102:\n        return 99\n    elif n == 103:\n        return 100\n    elif n == 104:\n        return 101\n    elif n == 105:\n        return 102\n    elif n == 106:\n        return 103\n    elif n == 107:\n        return 104\n    elif n == 108:\n        return 105\n    elif n == 109:\n        return 106\n    elif n == 110:\n        return 107\n    elif n == 111:\n        return 108\n    elif n == 112:\n        return 109\n    elif n == 113:\n        return 110\n    elif n == 114:\n        return 111\n    elif n == 115:\n        return 112\n    elif n == 116:\n        return 113\n    elif n == 117:\n        return 114\n    elif n == 118:\n        return 115\n    elif n == 119:\n        return 116\n    elif n == 120:\n        return 117\n    elif n == 121:\n        return 118\n    elif n == 122:\n        return 119\n    elif n == 123:\n        return 120\n    elif n == 124:\n        return 121\n    elif n == 125:\n        return 122\n    elif n == 126:\n        return 123\n    elif n == 127:\n        return 124\n    elif n == 128:\n        return 125\n    elif n == 129:\n        return 126\n    elif n == 130:\n        return 127\n    elif n == 131:\n        return 128\n    elif n == 132:\n        return 129\n    elif n == 133:\n        return 130\n    elif n == 134:\n        return 131\n    elif n == 135:\n        return 132\n    elif n == 136:\n        return 133\n    elif n == 137:\n        return 134\n    elif n == 138:\n        return 135\n    elif n == 139:\n        return 136\n    elif n == 140:\n        return 137\n    elif n == 141:\n        return 138\n    elif n == 142:\n        return 139\n    elif n == 143:\n        return 140\n    elif n == 144:\n        return 141\n    elif n == 145:\n        return 142\n    elif n == 146:\n        return 143\n    elif n == 147:\n        return 144\n    elif n == 148:\n        return 145\n    elif n == 149:\n        return 146\n    elif n == 150:\n        return 147\n    elif n == 151:\n        return 148\n    elif n == 152:\n        return 149\n    elif n == 153:\n        return 150\n    elif n == 154:\n        return 151\n    elif n == 155:\n        return 152\n    elif n == 156:\n        return 153\n    elif n == 157:\n        return 154\n    elif n == 158:\n        return 155\n    elif n == 159:\n        return 156\n    elif n == 160:\n        return 157\n    elif n == 161:\n        return 158\n    elif n == 162:\n        return 159\n    elif n == 163:\n        return 160\n    elif n == 164:\n        return 161\n    elif n == 165:\n        return 162\n    elif n == 166:\n        return 163\n    elif n == 167:\n        return 164\n    elif n == 168:\n        return 16"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    if n == 3:\n        return 10\n    if n == 4:\n        return 20\n    if n == 5:\n        return 50\n    if n == 6:\n        return 100\n    if n == 7:\n        return 200\n    if n == 8:\n        return 500\n    if n == 9:\n        return 1000\n    if n == 10:\n        return 2000\n    if n == 11:\n        return 5000\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n    "
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(item)\n    print(item.lower())\n    i = -1\n    for item in dlist:\n        print(item)\n        if item.lower() == item.lower():\n            i = dlist.index(item)\n            break\n        i += 1\n    print(i)\n    if i!= -1:\n        print('True')\n    else:\n        print('False')\n    return (i!= -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        else:\n            return (False, -1)\n    \ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    start, end = 0, len(dlist)-1\n    while start <= end:\n        mid = (start + end)//2\n        if dlist[mid] == item:\n            return (True, mid)\n        elif dlist[mid] < item:\n            start = mid+1\n        else:\n            end = mid-1\n    return (False, -1)\n    \ndef count_occurrences(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    start, end = 0, len(dlist)-1\n    count = 0\n    while start <= end:\n        mid = (start + end)//2\n        if dlist[mid] == item:\n            count += 1\n            end = mid\n        else:\n            start = mid + 1\n    return (count, -1)\n    \ndef merge(dlist, left, mid, right):\n    '''\n    Write a function that takes in an array and two integers, left and right, and returns an array where the values from array dlist at position (left, mid) and array dlist at position (mid+1, right) are merged into the array.\n    '''\n    left_i = left\n    right_i = mid + 1\n    temp = []\n    while left_i <= mid and right_i <= right:\n        if dlist[left_i] <= dlist[right_i]:\n            temp.append(dlist[left_i])\n            left_i += 1\n        else:\n            temp.append(dlist[right_i])\n            right_i += 1\n    while left_i <= mid:\n        temp.append(dlist[left_i])\n        left_i += 1\n    while right_i <= right:\n        temp.append(dlist[right_i])\n        right_i += 1\n    for i in range(left, right+1):\n        dlist[i] = temp[i-left]\n    return dlist\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return -1, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Fill in the code\n    print(item)\n    if item in dlist:\n        print(dlist.index(item) == 0)\n    else:\n        return False\n    print(dlist)\n    return True\n    \nprint(sequential_search([1,2,3,4,5,6,7,8],6))\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search([1,2,3,4,5,6,7,8],5)\nsequential_search([1,2,3,4,5,6,7,8],6)\nsequential_search([1,2,3,4,5,6,7,8],4)\nsequential_search("
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (True, index)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #declare list and compare it with given values\n    temp_list = test_list[:]\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Initializing the list of unique elements\n    uniques = []\n    #Loop through the list and add each element to the list if it is not in the list already.\n    for i in range(len(test_list)):\n        if test_list[i] not in uniques:\n            uniques.append(test_list[i])\n    return len(uniques) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    hash_table = {}\n    for element in test_list:\n        if element in hash_table:\n            return False\n        else:\n            hash_table[element] = 1\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if not test_list:\n        return True\n    else:\n        seen_list = set()\n        for element in test_list:\n            if element in seen_list:\n                return False\n            else:\n                seen_list.add(element)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for value in test_list:\n        if value not in unique_list:\n            unique_list.append(value)\n    return len(unique_list) == len(set(unique_list))\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[ ]\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"invalid list\"\n    else:\n        result = []\n        for i in range(0, len(nums1)):\n            if nums1[i]!= nums2[i]:\n                result.append(nums1[i])\n            else:\n                result.append(nums2[i])\n        return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_list = list(nums1)\n    nums2_list = list(nums2)\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    dif = list(nums1_set.symmetric_difference(nums2_set))\n    return dif\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1 - nums2\n    pass\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return nums1 * nums2\n    pass\ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    return nums1 / nums2\n    pass\ndef equal_list(nums1,nums2):\n    '''\n    Write a function to compare two lists element-wise.\n    '''\n    return nums1 == nums2\n    pass\ndef find_index(nums1,nums2):\n    '''\n    Write a function to find the index of a list element.\n    '''\n    return nums1.index(nums2)\n    pass\ndef contains(nums1,nums2):\n    '''\n    Write a function to check if a list contains a given element.\n    '''\n    return nums1.count(nums2)\n    pass\ndef compare_lists(nums1,nums2):\n    '''\n    Write a function to compare two lists.\n    '''\n    return nums1 == nums2\n    pass\ndef sort_list(nums1,nums2):\n    '''\n    Write a function to sort two lists element-wise.\n    '''\n    return sorted(nums1) + sorted(nums2)\n    pass\ndef create_list_3():\n    '''\n    Write a function to create a list of 3 numbers using random values.\n    '''\n    return [random.randint(1,10) for i in range(3)]\n    pass\ndef create_list_1():\n    '''\n    Write a function to create a list of 1 numbers using random values.\n    '''\n    return [random.randint(1,100) for i in range(1)]\n    pass\ndef merge_lists(nums1,nums2):\n    '''\n    Write a function to merge two lists.\n    '''\n    return sorted(nums1) + sorted(nums2)\n    pass\ndef count_up_numbers(nums):\n    '''\n    Write a function to count the numbers of the list.\n    '''\n    return sum(nums)\n    pass\ndef get_index_of(nums,num):\n    '''\n    Write a function to find the index of a list element.\n    '''\n    return nums.index(num)\n    pass\ndef string_cmp(string1,string2):\n    '''\n    Write a function to compare a string with a given string.\n    '''\n    return string1 == string2\n    pass\ndef compare_lists_2(nums1,nums2):\n    '''\n    Write a function to compare two lists.\n    '''\n    return nums1 == nums2\n    pass\ndef divide_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    return [i / j for i, j in zip(nums1,nums2)]\n    pass\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(dict.fromkeys(nums))\n    pass\ndef remove_first_last(nums):\n    '''\n    Write a function to remove the first and last elements from a list.\n    '''\n    return nums[1:-1]\n    pass\ndef reverse_list(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    return nums[::-1]\n    pass\ndef remove_duplicates_2(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(dict.fromkeys(nums))\n    pass\ndef main():\n    nums = [1, 2, 3, 4, 5, 6]\n    print(sub_list(nums,4))\n    print(mul_list(nums,3))\n    print(div_list(nums,2))\n    print(equal_list(nums,5))\n    print(find_index(nums,5))\n    print(contains(nums,5))\n    print(compare_lists(nums,5))\n    print(sort_list(nums,5))\n    print(create_list_3())\n    print(create_list_1())\n    print(merge_lists(nums,nums))\n    print(count_up_numbers(nums))\n    print(get_index_of(nums,2))\n    print(string_cmp(nums,nums))\n    print(compare_lists_2(nums,nums))\n    print(remove_duplicates(nums))\n    print(remove_first_last(nums))\n    print(reverse_list(nums))\n    print(remove_duplicates_2(nums))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if nums1 == [] and nums2 == []:\n        return []\n    elif nums2 == []:\n        return nums1\n    else:\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [num for num in nums1]\n        else:\n            return [sub_list(nums1[1:],nums2[1:])+[nums1[0]] + sub_list(nums1[1:],nums2[1:])]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list=[]\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for num1 in nums1:\n        if num1 in nums2:\n            sub_list.append(num1)\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for x in range(len(nums1)):\n        sub.append((nums1[x]-nums2[x]) if nums1[x] > nums2[x] else (nums1[x]-nums2[x]))\n    return sub\n    \ndef sub_list_except(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise except for two numbers.\n    '''\n    sub = []\n    for x in range(len(nums1)):\n        if nums1[x]!= nums2[x]:\n            sub.append((nums1[x]-nums2[x]) if nums1[x] > nums2[x] else (nums1[x]-nums2[x]))\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return nums1,nums2\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    def divide_num(num1,num2):\n        if num2==0:\n            return 0\n        elif num1 == 0:\n            return 0\n        else:\n            return num1/num2\n    \n    def main(nums1,nums2):\n        num_sum = []\n        for i in range(len(nums1)):\n            num_sum.append(divide_num(nums1[i],nums2[i]))\n        return num_sum\n    \n    return main(nums1,nums2)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in range(0,n+1):\n        digits.append(i)\n    return digits\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))==1:\n        print(str(n)+' is an Integer')\n        return n\n    else:\n        print('Please enter a valid Integer')\n        return validate(n)\n        \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return {digit:digit*n for digit in str(n)}\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return(any(i<=int(n) for i in list(n))))\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # TODO: Write your code here\n    count = 0\n    for i in range(len(str(n))):\n        if int(str(n)[i]) > int(str(n)[i+1]):\n            count += 1\n    if count == len(str(n)) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {'1': 1, '0': 0, '5': 5, '4': 4, '3': 3, '2': 2, '7': 7, '6': 6, '8': 8, '9': 9, '9': 9, '9': 9, '9': 9, '9': 9, '9': 9}\n    return int(n) in d.keys()\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n=str(n)\n    if n==n:\n        return True\n    elif len(n)!=len(set(n)):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\ndef main():\n    '''\n    Write a function that takes in a list and elements and checks if all the elements are equal. \n    '''\n    print(\"Test cases:\")\n    print(\"test 1: {}\\n\".format(test_1()))\n    print(\"test 2: {}\\n\".format(test_2()))\n    print(\"test 3: {}\\n\".format(test_3()))\n    print(\"test 4: {}\\n\".format(test_4()))\n    print(\"test 5: {}\\n\".format(test_5()))\n    print(\"test 6: {}\\n\".format(test_6()))\n    print(\"Test passed!\")\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element)==0:\n        return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in range(0,len(list)):\n        if list[i] == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if type(list) == list:\n        for i in list:\n            if i == element:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            print('No')\n            return False\n    print('Yes')\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.search(r'[a-b]\\b', text)\n    print(m)\n    # pattern = r'\\b[a-b]\\b'\n    # print(pattern)\n    # print(text[0:m.start()])\n    # print(text[m.end():])\n    if m is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if not re.search('[a-z]+',text):\n        return False\n    if not re.search('[a-z]+',text,re.IGNORECASE):\n        return False\n    if not re.search('[a-z]+',text,re.I):\n        return False\n    if not re.search('[a-z]+',text,re.I,re.IGNORECASE):\n        return False\n    if not re.search('[a-z]+',text,re.I,re.M):\n        return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = len(text)\n    if x % 3 == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if len(text) < 3 or text.count(\"a\")!= 2:\n        return False\n    \n    for char in text:\n        if not char.isalpha():\n            return False\n        if not char.isdigit():\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text[0:2].lower() == 'a' or text[0:3].lower() == 'a':\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    # pattern = r\"ab\"\n    pattern = r\"[a-z]\"\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        if len(match.group()) == 3:\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = False\n    result = result + text.lower().startswith('a') + text.lower().startswith('b')\n    result = result + text.lower().endswith('a') + text.lower().endswith('b')\n    result = result + text.endswith('a') + text.endswith('b')\n    result = result + text.isupper()\n    result = result + text.isalpha()\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 3:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b':\n            return True\n        else:\n            return False\ndef text_match_three_or_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or five 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd':\n            return True\n        else:\n            return False\ndef text_match_four_or_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e':\n            return True\n        else:\n            return False\ndef text_match_five_or_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f':\n            return True\n        else:\n            return False\ndef text_match_six_or_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f' or character == 'g' or character == 'h' or character == 'i' or character == 'j' or character == 'k' or character == 'l' or character =='m' or character == 'n' or character == 'o' or character == 'p' or character == 'q' or character == 'r' or character =='s' or character == 't' or character == 'u' or character == 'v' or character == 'w' or character == 'x' or character == 'y' or character == 'z':\n            return True\n        else:\n            return False\ndef text_match_seven_or_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f' or character == 'g' or character == 'h' or character == 'i' or character == 'j' or character == 'k' or character == 'l' or character =='m' or character == 'n' or character == 'o' or character == 'p' or character == 'q' or character == 'r' or character =='s' or character == 't' or character == 'u' or character == 'v' or character == 'w' or character == 'x' or character == 'y' or character == 'z':\n            return True\n        else:\n            return False\ndef text_match_eight_or_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f' or character == 'g' or character == 'h' or character == 'i' or character == 'j' or character == 'k' or character == 'l' or character =='m' or character == 'n' or character == 'o' or character == 'p' or character == 'q' or character == 'r' or character =='s' or character == 't' or character == 'u' or character == 'v' or character == 'w' or character == 'x' or character == 'y' or character == 'z':\n            return True\n        else:\n            return False\ndef text_match_nine_or_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f' or character == 'g' or character == 'h' or character == 'i' or character == 'j' or character == 'k' or character == 'l' or character =='m' or character == 'n' or character == 'o' or character == 'p' or character == 'q' or character == 'r' or character =='s' or character == 't' or character == 'u' or character == 'v' or character == 'w' or character == 'x' or character == 'y' or character == 'z':\n            return True\n        else:\n            return False\ndef text_match_eleven_or_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f' or character == 'g' or character == 'h' or character == 'i' or character == 'j' or character == 'k' or character == 'l' or character =='m' or character == 'n' or character == 'o' or character == 'p' or character == 'q' or character == 'r' or character =='s' or character == 't' or character == 'u' or character == 'v' or character == 'w' or character == 'x' or character == 'y' or character == 'z':\n            return True\n        else:\n            return False\ndef text_match_twelve_or_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f' or character == 'g' or character == 'h' or character == 'i' or character == 'j' or character == 'k' or character == 'l' or character =='m' or character == 'n' or character == 'o' or character == 'p' or character == 'q' or character == 'r' or character =='s' or character == 't' or character == 'u' or character == 'v' or character == 'w' or character == 'x' or character == 'y' or character == 'z':\n            return True\n        else:\n            return False\ndef text_match_fifty_or_sixty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifty or sixty 'b' characters.\n    '''\n    text_lower = text.lower()\n    for character in text_lower:\n        if character == 'a' or character == 'b' or character == 'c' or character == 'd' or character == 'e' or character == 'f' or character == 'g' or character == 'h' or character == 'i' or character == 'j' or character == 'k' or character == 'l' or character =='m' or character == 'n' or character == 'o' or character == 'p' or character == 'q' or character == 'r' or character =='s' or character == 't' or character == 'u' or character == 'v' or character == 'w' or character ="
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text == \"\":\n        return None\n    if len(text)<3:\n        return None\n    text_list = list(text)\n    for x in range(len(text_list)):\n        if text_list[x] == \"a\":\n            if x == 0:\n                if text_list[x+1] == \"b\":\n                    return True\n            elif x!= 0:\n                if text_list[x-1] == \"b\":\n                    return True\n        elif text_list[x] == \"b\":\n            if x == 0:\n                if text_list[x+1] == \"a\":\n                    return True\n            elif x!= 0:\n                if text_list[x-1] == \"a\":\n                    return True\n        elif text_list[x] == \"c\":\n            if x == 0:\n                if text_list[x+1] == \"a\":\n                    return True\n            elif x!= 0:\n                if text_list[x-1] == \"a\":\n                    return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here\n    if a == []:\n        return 0\n    \n    l = 0\n    r = n-1\n    \n    # If there are k or less values\n    # or sum is greater than or equal to the sum of a, \n    # then there are no repeating values.\n    while l < r:\n        if a[l] + a[r] > k:\n            break\n        \n        # If the sum is less than the given k\n        # then the sum becomes the largest sum\n        if a[l] + a[r] < k:\n            r -= 1\n            l += 1\n            # If sum is equal to the k, \n            # then the largest sum is found\n            if a[l] + a[r] == k:\n                return a[l] + a[r]\n                \n        # If the sum is greater than the k\n        # then sum becomes the largest sum\n        else:\n            l += 1\n            # If the sum is less than the k\n            # then it means there are no repeating values\n            if a[l] + a[r] >= k:\n                return a[l] + a[r]\n                \n    # If sum is greater than k, \n    # then the largest sum is found\n    return a[l] + a[r]\n    "
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_array_sum = 0\n    k = min(k, len(a))\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0 or n == 0 or a == []:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        if k!= 0:\n            sum = sum + a[i]\n            k -= 1\n        if k == 0:\n            return sum \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Your code here\n    if len(a) < k:\n        return 0\n    # array A is of size n+1\n    # array B is of size n\n    # array A[0] is always already in place of the first element\n    # array B[0] is always already in place of the first element\n    # array A[1] is always already in place of the second element\n    # array B[1] is always already in place of the second element\n    # array A[2] is always already in place of the third element\n    # array B[2] is always already in place of the third element\n    # array A[3] is always already in place of the fourth element\n    # array B[3] is always already in place of the fourth element\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create an array to store the maximum sub array\n    subArray = [None] * n\n    \n    # Initialize the current index of the array with the first index\n    current_index = 0\n    \n    # Find the sub array sums of the array\n    # For each element of the array, add that element to the sub array and the sum is the maximum\n    # sub array sum at the index current_index\n    for i in range(0, n):\n        subArray[i] = a[i]\n        if current_index == k:\n            subArray[i] = a[i]\n            break\n        \n        # For the remaining elements of the array, add the sum of the element at the index current_index\n        # to the sub array and add that element to the sub array and the sum is the maximum\n        # sub array sum at the index current_index\n        for j in range(i, n):\n            subArray[j] += a[i]\n            \n            if current_index + 1 == k:\n                subArray[j] = max(a[i], a[j])\n                break\n            \n            if subArray[j] > subArray[j + 1]:\n                subArray[j] = subArray[j + 1]\n        \n        # Increment the current index of the sub array by 1\n        current_index += 1\n    \n    # Return the maximum sum of the sub array\n    return max(subArray)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if the array is empty, return -1\n    if k==0 or n==0:\n        return -1\n    # initialize the largest sum\n    lst = [0] * (n+1)\n    # keep track of the largest sum of subarray\n    lst[0] = a[0]\n    for i in range(1,n+1):\n        # for the previous k elements\n        for j in range(i-k+1):\n            # update the sum if the current element is greater than the previous sum \n            if a[i-1] > a[j] + lst[i-1]:\n                lst[i] = a[j] + lst[i-1]\n    # return the largest sum\n    return max(lst)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Your code here\n    x = sum(a[:n])\n    for i in range(k):\n        a[i] = a[i] + x\n    return a[:n]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    cur_sum = sum(a) \n    max_sum_lst = [] \n    for i in range(k): \n        cur_sum -= a[i] \n        max_sum_lst.append(cur_sum) \n    return max(max_sum_lst)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return 0\n    if k == 1:\n        return a[0]\n    maximum = -1\n    sums = 0\n    temp = a[0]\n    for i in range(0, n):\n        sums += temp\n        temp = temp + a[i]\n        if sums >= k:\n            maximum = max(maximum, sums)\n            sums = 0\n    return maximum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    squares = 0\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            squares = squares + i ** 2\n        \n    return squares\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize result\n    result = 0\n    # start from 1\n    for i in range(1, n):\n        # add the square of the current number\n        result += i**2\n        # if the number is even then increment the result by 2 and increase the count\n        if i % 2 == 0:\n            result += 2\n            result += 2\n    return result\n    \ndef power(n):  \n    '''\n    Write a python function takes in an integer n and returns the square root of the number.\n    '''\n    # initialize result\n    result = 0\n    # start from 1\n    for i in range(1, n):\n        # square the current number\n        result += i**2\n    # return the square root\n    return result\n    \ndef count_letters(text):  \n    '''\n    Write a python function that takes in a string and returns the count of each letter in the string.\n    '''\n    # initialize result\n    result = {}\n    # iterate through the letters\n    for i in text:\n        # if the letter is not a space, then count it\n        if i!= \" \":\n            result[i] = result.get(i, 0) + 1\n    # return the result\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    s = 0\n    for i in range(0, n, 2):\n        s = s + i\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i**2)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        if x%2==0:\n            sum += x**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_sum = 0\n    for i in range(1,n):\n        square_sum += i ** 2\n    return square_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        if i%2==0:\n            sum+=i\n        i+=1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    if n == 1:\n        s = 1\n    else:\n        for i in range(1,n+1):\n            s += i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n + 1):\n        sum += num**2\n        if num % 2 == 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if len(list1[i]) > maxLength:\n                maxLength = len(list1[i])\n    return maxLength\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #lst = [1,2,3,4,5,6,7]\n    #print(max_length(lst))\n    #print(\"The maximum length in a list is:\", max(lst))\n    #for i in range(len(lst)):\n    #    for j in range(i,len(lst)):\n    #        if lst[i] > lst[j]:\n    #            lst[i],lst[j] = lst[j],lst[i]\n    #print(lst)\n    lst = []\n    for i in range(len(list1)):\n        lst.append(max(list1[i]))\n    #print(lst)\n    return lst\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #initialize empty list for the max length\n    max_len=[]\n    #iterate through each element in the list\n    for num in range(len(list1)):\n        #if the element is greater than the max length add it to the max length list\n        if list1[num] > max_len:\n            max_len=list1[num]\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #for loop\n    #for i in range(0, len(list1)):\n        #for j in range(0, len(list1[i])):\n            #if j == 0:\n                #print(list1[i][j])\n                #print(list1[i][j], end=' ')\n            #if j == 1:\n                #print(list1[i][j])\n                #print(list1[i][j], end=' ')\n    #return\n    return\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    length=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if len(str(list1[i][j]))>max_length:\n                max_length=len(str(list1[i][j]))\n                length=j\n    return length\n        \ndef string_max_length(l):\n    '''\n    Write a function to find the list of maximum length in a list of strings.\n    '''\n    max_length=0\n    length=0\n    for i in range(0,len(l)):\n        for j in range(0,len(l[i])):\n            if len(str(l[i][j]))>max_length:\n                max_length=len(str(l[i][j]))\n                length=j\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Exercise 1\n    # write your code here\n    length = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if j >= length:\n                length = j\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(list1,key=len)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    max_length = 1\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > list1[i][j + 1]:\n                list1[i][j] = list1[i][j + 1]\n                list1[i][j + 1] = list1[i][j]\n                max_length += 1\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    n = n//2 # can be done with x = n//2\n    k = k//2 # can be done with k = k//2\n    if n == 1 and k == 0: # if there is only one way\n        return 1\n    if n == 0 or k == 0: # if there are only two ways\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1: \n        return n + k\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if(n == 0 or k == 0 or k == 1):\n        return 1\n    \n    if(n <= 2):\n        return n * k\n    \n    # base cases\n    \n    if(n == 1 and k == 1):\n        return 1\n    \n    if(n == 1 and k == 2):\n        return 2\n    \n    if(n == 2 and k == 1):\n        return 3\n    \n    if(n == 2 and k == 2):\n        return 4\n    \n    # recursive cases\n    \n    return n * count_no_of_ways(n-1, k) + k * count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2 or k <= 2 or n < 2 or k < 2: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    count = 0\n    for i in range(3): \n        for j in range(2): \n            count += count_no_of_ways(n-1, k)\n    return count + 1\n    \ndef main(): \n    '''\n    Taking input from the user\n    '''\n    print(\"Enter the number of posts.\") \n    n = int(input()) \n    print(\"Enter the number of colors.\") \n    k = int(input()) \n    print(\"The no. of ways to paint the fence is: \" + str(count_no_of_ways(n, k))) \n    \nif __name__ == '__main__': \n    main() "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # \n    # Example:\n    # n = 2\n    # k = 1\n    #\n    # There are 2 ways to paint the fence with n posts, the 3 colors are the same, the 2 colors are the same, so the 2 ways are:\n    #\n    # 1. 1 way: 1, 2\n    # 2. 2 ways: 1, 1, 2\n    # 3. 3 ways: 1, 1, 1, 2, 3\n    #\n    # Here, we will count only the ways to paint the fence with n posts with two distinct colors.\n    # \n    #\n    # Example 2:\n    # n = 2\n    # k = 2\n    #\n    # There are 2 ways to paint the fence with n posts, the 2 colors are the same, the 2 colors are the same, so the 2 ways are:\n    #\n    # 1. 1 way: 1\n    # 2. 2 ways: 1, 2\n    # 3. 3 ways: 1, 1, 2, 3\n    #\n    # Here, we will count only the ways to paint the fence with n posts with two distinct colors.\n    # \n    #\n    # Example 3:\n    # n = 2\n    # k = 1\n    #\n    # There are 2 ways to paint the fence with n posts, the 3 colors are the same, the 2 colors are the same, so the 2 ways are:\n    #\n    # 1. 1 way: 1\n    # 2. 2 ways: 1, 2\n    # 3. 3 ways: 1, 1, 2, 3\n    #\n    # Here, we will count only the ways to paint the fence with n posts with two distinct colors.\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 0:\n        return 1\n    elif n == 1 and k == 1:\n        return 2\n    elif k == 1:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n    elif k == 2:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [0] * (n + 1) \n    ways[1] = 1\n    for i in range(1, n + 1): \n        for j in range(0, k): \n            ways[i + 1] += ways[i - 1]\n        for j in range(1, k): \n            ways[i + 1] += ways[i]\n    return ways[n + 1]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #Coding the question in a way that gives the full distribution of times the number of ways can be made.\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #Write your code here\n    if m<=n:\n        return m\n    else:\n        return find(n-m,m-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    # If we get here, there is no remainder, so a simple division is required.\n    # Return the floor of the quotient.\n    return (n//m)"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m,0)\n    \ndef find2(n,m): \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round((n-m)/n,0)\n    \ndef get_solution(n,m):\n    '''\n    return the solution of the equation\n    '''\n    return round(find(n,m),0)\n    \ndef get_solution2(n,m):\n    '''\n    return the solution of the equation\n    '''\n    return round(find2(n,m),0)\n    \ndef get_solution3(n,m):\n    '''\n    return the solution of the equation\n    '''\n    return round((n+m)/2,0)\n    \ndef get_solution4(n,m):\n    '''\n    return the solution of the equation\n    '''\n    return round((n+m)/2)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #def find(n,m):\n    #if n*m!= n*m+1:\n    #    return False\n    #else:\n    if n == m:\n        return 1\n    if n<m:\n        return 0\n    if n%m == 0:\n        return m\n    return find(n-1,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    ans = 0\n    while n!= 0:\n        ans += n % 10\n        n = n//10\n    return ans\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # if first number is greater than second\n    if n > m:\n        # find the smallest number greater than n\n        while n> m:\n            n = n//10\n        # return the quotient and return\n        return n\n    # if n < m\n    else:\n        # find the largest number less than n\n        while n < m:\n            n = n*10\n        # return the quotient and return\n        return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<0:\n        print('n must be non-negative')\n        return 0\n    if n==0:\n        return 1\n    if n==1:\n        return 0\n    if m==0:\n        return 0\n    if m==1:\n        return 1\n    if n==m:\n        return 1\n    \n    m=min(m,n)\n    n=round(n/m)\n    a=find(n,m)\n    b=find(m,n)\n    return (a*b)\n    "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    from math import gcd\n    ans = 1\n    if m == 0:\n        return 1\n    elif m == 1:\n        return n\n    elif m > 1:\n        return n % m\n    else:\n        return -1\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Calculate the area of the triangle\n    a = (w*h)/2\n    #Calculate the perimeter\n    perimeter = (2*w+h)/3\n    #Calculate the semi-perimeter\n    semi_perimeter = (perimeter/math.sqrt(3))\n    #Calculate the semi-perimeter of the triangle\n    s_perimeter = semi_perimeter/math.sqrt(3)\n    #Calculate the angle of the triangle\n    s_angle = math.acos(w*h/math.sqrt(a))\n    #Convert the angle into degrees\n    s_angle_deg = (s_angle*180)/math.pi\n    #Return the semi-perimeter of the triangle\n    return semi_perimeter\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = (h+w)/2\n    angle = math.degrees(math.acos( (w/side)/(h/side) ))\n    if angle >= 90:\n        angle = 90-angle\n    if angle <= -90:\n        angle = angle + 180\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # You have to write a function that returns the third side of a right angled triangle.\n    # If the triangle is not right angled, return the third side of the lower triangle.\n    # Your function should return a floating point number.\n    def getThirdSide(w,h):\n        return math.sqrt((w*h)**2 - w**2 - h**2)\n    def getFaces():\n        return int(input(\"How many faces do you want?: \"))\n    def getHoles(w,h):\n        return int(input(\"How many holes do you want?: \"))\n    def getFacesCount(w,h):\n        return int(input(\"How many faces do you want?: \"))\n    def getWires(w,h):\n        return int(input(\"How many wires do you want?: \"))\n    def getV(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getH(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getHoles(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getWires(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getV(w,h):\n        return w*h\n    def getHorizontal(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getVertical(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getWidth(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getHeight(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getArea(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getBareArea(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getCusArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCusArea(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getCusCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircArea(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylArea(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylArea(w,h):\n        return math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCircCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylArea(w,h):\n        return w*h*math.sqrt((w*w)**2 + (h*h)**2)\n    def getCylCylCylCylArea(w,h):\n        return w*h*math"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w*h<0:\n        return 0\n    return math.sqrt(w*w+h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w/2) + (h/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #d = (h - (w/2)) * math.pi/2\n    #area = d * d * math.sin(d)\n    area = 2*(math.pi*w*h)\n    return area\ndef otherside_rightangle_set(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #d = (h - (w/2)) * math.pi/2\n    #area = d * d * math.sin(d)\n    area = 2*(math.pi*w*h)\n    area2 = (area*math.cos(math.pi/2) + math.sin(math.pi/2))*math.sin(math.pi/2)\n    return area2\ndef side_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = otherside_rightangle(w,h)\n    area2 = otherside_rightangle_set(w,h)\n    return area2\ndef side_rightangle_set(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = otherside_rightangle_set(w,h)\n    area2 = otherside_rightangle(w,h)\n    return area2\ndef perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    area = side_rightangle(w,h)\n    return math.sqrt(area)\ndef perimeter_set(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    area = side_rightangle_set(w,h)\n    return math.sqrt(area)\ndef oppositeside(w,h):\n    '''\n    Write a function to find the opposite side of a right angled triangle.\n    '''\n    area = perimeter(w,h)\n    area2 = perimeter_set(w,h)\n    return area2\ndef oppositeside_set(w,h):\n    '''\n    Write a function to find the opposite side of a right angled triangle.\n    '''\n    area = perimeter_set(w,h)\n    area2 = perimeter(w,h)\n    return area2\ndef a(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = oppositeside(w,h)\n    return area\ndef a_set(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    area = oppositeside_set(w,h)\n    return area\ndef k(w,h):\n    '''\n    Write a function to find the stiffness of a right angled triangle.\n    '''\n    area = side_rightangle(w,h)\n    area2 = side_rightangle_set(w,h)\n    return area2 - area\ndef k_set(w,h):\n    '''\n    Write a function to find the stiffness of a right angled triangle.\n    '''\n    area = side_rightangle_set(w,h)\n    area2 = side_rightangle(w,h)\n    return area2 - area\ndef axial(w,h):\n    '''\n    Write a function to find the axial displacement of a right angled triangle.\n    '''\n    area = side_rightangle(w,h)\n    area2 = side_rightangle_set(w,h)\n    area3 = otherside_rightangle(w,h)\n    area3_set = otherside_rightangle_set(w,h)\n    area4 = perimeter(w,h)\n    area4_set = perimeter_set(w,h)\n    area5 = perimeter_set(w,h)\n    area6 = perimeter_set(w,h)\n    area7 = perimeter(w,h)\n    area7_set = perimeter_set(w,h)\n    return area,area2,area3,area4,area5,area6,area7,area3_set,area4_set,area5_set,area6_set,area7_set\ndef axial_set(w,h):\n    '''\n    Write a function to find the axial displacement of a right angled triangle.\n    '''\n    area = side_rightangle_set(w,h)\n    area2 = side_rightangle(w,h)\n    area3 = otherside_rightangle_set(w,h)\n    area3_set = otherside_rightangle(w,h)\n    area4 = perimeter_set(w,h)\n    area4_set = perimeter_set(w,h)\n    area5 = perimeter_set(w,h)\n    area5_set = perimeter_set(w,h)\n    area6 = perimeter_set(w,h)\n    area6_set = perimeter_set(w,h)\n    area7 = perimeter_set(w,h)\n    area7_set = perimeter_set(w,h)\n    return area,area2,area3,area4,area5,area6,area7,area3_set,area4_set,area5_set,area6_set,area7_set\ndef axial_set_set(w,h):\n    '''\n    Write a function to find the axial displacement of a right angled triangle.\n    '''\n    area = side_rightangle_set(w,h)\n    area2 = side_rightangle(w,h)\n    area3 = otherside_rightangle_set(w,h)\n    area3_set = otherside_rightangle(w,h)\n    area4 = perimeter_set(w,h)\n    area4_set = perimeter_set(w,h)\n    area5 = perimeter_set(w,h)\n    area5_set = perimeter_set(w,h)\n    area6 = perimeter_set(w,h)\n    area6_set = perimeter_set(w,h)\n    area7 = perimeter_set(w,h)\n    area7_set = perimeter_set(w,h)\n    return area,area2,area3,area4,area5,area6,area7,area3_set,area4_set,area5_set,area6_set,area7_set\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return int(w/3 + h/2)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the fourth side of a left angled triangle.\n    '''\n    return int(w/3 * math.sqrt(3))\ndef allside_rightangle(w,h):\n    '''\n    Write a function to find the length of all sides of a right angled triangle.\n    '''\n    return w + h - otherside_rightangle(w,h)\ndef allside_leftangle(w,h):\n    '''\n    Write a function to find the length of all sides of a left angled triangle.\n    '''\n    return w + h * math.sqrt(3) + otherside_leftangle(w,h)\ndef angle(v1, v2, v3):\n    '''\n    Write a function to find the angle between three vectors.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    v3 = vec(v3)\n    theta = math.acos(v2.dot(v3) / (v1.dot(v3) * v1.norm() * v1.norm()))\n    return theta\ndef lines(v1, v2, v3):\n    '''\n    Write a function to find the length of a line segment.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    v3 = vec(v3)\n    line = (v1 + v2 + v3) * 0.5\n    return line.norm()\ndef dist_line(line, v):\n    '''\n    Write a function to find the length of a line segment.\n    '''\n    line = vec(line)\n    v = vec(v)\n    if line.norm() == 0:\n        return 0\n    else:\n        return line.norm() * line.dot(v) / line.norm()\ndef intersect(A, B):\n    '''\n    Write a function to find the point in A that intersects with B.\n    '''\n    a = A\n    b = B\n    try:\n        while True:\n            a = b\n            b = a - a*(b.dot(a) / a.norm() if a.norm() > 0 else 0)\n            if not b.isZero():\n                return a.cross(b)\n    except ZeroDivisionError:\n        return None\ndef tangent(v):\n    '''\n    Write a function to find the tangent of a vector.\n    '''\n    v = vec(v)\n    if not v.isZero():\n        return v.cross(v)\ndef point_inside_rectangle(point, rect):\n    '''\n    Write a function to check if a point lies within the rectangle defined by the coordinates of two points.\n    '''\n    point = vec(point)\n    rect = vec(rect)\n    return point.cross(rect).dot(point) / (point.dot(point) - rect.dot(point))\ndef find_rectangle(v1, v2, v3):\n    '''\n    Write a function to find the minimal rectangle that encloses the two vectors.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    v3 = vec(v3)\n    if not v1.isZero() and not v2.isZero() and not v3.isZero():\n        return [v1, v2, v3]\n    else:\n        return None\ndef find_ellipse(v1, v2, v3, v4):\n    '''\n    Write a function to find the elliptical section enclosing the two vectors.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    v3 = vec(v3)\n    v4 = vec(v4)\n    if not v1.isZero() and not v2.isZero() and not v3.isZero() and not v4.isZero():\n        return [v1, v2, v3, v4]\n    else:\n        return None\ndef find_rectangle(v1, v2, v3, v4):\n    '''\n    Write a function to find the smallest rectangle that encloses the two vectors.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    v3 = vec(v3)\n    v4 = vec(v4)\n    if not v1.isZero() and not v2.isZero() and not v3.isZero() and not v4.isZero():\n        return [v1, v2, v3, v4]\n    else:\n        return None\ndef find_circle(v1, v2):\n    '''\n    Write a function to find the smallest circle that encloses the two vectors.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    if not v1.isZero() and not v2.isZero():\n        return [v1, v2]\n    else:\n        return None\ndef check_angle(A, B, C, D):\n    '''\n    Write a function to check if the two vectors have a given angle.\n    '''\n    C = vec(C)\n    D = vec(D)\n    return math.acos(C.dot(D) / (C.dot(C) * C.norm() * C.norm()) + B.dot(D) / (B.dot(B) * B.norm()) + A.dot(D) / (A.dot(A) * A.norm() * A.norm()))\ndef check_points(v1, v2, v3, v4):\n    '''\n    Write a function to check if a vector lies within the intersection of two vectors.\n    '''\n    if not v1.isZero() and not v2.isZero() and not v3.isZero() and not v4.isZero():\n        return True\n    else:\n        return False\ndef get_secant_line(p, q, r):\n    '''\n    Write a function to return the point in the equation that evaluates to the secant line.\n    '''\n    p = vec(p)\n    q = vec(q)\n    r = vec(r)\n    if not q.isZero() and not r.isZero():\n        return (p.cross(q) * r.normalize()).cross(q).normalize()\n    else:\n        return None\ndef get_line_parallel(v1, v2):\n    '''\n    Write a function to return the point in the equation that evaluates to the line parallel to v1.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    if not v1.isZero() and not v2.isZero():\n        return (v1.cross(v2) * v2.normalize()).cross(v1).normalize()\n    else:\n        return None\ndef get_line_perpendicular(v1, v2):\n    '''\n    Write a function to return the point in the equation that evaluates to the line perpendicular to v1.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    if not v1.isZero() and not v2.isZero():\n        return (v1.cross(v2) * v1.normalize()).cross(v2).normalize()\n    else:\n        return None\ndef get_line_parallel(v1, v2, v3, v4):\n    '''\n    Write a function to return the point in the equation that evaluates to the line parallel to v1, v2 and v3.\n    '''\n    v1 = vec(v1)\n    v2 = vec(v2)\n    v3 = vec(v3)\n    v4 = vec(v4)\n    if not v1.isZero() and not v2.isZero() and not v3.isZero() and not v4.isZero():\n        return (v1.cross(v2) * v2.normalize()).cross(v1).normalize() * (v3.cross(v4) * v4.normalize()).cross(v3).normalize()\n    else:\n        return None\ndef get_line_perpendicular(v1, v2, v"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def step(h,w):\n        a = h/2\n        b = w/2\n        return a,b\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=a*(a+h/2)/2\n    print(\"The length of the triangle is\",a,\"and the third side is\",c,\"and its area is\",a*c)\n    d=a*(a+h/2)/2\n    e=d+b*(b+h/2)/2\n    print(\"The length of the triangle is\",a,\"and the third side is\",e,\"and its area is\",a*e)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = w*h\n    if (side < 3*h):\n        print ('Your triangle is upside down.')\n    elif (side < 4*h):\n        print ('Your triangle is upside down.')\n    elif (side < 5*h):\n        print ('Your triangle is upside down.')\n    elif (side < 6*h):\n        print ('Your triangle is upside down.')\n    elif (side < 7*h):\n        print ('Your triangle is upside down.')\n    elif (side < 8*h):\n        print ('Your triangle is upside down.')\n    elif (side < 9*h):\n        print ('Your triangle is upside down.')\n    elif (side < 10*h):\n        print ('Your triangle is upside down.')\n    elif (side < 11*h):\n        print ('Your triangle is upside down.')\n    elif (side < 12*h):\n        print ('Your triangle is upside down.')\n    elif (side < 13*h):\n        print ('Your triangle is upside down.')\n    elif (side < 14*h):\n        print ('Your triangle is upside down.')\n    elif (side < 15*h):\n        print ('Your triangle is upside down.')\n    elif (side < 16*h):\n        print ('Your triangle is upside down.')\n    elif (side < 17*h):\n        print ('Your triangle is upside down.')\n    elif (side < 18*h):\n        print ('Your triangle is upside down.')\n    elif (side < 19*h):\n        print ('Your triangle is upside down.')\n    elif (side < 20*h):\n        print ('Your triangle is upside down.')\n    elif (side < 21*h):\n        print ('Your triangle is upside down.')\n    elif (side < 22*h):\n        print ('Your triangle is upside down.')\n    elif (side < 23*h):\n        print ('Your triangle is upside down.')\n    elif (side < 24*h):\n        print ('Your triangle is upside down.')\n    elif (side < 25*h):\n        print ('Your triangle is upside down.')\n    elif (side < 26*h):\n        print ('Your triangle is upside down.')\n    elif (side < 27*h):\n        print ('Your triangle is upside down.')\n    elif (side < 28*h):\n        print ('Your triangle is upside down.')\n    elif (side < 29*h):\n        print ('Your triangle is upside down.')\n    elif (side < 30*h):\n        print ('Your triangle is upside down.')\n    elif (side < 31*h):\n        print ('Your triangle is upside down.')\n    elif (side < 32*h):\n        print ('Your triangle is upside down.')\n    elif (side < 33*h):\n        print ('Your triangle is upside down.')\n    elif (side < 34*h):\n        print ('Your triangle is upside down.')\n    elif (side < 35*h):\n        print ('Your triangle is upside down.')\n    elif (side < 36*h):\n        print ('Your triangle is upside down.')\n    elif (side < 37*h):\n        print ('Your triangle is upside down.')\n    elif (side < 38*h):\n        print ('Your triangle is upside down.')\n    elif (side < 39*h):\n        print ('Your triangle is upside down.')\n    elif (side < 40*h):\n        print ('Your triangle is upside down.')\n    elif (side < 41*h):\n        print ('Your triangle is upside down.')\n    elif (side < 42*h):\n        print ('Your triangle is upside down.')\n    elif (side < 43*h):\n        print ('Your triangle is upside down.')\n    elif (side < 44*h):\n        print ('Your triangle is upside down.')\n    elif (side < 45*h):\n        print ('Your triangle is upside down.')\n    elif (side < 46*h):\n        print ('Your triangle is upside down.')\n    elif (side < 47*h):\n        print ('Your triangle is upside down.')\n    elif (side < 48*h):\n        print ('Your triangle is upside down.')\n    elif (side < 49*h):\n        print ('Your triangle is upside down.')\n    elif (side < 50*h):\n        print ('Your triangle is upside down.')\n    elif (side < 51*h):\n        print ('Your triangle is upside down.')\n    elif (side < 52*h):\n        print ('Your triangle is upside down.')\n    elif (side < 53*h):\n        print ('Your triangle is upside down.')\n    elif (side < 54*h):\n        print ('Your triangle is upside down.')\n    elif (side < 55*h):\n        print ('Your triangle is upside down.')\n    elif (side < 56*h):\n        print ('Your triangle is upside down.')\n    elif (side < 57*h):\n        print ('Your triangle is upside down.')\n    elif (side < 58*h):\n        print ('Your triangle is upside down.')\n    elif (side < 59*h):\n        print ('Your triangle is upside down.')\n    elif (side < 60*h):\n        print ('Your triangle is upside down.')\n    elif (side < 61*h):\n        print ('Your triangle is upside down.')\n    elif (side < 62*h):\n        print ('Your triangle is upside down.')\n    elif (side < 63*h):\n        print ('Your triangle is upside down.')\n    elif (side < 64*h):\n        print ('Your triangle is upside down.')\n    elif (side < 65*h):\n        print ('Your triangle is upside down.')\n    elif (side < 66*h):\n        print ('Your triangle is upside down.')\n    elif (side < 67*h):\n        print ('Your triangle is upside down.')\n    elif (side < 68*h):\n        print ('Your triangle is upside down.')\n    elif (side < 69*h):\n        print ('Your triangle is upside down.')\n    elif (side < 70*h):\n        print ('Your triangle is upside down.')\n    elif (side < 71*h):\n        print ('Your triangle is upside down.')\n    elif (side < 72*h):\n        print ('Your triangle is upside down.')\n    elif (side < 73*h):\n        print ('Your triangle is upside down.')\n    elif (side < 74*h):\n        print ('Your triangle is upside down.')\n    elif (side < 75*h):\n        print ('Your triangle is upside down.')\n    elif (side < 76*h):\n        print ('Your triangle is upside down.')\n    elif (side < 77*h):\n        print ('Your triangle is upside down.')\n    elif (side < 78*h):\n        print ('Your triangle is upside down.')\n    elif (side < 79*h):\n        print ('Your triangle is upside down.')\n    elif (side < 80*h):\n        print ('Your triangle is upside down.')\n    elif (side < 81*h):\n        print ('Your triangle is upside down.')\n    elif (side < 82*h):\n        print ('Your triangle is upside down.')\n    elif (side < 83*h):\n        print ('Your triangle is upside down.')\n    elif (side < 84*h):\n        print ('Your triangle is upside down.')\n    elif (side < 85*h):\n        print ('Your triangle is upside down.')\n    elif (side < 86*h):\n        print ('Your triangle is upside down.')\n    elif (side < 87*h):\n        print ('Your triangle is upside down.')\n    elif (side < 88*h):\n        print ('Your triangle is upside down.')\n    elif (side < 89*h):\n        print ('Your triangle is upside down.')\n    elif (side < 90*h):\n        print ('Your triangle is upside down.')\n    elif (side < 91*h):\n        print ('Your triangle is upside down.')\n    elif (side < 92*h):\n        print ('Your triangle is upside down.')\n    elif (side < 93*h):\n        print ('Your triangle is upside down.')\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if max_val < i:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # return max(listval)\n    # '''\n    # Test your code to make sure you understand how this function works.\n    # '''\n    # #return max(listval)\n    # '''\n    # Write a function that takes an iterable and returns the maximum value in a list.\n    # '''\n    # #return max(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a list of the largest numbers.\n    # '''\n    # #return largest_numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a list of the largest numbers in the order of largest number in the input list.\n    # '''\n    # #return largest_numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns the smallest number in the input list.\n    # '''\n    # #return smallest_number(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns the average of the numbers.\n    # '''\n    # #return average(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns the largest number in the input list.\n    # '''\n    # #return largest_number(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns the smallest number in the input list.\n    # '''\n    # #return smallest_number(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns the average of the numbers.\n    # '''\n    # #return average(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # '''\n    # #return numbers(listval)\n    # '''\n    # Write a function that takes a list of numbers and returns a dictionary of the numbers in the input list with their corresponding names.\n    # "
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i>max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for ele in listval:\n        if ele > maxval:\n            maxval = ele\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for elem in listval:\n        if elem > max_val:\n            max_val = elem\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return 0\n    if listval[0] > listval[-1]:\n        return listval[0]\n    else:\n        return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def check_div(number):\n        '''\n        Function to check if the number is divisible by a given number\n        '''\n        # check if number is divisible by the given number\n        if number % number == 0:\n            return True\n        else:\n            return False\n    \n    # if the number is divisible by all the divisors of it\n    if check_div(number):\n        return number\n    # if the number is divisible by at least one of its divisors\n    else:\n        # if the number is not divisible by any of its divisors\n        for i in range(2, int(number**0.5)+1):\n            if number % i == 0:\n                # if the number is divisible by any of its divisors\n                if check_div(i):\n                    return i\n        return number"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    #This is a recursive function.\n    #This function will only return the sum of the divisors,\n    #but it will not return any values that are divisible by the given number\n    def sum_div(divisors,number):\n        #Check if the given number is divisible by one or another number\n        if number % divisors == 0:\n            return (number,divisors)\n        else:\n            #Check for all possible divisors of the given number\n            for divisor in range(1,divisors+1):\n                #If this is not divisible by the number,\n                #then check if it is divisible by any numbers in the range\n                #of the given number and add it to the sum\n                if number % divisor == 0:\n                    return (number,divisors,divisor)\n    \n    #Call the function\n    return sum_div(4,number)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    for div in range(1, number):\n        if number % div == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        raise Exception('Negative numbers not allowed')\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    return number * sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    if number < 2:\n        return None\n    \n    elif number == 2:\n        return 2\n    \n    else:\n        for i in range(2, int(math.sqrt(number) + 1)):\n            if number % i == 0:\n                return (int(number/i))\n                break\n        return None\n        \n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # recur on each number in the range\n    divisors = []\n    for num in range(1, number):\n        if number % num == 0:\n            divisors.append(num)\n    \n    # return sum of all divisors\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for divisor in range(1, int(number / 2) + 1):\n        if number % divisor == 0:\n            divisors.append(divisor)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversionCount = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inversionCount += 1\n    return inversionCount\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    while (j < len(arr)): \n        if (arr[j] > arr[i]): \n            j = j + 1\n        else: \n            count = count + 1\n        i = i + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Using the concept of inversions in an array, we can count inversions in an array\n    # Problem 1\n    # write a function to count inversions in an array\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j] and arr[i] < arr[j]:\n                Inv_Count += 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(0, len(arr)): \n        for j in range(i, len(arr)): \n            if arr[j] < arr[i]: \n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += 1\n    print(\"The Number of inversions is\", inv_count) \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Store count as a python variable \n    #so that it can be accessed\n    count=0\n    # loop over arr\n    for i in range(len(arr)):\n        for j in range(0,i):\n            # if value at i is less than value at j\n            # then swap it\n            if arr[j]<arr[i]:\n                arr[j],arr[i]=arr[i],arr[j]\n                count+=1\n                #if count is equal to n then return \n                if count==len(arr):\n                    return count\n                \n    #if count is greater than or equal to 0 then return 0\n    # if count is less than or equal to n then return 0\n    return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return sum(inversions(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None or list1 == []:\n        return []\n    else:\n        return list(flatten_list(list1[0])) + flatten_list(list1[1:])\n    \ndef partition(lst, p):\n    '''\n    Write a function to partition a given list.\n    '''\n    # Heap-sort the list to have it in order\n    def heapsort(lst):\n        heap = []\n        for i in lst:\n            heappush(heap, -i)\n        return heap\n    # Sort the list in the heap\n    def sort(lst):\n        heap = heapsort(lst)\n        # Find the first element, which is the pivot\n        pivot = heap.pop()\n        # Push it to the heap\n        while len(heap) > 1:\n            # Pop elements of the heap based on the pivot value\n            temp = heap[0]\n            heap[0] = heap[len(heap)-1]\n            heap[len(heap)-1] = temp\n            # Sort the elements in the heap in the reverse order\n            # (so that the smallest is at the top)\n            heap = heap[::-1]\n        # Put the pivot at the top of the heap\n        heap[0] = pivot\n        # return the list\n        return heap\n    # Sort the list by popping it to get the smallest\n    return sort(lst)\n    \ndef partition_two(lst):\n    '''\n    Write a function to partition a given list.\n    '''\n    # Heap-sort the list to have it in order\n    def heapsort(lst):\n        heap = []\n        for i in lst:\n            heappush(heap, -i)\n        return heap\n    # Sort the list in the heap\n    def sort(lst):\n        heap = heapsort(lst)\n        # Find the first element, which is the pivot\n        pivot = heap.pop()\n        # Push it to the heap\n        while len(heap) > 1:\n            # Pop elements of the heap based on the pivot value\n            temp = heap[0]\n            heap[0] = heap[len(heap)-1]\n            heap[len(heap)-1] = temp\n            # Sort the elements in the heap in the reverse order\n            # (so that the smallest is at the top)\n            heap = heap[::-1]\n        # Put the pivot at the top of the heap\n        heap[0] = pivot\n        # return the list\n        return heap\n    # Sort the list by popping it to get the smallest\n    return sort(lst)\n    \ndef power(a,n):\n    '''\n    Write a function to compute the value of n! for a non-negative integer n.\n    '''\n    # HACK The only problem with this is the input\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    # Find the number of ways to divide n!\n    # If a is too small, the number of ways\n    # will not exist, but if a is too large\n    # the number of ways will not exist,\n    # so we divide this number by the answer\n    # and then add one to the answer\n    # (as a safety net)\n    ways = power(a,n//2)\n    if n % 2:\n        ways = ways + 1\n    return ways\n    \ndef power_method(n):\n    '''\n    Write a power method to find the\n    number of ways to divide n\n    '''\n    # If n is very small, return 1\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    # The number of ways\n    ways = power_method(n//2)\n    if n % 2:\n        ways = ways + 1\n    return ways\n    \ndef choose(lst):\n    '''\n    Write a function to get the nth element of a\n    list.\n    '''\n    # n = lst.index(n)\n    # return lst[n]\n    return lst[-1]\n    \ndef search(lst,n):\n    '''\n    Write a function to search a given\n    list for the nth element.\n    '''\n    if lst == None or len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        if lst[0] > n:\n            return lst[0]\n        else:\n            return search(lst[1:],n)\n    else:\n        if n == 0:\n            return lst[0]\n        elif n == 1:\n            return lst[0]\n        elif n == 2:\n            if lst[0] > n:\n                return lst[0]\n            else:\n                return search(lst[1:],n)\n        else:\n            if lst[0] > n:\n                return search(lst[1:],n-1)\n            else:\n                return search(lst[1:],n-1) + search(lst[1:],n-2)\n    return None\n    \ndef find_longest_sub_list(lst):\n    '''\n    Write a function to find the longest\n    sublist of a given list.\n    '''\n    # Set up two pointers, one to\n    # handle the end of the list,\n    # and the other to the\n    # first element\n    end_ptr = 0\n    start_ptr = 0\n    # Set the longest sublist\n    # to 0\n    longest_sublist = 0\n    # Create a hash table\n    # to store all the elements\n    hash_table = {}\n    # Loop through the list\n    # (i,j)\n    for i in range(len(lst)):\n        # loop through the elements\n        # in the list in the current\n        # index from j to i\n        for j in range(i,len(lst)):\n            # If the current element\n            # is not in the hash table\n            # then it is not in the sublist\n            if lst[i] not in hash_table:\n                hash_table[lst[i]] = 1\n            else:\n                # If the element is already\n                # in the sublist, increment the\n                # count and update the index\n                # pointer\n                if lst[i] in hash_table:\n                    hash_table[lst[i]] += 1\n                    end_ptr = max(end_ptr,i+1)\n                else:\n                    # If the element is not\n                    # in the sublist, then it is\n                    # not in the sublist\n                    hash_table[lst[i]] = 1\n                    start_ptr = i+1\n    # Return the start index, the end index\n    # of the sublist, and the length of the\n    # sublist\n    return (start_ptr,end_ptr,len(lst))\n    \ndef map_sum(lst):\n    '''\n    Write a function to compute the sum of a given list.\n    '''\n    # initialize a sum\n    sum = 0\n    # loop through the list and add each\n    # element value to the sum\n    for i in lst:\n        sum += i\n    # return the sum\n    return sum\n    \ndef compress(lst):\n    '''\n    Write a function to compress a given list.\n    '''\n    # lst = lst[1:]\n    # if len(lst) == 1:\n    #     return lst\n    # else:\n    #     return lst[0:len(lst)-1] + compress(lst[len(lst)-1:])\n    \n    # if lst == None:\n    #     return None\n    # if lst == []:\n    #     return [1]\n    # if len(lst) == 1:\n    #     return lst\n    # else:\n    #     return [lst[0]] + compress(lst[1:])\n    \n    # while lst!= []:\n    #     sum = 0\n    #     for i in lst:\n    #         sum += i\n    #     lst.remove(sum)\n    #     if lst == []:\n    #     "
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for element in list1:\n        if type(element)!= list:\n            flat_list.append(element)\n        else:\n            flat_list.extend(flatten_list(element))\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for i in list1:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if type(list1)!= list:\n        return list1\n    if type(list1[0])!= list:\n        return list1\n    return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item, list):\n            list1 = flatten_list(item)\n        else:\n            list1.append(item)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #remove square brackets\n    list1=list1.replace(\"[\", \"\")\n    list1=list1.replace(\"]\", \"\")\n    #convert string to list\n    list2=list1.split(\",\")\n    #reversing list\n    list2.reverse()\n    #return list of lists\n    return list2"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    temp = []\n    for element in list1:\n        if isinstance(element, list):\n            temp.extend(flatten_list(element))\n        else:\n            temp.append(element)\n    return temp\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1:\n        for i in range(len(list1)):\n            if type(list1[i]) == list:\n                flatten_list(list1[i])\n            else:\n                list1[i] = flatten_list(list1[i])\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_of_lists = []\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(lambda: 0)\n    for (x, y) in stdata:\n        max_agg[x] = max(max_agg[x], y)\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #first store the value of all the items in the tuple\n    #check the tuple and store the value of the item\n    #calculate the aggregated value of the tuple and store it in a new tuple\n    #return this value\n    aggregate = stdata[0]\n    for item in stdata:\n        if item[1] > aggregate[1]:\n            aggregate = item\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # normalize the data\n    data = sorted(stdata, key=lambda x: x[0])\n    # determine the max_aggregate and max_agg_count\n    max_aggregate = max(data, key=lambda x: x[1])[1]\n    max_agg_count = data.index(max_aggregate) + 1\n    return max_agg_count, max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def agg(x):\n        return max(x)\n    return agg, lambda x: max(x)\ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum of the list of tuples.\n    '''\n    def agg(x):\n        return sum(x)\n    return agg, lambda x: sum(x)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(sorted(stdata, key=lambda tup: tup[0]))[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    max_aggregate = defaultdict(int)\n    for item in stdata:\n        if len(item) > 0:\n            max_aggregate[item[0]] += 1\n        else:\n            max_aggregate[item[0]] = 1\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata_merged = list()\n    for element in stdata:\n        if element[0] not in stdata_merged:\n            stdata_merged.append(element)\n    return max(stdata_merged)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = 0\n    for s in stdata:\n        res = max(res, s[1])\n    return res\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = None\n    for i in stdata:\n        if result is None:\n            result = 0\n        else:\n            result += i[1]\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouper_size = stdata[0][0] # the grouper size, for example, 14\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_helper(n, temp_sum):\n        if n == 1:\n            return 1\n        \n        count_binary_seq_helper(n-1, temp_sum*2)\n        temp_sum += n-1\n        \n        return temp_sum\n        \n    temp_sum = 0\n    count_binary_seq(n)\n    return temp_sum\n    \nn = int(input())\nprint(count_binary_seq_helper(n, 0)"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += (bin(i).count('1'))\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(n):\n        ans = ans + 2**i\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def binary_seq_sum(n, m):\n        if m == n:\n            print(m)\n            return\n        for i in range(1, n + 1):\n            if n - i >= 0:\n                binary_seq_sum(n - i, m + 1)\n            binary_seq_sum(n, m + 1)\n            print(i)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 1: return n\n    binary_seq = bin(n)\n    count = 0\n    for i in range(len(binary_seq)-1):\n        if binary_seq[i:i+2] == '101':\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq2(n): \n        return bin(n)[2:].count('1')\n    \n    # Return first 2n bits in each binary string \n    def bits_count(n, k): \n        return bin(n)[2:].count('1', k) \n    \n    # Return the sum of the first 2n bits of the binary string \n    def sum_binary_count(n, k): \n        return bin(n)[2:].count('1', k) \n    \n    # Initialize count array \n    count = [0 for i in range(n)] \n    \n    # Compute count of all binary sequence \n    for i in range(n): \n        count[i] = count_binary_seq(i) \n        \n    # Sum all the first 2n bits \n    sum = 0\n    \n    # Compute sum of the first 2n bits \n    for i in range(n): \n        sum = sum + count[i] \n        \n    # Calculate the remainder \n    rem = sum % 2 \n    \n    # Compute count of all binary sequence \n    for i in range(n): \n        if count[i] > rem: \n            count[i] = count_binary_seq2(i) \n    \n    # Return the sum of the first 2n bits \n    return sum \n    "
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    binary_sum = 0\n    for i in range(n):\n        binary_sum += (1 << i)\n    return binary_sum\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    c = 0\n    for i in range(2, n + 1):\n        c += count_binary_seq(n - i)\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_Helper(n, seq):\n        if len(seq) < 2:\n            return 0\n        elif len(seq) == 2:\n            return 1 if seq[0] == seq[-1] else 0\n        else:\n            left = count_binary_seq_Helper(n - 1, seq[:-1])\n            right = count_binary_seq_Helper(n - 1, seq[1:])\n            return left + right\n    if n < 2:\n        return 0\n    return count_binary_seq_Helper(n, [0] * n)\nprint(count_binary_seq(3)) # Should be 8\nprint(count_binary_seq(2)) # Should be 2\nprint(count_binary_seq(1)) # Should be 0\nprint(count_binary_seq(4)) # Should be 4\nprint(count_binary_seq(9)) # Should be 1"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # iterative way \n    # n=3, bit_count =2\n    # n=2, bit_count = 1\n    # n=1, bit_count = 0 \n    bit_count = 0\n    for n in range(1,n):\n        temp=bin(n)\n        temp=temp[2:]\n        for i in range(len(temp)-1,-1,-1):\n            if temp[i] == '1':\n                bit_count += 1\n    return bit_count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    n = len(d)\n    return int(math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 0\n    else:\n        return 1 + max(dict_depth(k) for k in d.keys())\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) is dict:\n        depth = dict_depth(d.keys()) + 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d.keys():\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d, depth=0):\n        depth += 1\n        print(depth)\n        for k, v in d.items():\n            depth = depth + depth(v, depth)\n        return depth\n    depth(d)\n    \n    # Get depth of dictionary by calling function depth\n    # depth(d)\n    \n    # Create a function named sum_dict that accepts a dictionary and returns\n    # the sum of all the items contained in the dictionary.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return(d['n'])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dlist(d):\n        if not d:\n            return 0\n        return dlist(d[0]) + 1\n    depth = dlist(d)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d:\n        return 1 + dict_depth(d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        depth += 1\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index_ = len(ranges)-1\n    if(index_ == 0):\n        return arr[index]\n    else :\n        return find_Element(arr,ranges[index_],rotations[index_],index_)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < len(arr)-1 :\n        #search the element at a given index\n        for i in range(len(arr)-1) :\n            if arr[i+1] <= index :\n                #if element at index is greater than index then update the current index to the next index and continue \n                index = arr[i+1]\n        return arr[index]\n    else :\n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (arr == [] or len(arr) == 0) :\n        return False\n    for i in range(len(arr)) :\n        if arr[i] in ranges :\n            return i\n        else :\n            index = index\n            while index - len(arr) <= len(ranges) :\n                index = index - len(arr)\n                if arr[index] in ranges :\n                    break\n    return False\n        \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(ranges)-1) : \n        if (arr[ranges[i][0]] == arr[ranges[i][1]]) :\n            return arr[ranges[i][1]]\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        if ranges[index] <= arr[i] <= ranges[index + 1]:\n            return arr[i]\n    return 'ERROR'\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    rotations = len(ranges) - rotations\n    index = index - rotations\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(ranges[0][0] <= index <= ranges[0][1] and rotations[0] <= index <= rotations[1]):\n        return arr[ranges[0][0]:ranges[0][1]]\n    elif(ranges[1][0] <= index <= ranges[1][1] and rotations[0] <= index <= rotations[1]):\n        return arr[ranges[1][0]:ranges[1][1]]\n    elif(ranges[0][0] <= index <= ranges[1][1] and rotations[1] <= index <= rotations[0]):\n        return arr[ranges[1][0]:ranges[1][1]]\n    elif(ranges[0][0] <= index <= ranges[1][1] and rotations[0] <= index <= rotations[1]):\n        return arr[ranges[0][0]:ranges[1][1]]\n    elif(ranges[0][0] <= index <= ranges[1][1] and rotations[1] <= index <= rotations[0]):\n        return arr[ranges[1][0]:ranges[0][1]]\n    else:\n        return None\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for rotation in rotations : \n        for r in ranges : \n            if rotation == 0 and r == index : \n                return arr[index]\n            index += r\n        index +=1\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        for j in range(len(arr)) :\n            if arr[i] == arr[j] :\n                rotations[i] += 1\n            else :\n                break\n        if i == len(arr)-1 :\n            for k in range(len(ranges)) :\n                if ranges[k][1] < i :\n                    break\n                else :\n                    index[k] = -1\n    return index\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if not words:\n        return None, None\n    start_word = words[0]\n    if not start_word:\n        return None, None\n    for word in words:\n        if word[0]!= start_word[0]:\n            return None, None\n    return start_word, words[1:]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    #Get a list of words from the input\n    #Split input into a list of words, using a regex to find pattern 'p'\n    pattern = re.compile(r'(?<=^)(?=.*p)(?!.*(?=.*p))')\n    match_list = pattern.findall(words)\n    \n    return match_list\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_word = list(filter(lambda word: word[0].lower() == 'p', words))\n    if p_word:\n        return p_word[0]\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word = None\n    for w in words:\n        if w.startswith(\"p\"):\n            word = w\n            break\n    return word\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return(i)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^([a-z]\\w*)\\w*$'\n    res = []\n    for word in words:\n        if re.match(pattern, word):\n            res.append(word)\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    s=list()\n    for i in words:\n        if i[0]=='p':\n            s.append(i)\n    return s\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if not words:\n        return None\n    elif len(words) == 1:\n        return words[0]\n    else:\n        p = words[0]\n        for word in words[1:]:\n            if word[0] == 'p':\n                return p, word\n        return p, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #--- START CODE HERE ---#\n    pass\n    #--- END CODE HERE ---#\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == \"p\":\n            return i, \"p\"\n    return None, \"n/a\"\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    for i in words:\n        if i[-1] == \"p\":\n            return i, \"p\"\n    return None, \"n/a\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return a[k]\n    if(index < n):\n        temp = a[index]\n        for i in range(index, n):\n            a[i] += temp\n            a[i] = max(a[i], a[i+1] + k)\n        return a[k]\n    temp = a[index]\n    for i in range(index, n):\n        a[i] += temp\n        a[i] = max(a[i], a[i+1] + k)\n    return a[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if k == 0:\n        return a[n - 1]\n    else:\n        ans = -1\n        if k < 0:\n            return 0\n        \n        for i in range(n - k):\n            ans = max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k - 1))\n        return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[0]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq2(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index until ith element and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq2(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq2(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq3(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq3(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq3(a, n, index + 1, k)\n    \n    \n    \ndef max_sum_increasing_subseq4(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq4(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq4(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq5(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq5(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq5(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq6(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq6(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq6(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq7(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq7(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq7(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq8(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq8(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq8(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq9(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq9(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq9(a, n, index + 1, k)\n    \n    \ndef max_sum_increasing_subseq10(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till index till ith index and also including a given kth element which is after i and i.e., k > i.\n    '''\n    \n    if index == n: # We have reached the end of the array\n        return a[index]\n    if a[index] > k: # A subsequence can only be obtained if the current element is less than the kth element\n        return a[index] + max_sum_increasing_subseq10(a, n, index + 1, k)\n    else: # We can get this subsequence by adding a value at the end of the array\n        return a[index] + max_sum_increasing_subseq10(a, n, index + 1, k)\n    \n    \n    \n    \n    \ndef max_sum_increasing_su"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return sum(a)\n    if k >= index:\n        return max_sum_increasing_subseq(a, n, index, k) + sum(a[index:])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[index]\n    if index < n - 1:\n        # swap and swap indexes\n        a[index], a[index + 1] = a[index + 1], a[index]\n        # increment the remaining sum\n        a[index] += a[index + 1]\n        # swap indexes\n        a[index], a[index + 1] = a[index + 1], a[index]\n        # increment the remaining sum\n        a[index] += a[index + 1]\n        # add the result\n        res = max_sum_increasing_subseq(a, n, index + 1, k)\n        # swap indexes\n        a[index], a[index + 1] = a[index + 1], a[index]\n        # increment the remaining sum\n        a[index] += a[index + 1]\n        # return result\n        return res\n    return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return a[index]\n    if(k > index):\n        max_sum_increasing_subseq(a, n, index+1, k)\n    if(k == index+1):\n        max_sum_increasing_subseq(a, n, index+1, k)\n    if(k < index+1):\n        #print(k, index, index+1)\n        #print(index+1, index)\n        sum = a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n        if(sum > a[index]):\n            return sum\n        else:\n            return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index < n):\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        if (k == 0):\n            return a[index]\n        else:\n            return max(max_sum_increasing_subseq(a, n, index, k-1), a[index]+k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Add 0 to each list\n    # k is for the given index\n    # index is for the given prefix\n    # index + k is the start of the prefix\n    # Index is equal to the end of the list.\n    # Index is equal to the end of the list.\n    # index >= 0\n    # Returns the maximum sum of increasing subsequence\n    if n == 0 or (index == 0 and k == 0):\n        return 0\n    if k > n - index:\n        return max(0, a[index])\n    else:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k - index)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if index == n and k == 0:\n        return a[n]\n    # if we find the kth element that after i, we are not limited so return 0\n    if k == n-index:\n        return 0\n    \n    # if k < n-i then we can simply take the prefix before the kth element as the prefix\n    if index < n-k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    # if the kth element of the prefix is greater than the kth element of the prefix before it\n    # then we can simply take the prefix before the kth element as the prefix\n    else:\n        return max_sum_increasing_subseq(a, n, index, k-index-1)\n    \ndef max_sum_increasing_subseq_first_occuring(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == n:\n        return a[n]\n    # if we find the kth element that after i, we are not limited so return 0\n    if k == n-index:\n        return 0\n    \n    # if k < n-i then we can simply take the prefix before the kth element as the prefix\n    if index < n-k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    # if the kth element of the prefix is greater than the kth element of the prefix before it\n    # then we can simply take the prefix before the kth element as the prefix\n    else:\n        return max_sum_increasing_subseq(a, n, index, k-index-1)\n    \ndef max_sum_increasing_subseq_second_occuring(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == n:\n        return a[n]\n    # if we find the kth element that after i, we are not limited so return 0\n    if k == n-index:\n        return 0\n    \n    # if k < n-i then we can simply take the prefix before the kth element as the prefix\n    if index < n-k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    # if the kth element of the prefix is greater than the kth element of the prefix before it\n    # then we can simply take the prefix before the kth element as the prefix\n    else:\n        return max_sum_increasing_subseq(a, n, index, k-index-1)\n    \ndef max_sum_increasing_subseq_last_occuring(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == n:\n        return a[n]\n    # if we find the kth element that after i, we are not limited so return 0\n    if k == n-index:\n        return 0\n    \n    # if k < n-i then we can simply take the prefix before the kth element as the prefix\n    if index < n-k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    # if the kth element of the prefix is greater than the kth element of the prefix before it\n    # then we can simply take the prefix before the kth element as the prefix\n    else:\n        return max_sum_increasing_subseq(a, n, index, k-index-1)\n    \ndef max_sum_increasing_subseq_last_occuring_second_occuring(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == n:\n        return a[n]\n    # if we find the kth element that after i, we are not limited so return 0\n    if k == n-index:\n        return 0\n    \n    # if k < n-i then we can simply take the prefix before the kth element as the prefix\n    if index < n-k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    # if the kth element of the prefix is greater than the kth element of the prefix before it\n    # then we can simply take the prefix before the kth element as the prefix\n    else:\n        return max_sum_increasing_subseq(a, n, index, k-index-1)\n    \ndef max_sum_increasing_subseq_last_occuring_second_occuring_first_occuring(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == n:\n        return a[n]\n    # if we find the kth element that after i, we are not limited so return 0\n    if k == n-index:\n        return 0\n    \n    # if k < n-i then we can simply take the prefix before the kth element as the prefix\n    if index < n-k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    # if the kth element of the prefix is greater than the kth element of the prefix before it\n    # then we can simply take the prefix before the kth element as the prefix\n    else:\n        return max_sum_increasing_subseq(a, n, index, k-index-1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = ''\n    for i in range(n):\n        col += '_'\n    return m+n+str(tuplex)+col\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    if len(tuplex[m])<len(tuplex[n]):\n        colon.append(tuplex[m])\n        colon.append(tuplex[n])\n    else:\n        colon.append(tuplex[n])\n        colon.append(tuplex[m])\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    f = '{'\n    for i in range(len(tuplex)):\n        if i==0:\n            f += tuplex[i]\n            f += ','\n        elif i==1:\n            f += m\n            f += ','\n        else:\n            f += str(tuplex[i])+','\n    f += '}'\n    return f\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_string = ''\n    for i in range(len(tuplex)):\n        if m+i < n:\n            tuplex_string += str(tuplex[i]) + ':'\n    return tuplex_string\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    return ''.join(str(tuplex[i:i+m]).replace('_','').upper() for i in range(0,len(tuplex),m))\n    \ndef tuplex_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuplex of a tuple.\n    '''\n    \n    return (tuplex[0:m],tuplex[m:n],tuplex[n:])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (m[n] if m[n]<n else m[n],n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= n+1:\n        raise IndexError(\"List should be of length n+1.\")\n    return tuplex[m:n]\n    \ndef colon_tuple(tuplex, m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    return tuplex[m:n]\n    \ndef get_colon(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    return colon[m:n]\n    \ndef get_colon_from_nested_list(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    return colon[m:n]\n    \ndef reverse_colon(colon, m,n):\n    '''\n    Write a function to reverse a tuple of lists.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    return colon\n    \ndef get_colon_from_nested_list_reverse(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    return colon[m:n]\n    \ndef get_colon_from_nested_list_reversed_reversed_reversed_reversed(colon, m,n):\n    '''\n    Write a function to get a tuple from the list of tuples and return it.\n    '''\n    if len(colon)!= m+1:\n        raise IndexError(\"List should be of length m+1.\")\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse()\n    colon.reverse("
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    m=m-1\n    n=n-1\n    lst=[]\n    if m>0:\n        lst.append(tuplex[m])\n        m=m-1\n    if n>0:\n        lst.append(tuplex[n])\n        n=n-1\n    return lst\n    \ndef permutations(tuplex):\n    '''\n    Write a function to get a permutation of a tuple.\n    '''\n    m=len(tuplex)\n    lst=[]\n    for i in range(1,m):\n        lst.append(tuplex[i])\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_count=0\n    for i in tuplex:\n        if i=='(' or i=='{':\n            colon_count=colon_count+1\n        elif i==')':\n            colon_count=colon_count-1\n        elif i=='}':\n            colon_count=colon_count+1\n        else:\n            colon_count=colon_count-1\n        if colon_count==0:\n            break\n    return tuplex[:colon_count]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    n = len(nums1)\n    \n    # Sort the given lists into ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # For a given number of elements, calculate the product of the specified number of factors.\n    for i in range(N):\n        # Calculate the product of the two lists, then count all products of the two lists to calculate the result.\n        product = 1\n        for j in range(n):\n            product = product * nums1[j] * nums2[j]\n        # Return the result as a string.\n        return str(product)\n    \n    # If the number of elements in the two lists is greater than the number of elements in the product.\n    return \"No product\"\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    index = N-1\n    i = index\n    j = index\n    prod = []\n    while i >= 0 and j >= 0:\n        prod.append(nums1[i]*nums2[j])\n        i -= 1\n        j -= 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    i, j = 0, 0\n    res = []\n    factors = []\n    while i < N:\n        f = nums1[i] * nums2[j]\n        factors.append(f)\n        i += 1\n        j += 1\n        if j == N:\n            j = 0\n            i += 1\n    while j < N:\n        f = nums1[i] * nums2[j]\n        factors.append(f)\n        j += 1\n        i += 1\n    return max(factors)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    N=N+1\n    result=[]\n    # get max of nums1 and nums2\n    max_num1 = max(nums1)\n    max_num2 = max(nums2)\n    # create matrix to hold the results\n    result_matrix = []\n    for i in range(0, N):\n        result_matrix.append([])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #taking the maximum number of products that the lists could contain\n    \n    max_prod=0\n    factor=0\n    \n    #take the product of the array of lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (nums1[i]*nums2[j]>max_prod):\n                max_prod=nums1[i]*nums2[j]\n                factor=j\n    return factor\n    \ndef product_of_mul(nums1, nums2, N):\n    '''\n    Write a function to find the product of all the multiples of num1 in num2.\n    '''\n    prod=1\n    for i in range(2,N):\n        prod=prod*i\n    return prod\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    factors = [0] * N\n    \n    for i in range(1, N):\n        for j in range(i):\n            if nums1[j] < nums2[i]:\n                factors[i] += 1\n                break\n    \n    result = []\n    for i in range(0, N, 2):\n        result.append(nums1[i] * nums2[i])\n        \n    return result\n    "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums = []\n    for i in range(N):\n        nums.append([nums1[i], nums2[i]])\n    nums.sort(key=lambda x: x[0])\n    t = [nums[0][0], nums[0][1]]\n    for i in range(1, N):\n        if nums[i][0] < t[0]:\n            t = [nums[i][0], nums[i][1]]\n            \n    for i in range(N):\n        if nums[i][1] > t[1]:\n            t = [nums[i][0], nums[i][1]]\n            \n    return t\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # find the largest product, using divide and conquer\n    \n    # algorithm:\n    #     [1, 2, 3, 4, 5, 6]\n    #     |\n    #     [1, 1, 1, 2, 2, 2]\n    #     |\n    #     [1, 1, 1, 1, 2, 2]\n    #     |\n    #     [1, 1, 1, 1, 1, 1]\n    #     |\n    #     [1, 1, 1, 1, 1, 1]\n    #     |\n    #     [1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the largest product from both the lists\n    n1 = len(nums1)\n    n2 = len(nums2)\n    l = []\n    l2 = []\n    for i in range(n1):\n        for j in range(n2):\n            if (nums1[i]*nums2[j]) > l:\n                l = nums1[i]*nums2[j]\n    for i in range(n1):\n        for j in range(n2):\n            if (l1*nums1[i]*nums2[j]) > l2:\n                l2 = l1*nums1[i]*nums2[j]\n    print(\"The largest product of %d factors of %d is %d\" %(n1,n2,l))\n    print(\"The largest product of %d factors of %d is %d\" %(n1,n2,l2))\n    "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Size of lists must be equal')\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return b\n    elif b > a:\n        return a\n    elif a == b:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(a)\n    else:\n        print(b)\n    return\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # Your code here\n    return a if a>b else b\n    \nprint(maximum(10,10))\nprint(maximum(10,20))\nprint(maximum(10,20,30))\nprint(maximum(10,20,30,40,50,60))"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a if a > b else b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum=a\n    if b>a:\n        maximum=b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    max_num = 0\n    while a>0:\n        digit = a%10\n        if max_num<digit:\n            max_num=digit\n        a=a//10\n    return max_num\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = list(str1)\n    str_list_tuple = []\n    for i in range(len(str_list)):\n        str_list_tuple.append(str_list[i])\n    return tuple(str_list_tuple)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # create a tuple\n    result = ()\n    # split string into parts\n    result = tuple(str1.split(\",\"))\n    # return the tuple\n    return result\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list = []\n    for x in str1:\n        list.append(x)\n    return tuple(list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_list = []\n    for x in str1:\n        my_list.append(x)\n    return tuple(my_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_tuple = []\n    for i in str1:\n        char_tuple.append(i)\n    return tuple(char_tuple)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # create an empty list\n    tuple1 = []\n    \n    # loop through string\n    for char in str1:\n        # if char is a space\n        if char == \" \":\n            # add to the tuple\n            tuple1.append(\" \")\n            # remove the space from the string\n            str1 = str1[:-1]\n            continue\n        # if char is a bracket\n        if char == \"(\":\n            # add to the tuple\n            tuple1.append(\")\")\n            # remove the bracket\n            str1 = str1[:-1]\n            continue\n        # if char is a closing bracket\n        if char == \")\":\n            # remove the closing bracket\n            str1 = str1[:-1]\n            continue\n        # if char is a opening bracket\n        if char == \"]\":\n            # add to the tuple\n            tuple1.append(\"]\")\n            # remove the opening bracket\n            str1 = str1[:-1]\n            continue\n        # if char is a digit\n        if char.isdigit():\n            # add to the tuple\n            tuple1.append(int(char))\n            # remove the digit\n            str1 = str1[:-1]\n            continue\n        # if char is a punctuation\n        if char in string.punctuation:\n            # add to the tuple\n            tuple1.append(char)\n            # remove the punctuation\n            str1 = str1[:-1]\n            continue\n        # if char is a punctuation\n        else:\n            # add to the tuple\n            tuple1.append(char)\n            # remove the character\n            str1 = str1[:-1]\n            continue\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"\\nBinary Number {} is set to the bit {} in the least significant bit\".format(n, n & 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # insert the binary string into a string\n    n_str = bin(n).replace(\"0b\", \"\").zfill(8)\n    # get the binary string\n    left_most_unset_bit = n_str[7]\n    # swap the binary string with '0'\n    left_most_unset_bit = '0' + left_most_unset_bit\n    # convert binary string to string\n    string = n_str[:7] + left_most_unset_bit + n_str[8:]\n    # return the string\n    return string\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & 0xFF\n    return n | 0x01\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (1 << n) - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_unset(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n        \ndef get_bit_left_most_set(n): \n    '''\n    Write a python function to get the left most set bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n        \ndef get_bit_right_most_unset(n): \n    '''\n    Write a python function to get the right most unset bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_right_most_set(n): \n    '''\n    Write a python function to get the right most set bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n        \ndef get_bit_right_most_set_and_right_most_set(n): \n    '''\n    Write a python function to get the right most unset bit and the\n    right most set bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_set_and_right_most_set(n): \n    '''\n    Write a python function to get the left most unset bit and the\n    right most set bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_set_and_right_most_set_and_right_most_set(n): \n    '''\n    Write a python function to get the left most unset bit and the\n    left most set bit and the right most set bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_unset_and_right_most_set(n): \n    '''\n    Write a python function to get the left most unset bit and the\n    left most set bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_unset_and_right_most_set_and_right_most_set(n): \n    '''\n    Write a python function to get the left most unset bit and the\n    left most set bit and the left most set bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_unset_and_right_most_set_and_right_most_set_and_right_most_set(n): \n    '''\n    Write a python function to get the left most unset bit and the\n    left most set bit and the left most set bit and the left most set\n    bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_unset_and_right_most_set_and_right_most_set_and_right_most_set_and_right_most_set(n): \n    '''\n    Write a python function to get the left most unset bit and the\n    left most set bit and the left most set bit and the left most set\n    bit.\n    '''\n    i = 0\n    while (i < n):\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        if (n & 1) == 0:\n            n = n >> 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return n \n    \ndef get_bit_left_most_unset_and_right_most_set_and_right_most_set_and_right_most_set_and_right_most_set_and_right_most_set(n): \n    '''\n    Write a python function to get the left most unset bit and the\n    left most set bit and the left most set bit and the left most set\n    bit.\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = n >> 1\n    if n & 1 == 1:\n        return (1 << i) | 1\n    else:\n        return (1 << i) | 0\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = int(n)\n    if n <= 1:\n        return n\n    result = 0\n    while n:\n        result |= (1 << n)\n        n -= 1\n    return result\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    from_number = n % 2\n    if from_number == 0:\n        return 1\n    else:\n        return 0\n    \ndef add_bits(n, length):\n    '''\n    Write a python function to add bits to a number n in 0-1.\n    '''\n    if n < 0 or n > 255:\n        raise Exception(\"Value out of range\")\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n > 0: \n        if n & 1: \n            n >>= 1\n        else: \n            n &= 0xFF\n            \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Only do this if a bit is not set.\n    if n!= 0:\n        # For each bit in the binary representation\n        for bit in format(n, 'b'):\n            # If the bit is set\n            if bit == '1':\n                # Set the bit in the most-significant bit\n                bit = '0'\n            # If the bit is set\n            elif bit == '0':\n                # Set the bit in the least-significant bit\n                bit = '1'\n            # If the bit is unset\n            else:\n                # If the bit is unset, leave it alone\n                bit = '0'\n        # Convert the most-significant bit to a string\n        bit = bit.zfill(8)\n        # And add it to the string\n        n += int(bit, 2)\n    # Return the number\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #We start out by defining the variables\n    #r and h are the radii of the ends of the cone\n    #Then we solve for the volume of the cone\n    #The volume of the cone should be the sum of the radii\n    #That is, the volume of a cone with an area of 1.00 times the \n    #radius of the surface.\n    #\n    #r and h are the radii of the ends of the cone\n    #\n    #Write your code here\n    return (2*math.pi*r*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    vol = (math.pi * r**3) * (1 - (h/2))\n    print(vol)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 0.5*(h*r*math.pi)**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*math.pi*(2*h)**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*math.pi*r*h*math.pow(math.tan(math.radians(60)),3)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3)*(math.pi*(math.pow(r,2)+2*math.pow(r,2)+2*math.pow(r,2)))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h**2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r**2*h\ndef volume_cone_v2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2*r*h\ndef volume_cylinder_v2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2*r*h\ndef volume_cone_v3(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h\ndef volume_cylinder_v3(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h\ndef volume_cone_v4(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*math.pi*r*h\ndef volume_cylinder_v4(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 4*math.pi*r*h\ndef volume_cone_v5(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h\ndef volume_cylinder_v5(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h\ndef volume_cone_v6(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h*h\ndef volume_cylinder_v6(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h*h\ndef volume_cone_v7(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h*h*h\ndef volume_cylinder_v7(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h*h*h\ndef volume_cone_v8(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h*h*h*h*h\ndef volume_cylinder_v8(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h*h*h*h\ndef volume_cone_v9(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h*h*h*h*h\ndef volume_cylinder_v9(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h*h*h*h\ndef volume_cone_v10(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2*r*h\ndef volume_cylinder_v10(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2*r*h\ndef volume_cone_v11(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h\ndef volume_cylinder_v11(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h\ndef volume_cone_v12(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h\ndef volume_cylinder_v12(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h\ndef volume_cone_v13(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2*r*h\ndef volume_cylinder_v13(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2*r*h\ndef volume_cone_v14(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h\ndef volume_cylinder_v14(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h\ndef volume_cone_v15(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h\ndef volume_cylinder_v15(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h\ndef volume_cone_v16(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2*r*h*h\ndef volume_cylinder_v16(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2*r*h*h*h*h\ndef volume_cone_v17(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h\ndef volume_cylinder_v17(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h\ndef volume_cone_v18(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h*h\ndef volume_cylinder_v18(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h*h\ndef volume_cone_v19(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h*h*h*h\ndef volume_cylinder_v19(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h*h*h*h\ndef volume_cone_v20(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2*r*h\ndef volume_cylinder_v20(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2*r*h\ndef volume_cone_v21(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h\ndef volume_cylinder_v21(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h\ndef volume_cone_v22(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*h*h\ndef volume_cylinder_v22(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*h*h*h\ndef volume_cone_v23(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h\ndef volume_cylinder_v23(r,h):\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c=math.pi*(r**2)*(1-h**2)\n    print('Cone volume is',c)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    c=h**2*math.pi*(r**2)\n    print('Cylinder volume is',c)\ndef volume_polygon(v):\n    '''\n    Write a function to find the volume of a polygon.\n    '''\n    print('Polygon volume is',math.pi*(len(v)/2)*(len(v)-1)*v[0])\ndef volume_rectangle(r1,r2):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    print('Rectangle volume is',math.pi*r1*r2*r2)\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    print('Triangle area is',a*a)\ndef area_quadrilateral(a,b,c):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    print('Quadrilateral area is',a*b*c)\ndef area_cuboid(a,b,c,d):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    print('Cuboid area is',a*b*c*d)\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    print('Rhombus area is',a*b)\ndef area_rhombus_triangle(a,b,c):\n    '''\n    Write a function to find the area of a rhombus triangle.\n    '''\n    print('Triangle area is',a*b*c)\ndef volume_rhombus(a,b,c):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    print('Rhombus volume is',(a*b*c)/2)\ndef volume_rhombus_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a rhombus triangle.\n    '''\n    print('Triangle volume is',(a*b*c)/3)\ndef volume_rhombus_cube(a,b,c):\n    '''\n    Write a function to find the volume of a rhombus cube.\n    '''\n    print('Cube volume is',(a*b*c)/4)\ndef volume_rhombus_cylinder(a,b,c):\n    '''\n    Write a function to find the volume of a rhombus cylinder.\n    '''\n    print('Cylinder volume is',(a*b*c)/2)\ndef area_rhombus_cube(a,b,c):\n    '''\n    Write a function to find the volume of a rhombus cube.\n    '''\n    print('Cube volume is',(a*b*c)/3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    print('Cylinder volume is',r*h*h)\ndef volume_rectangle(r1,r2):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    print('Rectangle volume is',r1*r2*r2)\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    print('Circle volume is',(2*math.pi)*r*r)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print('Circle area is',(2*math.pi)*r*r*r)\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    print('Sphere area is',r*r*r*r)\ndef area_sphere_triangle(r):\n    '''\n    Write a function to find the area of a sphere triangle.\n    '''\n    print('Triangle area is',r*r*r*r)\ndef area_sphere_rhombus(r):\n    '''\n    Write a function to find the area of a sphere rhombus.\n    '''\n    print('Rhombus area is',(2*math.pi)*r*r)\ndef area_sphere_rhombus_triangle(r):\n    '''\n    Write a function to find the area of a sphere rhombus triangle.\n    '''\n    print('Triangle area is',(2*math.pi)*r*r*r)\ndef area_sphere_rhombus_cube(r):\n    '''\n    Write a function to find the area of a sphere rhombus cube.\n    '''\n    print('Cube area is',(2*math.pi)*r*r*r*r)\ndef area_sphere_rhombus_cylinder(r):\n    '''\n    Write a function to find the area of a sphere rhombus cylinder.\n    '''\n    print('Cylinder area is',(2*math.pi)*r*r*r*r*r)\ndef area_sphere_rhombus_cube(r):\n    '''\n    Write a function to find the area of a sphere rhombus cube.\n    '''\n    print('Cube area is',(2*math.pi)*r*r*r*r*r*r)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print('Sphere volume is',(2*math.pi)*r*r*r*r)\ndef volume_sphere_triangle(r):\n    '''\n    Write a function to find the volume of a sphere triangle.\n    '''\n    print('Triangle volume is',(2*math.pi)*r*r*r*r)\ndef volume_sphere_rhombus(r):\n    '''\n    Write a function to find the volume of a sphere rhombus.\n    '''\n    print('Rhombus volume is',(2*math.pi)*r*r*r*r*r)\ndef volume_sphere_rhombus_triangle(r):\n    '''\n    Write a function to find the volume of a sphere rhombus triangle.\n    '''\n    print('Triangle volume is',(2*math.pi)*r*r*r*r*r*r)\ndef volume_sphere_rhombus_cube(r):\n    '''\n    Write a function to find the volume of a sphere rhombus cube.\n    '''\n    print('Cube volume is',(2*math.pi)*r*r*r*r*r*r*r)\ndef volume_sphere_rhombus_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere rhombus cylinder.\n    '''\n    print('Cylinder volume is',(2*math.pi)*r*r*r*r*r*r*r)\ndef volume_sphere_rhombus_cube(r):\n    '''\n    Write a function to find the volume of a sphere rhombus cube.\n    '''\n    print('Cube volume is',(2*math.pi)*r*r*r*r*r*r*r*r)\ndef volume_cuboid(a,b,c,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    print('Cuboid volume is',(a*b*c*d)/6)\ndef volume_cuboid_triangle(a,b,c,d):\n    '''\n    Write a function to find the volume of a cuboid triangle.\n    '''\n    print('Triangle volume is',(a*b*c*d)/6)\ndef volume_cuboid_rhombus(a,b,c,d):\n    '''\n    Write a function to find the volume of a cuboid rhombus.\n    '''\n    print('Rhombus volume is',(a*b*c*d)/2)\nde"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.sqrt(r**2-4*h)\n    return v\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return max(int(math.log(n, 2)), math.log(n, 3), math.log(n, 4))"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else:\n        return highest_Power_of_2(n - 1) + highest_Power_of_2(n - 2)\n        \ndef power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else:\n        return power_of_2(n - 1) + power_of_2(n - 2)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    else:\n        return sum_of_digits(n - 1) + n\n        \ndef sum_of_digits_approx(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    else:\n        return sum_of_digits_approx(n - 1) + n\n        \ndef sum_of_digits_2(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n + sum_of_digits_2(n - 1)\n    \ndef sum_of_digits_3(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else:\n        return n + sum_of_digits_2(n - 1) + sum_of_digits_3(n - 2) + sum_of_digits_3(n - 3)\n    \ndef sum_of_digits_4(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_4(n - 1) + sum_of_digits_4(n - 2) + sum_of_digits_4(n - 3)\n    \ndef sum_of_digits_5(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_5(n - 1) + sum_of_digits_5(n - 2) + sum_of_digits_5(n - 3)\n    \ndef sum_of_digits_6(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 3\n    else:\n        return n + sum_of_digits_6(n - 1) + sum_of_digits_6(n - 2) + sum_of_digits_6(n - 3)\n        \ndef sum_of_digits_7(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_7(n - 1) + sum_of_digits_7(n - 2) + sum_of_digits_7(n - 3)\n    \ndef sum_of_digits_8(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_8(n - 1) + sum_of_digits_8(n - 2) + sum_of_digits_8(n - 3)\n        \ndef sum_of_digits_9(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_9(n - 1) + sum_of_digits_9(n - 2) + sum_of_digits_9(n - 3)\n        \ndef sum_of_digits_10(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_10(n - 1) + sum_of_digits_10(n - 2) + sum_of_digits_10(n - 3)\n    \ndef sum_of_digits_11(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_11(n - 1) + sum_of_digits_11(n - 2) + sum_of_digits_11(n - 3)\n    \ndef sum_of_digits_12(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_12(n - 1) + sum_of_digits_12(n - 2) + sum_of_digits_12(n - 3)\n        \ndef sum_of_digits_13(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_13(n - 1) + sum_of_digits_13(n - 2) + sum_of_digits_13(n - 3)\n        \ndef sum_of_digits_14(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else:\n        return n + sum_of_digits_14(n - 1) + sum_of_digits_14(n - 2) + sum_of_digits_14(n - 3)\n    \ndef sum_of_digits_15(n):\n    '''\n    Write a python function that takes a number and returns the sum of all its digits.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return -1\n    else: \n        return highest_Power_of_2(n // 2) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = n\n    if l < 2:\n        return l\n    while l%2 == 0:\n        l = l//2\n    while l>1:\n        if l%2 == 1:\n            return l\n        l = l//2\n    return l\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    if n%2 == 0: \n        return 1\n    else: \n        return highest_Power_of_2(n/2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initial check to see if n is a perfect square\n    if n==1:\n        return 1\n    # if n is not a perfect square\n    if n%2==0:\n        return highest_Power_of_2(n/2)\n    # if n is perfect square\n    else:\n        return highest_Power_of_2((n-1)/2)\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=2\n    max_power=1\n    while i**2<n:\n        if i**2<=n:\n            max_power+=1\n        i+=1\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            return i\n        i+=1\n    return 1\ndef decimal_to_binary(n):\n    '''\n    Write a python function that returns the binary representation of a number.\n    '''\n    if n==0:\n        return \"0\"\n    if n==1:\n        return \"1\"\n    if n>1:\n        num=decimal_to_binary(n//2)\n        num+=num\n        return num\ndef is_Prime(n):\n    '''\n    Write a python function to check whether a number is a prime number.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    if n==3 or n==5:\n        return True\n    for i in range(3,int(math.sqrt(n)+1),2):\n        if n%i==0:\n            return False\n    return True"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n==0:\n        return '0'\n    elif n==1:\n        return '1'\n    elif n==2:\n        return '2'\n    else:\n        #divided into two parts\n        #print (n%2)\n        if n%2==0:\n            return '2'\n        else:\n            return '1'\n    \ndef highest_Power_of_3(n):\n    '''\n    Write a python function that returns the highest power of 3.\n    '''\n    \n    if n==0:\n        return '0'\n    elif n==1:\n        return '1'\n    elif n==2:\n        return '3'\n    else:\n        #divided into three parts\n        #print (n%3)\n        if n%3==0:\n            return '3'\n        elif n%3==1:\n            return '3'\n        elif n%3==2:\n            return '3'\n        else:\n            return '3'\n    \ndef lowest_Power_of_4(n):\n    '''\n    Write a python function to return the lowest power of 4.\n    '''\n    \n    if n==0:\n        return '0'\n    elif n==1:\n        return '1'\n    elif n==2:\n        return '2'\n    elif n==3:\n        return '3'\n    elif n==4:\n        return '4'\n    else:\n        #divided into four parts\n        #print (n%4)\n        if n%4==0:\n            return '4'\n        elif n%4==1:\n            return '4'\n        elif n%4==2:\n            return '4'\n        elif n%4==3:\n            return '4'\n        elif n%4==4:\n            return '4'\n        else:\n            return '4'\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1 or n == 0:\n        return n\n    else:\n        return highest_Power_of_2(n - 1) + 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==2: \n        return 1\n    if n<=3: \n        return n\n    if n%2==0: \n        return find_lucas(3) \n    else: \n        return find_lucas(n//2) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    a = n - 2\n    b = n - 1\n    c = n - 2\n    return a, b, c \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n <= 3):\n        return 1\n    else:\n        lucas = 1 + find_lucas(n-1)\n        return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = 1\n    while x < n:\n        if x == 1:\n            y = 1\n        elif x == 2:\n            y = 2\n        else:\n            y = 3\n        print(y)\n        x = x + 1\n    return(y)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 0\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return (find_lucas(n-1)+find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 6\n    if n == 4: return 12\n    if n == 5: return 25\n    if n == 6: return 36\n    if n == 7: return 45\n    if n == 8: return 78\n    if n == 9: return 90\n    if n == 10: return 120\n    if n == 11: return 130\n    if n == 12: return 150\n    if n == 13: return 170\n    if n == 14: return 190\n    if n == 15: return 210\n    if n == 16: return 240\n    if n == 17: return 270\n    if n == 18: return 300\n    if n == 19: return 330\n    if n == 20: return 360\n    if n == 21: return 390\n    if n == 22: return 420\n    if n == 23: return 450\n    if n == 24: return 480\n    if n == 25: return 510\n    if n == 26: return 540\n    if n == 27: return 550\n    if n == 28: return 560\n    if n == 29: return 580\n    if n == 30: return 600\n    if n == 31: return 630\n    if n == 32: return 660\n    if n == 33: return 670\n    if n == 34: return 720\n    if n == 35: return 650\n    if n == 36: return 720\n    if n == 37: return 750\n    if n == 38: return 800\n    if n == 39: return 1000\n    if n == 40: return 1100\n    if n == 41: return 1200\n    if n == 42: return 1300\n    if n == 43: return 1500\n    if n == 44: return 1720\n    if n == 45: return 1860\n    if n == 46: return 1950\n    if n == 47: return 2100\n    if n == 48: return 2200\n    if n == 49: return 2320\n    if n == 50: return 2450\n    if n == 51: return 2500\n    if n == 52: return 2580\n    if n == 53: return 2750\n    if n == 54: return 2800\n    if n == 55: return 2950\n    if n == 56: return 3200\n    if n == 57: return 3350\n    if n == 58: return 3400\n    if n == 59: return 3500\n    if n == 60: return 3600\n    if n == 61: return 3700\n    if n == 62: return 3800\n    if n == 63: return 3900\n    if n == 64: return 4100\n    if n == 65: return 4250\n    if n == 66: return 4550\n    if n == 67: return 4650\n    if n == 68: return 4850\n    if n == 69: return 4950\n    if n == 70: return 5050\n    if n == 71: return 5100\n    if n == 72: return 5200\n    if n == 73: return 5350\n    if n == 74: return 5450\n    if n == 75: return 5550\n    if n == 76: return 5600\n    if n == 77: return 5750\n    if n == 78: return 5850\n    if n == 79: return 5950\n    if n == 80: return 6000\n    if n == 81: return 6200\n    if n == 82: return 6300\n    if n == 83: return 6400\n    if n == 84: return 6400\n    if n == 85: return 6550\n    if n == 86: return 6650\n    if n == 87: return 6700\n    if n == 88: return 6750\n    if n == 89: return 6800\n    if n == 90: return 6850\n    if n == 91: return 6900\n    if n == 92: return 6950\n    if n == 93: return 7000\n    if n == 94: return 7200\n    if n == 95: return 7350\n    if n == 96: return 7450\n    if n == 97: return 7550\n    if n == 98: return 7650\n    if n == 99: return 7700\n    if n == 100: return 7750\n    if n == 101: return 7850\n    if n == 102: return 7900\n    if n == 103: return 7800\n    if n == 104: return 8050\n    if n == 105: return 8200\n    if n == 106: return 8300\n    if n == 107: return 8400\n    if n == 108: return 8450\n    if n == 109: return 8550\n    if n == 110: return 8650\n    if n == 111: return 8750\n    if n == 112: return 8850\n    if n == 113: return 8950\n    if n == 114: return 9000\n    if n == 115: return 9100\n    if n == 116: return 9200\n    if n == 117: return 9350\n    if n == 118: return 9450\n    if n == 119: return 9550\n    if n == 120: return 9650\n    if n == 121: return 9750\n    if n == 122: return 9850\n    if n == 123: return 9950\n    if n == 124: return 10050\n    if n == 125: return 10150\n    if n == 126: return 10250\n    if n == 127: return 10300\n    if n == 128: return 10350\n    if n == 129: return 10450\n    if n == 130: return 10550\n    if n == 131: return 10650\n    if n == 132: return 10750\n    if n == 133: return 10850\n    if n == 134: return 10950\n    if n == 135: return 11050\n    if n == 136: return 11150\n    if n == 137: return 11250\n    if n == 138: return 11350\n    if n == 139: return 11450\n    if n == 140: return 11550\n    if n == 141: return 11650\n    if n == 142: return 11750\n    if n == 143: return 11850\n    if n == 144: return 11950\n    if n == 145: return 12050\n    if n == 146: return 12250\n    if n == 147: return 12300\n    if n == 148: return 12350\n    if n == 149: return 12450\n    if n == 150: return 12550\n    if n == 151: return 12650\n    if n == 152: return 12750\n    if n == 153: return 12850\n    if n == 154: return 12950\n    if n == 155: return 13050\n    if n == 156: return 13150\n    if n == 157: return 13250\n    if n == 158: return 13350\n    if n == 159: return 13450\n    if n == 160: return 13550\n    if n == 161: return 13650\n    if n == 162: return 13750\n    if n == 163: return 13850\n    if n == 164: return 13950\n    if n == 165: return 14050\n    if n == 166: return 14150\n    if n == 167: return 14250\n    if n == 168: return 14350\n    if n == 169: return 14450\n    if n == 170: return 14550\n    if n == 171: return 14650\n    if n == 172: return 14750\n    if n == 173: return 14850\n    if n == 174: return 14950\n    if n == 175: return 15050\n    if n == 176: return 15150\n    if n == 177: return 15250\n    if n == 178: return 15350\n    if n == 179: return 15450\n    if n == 180: return 15550\n    if n == 181: return 15650\n    if n == 182: return 15750\n    if n == 183: return 15850\n    if n == 184: return 15950\n    if n == 185: return 16050\n    if n == 186: return 16150\n    if n == 187: return 16250\n    if n == 188: return 16350\n    if n == 189: return 16450\n    if n == 190: return 16550\n    if n == 191: return 16650\n    if n == 192: return 16750\n    if n == 193: return 16850\n    if n == 194: return 16950\n    if n == 195: return 17050\n    if n == 196: return 17150\n    if n == 197: return 17250\n    if n == 198: return 17350\n    if n == 199: return 17450\n    if n == 200: return 17550\n    if n == 201: return 17650\n    if n == 202: return 17750\n    if n == 203: return 17850\n    if n == 204: return 17950\n    if n == 205: return 18050\n    if n == 206: return 18150\n    i"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(string) == 1:\n        list_.append(string)\n    else:\n        for index in range(0, len(string)):\n            list_.append(string[index]+str(index))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_[list_.index(element)] = string.format(element)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.replace(string, '%s' % string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = str(element).replace(\"'\", \"''\")\n        string = string.replace(element, element)\n    return string\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in string:\n        list_.append(i)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.replace('{', '').replace('}', '').replace(',', '').replace('$', '').replace('.', '').replace('%', '').replace(' ', '')\n        list_[list_.index(element)] = str(element)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in list_:\n        i += string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = string.replace(\"{\", \"\").replace(\"}\", \"\")\n        if i!= '':\n            if i == '{':\n                list_.append(string.replace(\"{\", \"\").replace(\"}\", \"\"))\n            else:\n                list_.append(string.replace(\"}\", \"\").replace(\"{\", \"\"))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(element.format(string))\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list_ + string.split()\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for a in range(len(l1)):\n        result[l1[a]] = l2[a]\n    for a in range(len(l3)):\n        result[l3[a]] = l2[a]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    retval = {}\n    for l in (l1, l2, l3):\n        if type(l) == list:\n            retval.update(convert_list_dictionary(l, None, None))\n        else:\n            retval[l.pop(0)] = {l.pop(0): convert_list_dictionary(l, None, None)}\n    return retval\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested = dict()\n    for i in range(len(l1)):\n        nested[l1[i]] = dict()\n        nested[l1[i]].update(l2[i])\n        nested[l1[i]].update(l3[i])\n    return nested\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    for i in l1:\n        d[i] = convert_list_dictionary(l2, l3, i)\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) > len(l2) and len(l1) > len(l3):\n        dict1 = convert_list_dictionary(l1, l2, l3)\n        dict1['foo'] = 'bar'\n        return dict1\n    if len(l2) > len(l1) and len(l2) > len(l3):\n        dict2 = convert_list_dictionary(l1, l2, l3)\n        dict2['baz'] = 'qux'\n        return dict2\n    return None\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for k, v in l1:\n        if isinstance(v, dict):\n            for kk, vv in l2.items():\n                if kk == vk:\n                    d[k] = vv\n                else:\n                    d[k] = vv\n        else:\n            d[k] = v\n    for kk, vv in l3.items():\n        if isinstance(vv, dict):\n            for kkk, vvv in l2.items():\n                if kkk == vkk:\n                    d[k] = vvv\n                else:\n                    d[k] = vvv\n        else:\n            d[k] = vv\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    for i in l1:\n        if isinstance(i,list) == False:\n            continue\n        for j in i:\n            d[j] = l3[j]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_l3 = {}\n    for l in l3:\n        if isinstance(l1, list) and isinstance(l2, list) and isinstance(l3, list):\n            dict_l3[l] = convert_list_dictionary(l1, l2, l3)\n        elif isinstance(l1, list) and isinstance(l2, list) and isinstance(l3, list):\n            dict_l3[l] = convert_list_dictionary(l1, l2, l3)\n    return dict_l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic1 = {}\n    for i in range(len(l1)):\n        if l1[i] not in dic1:\n            dic1[l1[i]] = {}\n        dic1[l1[i]][l2[i]] = l3[i]\n    return dic1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    for i in l2:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    for i in l3:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    return d1\n    \ndef get_d2(l):\n    '''\n    Write a function to get the values of a nested dictionary.\n    '''\n    d2 = {}\n    for i in l:\n        if i in d2:\n            d2[i] += 1\n        else:\n            d2[i] = 1\n    return d2\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n < 10:\n        return n + 1\n    elif n == 10:\n        return n + 2\n    else:\n        for i in range(1, n+1):\n            if n % i == 0:\n                return get_max_sum(int(n/i)) + i - 1\n    return n + 1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = 0\n    b = 0\n    if n == 0:\n        return 0\n    else:\n        a = n//2\n        b = n//3\n        c = n//4\n        d = n//5\n        if n > 1:\n            a += get_max_sum(n-1)\n            b += get_max_sum(n-2)\n            c += get_max_sum(n-3)\n            d += get_max_sum(n-4)\n            a += get_max_sum(n-5)\n            return max(a,b,c,d)\n        else:\n            return max(a,b,c,d)"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max (get_max_sum (n / 2), get_max_sum (n / 3), get_max_sum (n / 4), get_max_sum (n / 5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_value = 0\n    # Write your code here\n    for i in range(1, n+1):\n        max_value = max(max_value, i+max(max(f(i/2),f(i/3),f(i/4),f(i/5))))\n    return max_value\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    while n > 0:\n        result = f(n) + result\n        n = n // 2\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return f(n)\ndef f(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return (f(n/2) + f(n/3) + f(n/4) + f(n/5))\ndef m(n):\n    return n*n\ndef newton (n):\n    if n == 0:\n        return 1\n    else:\n        return n + newton(n-1)\ndef g(n):\n    if n == 0:\n        return 0\n    else:\n        return f(n) + g(n-1)\ndef get_next (x):\n    if x < 0:\n        return -1\n    else:\n        return x + get_next(x-1)\ndef get_prob (n):\n    if n == 0:\n        return 1\n    else:\n        return n*n*get_prob(n-1)\ndef get_prior (n):\n    if n == 0:\n        return 0\n    else:\n        return n*n\ndef get_prob_bias (n):\n    if n == 0:\n        return 0\n    else:\n        return n*n\ndef get_prob_sum (n):\n    if n == 0:\n        return 0\n    else:\n        return n*n*get_prob(n-1)\ndef get_prob_part1 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1)\ndef get_prob_part2 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + (n-1)*get_prob(n-2) + (n-2)*get_prob(n-3)\ndef get_prob_part3 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3)\ndef get_prob_part4 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4)\ndef get_prob_part5 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5)\ndef get_prob_part6 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6)\ndef get_prob_part7 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7)\ndef get_prob_part8 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7) + n*get_prob(n-8)\ndef get_prob_part9 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7) + n*get_prob(n-8) + n*get_prob(n-9)\ndef get_prob_part10 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7) + n*get_prob(n-8) + n*get_prob(n-9) + n*get_prob(n-10)\ndef get_prob_part11 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7) + n*get_prob(n-8) + n*get_prob(n-9) + n*get_prob(n-10) + n*get_prob(n-11)\ndef get_prob_part12 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7) + n*get_prob(n-8) + n*get_prob(n-9) + n*get_prob(n-10) + n*get_prob(n-11) + n*get_prob(n-12)\ndef get_prob_part13 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7) + n*get_prob(n-8) + n*get_prob(n-9) + n*get_prob(n-10) + n*get_prob(n-11) + n*get_prob(n-12) + n*get_prob(n-13)\ndef get_prob_part14 (n):\n    if n == 0:\n        return 0\n    else:\n        return n*get_prob(n-1) + n*get_prob(n-2) + n*get_prob(n-3) + n*get_prob(n-4) + n*get_prob(n-5) + n*get_prob(n-6) + n*get_prob(n-7) + n*get_prob(n-8) + n*get_prob(n-9) + n*get_prob(n-10) + n*get_pro"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_val = -1\n    sum = 0\n    for n in range(2, n):\n        max_val = max(max_val, n + sum)\n        sum = sum + (f(n) + f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5))\n    return max_val"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 1):\n        return n\n    else:\n        return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(2, n+1):\n        max_sum += i*(i+1)//2\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return max( (f(n/2), f(n/3), f(n/4), f(n/5)), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #max = input_list[0]\n    max = 0\n    for i in input_list:\n        if len(str(i)) > max:\n            max = len(str(i))\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(len(x) for x in input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for element in input_list:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n    return max_len"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    i = 0\n    for j in test_tup:\n        if j in test_tup:\n            pass\n        else:\n            i += 1\n    if i == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return True\n    #raise NotImplementedError\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for element in test_tup:\n        if element in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return test_tup not in list(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for item in test_tup:\n        if test_tup.count(item) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i]!= test_tup[i - 1]:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # make list of tuples to look for duplicates\n    list_tup = [(tup[0], tup[1]) for tup in test_tup]\n    # if any of the tuples are not in list, then return true\n    # otherwise, return false\n    return any(item not in list_tup for item in list_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not test_tup[0] == test_tup[1]\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if tuple(test_tup) not in test_tup:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    regex = r'^[a-zA-Z0-9]+$'\n    regex1 = r'^[^a-zA-Z0-9]+$'\n    count = 0\n    for i in str1:\n        if i not in str1:\n            count += 1\n    for i in range(len(str1)):\n        if str1[i] not in str1:\n            return str1[i]\n    return 'error'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # make a dictionary to store the counts\n    d = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq_dict = {}\n    for letter in str1:\n        if letter not in freq_dict:\n            freq_dict[letter] = 0\n        freq_dict[letter] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_non_repeating = []\n    for i in range(len(str1)):\n        if str1[i] not in first_non_repeating:\n            first_non_repeating.append(str1[i])\n    return first_non_repeating[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    return str1.replace(str1[0], '', 1).strip()\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    l = len(str1)\n    if l==0:\n        return \"\"\n    else:\n        for i in range(0, l):\n            if str1[i]==str1[i]:\n                continue\n            else:\n                return str1[i]\n    \ndef second_non_repeating_character(str1):\n    '''\n    Write a python function to find the second non-repeated character in a given string.\n    '''\n    l = len(str1)\n    if l==0:\n        return \"\"\n    elif l==1:\n        return str1[0]\n    else:\n        for i in range(1, l):\n            if str1[i]==str1[i-1]:\n                continue\n            else:\n                return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # define the dictionary of non-repeating characters\n    dict = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1:\n            return str1[i]\n    \n    return \"No First Non-Repeating Character\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i!= count:\n            count = i\n        else:\n            count = 0\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # string = string.replace(' ', '')\n    # print(string)\n    # print(string.lower())\n    # print(string.upper())\n    # print(string.isdigit())\n    # print(string.isalpha())\n    # print(string.isnumeric())\n    # print(string.islower())\n    # print(string.isupper())\n    # print(string.casefold())\n    # print(string.find(' '))\n    # print(string.find('a'))\n    # print(string.replace('a', 'a'))\n    # print(string.split())\n    # print(string.split(' '))\n    # print(string.split(' ')[0])\n    # print(string.split(' ')[1])\n    # print(string.split(' ')[2])\n    # print(string.split(' ')[3])\n    # print(string.split(' ')[4])\n    # print(string.split(' ')[5])\n    # print(string.split(' ')[6])\n    # print(string.split(' ')[7])\n    # print(string.split(' ')[8])\n    # print(string.split(' ')[9])\n    # print(string.split(' ')[10])\n    # print(string.split(' ')[11])\n    # print(string.split(' ')[12])\n    # print(string.split(' ')[13])\n    # print(string.split(' ')[14])\n    # print(string.split(' ')[15])\n    # print(string.split(' ')[16])\n    # print(string.split(' ')[17])\n    # print(string.split(' ')[18])\n    # print(string.split(' ')[19])\n    # print(string.split(' ')[20])\n    # print(string.split(' ')[21])\n    # print(string.split(' ')[22])\n    # print(string.split(' ')[23])\n    # print(string.split(' ')[24])\n    # print(string.split(' ')[25])\n    # print(string.split(' ')[26])\n    # print(string.split(' ')[27])\n    # print(string.split(' ')[28])\n    # print(string.split(' ')[29])\n    # print(string.split(' ')[30])\n    # print(string.split(' ')[31])\n    # print(string.split(' ')[32])\n    # print(string.split(' ')[33])\n    # print(string.split(' ')[34])\n    # print(string.split(' ')[35])\n    # print(string.split(' ')[36])\n    # print(string.split(' ')[37])\n    # print(string.split(' ')[38])\n    # print(string.split(' ')[39])\n    # print(string.split(' ')[40])\n    # print(string.split(' ')[41])\n    # print(string.split(' ')[42])\n    # print(string.split(' ')[43])\n    # print(string.split(' ')[44])\n    # print(string.split(' ')[45])\n    # print(string.split(' ')[46])\n    # print(string.split(' ')[47])\n    # print(string.split(' ')[48])\n    # print(string.split(' ')[49])\n    # print(string.split(' ')[50])\n    # print(string.split(' ')[51])\n    # print(string.split(' ')[52])\n    # print(string.split(' ')[53])\n    # print(string.split(' ')[54])\n    # print(string.split(' ')[55])\n    # print(string.split(' ')[56])\n    # print(string.split(' ')[57])\n    # print(string.split(' ')[58])\n    # print(string.split(' ')[59])\n    # print(string.split(' ')[60])\n    # print(string.split(' ')[61])\n    # print(string.split(' ')[62])\n    # print(string.split(' ')[63])\n    # print(string.split(' ')[64])\n    # print(string.split(' ')[65])\n    # print(string.split(' ')[66])\n    # print(string.split(' ')[67])\n    # print(string.split(' ')[68])\n    # print(string.split(' ')[69])\n    # print(string.split(' ')[70])\n    # print(string.split(' ')[71])\n    # print(string.split(' ')[72])\n    # print(string.split(' ')[73])\n    # print(string.split(' ')[74])\n    # print(string.split(' ')[75])\n    # print(string.split(' ')[76])\n    # print(string.split(' ')[77])\n    # print(string.split(' ')[78])\n    # print(string.split(' ')[79])\n    # print(string.split(' ')[80])\n    # print(string.split(' ')[81])\n    # print(string.split(' ')[82])\n    # print(string.split(' ')[83])\n    # print(string.split(' ')[84])\n    # print(string.split(' ')[85])\n    # print(string.split(' ')[86])\n    # print(string.split(' ')[87])\n    # print(string.split(' ')[88])\n    # print(string.split(' ')[89])\n    # print(string.split(' ')[90])\n    # print(string.split(' ')[91])\n    # print(string.split(' ')[92])\n    # print(string.split(' ')[93])\n    # print(string.split(' ')[94])\n    # print(string.split(' ')[95])\n    # print(string.split(' ')[96])\n    # print(string.split(' ')[97])\n    # print(string.split(' ')[98])\n    # print(string.split(' ')[99])\n    # print(string.split(' ')[100])\n    # print(string.split(' ')[101])\n    # print(string.split(' ')[102])\n    # print(string.split(' ')[103])\n    # print(string.split(' ')[104])\n    # print(string.split(' ')[105])\n    # print(string.split(' ')[106])\n    # print(string.split(' ')[107])\n    # print(string.split(' ')[108])\n    # print(string.split(' ')[109])\n    # print(string.split(' ')[110])\n    # print(string.split(' ')[111])\n    # print(string.split(' ')[112])\n    # print(string.split(' ')[113])\n    # print(string.split(' ')[114])\n    # print(string.split(' ')[115])\n    # print(string.split(' ')[116])\n    # print(string.split(' ')[117])\n    # print(string.split(' ')[118])\n    # print(string.split(' ')[119])\n    # print(string.split(' ')[120])\n    # print(string.split(' ')[121])\n    # print(string.split(' ')[122])\n    # print(string.split(' ')[123])\n    # print(string.split(' ')[124])\n    # print(string.split(' ')[125])\n    # print(string.split(' ')[126])\n    # print(string.split(' ')[127])\n    # print(string.split(' ')[128])\n    # print(string.split(' ')[129])\n    # print(string.split(' ')[130])\n    # print(string.split(' ')[131])\n    # print(string.split(' ')[132])\n    # print(string.split(' ')[133])\n    # print(string.split(' ')[134])\n    # print(string.split(' ')[135])\n    # print(string.split(' ')[136])\n    # print(string.split(' ')[137])\n    # print(string.split(' ')[138])\n    # print(string.split(' ')[139])\n    # print"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # iterate through string\n    for i in range(len(string)):\n        if string[i]!= string[i+1]:\n            return False\n    return True\n    \ndef is_valid(string):\n    '''\n    Write a function that takes a string and returns whether the given string is valid.\n    '''\n    # iterate through string\n    for i in range(len(string)):\n        if string[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            # check if the entered character is a digit\n            if not re.match(r'^[0-9]$', string[i]):\n                return False\n            # check if the entered character is a special character\n            if string[i] in '!@#$%^&*_+-=':\n                return False\n        # check if the entered character is a special character\n        elif string[i] in '[]{}|~!@#$%^&*_+-=':\n            return False\n    return True\n    \ndef is_valid_list(string):\n    '''\n    Write a function that takes a list and returns whether the given string is valid.\n    '''\n    # iterate through string\n    for i in range(len(string)):\n        if string[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            # check if the entered character is a digit\n            if not re.match(r'^[0-9]$', string[i]):\n                return False\n            # check if the entered character is a special character\n            if string[i] in '!@#$%^&*_+-=':\n                return False\n        # check if the entered character is a special character\n        elif string[i] in '[]{}|~!@#$%^&*_+-=':\n            return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string:\n        return False\n    if string[0]!= string[-1]:\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = re.compile(regex)\n    if regex.search(string):\n        return True\n    else:\n        return False\ndef is_punctuation(string): \n    '''\n    Write a function to check whether the given string is a punctuation or not.\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    regex = re.compile(regex)\n    if regex.search(string):\n        return True\n    else:\n        return False\ndef lower(string): \n    '''\n    Write a function to convert all the uppercase letters to lowercase letters.\n    '''\n    regex = re.compile(r'[A-Z]')\n    if regex.search(string):\n        return string.lower()\n    else:\n        return string\ndef punctuation(string): \n    '''\n    Write a function to convert all the non-punctuation characters to lowercase.\n    '''\n    regex = re.compile(r'[^!\\\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~]')\n    if regex.search(string):\n        return string.lower()\n    else:\n        return string\ndef normalize(string):\n    '''\n    Write a function to normalize the input string.\n    '''\n    regex = re.compile(r'[^a-zA-Z0-9!#$%&()*+,-./:;<=>?@\\\\^_`{|}~]')\n    if regex.search(string):\n        string = string.lower()\n        for char in string:\n            if not check_char(char):\n                string = string.replace(char, '_')\n        return string\n    else:\n        return string\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string.startswith('(') and string.endswith(')')):\n        return True\n    elif(string[0] == string[-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #pattern = re.compile(regex)\n    #result = pattern.search(string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    l = len(string)\n    if l == 0: \n        return True\n    if string[0] == string[l-1]: \n        return True\n    return False\ndef s_regex(string): \n    '''\n    Write a function to check whether the given string is a valid regex.\n    '''\n    if check_char(string) is True: \n        if re.match(regex,string) is not None: \n            return True\n    return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 3:\n        return (a[2] + a[1])/2\n    else:\n        return a[0]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(median_numbers(a,b,c))\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted([a,b,c])\n    if (len(a)%2):\n        a = a[int((len(a)/2))]\n    else:\n        a = a[int((len(a)/2)+1)]\n    if (len(b)%2):\n        b = b[int((len(b)/2))]\n    else:\n        b = b[int((len(b)/2)+1)]\n    if (len(c)%2):\n        c = c[int((len(c)/2))]\n    else:\n        c = c[int((len(c)/2)+1)]\n    return (round((a+b+c)/2,1))\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def get_median(a,b,c):\n        if len(a) < 3 or len(b) < 3 or len(c) < 3:\n            return 0\n        else:\n            a_median = get_median(a[0:len(a)//2],a[len(a)//2:])\n            b_median = get_median(b[0:len(b)//2],b[len(b)//2:])\n            c_median = get_median(c[0:len(c)//2],c[len(c)//2:])\n            return (a_median + b_median + c_median) // 3\n    if len(a) < 3 or len(b) < 3 or len(c) < 3:\n        return 0\n    return get_median(a[0:len(a)//2],a[len(a)//2:])\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float))):\n        print(\"Invalid input\")\n        return None\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a.sort()\n    b.sort()\n    c.sort()\n    if (a[0]+b[0]+c[0])%3==0:\n        return (a[0]+b[0]+c[0])//3\n    if (a[1]+b[1]+c[1])%3==0:\n        return (a[1]+b[1]+c[1])//3\n    if (a[2]+b[2]+c[2])%3==0:\n        return (a[2]+b[2]+c[2])//3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # you can just use sorted\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    #keep a,b,c sorted\n    #if the lists are of length 1 then\n    #we have to take the middle point,\n    #which is the median\n    #if the list length is greater than 2, we\n    #need to take the middle 2 points and keep\n    #the rest of the list sorted\n    #then return the middle of the three\n    #lists\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    c = []\n    c.append(a)\n    c.append(b)\n    c.append(c)\n    c.sort()\n    return c[2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    elif b>c:\n        if b>a:\n            return b\n        else:\n            return a\n    else:\n        if c>a:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 3:\n        if len(b) == 3:\n            if len(c) == 3:\n                return (a[0]+b[0]+c[0])/3\n            else:\n                return a[0]\n        elif len(b) == 2:\n            if len(c) == 2:\n                return (a[0]+b[1])/2\n            else:\n                return b[0]\n        elif len(b) == 1:\n            if len(c) == 1:\n                return (a[1]+b[0])/2\n            else:\n                return b[0]\n        else:\n            return a[0]\n    else:\n        return \"Not enough elements\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef test_sum_of_digits():\n    assert sum_of_digits([1, 2, 3]) == 6\n    assert sum_of_digits([0, 0, 0, 0, 0]) == 0\n    assert sum_of_digits([-2, 4, -1, -4, -4, -2, -2, -2, -2, -2]) == -10\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += i\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(list(map(int,str(nums))))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    sum=0\n    for n in nums:\n        sum+=n\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    print(sum(nums))\n    print(sum([n for n in nums if type(n) is int]))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def compute(number, mul):\n        result = 0\n        for i in range(len(number)):\n            result += int(number[i]) * mul\n            mul *= 10\n        return result\n    mul = 1\n    number = [int(x) for x in nums]\n    number = map(lambda x: compute(x, mul), number)\n    return sum(number)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # sum_of_digits = 0\n    # num_list = []\n    # for item in nums:\n    #     sum_of_digits += int(item)\n    #     num_list.append(sum_of_digits)\n    # return num_list\n    # return sum(list(map(int, nums)))\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    digits = []\n    for num in nums:\n        if num == 0:\n            digits.append(0)\n        else:\n            digits.append(num)\n    total = 0\n    for digit in digits:\n        total += digit\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for number in nums:\n        sum += number\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return (test_tup1[0]^test_tup1[1]^test_tup2[0]^test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1)!= tuple and type(test_tup1)!= list:\n        return (\"Error: tuple needs to be a tuple and is not a list\")\n    elif len(test_tup1)!= len(test_tup2):\n        return (\"Error: the number of tuples and tuples in the first tuple needs to be equal\")\n    elif test_tup1[0]!= test_tup2[0]:\n        return (\"Error: the first tuple of the two lists needs to be equal\")\n    elif test_tup1[0] in test_tup2[1:] and test_tup2[0] in test_tup1[1:]:\n        return (\"Error: the first two tuples of the two lists need not be the same\")\n    elif test_tup1[0] not in test_tup2[1:]:\n        return (\"Error: the first tuple of the two lists needs to be in the first one\")\n    elif test_tup1[0] not in test_tup2[1:]:\n        return (\"Error: the first tuple of the two lists needs to be in the second one\")\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_output = 0\n    for a,b in zip(test_tup1, test_tup2):\n        xor_output += a ^ b\n    return xor_output\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tup = (test_tup1[0] ^ test_tup2[0]) & 0b111111\n    return bitwise_xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #initialize result\n    result = 0\n    #loop through each tuple\n    for x in test_tup1:\n        #convert int to binary\n        binary_val = bin(x)[2:][::-1]\n        #add binary to result\n        result += int(binary_val, 2)\n    for y in test_tup2:\n        #convert int to binary\n        binary_val = bin(y)[2:][::-1]\n        #add binary to result\n        result += int(binary_val, 2)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup_1 = list(test_tup1)\n    test_tup_2 = list(test_tup2)\n    result = 0\n    for i in range(0, len(test_tup_1)):\n        if test_tup_1[i] > test_tup_2[i]:\n            result |= 1 << i\n        else:\n            result &= ~(1 << i)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'The number of tuples must be the same'\n    for i in range(len(test_tup1)):\n        test_tup1[i] = tuple([bitwise_xor(tup1, test_tup2[i]) for tup1 in test_tup1[i]])\n    return test_tup1\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple lengths do not match')\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a dictionary containing all the unique tuples\n    unique_tuple = dict()\n    # Iterate over the tuples\n    for element in test_list:\n        # Check if the element is already in the dictionary\n        if element in unique_tuple:\n            # Increment the count\n            unique_tuple[element] += 1\n        else:\n            # Add the element to the dictionary\n            unique_tuple[element] = 1\n    # Sort the dictionary by the values\n    unique_tuple = dict(sorted(unique_tuple.items()))\n    # Return the count\n    return(len(unique_tuple))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = test_list.copy()\n    test_list.sort()\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_unique = 0\n    for i in range(len(test_list)):\n        num_unique += len(test_list[i])\n    return num_unique\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a new list of the same length as the input,\n    # with all the unique tuples in it.\n    freq = []\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for index, i in enumerate(test_list):\n        if i not in freq_list:\n            freq_list.append(i)\n    print(\"The number of unique tuples are:\",len(freq_list))\n    return(len(freq_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res = {}\n    for t in test_list:\n        if t in res:\n            res[t] += 1\n        else:\n            res[t] = 1\n    return len(res)\n    \n    \ndef main():\n    '''\n    Main Function\n    '''\n    # Read the test file\n    test_file = open(\"test.txt\", 'r')\n    test_list = []\n    for line in test_file:\n        test_list.append(line)\n    test_file.close()\n    print(extract_freq(test_list))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for item in test_list:\n        if item[3] == '1':\n            pass\n        else:\n            test_list.remove(item)\n    return len(test_list)\n    \ndef frequency(train_list, test_list):\n    '''\n    Write a function that returns the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for item in test_list:\n        if item[3] == '1':\n            freq += 1\n    return freq\n    \ndef in_set(train_list, test_list):\n    '''\n    Write a function that returns the number of unique tuples in the given list.\n    '''\n    test_list_freq = frequency(train_list, test_list)\n    return test_list_freq\n    \ndef length_set(train_list, test_list):\n    '''\n    Write a function that returns the number of unique tuples in the given list.\n    '''\n    test_list_len = extract_len(test_list)\n    train_list_len = extract_len(train_list)\n    return train_list_len - test_list_len\n    \ndef avg_len(train_list, test_list):\n    '''\n    Write a function that returns the average length of the given lists.\n    '''\n    total_len = length_set(train_list, test_list)\n    return total_len / length_set(train_list, test_list)\n    \ndef avg_freq(train_list, test_list):\n    '''\n    Write a function that returns the average frequency of the given lists.\n    '''\n    return in_set(train_list, test_list) / avg_len(train_list, test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    freq = sorted(freq.items(), key=lambda item: item[1], reverse=True)\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # define a list of unique tuples\n    # no need to create the list of tuples because they already exist\n    # keep this as the list itself\n    unique_tuples = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique_tuples.append([i, j])\n    # return the number of unique tuples\n    return len(unique_tuples)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples_index(test_tup1, test_tup2):\n        '''\n        Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        def inner_add(test_tup):\n            '''\n            Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n            '''\n            return tuple(map(sum, zip(test_tup, test_tup)))\n        test_result = inner_add(test_tup1)\n        test_result += inner_add(test_tup2)\n        return test_result\n    test_result = add_nested_tuples_index(test_tup1, test_tup2)\n    return test_result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #declare two empty lists to store the data\n    output = []\n    #iterate through the given tuples and add all the tuple elements in the given list \n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            output.append((test_tup1[i][j], test_tup2[i][j]))\n    #return the added tuples\n    return output\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(test_tup1, test_tup2):\n        # Python has a built-in function to perform elementwise addition.\n        # The sum of the two tuples can be performed using the * operator\n        # the syntax to do this is : tuple[0] * tuple[1] = tuple[0] * tuple[1]\n        #This is the most intuitive way to do the element wise addition\n        #as it has a greater efficiency\n        #by having tuple(0) * tuple(1) = tuple(0) * tuple(1)\n        return tuple((tuple(element) + tuple(element)) for element in zip(test_tup1, test_tup2))\n    #Return the result of the function\n    return add_nested_tuples(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    # convert tuples to lists\n    # append the lists\n    # sort them in the same order\n    # iterate through the list and add the elements\n    # sort the list again\n    \n    # check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        list1 = []\n        list2 = []\n        for i in range(len(test_tup1)):\n            list1.append(test_tup1[i][0])\n            list2.append(test_tup2[i][0])\n        return tuple(list1), tuple(list2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tuple = [(test_tup1[i]+test_tup2[i]) for i in range(len(test_tup1))]\n    print(add_tuple)\n    return add_tuple\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a tuple with lists containing the first element of each tuple\n    first_list1 = list(test_tup1)\n    # create a tuple with lists containing the second element of each tuple\n    first_list2 = list(test_tup2)\n    # create a tuple with lists containing the first element of each tuple\n    result = (tuple(first_list1), tuple(first_list2))\n    # return the result of the addition\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('add_nested_tuples: ')\n    print('  test_tup1:'+ test_tup1)\n    print('  test_tup2:'+ test_tup2)\n    print('  index_wise_addition: ')\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a tuple containing every element of test_tup1 and every element of test_tup2\n    added_values = tuple((test_tup1[i]+test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        minimum=a\n    else:\n        minimum=b\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a = a if a else 0\n    b = b if b else 0\n    m = a if a > b else b\n    return m\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        min=a\n    else:\n        min=b\n    return min\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b == 0:\n        return a\n    return minimum(a,b-1)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a\n    if b < min:\n        min = b\n    elif b > min:\n        min = b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        return a\n    elif (a<b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        temp=a\n        a=b\n        b=temp\n    return a,b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] in tuple1:\n        return True\n    else:\n        return False\n    \ndef check_dict(dict,key,value):\n    '''\n    Write a function to check whether an element exists within a dictionary.\n    '''\n    if dict[key] == value:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex,tuple):\n        for i in tuplex:\n            if i in tuple1:\n                return True\n            else:\n                return False\n    else:\n        print(\"Invalid Input\")\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        print(tuple1, \" exists within the tuple\")\n    else: \n        print(tuple1, \" does not exist within the tuple\")\n    return \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # the function to be evaluated\n    # assuming the input is an integer \n    # returns true if the input is even\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return 'Error: 0 is not a number.'\n    elif x%2==0:\n        return 'Error: the number {} is even.'.format(x)\n    else:\n        return 'Error: the number {} is odd.'.format(x)\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 1:\n        return 'odd'\n    elif x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n        \ndef find_Primes():\n    '''\n    Write a python function to find the prime numbers in a given list of numbers.\n    '''\n    def is_prime(x):\n        '''\n        Write a python function to check whether a given number is prime or not.\n        '''\n        if x == 1:\n            return 'prime'\n        if x % 2 == 0:\n            return 'not prime'\n        else:\n            for i in range(3, int(x**0.5), 2):\n                if x % i == 0:\n                    return 'not prime'\n            return 'prime'\n        \n    def count_primes(x):\n        '''\n        Write a python function to count the prime numbers in a given list of numbers.\n        '''\n        res = {}\n        for i in range(2, x):\n            if x % i == 0:\n                if x not in res:\n                    res[x] = 0\n                res[x] += 1\n        return res\n        \n    def get_primes_list():\n        '''\n        Write a python function to get the prime numbers from a given list of numbers.\n        '''\n        res = []\n        for i in range(2, x+1):\n            if count_primes(i)[1] == 2:\n                res.append(i)\n        return res\n        \n    def reverse_pythag(n):\n        '''\n        Write a python function to reverse a given number.\n        '''\n        n = str(n)\n        n = n[::-1]\n        return int(n)\n        \n    def get_primes():\n        '''\n        Write a python function to get the prime numbers from a given list of numbers.\n        '''\n        res = []\n        for i in range(2, x+1):\n            if count_primes(i)[1] == 2:\n                res.append(i)\n        return res\n        \n    def get_primes_prime(x):\n        '''\n        Write a python function to get the prime numbers from a given list of numbers.\n        '''\n        res = []\n        for i in range(2, x+1):\n            if is_prime(i) == 'prime':\n                res.append(i)\n        return res\n        \n    def print_primes():\n        '''\n        Write a python function to print the prime numbers in a given list of numbers.\n        '''\n        for i in get_primes_list():\n            print(i)\n        print()\n    \n    def print_primes_prime():\n        '''\n        Write a python function to print the prime numbers in a given list of numbers.\n        '''\n        for i in get_primes_prime(x):\n            print(i)\n        print()\n        \n    def print_primes_prime_v2():\n        '''\n        Write a python function to print the prime numbers in a given list of numbers.\n        '''\n        for i in get_primes_prime(x):\n            print(reverse_pythag(i))\n        print()\n        \n    def get_primes():\n        '''\n        Write a python function to get the prime numbers from a given list of numbers.\n        '''\n        res = []\n        for i in range(2, x+1):\n            if count_primes(i)[1] == 2:\n                res.append(i)\n        return res\n        \n    def get_primes_prime_v2():\n        '''\n        Write a python function to get the prime numbers in a given list of numbers.\n        '''\n        res = []\n        for i in range(2, x+1):\n            if is_prime(i) == 'prime':\n                res.append(i)\n        return res\n        \n    def get_primes_prime_v3():\n        '''\n        Write a python function to get the prime numbers in a given list of numbers.\n        '''\n        res = []\n        for i in range(2, x+1):\n            if is_prime(i) == 'prime':\n                if reverse_pythag(i) == 2:\n                    res.append(reverse_pythag(i))\n                    print(reverse_pythag(i))\n                else:\n                    res.append(i)\n        return res\n    \n    def print_primes_prime_v3():\n        '''\n        Write a python function to print the prime numbers in a given list of numbers.\n        '''\n        res = []\n        for i in get_primes_prime(x):\n            if reverse_pythag(i) == 2:\n                print(reverse_pythag(i))\n            else:\n                res.append(i)\n        return res\n    \n    print('''\n    -----------------------------\n    |  1. Find all prime numbers from 1 to x |\n    -----------------------------\n    ''')\n    print()\n    print(f'The prime numbers from 1 to {x} are:')\n    print(get_primes_list())\n    \n    print()\n    print('''\n    -----------------------------\n    |  2. Find all prime numbers from 1 to x using reverse |\n    -----------------------------\n    ''')\n    print()\n    print(f'The prime numbers from 1 to {x} reverse are:')\n    print(get_primes_list())\n    \n    print()\n    print('''\n    -----------------------------\n    |  3. Find all prime numbers from 1 to x using reverse |\n    -----------------------------\n    ''')\n    print()\n    print(f'The prime numbers from 1 to {x} reverse are:')\n    print(get_primes_prime(x))\n    \n    print()\n    print('''\n    -----------------------------\n    |  4. Find all prime numbers from 1 to x using reverse |\n    -----------------------------\n    ''')\n    print()\n    print(f'The prime numbers from 1 to {x} reverse are:')\n    print(get_primes_prime_v2())\n    \n    print()\n    print('''\n    -----------------------------\n    |  5. Find all prime numbers from 1 to x using reverse |\n    -----------------------------\n    ''')\n    print()\n    print(f'The prime numbers from 1 to {x} reverse are:')\n    print(get_primes_prime_v3())\n    \n    print('''\n    -----------------------------\n    |  6. Print all prime numbers from 1 to x using reverse |\n    -----------------------------\n    ''')\n    print()\n    print(f'The prime numbers from 1 to {x} reverse are:')\n    print(get_primes_prime_v3())\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return x \n    else: \n        return 'Not Odd' \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #Your code here\n    odd_sum = 0\n    if x % 2 == 0:\n        odd_sum = x // 2\n    else:\n        odd_sum = (x + 1) // 2\n    if odd_sum % 2 == 0:\n        print(odd_sum, 'Is Odd')\n    else:\n        print(odd_sum, 'Is Even')\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else: \n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    for i in range(1,x):\n        if x % i == 0:\n            count += 1\n    if count % 2 == 1:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    is_odd = True\n    if x % 2!= 0: \n        is_odd = False\n    return is_odd\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x > 0:\n        if (x % 2) == 0:\n            print(\"Even\")\n        else:\n            print(\"odd\")\n    else:\n        print(\"Invalid input\")\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = '0123456789'\n    rearranged_num = 0\n    for i in str(n):\n        rearranged_num = int(i) + rearranged_num\n        for j in digits:\n            if rearranged_num % 10 == int(j):\n                break\n        rearranged_num = rearranged_num - rearranged_num % 10\n    return rearranged_num\n    \nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(2434))\nprint(rearrange_bigger(1234))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    '''\n    write your code here\n    '''\n    \n    answer = 0\n    for i in range(n):\n        answer += int(''.join([str(j) for j in str(answer)]))\n    return answer\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    small = n % 10\n    n = n // 10\n    big = n % 10\n    if big % 2 == 0:\n        n = n // 10\n    else:\n        n = n * 10 + small\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n//10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = 0\n    for i in range(10):\n        new_num += 10**(len(str(i))-1)\n    return new_num\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    \n    for digit in reversed(n_str):\n        if int(digit) <= 9:\n            new_digit = int(digit) + 1\n            if new_digit > 9:\n                new_digit = '0' * (new_digit - 9)\n            n_str = n_str[0:n_str.find(digit) + n_str.find(digit + new_digit)] + new_digit\n        else:\n            new_digit = int(digit)\n            n_str = n_str[0:n_str.find(digit) + n_str.find(digit + new_digit)] + '0' * (new_digit - 1) + digit\n        # print(n_str)\n    return n_str\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(number):\n        smallest_number = 0\n        for i in range(len(str(number))):\n            if str(number)[i] < str(smallest_number):\n                smallest_number = number[i]\n        number = smallest_number\n        return number\n    #if number is less than or equal to 9\n    if n <= 9:\n        return next_bigger(n)\n    #if n is greater than 9\n    else:\n        number = n\n        #since when we find the smallest number, we have to swap that number with the next number\n        #this number is the next bigger number\n        for i in range(len(str(number))):\n            if str(number)[i] < str(number):\n                number = next_bigger(number)\n        return number\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    for i in range(0,len(n)):\n        if i == 0:\n            digits = list(str(n))\n        else:\n            if n[i] == n[i-1]:\n                digits[i-1] = digits[i]\n            else:\n                digits[i] = digits[i-1] + digits[i-1]\n        n = ''.join(digits)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    print('rearrange_bigger(', n, ')')\n    if n < 10:\n        return n\n    else:\n        print('n is bigger than 10')\n        return n%10 + rearrange_bigger(n//10)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n        heapq.heappush(heap, (nums2[i], i))\n        \n    result = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 1:\n        # if there is only one element in the array then return the minimum pair\n        return min_heap(nums1)\n    # if there are two elements in the array then return the min pair\n    if len(nums1) < len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    # if there are one element in the array then return the min pair\n    elif len(nums1) == len(nums2):\n        return min_heap(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1_heap = []\n    nums2_heap = []\n    for num in nums1:\n        heapq.heappush(nums1_heap, -num)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    # Let's say we have a list of n elements and we have to choose at most K elements from the first array.\n    # Let's say K = 3.\n    # Let's say nums1 has length = 3, nums2 has length = 3 and so nums1[0] is 3, nums2[0] is 3\n    # and then we can have nums1[0] < nums2[0] because the sorted array is already in ascending order. So we need to find K such that nums1[0] < nums2[0].\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    l1 = []\n    l2 = []\n    \n    for i in range(len(nums1)):\n        l1.append(nums1[i])\n    for i in range(len(nums2)):\n        l2.append(nums2[i])\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    return compare(nums1, nums2, k, heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    h.append((nums1[0],nums1[1],nums1[0]))\n    heapq.heapify(h)\n    heapq.heappush(h, (nums1[0],0,nums1[0]))\n    for i in range(k-1):\n        if h[0][1] == h[-1][1]:\n            heapq.heappop(h)\n        else:\n            heapq.heappush(h,-1)\n    return list(h)\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n        heapq.heappush(heap, (nums2[i], i))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a list with the tuples\n    temp_list = []\n    for i in list1:\n        temp_list.append(i)\n    for i in range(1, len(temp_list)):\n        temp_list[i] = temp_list[i] * temp_list[i-1]\n    return temp_list[-1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 0:\n        return 0\n    minimum = list1[0][0] * list1[1][0]\n    for i in range(2, len(list1)):\n        minimum = list1[i][0] * minimum\n        minimum = minimum + list1[i][1] * list1[i][1]\n    return minimum\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res = []\n    for i in list1:\n        for j in list1:\n            if i < j:\n                res.append(i * j)\n    return min(res)\n    \ndef largest_product_tuple(list1):\n    '''\n    Write a function to find the largest product from a list of tuples.\n    '''\n    res = []\n    for i in list1:\n        for j in list1:\n            if i < j:\n                res.append(i * j)\n    return max(res)\n    \ndef product_tuple(list1):\n    '''\n    Write a function to get the product of the elements within a list of tuples.\n    '''\n    res = []\n    for i in list1:\n        for j in list1:\n            if i < j:\n                res.append(i * j)\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0]*list1[1][1]\n    for i in range(0,len(list1)-1):\n        for j in range(0,i+1):\n            min = min if (list1[i][0]*list1[j][1]) < min else list1[i][0]*list1[j][1]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_tuple = None\n    min_tuple_val = None\n    for i in list1:\n        if (i[0] < min_tuple_val) and (i[1] < min_tuple_val):\n            min_tuple_val = i[0]\n            min_tuple = i\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][1]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1] < list1[j][1]:\n                min_product = min(min_product, list1[i][1] * list1[j][1])\n            else:\n                min_product = min(min_product, list1[j][1] * list1[i][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = sys.maxsize\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return (0,0)\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        return (list1[0][0]*min_product_tuple(list1[1:]), list1[0][1]*min_product_tuple(list1[1:]))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 0:\n        return None\n    min_product = float(\"inf\")\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            min_product = min(min_product,list1[i][1]*list1[j][1])\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for element in listval:\n        if element < min_val:\n            min_val = element\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    min = float(\"inf\")\n    for val in listval:\n        if val < min:\n            min = val\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in listval:\n        if (min_val is None) or (i < min_val):\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Get the smallest value\n    min = listval[0]\n    for item in listval:\n        if item < min:\n            min = item\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float(\"inf\")\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    i=0\n    listval.sort()\n    while(i<len(listval)-1):\n        if(listval[i]<listval[i+1]):\n            return listval[i]\n        i=i+1\n    return listval[i]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for item in listval:\n        if item < min:\n            min = item\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_string = re.sub(r'[A-Z]', lambda x:x.group(0).lower(), word)\n    if len(camel_case_string) > 0:\n        return camel_case_string.lower()\n    else:\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'[^\\w\\s]+', '', word)\n    if word.isupper() and not word.startswith('_'):\n        return word.lower()\n    else:\n        return re.sub(r'[^\\w\\s]+', '', word.title()).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #TODO - Implement me\n    #Might want to add a more robust and tidy up.\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('([a-z]+)([A-Z])*')\n    return pattern.sub(r'\\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(((?<=[a-z])[A-Z])|(?<=[A-Z])[A-Z])', r' \\1', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = ''\n    for char in word:\n        if char.isupper():\n            new_word += char.lower()\n        else:\n            new_word += char.title()\n    return new_word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    new_word = ''\n    for char in word:\n        if char.isalpha():\n            new_word += char\n        else:\n            new_word += char.lower()\n    return new_word\ndef trans_camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = ''\n    for char in word:\n        if char.isalpha():\n            new_word += char.upper()\n        else:\n            new_word += char.title()\n    return new_word\ndef camel_to_snake_list(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    new_word = ''\n    for char in word:\n        if char.isalpha():\n            new_word += char\n        else:\n            new_word += char.lower()\n    return new_word\ndef snake_to_camel_list(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = ''\n    for char in word:\n        if char.isalpha():\n            new_word += char\n        else:\n            new_word += char.title()\n    return new_word\ndef trans_camel_to_snake_list(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    new_word = ''\n    for char in word:\n        if char.isalpha():\n            new_word += char\n        else:\n            new_word += char.title()\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.match('[^A-Za-z0-9]', word) == None:\n        return word\n    else:\n        return word.title() + \"\".join([el.upper() if el.isupper() else el.lower() for el in word])\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2==1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_nums = []\n    for item in l:\n        if item%2 == 0:\n            odd_nums.append(item)\n    print(odd_nums)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = sorted(l)\n    index = 0\n    while index < len(l):\n        if l[index] % 2!= 0:\n            l.pop(index)\n            index -= 1\n        else:\n            index += 1\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #remove numbers from a list \n    l=[]\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2, l))\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    print('remove odd numbers from list:')\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l.pop(i)\n            print(l)\n        \n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    if len(l) % 2!= 0:\n        l[-1], l[-2] = l[-2], l[-1]\n    else:\n        pass\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code here\n    l = [int(x) for x in l]\n    l.sort()\n    if l[0] % 2 == 0:\n        l.pop(0)\n    else:\n        l.pop(0)\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n >= len(list1):\n        raise Exception('n must be an integer between 0 and {}.'.format(len(list1)))\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[i][n] for i in range(len(list1)))\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return 'No found'\n    elif n < 1:\n        return 'No found'\n    else:\n        return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # if n is not an integer:\n    #     print(\"Enter a non-negative integer\")\n    #     return\n    # if n<0:\n    #     print(\"Enter a non-negative integer\")\n    #     return\n    #     # return\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n][1])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if(list1==list2):\n        return True\n    else:\n        return False\ndef duplicates(list1):\n    '''\n    Write a python function to check whether a list contains duplicate elements or not.\n    '''\n    for element in list1:\n        if(list1.count(element)>1):\n            return False\n    return True\ndef unique(list1):\n    '''\n    Write a python function to check whether the input list contains all the unique elements of a given list.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef count(list1):\n    '''\n    Write a python function to count the number of elements in a list.\n    '''\n    if(list1==list(set(list1))):\n        return len(list1)\n    else:\n        return 0\ndef unique_elements(list1):\n    '''\n    Write a python function to check whether a list contains duplicate elements or not.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef multiple_elements(list1):\n    '''\n    Write a python function to check whether the given list contains multiple elements or not.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef index(list1,value):\n    '''\n    Write a python function to check whether the input list contains the specific value or not.\n    '''\n    if(list1==list(set(list1))):\n        if(list1.index(value)==list1.index(value)):\n            return True\n        else:\n            return False\ndef delete(list1,value):\n    '''\n    Write a python function to delete a specific element from a list.\n    '''\n    if(list1==list(set(list1))):\n        for i in range(len(list1)):\n            if(list1[i]==value):\n                del list1[i]\n                break\n            else:\n                continue\n    else:\n        return False\ndef swap(list1,value):\n    '''\n    Write a python function to swap the specific element in a list.\n    '''\n    if(list1==list(set(list1))):\n        for i in range(len(list1)):\n            list1[i],list1[i+1] = list1[i+1],list1[i]\n    else:\n        return False\ndef merge(list1,list2):\n    '''\n    Write a python function to merge two lists into a single list.\n    '''\n    if(list1==list(set(list1))):\n        return list1\n    else:\n        return False\ndef index(list1,value):\n    '''\n    Write a python function to check whether the input list contains the specific value or not.\n    '''\n    if(list1==list(set(list1))):\n        if(list1.index(value)==list1.index(value)):\n            return True\n        else:\n            return False\ndef odd_even_squaring(list1):\n    '''\n    Write a python function to check whether the list contains odd or even squares or not.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef even_squaring(list1):\n    '''\n    Write a python function to check whether the list contains even squares or not.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef unique_odd(list1):\n    '''\n    Write a python function to check whether the list contains unique odd or not.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef unique_even(list1):\n    '''\n    Write a python function to check whether the list contains unique even or not.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef squares(list1):\n    '''\n    Write a python function to check whether the list contains all the squares or not.\n    '''\n    if(list1==list(set(list1))):\n        return True\n    else:\n        return False\ndef index(list1,value):\n    '''\n    Write a python function to check whether the input list contains the specific value or not.\n    '''\n    if(list1==list(set(list1))):\n        if(list1.index(value)==list1.index(value)):\n            return True\n        else:\n            return False\ndef main():\n    '''\n    Write a python function to print the smallest and largest element in a given list.\n    '''\n    print(\"The smallest value in a list is\",min(list1))\n    print(\"The largest value in a list is\",max(list1))\n    print(\"The unique elements of a list are:\",unique(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(list1))\n    print(\"The duplicate elements of a list are:\",duplicates(lis"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==[] or list2==[]:\n        return False\n    if list1[-1]!=list2[0]:\n        return False\n    else:\n        for i in range(len(list1)-1):\n            if list1[i]!=list2[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \ndef compute_logsum(n,list):\n    '''\n    Write a python function to compute the log sum of a sequence.\n    '''\n    list.sort()\n    current = list[0]\n    total = 0\n    for i in list:\n        if i > current:\n            total += i - current\n        else:\n            current = i\n    return total\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    def all_overlap(seq1,seq2):\n        '''\n        Write a python function to check whether any value in a sequence exists in a sequence or not.\n        '''\n        seq1_keys = list(seq1.keys())\n        seq2_keys = list(seq2.keys())\n        seq1_val = list(seq1.values())\n        seq2_val = list(seq2.values())\n        for x in seq1_keys:\n            if x in seq2_keys:\n                pass\n            else:\n                return False\n        for x in seq2_keys:\n            if x not in seq1_keys:\n                return False\n        if len(seq1_val)==0:\n            return False\n        for x in seq1_val:\n            if x not in seq2_val:\n                return False\n        return True\n    overlap = all_overlap(list1,list2)\n    if overlap:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.count(list2) == len(list1) and list1 or list2 in list1\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    new_list = []\n    if len(list1)==len(list2):\n        for i in list1:\n            if i in list2:\n                new_list.append(i)\n        return new_list\n    else:\n        return 'Two input lists should have the same length'\nprint(overlapping([1,2,3,4,5],[2,3,4,5,6,7,8]))\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # any occur in a list\n    for i in list1:\n        if list2.count(i) == 0:\n            print(\"No\")\n            return False\n    print(\"Yes\")\n    return True\n        \n    # any occur in a sequence\n    for i in range(len(list1)):\n        if list2.count(list1[i]) == 0:\n            print(\"No\")\n            return False\n    print(\"Yes\")\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n    # test case\n    # [1,2,3,4,5,6,7,8] and [1,2,3,4,5,6,7,8] are not overlapping\n    #\n    # return True\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\n    # print(overlapping([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # TODO: Implement overlapping method \n    list1_set = set(list1)\n    list2_set = set(list2)\n    if list1_set & list2_set:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr)\n    p = arr[0]\n    for i in range(l): \n        for j in range(i + 1, l): \n            if (arr[i] * arr[j] > p): \n                p = arr[i] * arr[j] \n                idx = i \n                jn = j \n    if (idx == l - 1): \n        return -1\n    return idx, jn\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1]>arr[i+1]:\n            return arr[i]+arr[i+1]\n    return arr[i+1]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProd = 0\n    for i in arr:\n        if i > maxProd:\n            maxProd = i\n        elif i == maxProd:\n            pass\n        elif i > maxProd:\n            pass\n    return maxProd\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 1:\n        return (arr[0], 1)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 1:\n        return arr\n    elif len(arr) == 2:\n        return max(arr)\n    else:\n        maximum = arr[0]\n        for i in range(len(arr) - 1):\n            if arr[i] * arr[i + 1] > maximum:\n                maximum = arr[i] * arr[i + 1]\n        return maximum\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    arr.sort()\n    for i in range(n-2):\n        if arr[i]*arr[i+1]>arr[i+2]:\n            return (arr[i],arr[i+2])\n    return None\ndef min_Product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    n=len(arr)\n    arr.sort()\n    for i in range(n-2):\n        if arr[i]*arr[i+1]<arr[i+2]:\n            return (arr[i],arr[i+2])\n    return None\ndef sum_of_product(arr):\n    '''\n    Write a python function to find sum of all product of numbers in a given array.\n    '''\n    n=len(arr)\n    arr.sort()\n    sum=0\n    for i in range(n):\n        sum+=arr[i]*arr[i]\n    return sum\ndef product(arr):\n    '''\n    Write a python function to find product of all numbers in a given array.\n    '''\n    n=len(arr)\n    arr.sort()\n    prod=1\n    for i in range(n):\n        prod*=arr[i]\n    return prod\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # case 1: base case, when an element is all 0\n    if sum(arr) == 0:\n        return None\n    # case 2: when all elements are 1\n    if arr == [1] or arr == [0]:\n        return None\n    # case 3: when two elements are 1\n    if arr[0] == arr[1] or arr[0] == arr[2]:\n        return None\n    # case 4: when one element is greater than the other\n    if arr[0] > arr[1] and arr[0] > arr[2]:\n        return arr[0]\n    # case 5: when one element is smaller than the other\n    if arr[0] < arr[1] and arr[0] < arr[2]:\n        return arr[1]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    \n    for i in range(1, len(arr)):\n        j = i\n        while j > 0 and arr[j]*arr[i] > arr[j - 1]:\n            j -= 1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    highest = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[j] * arr[i]) > highest:\n                highest = arr[j] * arr[i]\n    return highest\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = []\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if Input[i] == Input[j]:\n                list_of_tuples.append(Input[i])\n    return list_of_tuples\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input) \n    First = Input[0] \n    for i in range(1,len(Input)): \n        if Input[i][0] == First: \n            return Input[i] \n        else: \n            return 'Error'\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Your code here\n    #create an empty list\n    list1=[]\n    for elem in Input:\n        if elem not in list1:\n            list1.append(elem)\n    #create a tuple list\n    list2=list(list1)\n    #print(list2)\n    #if there is no same first element in the list\n    if list2==list1:\n        return list2\n    else:\n        #find all the element in the list that are not in the tuple list\n        list3=[]\n        for elem in list2:\n            if elem not in list3:\n                list3.append(elem)\n        return list3"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    s = set(Input) \n    if len(s) == 1: \n        return s.pop() \n    else: \n        return set([t for t in s]).pop() \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #TODO\n    pass\n    #EXAMPLE\n    #Input = [1,4,2,7,3,5]\n    #Output = 2\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Result = []\n    for x in Input:\n        if x not in Result:\n            Result.append(x)\n    return Result\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return None\n    elif len(Input) == 1:\n        return Input[0]\n    else:\n        for i in range(0,len(Input),2):\n            if Input[i] == Input[i+1]:\n                return Input[i]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a list of tuples\n    Tuple = [(x, y) for x in Input for y in Input if x == y]\n    # combine them into a list\n    Tuple = list(set(Tuple)) \n    # sort the tuple\n    Tuple = sorted(Tuple) \n    # return the first tuple\n    return Tuple[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # STEP 1: Initialize Output with first element\n    Output = []\n    # Step 2: Iterate through each tuple\n    for x in Input:\n        # STEP 2: Check if element is present in tuple\n        if x in Output:\n            # STEP 3: If yes, keep the index\n            continue\n        # STEP 4: Else, if the element is not present, create an output element with the first element\n        else:\n            # STEP 5: Iterate through each other element\n            for y in Input:\n                # STEP 6: If element is present in both the tuple, create an output element\n                if x == y:\n                    # STEP 7: Update the index of the tuple\n                    Output.append((x, y))\n    # STEP 8: Return the list of tuples\n    return Output"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_num = 0\n    \n    for i in range(len(lst)):\n        if lst[i] > max_num:\n            max_num = lst[i]\n            max_length = i\n    return max_num, max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # lst = ['I','J','K','L']\n    # for i in range(len(lst)):\n    #     if len(lst[i]) >= len(lst[i-1]):\n    #         return lst[i]\n    #     else:\n    #         lst[i] = lst[i-1]\n    #         return lst[i]\n    \n    return lst[0]\n        \nlst = ['I','J','K','L','M']\nprint(Find_Max(lst))\n        "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(str(i)) > max:\n            max = len(str(i))\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return \"No elements in the list\"\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0]\n    \n    # We have two choice:\n    # For Find_Max in Python\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # #print(len(lst))\n    # # for i in range(len(lst)):\n    # #     if lst[i] == max(lst):\n    # #         lst[i] = lst[i]\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    # for i in range(len(lst)):\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], lst[i])\n    #     if lst[i] == max(lst):\n    #         lst[i] = lst[i]\n    #         if i > 0:\n    #             lst[i] = max(lst[i-1], "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    l = lst[:]\n    l.sort()\n    max = l[0]\n    for i in range(len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    l = lst[:]\n    l.sort()\n    min = l[0]\n    for i in range(len(l)):\n        if l[i] < min:\n            min = l[i]\n    return min"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == None:\n        return None\n    else:\n        if len(lst) == 0:\n            return 0\n        else:\n            min = lst[0]\n            index = 0\n            for i in range(len(lst)):\n                if lst[i] < min:\n                    min = lst[i]\n                    index = i\n            return index\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(str(i)) > max:\n            max = len(str(i))\n    return max\nlst = [1, 1, 3, 4, 5, 2, 5, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0, 1, 2, 8, 6, 4, 7, 3, 5, 9, 0"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = len(lst)\n    if lst_len == 0: \n        return -1\n    elif lst_len == 1: \n        return lst[0]\n    else: \n        for i in range(lst_len-1): \n            if lst[i] > lst[i+1]: \n                return lst[i+1]\n    return -1\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > max_len:\n            max_len = lst[i]\n    return max_len\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    # Calculate the sum and length of list\n    sum = 0\n    count = 0\n    \n    for element in list1:\n        sum += element\n        count += 1\n        \n    # Print the sum and the length of the list\n    print('The total sum of'+ str(count) +'numbers is'+ str(sum))\n    \n    # Return the sum and length of the list\n    return sum, count\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i*len(list1),0)\n    print(total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    print(f'{sum * len(list1)}')\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1) > 0:\n        total_sum = 0\n        for num in list1:\n            total_sum += num\n        for num in list1:\n            print(total_sum)\n        print(total_sum)\n    else:\n        print(\"Error: cannot create a list of numbers from an empty list\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    summ = 0\n    for number in list1:\n        summ += number\n    print(summ)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for item in list1:\n        total_sum += item\n    print(total_sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    print(sum/len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s=0\n    for i in list1:\n        s+=i\n    return s\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Create a new list of integers\n    integer_list = []\n    for number in list1:\n        integer_list.append(int(number))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum*len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes_sum = 1\n    for i in range(n):\n        cubes_sum *= i ** 2\n    print(cubes_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    from math import sqrt \n    return int(sqrt(n) * n) \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\nprint(cube_Sum(5))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i**3\n    return ans\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) * (n + 9) * (n + 10) * (n + 11)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i ** 3)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum\nn = int(input())\nprint(cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i < n:\n        sum = sum + i * i * i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if type(test_tup[0]) == str:\n        test_tup = tuple(test_tup)\n    return tuple(map(lambda x: str(x), test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    list_of_tup = []\n    for i in test_tup:\n        list_of_tup.append(i)\n    return tuple(list_of_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) +''\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = test_tup[0]\n    for e in test_tup[1:]:\n        new_tup = new_tup + e\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    str1=str(test_tup[0])\n    str2=str(test_tup[1])\n    str3=str(test_tup[2])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(tuple(test_tup))\n    \ndef get_names(test_tup):\n    '''\n    Write a function to return the name of the first element of tuple.\n    '''\n    return test_tup[0]\n    \ndef get_num_of_a(test_tup):\n    '''\n    Write a function to return the number of times the first element of tuple appears.\n    '''\n    count = 0\n    for x in test_tup:\n        if x == 'a':\n            count += 1\n    return count\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + ''.join(map(str, test_tup[1]))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_tuple = ''\n    for i in test_tup:\n        str_tuple = str_tuple + i\n    return str_tuple\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_tup = test_tup[0]\n    for i in range(len(test_tup[1])):\n        concat_tup = concat_tup + test_tup[1][i]\n    return concat_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (\"\",)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    sum = 0\n    for i in lst:\n        sum = sum + i\n    return sum / n\n    \ndef find_Average_Of_List(n):  \n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    sum = 0\n    for i in lst:\n        sum = sum + i\n    return sum / n\n    \ndef find_Average_Of_Dict(n):  \n    '''\n    Write a python function to find the average of a dictionary.\n    '''\n    d = {'a':1,'b':2,'c':3, 'd':4, 'e':5}\n    sum = 0\n    for key,value in d.items():\n        sum = sum + value\n    return sum / n\n    \ndef find_Average_Of_Range(start, end):  \n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_Set(n):  \n    '''\n    Write a python function to find the average of a set of numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + i\n    return sum / n\n    \ndef find_Average_Of_Range_Set(start, end):  \n    '''\n    Write a python function to find the average of a range of numbers.\n    '''\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_Set_Range(start, end):  \n    '''\n    Write a python function to find the average of a set of numbers.\n    '''\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_Two_Dicts(n):  \n    '''\n    Write a python function to find the average of two dictionaries.\n    '''\n    d = {'a':1,'b':2,'c':3}\n    e = {'d':4,'e':5}\n    sum = 0\n    for key,value in d.items():\n        sum = sum + value\n    for key,value in e.items():\n        sum = sum + value\n    return sum / n\n    \ndef find_Average_Of_Two_Dicts_Range(start, end):  \n    '''\n    Write a python function to find the average of two dictionaries.\n    '''\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_Dict_Range(n):  \n    '''\n    Write a python function to find the average of a dictionary.\n    '''\n    d = {'a':1,'b':2,'c':3}\n    e = {'d':4,'e':5}\n    sum = 0\n    for key,value in d.items():\n        sum = sum + value\n    for key,value in e.items():\n        sum = sum + value\n    return sum / n\n    \ndef find_Average_Of_Dict_Range_Set(n):  \n    '''\n    Write a python function to find the average of a dictionary.\n    '''\n    d = {'a':1,'b':2,'c':3}\n    e = {'d':4,'e':5}\n    sum = 0\n    for key,value in d.items():\n        sum = sum + value\n    for key,value in e.items():\n        sum = sum + value\n    return sum / n\n    \ndef find_Average_Of_Set_Range_Set(start, end):  \n    '''\n    Write a python function to find the average of a set of numbers.\n    '''\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_Set_Range_Set(start, end):  \n    '''\n    Write a python function to find the average of a set of numbers.\n    '''\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_Two_Dicts_Range_Set(n):  \n    '''\n    Write a python function to find the average of two dictionaries.\n    '''\n    d = {'a':1,'b':2,'c':3}\n    e = {'d':4,'e':5}\n    sum = 0\n    for key,value in d.items():\n        sum = sum + value\n    for key,value in e.items():\n        sum = sum + value\n    return sum / n\n    \ndef find_Average_Of_Two_Dicts_Range_Set(start, end):  \n    '''\n    Write a python function to find the average of two dictionaries.\n    '''\n    sum = 0\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_List_Range(n):  \n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + i\n    return sum / n\n    \ndef find_Average_Of_List_Range_Set(start, end):  \n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    sum = 0\n    for i in range(0, start):\n        sum = sum + i\n    for i in range(start, end + 1):\n        sum = sum + i\n    return sum / (end - start)\n    \ndef find_Average_Of_Dict_Range_Set(n):  \n    '''\n    Write a python function to find the average of a dictionary.\n    '''\n    d = {'a':1,'b':2,'c':3}\n    e = {'d':4,'e':5}\n    sum = 0\n    for key,value in d.items():\n        sum = sum + value\n    for key,value in e.items():\n        sum = sum + value\n    return sum / n\n    \ndef find_Average_Of_Dict_Range_Set(start, end)"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return round(result/n, 2)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    print(cubes)\n    sum = 0\n    for j in range(n):\n        sum = sum + cubes[j]\n    print(sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_of_n = []\n    for n in range(1, n + 1):\n        cubes_of_n.append(n ** 3)\n    \n    average = sum(cubes_of_n) / len(cubes_of_n)\n    \n    return average\n    \ndef find_Average_Of_Cube_2(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_of_n = []\n    for n in range(1, n + 1):\n        cubes_of_n.append(n ** 3)\n    \n    cubes_of_n.sort()\n    average = sum(cubes_of_n[:len(cubes_of_n)//2])/len(cubes_of_n[:len(cubes_of_n)//2])\n    \n    return average\n    \ndef find_Average_Of_Cube_3(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_of_n = []\n    for n in range(1, n + 1):\n        cubes_of_n.append(n ** 3)\n    \n    cubes_of_n.sort()\n    average = sum(cubes_of_n[:len(cubes_of_n)//2])/len(cubes_of_n[:len(cubes_of_n)//2])\n    \n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    for i in range(1, n+1):\n        print(i**3)\n    return 0.0\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n + 1):\n        cubes.append(i**3)\n    return sum(cubes) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for x in range(n):\n        sum_of_cubes += x ** 3\n    return sum_of_cubes / (3**n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <=0:\n        print(\"Enter a positive integer\")\n        return None\n    for i in range(1,n+1):\n        print(i,end='')\n    print()\n    print(cube(n))\n    return(cube(n))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i ** 3\n    return cube_sum / (n ** 3)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front = 0\n    rear = []\n    for i in test_tuple:\n        front += 1\n        rear.append(i[front])\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    rear_index_list = []\n    for data in test_tuple:\n        rear_index.append(len(data.replace('\\r','')))\n    for i in range(0,len(rear_index)):\n        if rear_index[i] == 0:\n            rear_index_list.append(i)\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #print(test_tuple)\n    rear_index_array = []\n    for element in test_tuple:\n        rear_index_array.append(list(map(int, element.split(','))))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    arr = []\n    for item in test_tuple:\n        arr.append(item[-1])\n    return arr\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple)\n    out = []\n    for ele in test_tuple:\n        out.append(ele[-1])\n    return out\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # TODO: Write your function here\n    indexes = [i for i, x in enumerate(test_tuple) if x == 'Rear']\n    return indexes"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n    \ndef extract_rear_list(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[2]\n    \ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n    \ndef extract_front_list(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    str1 = ''.join(test_tuple)\n    return str1[::-1].find('/')\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_list = test_tuple[0]\n    \n    rear_index_list = []\n    \n    for i in range(len(tuple_list)):\n        rear_index_list.append(tuple_list[i][-1])\n        \n    return(tuple(rear_index_list))\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result=0\n    for element in list1:\n        if element == x:\n            result+=1\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in list1:\n        if i[x] == x:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for l in list1:\n        result += l.count(x)\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count=count+1\n    return count\n    \ndef recursive_function(list1):\n    '''\n    Write a recursive function to find the number of sublists containing the element x.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count=count+1\n    return count\n    \ndef find_list_containing_x(list1, x):\n    '''\n    Write a function to find the element in a list which is the same as x.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==x:\n            return i\n    return -1\n    \ndef find_list_containing_x_without_recursive(list1, x):\n    '''\n    Write a function to find the element in a list which is the same as x.\n    This function is more efficient than find_list_containing_x in the base case\n    '''\n    if len(list1)==1:\n        return find_list_containing_x_without_recursive(list1,x)\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count=count+1\n    return count\n    \ndef is_element_in_list(list1, x):\n    '''\n    Write a function to check if the list contains a particular element.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==x:\n            return True\n    return False\n    \ndef is_element_in_list_without_recursive(list1, x):\n    '''\n    Write a function to check if the list contains a particular element.\n    This function is more efficient than is_element_in_list in the base case\n    '''\n    if len(list1)==1:\n        return is_element_in_list_without_recursive(list1,x)\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count=count+1\n    return count==1\n    \ndef sub_lists_containing_x(list1, x):\n    '''\n    Write a recursive function to return a list containing sublists which contains a particular element x.\n    '''\n    list2=[]\n    count=0\n    count1=0\n    def recursive(list1, x, start, end, count):\n        if start>end:\n            return \n        if count==0:\n            for i in range(start,end):\n                if list1[i]==x:\n                    count1=count1+1\n                    list2.append(list1[i])\n                    count=count+1\n        if count==1:\n            for i in range(start,end):\n                if list1[i]==x:\n                    count1=count1+1\n                    list2.append(list1[i])\n                    count=count+1\n        recursive(list1, x, start+1, end, count)\n        recursive(list1, x, start+1, end, count1)\n    recursive(list1, x, 0, len(list1), 0)\n    return list2\n    \ndef sub_lists_containing_x_without_recursive(list1, x):\n    '''\n    Write a recursive function to return a list containing sublists which contains a particular element x.\n    This function is more efficient than sub_lists_containing_x in the base case\n    '''\n    if len(list1)==1:\n        return sub_lists_containing_x_without_recursive(list1, x)\n    count=0\n    list2=[]\n    count1=0\n    def recursive(list1, x, start, end, count):\n        if start>end:\n            return \n        if count==0:\n            for i in range(start,end):\n                if list1[i]==x:\n                    count1=count1+1\n                    list2.append(list1[i])\n                    count=count+1\n        if count==1:\n            for i in range(start,end):\n                if list1[i]==x:\n                    count1=count1+1\n                    list2.append(list1[i])\n                    count=count+1\n        recursive(list1, x, start+1, end, count)\n        recursive(list1, x, start+1, end, count1)\n    recursive(list1, x, 0, len(list1), 0)\n    return list2\n    \ndef union_of_sublists(list1, list2):\n    '''\n    Write a function that returns a list containing sublists that are \n    equal to the elements of list2.\n    '''\n    list2=list2.copy()\n    list1=list1.copy()\n    count=0\n    def recursive(list1, list2, i, j, count):\n        if i>=len(list1):\n            return \n        if j>=len(list2):\n            return \n        if list1[i]!=list2[j]:\n            list2[count]=list1[i]\n            count=count+1\n            recursive(list1, list2, i+1, j, count)\n            recursive(list1, list2, i+1, j+1, count)\n    recursive(list1, list2, 0, 0, 0)\n    return list2\n    \ndef union_of_sublists_without_recursive(list1, list2):\n    '''\n    Write a function that returns a list containing sublists that are \n    equal to the elements of list2.\n    '''\n    list2=list2.copy()\n    list1=list1.copy()\n    count=0\n    def recursive(list1, list2, i, j, count):\n        if i>=len(list1):\n            return \n        if j>=len(list2):\n            return \n        if list1[i]!=list2[j]:\n            list2[count]=list1[i]\n            count=count+1\n            recursive(list1, list2, i+1, j, count)\n            recursive(list1, list2, i+1, j+1, count)\n    recursive(list1, list2, 0, 0, 0)\n    return list2\n    \ndef add_element_to_list(list1, x):\n    '''\n    Write a function to add a new element to a list.\n    '''\n    list1.append(x)\n    \ndef count_elements(list1):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==1:\n            count=count+1\n    return count\n    \ndef count_elements_in_list(list1):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==1:\n            count=count+1\n    return count\n    \ndef find_list_containing_x_in_list(list1, x):\n    '''\n    Write a function to find the element in a list which is the same as x.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==x:\n            return i\n    return -1\n    \ndef find_list_containing_x_in_list_without_recursive(list1, x):\n    '''\n    Write a function to find the element in a list which is the same as x.\n    This function is more efficient than find_list_containing_x_in_list in the base case\n    '''\n    if len(list1)==1:\n        return find_list_containing_x_in_list_without_recursive(list1,x)\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count=count+1\n    return count\n    \nde"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    total_count = 0\n    for index, element in enumerate(list1):\n        if element == x:\n            total_count += 1\n    return total_count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][x] == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    # loop through the list\n    for i in range(len(list1)):\n        # if the element is in the list\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # TODO: Create a function that returns a count.\n    #       Hint: The count should count the number of sublists whose first \n    #           element is x.\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if list1[i] == x: \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if i[x] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            filtered_nums.append(num)\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n            print(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    def odd_num(num):\n        if (num % 2 == 0):\n            return True\n        return False\n    return list(filter(odd_num, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # loop through all the numbers\n    # if it is divisible by 2 then it will be divisible by 3\n    # if it is divisible by 5 then it will be divisible by 7\n    # if it is divisible by 3 then it will be divisible by 5\n    # if it is divisible by 2 then it will be divisible by 7\n    # if it is not divisible by any then it will be divisible by 1\n    for num in nums:\n        if num%2 == 0:\n            if num%3 == 0:\n                if num%7 == 0:\n                    return True\n            else:\n                return True\n        else:\n            if num%5 == 0:\n                if num%7 == 0:\n                    return True\n            else:\n                return True\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    newlist = []\n    for i in nums:\n        if i%2!= 0:\n            newlist.append(i)\n    return newlist\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    mm = dt.split('-')\n    yy = mm[0]\n    mm = mm[1]\n    dd = mm[2]\n    dd = dt.split('-')[2]\n    dd = dt.split('-')[2]\n    \n    yy = yy[0]\n    mm = mm[0]\n    dd = dd[0]\n    mm = mm[1]\n    \n    return '%s-%s-%s' % (yy, mm, dd)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # dd-mm-yyyy --> dd-mm-yy\n    y=dt.split('-')\n    m=y[2]\n    d=y[0]\n    h=y[1]\n    if int(m)<10:\n        m=\"0\"+m\n    if int(d)<10:\n        d=\"0\"+d\n    if int(h)<10:\n        h=\"0\"+h\n    \n    return d+\"-\"+m+\"-\"+d+\"-\"+h\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d+-\\d+-\\d+'\n    matches = re.findall(pattern, dt)\n    return '-'.join(matches)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    print(date)\n    return '{}-{}-{}'.format(date[2],date[0],date[1])\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[:-7].replace(\"-\",\"\").replace(\"/\",\"-\")\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt)!= 10:\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    d, m, y = dt.split('-')\n    y = int(y)\n    if not (11 <= y <= 99):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    day, month, year = d.split('-')\n    if not (1 <= int(month) <= 12):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (3 <= int(day) <= 31):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (10 <= int(m) <= 12):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (4 <= int(year) <= 99):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    return \"%s-%s-%s\"%(day, month, year)\ndef change_time_format(t):\n    '''\n    Write a function to convert a time of yyyy-mm-dd HH:MM:SS format to HH:MM:SS format.\n    '''\n    if len(t)!= 10:\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    h, m, s = t.split(':')\n    h = int(h)\n    m = int(m)\n    s = int(s)\n    if not (11 <= h <= 23):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    if not (11 <= m <= 59):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    if not (1 <= int(s) <= 59):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    return \"%02d:%02d:%02d\"%(h, m, s)\ndef change_duration_format(duration):\n    '''\n    Write a function to convert a duration of HH:MM:SS format to H:MM:SS format.\n    '''\n    if len(duration)!= 10:\n        print(\"Please enter the correct duration format: HH:MM:SS\")\n        return\n    h, m, s = duration.split(':')\n    h = int(h)\n    m = int(m)\n    s = int(s)\n    if not (11 <= h <= 23):\n        print(\"Please enter the correct duration format: HH:MM:SS\")\n        return\n    if not (11 <= m <= 59):\n        print(\"Please enter the correct duration format: HH:MM:SS\")\n        return\n    if not (1 <= int(s) <= 59):\n        print(\"Please enter the correct duration format: HH:MM:SS\")\n        return\n    return \"%02d:%02d:%02d\"%(h, m, s)\ndef change_date_format_to_time(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to HH:MM:SS format.\n    '''\n    if len(dt)!= 10:\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    d, m, y = dt.split('-')\n    y = int(y)\n    if not (11 <= y <= 99):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    day, month, year = d.split('-')\n    if not (1 <= int(month) <= 12):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (3 <= int(day) <= 31):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (10 <= int(m) <= 12):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (4 <= int(year) <= 99):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    return \"%02d-%02d-%02d\"%(day, month, year)\ndef change_time_format_to_duration(t):\n    '''\n    Write a function to convert a time of yyyy-mm-dd HH:MM:SS format to H:MM:SS format.\n    '''\n    if len(t)!= 10:\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    h, m, s = t.split(':')\n    h = int(h)\n    m = int(m)\n    s = int(s)\n    if not (11 <= h <= 23):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    if not (11 <= m <= 59):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    if not (1 <= int(s) <= 59):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    return \"%02d:%02d:%02d\"%(h, m, s)\ndef change_date_format_to_duration(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to HH:MM:SS format.\n    '''\n    if len(dt)!= 10:\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    d, m, y = dt.split('-')\n    y = int(y)\n    if not (11 <= y <= 99):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    day, month, year = d.split('-')\n    if not (1 <= int(month) <= 12):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (3 <= int(day) <= 31):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (10 <= int(m) <= 12):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    if not (4 <= int(year) <= 99):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    return \"%02d:%02d:%02d\"%(day, month, year)\ndef change_time_format_to_duration(t):\n    '''\n    Write a function to convert a time of yyyy-mm-dd HH:MM:SS format to H:MM:SS format.\n    '''\n    if len(t)!= 10:\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    h, m, s = t.split(':')\n    h = int(h)\n    m = int(m)\n    s = int(s)\n    if not (11 <= h <= 23):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    if not (11 <= m <= 59):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    if not (1 <= int(s) <= 59):\n        print(\"Please enter the correct time format: HH:MM:SS\")\n        return\n    return \"%02d:%02d:%02d\"%(h, m, s)\ndef change_date_format_to_duration(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to HH:MM:SS format.\n    '''\n    if len(dt)!= 10:\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    d, m, y = dt.split('-')\n    y = int(y)\n    if not (11 <= y <= 99):\n        print(\"Please enter the correct date format: yyyy-mm-dd\")\n        return\n    day, month, year = d.split('-')\n    if not ("
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        year, month, day = dt.split('-')\n        return '{}{}{}'.format(day, month, year)\n    except:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-', '-').replace('.', '-')\n    pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    regex = re.compile(pattern)\n    return regex.sub(r'\\1-\\2-\\3', dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        match = re.match(\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\", dt)\n        if match:\n            day = int(match.group(1))\n            month = int(match.group(2))\n            year = int(match.group(3))\n            return str(day).zfill(2), str(month).zfill(2), str(year).zfill(4)\n        else:\n            return dt\n    except Exception as e:\n        raise Exception(\"Wrong format. \" + str(e))\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length//2\n    while gap > 0:\n        for i in range(gap,length):\n            j = i\n            while j>=gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j = j-gap\n            my_list[j] = temp\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    n=len(my_list)\n    gap=n//2\n    while gap>0:\n        for i in range(gap,n):\n            temp=my_list[i]\n            j=i\n            while j>gap and my_list[j-gap]>temp:\n                my_list[j]=my_list[j-gap]\n                j-=gap\n            my_list[j]=temp\n        gap//=2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while gap < n:\n        gap = gap + 1\n        # print('gap: ', gap)\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # print('j: ', j)\n            # print('i: ', i)\n            # print('temp: ', temp)\n            while j >= gap and my_list[j-gap] > temp:\n                # print('j: ', j)\n                # print('j-gap: ', j-gap)\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            # print('j: ', j)\n            # print('my_list[j-gap]: ', my_list[j-gap])\n            my_list[j] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # if the list has less than n elements, return array\n    if len(my_list) < len(my_list[0]):\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print(\"shell sort\")\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # your code goes here\n    l = len(my_list)\n    gap = l//2\n    while gap>0:\n        for i in range(gap,l):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap]>temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    num_of_elements = len(my_list)\n    gap = num_of_elements // 2\n    while gap > 0:\n        for i in range(gap, num_of_elements):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap = int(gap / 2)\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1_list = [element for element in test_tup1]\n    tup2_list = [element for element in test_tup2]\n    return (tup1_list[0] and tup2_list[0]) and (tup1_list[1] and tup2_list[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]) or (test_tup1[1] and test_tup2[1]) or (test_tup2[0] and test_tup1[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if type(test_tup1[i]) is int or type(test_tup1[i]) is float:\n                pass\n            elif type(test_tup1[i]) is str or type(test_tup1[i]) is list:\n                return False\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 & test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = test_tup1[0] + tuple([i for i in test_tup1[1]])\n    test_tup2 = test_tup2[0] + tuple([i for i in test_tup2[1]])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1 is not None and test_tup2 is not None:\n        if len(test_tup1) > len(test_tup2):\n            return [test_tup1[i] for i in range(len(test_tup1))]\n        else:\n            return [test_tup2[i] for i in range(len(test_tup2))]\n    else:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b-c) + b*c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b*b) - (4*a*c))/(2*a)\n    \ndef f(x): \n    '''\n    Write a function to find the function of a parabola.\n    '''\n    return (x**3) + (x**2) - 1 \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (c*(b-a)**2) + (b*a-a*c)\n    y = (b**2-2*a*c)\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    m = (b ** 2 - a ** 2) / (2 * b)\n    x1 = -m * b + a\n    x2 = -m * b - a\n    return [x1, x2]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b == 0 and a > 0:\n        if a > 0:\n            return -1\n        else:\n            return 1\n    else:\n        return (b**2 - 4 * a * c) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a==0 or b==0 or c==0:\n        return 0\n    return (b*b) - (4*a*c)\n    \nprint(parabola_directrix(1,2,3))"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == 0:\n        return 0\n    elif c == 1:\n        return 1\n    elif c == -1:\n        return b\n    else:\n        return -b + parabola_directrix(a, b, c-1)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b**2)-(4*a*c))\n    \ndef main():\n    '''\n    Function to solve the parabola.\n    '''\n    print(\"Enter values of a,b,c:\")\n    a = float(input(\"a = \"))\n    b = float(input(\"b = \"))\n    c = float(input(\"c = \"))\n    d = parabola_directrix(a,b,c)\n    print(\"Directrix =\",d)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b**2)-(4*a*c))**0.5\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b * c \ndef parabola_directrix_2(a, b, c, d): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b * c * d \n    "
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Set up variables\n    common_list1 = []\n    common_list2 = []\n    common_length = []\n    for i in list1:\n        if i not in common_list1:\n            common_list1.append(i)\n    for i in list2:\n        if i not in common_list2:\n            common_list2.append(i)\n    common_length = len(common_list1) + len(common_list2)\n    # Loop through the common elements\n    for i in common_list1:\n        for j in common_list2:\n            if i == j:\n                common_length = common_length - 1\n    return common_length == 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list_numbers = []\n    for el in list1:\n        list_numbers.append(el)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use python dictionary to hold the elements\n    set1 = set(list1)\n    set2 = set(list2)\n    # If both lists have common elements\n    if len(set1) > len(set2):\n        # Return true\n        return True\n    # If one list has common elements, return true\n    return set2.issubset(set1)\n    # Raise exception if both lists have different types\n    # Also return false if the lists are the same length\n    # Return false if both lists are empty\n    # return False if the lists have only one element\n    # return False if the lists have two elements\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common_elem = False\n    \n    #sort by the lengths of lists\n    list1.sort()\n    list2.sort()\n    \n    #if they have the same size, return true\n    if len(list1)!= len(list2):\n        common_elem = True\n        \n    #if they have the same value, return false\n    elif list1[0]!= list2[0]:\n        common_elem = False\n        \n    #if they have the same values, return false\n    elif list1[-1]!= list2[-1]:\n        common_elem = False\n        \n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                common_elem = True\n                break\n        \n    #if the list has a common value, return true\n    if common_elem:\n        return True\n    \n    #if the list has no common values, return false\n    return False\n    "
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        return all(elem == list1[0] or elem == list2[0] for elem in list1)\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    first_list = list(list1)\n    second_list = list(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # YOUR CODE HERE\n    if list1 == []:\n        return False\n    elif list2 == []:\n        return False\n    elif list1 == list2:\n        return True\n    else:\n        list1.sort()\n        list2.sort()\n        return True\n    "
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    try:\n        if list1[0] in list2 or list2[0] in list1:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef common_elements(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    try:\n        for i in range(0, len(list1)):\n            for j in range(0, len(list2)):\n                if list1[i] == list2[j]:\n                    return True\n        return False\n    except:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = [el for el in list1 if el in list2]\n    return len(common) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        return set(list1).issubset(set(list2))\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    sums=0\n    for i in range(height-1):\n        sums+=base1[i]\n    return sums/2\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    midpoint=height/2\n    value1=base1\n    value2=base2\n    a=(value2*(1+midpoint))/2\n    b=(value1*(1+midpoint))/2\n    print(f'The median is: {(a+b)}')\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    x1,x2,y1,y2 = base1,base2,0,0\n    while(x1>=0):\n        y1=y1+height/2\n        x2=x2+1\n        if(x2>x1):\n            if(y1>y2):\n                y2=y1\n                y1=0\n            else:\n                y2=y1\n                y1=0\n        x1=x1-1\n    if(x1==0):\n        return -1\n    else:\n        return (y2+height/2)/x1\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_1 = base1\n    base_2 = base2\n    median = ((base_1 + base_2) * 0.5) / 2\n    sum_1 = (base_1 + base_2) * 0.5\n    sum_2 = (base_1 * base_2)\n    median_length = (sum_1 + sum_2)/2\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_len=0\n    base2_len=0\n    num=0\n    median=0\n    if height==1:\n        return base1+base2\n    elif height==2:\n        return base2+base1\n    elif height==3:\n        base1=base1+(base1+base2)//2\n        base2=base2+(base1+base2)//2\n        return base1+base2\n    elif height==4:\n        base1=base1+(base1+base2)//2\n        base2=base2+(base1+base2)//2\n        base3=base3+(base1+base2)//2\n        base4=base4+(base1+base2)//2\n        return base1+base2+base3+base4\n    elif height==5:\n        return base1+base2+base3+base4\n    elif height==6:\n        base1=base1+(base1+base2+base3+base4)//3\n        base2=base2+(base1+base2+base3+base4)//3\n        return base1+base2+base3+base4\n    elif height==7:\n        return base1+base2+base3+base4+base5+base6+base7\n    elif height==8:\n        base1=base1+(base1+base2+base3+base4+base5+base6+base7)//6\n        base2=base2+(base1+base2+base3+base4+base5+base6+base7)//6\n        base3=base3+(base1+base2+base3+base4+base5+base6+base7)//6\n        base4=base4+(base1+base2+base3+base4+base5+base6+base7)//6\n        base5=base5+(base1+base2+base3+base4+base5+base6+base7)//6\n        base6=base6+(base1+base2+base3+base4+base5+base6+base7)//6\n        base7=base7+(base1+base2+base3+base4+base5+base6+base7)//6\n        base8=base8+(base1+base2+base3+base4+base5+base6+base7)//6\n        base9=base9+(base1+base2+base3+base4+base5+base6+base7)//6\n        base10=base10+(base1+base2+base3+base4+base5+base6+base7)//6\n        base11=base11+(base1+base2+base3+base4+base5+base6+base7)//6\n        base12=base12+(base1+base2+base3+base4+base5+base6+base7)//6\n        base13=base13+(base1+base2+base3+base4+base5+base6+base7)//6\n        base14=base14+(base1+base2+base3+base4+base5+base6+base7)//6\n        base15=base15+(base1+base2+base3+base4+base5+base6+base7)//6\n        base16=base16+(base1+base2+base3+base4+base5+base6+base7)//6\n        base17=base17+(base1+base2+base3+base4+base5+base6+base7)//6\n        base18=base18+(base1+base2+base3+base4+base5+base6+base7)//6\n        base19=base19+(base1+base2+base3+base4+base5+base6+base7)//6\n        base20=base20+(base1+base2+base3+base4+base5+base6+base7)//6\n        base21=base21+(base1+base2+base3+base4+base5+base6+base7)//6\n        base22=base22+(base1+base2+base3+base4+base5+base6+base7)//6\n        base23=base23+(base1+base2+base3+base4+base5+base6+base7)//6\n        base24=base24+(base1+base2+base3+base4+base5+base6+base7)//6\n        base25=base25+(base1+base2+base3+base4+base5+base6+base7)//6\n        base26=base26+(base1+base2+base3+base4+base5+base6+base7)//6\n        base27=base27+(base1+base2+base3+base4+base5+base6+base7)//6\n        base28=base28+(base1+base2+base3+base4+base5+base6+base7)//6\n        base29=base29+(base1+base2+base3+base4+base5+base6+base7)//6\n        base30=base30+(base1+base2+base3+base4+base5+base6+base7)//6\n        base31=base31+(base1+base2+base3+base4+base5+base6+base7)//6\n        base32=base32+(base1+base2+base3+base4+base5+base6+base7)//6\n        base33=base33+(base1+base2+base3+base4+base5+base6+base7)//6\n        base34=base34+(base1+base2+base3+base4+base5+base6+base7)//6\n        base35=base35+(base1+base2+base3+base4+base5+base6+base7)//6\n        base36=base36+(base1+base2+base3+base4+base5+base6+base7)//6\n        base37=base37+(base1+base2+base3+base4+base5+base6+base7)//6\n        base38=base38+(base1+base2+base3+base4+base5+base6+base7)//6\n        base39=base39+(base1+base2+base3+base4+base5+base6+base7)//6\n        base40=base40+(base1+base2+base3+base4+base5+base6+base7)//6\n        base41=base41+(base1+base2+base3+base4+base5+base6+base7)//6\n        base42=base42+(base1+base2+base3+base4+base5+base6+base7)//6\n        base43=base43+(base1+base2+base3+base4+base5+base6+base7)//6\n        base44=base44+(base1+base2+base3+base4+base5+base6+base7)//6\n        base45=base45+(base1+base2+base3+base4+base5+base6+base7)//6\n        base46=base46+(base1+base2+base3+base4+base5+base6+base7)//6\n        base47=base47+(base1+base2+base3+base4+base5+base6+base7)//6\n        base48=base48+(base1+base2+base3+base4+base5+base6+base7)//6\n        base49=base49+(base1+base2+base3+base4+base5+base6+base7)//6\n        base50=base50+(base1+base2+base3+base4+base5+base6+base7)//6\n        base51=base51+(base1+base2+base3+base4+base5+base6+base7)//6\n        base52=base52+(base1+base2+base3+base4+base5+base6+base7)//6\n        base53=base53+(base1+base2+base3+base4+base5+base6+base7)//6\n        base54=base54+(base1+base2+base3+base4+base5+base6+base7)//6\n        base55=base55+(base1+base2+base"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (((base1+base2)/2)*height/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    m = height\n    if m%2!= 0:\n        m = m + 1\n    c = 0\n    for i in range(0,int(m/2)):\n        c = c + base1[i] + base2[i]\n    p = (int)((c/2))\n    q = (int)((m-p)/2)\n    if q%2!= 0:\n        q = q+1\n    return (p,q)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height1 = height*2\n    height2 = height*4\n    trapezium = [base1,height1,base1+height1,base2+height1,base2+height2,base2+height2]\n    return np.median(trapezium)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 >= height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n        \ndef median_trapezium2(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 < height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n        \ndef median_trapezium3(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 > height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium4(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 < height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium5(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 > height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium6(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 < height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium7(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 > height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium8(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 < height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium9(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 > height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium10(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 < height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium11(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 > height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium12(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 < height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium13(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 > height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trapezium14(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        n=1\n        while n<=height:\n            m=1\n            while m<=n:\n                if (base1[n] + base2[m])/2 < height:\n                    m+=1\n                else:\n                    n+=1\n            n=n+1\n        return (base1[n-1] + base2[n-1])/2\n    \ndef median_trape"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s1,s2=0,0\n    while height>=s1:\n        s1=s1+1\n        s2=s2+1\n    s1=s1//2\n    s2=s2//2\n    if s1>s2:\n        return base1\n    else:\n        return base2\n    return max(base1,base2)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if number > arr[-1]:\n        return True\n    return check_greater(arr[:-1], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr[number]>arr[number+1]\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    if number > arr[0]:\n        return count + 1\n    for i in range(1,len(arr)):\n        if number > arr[i]:\n            count += 1\n            break\n    if count >= len(arr) - 2:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif arr[0] >= number:\n        return True\n    elif arr[len(arr)-1] >= number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return \"Array is empty\"\n    if arr[0] < number:\n        return \"Array element does not exist\"\n    if arr[len(arr)-1] > number:\n        return \"Number is greater than element\"\n    return None\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if arr[0] >= number:\n        return True\n    if len(arr) == 1:\n        return False\n    \n    return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    for i in arr:\n        if number > i:\n            print('Number'+ str(number) +'is greater than'+ str(i))\n            return\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # if input is less than zero\n    if number < 0:\n        return False\n    # if input is greater than the last number\n    elif number > arr[-1]:\n        return False\n    # if input is greater than the first number\n    elif number > arr[0]:\n        return False\n    # if input is greater than the smallest number\n    elif number > arr[1]:\n        return False\n    # if input is greater than the biggest number\n    elif number > arr[-2]:\n        return False\n    # if input is greater than the smallest number\n    elif number > arr[0]:\n        return False\n    # if input is greater than the biggest number\n    elif number > arr[-3]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #substitute = re.compile(r'(\\b\\w+?[^b\\w]\\b)')\n    #substitute.sub(r'\\1b', text)\n    \n    #replace = re.compile(r'(\\b\\w+?[^b\\w]\\b)')\n    #replace.sub(r'\\1b', text)\n    #replace = re.compile(r'(\\b\\w+?[^b\\w]\\b)')\n    #replace.sub(r'\\1b', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match('[a-z]+', text)!= None\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has at least one uppercase letter followed by one lowercase letter followed by one digit followed by one punctuation mark.\n    '''\n    return re.match('[a-zA-Z]\\w+\\s\\w+', text)!= None\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a four or more c's followed by one or more uppercase letters followed by one or more lowercase letters followed by one or more digits followed by one punctuation mark.\n    '''\n    return re.match('[A-Z]\\w+\\s\\w+\\s\\w+\\s\\w+', text)!= None\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has at least one uppercase letter followed by one or more lowercase letters followed by one or more digits followed by one punctuation mark followed by one uppercase letter followed by one or more uppercase letters followed by one or more digits followed by one punctuation mark.\n    '''\n    return re.match('[A-Z]\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+', text)!= None\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more uppercase letters followed by one or more lowercase letters followed by one or more digits followed by one punctuation mark followed by one uppercase letter followed by one or more uppercase letters followed by one or more digits followed by one punctuation mark followed by one uppercase letter followed by one or more uppercase letters followed by one or more digits followed by one punctuation mark.\n    '''\n    return re.match('[a-zA-Z]\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text[0]!= 'a' or len(text) < 3:\n        return False\n    # Check if the first character is 'a'\n    if text[1]!= 'b':\n        return False\n    # Check if the last character is 'a'\n    if text[-1]!= 'a':\n        return False\n    # Check if the first and last characters are the same\n    if text[0] == text[-1]:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if '\\u03a0' in text:\n        return 'There is a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a0' not in text:\n        return 'There is no a unicode character in this string'\n    if '\\u03a"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # test for possible match\n    result = re.match(r'\\(a+b\\),', text)\n    if result is None:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace(\"<b>\", \"\")\n    text = re.sub('<b>', '', text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text.find('a')!=-1 and text.find('b')!=-1 and text.find('c')!=-1 and text.find('d')!=-1 and text.find('e')!=-1 and text.find('f')!=-1 and text.find('g')!=-1 and text.find('h')!=-1 and text.find('i')!=-1 and text.find('j')!=-1 and text.find('k')!=-1 and text.find('l')!=-1 and text.find('m')!=-1 and text.find('n')!=-1 and text.find('o')!=-1 and text.find('p')!=-1 and text.find('q')!=-1 and text.find('r')!=-1 and text.find('s')!=-1 and text.find('t')!=-1 and text.find('u')!=-1 and text.find('v')!=-1 and text.find('w')!=-1 and text.find('x')!=-1 and text.find('y')!=-1 and text.find('z')!=-1\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = \"^a[b]'\\w*(\\w?)*\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has one or more b's\")\n        print(output.group(1))\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a start of 2, 2, and a end of 2, 2, and ends with two b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a 2, 2, and 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has a 2, 2, 2, 2 b's.\n    '''\n    pattern = \"(^[^\\w]{2}[^\\w]{2}[^\\w]{2}[^\\w]{2}(?=[^\\w]{2}$))\"\n    output = re.search(pattern,text)\n    if output is None:\n        print(\"the text is not a valid text\")\n    else:\n        print(\"the text has two b's\")\n        print(output.group(1))\ndef text_match_fifteen(text):\n    '''\n    Write a function that matche"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    word_list = text.split()\n    \n    result_list = []\n    for word in word_list:\n        if word.startswith('a'):\n            result_list.append(word[1:])\n        else:\n            result_list.append(word)\n    \n    return result_list\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a followed by two or more a's.\n    '''\n    text = text.lower()\n    word_list = text.split()\n    \n    result_list = []\n    for word in word_list:\n        if word.startswith('a') and word.endswith('e'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('i'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('o'):\n            result_list.append(word[2:])\n        else:\n            result_list.append(word)\n    \n    return result_list\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a followed by three a's.\n    '''\n    text = text.lower()\n    word_list = text.split()\n    \n    result_list = []\n    for word in word_list:\n        if word.startswith('a') and word.endswith('i'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('o'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('u'):\n            result_list.append(word[2:])\n        else:\n            result_list.append(word)\n    \n    return result_list\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a followed by four a's.\n    '''\n    text = text.lower()\n    word_list = text.split()\n    \n    result_list = []\n    for word in word_list:\n        if word.startswith('a') and word.endswith('e'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('i'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('o'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('u'):\n            result_list.append(word[2:])\n        else:\n            result_list.append(word)\n    \n    return result_list\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a followed by five a's.\n    '''\n    text = text.lower()\n    word_list = text.split()\n    \n    result_list = []\n    for word in word_list:\n        if word.startswith('a') and word.endswith('e'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('i'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('o'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('u'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('y'):\n            result_list.append(word[2:])\n        else:\n            result_list.append(word)\n    \n    return result_list\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a followed by six a's.\n    '''\n    text = text.lower()\n    word_list = text.split()\n    \n    result_list = []\n    for word in word_list:\n        if word.startswith('a') and word.endswith('e'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('i'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('o'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('u'):\n            result_list.append(word[2:])\n        elif word.startswith('a') and word.endswith('y'):\n            result_list.append(word[2:])\n        else:\n            result_list.append(word)\n    \n    return result_list\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = r'a\\s(?:[bcdfghjklmnopqrstuvwxyz]{3})\\b'\n    #text_regex = r'a\\s(?:[bcdfghjklmnopqrstuvwxyz]{3})\\b'\n    matches = re.findall(text_regex, text)\n    for match in matches:\n        if match[-1] == 'b':\n            return True\n    return False\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # YOUR CODE HERE\n    return (n % 10)\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n=str(n)\n    n=n.rstrip(\"0\")\n    n=n.lstrip(\"-\")\n    n=int(n)\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n > 0:\n        n = int(n)\n        return n % 10\n    else:\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    if n % 10 == 0 :\n        return int(n/10)\n    return int(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n <= 0):\n        return -1\n    elif (n >= 10):\n        return (n % 10)\n    else:\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    if n < 0 :\n        return -1\n    \n    digits = 0\n    while n > 0 :\n        digit = n % 10\n        digits = digits * 10 + digit\n        n = n // 10\n    \n    if digits > 9 :\n        digits = 0\n        \n    return digits"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = 0\n    for i in str(n) :\n        lastDigit = int(i) + lastDigit\n    return lastDigit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[len(str(n))-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    #your code here\n    l = len(n)\n    if (l == 1):\n        return int(n[0])\n    else:\n        for i in range(1, l, 1):\n            if (n[i] == '0'):\n                return int(n[i])\n        return int(n[l-1])"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num=[]\n    for i in list1:\n        if i<0:\n            neg_num.append(i)\n        else:\n            pass\n    return neg_num\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1 * -1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for item in list1:\n        neg_nos_list.append(-item)\n    return neg_nos_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # YOUR CODE HERE\n    neg_numbers = []\n    for number in list1:\n        if number < 0:\n            neg_numbers.append(number)\n    print(f\"Negative numbers: {neg_numbers}\")\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        neg.append(-i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_num.append(list1[i])\n        else:\n            pass\n    return neg_num\n    \n    \n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    out = []\n    for i in list1:\n        if i < 0:\n            out.append(-1*i)\n        else:\n            out.append(i)\n    return out\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    Negative_Numbers = []\n    for i in list1:\n        Negative_Numbers.append(-i)\n    return Negative_Numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list\n    \ndef main():\n    '''\n    Write a program to print all odd numbers from 1 to 100 in Python\n    '''\n    print(neg_nos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) < 2:\n        return str1\n    else:\n        if str1[0] % 2!= 0:\n            str1 = str1[1:]\n            return remove_odd(str1)\n        else:\n            return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_characters = []\n    for char in str1:\n        if char % 2 == 1:\n            odd_characters.append(char)\n    return \"\".join(odd_characters)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Write your code here\n    if not str1:\n        return ''\n    odd_list = ['1', '3', '5', '7', '9']\n    new_str = ''\n    for char in str1:\n        if char not in odd_list:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(\"Here are the characters that have been removed:\")\n    print(str1)\n    temp=[]\n    for i in str1:\n        if i%2==1:\n            temp.append(i)\n    str1=\"\".join(temp)\n    print(str1)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # define variable\n    odd = 0\n    \n    # loop through string\n    for i in range(len(str1)):\n        # check if char is odd\n        if str1[i] % 2!= 0:\n            # if it's odd\n            odd = odd + 1\n    # return if odd == 0\n    if odd == 0:\n        return \"Odd\"\n    # if odd == 1\n    else:\n        # set string to be empty\n        str1_empty = \"\"\n        # iterate through string\n        for i in range(len(str1)):\n            # get ith index\n            index = i\n            # if odd\n            if str1[index] % 2 == 0:\n                # add ith character to string\n                str1_empty += str1[index]\n        # return string\n        return str1_empty\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1=str1.upper()\n    count=0\n    while count<len(str1):\n        if str1[count]%2!=0:\n            str1=str1[:count]+str1[count+1:]\n        count+=1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #Define function\n    def odd(str):\n        #split the string\n        string = str.split(\" \")\n        #convert string to list\n        list = list(string)\n        #remove the odd elements\n        for i in range(0, len(list)-1, 2):\n            if(list[i] == 'o'):\n                list.pop(i)\n        #convert the list to string\n        new_str = \" \".join(list)\n        #return the string\n        return new_str\n    #create a new string with only odd elements\n    new_str = odd(str1)\n    #print the result\n    print(new_str)\n    #print even, odd, and no odd characters\n    for i in range(0, len(new_str), 2):\n        print(new_str[i], new_str[i+1], \"is odd\")\n        if(new_str[i] == 'o'):\n            new_str = new_str[:i] + new_str[i+2:]\n    #print the result\n    print(new_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2].strip()\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i%2 == 1:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(odd, \"\")\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item in test_list:\n        count += len(item[0]) + len(item[1])\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #Initialize the count to 0\n    count=0\n    #While loop to iterate through the test list\n    while(len(test_list)>0):\n        #Get the first element of the list\n        x = test_list[0]\n        #If the list is not empty, append it to the result array\n        if(len(test_list)>0):\n            #Add 1 to the result array (count is the index of the first element)\n            count = count+1\n            #Add each element to the list\n            test_list.pop(0)\n            #Add the next element\n            test_list.append(x)\n            #Add 1 to count\n            count = count+1\n        #If the list is empty, remove the first element from the list\n        else:\n            #Add 1 to count\n            count = count+1\n            #Remove the last element of the list\n            test_list.pop()\n            #Add the next element\n            test_list.append(x)\n            #Add 1 to count\n            count = count+1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidir_count = 0\n    for pair in test_list:\n        bidir_count += len(pair[0].split(\",\"))\n    return bidir_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - 1):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for element in test_list:\n        if element[0][1]==element[1][1]:\n            bidirectional_count = bidirectional_count + 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_count = 0\n    for test_tuple in test_list:\n        count_tuple = (test_tuple[0], test_tuple[1])\n        if isinstance(count_tuple[0], tuple) and isinstance(count_tuple[1], tuple):\n            if not (count_tuple[0][0] == count_tuple[1][0] and count_tuple[0][1] == count_tuple[1][1]):\n                total_count = total_count + 1\n    return total_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    for pair in test_list:\n        if type(pair) is tuple:\n            print(\"pair is \", pair)\n            print(\"type is \", type(pair))\n            print(\"type is \", type(pair[0]))\n            print(\"len is \", len(pair))\n            print(\"list is \", pair)\n            print(\"type is \", type(pair[0]))\n            print(\"len is \", len(pair[0]))\n            print(\"list is \", pair[0])\n            print(\"type is \", type(pair[0]))\n            print(\"len is \", len(pair[0]))\n            print(\"list is \", pair[1])\n            print(\"type is \", type(pair[1]))\n            print(\"len is \", len(pair[1]))\n            print(\"list is \", pair[1])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # your code goes here\n    import collections\n    results = collections.Counter(test_list)\n    \n    for key, value in results.items():\n        if value > 1:\n            return key\n    return None\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidd_count = 0\n    bid_count = 0\n    for pair in test_list:\n        if pair[1] > pair[0]:\n            bidd_count += 1\n        else:\n            bid_count += 1\n    return (bidd_count, bid_count)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i][1]<test_list[j][1]):\n                if (test_list[i][1]>test_list[j][1]):\n                    if (test_list[i][0]<test_list[j][0]):\n                        test_list[i][1]=test_list[j][1]\n                        test_list[i][0]=test_list[j][0]\n            else:\n                if (test_list[i][1]>test_list[j][1]):\n                    if (test_list[i][1]<test_list[j][1]):\n                        test_list[j][1]=test_list[i][1]\n                        test_list[j][0]=test_list[i][0]\n    return test_list\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = []\n    for i in L:\n        res.append(i)\n    return(sum(res))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [i for i in L]\n    x = 0\n    while L:\n        x = x*10+L.pop()\n    return x\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = len(L)\n    i = 0\n    j = 0\n    int_list = []\n    while i < n:\n        if i == j:\n            int_list.append(L[i])\n            i += 1\n        else:\n            int_list.append(L[j])\n            j += 1\n    return int_list\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if type(L) is not list: return L\n    for i,n in enumerate(L):\n        if n > 0: L[i] = str(n)\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return L[0]+multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ''.join(str(x) for x in L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''.join(map(str,L))\n    if len(s) == 0:\n        return 0\n    else:\n        return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda a,b: a*b, L)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['v', 'd', 'c']\n    adverb_positions = []\n    while text!= '':\n        if text[-1] in adverbs:\n            adverb_positions.append(text[-1])\n        else:\n            break\n        text = text[:-1]\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    temp_string = re.sub('[.,;:!?-]',' ',text)\n    split_string = temp_string.split()\n    adverb_position = [0,0,0]\n    for i in split_string:\n        if 'adverb' in i.lower() and'' in i:\n            adverb_position = [i.find(' '),i.find(' '),i.find(' ') +1]\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = text.split()\n    verb_pos_dict = {}\n    for word in words:\n        for pos in verb_pos_dict:\n            if word == pos:\n                verb_pos_dict[pos] += 1\n    adverb_pos_list = [word for word, count in verb_pos_dict.items() if count == 1]\n    return (verb_pos_dict, adverb_pos_list)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile('adverb|(v|viv)')\n    noun = pattern.findall(text)\n    verb = pattern.findall(text)\n    print(\"Noun: \",noun)\n    print(\"Verb: \",verb)\n    adverbs_positions = []\n    for i in range(len(noun)):\n        adverbs_positions.append([noun[i].lower(),i])\n    print(\"Adverbs positions: \",adverbs_positions)\n    return adverbs_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regex expression for matching the adverb in a sentence\n    adverb_regex = re.compile('((s?u)v?de|n?r?a?)d[\\w\\-\\s]+$')\n    # find all the adverbs and their positions in a sentence\n    adverb_positions = adverb_regex.findall(text)\n    # extract the position of the adverb and its name\n    adverb_pos = adverb_positions[0]\n    adverb = adverb_pos.split('d')[0]\n    # return the first adverb and its position\n    return adverb, adverb_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    adverb_position = match_string[0]\n    return adverb_position\ndef get_all_word(text):\n    '''\n    Write a function to get all the words from a given sentence.\n    '''\n    return re.findall('\\w+', text)\ndef get_words(text):\n    '''\n    Write a function to get all the words from a given sentence.\n    '''\n    return get_all_word(text)\ndef get_all_words_in_sentence(text):\n    '''\n    Write a function to get all the words from a given sentence.\n    '''\n    return get_all_word(text)\ndef find_noun_word(text):\n    '''\n    Write a function to find the first noun word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    noun_word = match_string[0]\n    return noun_word\ndef get_noun_word(text):\n    '''\n    Write a function to get the first noun word in a given sentence.\n    '''\n    return find_noun_word(text)\ndef get_noun_pos(text):\n    '''\n    Write a function to get the first noun position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    noun_position = match_string[0]\n    return noun_position\ndef get_all_noun(text):\n    '''\n    Write a function to get all the noun words in a given sentence.\n    '''\n    return get_noun_word(text)\ndef get_all_noun_pos(text):\n    '''\n    Write a function to get all the noun position in a given sentence.\n    '''\n    return get_all_noun_word(text)\ndef get_verb_word(text):\n    '''\n    Write a function to get the first verb word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    verb_word = match_string[0]\n    return verb_word\ndef get_verb_pos(text):\n    '''\n    Write a function to get the first verb position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    verb_position = match_string[0]\n    return verb_position\ndef get_all_verb(text):\n    '''\n    Write a function to get all the verbs in a given sentence.\n    '''\n    return get_verb_word(text)\ndef get_all_verb_pos(text):\n    '''\n    Write a function to get all the verb position in a given sentence.\n    '''\n    return get_all_verb_word(text)\ndef get_number_verb(text):\n    '''\n    Write a function to get the first number word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    number_word = match_string[0]\n    return number_word\ndef get_number_verb_pos(text):\n    '''\n    Write a function to get the first number position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    number_position = match_string[0]\n    return number_position\ndef get_adverb_verb(text):\n    '''\n    Write a function to get the first adverb word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    adverb_verb = match_string[0]\n    return adverb_verb\ndef get_adverb_verb_pos(text):\n    '''\n    Write a function to get the first adverb position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    adverb_position = match_string[0]\n    return adverb_position\ndef get_noun_verb(text):\n    '''\n    Write a function to get the first noun word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    noun_verb = match_string[0]\n    return noun_verb\ndef get_noun_verb_pos(text):\n    '''\n    Write a function to get the first noun position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    noun_position = match_string[0]\n    return noun_position\ndef get_verb_noun(text):\n    '''\n    Write a function to get the first verb word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    verb_noun = match_string[0]\n    return verb_noun\ndef get_verb_noun_pos(text):\n    '''\n    Write a function to get the first verb position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    verb_position = match_string[0]\n    return verb_position\ndef get_all_noun_verb(text):\n    '''\n    Write a function to get all the nouns in a given sentence.\n    '''\n    return get_all_noun(text)\ndef get_all_noun_verb_pos(text):\n    '''\n    Write a function to get all the nouns positions in a given sentence.\n    '''\n    return get_all_noun_verb(text)\ndef get_all_verb_noun(text):\n    '''\n    Write a function to get all the verbs in a given sentence.\n    '''\n    return get_all_verb(text)\ndef get_all_verb_noun_pos(text):\n    '''\n    Write a function to get all the verbs positions in a given sentence.\n    '''\n    return get_all_verb_noun(text)\ndef get_verb_noun_verb(text):\n    '''\n    Write a function to get the first verb noun word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    verb_noun_verb = match_string[0]\n    return verb_noun_verb\ndef get_verb_noun_verb_pos(text):\n    '''\n    Write a function to get the first verb noun position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    verb_noun_position = match_string[0]\n    return verb_noun_position\ndef get_adverb_noun_verb(text):\n    '''\n    Write a function to get the first adverb noun word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    adverb_noun_verb = match_string[0]\n    return adverb_noun_verb\ndef get_adverb_noun_verb_pos(text):\n    '''\n    Write a function to get the first adverb noun position in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    adverb_noun_position = match_string[0]\n    return adverb_noun_position\ndef get_noun_verb_noun(text):\n    '''\n    Write a function to get the first noun noun word in a given sentence.\n    '''\n    match_string = re.findall('(?<=\\w)\\w+', text)\n    noun_noun_verb = match_string[0]\n    return noun_noun_verb\ndef get_noun_verb_noun_pos(text):\n    '"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #get first adverb (the first word with a double-word marker)\n    adverb = text[0:text.index('.')]\n    #get the number of words (subtokens) of the first adverb\n    n_words = len(re.findall(r'\\w+', adverb))\n    #get the position of the adverb\n    adverb_position = [n_words, adverb.index('.')]\n    #return the list\n    return adverb_position\ndef find_verb_position(text):\n    '''\n    Write a function to find the verb ending with a double-word marker and its positions in a given sentence.\n    '''\n    #get the last two words\n    first_word = text[-2:]\n    #get the number of words of the first word\n    first_n_words = len(re.findall(r'\\w+', first_word))\n    #get the position of the first word\n    verb_position = [first_n_words, first_word.index('.')]\n    return verb_position\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    #get the first adjective\n    adjective = text[0:text.index('.')]\n    #get the number of words (subtokens) of the first adjective\n    n_words = len(re.findall(r'\\w+', adjective))\n    #get the position of the adjective\n    adjective_position = [n_words, adjective.index('.')]\n    return adjective_position\ndef find_verb_adjective_position(text):\n    '''\n    Write a function to find the verb ending with a double-word marker and its positions in a given sentence.\n    '''\n    #get the last two words\n    first_word = text[-2:]\n    #get the number of words of the first word\n    first_n_words = len(re.findall(r'\\w+', first_word))\n    #get the position of the first word\n    verb_adjective_position = [first_n_words, first_word.index('.')]\n    return verb_adjective_position\ndef find_adjective_verb_position(text):\n    '''\n    Write a function to find the verb ending with a double-word marker and its positions in a given sentence.\n    '''\n    #get the last two words\n    first_word = text[-2:]\n    #get the number of words (subtokens) of the first word\n    n_words = len(re.findall(r'\\w+', first_word))\n    #get the position of the first word\n    adjective_verb_position = [n_words, first_word.index('.')]\n    return adjective_verb_position\ndef find_verb_adjective_verb_position(text):\n    '''\n    Write a function to find the verb ending with a double-word marker and its positions in a given sentence.\n    '''\n    #get the last two words\n    first_word = text[-2:]\n    #get the number of words (subtokens) of the first word\n    n_words = len(re.findall(r'\\w+', first_word))\n    #get the position of the first word\n    adjective_verb_verb_position = [n_words, first_word.index('.')]\n    return adjective_verb_verb_position\ndef get_verb_position_count(text):\n    '''\n    Write a function that returns the count of verbs ending with a double-word marker in a given text.\n    '''\n    #get all the words ending with double-word markers\n    all_words = re.findall(r'\\w+', text)\n    #get the number of words (subtokens) of the verb ending with double-word markers\n    n_words = len(re.findall(r'\\w+', all_words[-1]))\n    #get the count of verb ending with double-word markers\n    count_verb_ending_double_word_markers = n_words * 3\n    #return the count of verb ending with double-word markers\n    return count_verb_ending_double_word_markers\ndef find_adverb_verb_adjective_position(text):\n    '''\n    Write a function that returns the count of verbs ending with a double-word marker and their positions in a given text.\n    '''\n    #get all the words ending with double-word markers\n    all_words = re.findall(r'\\w+', text)\n    #get the number of words (subtokens) of the verb ending with double-word markers\n    n_words = len(re.findall(r'\\w+', all_words[-1]))\n    #get the count of verb ending with double-word markers\n    count_verb_ending_double_word_markers = n_words * 3\n    #get the position of the verb ending with double-word markers\n    verb_adjective_verb_adjective_position = [n_words, all_words[-1].index('.')]\n    return count_verb_ending_double_word_markers, verb_adjective_verb_adjective_position\ndef find_adverb_verb_adjective_verb_position(text):\n    '''\n    Write a function that returns the count of verbs ending with a double-word marker and their positions in a given text.\n    '''\n    #get all the words ending with double-word markers\n    all_words = re.findall(r'\\w+', text)\n    #get the number of words (subtokens) of the verb ending with double-word markers\n    n_words = len(re.findall(r'\\w+', all_words[-1]))\n    #get the count of verb ending with double-word markers\n    count_verb_ending_double_word_markers = n_words * 3\n    #get the position of the verb ending with double-word markers\n    verb_adjective_verb_adjective_verb_position = [n_words, all_words[-1].index('.')]\n    return count_verb_ending_double_word_markers, verb_adjective_verb_adjective_verb_position\ndef get_verb_adjective_verb_position_count(text):\n    '''\n    Write a function that returns the count of verbs ending with a double-word marker and their positions in a given text.\n    '''\n    #get all the words ending with double-word markers\n    all_words = re.findall(r'\\w+', text)\n    #get the number of words (subtokens) of the verb ending with double-word markers\n    n_words = len(re.findall(r'\\w+', all_words[-1]))\n    #get the count of verb ending with double-word markers\n    count_verb_ending_double_word_markers = n_words * 3\n    #get the position of the verb ending with double-word markers\n    verb_adjective_verb_adjective_position = [n_words, all_words[-1].index('.')]\n    return count_verb_ending_double_word_markers, verb_adjective_verb_adjective_position\ndef get_verb_adjective_verb_verb_position_count(text):\n    '''\n    Write a function that returns the count of verbs ending with a double-word marker and their positions in a given text.\n    '''\n    #get all the words ending with double-word markers\n    all_words = re.findall(r'\\w+', text)\n    #get the number of words (subtokens) of the verb ending with double-word markers\n    n_words = len(re.findall(r'\\w+', all_words[-1]))\n    #get the count of verb ending with double-word markers\n    count_verb_ending_double_word_markers = n_words * 3\n    #get the position of the verb ending with double-word markers\n    verb_adjective_verb_adjective_verb_position = [n_words, all_words[-1].index('.')]\n    return count_verb_ending_double_word_markers, verb_adjective_verb_adjective_verb_position\nde"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    new_text = ''\n    for i in text:\n        if i.isupper():\n            new_text += i\n        else:\n            new_text += i.lower()\n    adverb_position = re.findall(r'[^\\w\\s]\\b\\w\\b\\b', new_text)\n    return new_text, adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [\"a.\", \"an\", \"the\", \"an's\", \"at\", \"the's\", \"have\", \"was\", \"wants\", \"may\", \"can\", \"are\", \"is\", \"can't\", \"aren\", \"has\", \"had\", \"she\", \"hers\", \"her\", \"that\", \"that's\", \"be\", \"that's\", \"that'll\", \"that's\", \"that'll've\", \"that'll\", \"that'd\", \"that've\", \"where\", \"when\", \"where's\", \"when've\", \"why\", \"why's\", \"who\", \"who's\", \"whom\", \"whose\", \"whom's\", \"whose's\", \"why've\", \"why'll\", \"why'd\", \"why'd've\", \"why'll've\", \"why'd've\", \"so\", \"some\", \"such\", \"such's\", \"such've\", \"such'd\", \"such'd've\", \"there\", \"there's\", \"there's\", \"there've\", \"they\", \"they'd\", \"they'll\", \"they'd've\", \"they'll've\", \"they'll\", \"they'd've\", \"they'll\", \"they're\", \"they've\", \"they'll\", \"they'd've\", \"they'd\", \"they'll\", \"they'd've\", \"to\", \"to've\", \"too\", \"too's\", \"too've\", \"too'd\", \"too'd've\", \"there\", \"there's\", \"there's\", \"there've\", \"these\", \"those\", \"am\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"she\", \"hers\", \"her\", \"that\", \"that\", \"that\", \"that've\", \"that'll\", \"that'll\", \"that'd\", \"that'd've\", \"so\", \"some\", \"such\", \"such\", \"s\", \"t\", \"d\", \"de\", \"ll\", \"ve\", \"re\", \"ve\", \"ve\", \"ve\", \"ve\", \"ve\", \"ve\", \"ve\", \"ve\", \"ve\", \"ve\"]\n    count = 0\n    for s in text.split():\n        if s in adverbs:\n            count += 1\n    return count\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # for every adverb in the sentence,\n    # if it is a sign, then print the position of it.\n    # Otherwise, if it is not a sign, print a message saying it is not a sign\n    for word in text.split():\n        if re.search(r'[aeiou]', word):\n            print('No.'+ str(word.count('a')) + ':' + str(word.find('a')))\n        else:\n            print('No.' + str(word.count('a')) + ':' + str(word.find('a')))\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if (l == 1):\n        return 0\n    elif (l == 2):\n        return 1\n    elif (l == 3):\n        return 6\n    else:\n        return surfacearea_cube(l-1) + surfacearea_cube(l-2) + surfacearea_cube(l-3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s = s + (d(i,j,k)**2)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0.5*l**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(3):\n        for j in range(3):\n            s += l[i][j]**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    import numpy as np\n    l = np.array(l)\n    l = l.flatten()\n    area = math.pi*(l[0]**3)\n    for i in range(1,len(l)):\n        area = area + math.pi*(l[i]**3)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return pow(((3*l)/4),2)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l * l * 3.1416\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l*l*l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Your code here\n    return 4*(l**3)*np.pi\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l*l\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    for i in nums:\n        if i > 0:\n            return i/abs(i)\n    return 0\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    for item in nums:\n        if item > 0:\n            return item/sum_nums\n        else:\n            return 0\n    \n    return 0\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    for item in nums:\n        if item < 0:\n            return item/sum_nums\n        else:\n            return 0\n    \n    return 0\n    \ndef average(nums):\n    '''\n    Write a function to find the average of a list of numbers.\n    '''\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    for item in nums:\n        if item == 0:\n            return 0\n        else:\n            return item/sum_nums\n    \n    return 0\n    \ndef mode(nums):\n    '''\n    Write a function to find the mode of a list of numbers.\n    '''\n    # your code goes here\n    mode_count = 0\n    max_val = max(nums)\n    for item in nums:\n        if item == max_val:\n            mode_count += 1\n    \n    if mode_count == 0:\n        return 'None'\n    elif mode_count == 1:\n        return max(nums)\n    else:\n        return max(nums)\n    \ndef sum(nums):\n    '''\n    Write a function to find the sum of a list of numbers.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    return sum_nums\n    \ndef mod_exp(nums):\n    '''\n    Write a function to compute the modular exponentiation of a number.\n    '''\n    # your code goes here\n    max_val = max(nums)\n    for item in nums:\n        if item == max_val:\n            return pow(item, nums.index(item))\n        else:\n            return pow(item, nums.index(item) + 1)\n    \ndef euclid(nums):\n    '''\n    Write a function to find the Euclid distance of two numbers.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    for item in nums:\n        if item == 0:\n            return 0\n        else:\n            return pow(item, nums.index(item) + 1) - pow(item, nums.index(item) - 1)\n    \ndef plus_minus(nums):\n    '''\n    Write a function to find the difference of two numbers.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    for item in nums:\n        if item == 0:\n            return 0\n        else:\n            return nums[nums.index(item) + 1] - nums[nums.index(item) - 1]\n    \ndef multiply(nums):\n    '''\n    Write a function to find the product of two numbers.\n    '''\n    # your code goes here\n    product_nums = 1\n    for item in nums:\n        product_nums *= item\n    \n    return product_nums\n    \ndef divide(nums):\n    '''\n    Write a function to find the quotient of two numbers.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    for item in nums:\n        if item == 0:\n            return 0\n        else:\n            return nums[nums.index(item) + 1] / item\n    \ndef inverse(nums):\n    '''\n    Write a function to find the inverse of a number.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    if sum_nums == 0:\n        return 0\n    else:\n        return nums[nums.index(sum_nums) - 1] / sum_nums\n    \ndef sum_squares(nums):\n    '''\n    Write a function to find the sum of the squares of a number.\n    '''\n    # your code goes here\n    sum_squares = 0\n    for item in nums:\n        sum_squares += item**2\n    \n    return sum_squares\n    \ndef sum_squares_with_one(nums):\n    '''\n    Write a function to find the sum of the squares of a number.\n    '''\n    # your code goes here\n    sum_squares = 0\n    sum_squares = sum_squares + (sum_squares_with_one(nums) / (nums[0]**2))\n    return sum_squares\n    \ndef sum_squares_with_two(nums):\n    '''\n    Write a function to find the sum of the squares of a number.\n    '''\n    # your code goes here\n    sum_squares = 0\n    for item in nums:\n        sum_squares += item\n    \n    sum_squares = sum_squares + (sum_squares_with_two(nums) / (nums[0]**2) + sum_squares_with_two(nums) / (nums[1]**2))\n    return sum_squares\n    \ndef power_of_two(nums):\n    '''\n    Write a function to find the power of two of a number.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    return sum_nums\n    \ndef power_of_two_with_one(nums):\n    '''\n    Write a function to find the power of two of a number.\n    '''\n    # your code goes here\n    sum_nums = 0\n    sum_nums = nums[0]**2\n    \n    return sum_nums\n    \ndef power_of_two_with_two(nums):\n    '''\n    Write a function to find the power of two of a number.\n    '''\n    # your code goes here\n    sum_nums = 0\n    sum_nums = nums[0]**2\n    \n    sum_nums = sum_nums + nums[1]**2\n    \n    return sum_nums\n    \ndef power_of_two_with_three(nums):\n    '''\n    Write a function to find the power of two of a number.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    return sum_nums\n    \ndef power_of_two_with_four(nums):\n    '''\n    Write a function to find the power of two of a number.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    sum_nums = sum_nums + nums[0]**2 + nums[1]**2\n    \n    return sum_nums\n    \ndef power_of_two_with_five(nums):\n    '''\n    Write a function to find the power of two of a number.\n    '''\n    # your code goes here\n    sum_nums = 0\n    for item in nums:\n        sum_nums += item\n    \n    sum_nums = sum_nums + nums[0]**2\n    \n    return sum_nums\n    \ndef power_of_two_with_six(nums):\n    '''\n    Write a function to find the power of two of a number.\n    '''\n    # your code goes here\n    sum_num"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    def get_ratio(x):\n        return x/sum(nums)\n    \n    return get_ratio(0)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive / len(nums)\ndef is_acceptable_password(password):\n    '''\n    Checks if the password is accepted.\n    '''\n    # TODO:\n    # password should be a list of character\n    # password should be a string of digits\n    # password should be a string of lowercase\n    # password should be a string of special characters\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n    # password should be a string of digits\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #Your code here\n    if len(nums)==1:\n        return nums[0]/nums[0]\n    elif len(nums)==2:\n        return (nums[0]+nums[1])/2\n    elif len(nums)==3:\n        return (nums[0]+nums[1]+nums[2])/3\n    elif len(nums)==4:\n        return (nums[0]+nums[1]+nums[2]+nums[3])/6\n    else:\n        return (nums[0]+nums[1]+nums[2]+nums[3]+nums[4])/10\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return None\n    else:\n        total_positive = 0\n        total_negative = 0\n        for num in nums:\n            if num >= 0:\n                total_positive += 1\n            else:\n                total_negative += 1\n        \n        if total_positive == 0:\n            return 0\n        else:\n            return total_negative/total_positive"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef neg_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef median(nums):\n    '''\n    Write a function to find the median of an array of integers.\n    '''\n    if len(nums)%2 == 0:\n        return (nums[len(nums)//2]+nums[len(nums)//2-1])/2\n    else:\n        return nums[len(nums)//2]\n    \n    \ndef reverse_count(nums):\n    '''\n    Write a function to find the ration of reversed numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef reverse_median(nums):\n    '''\n    Write a function to find the median of reversed numbers in an array of integers.\n    '''\n    if len(nums)%2 == 0:\n        return (nums[len(nums)//2]+nums[len(nums)//2-1])/2\n    else:\n        return nums[len(nums)//2]\n    \n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef reverse_negative_count(nums):\n    '''\n    Write a function to find the ration of reversed negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef positive_negative_count(nums):\n    '''\n    Write a function to find the ration of positive and negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]>0 and nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef negative_positive_count(nums):\n    '''\n    Write a function to find the ration of negative and positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]>0 and nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef fraction(nums):\n    '''\n    Write a function to find the ration of fraction in an array of integers.\n    '''\n    nums.sort()\n    n = len(nums)\n    fraction = 0\n    m = 0\n    for i in range(n-1):\n        fraction += nums[i]\n        fraction += nums[i+1]\n        m = max(m,fraction)\n    fraction = fraction - m\n    return fraction/n\n    \n    \ndef decimal_count(nums):\n    '''\n    Write a function to find the ration of decimal numbers in an array of integers.\n    '''\n    n = len(nums)\n    decimal = 0\n    m = 0\n    for i in range(n):\n        decimal += abs(nums[i])\n        m = max(m,decimal)\n    return decimal/n\n    \n    \ndef decimal_median(nums):\n    '''\n    Write a function to find the median of decimal numbers in an array of integers.\n    '''\n    if len(nums)%2 == 0:\n        return (nums[len(nums)//2]+nums[len(nums)//2-1])/2\n    else:\n        return nums[len(nums)//2]\n    \n    \ndef decimal_reverse_median(nums):\n    '''\n    Write a function to find the median of decimal numbers in an array of integers.\n    '''\n    if len(nums)%2 == 0:\n        return (nums[len(nums)//2]+nums[len(nums)//2-1])/2\n    else:\n        return nums[len(nums)//2]\n    \n    \ndef decimal_negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef decimal_reverse_negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef average_median(nums):\n    '''\n    Write a function to find the average of a given array of numbers.\n    '''\n    s = sum(nums)/len(nums)\n    return s\n    \n    \ndef average_reverse_median(nums):\n    '''\n    Write a function to find the average of a given array of numbers.\n    '''\n    s = sum(nums)/len(nums)\n    return s\n    \n    \ndef average_negative_count(nums):\n    '''\n    Write a function to find the average of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef average_reverse_negative_count(nums):\n    '''\n    Write a function to find the average of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef median_fraction(nums):\n    '''\n    Write a function to find the median of fraction in an array of integers.\n    '''\n    n = len(nums)\n    fraction = 0\n    m = 0\n    for i in range(n-1):\n        fraction += nums[i]\n        fraction += nums[i+1]\n        m = max(m,fraction)\n    fraction = fraction - m\n    return fraction/n\n    \n    \ndef median_reverse_fraction(nums):\n    '''\n    Write a function to find the median of fraction in an array of integers.\n    '''\n    n = len(nums)\n    fraction = 0\n    m = 0\n    for i in range(n):\n        fraction += nums[i]\n        fraction += nums[i+1]\n        m = max(m,fraction)\n    fraction = fraction - m\n    return fraction/n\n    \n    \ndef median_negative_count(nums):\n    '''\n    Write a function to find the median of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n    \n    \ndef median_reverse_negative_count(nums):\n    '''\n    Write a function to find the median of negative numbers in an array of integers.\n    '''\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positive += 1\n    return positive / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return list1[0] if list1 else 'No numbers in the list'\n \ndef main(): \n    \"\"\" Main function. \"\"\"\n    print('Largest number from list is:'+ largest_neg(list_of_numbers))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = len(list1)\n    max_neg = float('-inf')\n    i = 0\n    for j in range(0, n):\n        if list1[j] < 0:\n            i = j\n            break\n    if i!= 0:\n        list1[i] = list1[i] * -1\n        j = i + 1\n        while j < n:\n            if list1[j] < 0:\n                list1[i] = list1[i] * -1\n                j = j + 1\n                continue\n            j = j + 1\n        if list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)-1,-1,-1):\n        if list1[i] < 0:\n            list1.remove(list1[i])\n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maxNeg = list1[0]\n    for i in list1:\n        if i < 0:\n            maxNeg = i\n            break\n    return maxNeg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            max = list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            largest = list1[i]\n            break\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for i in list1:\n        if i < 0:\n            if max_neg < i:\n                max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Add your code here.\n    negative = -10000\n    for i in list1:\n        if i < 0:\n            negative = i\n    return negative\n        \n        \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = -10000\n    neg_num_list = list(map(int, list1))\n    for n in range(len(neg_num_list)):\n        if neg_num_list[n] < 0:\n            neg_num = neg_num_list[n]\n    return neg_num\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i] = test_list[i][:j]\n            test_list[i] = test_list[i][j+1:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim_tuple(test_list):\n        '''\n        Write a function that takes a list of tuples and returns a list of tuples trimmed by k.\n        '''\n        if len(test_list) < 3:\n            return test_list\n        else:\n            s = sorted(test_list, key=lambda x: (x[0], x[1]))\n            return s[-K:]\n    \n    return trim_tuple(test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    while len(test_list) > 1:\n        del test_list[-K]\n    return test_list[0]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_tuple = []\n    for entry in test_list:\n        if len(entry) == 0:\n            entry = (0,0,0,0)\n        if len(entry) == 1:\n            entry = entry[0]\n        if len(entry) == 2:\n            entry = entry[0]\n            entry = entry[0]\n        if len(entry) == 3:\n            entry = entry[0]\n            entry = entry[0]\n            entry = entry[0]\n        test_tuple.append(entry)\n    test_list = test_tuple\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = []\n    for tuple in test_list:\n        if len(tuple) >= K:\n            tuple_list.append(tuple[:K])\n        else:\n            tuple_list.append(tuple)\n    return tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # print(\"K : \", K)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    k = 1\n    while k < len(test_list):\n        del test_list[k]\n        k -= 1\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    index_list = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            index_list.append(i)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(operator.mul, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    a=0\n    b=0\n    for i in test_tup1:\n        a+=i\n    for i in test_tup2:\n        b+=i\n    return a,b\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print('Index wise multiplication of {} and {}'.format(test_tup1, test_tup2))\n    \n    # Method 1: loop through both lists\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n        \n    print('After index wise multiplication of {} and {}'.format(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    answer = (tup1[0] * tup2[0], tup1[1] * tup2[1])\n    return answer\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"Index wise multiplication\")\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    test_tup3_list = []\n    for i in range(len(test_tup1_list)):\n        test_tup3_list.append(test_tup1_list[i] * test_tup2_list[i])\n    return(test_tup3_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_dict = {}\n    index_dict['1'] = 1\n    index_dict['2'] = 2\n    index_dict['3'] = 3\n    index_dict['4'] = 4\n    index_dict['5'] = 5\n    index_dict['6'] = 6\n    index_dict['7'] = 7\n    index_dict['8'] = 8\n    index_dict['9'] = 9\n    index_dict['10'] = 10\n    index_dict['11'] = 11\n    index_dict['12'] = 12\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the first list \n    index_first = []\n    # initialize the second list \n    index_second = []\n    for i in range(len(test_tup1)):\n        index_first.append(test_tup1[i][0])\n        index_second.append(test_tup2[i][0])\n    # loop through the list to perform the multiple operation\n    for i in range(len(index_first)):\n        index_first[i] = index_first[i] * index_second[i]\n    # return the result as a tuple\n    return (tuple(index_first))"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(f'Tuple 1 = {test_tup1}')\n    print(f'Tuple 2 = {test_tup2}')\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for element in lst: \n        tup[element]=tup.get(element, 0) + 1 \n    \n    return tup \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(lst)\n    count=0\n    for i in lst:\n        if i in tup:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(Counter(lst).values())\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create an empty dictionary\n    result = {}\n    # loop over the tuple\n    for i in tup: \n        # check to see if the element has been seen \n        if i in result: \n            # increment the count by one\n            result[i] += 1\n        else: \n            # set the new key to be the element and the count to one\n            result[i] = 1\n    # print the dictionary \n    # loop over the dictionary \n    for i in result: \n        # if the count of the current element is 1,\n        # increment the count by one \n        if result[i] == 1: \n            # if the element is not in the dictionary, print the key and the count \n            print(i, result[i])\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    for t in tup:\n        cnt[t] += 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).items()\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tuple(Counter(lst).elements())\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in lst:\n        count+=lst.count(i)\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for i in range(len(lst)):\n        for j in range(len(tup)):\n            if tup[j] == lst[i]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dic = dict()\n    for i in tup:\n        if i not in dic.keys():\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    print(dic)\n    print(len(lst))\n    return\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [0 for i in range(len(nums))]\n    for i in range(len(nums)):\n        cubes[i] = cubes[i] + nums[i]*(3**i)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        cube_num = num * num * num\n        print(cube_num, end=' ')\n    print()\n    return cube_num\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # cubes of individual elements\n    cubes = [num**3 for num in nums]\n    # return total cubes\n    return sum(cubes)"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    nums_cube = [n*n for n in nums]\n    return nums_cube"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in range(len(nums)):\n        cube_list.append(nums[i]**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #Complete this function\n    sum=0\n    while(n>0):\n        sum+=n%10\n        n=n//10\n    return sum\n    #replace this line \ud83d\udc47\n    #i have replaced this code with the function called above.\n    #you should not need to print anything in this function \n    #however, there is a function within that file called print_sum, \n    #which is already created in this file.\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #first create a list\n    l = []\n    #add the number to the list\n    l.append(n)\n    #recursively add the remaining numbers\n    #and then call it\n    while len(l) > 0:\n        t = l.pop()\n        sum = t + sum(l)\n        #print(t, end = \" \")\n        #add the values to the list\n        l.append(sum)\n        print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(n): \n        s += i \n    return s \ndef main(): \n    '''\n    Execute your main function.\n    '''\n    # Declare variables \n    n = int(input('Enter the number of elements in a list: ')) \n    arr = [] \n    for i in range(n): \n        a = int(input('Enter the element for the list: ')) \n        arr.append(a) \n    print('Initial list: ', arr) \n    # Print the sum \n    s = cal_sum(n) \n    print('Sum of all the elements: ', s) \n    print('') \n    # Remake the list \n    s = cal_sum(n) \n    print('After calculation: ', s) \nif __name__ == '__main__': \n    main() "
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(0, n+1):\n        total += i\n    return total\n    \n    \ndef main():\n    #Enter a number of elements in a list\n    n = int(input(\"Enter a number of elements in a list: \"))\n    #Create a 2D list \n    list_1 = create_list(n)\n    #calculate the sum\n    sum_list = cal_sum(n)\n    #Print the results\n    print(f\"The sum of the list is: {sum_list}\")\n    print(f\"The sum of the list is: {sum_list}\")\n    print(f\"The sum of the list is: {sum_list}\")\n    \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i \n    return sum \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return ''\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + extract_string(str, l[1])\n    return l[0] + extract_string(str, l[1:])\n    \ndef min_max_string_value(list_of_strings):\n    '''\n    Write a function to find the minimum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + min_max_string_value(list_of_strings[1:])\n    \ndef max_min_string_value(list_of_strings):\n    '''\n    Write a function to find the maximum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + max_min_string_value(list_of_strings[1:])\n    \ndef min_max_string_value2(list_of_strings):\n    '''\n    Write a function to find the minimum and maximum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + min_max_string_value2(list_of_strings[1:])\n        \ndef max_min_string_value2(list_of_strings):\n    '''\n    Write a function to find the maximum and minimum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + max_min_string_value2(list_of_strings[1:])\n        \ndef min_max_string_value3(list_of_strings):\n    '''\n    Write a function to find the minimum and maximum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + min_max_string_value3(list_of_strings[1:])\n    \ndef max_min_string_value3(list_of_strings):\n    '''\n    Write a function to find the maximum and minimum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + max_min_string_value3(list_of_strings[1:])\n    \ndef min_max_string_value4(list_of_strings):\n    '''\n    Write a function to find the minimum and maximum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + min_max_string_value4(list_of_strings[1:])\n    \ndef max_min_string_value4(list_of_strings):\n    '''\n    Write a function to find the maximum and minimum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + max_min_string_value4(list_of_strings[1:])\n    \ndef min_max_string_value5(list_of_strings):\n    '''\n    Write a function to find the minimum and maximum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + min_max_string_value5(list_of_strings[1:])\n    \ndef max_min_string_value5(list_of_strings):\n    '''\n    Write a function to find the maximum and minimum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + max_min_string_value5(list_of_strings[1:])\n    \ndef min_max_string_value6(list_of_strings):\n    '''\n    Write a function to find the minimum and maximum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + min_max_string_value6(list_of_strings[1:])\n    \ndef max_min_string_value6(list_of_strings):\n    '''\n    Write a function to find the maximum and minimum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings[1]\n    return list_of_strings[0] + max_min_string_value6(list_of_strings[1:])\n    \ndef min_max_string_value7(list_of_strings):\n    '''\n    Write a function to find the minimum and maximum string in a list of strings.\n    '''\n    if len(list_of_strings) == 0:\n        return ''\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    if len(list_of_strings) == 2:\n        return list_of_strings[0] + list_of_strings["
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l_index = 0\n    for i in range(len(str)):\n        if str[i] in l:\n            l_index = l.index(str[i])\n        else:\n            l_index = 0\n            break\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l:l+size]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_str = []\n    for i in range(len(l)):\n        new_str.append(str[i:i+l[i]])\n    return''.join(new_str)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    if len(str) == 0:\n        return None\n    elif len(str) == 1:\n        return str[0]\n    else:\n        for s in str:\n            count += 1\n            if count == l:\n                return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l:\n        for i, val in enumerate(l):\n            if i == len(l) - 1:\n                return val\n            if len(val) < len(l[i+1]):\n                return val\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [item for item in str if item.isnumeric()]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(str)):\n        for j in range(0, len(str) - i):\n            if str[j]!= str[j + 1]:\n                return str[j:j + 2]\n    return \"NULL\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    while len(str) > l:\n        yield str[0:l]\n        str = str[l:]\n    yield str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return ''\n    else:\n        if str == []:\n            return ''\n        else:\n            if len(str[0]) < len(l[0]):\n                return extract_string(str[1:], l[1:])\n            else:\n                return extract_string(str[:len(str[0])], l)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = re.sub(' +','', text1)\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    for i in range(len(text1)):\n        if text1[i] =='':\n            text2 += text1[i]\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # NOTE: O(n) for space removal, since we'll have to rerun the original loop\n    # so O(n) space, and to perform same operations for the list which is O(n)\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +',' ',text1).strip()\ndef remove_punc(text):\n    '''\n    Remove all punctuations from the given string.\n    '''\n    return re.sub('[^\\w\\s]','',text)\ndef remove_duplicates(text):\n    '''\n    Remove all duplicate characters from the given string.\n    '''\n    return re.sub('(.)\\1+', r'\\1\\1', text)\ndef is_proper_vowel(text):\n    '''\n    Return True if the given string has all vowels in it.\n    '''\n    return set(text).issubset({\"a\", \"e\", \"i\", \"o\", \"u\"})\ndef is_vowel(text):\n    '''\n    Return True if the given string is a vowel.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_consonant(text):\n    '''\n    Return True if the given string is a consonant.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_period(text):\n    '''\n    Return True if the given string is a period.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_dash(text):\n    '''\n    Return True if the given string is a dash.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_consonant_dash(text):\n    '''\n    Return True if the given string is a consonant followed by a dash.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_dotted(text):\n    '''\n    Return True if the given string is a dotted.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_interjection(text):\n    '''\n    Return True if the given string is a interjection.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_exclamation(text):\n    '''\n    Return True if the given string is a exclamation.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_question(text):\n    '''\n    Return True if the given string is a question.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_stop(text):\n    '''\n    Return True if the given string is a stop.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_punctuation(text):\n    '''\n    Return True if the given string is a punctuation.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_exclamation_end(text):\n    '''\n    Return True if the given string is an exclamation end.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_question_end(text):\n    '''\n    Return True if the given string is a question end.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_stop_end(text):\n    '''\n    Return True if the given string is a stop end.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_punctuation_end(text):\n    '''\n    Return True if the given string is a punctuation end.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_exclamation_nonstop(text):\n    '''\n    Return True if the given string is an exclamation nonstop.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_question_nonstop(text):\n    '''\n    Return True if the given string is a question nonstop.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_stop_nonstop(text):\n    '''\n    Return True if the given string is a stop nonstop.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_period_nonstop(text):\n    '''\n    Return True if the given string is a period nonstop.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_dotted_nonstop(text):\n    '''\n    Return True if the given string is a dotted nonstop.\n    '''\n    return set(text).issubset({\"a\",\"e\",\"i\",\"o\",\"u\"})\ndef is_consonant_nonstop(text):\n    '''\n    Return True if the given string is a consonant nonstop.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_period_nonstop_consonant(text):\n    '''\n    Return True if the given string is a period nonstop consonant.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_dotted_nonstop_consonant(text):\n    '''\n    Return True if the given string is a dotted nonstop consonant.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_consonant_nonstop_consonant(text):\n    '''\n    Return True if the given string is a consonant nonstop consonant.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_period_nonstop_consonant_consonant(text):\n    '''\n    Return True if the given string is a period nonstop consonant consonant.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_dotted_nonstop_consonant_consonant(text):\n    '''\n    Return True if the given string is a dotted nonstop consonant consonant consonant.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_consonant_nonstop_consonant_consonant(text):\n    '''\n    Return True if the given string is a consonant nonstop consonant consonant consonant.\n    '''\n    return set(text).issubset({\"a\",\"i\",\"o\",\"u\"})\ndef is_period_nonstop_consonant_consonant_consonant(text):\n    '''\n    Return True if the given string is a period nonstop consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant consonant conso"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    for i in range(len(text1)):\n        if text1[i]!='':\n            text2 += text1[i]\n        else:\n            text2 +=''\n    return text2\ndef add_space(text1):\n    '''\n    Write a function that adds spaces between two words.\n    '''\n    new_text = ''\n    for i in range(len(text1)):\n        if i % 2 == 0:\n            new_text += text1[i] +''\n        else:\n            new_text += text1[i]\n    return new_text\ndef remove_stopwords(text1):\n    '''\n    Write a function that takes a string and removes all stopwords.\n    '''\n    stopwords = ['a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'i', 'in', 'is', 'it', 'its', 'let','me','more','my','myself', 'nor', 'not', 'of', 'on', 'or', 'our', 'out', 'over', 'own','she','she', 'that', 'the', 'their', 'what', 'when', 'where', 'which', 'who', 'whoever', 'whole', 'whose', 'whois', 'will', 'would', 'wouldn\\'t', 'you', 'youre', 'your', 'yours', 'yourself', 'yourselves']\n    result = ''\n    for word in text1.split():\n        for stopword in stopwords:\n            if word == stopword:\n                result += word +''\n    return result\ndef preprocess_text(text1):\n    '''\n    Write a function that takes a string and converts it to lower case and removes punctuation.\n    '''\n    text2 = remove_punctuation(text1)\n    text3 = remove_stopwords(text2)\n    text4 = text3.split()\n    text5 = text4.copy()\n    text6 = []\n    for i in range(len(text5)):\n        text6.append(text5[i])\n    text6 = list(dict.fromkeys(text6))\n    text7 = ''\n    for i in range(len(text6)):\n        text7 += text6[i] +''\n    text7 = text7.lower()\n    return text7\ndef remove_punctuation(text1):\n    '''\n    Write a function that takes a string and removes all punctuation from the given string.\n    '''\n    text2 = re.sub(r'[^a-zA-Z]','', text1)\n    return text2\ndef remove_stopwords(text1):\n    '''\n    Write a function that takes a string and removes all stopwords.\n    '''\n    stopwords = ['a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'i', 'in', 'is', 'it', 'its', 'let','me','more','my','myself', 'nor', 'not', 'of', 'on', 'or', 'our', 'out', 'over', 'own','she','she', 'that', 'the', 'their', 'what', 'when', 'where', 'which', 'who', 'whoever', 'whole', 'whose', 'whois', 'will', 'would', 'wouldn\\'t', 'you', 'youre', 'your', 'yours', 'yourself', 'yourselves']\n    result = ''\n    for word in text1.split():\n        for stopword in stopwords:\n            if word == stopword:\n                result += word +''\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.replace(\" \",\"\")\n    text1=text1.replace(\"\\n\",\"\")\n    text1=text1.replace(\"\\t\",\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return 0.0\n    return actual_cost - sale_amount \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        if actual_cost < sale_amount:\n            return actual_cost - sale_amount\n        else:\n            return 0.0\n    except TypeError as e:\n        print(\"Error message:\",e)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return 0\n    else: \n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    # get values from dictionary\n    sale_amount = sale_amount.get(actual_cost,0)\n    \n    # calculate the total loss amount on the sale\n    total_amount = sale_amount * (sale_amount * 100)\n    \n    return total_amount\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total_cost = actual_cost * sale_amount\n    if total_cost <= sale_amount:\n        total_cost = sale_amount\n    return total_cost\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # TODO:\n    # 1. check if sale amount is less than actual cost\n    # 2. return 0.\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 0\n    k = 0\n    while(n > 0): \n        k = n % 10 \n        n = n / 10\n        if (k % 2 == 0): \n            i = i + 1\n            i = i + k \n    return i\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    num = n\n    while n%2 == 0:\n        n = n/2\n    count = 0\n    while (n>0) :\n        if (n%2 == 0) :\n            count = count + 1\n            n = n//2\n        else:\n            break\n    return count\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    num = n\n    while n%2 == 0:\n        n = n//2\n    count = 0\n    while n>0:\n        if (n%2 == 0) :\n            count = count + 1\n            n = n//2\n        else:\n            break\n    return count\ndef isprime(n) : \n    '''\n    a helper function which returns whether a number n is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    elif (n <= 3) : \n        return True\n    elif (n%2 == 0 or n%3 == 0) : \n        return False\n    else : \n        i = 5\n        while(i*i <= n) : \n            if (n%i == 0) : \n                return False\n            i = i+6\n        return True\ndef primeFactors(n) : \n    '''\n    a helper function which returns the number of prime factors of a number.\n    '''\n    i = 2\n    while (i*i <= n) : \n        if (n%i == 0) : \n            return (i, n//i)\n        i = i+2\n    return (0, 0)\ndef getSumOfNPrimeFactors(n) : \n    '''\n    a helper function which returns the sum of the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfPrimeFactors(n) : \n    '''\n    a helper function which returns the sum of the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes2(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes3(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes4(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes5(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes6(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes7(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes8(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes9(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes10(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes11(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes12(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes13(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes14(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes15(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes16(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if isprime(i) == True:\n            sum = sum + primeFactors(i)[1]\n    return sum\ndef getSumOfNPrimes17(n) : \n    '''\n    a helper function which returns the sum of all the prime factors of a number.\n    '''\n    sum = 0\n    fo"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [] \n    for i in range(1,int(math.sqrt(n))+1): \n        if n % i == 0: \n            factors.append(i) \n            factors.append(n//i) \n    \n    sum = 0 \n    for i in range(len(factors)): \n        sum+=factors[i]*(10**i) \n    \n    return sum\n    \ndef getTotalNums(n) : \n    '''\n    Return the total of all numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(n)): \n        sum+=n[i]\n    \n    return sum\n    \ndef average(n) : \n    '''\n    Return the average of a list.\n    '''\n    sum = 0\n    for i in range(len(n)): \n        sum+=n[i]\n    \n    return sum/len(n)\n    \ndef median(n) : \n    '''\n    Return the median of a list.\n    '''\n    n = sorted(n)\n    n.sort()\n    if len(n)%2 == 0: \n        return (n[int(len(n)/2)]+n[int(len(n)/2-1)])/2\n    else:\n        return n[int(len(n)/2)]\n    \ndef variance(n) : \n    '''\n    Return the variance of a list.\n    '''\n    var = 0\n    for i in range(len(n)): \n        var+=n[i]**2\n    var=math.sqrt(var)\n    return var\n    \ndef std(n) : \n    '''\n    Return the standard deviation of a list.\n    '''\n    sum = 0\n    for i in range(len(n)): \n        sum+=n[i]\n    return math.sqrt(sum/len(n))\n    \ndef sortedSquares(n) : \n    '''\n    Return the squares of the first n natural numbers.\n    '''\n    squares = []\n    for i in range(0,len(n)):\n        squares.append(n[i]**2)\n    return squares\n    \ndef firstN(n) : \n    '''\n    Return the first n natural numbers.\n    '''\n    n=int(n)\n    if n < 1 : \n        return print(\"Please enter a natural number\")\n    list = []\n    for i in range(n):\n        if i%2==0:\n            list.append(2)\n        else:\n            list.append(3)\n    return list\n    \ndef lastN(n) : \n    '''\n    Return the last n natural numbers.\n    '''\n    list = []\n    for i in range(n,0,-1):\n        list.append(i)\n    return list\n    \ndef sumofN(n): \n    '''\n    Return the sum of the first n natural numbers.\n    '''\n    list = []\n    for i in range(n):\n        if i%2==0:\n            list.append(2)\n        else:\n            list.append(3)\n    return list\n    \ndef firstNV(n) : \n    '''\n    Return the first n natural numbers, where n is an input.\n    '''\n    list = []\n    for i in range(n):\n        list.append(i**2)\n    return list\n    \ndef lastNV(n) : \n    '''\n    Return the last n natural numbers, where n is an input.\n    '''\n    list = []\n    for i in range(n,0,-1):\n        list.append(i**2)\n    return list\n    \ndef sumofNV(n): \n    '''\n    Return the sum of the first n natural numbers, where n is an input.\n    '''\n    list = []\n    for i in range(n):\n        list.append(i**2)\n    return list\n    \ndef countN(n) : \n    '''\n    Return the number of first n natural numbers.\n    '''\n    list = []\n    for i in range(n):\n        list.append(i)\n    return len(list)\n    \ndef countV(n): \n    '''\n    Return the number of last n natural numbers.\n    '''\n    list = []\n    for i in range(n):\n        list.append(i)\n    return len(list)\n    \ndef isPerfect(n): \n    '''\n    Return True if n is a perfect number, False otherwise.\n    '''\n    if (n>1):\n        for i in range(2,int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n        return True\n    else:\n        return False\n    \ndef isPerfectV(n): \n    '''\n    Return True if n is a perfect number, False otherwise.\n    '''\n    if (n>1):\n        for i in range(2,int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n        return True\n    else:\n        return False\n    \ndef isPerfectN(n): \n    '''\n    Return True if n is a perfect number, False otherwise.\n    '''\n    if (n>1):\n        for i in range(2,int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n        return True\n    else:\n        return False\n    \ndef isPerfectVN(n): \n    '''\n    Return True if n is a perfect number, False otherwise.\n    '''\n    if (n>1):\n        for i in range(2,int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n        return True\n    else:\n        return False\n    \ndef isPerfectNV(n): \n    '''\n    Return True if n is a perfect number, False otherwise.\n    '''\n    if (n>1):\n        for i in range(2,int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n        return True\n    else:\n        return False\n    \ndef isPerfectNVA(n): \n    '''\n    Return True if n is a perfect number, False otherwise.\n    '''\n    if (n>1):\n        for i in range(2,int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n        return True\n    else:\n        return False\n    \ndef isPrime(n): \n    '''\n    Return True if n is a prime number, False otherwise.\n    '''\n    if (n==2):\n        return True\n    if (n%2==0):\n        return False\n    if (n%3==0):\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i=i+6\n    return True\n    \ndef isPerfectPrime(n): \n    '''\n    Return True if n is a prime number, False otherwise.\n    '''\n    if (n==2):\n        return True\n    if (n%2==0):\n        return False\n    if (n%3==0):\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i=i+6\n    return True\n    \ndef isPerfectPrimeV(n): \n    '''\n    Return True if n is a prime number, False otherwise.\n    '''\n    if (n==2):\n        return True\n    if (n%2==0):\n        return False\n    if (n%3==0):\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i=i+6\n    return True\n    \ndef isPerfectPrimeVN(n): \n    '''\n    Return True if n is a prime number, False otherwise.\n    '''\n    if (n==2):\n        return True\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 :\n        return n\n    return sumofFactors(n/2) + sumofFactors(n//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    lst=[]\n    for i in range(1,n+1) :\n        if n%i==0 :\n            lst.append(i)\n    return sum(lst)\ndef sumofFactors2(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    lst=[]\n    i=2\n    while i<=n :\n        if n%i==0 :\n            lst.append(i)\n        i+=1\n    return sum(lst)\ndef sumofFactors3(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    lst=[]\n    i=1\n    while i<=n :\n        if n%i==0 :\n            lst.append(i)\n        i+=1\n    return sum(lst)\ndef factorial(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    lst=[]\n    i=2\n    while i<=n :\n        if n%i==0 :\n            lst.append(i)\n        i+=1\n    return sum(lst)\ndef factorial2(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    lst=[]\n    i=1\n    while i<=n :\n        if n%i==0 :\n            lst.append(i)\n        i+=1\n    return sum(lst)\ndef integerMultiplication(x,n) : \n    '''\n    Write a python function to find the multiplcation of two integers.\n    '''\n    lst=[]\n    i=1\n    while i<=n :\n        if x*i<0 :\n            break\n        elif x*i==0 :\n            lst.append(i)\n        i+=1\n    return lst\ndef integerMultiplication2(x,n) :\n    '''\n    Write a python function to find the multiplcation of two integers.\n    '''\n    lst=[]\n    i=2\n    while i<=n :\n        if x*i<0 :\n            break\n        elif x*i==0 :\n            lst.append(i)\n        i+=1\n    return lst\ndef integerMultiplication3(x,n) :\n    '''\n    Write a python function to find the multiplcation of two integers.\n    '''\n    lst=[]\n    i=1\n    while i<=n :\n        if x*i<0 :\n            break\n        elif x*i==0 :\n            lst.append(i)\n        i+=1\n    return lst\ndef integerMultiplication4(x,n) :\n    '''\n    Write a python function to find the multiplcation of two integers.\n    '''\n    lst=[]\n    i=2\n    while i<=n :\n        if x*i<0 :\n            break\n        elif x*i==0 :\n            lst.append(i)\n        i+=1\n    return lst\ndef gcd(x,y) :\n    '''\n    Write a python function to find the gcd of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    if x==y :\n        return x\n    while i<=j :\n        if x%i==0 :\n            lst.append(i)\n        if y%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef LCM(x,y) :\n    '''\n    Write a python function to find the lcm of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    while i<=j :\n        if x%i==0 :\n            lst.append(i)\n        if y%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef LCM2(x,y) :\n    '''\n    Write a python function to find the lcm of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    while i<=j :\n        if x%i==0 :\n            lst.append(i)\n        if y%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef LCM3(x,y) :\n    '''\n    Write a python function to find the lcm of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    while i<=j :\n        if x%i==0 :\n            lst.append(i)\n        if y%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef LCM4(x,y) :\n    '''\n    Write a python function to find the lcm of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    while i<=j :\n        if x%i==0 :\n            lst.append(i)\n        if y%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef Lcm(x,y) :\n    '''\n    Write a python function to find the lcm of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    while i<=j :\n        if x%i==0 :\n            lst.append(i)\n        if y%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef Lcm2(x,y) :\n    '''\n    Write a python function to find the lcm of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    while i<=j :\n        if x%i==0 :\n            lst.append(i)\n        if y%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef nCr(n,r):\n    '''\n    Write a python function to find the nCr of two integers.\n    '''\n    lst=[]\n    i=0\n    j=0\n    while i<=j :\n        if n%i==0 :\n            lst.append(i)\n        if r%i==0 :\n            lst.append(i)\n        i+=1\n        j+=1\n    return lst\ndef Rp(n,r) :\n    '''\n    Write a python function to find the nCr of two integers.\n    '''\n    lst=[]\n    i=1\n    while i<=n :\n        if n%i==0 :\n            lst.append(i)\n        i+=1\n    i=0\n    while i<=r :\n        if r%i==0 :\n            lst.append(i)\n        i+=1\n    return lst\ndef Divisors(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    lst=[]\n    for i in range(1,int(math.sqrt(n)+1)) :\n        if n%i==0 :\n            if n//i==i :\n                lst.append(i)\n            if n//i!=i :\n                lst.append(n//i)\n    return lst\ndef factorial2(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    lst=[]\n    i=2\n    while i<=n :\n        if n%i==0 :\n            lst.append(i)\n        i+=1\n    return lst\ndef factorial3(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    lst=[]\n    i=2\n    while i<=n :\n        if n%"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total=0\n    for i in range(1,n+1) :\n        if n%i==0:\n            total+=i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2\n    sum = 0\n    while i*i <= n : \n        if n % i == 0 : \n            if i!= n//i : \n                j = n//i\n                if j*j == n :\n                    sum = sum + j\n            else : \n                sum = sum + n \n            i = i + 1\n        else : \n            i = i + 1\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 :\n        return (\"Please enter a number greater than 0!\")\n    else :\n        c = 0\n        for i in range(1,int(math.sqrt(n))+1) :\n            if n % i == 0 :\n                c += i\n        return c\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            factors.append(i)\n            if i!= math.sqrt(n):\n                factors.append(n//i)\n    if n == 1:\n        return 1\n    sum = 0\n    for i in range(len(factors)):\n        sum += factors[i]*(n//factors[i])\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n//2 + sumofFactors(n//2)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.sub(r'\\s', '', text)\n    for a, b in zip(text, text.upper()):\n        if a!= b:\n            return False\n    return True\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if(re.search(r'^[A-Z][a-z]+$', text)!= None):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z'\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text=text.lower()\n    text=text.replace(' ','')\n    if len(text)>1:\n        for word in text:\n            if not word.isalpha() or not word[0].isupper() :\n                continue\n            if text[0]==''and word==' ':\n                text=' '\n            if text[-1]==''and word==' ':\n                text=' '\n            if word=='z':\n                text=' '\n    else:\n        text=' '\n    return text\ndef text_match_word(text):\n    '''\n    Write a function that matches a word in a string.\n    '''\n    text=text.lower()\n    text=text.replace(' ','')\n    if len(text)>1:\n        for word in text:\n            if not word.isalpha() or not word[0].isupper() :\n                continue\n            if text[0]==''and word==' ':\n                text=' '\n            if word=='z':\n                text=' '\n    else:\n        text=' '\n    return text\ndef get_words(text):\n    '''\n    Get all words from a given text.\n    '''\n    return text.split()\ndef get_words_matches(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_wordz,text)\ndef get_words_matches_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word,text)\ndef get_words_matches_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re,text)\ndef get_words_matches_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re_re,text)\ndef get_words_matches_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re_re,text)\ndef get_words_matches_re_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word,text)\ndef get_words_matches_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word,text)\ndef get_words_matches_word_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_re,text)\ndef get_words_matches_word_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_re_re,text)\ndef get_words_matches_word_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_re_re,text)\ndef get_words_matches_word_re_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_word,text)\ndef get_words_matches_word_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_word,text)\ndef get_words_matches_word_word_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_word_re,text)\ndef get_words_matches_word_word_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_word_re_re,text)\ndef get_words_matches_word_word_word_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_word_word_re_re,text)\ndef get_words_matches_word_word_word_re_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_word_word_re_word,text)\ndef get_words_matches_word_word_word_word_re_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_word_word_re_word,text)\ndef get_words_matches_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re,text)\ndef get_words_matches_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word,text)\ndef get_words_matches_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word,text)\ndef get_words_matches_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re,text)\ndef get_words_matches_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re_re,text)\ndef get_words_matches_re_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re_re_re,text)\ndef get_words_matches_re_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word,text)\ndef get_words_matches_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word,text)\ndef get_words_matches_word_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_re,text)\ndef get_words_matches_word_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word,text)\ndef get_words_matches_word_word(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word,text)\ndef get_words_matches_word_word_re(text):\n    '''\n    Get all words in a given text that match the given pattern.\n    '''\n    return re.findall(text_match_word_word_re,text)\ndef get_words_matches_word_word_word_re(text):\n    '''\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # first get a list of words in the text\n    my_list = re.findall(r'\\bz\\b',text)\n    # iterate through the list and check if there is a match\n    for i in my_list:\n        # if there is a match\n        if (i.upper()=='Z'):\n            # set the first element of the list to the second element\n            return text.replace(i,i.upper())\n    # if there is no match, return the original\n    return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.findall('z',text)\n    return x\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z|Z'\n    s = re.search(pattern, text)\n    return s\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def remove_line(line):\n        '''\n        Clean up a line of text.\n        '''\n        line = re.sub(r'[^\\w]', '', line).strip()\n        return line\n    def remove_punc(line):\n        '''\n        Clean up a line of text.\n        '''\n        line = re.sub(r'[^a-zA-Z0-9]+', '', line).lower()\n        return line\n    def remove_empty_chars(line):\n        '''\n        Clean up a line of text.\n        '''\n        line = re.sub(r'[^a-zA-Z0-9]+', '', line).replace('\\n', '').replace('\\t', '').replace('\\r', '')\n        return line\n    def remove_word_ending(line):\n        '''\n        Clean up a line of text.\n        '''\n        line = re.sub(r'[^a-zA-Z0-9]+', '', line).replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('.', '')\n        return line\n    \n    # Clean up a string of text\n    line = remove_line(text)\n    line = remove_punc(line)\n    line = remove_empty_chars(line)\n    line = remove_word_ending(line)\n    # Return a cleaned up line of text\n    return line\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return any(word.startswith('z') for word in text.split())\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    pattern = \"z\"[0:4]\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = (int(monthnum2)-1)\n    if monthnumb<0 or monthnumb > 12:\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # checking the input\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        if monthnum2 == 2:\n            return True\n        else:\n            return False\n    elif monthnum2 == 2:\n        if monthnum2 == 1 or monthnum2 == 3:\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        if monthnum2 == 1 or monthnum2 == 4:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4:\n        if monthnum2 == 1 or monthnum2 == 5:\n            return True\n        else:\n            return False\n    elif monthnum2 == 5:\n        if monthnum2 == 1 or monthnum2 == 6:\n            return True\n        else:\n            return False\n    elif monthnum2 == 6:\n        if monthnum2 == 1 or monthnum2 == 7:\n            return True\n        else:\n            return False\n    elif monthnum2 == 7:\n        if monthnum2 == 1 or monthnum2 == 8:\n            return True\n        else:\n            return False\n    elif monthnum2 == 8:\n        if monthnum2 == 1 or monthnum2 == 9:\n            return True\n        else:\n            return False\n    elif monthnum2 == 9:\n        if monthnum2 == 1 or monthnum2 == 10:\n            return True\n        else:\n            return False\n    elif monthnum2 == 10:\n        if monthnum2 == 1 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 11:\n        if monthnum2 == 1 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 > 1 and monthnum2 <= 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #if monthnum2 > 12 or monthnum2 < 1:\n    #    return False\n    #if monthnum2 == 12:\n    #    return True\n    #if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n    #    return True\n    #if monthnum2 in [4, 6, 9, 11]:\n    #    return True\n    #if monthnum2 == 2:\n    #    return True\n    #if monthnum2 == 3:\n    #    return True\n    #if monthnum2 == 4:\n    #    return True\n    #if monthnum2 == 5:\n    #    return True\n    #if monthnum2 == 6:\n    #    return True\n    #if monthnum2 == 7:\n    #    return True\n    #if monthnum2 == 8:\n    #    return True\n    #if monthnum2 == 9:\n    #    return True\n    #if monthnum2 == 10:\n    #    return True\n    #if monthnum2 == 11:\n    #    return True\n    #if monthnum2 == 12:\n    #    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # if month number is less than 1 or greater than 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        print('Error! Please use the valid range.')\n    # if month number is in the range 1 - 12\n    elif monthnum2 > 12:\n        print('Error! Please use the valid range.')\n    # if month number is not in the range 1 - 12\n    else:\n        # if month number is 1\n        if monthnum2 == 1:\n            print('Error! Please use the valid range.')\n        # if month number is 2\n        elif monthnum2 == 2:\n            print('Error! Please use the valid range.')\n        # if month number is 3\n        elif monthnum2 == 3:\n            print('Error! Please use the valid range.')\n        # if month number is 4\n        elif monthnum2 == 4:\n            print('Error! Please use the valid range.')\n        # if month number is 5\n        elif monthnum2 == 5:\n            print('Error! Please use the valid range.')\n        # if month number is 6\n        elif monthnum2 == 6:\n            print('Error! Please use the valid range.')\n        # if month number is 7\n        elif monthnum2 == 7:\n            print('Error! Please use the valid range.')\n        # if month number is 8\n        elif monthnum2 == 8:\n            print('Error! Please use the valid range.')\n        # if month number is 9\n        elif monthnum2 == 9:\n            print('Error! Please use the valid range.')\n        # if month number is 10\n        elif monthnum2 == 10:\n            print('Error! Please use the valid range.')\n        # if month number is 11\n        elif monthnum2 == 11:\n            print('Error! Please use the valid range.')\n        # if month number is 12\n        elif monthnum2 == 12:\n            print('Error! Please use the valid range.')\n            \n        # if month number is not in the range 1 - 12\n        else:\n            print('Error! Please use the valid range.')\n        \n    # end of if\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #TODO: Complete the function\n    \n    #HINT: You can use the Python Boolean functions in the os module.\n    \n    #Write your code here\n    if monthnum2==1:\n        return True\n    elif monthnum2==2:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==3:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==4:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==5:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==6:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==7:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==8:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==9:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==10:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==11:\n        if day==31:\n            return True\n        else:\n            return False\n    elif monthnum2==12:\n        if day==31:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 'Jan' or monthnum2 == 'January':\n        return True\n    elif monthnum2 == 'Feb' or monthnum2 == 'February':\n        return True\n    elif monthnum2 == 'Mar' or monthnum2 == 'March':\n        return True\n    elif monthnum2 == 'Apr' or monthnum2 == 'April':\n        return True\n    elif monthnum2 == 'May' or monthnum2 == 'May':\n        return True\n    elif monthnum2 == 'Jun' or monthnum2 == 'June':\n        return True\n    elif monthnum2 == 'Jul' or monthnum2 == 'July':\n        return True\n    elif monthnum2 == 'Aug' or monthnum2 == 'August':\n        return True\n    elif monthnum2 == 'Sep' or monthnum2 == 'September':\n        return True\n    elif monthnum2 == 'Oct' or monthnum2 == 'October':\n        return True\n    elif monthnum2 == 'Nov' or monthnum2 == 'November':\n        return True\n    elif monthnum2 == 'Dec' or monthnum2 == 'December':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return (monthnum2>31 and monthnum2<=12) or (monthnum2>0 and monthnum2==0)\ndef check_yearnumb_number(yearnum2):\n    '''\n    Write a function to check whether the given year number contains a leap year or not.\n    '''\n    return (yearnum2%4==0 and yearnum2%100!=0 or yearnum2%400==0)\ndef monthnumb_check(monthnum,monthname,numb):\n    '''\n    Write a function that prints a given month and the number of days in it.\n    '''\n    print(monthname+str(monthnum)+\" days\")\ndef yearnumb_check(yearnum,numb):\n    '''\n    Write a function that prints a given year and the number of days in it.\n    '''\n    print(str(yearnum)+\" day(s)\")\ndef is_leap_year(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year2(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year3(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year4(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year5(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year6(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year7(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year8(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year9(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year10(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year11(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef is_leap_year12(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or (year%400==0 and year%4!=0))\ndef main():\n    print(\"Do you have an error (1,2,3,4,5,6,7,8,9)\")\n    print(\"If yes, write the correct input.\")\n    print(\"If no, write the incorrect input.\")\n    print(\"Type 'exit' to exit\")\n    while True:\n        try:\n            monthnum=int(input(\"Enter the month number you want: \"))\n            yearnum=int(input(\"Enter the year number you want: \"))\n            monthname=input(\"Enter the name of the month in this year: \")\n            monthnumb=int(input(\"Enter the number of days in this month: \"))\n            yearname=input(\"Enter the name of the year in this month: \")\n            if monthnumb!=0:\n                print(\"The given month number is not 0\")\n            else:\n                break\n            if yearnum!=0:\n                print(\"The given year number is not 0\")\n            else:\n                break\n            if monthnumb_check(monthnum,monthname,monthnum):\n                print(\"The given month number is a valid month number\")\n                if monthnumb_check(yearnum,yearname,monthnum):\n                    print(\"The given year number is a valid year number\")\n                    break\n                else:\n                    print(\"Please make sure to enter only numbers between 1 and 12\")\n                    continue\n            else:\n                print(\"Please make sure to enter only numbers between 1 and 12\")\n                continue\n        except ValueError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n        except TypeError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n        except IndexError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n    print(\"Type 'exit' to exit\")\n    while True:\n        try:\n            is_leap_year(yearnum)\n            is_leap_year2(yearnum)\n            is_leap_year3(yearnum)\n            is_leap_year4(yearnum)\n            is_leap_year5(yearnum)\n            is_leap_year6(yearnum)\n            is_leap_year7(yearnum)\n            is_leap_year8(yearnum)\n            is_leap_year9(yearnum)\n            is_leap_year10(yearnum)\n            is_leap_year11(yearnum)\n            is_leap_year12(yearnum)\n            break\n        except IndexError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n        except TypeError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n        except IndexError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n    print(\"Type 'exit' to exit\")\n    while True:\n        try:\n            is_leap_year2(yearnum)\n            is_leap_year3(yearnum)\n            is_leap_year4(yearnum)\n            is_leap_year5(yearnum)\n            is_leap_year6(yearnum)\n            is_leap_year7(yearnum)\n            is_leap_year8(yearnum)\n            is_leap_year9(yearnum)\n            is_leap_year10(yearnum)\n            is_leap_year11(yearnum)\n            is_leap_year12(yearnum)\n            break\n        except IndexError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n        except TypeError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n        except IndexError:\n            print(\"Please enter only numbers between 1 and 12\")\n            continue\n    print(\"Type 'exit' to exit\")\n    while True:\n        try:\n            is_leap_year2(yearnum)\n            is_leap_year3(yearnum)\n            is_leap_year4(yearnum)\n            is_leap_year5(yearnum)\n            is_leap_year6(yearnu"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_str = ''\n    for word in stringlist:\n        reverse_str += word[::-1]\n    return reverse_str"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    #check if the list is empty\n    if len(stringlist)==0:\n        return stringlist\n    \n    #get the length of the list\n    length = len(stringlist)\n    \n    #set the temp variable\n    temp = []\n    \n    #iterate through the list to reverse each element\n    for x in range(length):\n        #append the element to the temp list\n        temp.append(stringlist[x])\n        \n        #iterate through the list backwards\n        for y in range(length-1,x,-1):\n            #append the element to the temp list\n            temp.append(stringlist[y])\n            #break loop\n            break\n    \n    #reversing the temp list\n    for x in range(length):\n        stringlist[x] = temp[x]\n    \n    #return the list\n    return stringlist\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string = ''\n    for string in stringlist:\n        reverse_string += string +''\n    return reverse_string[:-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    #code here\n    return stringlist\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) <= 0:\n        return stringlist\n    for i in range(len(stringlist)//2):\n        stringlist[i], stringlist[len(stringlist)-1-i] = stringlist[len(stringlist)-1-i], stringlist[i]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i].rstrip()\n        stringlist[i] = stringlist[i].lstrip()\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[-1] + stringlist[0:-1] for stringlist in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == None or len(stringlist) == 0:\n        return stringlist\n    \n    if len(stringlist) == 1:\n        return stringlist[0][::-1]\n    \n    return reverse_string_list(stringlist[1:]) + stringlist[0][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.sort(reverse=True)\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    finalstring = \"\"\n    for word in stringlist:\n        finalstring += word[::-1]\n    return finalstring\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum_length = min(lst)\n    minimum_length_index = lst.index(minimum_length)\n    return minimum_length,minimum_length_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    temp=0\n    for i in range(len(lst)):\n        if len(lst[i])>temp:\n            temp=len(lst[i])\n    return temp\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # sort the list in ascending order\n    lst.sort()\n    \n    # check if there is at least one sublist\n    if len(lst) == 0: \n        return []\n    \n    # initialize the first sublist\n    min_index = 0\n    min_sublist = []\n    \n    # find the sublist length\n    for i in range(len(lst)):\n        # check if the current length is the same as the previous index\n        if len(min_sublist) == 0 or len(min_sublist) < len(lst[i]):\n            min_sublist = lst[i]\n            min_index = i\n    \n    # return the index\n    return min_sublist, min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0:2]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # list = []\n    # for i in range(len(lst)):\n    #     list.append(lst[i])\n    \n    # if len(list)>0:\n    #     if len(list)==1:\n    #         return list[0]\n    #     else:\n    #         for i in range(len(list)):\n    #             for j in range(len(list)):\n    #                 if list[i]<list[j]:\n    #                     list[i],list[j] = list[j],list[i]\n    #                 if len(list)==1:\n    #                     return list[0]\n    #     return list[0]\n    \n    # return lst[0]\n    \n    def Min(lst): \n        '''\n        Given a list, return the min length of the list.\n        '''\n        n=len(lst)\n        min=lst[0]\n        for i in range(n):\n            if min>lst[i]:\n                min=lst[i]\n        return min\n        \n    return lst[0]\n    \ndef print_list(lst): \n    '''\n    Print a list of strings using spaces between each item.\n    '''\n    for i in range(len(lst)): \n        print(' '*(i),lst[i])\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_idx = 0\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n            min_idx = i\n    return min_idx\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    i = 1\n    for j in range(0, len(lst)):\n        if lst[i] > lst[j]:\n            i = j\n    return lst[i]\nlst = [1,2,3,4,5,6,7,8,9]\nprint(Find_Min(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    arr = [] \n    for i in range(len(lst)): \n        arr.append(lst[i][1]) \n    arr.sort() \n    min = arr[0] \n    for i in range(len(arr)): \n        if arr[i]!= min: \n            min = arr[i] \n            continue\n    return min "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return lst\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if min > lst[i]:\n            min = lst[i]\n    return min\n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    if len(lst) == 1:\n        return lst\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if max < lst[i]:\n            max = lst[i]\n    return max\n    \ndef main():\n    list = [2,4,6,8,10,12,14]\n    print(f\"Minimum Length: {Find_Min(list)}\")\n    print(f\"Maximum Length: {Find_Max(list)}\")\n    \nmain()"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    if n < 2:\n        return None\n    else:\n        minimum = lst[1]\n        for i in range(2, n):\n            if lst[i] < minimum:\n                minimum = lst[i]\n        return minimum\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=b[0]-l[0]\n    b=b[1]-l[1]\n    return a*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    print('Rectangle area is:',area)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef square_area(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return l*l\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*l+2*b\ndef square_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*l+4*b\ndef rectangle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return l*l+b*b\ndef square_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a square.\n    '''\n    return l*l+b*b\ndef rectangle_perimeter_diagonal(l,b):\n    '''\n    Write a function to find the perimeter and diagonal of a rectangle.\n    '''\n    return l*2+b*"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    print(\"The area of the rectangle is: \"+str(a))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if type(l)==int and type(b)==int:\n        return l*b\n    else:\n        raise TypeError(\"Rectangle must be an integer\")\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # your code goes here\n    # TODO: remove uppercase substrings of string 'ham' using the following pattern:\n    # H(A)M(h)M(a)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M(m)M(h)M"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #Your code goes here\n    x=re.sub(r'[A-Z]','',str1)\n    y=re.sub(r'[a-z]','',str1)\n    z=re.sub(r'[A-Z][a-z]','',str1)\n    w=re.sub(r'[A-Z]','',str1)\n    z=z.upper()\n    y=y.upper()\n    x=x.upper()\n    str1=z+y+x\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if type(str1) == str:\n        return str(str1).translate(str.maketrans('', '', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    elif type(str1) == list:\n        return [remove_uppercase(str1[i]) for i in range(len(str1))]\n    else:\n        raise TypeError('Invalid type for argument \\'str1\\'')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(c.upper() if c.isalpha() else c for c in str1.upper())\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(c.lower() if c.isalpha() else c for c in str1.lower())\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return ''.join(c for c in str1 if c.isdigit())\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','0123456789'))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',r'[^a-zA-Z0-9!@#$%&\\'\\(\\)\\*\\+\\-\\,\\.\\/\\?\\:_\\{\\}\\(\\)]'))\ndef remove_url(str1):\n    '''\n    Write a function to remove URLs from a given string.\n    '''\n    return re.sub('\\S*(http|https?|ftp|tel|mail|tel1|mail1)\\S+', '', str1)\ndef remove_hashtag(str1):\n    '''\n    Write a function to remove hashtags from a given string.\n    '''\n    return str1.translate(str.maketrans('','','#!&*+=/\\|;:\"<>?@'))\ndef remove_domain(str1):\n    '''\n    Write a function to remove domain names from a given string.\n    '''\n    return str1.translate(str.maketrans('','','@!#&*+=/\\|;:\"<>?@'))\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','!@#$%&*+=/\\\\|;:<>?@'))\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\d+'))\ndef remove_dates(str1):\n    '''\n    Write a function to remove dates from a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\d+/\\d+/\\d+'))\ndef remove_dash(str1):\n    '''\n    Write a function to remove dash in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\d+-'))\ndef remove_ampersand(str1):\n    '''\n    Write a function to remove all the ampersands in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\!$%&*+=/\\'\\(\\)\\[\\]|\\_'))\ndef remove_all_special(str1):\n    '''\n    Write a function to remove all special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('','','[^!@#\\'$%&*+/\\|;:\\{\\}<>?@]+'))\ndef remove_numbers_end(str1):\n    '''\n    Write a function to remove all numbers in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\d+'))\ndef remove_numbers_start(str1):\n    '''\n    Write a function to remove all numbers in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\d+-'))\ndef remove_brackets(str1):\n    '''\n    Write a function to remove bracketed numbers in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\[\\]'))\ndef remove_hyphens(str1):\n    '''\n    Write a function to remove hyphens in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\-\\-'))\ndef remove_links(str1):\n    '''\n    Write a function to remove links in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\[\\'\\]'))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\[\\]'))\ndef remove_space(str1):\n    '''\n    Write a function to remove spaces in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s'))\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove spaces in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+'))\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+'))\ndef remove_double_spaces(str1):\n    '''\n    Write a function to remove double spaces in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+\\s+'))\ndef remove_latin_form(str1):\n    '''\n    Write a function to remove latin form in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+'))\ndef remove_numbers_end_v2(str1):\n    '''\n    Write a function to remove numbers in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\d+'))\ndef remove_numbers_start_v2(str1):\n    '''\n    Write a function to remove numbers in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\d+-'))\ndef remove_blank_spaces(str1):\n    '''\n    Write a function to remove blank spaces in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+'))\ndef remove_latin(str1):\n    '''\n    Write a function to remove latin characters in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+'))\ndef remove_special_characters_v2(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+\\s+'))\ndef remove_special_characters_v3(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+\\s+'))\ndef remove_special_characters_v3(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+\\s+\\s+'))\ndef remove_special_characters_v4(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('','','\\s+\\s+\\s+\\s+'))\ndef remove_special_characters_v4(str1):\n    '''\n    Write a function to remove specia"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l = len(str1)\n    ans = ''\n    for i in range(0,l):\n        if str1[i].isupper():\n            ans += str1[i]\n        else:\n            ans += str1[i].lower()\n    return ans\ndef remove_punct(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isalpha():\n            ans += str1[i].lower()\n        elif str1[i].isdigit():\n            ans += str1[i]\n    return ans\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isdigit():\n            ans += str1[i]\n        else:\n            ans += str1[i].lower()\n    return ans\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i] == \" \":\n            ans += str1[i]\n        elif str1[i] == \"\\n\":\n            ans += str1[i]\n        elif str1[i] == \"\\r\":\n            ans += str1[i]\n        elif str1[i] == \"\\t\":\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_letters(str1):\n    '''\n    Write a function to remove letters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isalpha():\n            ans += str1[i]\n        else:\n            ans += str1[i].lower()\n    return ans\ndef convert_lower(str1):\n    '''\n    Write a function to convert all letters from a given string to lower case letters.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isalpha():\n            ans += str1[i].lower()\n        else:\n            ans += str1[i]\n    return ans\ndef convert_upper(str1):\n    '''\n    Write a function to convert all letters from a given string to upper case letters.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isalpha():\n            ans += str1[i].upper()\n        else:\n            ans += str1[i]\n    return ans\ndef convert_digits(str1):\n    '''\n    Write a function to convert all digits from a given string to digits.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isdigit():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef convert_spaces(str1):\n    '''\n    Write a function to convert all spaces from a given string to spaces.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i] == \" \":\n            ans += \" \"\n        else:\n            ans += str1[i]\n    return ans\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isdigit():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i] == \" \":\n            ans += str1[i]\n        elif str1[i] == \"\\n\":\n            ans += str1[i]\n        elif str1[i] == \"\\r\":\n            ans += str1[i]\n        elif str1[i] == \"\\t\":\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_letters(str1):\n    '''\n    Write a function to remove letters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isalpha():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_upper(str1):\n    '''\n    Write a function to remove all uppercase letters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isupper():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_lower(str1):\n    '''\n    Write a function to remove all lowercase letters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].islower():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isdigit():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_letters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i] == \" \":\n            ans += str1[i]\n        elif str1[i] == \"\\n\":\n            ans += str1[i]\n        elif str1[i] == \"\\r\":\n            ans += str1[i]\n        elif str1[i] == \"\\t\":\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_upper(str1):\n    '''\n    Write a function to remove all uppercase letters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isupper():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_lower(str1):\n    '''\n    Write a function to remove all lowercase letters from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].islower():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i] == \" \":\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    ans = ''\n    for i in range(0,len(str1)):\n        if str1[i].isdigit():\n            ans += str1[i]\n        else:\n            ans += str1[i]\n    return ans\ndef remove_special_char(str1):\n    '''\n    Writ"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"'\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"__\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"_\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"_\", \"\")\n    str1 = str1.replace(\"_\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"_\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"_\", \"\")\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]', '', str1).upper()\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # write your code here\n    # this function removes all the uppercase character\n    # this function will run through each character in the string\n    # it should remove the first occurrence of all uppercase\n    # it should then remove the last occurrence of all uppercase\n    # this function should print the resulting string\n    # the result of this function should be printed in the console\n    # the first letter should be removed from the string\n    # the last letter should be removed from the string\n    for i in range(len(str1)):\n        if(str1[i].isupper()):\n            str1 = str1.replace(str1[i],\"\")\n            break\n    return(str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r\"(?=[A-Z])\"\n    str1 = re.sub(pattern, '', str1)\n    return str1\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublist = []\n    # Start with an empty list.\n    for i in lst:\n        # Append each item of the list to the sublist.\n        sublist.append(i[0])\n    # Return the first element of the sublist.\n    return sublist[0]\n    \n    \ndef main():\n    '''\n    Main function to run the program.\n    '''\n    # Create a list of strings.\n    str_lst = [\"a\", \"b\", \"c\", \"d\"]\n    # Make a copy of the list.\n    str_copy = str_lst.copy()\n    # Use a while loop to get all the elements from the list.\n    while len(str_lst)!= 0:\n        # Get the first element of the list.\n        first_element = str_lst[0]\n        # Get all the elements of the list except the first.\n        remaining_lst = str_lst[1:]\n        # Use a while loop to get all the elements from the remaining\n        # list.\n        while len(remaining_lst)!= 0:\n            # Get the next element from the remaining list.\n            next_element = remaining_lst[0]\n            # Get the next element of the remaining list.\n            remaining_lst.remove(next_element)\n            # Put this element into the copy of the list.\n            str_copy.insert(0, next_element)\n        # Print the list.\n        print(str_lst)\n        print(str_copy)\n    # Print the list again.\n    print(str_lst)\n    print(str_copy)\n    \n    \n    # TODO: Add a doctest to make sure that all the functions in this section complete.\n    # Try to print the list, remove all the repeated elements, print the list again,\n    # and test that the output is correct.\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][0])\n    return new_lst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    for i in lst:\n        if type(i) == list:\n            temp = Extract(i)\n            return temp[0]\n        elif type(i) == str:\n            return i\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    n = len(lst)\n    for i in range(n):\n        if n == 1:\n            return lst[0]\n        elif n == 2:\n            return lst[0]\n        elif i!= n-1:\n            return lst[i]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    retVal = []\n    for sublist in lst:\n        retVal.append(sublist[0])\n    return retVal"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst2 = []\n    for x in lst:\n        lst2.append(x[0])\n    return lst2[0]\ndef Count(lst): \n    '''\n    Write a python function to count the number of each \n    sublist.\n    '''\n    count = []\n    for x in lst:\n        count.append(x.count(x[0]))\n    return count\ndef Average(lst): \n    '''\n    Write a python function to get the average of the values \n    in each sublist.\n    '''\n    avg = []\n    for x in lst:\n        sum = 0\n        for y in x:\n            sum += y\n        avg.append(sum/len(x))\n    return avg\ndef Max(lst): \n    '''\n    Write a python function to get the largest value in \n    each sublist.\n    '''\n    max = []\n    for x in lst:\n        max.append(max(x))\n    return max\ndef Min(lst): \n    '''\n    Write a python function to get the smallest value in \n    each sublist.\n    '''\n    min = []\n    for x in lst:\n        min.append(min(x))\n    return min\ndef Intersect(lst1, lst2): \n    '''\n    Write a python function to check if the first \n    sublist contains any sublist.\n    '''\n    for x in range(len(lst1)):\n        if lst1[x] in lst2:\n            return True\n    return False\ndef Union(lst1, lst2): \n    '''\n    Write a python function to check if the \n    first sublist contains any sublist.\n    '''\n    for x in range(len(lst1)):\n        if lst1[x] in lst2:\n            return True\n    return False\ndef Output(lst, res):\n    '''\n    Write a python function to display the sublist \n    where the elements of the sublist appear \n    to be in the given list.\n    '''\n    for x in range(len(lst)):\n        print(lst[x])\ndef Test(lst): \n    '''\n    Write a python function to print out all the \n    elements of a list except the first element.\n    '''\n    print(\"Original list: \", lst)\n    print(\"Extracted list: \", Extract(lst))\n    print(\"Count of each sublist: \", Count(lst))\n    print(\"Average of each sublist: \", Average(lst))\n    print(\"Maximum in each sublist: \", Max(lst))\n    print(\"Minimum in each sublist: \", Min(lst))\n    print(\"Intersecting sublists: \", Intersect(lst1, lst2))\n    print(\"Union of sublists: \", Union(lst1, lst2))\n    print(\"Output: \", Output(lst, res))\nlst1 = []\nlst2 = []\nlst3 = []\nlst4 = []\nlst5 = []\nlst6 = []\nlst7 = []\nlst8 = []\nlst9 = []\nlst10 = []\nlst11 = []\nlst12 = []\nlst13 = []\nlst14 = []\nlst15 = []\nlst16 = []\nlst17 = []\nlst18 = []\nlst19 = []\nlst20 = []\nlst21 = []\nlst22 = []\nlst23 = []\nlst24 = []\nlst25 = []\nlst26 = []\nlst27 = []\nlst28 = []\nlst29 = []\nlst30 = []\nlst31 = []\nlst32 = []\nlst33 = []\nlst34 = []\nlst35 = []\nlst36 = []\nlst37 = []\nlst38 = []\nlst39 = []\nlst40 = []\nlst41 = []\nlst42 = []\nlst43 = []\nlst44 = []\nlst45 = []\nlst46 = []\nlst47 = []\nlst48 = []\nlst49 = []\nlst50 = []\nlst51 = []\nlst52 = []\nlst53 = []\nlst54 = []\nlst55 = []\nlst56 = []\nlst57 = []\nlst58 = []\nlst59 = []\nlst60 = []\nlst61 = []\nlst62 = []\nlst63 = []\nlst64 = []\nlst65 = []\nlst66 = []\nlst67 = []\nlst68 = []\nlst69 = []\nlst70 = []\nlst71 = []\nlst72 = []\nlst73 = []\nlst74 = []\nlst75 = []\nlst76 = []\nlst77 = []\nlst78 = []\nlst79 = []\nlst80 = []\nlst81 = []\nlst82 = []\nlst83 = []\nlst84 = []\nlst85 = []\nlst86 = []\nlst87 = []\nlst88 = []\nlst89 = []\nlst90 = []\nlst91 = []\nlst92 = []\nlst93 = []\nlst94 = []\nlst95 = []\nlst96 = []\nlst97 = []\nlst98 = []\nlst99 = []\nlst100 = []\nlst101 = []\nlst102 = []\nlst103 = []\nlst104 = []\nlst105 = []\nlst106 = []\nlst107 = []\nlst108 = []\nlst109 = []\nlst110 = []\nlst111 = []\nlst112 = []\nlst113 = []\nlst114 = []\nlst115 = []\nlst116 = []\nlst117 = []\nlst118 = []\nlst119 = []\nlst120 = []\nlst121 = []\nlst122 = []\nlst123 = []\nlst124 = []\nlst125 = []\nlst126 = []\nlst127 = []\nlst128 = []\nlst129 = []\nlst130 = []\nlst131 = []\nlst132 = []\nlst133 = []\nlst134 = []\nlst135 = []\nlst136 = []\nlst137 = []\nlst138 = []\nlst139 = []\nlst140 = []\nlst141 = []\nlst142 = []\nlst143 = []\nlst144 = []\nlst145 = []\nlst146 = []\nlst147 = []\nlst148 = []\nlst149 = []\nlst150 = []\nlst151 = []\nlst152 = []\nlst153 = []\nlst154 = []\nlst155 = []\nlst156 = []\nlst157 = []\nlst158 = []\nlst159 = []\nlst160 = []\nlst161 = []\nlst162 = []\nlst163 = []\nlst164 = []\nlst165 = []\nlst166 = []\nlst167 = []\nlst168 = []\nlst169 = []\nlst170 = []\nlst171 = []\nlst172 = []\nlst173 = []\nlst174 = []\nlst175 = []\nlst176 = []\nlst177 = []\nlst178 = []\nlst179 = []\nlst180 = []\nlst181 = []\nlst182 = []\nlst183 = []\nlst184 = []\nlst185 = []\nlst186 = []\nlst187 = []\nlst188 = []\nlst189 = []\nlst190 = []\nlst191 = []\nlst192 = []\nlst193 = []\nlst194 = []\nlst195 = []\nlst196 = []\nlst197 = []\nlst198 = []\nlst199 = []\nlst200 = []\nlst201 = []\nlst202 = []\nlst203 = []\nlst204 = []\nlst205 = []\nlst206 = []\nlst207 = []\nlst208 = []\nlst209 = []\nlst210 = []\nlst211 = []\nlst212 = []\nlst213 = []\nlst214 = []\nlst215 = []\nls"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    try:\n        x = lst[0]\n    except:\n        print('List is empty')\n        return None\n    return x\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0: \n        return None\n    else: \n        return lst[0]\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_counter = 0\n    # loop through the string\n    for i in range(len(str)):\n        # if the char is a capital letter, append it\n        if(str[i].isupper()):\n            upper_counter += 1\n    return upper_counter\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_str = str.lower()\n    count_upper = 0\n    for i in lower_str:\n        if i.isupper():\n            count_upper += 1\n    return count_upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if str.isupper():\n        upper_chars = str.upper()\n        return len(upper_chars)\n    else:\n        return 0\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower = 0\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n        else:\n            lower += 1\n    print('Number of Upper Case Characters = ', upper)\n    print('Number of Lower Case Characters = ', lower)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    import string\n    count=0\n    temp=string.ascii_lowercase\n    for i in temp:\n        if i in str.lower():\n            count+=1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combs_list = []\n    for i in range(len(list1)):\n        combs_list.append(list1[i:i+2])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # A list of all possible combinations of elements\n    list1_temp = []\n    \n    # Iterate through elements in the list\n    for index in range(len(list1)):\n        \n        # Add all the elements to a new list\n        list1_temp.append(list1[index])\n    \n    # Return the list of all possible combinations of the elements\n    return list(itertools.permutations(list1_temp))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Making a set of all the elements of the list.\n    set_of_elements = set(list1)\n    # print(set_of_elements)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 4:\n        print(\"Invalid input\")\n        return\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    else:\n        temp = combinations_list(list1[1:])\n        for i in range(1, len(list1)):\n            if i == len(list1)-1:\n                temp.append([list1[i], list1[0]])\n            else:\n                temp.append([list1[i], list1[i+1]])\n        return temp\n        \n        \ndef permutations_list(list):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    if len(list) == 0:\n        return []\n    if len(list) == 1:\n        return [[list[0]]]\n    if len(list) == 2:\n        return [[list[0], list[1]]]\n    if len(list) == 3:\n        return [[list[0], list[1], list[2]]]\n    else:\n        temp = permutations_list(list[1:])\n        for i in range(0, len(list)-1):\n            temp.append(list[i] + list[i+1])\n        return temp\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    # split the list into 3 parts\n    result_list = []\n    # iterate through each group of elements\n    for l in range(1,len(list1)):\n        # pick up each group of elements\n        temp_list = list1[:l]\n        # join each group of elements together\n        result = [a + b for a in temp_list for b in combinations_list(temp_list)]\n        # append result to result_list\n        result_list.append(result)\n    # return the list\n    return result_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n    return l\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    for i in range(1, len(list1)+1):\n        for item in itertools.combinations(list1, i):\n            combos.append(tuple(item))\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    res = []\n    for i in range(1,n+1):\n        if not res:\n            res.append([])\n        for j in range(1,i+1):\n            res.append([i,j])\n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_subarray = []\n    prod = 1\n    \n    for i in range(len(arr)):\n        subarray = arr[i+1:].copy()\n        if prod > 0:\n            for j in range(len(subarray)):\n                prod = prod*subarray[j]\n        max_subarray.append(prod)\n        \n    return max_subarra"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod=0\n    curr_max=1\n    curr_sum=0\n    for i in range(0,len(arr)):\n        curr_sum+=arr[i]\n        curr_max=max(curr_max,curr_sum)\n        if curr_sum<0:\n            curr_sum=0\n            curr_max=1\n        else:\n            curr_sum-=arr[i]\n    return curr_max\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # result = []\n    # i, j = 0, 0\n    # curr = 0\n    # max_product = 0\n    # curr_product = 1\n    # while i < len(arr):\n    #     curr_product *= arr[i]\n    #     if curr_product > max_product:\n    #         max_product = curr_product\n    #     curr += 1\n    #     while j < len(arr) and arr[j] > arr[i] and arr[j] > curr_product:\n    #         curr_product *= arr[j]\n    #         j += 1\n    #     i += 1\n    # return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    d = {}\n    \n    def MaxSubArray(arr, i, j):\n        if i == j:\n            return 0\n        elif i == 0:\n            return arr[j]\n        elif arr[j] < arr[i]:\n            return MaxSubArray(arr, i+1, j)\n        elif arr[j] > arr[i]:\n            return MaxSubArray(arr, i, j-1)\n    \n        return MaxSubArray(arr, i+1, j-1)\n    \n    max_sub = 0\n    for i in range(n):\n        max_sub = max(arr[i], MaxSubArray(arr, i, n-1))\n    return max_sub\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    sum = 0\n    max_subarray_product = []\n    for i in range(len(arr)):\n        sum = max(arr[i],sum)\n        max_subarray_product.append(sum)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_product_subarray(arr, n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        max_prod = -1\n        prod = 1\n        for i in range(n):\n            prod = prod * arr[i]\n        # if the product is greater than the maximum product of arr[0], arr[1], arr[2]...\n            # then we can say that arr[i] * arr[i+1] > max_prod\n            # so, now we get the product of arr[i]*arr[i+1]\n            # if we do arr[i+1] == 0, then we can simply ignore\n            # arr[i+1] = 1 * arr[i]\n            # so, we need to multiply the maximum product of arr[0], arr[1]...\n            # to get the max_prod\n            # so, we will use the max product of arr[0] and arr[1]\n            # followed by arr[2]...\n            max_prod = max(max_prod, prod)\n        return max_prod\n    max_prod = 0\n    for i in range(n):\n        prod = arr[0] * arr[1] * arr[2]\n        if prod > max_prod:\n            max_prod = prod\n        if prod > 1:\n            prod = 1\n        max_prod = max(max_prod, prod)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = 0\n    start_idx = 0\n    end_idx = 0\n    for idx, cur_val in enumerate(arr):\n        \n        if end_idx == len(arr) or cur_val > arr[end_idx]:\n            if cur_val > max_product:\n                max_product = cur_val\n                start_idx = idx\n        else:\n            end_idx = idx\n    \n    return max_product, arr[start_idx:end_idx+1]\n    \n    \nprint(max_subarray_product([1, 2, 3, 4, 5, 6, 7]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # checking the boundaries of the array\n    if len(arr) <= 0:\n        return 0\n    \n    # checking the boundaries of the array\n    i = 0\n    while i < len(arr):\n        j = 0\n        m = max_num = arr[i]\n        while j < len(arr) and arr[j] > m:\n            m = arr[j]\n            j += 1\n        # now the array is smaller than m\n        # so it is a product of arr[i:j]\n        if j == len(arr):\n            break\n        max_num *= arr[j]\n        i = j + 1\n    \n    # now we return the maximum product\n    return max_num\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # for each element in dict\n    for elem in dict:\n        # for each item in dict\n        for elem_item in dict[elem]:\n            # check if element is the same\n            if elem_item!= dict[elem][elem_item]:\n                return False\n    # return True\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if all keys in dict are same\n    if len(dict) == len(set(dict.keys())):\n        return True\n    # if len(dict) < len(set(dict.keys())):\n    #     return False\n    for k in dict.keys():\n        if len(dict[k])!= len(set(dict[k])):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    #Initialize\n    d = {}\n    #Loop through values\n    for i in dict.values():\n        #Check if its unique\n        if i not in d:\n            d[i] = 0\n        #If value is not unique, increment\n        else:\n            d[i] += 1\n    #Check for zero\n    if d.values()!= d.values():\n        return 0\n    #Check if the total is divisible by n\n    total = d.values()\n    for i in d.values():\n        if i % n!= 0:\n            return 0\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        return all([val == dict[val] for val in dict])\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= dict[i]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n > len(dict):\n        return False\n    else:\n        for i in range(n):\n            if dict[i]!= dict[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0,n):\n        if dict.get(i)!=dict.get(i+1):\n            print('Value mismatch:',i+1)\n            return 0\n    return 1\ndef check_diff(dict,n):\n    '''\n    Write a function to check if the difference between two lists is 1.\n    '''\n    i=0\n    while i < n:\n        if dict.get(i)!= dict.get(i+1):\n            return 0\n        i+=1\n    return 1\ndef update_dict(dict,n,value,keys):\n    '''\n    Write a function that updates the value for a given key in the dictionary.\n    '''\n    for i in range(0,n):\n        if dict.get(i)!=dict.get(i+1):\n            dict[keys.get(i)]=value\n    return dict\ndef check_missing(dict,n):\n    '''\n    Write a function that check if the keys of a dictionary are missing in a list.\n    '''\n    for i in range(0,n):\n        if dict.get(i)!=dict.get(i+1):\n            return 0\n    return 1\ndef merge_dict(dict1,dict2):\n    '''\n    Write a function that merges two dictionaries.\n    '''\n    new_dict={}\n    for i in dict1:\n        new_dict[i]=dict1.get(i)\n    for i in dict2:\n        new_dict[i]=dict2.get(i)\n    return new_dict\ndef check_diff_dict(dict,n):\n    '''\n    Write a function that checks whether two dictionaries differ.\n    '''\n    for i in range(0,n):\n        if dict.get(i)!= dict.get(i+1):\n            return 0\n    return 1\ndef write_dict(dict):\n    '''\n    Write a function that writes a dictionary to a file.\n    '''\n    with open('py_tutorial/dictionaries/dictionary.txt','w') as file:\n        for key in dict:\n            file.write(key+':')\n            file.write(dict.get(key) + '\\n')\ndef read_dict(file):\n    '''\n    Read the contents of a file into a dictionary.\n    '''\n    with open('py_tutorial/dictionaries/dictionary.txt','r') as file:\n        dictionary=dict()\n        for i in file:\n            i=i.strip()\n            key,value=i.split(':')\n            dictionary[key]=value\n        return dictionary\ndef read_dict_s(file):\n    '''\n    Read the contents of a file into a dictionary.\n    '''\n    with open('py_tutorial/dictionaries/dictionary_s.txt','r') as file:\n        dictionary_s=dict()\n        for i in file:\n            i=i.strip()\n            key,value=i.split(':')\n            dictionary_s[key]=value\n        return dictionary_s\ndef merge_two_dicts(dict1,dict2):\n    '''\n    Write a function that merges two dictionaries.\n    '''\n    new_dict={}\n    for i in dict1:\n        new_dict[i]=dict1.get(i)\n    for i in dict2:\n        new_dict[i]=dict2.get(i)\n    return new_dict\ndef check_diff_dict_s(dict,n):\n    '''\n    Write a function that checks whether two dictionaries differ.\n    '''\n    for i in range(0,n):\n        if dict.get(i)!= dict.get(i+1):\n            return 0\n    return 1\ndef dict_to_str(dict):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for key in dict:\n        string+=str(key)+':'+dict.get(key)+'\\n'\n    return string\ndef dict_to_str_s(dict):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for key in dict:\n        string+=str(key)+':'+str(dict.get(key))+'\\n'\n    return string\ndef dict_to_str_d(dict,key):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,len(key)):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_d_s(dict,key,n):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,n):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_s_s(dict,key):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,len(key)):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_d_s_s(dict,key,n):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,n):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_s_d_s(dict,key):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,len(key)):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_d_s_s(dict,key):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,len(key)):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_s_s(dict,key,n):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,n):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_s_d_s(dict,key):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,len(key)):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_s_d_s(dict,key):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,len(key)):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_d_s(dict,key):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,len(key)):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_d_s(dict,key,n):\n    '''\n    Write a function that converts a dictionary to a string.\n    '''\n    string=''\n    for i in range(0,n):\n        string+=str(key[i])+':'+str(dict.get(i))+'\\n'\n    return string\ndef dict_to_str_"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in range(n):\n        if dict[x] == '':\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if not dict[key] in n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0,len(dict)):\n        for j in range(0,len(dict)):\n            if(dict[i]!= dict[j]):\n                return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1.keys():\n        if len(key) > 0:\n            new_dict[key] = dict1[key]\n    dict1.clear()\n    dict1 = new_dict\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1)==0:\n        return {}\n    else:\n        dict1.popitem()\n        return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n    # assert False, \"You can't empty a dictionary!\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.values():\n        if len(i)>0:\n            del i\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == '':\n            del dict1[key]\n        else:\n            continue\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_d = {}\n    for i in dict1.items():\n        if i[1] == '':\n            new_d[i[0]] = i[1]\n        else:\n            new_d[i[0]] = i[1]\n    return new_d\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == \"\":\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if(len(dict1[key]) == 0):\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if type(dict1[item]) == dict:\n            drop_empty(dict1[item])\n        else:\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # To store the sub-sequences\n    sub_seq = {}\n    # To store the product of the sub-sequences\n    product = 1\n    # To store the total product\n    total = 1\n    # To store the index of the starting index\n    i = 0\n    # To store the end index\n    end = len(arr)-1\n    # To store the difference between current and last element\n    diff = arr[end] - arr[i]\n    # To store the start index\n    start = 0\n    # To store the sub-sequences\n    sub_seq[i] = arr[i]\n    for j in range(start,end):\n        # If the element in sub_seq is greater than current element and less than the next element\n        if arr[j] < arr[i] and diff > 0:\n            # Increment the product\n            product *= arr[j]\n            # Update the sub-sequence\n            sub_seq[j] = arr[j]\n            # Update the index\n            i = j + 1\n            # If the sub-sequence is greater than current element\n            if product > arr[end]:\n                # Return the maximum product\n                return product\n        # Else if the element in sub_seq is less than current element and greater than the next element\n        elif arr[j] > arr[i] and diff < 0:\n            # Increment the product\n            product *= arr[j]\n            # Update the sub-sequence\n            sub_seq[j] = arr[j]\n            # Update the index\n            i = j + 1\n            # If the sub-sequence is less than current element\n            if product < arr[start]:\n                # Return the maximum product\n                return product\n            # Else, the sub-sequence is greater than current element\n        else:\n            # Increment the product\n            product *= arr[j]\n            # Update the sub-sequence\n            sub_seq[j] = arr[j]\n            # Update the index\n            i = j + 1\n            # If the sub-sequence is less than current element\n            if product < arr[end]:\n                # Return the maximum product\n                return product\n            # Else, the sub-sequence is greater than current element\n    # Return the maximum product\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    num = 0\n    for i in range(1, len(arr)):\n        num = arr[i] * arr[i-1]\n        if num > num:\n            num = num\n    return num\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    return max(list(map(lambda x: max(x,x*x),arr)))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    product = 1\n    k = 1\n    while k <= n:\n        product *= arr[k]\n        k += 1\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i]*max_product, arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Write your code here\n    if len(arr)==1:\n        return arr[0]\n    if arr[0]==arr[-1]:\n        return arr[0]\n    arr[0]=arr[0]*arr[0]\n    arr[-1]=arr[-1]*arr[-1]\n    arr[1]=arr[1]*arr[1]\n    for i in range(2,len(arr)):\n        arr[i]=arr[i]*arr[i]\n    return max(arr)\n    \nif __name__ == '__main__':\n    print \"Example 1:\",\n    print \"Input : \", arr1, \"Output : \", max_product(arr1)\n    print \"Exception :\",\n    print \"1 * 1 = 1, 1 * 2 = 2, 1 * 3 = 3\"\n    print \"Example 2:\",\n    print \"Input : \", arr2, \"Output : \", max_product(arr2)\n    print \"Exception :\",\n    print \"1 * 2 * 2 = 6, 1 * 2 * 3 = 6"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        product = arr[i]*arr[i-1]\n        max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # append the element itself to a list\n    # add the value of the first number (n)\n    # add the value of the second number (m)\n    \n    # if m is greater than n return -1,\n    # if m is less than n return -1\n    \n    if len(arr) == 1:\n        return arr[0] * arr[0]\n    \n    elif len(arr) == 2:\n        return arr[0] * arr[1] + arr[1] * arr[0]\n        \n    else:\n        left_max = max(arr[0], arr[1])\n        right_max = max(arr[-2], arr[-1])\n        \n        max_product = max(left_max, right_max)\n        \n        for i in range(2, len(arr)):\n            left_max = max(arr[i-1] * arr[i-2], arr[i-1] * arr[i-1])\n            right_max = max(arr[i-2] * arr[i-2], arr[i-1] * arr[i-1])\n            \n            max_product = max(left_max, right_max, arr[i-1] * arr[i-1])\n            \n        return max_produc"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    size = len(arr)\n    if size <= 1:\n        return arr[0] * arr[1]\n    left, right = 0, size-1\n    max_left, max_right = arr[left], arr[right]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def find_pairwise(a,b):\n        '''\n        Find the pairwise addition of the given two tuples.\n        '''\n        return (a[0] + b[0], a[1] + b[1])\n    \n    x_nodup = find_pairwise(test_tup[0], test_tup[1])\n    y_nodup = find_pairwise(test_tup[1], test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    d1 = (test_tup[0], test_tup[1])\n    d2 = (test_tup[2], test_tup[3])\n    d3 = (test_tup[4], test_tup[5])\n    d4 = (test_tup[6], test_tup[7])\n    d5 = (test_tup[8], test_tup[9])\n    return d1 + d2 + d3 + d4 + d5\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Base cases\n    if (len(test_tup) == 2):\n        return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    return a,b\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(\"Enter the tuple: \")\n    numbers = []\n    print(\"Enter the tuple: \")\n    for i in range(0, len(test_tup)):\n        numbers.append(int(input(test_tup[i])))\n    print(\"Added numbers: \")\n    print(numbers)\n    print(\"Sum of numbers: \")\n    print(sum(numbers))\n    print(\"Difference of numbers: \")\n    print(abs(sum(numbers)-test_tup[0]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup_len = len(test_tup)\n    sum = 0\n    for i in range(test_tup_len - 2):\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    return sum"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return arr[n % len(arr)]\n    \ndef sieve(n):\n    '''\n    Find the sieve of Eratosthenes.\n    '''\n    # Prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199.\n    # \n    # This is the prime number, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197.\n    # \n    # Starting with 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197.\n    # \n    # Given a non-negative integer n, return the number of integers 1 through n, whose multiplicand are primes. If such an integer does not exist, return 0.\n    def count(n):\n        p = [1 for i in range(2,n)]\n        for i in range(2,int(math.sqrt(n))+1):\n            if n % i == 0:\n                p[i*i] = 0\n        return sum(p)\n    \n    def sieve_in(n):\n        sieve = [True for i in range(n+1)]\n        sieve[0] = False\n        sieve[1] = False\n        for i in range(2,n+1):\n            if sieve[i]:\n                for j in range(i*i, n+1, i):\n                    sieve[j] = False\n        return sieve\n    \n    # Actual implementation\n    sieve_in_arr = sieve_in(n)\n    sieve_arr = [2] + [i for i in range(3, n+1) if sieve_in_arr[i]]\n    return sieve_arr[1]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(1, n):\n        remainder = remainder * arr[i]\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return arr[n-1] * find_remainder(arr, n-1) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 0\n    for i in range(n): \n        remainder += arr[i] \n    return remainder % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # your code goes here\n    result=1\n    # iterating through the array\n    for i in range(0,len(arr)):\n        result*=arr[i]\n    #returning the result\n    return result\n    # check if the array is not empty\n    # if it is empty, then return 0\n    # return the result of the product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Make a new array for the product\n    prod = [1] * n\n    \n    # Base case\n    for i in range(1, n):\n        prod[i] = arr[i] * prod[i - 1]\n    \n    # Recurrence to find the remainder of the array\n    for i in range(n - 2, -1, -1):\n        prod[i] = arr[i] * prod[i + 1]\n    \n    # Return the product of the array\n    return prod[0] % prod[n - 1]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if(n==1):\n        return arr[0]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    from math import gcd\n    # get product of a list of numbers\n    prod = 1\n    for i in arr:\n        prod = prod * i\n    # get product of remainder after dividing by product of n\n    # return the product\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    x=1\n    for i in range(n):\n        x*=arr[i]\n    return x\n    \ndef solve(x):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if x==1:\n        return 1\n    else:\n        return solve(x-1)+find_remainder(arr, n)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod = n % arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % mod == 0:\n            mod = arr[i] % mod\n            break\n    return mod\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        if i % 10 == 0:\n            count += 1\n    return count == 1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0: \n        return True\n    if len(l)==1:\n        return False\n    if l[0]!=l[-1]: \n        return False\n    for i in range(len(l)-1): \n        if l[i]==l[i+1]:\n            return False\n    return True\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)%2!=0:\n        return False\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\ndef main():\n    n = int(input(\"Enter number of items to be sorted:\"))\n    a = []\n    for i in range(n):\n        a.append(int(input(\"Enter a number:\")))\n    print(check_Consecutive(a))\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = 0\n    for x in range(0,len(l)):\n        if l[x]%2 == 0 and l[x+1]%2 == 0:\n            flag = 1\n    if flag == 0:\n        return \"no\"\n    else:\n        return \"yes\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive_list = []\n    for num in l:\n        if num not in consecutive_list:\n            consecutive_list.append(num)\n    return consecutive_list\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    cnt = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            cnt += 1\n        else:\n            cnt = 0\n        if cnt == 2:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    newlist = []\n    for i in range(len(l)):\n        if l[i]%10!= 0:\n            newlist.append(l[i])\n    if newlist == l:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consec = 0\n    l1 = l[:]\n    for i in range(len(l1)):\n        if l1[i] % 2 == 0:\n            consec += 1\n    return consec > 1\n    \ndef check_Paranthesis(l):\n    '''\n    Write a python function to check whether the given list contains paranthesis or not.\n    '''\n    paran = 0\n    l1 = l[:]\n    for i in range(len(l1)):\n        if l1[i] in ('(',')'):\n            paran += 1\n    return paran > 1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    for i in l:\n        if i % 10 == i // 10:\n            c = c + 1\n    if c > 1:\n        print(\"the given list is not consecutive numbers\")\n    else:\n        print(\"the given list contains consecutive numbers\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0:\n        return True\n    if l[0]!= l[-1]:\n        return False\n    else:\n        for i in range(1,len(l)):\n            if l[i]!= l[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    tuple1 = tuple(test_list1)\n    tuple2 = tuple(test_list2)\n    \n    tuple_list = []\n    \n    if tuple1 == tuple2:\n        return tuple_list\n    \n    elif tuple1 == tuple2[::-1]:\n        tuple_list.append(tuple1[0])\n        tuple_list.append(tuple1[1])\n        tuple_list.append(tuple1[2])\n        \n        for i in range(len(tuple1)):\n            if tuple2[i] in tuple1:\n                tuple_list.append(tuple2[i])\n            \n        return tuple_list\n    \n    elif tuple1 == tuple2[::-1][::-1]:\n        tuple_list.append(tuple1[0])\n        tuple_list.append(tuple1[1])\n        tuple_list.append(tuple1[2])\n        \n        for i in range(len(tuple1)):\n            if tuple2[i] in tuple1[::-1]:\n                tuple_list.append(tuple2[i])\n            \n        return tuple_list\n        \n    elif tuple1[0] in tuple2:\n        if tuple2.count(tuple1[0]) > 1:\n            tuple_list.append(tuple1[0])\n            tuple_list.append(tuple1[1])\n            tuple_list.append(tuple1[2])\n            \n            for i in range(len(tuple1)):\n                if tuple2.count(tuple1[i]) > 1:\n                    tuple_list.append(tuple1[i])\n            \n            return tuple_list\n        \n    elif tuple2[0] in tuple1:\n        if tuple1.count(tuple2[0]) > 1:\n            tuple_list.append(tuple2[0])\n            tuple_list.append(tuple2[1])\n            tuple_list.append(tuple2[2])\n            \n            for i in range(len(tuple1)):\n                if tuple1.count(tuple2[i]) > 1:\n                    tuple_list.append(tuple1[i])\n            \n            return tuple_list\n        \n    elif tuple1[2] in tuple2[::-1]:\n        if tuple2[0] in tuple1[::-1]:\n            tuple_list.append(tuple1[0])\n            tuple_list.append(tuple1[1])\n            tuple_list.append(tuple1[2])\n            \n            for i in range(len(tuple1)):\n                if tuple2[i] in tuple1[::-1][::-1]:\n                    tuple_list.append(tuple2[i])\n            \n            return tuple_list\n        \n    else:\n        if tuple1[1] in tuple2[::-1]:\n            tuple_list.append(tuple1[0])\n            tuple_list.append(tuple1[1])\n            tuple_list.append(tuple1[2])\n            \n            for i in range(len(tuple1)):\n                if tuple2[i] in tuple1[::-1][::-1]:\n                    tuple_list.append(tuple2[i])\n            \n            return tuple_list\n        \n    return tuple_list\n    \n    \ndef tuple_intersection_test_list(test_list1, test_list2):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements.\n    '''\n    \n    tuple_list = tuple_intersection(test_list1, test_list2)\n    \n    return tuple_list\n    \n    \ndef tuple_intersection_and_list(test_list1, test_list2):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements and concatenate them.\n    '''\n    \n    tuple_list = tuple_intersection(test_list1, test_list2)\n    \n    tuple_list_without_duplicates = tuple_intersection_test_list(test_list1, test_list2)\n    \n    return tuple_list_without_duplicates + tuple_list\n    \n    \ndef tuple_intersection_or_list(test_list1, test_list2):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements or concatenate them.\n    '''\n    \n    tuple_list = tuple_intersection(test_list1, test_list2)\n    \n    tuple_list_without_duplicates = tuple_intersection_test_list(test_list1, test_list2)\n    \n    return tuple_list_without_duplicates + tuple_list\n    \n    \ndef tuple_intersection_test_list_with_dict(test_list1, test_list2, dict_list):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements.\n    '''\n    \n    tuple_list = tuple_intersection(test_list1, test_list2)\n    \n    tuple_list_without_duplicates = tuple_intersection_test_list(test_list1, test_list2)\n    \n    return tuple_list_without_duplicates + tuple_intersection_with_dict(tuple_list, dict_list)\n    \n    \ndef tuple_intersection_with_dict(tuple_list, dict_list):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements.\n    '''\n    \n    tuple_list_without_duplicates = tuple_intersection(tuple_list)\n    \n    tuple_list_without_duplicates = tuple_intersection_test_list(tuple_list)\n    \n    return tuple_list_without_duplicates + tuple_intersection_with_dict(tuple_list_without_duplicates, dict_list)\n    \n    \ndef tuple_intersection_test_list_with_dict_and_list(test_list1, test_list2, dict_list, list_list):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements.\n    '''\n    \n    tuple_list = tuple_intersection(test_list1, test_list2)\n    \n    tuple_list_without_duplicates = tuple_intersection(tuple_list)\n    \n    tuple_list_without_duplicates = tuple_intersection_test_list(tuple_list)\n    \n    return tuple_list_without_duplicates + tuple_intersection_with_dict(tuple_list_without_duplicates, dict_list)\n    \n    \ndef tuple_intersection_with_dict(tuple_list, dict_list):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements.\n    '''\n    \n    tuple_list_without_duplicates = tuple_intersection(tuple_list)\n    \n    tuple_list_without_duplicates = tuple_intersection_test_list(tuple_list)\n    \n    return tuple_intersection_with_dict(tuple_list_without_duplicates, dict_list)\n    \n    \ndef tuple_intersection_test_list_with_dict_and_list_and_tuple_list(test_list1, test_list2, dict_list, list_list, tuple_list):\n    '''\n    Write a function that takes two lists and returns the intersection of their elements.\n    '''\n    \n    tuple_list = tuple_intersection(test_list1, test_list2)\n    \n    tuple_list_without_duplicates = tuple_intersection(tuple_list)\n    \n    tuple_list_without_duplicates = tuple_intersection_test_list(tuple_list)\n    \n    return tuple_list_without_duplicates + tuple_intersection_with_dict(tuple_list_without_duplicates, dict_list) + tuple_intersection_with_list(tuple_list_without_duplicates, list_list) + tuple_intersection_wit"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    tuple_list = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                tuple_list.append(test_list1[i])\n    return tuple_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list1 = []\n    for element in test_list1:\n        tuple_list1.append(element)\n    tuple_list2 = []\n    for element in test_list2:\n        tuple_list2.append(element)\n    \n    return tuple_list1, tuple_list2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output_list = []\n    for i in test_list1:\n        if i in test_list2:\n            output_list.append(i)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == len(test_list2):\n        test_list3 = []\n        for index in range(len(test_list1)):\n            if test_list1[index] == test_list2[index]:\n                test_list3.append(test_list1[index])\n            else:\n                test_list3.append(test_list2[index])\n        return tuple(test_list3)\n    else:\n        return None\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_tuple = ()\n    new_list = []\n    for item in test_list1:\n        if item in test_list2:\n            new_tuple = new_tuple + (item, )\n            test_list2.remove(item)\n    for item in test_list2:\n        if item in test_list1:\n            new_tuple = new_tuple + (item, )\n            test_list1.remove(item)\n    return new_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res = ()\n    for elem in test_list1:\n        if elem in test_list2:\n            res = elem\n    return res\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return test_list1 if len(test_list1) < len(test_list2) else test_list2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(newch)==int:\n        if newch<=0 or newch>=len(str1):\n            return\n        else:\n            ch=chr(newch)\n    elif type(newch)==str:\n        if newch.isalpha():\n            if newch.lower() in str1:\n                return\n            else:\n                ch=newch\n        else:\n            return\n    else:\n        return\n    \n    if type(ch)==int or type(ch)==str:\n        if ch==newch:\n            return\n        else:\n            if type(str1)==str:\n                str1=str1.replace(ch,newch)\n            else:\n                str1=str1.replace(ch.encode(\"utf-8\"),newch)\n    else:\n        return\n    \n    return str1\n    \ndef cut(string,sub,maxlen):\n    '''\n    Return string with at most len sub of the first substring.\n    '''\n    if type(sub)==int or type(sub)==str:\n        if sub==0 or sub==len(string):\n            return string\n        else:\n            return string[:sub]\n    else:\n        return string[:sub].replace(sub,maxlen)\n    \ndef find_start(string,sub,maxlen):\n    '''\n    Return first occurrence of substring start with len sub.\n    '''\n    if type(sub)==int or type(sub)==str:\n        if sub==0 or sub==len(string):\n            return string\n        else:\n            return string.index(sub)\n    else:\n        return string.index(sub.replace(sub,maxlen))\n    \ndef get_list(string):\n    '''\n    Return a list of string, where each list element is a pair (substring,len).\n    '''\n    l=[]\n    for i in range(0,len(string)):\n        if string[i].isalnum():\n            l.append((string[i],len(string[i])))\n    return l\n    \ndef get_list_without_sub(string):\n    '''\n    Return a list of string, where each list element is a pair (substring,len).\n    '''\n    l=[]\n    for i in range(0,len(string)):\n        if string[i].isalnum():\n            l.append((string[i],len(string[i])))\n    return l\n    \ndef get_list_without_sub_2(string):\n    '''\n    Return a list of string, where each list element is a pair (substring,len).\n    '''\n    l=[]\n    for i in range(0,len(string)):\n        if string[i].isalnum():\n            if string[i].lower() in string[i:len(string)].lower():\n                l.append((string[i],len(string[i])))\n    return l\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #raise NotImplementedError('You should not be here')\n    l = []\n    for char in str1:\n        if char==ch:\n            l.append(char)\n        else:\n            l.append(newch)\n    return ''.join(l)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_string = \"\"\n    for i in range(len(str1)):\n        new_string += chr(ord(str1[i]) - ord(newch))\n    return new_string\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    arr1 = list(str1)\n    arr2 = list(str1)\n    #print(arr1)\n    #print(arr2)\n    for i in range(len(arr1)):\n        if arr1[i] == ch:\n            arr2[i] = newch\n            #print(arr2)\n    str1 = ''.join(arr2)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \ndef count_occurrences(str1,ch):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    return str1.count(ch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    l=[]\n    n=0\n    for i in str1:\n        l.append(ch)\n        n+=1\n        if n==len(str1):\n            break\n        l[n]=\"o\"\n        n+=1\n    return ''.join(l)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,'{}{}{}'.format(newch,ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(str1) is not str:\n        raise TypeError('Input must be a string.')\n    if type(ch) is not str:\n        raise TypeError('Input must be a string.')\n    if type(newch) is not str:\n        raise TypeError('Input must be a string.')\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for index,char in enumerate(str1):\n        str1[index] = newch\n    return ''.join(str1)"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d=dict1.copy()\n    d.sort(key=lambda x: x[1])\n    return d\ndef count_words(file):\n    '''\n    Take a file as input and return a dictionary where the keys are the words\n    and the values are the number of times they appear in the file.\n    '''\n    D = {}\n    count = 0\n    with open(file) as f:\n        for line in f:\n            words = line.split()\n            for word in words:\n                if word in D:\n                    D[word] = D[word] + 1\n                else:\n                    D[word] = 1\n            count = count + len(words)\n    return D, count\ndef find_words(file):\n    '''\n    Return a dictionary where the keys are the words and the values are the\n    number of times they appear in the file.\n    '''\n    D = {}\n    count = 0\n    with open(file) as f:\n        for line in f:\n            words = line.split()\n            for word in words:\n                if word in D:\n                    D[word] = D[word] + 1\n                else:\n                    D[word] = 1\n            count = count + len(words)\n    return D, count\ndef check_file(file):\n    '''\n    Return True if the file has been verified by the students. Otherwise, return\n    False.\n    '''\n    words = open(file).read().split()\n    v =''.join(words)\n    print(v)\n    return True\ndef start():\n    '''\n    Print the data from a.txt file in a dictionary.\n    '''\n    D,count = count_words('../Data/sample1.txt')\n    print(D,count)\n    print()\n    D,count = find_words('../Data/sample1.txt')\n    print(D,count)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # TODO:\n    # 1. Make a new dictionary with sorted values\n    # 2. Loop through all the keys of the dictionary\n    # 3. Loop through all the values, sort them\n    # 4. return the new dictionary.\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    return sorted(counter, key=counter.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def sort_value(dict1):\n        '''\n        Sort a dictionary by the key.\n        '''\n        dict1 = dict(sorted(dict1.items(), key=lambda item: item[0]))\n        return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    dict1 = dict(dict1)\n    return sorted(dict1.items(), key = lambda x: x[1])\n    \ndef most_occur(list):\n    '''\n    Write a function that returns the list with the most occurances.\n    '''\n    \n    dict = dict(Counter(list).most_common(3))\n    return dict\ndef mode(list):\n    '''\n    Write a function that returns the most common word.\n    '''\n    \n    dict = Counter(list)\n    return dict.most_common(1)[0][0]\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_d = dict()\n    for key, value in dict1.items():\n        if value not in sorted_d:\n            sorted_d[value] = [key]\n        else:\n            sorted_d[value].append(key)\n    return sorted_d\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sorted = dict(Counter(dict1).most_common())\n    return dict_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key = lambda x: x[1], reverse = True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict1\n    sorted_dict.sort(key=lambda item: item[1], reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    small = nums[0]\n    large = nums[0]\n    for i in nums:\n        if i < small:\n            small = i\n        if i > large:\n            large = i\n    print(f'The sum is: {small + large}')\n    \n    \ndef sorted_array(nums):\n    '''\n    Write a python function to return the index of the first element greater than a given value.\n    '''\n    for i in range(0, len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = nums[0]\n    min_value = nums[0]\n    for i in nums:\n        if i > max_value:\n            max_value = i\n        elif i < min_value:\n            min_value = i\n    return max_value + min_value\n    \nprint(big_sum([1,2,3,5,6,9,8,7,4])"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    # we will use a simple heap to find the largest\n    heap = []\n    for i in nums:\n        heapq.heappush(heap, i)\n    # find the smallest value in the heap\n    for i in range(0, len(heap)):\n        if heap[0] < heap[i]:\n            sum += heap[0]\n            heapq.heappop(heap)\n            heapq.heappush(heap, heap[0])\n            break\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest\n    \n    \n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        elif i < smallest:\n            smallest = i\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = nums[0]\n    min_value = nums[0]\n    for i in nums:\n        if i > max_value:\n            max_value = i\n        if i < min_value:\n            min_value = i\n    return max_value - min_value\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = -1\n    small_sum = 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for num in nums:\n        s = s + num\n    print(s)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    \n    nums.sort()\n    \n    if len(nums) == 1:\n        return nums[0]\n    \n    return nums[-1] + big_sum(nums[:-1])\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isalpha():\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string is None or type(string)!= str:\n        raise TypeError(\"string is not a string\")\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_str = string.lower()\n    return lower_str\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string is not None:\n        string = string.lower()\n        return string\n    else:\n        return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_str = string.lower()\n    return lower_str\n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    upper_str = string.upper()\n    return upper_str\n    \ndef remove_punctuation(string):\n    '''\n    Write a python function to remove all punctuation from the given string.\n    '''\n    string = string.replace('.','')\n    string = string.replace('!',' ')\n    string = string.replace('?',' ')\n    string = string.replace(':',' ')\n    string = string.replace(';',' ')\n    string = string.replace('\"',' ')\n    string = string.replace('(','')\n    string = string.replace(')','')\n    string = string.replace('[','')\n    string = string.replace(']','')\n    return string\n    \ndef delete_numbers(string):\n    '''\n    Write a python function to remove all numbers from the given string.\n    '''\n    return string.replace('0',' ').replace('1',' ').replace('2',' ').replace('3',' ').replace('4',' ').replace('5',' ').replace('6',' ').replace('7',' ').replace('8',' ').replace('9',' ').replace('.',' ').replace('0',' ')\n    \ndef remove_spaces(string):\n    '''\n    Write a python function to remove all spaces from the given string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_hyphens(string):\n    '''\n    Write a python function to remove all hyphens from the given string.\n    '''\n    return string.replace('-',' ').replace('\u2013',' ').replace('\u2014',' ').replace('\u2013',' ').replace('\u2013',' ').replace('\u2013',' ').replace('\u2013',' ').replace('\u2013',' ').replace('\u2013',' ').replace('\u2013',' ').replace('\u2013',' ').replace('\u2013',' ')\n    \ndef remove_emails(string):\n    '''\n    Write a python function to remove all emails from the given string.\n    '''\n    email_pattern = '\\S*@\\S*\\.\\S*'\n    return string.replace('@','').replace('.','').replace('!',' ').replace('?',' ').replace(';',' ').replace('\"',' ').replace(':',' ').replace(';',' ').replace('\"',' ')\n    \ndef get_words(string):\n    '''\n    Write a python function to remove all words from the given string.\n    '''\n    return string.split()\n    \ndef remove_stopwords(string):\n    '''\n    Write a python function to remove all stopwords from the given string.\n    '''\n    stopwords = set(stopwords.words('english'))\n    return''.join([word for word in string.split() if word not in stopwords])\n    \ndef clean_words(string):\n    '''\n    Write a python function to clean all the words in the given string.\n    '''\n    string = remove_punctuation(string)\n    string = remove_spaces(string)\n    string = remove_hyphens(string)\n    string = remove_emails(string)\n    string = remove_numbers(string)\n    string = remove_stopwords(string)\n    return string\n    "
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    l = string.lower()\n    return l\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str_new = ''\n    for letter in str1:\n        if letter.islower():\n            str_new += letter\n        else:\n            str_new += '_'\n    return str_new.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans(\"\",\"\",string.punctuation))\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = '([a-z]+)'\n    return re.sub(regex, '\\\\1', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #print(\"removing lowercase substring: {}\".format(str1))\n    str1 = re.sub('[^a-z]',' ',str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    #print(\"removing punctuation: {}\".format(str1))\n    str1 = re.sub(r'[^a-zA-Z]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_swaps(str1):\n    '''\n    Write a function to remove swap characters from a given string.\n    '''\n    #print(\"removing swap characters: {}\".format(str1))\n    str1 = re.sub('[a-z]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    #print(\"removing numbers: {}\".format(str1))\n    str1 = re.sub(r'[0-9]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_double_spaces(str1):\n    '''\n    Write a function to remove double spaces from a given string.\n    '''\n    #print(\"removing double spaces: {}\".format(str1))\n    str1 = re.sub(r'\\s+','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_numeric(str1):\n    '''\n    Write a function to remove numeric from a given string.\n    '''\n    #print(\"removing numeric: {}\".format(str1))\n    str1 = re.sub(r'[0-9]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_symbols(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    #print(\"removing symbols: {}\".format(str1))\n    str1 = re.sub(r'[^a-zA-Z0-9 ]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_words(str1):\n    '''\n    Write a function to remove words from a given string.\n    '''\n    #print(\"removing words: {}\".format(str1))\n    str1 = re.sub(r'\\b\\w+\\b','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_characters(str1):\n    '''\n    Write a function to remove characters from a given string.\n    '''\n    #print(\"removing characters: {}\".format(str1))\n    str1 = re.sub(r'\\w+','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_words_and_characters(str1):\n    '''\n    Write a function to remove words and characters from a given string.\n    '''\n    #print(\"removing words and characters: {}\".format(str1))\n    str1 = re.sub(r'\\b\\w+\\b','', str1)\n    str1 = re.sub(r'\\w+','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_numbers_and_characters(str1):\n    '''\n    Write a function to remove numbers and characters from a given string.\n    '''\n    #print(\"removing numbers and characters: {}\".format(str1))\n    str1 = re.sub(r'\\d+','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_numbers_and_characters_regex(str1):\n    '''\n    Write a function to remove numbers and characters from a given string.\n    '''\n    #print(\"removing numbers and characters: {}\".format(str1))\n    str1 = re.sub(r'\\d+','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_dot(str1):\n    '''\n    Write a function to remove dot from a given string.\n    '''\n    #print(\"removing dot: {}\".format(str1))\n    str1 = re.sub(r'\\.','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_slash(str1):\n    '''\n    Write a function to remove slash from a given string.\n    '''\n    #print(\"removing slash: {}\".format(str1))\n    str1 = re.sub(r'/','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_punctuation_and_slash(str1):\n    '''\n    Write a function to remove punctuation and slash from a given string.\n    '''\n    #print(\"removing punctuation and slash: {}\".format(str1))\n    str1 = re.sub(r'[^a-zA-Z0-9]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_number_and_slash(str1):\n    '''\n    Write a function to remove number and slash from a given string.\n    '''\n    #print(\"removing number and slash: {}\".format(str1))\n    str1 = re.sub(r'[0-9]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_single_space(str1):\n    '''\n    Write a function to remove single space from a given string.\n    '''\n    #print(\"removing single space: {}\".format(str1))\n    str1 = re.sub(r'\\s+','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove white spaces from a given string.\n    '''\n    #print(\"removing white spaces: {}\".format(str1))\n    str1 = re.sub(r'\\s+','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_single_character(str1):\n    '''\n    Write a function to remove single character from a given string.\n    '''\n    #print(\"removing single character: {}\".format(str1))\n    str1 = re.sub(r'\\b\\w+\\b','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    #print(\"removing punctuation: {}\".format(str1))\n    str1 = re.sub(r'[^a-zA-Z0-9]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_swaps(str1):\n    '''\n    Write a function to remove swap characters from a given string.\n    '''\n    #print(\"removing swap characters: {}\".format(str1))\n    str1 = re.sub(r'[a-zA-Z]','', str1)\n    #print(\"after substitution: {}\".format(str1))\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    #print(\"removing numbers: {}\".format(str1))\n    str1 = re.sub(r'\\d+','', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_string = re.sub('[a-z]', '', str1)\n    lowercase_string = re.sub('[A-Z]', '', lowercase_string)\n    return lowercase_string\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #remove all lower case characters and convert to upper case\n    str1=str1.lower()\n    #compile regular expression\n    regex=re.compile(r'[a-z]+')\n    #find all the substrings\n    sub=regex.findall(str1)\n    #remove them\n    for item in sub:\n        str1=str1.replace(item,'')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    l = []\n    for c in str1:\n        if c.lower() not in l:\n            l.append(c.lower())\n    return \"\".join(l)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[^A-Z]', '', str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l = str(str1)\n    l = l.lower()\n    l1 = re.sub(\"[a-z]\", \"\", l)\n    l2 = re.sub(\"[A-Z]\", \"\", l1)\n    l3 = re.sub(\"[0-9]\", \"\", l2)\n    l4 = re.sub(\"[!#$%&'();:=-\\[\\]_`{|}~\", \"\", l3)\n    l4 = re.sub(\"[+/*,=.()]\", \"\", l4)\n    l4 = re.sub(\"[:;,/?$]\", \"\", l4)\n    l4 = re.sub(\"[~!@#$%^&*_]\", \"\", l4)\n    l4 = l4.strip()\n    return l4\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = 0\n    while n>0:\n        i = n%10\n        n = n//10\n        print(i, end=\"\")\n    print('')\n    return '0'\nprint(first_Digit(5))"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return first_Digit(n//10) + n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    def firstDigit(num) :\n        sum = 0\n        for x in str(num) :\n            sum += int(x)\n        return sum\n    return firstDigit(int(n))\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    dig = len(str(n))\n    if dig == 1:\n        return 1\n    elif dig == 2:\n        return n//10\n    elif dig > 2:\n        return n//10 + 1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    elif n == 0 :\n        return 0\n    elif n > 0 :\n        return 1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0 :\n        return n % 10\n    else :\n        return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n == 0) : return 0\n    if (n == 1) : return 1\n    if (n == 2) : return 2\n    if (n == 3) : return 3\n    if (n == 4) : return 4\n    if (n == 5) : return 5\n    if (n == 6) : return 6\n    if (n == 7) : return 7\n    if (n == 8) : return 8\n    if (n == 9) : return 9\n    if (n == 10) : return 10\n    if (n == 11) : return 11\n    if (n == 12) : return 12\n    if (n == 13) : return 13\n    if (n == 14) : return 14\n    if (n == 15) : return 15\n    if (n == 16) : return 16\n    if (n == 17) : return 17\n    if (n == 18) : return 18\n    if (n == 19) : return 19\n    if (n == 20) : return 20\n    if (n == 21) : return 21\n    if (n == 22) : return 22\n    if (n == 23) : return 23\n    if (n == 24) : return 24\n    if (n == 25) : return 25\n    if (n == 26) : return 26\n    if (n == 27) : return 27\n    if (n == 28) : return 28\n    if (n == 29) : return 29\n    if (n == 30) : return 30\n    if (n == 31) : return 31\n    if (n == 32) : return 32\n    if (n == 33) : return 33\n    if (n == 34) : return 34\n    if (n == 35) : return 35\n    if (n == 36) : return 36\n    if (n == 37) : return 37\n    if (n == 38) : return 38\n    if (n == 39) : return 39\n    if (n == 40) : return 40\n    if (n == 41) : return 41\n    if (n == 42) : return 42\n    if (n == 43) : return 43\n    if (n == 44) : return 44\n    if (n == 45) : return 45\n    if (n == 46) : return 46\n    if (n == 47) : return 47\n    if (n == 48) : return 48\n    if (n == 49) : return 49\n    if (n == 50) : return 50\n    if (n == 51) : return 51\n    if (n == 52) : return 52\n    if (n == 53) : return 53\n    if (n == 54) : return 54\n    if (n == 55) : return 55\n    if (n == 56) : return 56\n    if (n == 57) : return 57\n    if (n == 58) : return 58\n    if (n == 59) : return 59\n    if (n == 60) : return 60\n    if (n == 61) : return 61\n    if (n == 62) : return 62\n    if (n == 63) : return 63\n    if (n == 64) : return 64\n    if (n == 65) : return 65\n    if (n == 66) : return 66\n    if (n == 67) : return 67\n    if (n == 68) : return 68\n    if (n == 69) : return 69\n    if (n == 70) : return 70\n    if (n == 71) : return 71\n    if (n == 72) : return 72\n    if (n == 73) : return 73\n    if (n == 74) : return 74\n    if (n == 75) : return 75\n    if (n == 76) : return 76\n    if (n == 77) : return 77\n    if (n == 78) : return 78\n    if (n == 79) : return 79\n    if (n == 80) : return 80\n    if (n == 81) : return 81\n    if (n == 82) : return 82\n    if (n == 83) : return 83\n    if (n == 84) : return 84\n    if (n == 85) : return 85\n    if (n == 86) : return 86\n    if (n == 87) : return 87\n    if (n == 88) : return 88\n    if (n == 89) : return 89\n    if (n == 90) : return 90\n    if (n == 91) : return 91\n    if (n == 92) : return 92\n    if (n == 93) : return 93\n    if (n == 94) : return 94\n    if (n == 95) : return 95\n    if (n == 96) : return 96\n    if (n == 97) : return 97\n    if (n == 98) : return 98\n    if (n == 99) : return 99\n    if (n == 100) : return 100\n    if (n == 101) : return 101\n    if (n == 102) : return 102\n    if (n == 103) : return 103\n    if (n == 104) : return 104\n    if (n == 105) : return 105\n    if (n == 106) : return 106\n    if (n == 107) : return 107\n    if (n == 108) : return 108\n    if (n == 109) : return 109\n    if (n == 110) : return 110\n    if (n == 111) : return 111\n    if (n == 112) : return 112\n    if (n == 113) : return 113\n    if (n == 114) : return 114\n    if (n == 115) : return 115\n    if (n == 116) : return 116\n    if (n == 117) : return 117\n    if (n == 118) : return 118\n    if (n == 119) : return 119\n    if (n == 120) : return 120\n    if (n == 121) : return 121\n    if (n == 122) : return 122\n    if (n == 123) : return 123\n    if (n == 124) : return 124\n    if (n == 125) : return 125\n    if (n == 126) : return 126\n    if (n == 127) : return 127\n    if (n == 128) : return 128\n    if (n == 129) : return 129\n    if (n == 130) : return 130\n    if (n == 131) : return 131\n    if (n == 132) : return 132\n    if (n == 133) : return 133\n    if (n == 134) : return 134\n    if (n == 135) : return 135\n    if (n == 136) : return 136\n    if (n == 137) : return 137\n    if (n == 138) : return 138\n    if (n == 139) : return 139\n    if (n == 140) : return 140\n    if (n == 141) : return 141\n    if (n == 142) : return 142\n    if (n == 143) : return 143\n    if (n == 144) : return 144\n    if (n == 145) : return 145\n    if (n == 146) : return 146\n    if (n == 147) : return 147\n    if (n == 148) : return 148\n    if (n == 149) : return 149\n    if (n == 150) : return 150\n    if (n == 151) : return 151\n    if (n == 152) : return 152\n    if (n == 153) : return 153\n    if (n == 154) : return 154\n    if (n == 155) : return 155\n    if (n == 156) : return 156\n    if (n == 157) : return 157\n    if (n == 158) : return 158\n    if (n == 159) : return 159\n    if (n == 160) : return 160\n    if (n == 161) : return 161\n    if (n == 162) : return 162\n    if (n == 163) : return 163\n    if (n == 164) : return 164\n    if (n == 165) : return 165\n    if (n == 166) : return 166\n    if (n == 167) : return 167\n    if (n == 168) : return 168\n    if (n == 169) : return 169\n    if (n == 170) : return 170\n    if (n == 171) : return 171\n    if (n == 172) : return 172\n    if (n == 173) : return 173\n    if (n == 174) : return 174\n    if (n == 175) : return 175\n    if (n == 176) : return 176\n    if (n == 177) : return 177\n    if (n == 178) : return 178\n    if (n == 179) : return 179\n    if (n == 180) : return 180\n    if (n == 181) : return 181\n    if (n == 182) : return 182"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n    \ndef is_leap_year(year) :\n    '''\n    Write a python function to check if a given year is a leap year.\n    '''\n    return year%4==0 and year%100!=0 or year%400==0\n    \ndef days_in_month(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if month==2:\n        return 29\n    return month_days[month-1]\n    \ndef days_in_month_2(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \ndef days_in_month_3(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \ndef days_in_month_4(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \ndef days_in_month_5(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef days_in_month_6(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef days_in_month_7(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef days_in_month_8(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef days_in_month_9(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef days_in_month_10(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef days_in_month_11(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef is_leap_year(year) :\n    '''\n    Write a python function to check if a given year is a leap year.\n    '''\n    return year%4==0 and year%100!=0 or year%400==0\n    \ndef days_in_month_12(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[month-1]\n    \n    \ndef days_in_month_13(year, month) :\n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    if not 1<=month<=12:\n        raise ValueError('The month number must be between 1 and 12.')\n    if not 1<=year<=99:\n        raise ValueError('The year number must be between 1 and 99.')\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for item in list:\n        if item % 2 == 1:\n            odds.append(item)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for item in list:\n        if item % 2 == 0:\n            odd_list.append(item)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if type(list)!= list: return 0\n    else: \n        if list[0]%2==0: return list \n        else: return 0 \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odds = []\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    even = []\n    for num in list: \n        if num % 2 == 1: \n            odd.append(num)\n        else: \n            even.append(num)\n    return odd, even\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    lst = []\n    for i in list: \n        lst.append(i%2)\n    return lst\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    for item in list:\n        if (item % 2) == 0:\n            even_list.append(item)\n    print(even_list)\n    return even_list\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list: \n        if i%2!= 0: \n            odd_list.append(i)\n    return odd_list \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # # Method 1:\n    # odd_list = [x for x in list if x % 2!= 0]\n    # return odd_list\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n    if n <= 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return (n*(n+1)//2) - (n*(n+1)*(n-1))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = 0\n    for i in range(1,n+1) :\n        cubes_sum += i**3\n    return cubes_sum - sum(n)\n    \nif __name__ == '__main__' :\n    print(difference(5))\n    print(difference(10))\n    print(difference(50))\n    print(difference(70)"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(input(\"enter the natural number\"))\n    i=0\n    while i<n:\n        x=0\n        for i in range(1,i):\n            x=x+i**3\n        y=i+x\n        print(y)\n        i+=1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n        sum_natural += i\n    return sum_cubes - sum_natural\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum(list(map(lambda n: n**3, range(1, n+1)))) - sum(list(map(lambda n: n**3, range(1, n+1)))))/(sum(list(map(lambda n: n**3, range(1, n+1))))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        return None\n    elif n == 1 :\n        return 1\n    else :\n        return n * (n - 1) * (n - 2)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n) : \n        result += (i**3)\n    print(\"\\nDifference : \",result)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    return n*difference(n-1)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for n in range(1,n+1):\n        sum += (n**3)\n    return sum\n    \ndef main():\n    print(f'The difference between the sum of cubes of the first {difference(1)} natural numbers is {difference(1)}, and the sum of the first {difference(2)} natural numbers is {difference(2)}, and the sum of the first {difference(3)} natural numbers is {difference(3)}, and the sum of the first {difference(4)} natural numbers is {difference(4)}, and the sum of the first {difference(5)} natural numbers is {difference(5)}, and the sum of the first {difference(6)} natural numbers is {difference(6)}, and the sum of the first {difference(7)} natural numbers is {difference(7)}, and the sum of the first {difference(8)} natural numbers is {difference(8)}, and the sum of the first {difference(9)} natural numbers is {difference(9)}, and the sum of the first {difference(10)} natural numbers is {difference(10)}, and the sum of the first {difference(11)} natural numbers is {difference(11)}, and the sum of the first {difference(12)} natural numbers is {difference(12)}, and the sum of the first {difference(13)} natural numbers is {difference(13)}, and the sum of the first {difference(14)} natural numbers is {difference(14)}, and the sum of the first {difference(15)} natural numbers is {difference(15)}, and the sum of the first {difference(16)} natural numbers is {difference(16)}, and the sum of the first {difference(17)} natural numbers is {difference(17)}, and the sum of the first {difference(18)} natural numbers is {difference(18)}, and the sum of the first {difference(19)} natural numbers is {difference(19)}, and the sum of the first {difference(20)} natural numbers is {difference(20)}, and the sum of the first {difference(21)} natural numbers is {difference(21)}, and the sum of the first {difference(22)} natural numbers is {difference(22)}, and the sum of the first {difference(23)} natural numbers is {difference(23)}, and the sum of the first {difference(24)} natural numbers is {difference(24)}, and the sum of the first {difference(25)} natural numbers is {difference(25)}, and the sum of the first {difference(26)} natural numbers is {difference(26)}, and the sum of the first {difference(27)} natural numbers is {difference(27)}, and the sum of the first {difference(28)} natural numbers is {difference(28)}, and the sum of the first {difference(29)} natural numbers is {difference(29)}, and the sum of the first {difference(30)} natural numbers is {difference(30)}, and the sum of the first {difference(31)} natural numbers is {difference(31)}, and the sum of the first {difference(32)} natural numbers is {difference(32)}, and the sum of the first {difference(33)} natural numbers is {difference(33)}, and the sum of the first {difference(34)} natural numbers is {difference(34)}, and the sum of the first {difference(35)} natural numbers is {difference(35)}, and the sum of the first {difference(36)} natural numbers is {difference(36)}, and the sum of the first {difference(37)} natural numbers is {difference(37)}, and the sum of the first {difference(38)} natural numbers is {difference(38)}, and the sum of the first {difference(39)} natural numbers is {difference(39)}, and the sum of the first {difference(40)} natural numbers is {difference(40)}, and the sum of the first {difference(41)} natural numbers is {difference(41)}, and the sum of the first {difference(42)} natural numbers is {difference(42)}, and the sum of the first {difference(43)} natural numbers is {difference(43)}, and the sum of the first {difference(44)} natural numbers is {difference(44)}, and the sum of the first {difference(45)} natural numbers is {difference(45)}, and the sum of the first {difference(46)} natural numbers is {difference(46)}, and the sum of the first {difference(47)} natural numbers is {difference(47)}, and the sum of the first {difference(48)} natural numbers is {difference(48)}, and the sum of the first {difference(49)} natural numbers is {difference(49)}, and the sum of the first {difference(50)} natural numbers is {difference(50)}, and the sum of the first {difference(51)} natural numbers is {difference(51)}, and the sum of the first {difference(52)} natural numbers is {difference(52)}, and the sum of the first {difference(53)} natural numbers is {difference(53)}, and the sum of the first {difference(54)} natural numbers is {difference(54)}, and the sum of the first {difference(55)} natural numbers is {difference(55)}, and the sum of the first {difference(56)} natural numbers is {difference(56)}, and the sum of the first {difference(57)} natural numbers is {difference(57)}, and the sum of the first {difference(58)} natural numbers is {difference(58)}, and the sum of the first {difference(59)} natural numbers is {difference(59)}, and the sum of the first {difference(60)} natural numbers is {difference(60)}, and the sum of the first {difference(61)} natural numbers is {difference(61)}, and the sum of the first {difference(62)} natural numbers is {difference(62)}, and the sum of the first {difference(63)} natural numbers is {difference(63)}, and the sum of the first {difference(64)} natural numbers is {difference(64)}, and the sum of the first {difference(65)} natural numbers is {difference(65)}, and the sum of the first {difference(66)} natural numbers is {difference(66)}, and the sum of the first {difference(67)} natural numbers is {difference(67)}, and the sum of the first {difference(68)} natural numbers is {difference(68)}, and the sum of the first {difference(69)} natural numbers is {difference(69)}, and the sum of the first {difference(70)} natural numbers is {difference(70)}, and the sum of the first {difference(71)} natural numbers is {difference(71)}, and the sum of the first {difference(72)} natural numbers is {difference(72)}, and the sum of the first {difference(73)} natural numbers is {difference(73)}, and the sum of the first {difference(74)} natural numbers is {difference(74)}, and the sum of the first {difference(75)} natural numbers is {difference(75)}, and the sum of the first {difference(76)} natural numbers is {difference(76)}, and the sum of the first {difference(77)} natural numbers is {difference(77)}, and the sum of the first {difference(78)} natural numbers is {difference(78)}, and the sum of the first {difference(79)} natural numbers is {difference(79)}, and the sum of the first {difference(80)} natural numbers is {difference(80)}, and the sum of the first {difference(81)} natural numbers is {difference(81)}, and the sum of the first {difference(82)} natural numbers is {difference(82)}, and the sum of the first {difference(83)} natural numbers is {difference(83)}, and the sum of the first {difference(84)} natural numbers is {difference(84)}, and the sum of the first {difference(85)} natural numbers is {difference(85)}, and the sum of the first {difference(86)} natural numbers is {difference(86)}, and the sum of the first {difference(87)} natural numbers is {difference(87)}, and the sum of the first {difference(88)} natural numbers is {difference(88)}, and the sum of the first {difference(89)} natural numbers is {difference"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return (n*(n-1))**2\n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    \n    for i in range(N) : \n        if A[i] & 1 == 1 : \n            odd_pair = odd_pair + 1\n    \n    return odd_pair\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    odd_cnt = 0\n    n = 0\n    for i in range(0,N) :\n        if (A[i] % 2) == 1 :\n            n = n + 1\n        if (i + 1) % N == 0 :\n            if (A[i] % 2) == 0 :\n                odd_cnt = odd_cnt + 1\n    return n,odd_cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l=[]\n    A.sort()\n    for i in range(len(A)) : \n        l.append(A[i]^N)\n    if l[0]==l[1] :\n        l[0]^=0\n        l[1]^=0\n    for i in range(len(l)):\n        if (l[i]==l[i-1]):\n            l[i]^=0\n    if l[len(l)-1]==l[len(l)-2] :\n        l[len(l)-1]^=0\n    return len(l)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    b = {}\n    for i in range(1,N+1):\n        if i % 2 == 1 :\n            b[i] = 0\n        else : \n            b[i] = 1\n    for i in A:\n        if i in b.keys() and b[i] == 0 :\n            b[i] = 0\n        else :\n            b[i] = 1\n    return sum(b.values())\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1): \n        if A[i]&1!= A[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N): \n        for j in range(i, N): \n            if (A[i] ^ A[j]) % 2 == 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    # Determine if A[0] and A[N-1] are the same bit.\n    if A[0] == A[N-1] :\n        return 0\n    \n    # Count the number of pairs with xor value odd.\n    return  ((N-1)//2) + (N-1)//2\n    \n    # Return false if N == 1.\n    if N == 1 : \n        return False\n    \n    # Find the pairs with xor value odd.\n    return find_Odd_Pair(A[:N//2],N//2) + find_Odd_Pair(A[N//2:],N//2)\n    \n    # Return false if N == 2.\n    if N == 2 : \n        return False\n    \n    # Find the pairs with xor value odd.\n    return find_Odd_Pair(A[:N//2],N//2) + find_Odd_Pair(A[N//2:],N//2) + find_Odd_Pair(A[:N//2],N//2)\n    \n    # Return false if N == 3.\n    if N == 3 : \n        return False\n    \n    # Find the pairs with xor value odd.\n    return find_Odd_Pair(A[:N//2],N//2) + find_Odd_Pair(A[N//2:],N//2) + find_Odd_Pair(A[:N//2],N//2) + find_Odd_Pair(A[N//2:],N//2) + find_Odd_Pair(A[:N//2],N//2)\n    \n    \n    "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_odd = 0\n    for i in range(N) :\n        if A[i] & 1!= 0 :\n            xor_odd += 1\n    return xor_odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i] & A[j]) == 0 : \n                cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0 \n    for i in range(1,N+1):\n        if (A[i] & 1)!= 0:\n            odd += 1\n    return odd\n    \n    \n    \n    \n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isalpha():\n        new_str = \"\"\n        for letter in string:\n            if letter.islower():\n                new_str += \"D\"\n            elif letter.isupper():\n                new_str += \"B\"\n            else:\n                new_str += letter\n        return new_str\n    else:\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower = string.lower()\n    new_lower = lower.swapcase()\n    new_lower = new_lower.replace(\" \", \"\")\n    new_lower = new_lower.replace(\" \", \"\")\n    new_lower = new_lower.replace(\" \", \"\")\n    new_lower = new_lower.replace(\" \", \"\")\n    return new_lower\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for i in range(0,len(string)):\n        if string[i] =='':\n            string = string.replace(string[i],'','')\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '&':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '*':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '+':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '_':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '&':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '*':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '+':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '_':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '&':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '*':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '+':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '_':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '&':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '*':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '+':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '_':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '&':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '*':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '+':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '_':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '&':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '*':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '+':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '_':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '&':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '*':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '+':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '_':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '!':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '?':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '@':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '$':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '#':\n            string = string.replace(string[i],\"_\")\n        elif string[i] == '%':\n            string = string.replace(string[i],\"_\""
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    while True:\n        if string.casefold() == string.casefold():\n            break\n        else:\n            string = string.replace(string.casefold(), string.casefold().swapcase())\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string)\n    for char in string:\n        if char.islower():\n            string = string.upper()\n        elif char.isupper():\n            string = string.lower()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.replace(\" \", \"\")\n    if string!= \"\":\n        if string[0].lower() == string[0]:\n            string[0] = string[0].upper()\n        if string[0].isalpha():\n            string[0] = string[0].lower()\n    return \"\".join(string)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        string =''\n    return string.upper()"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(lambda x, y: abs(x - y), n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # TODO\n    d = sum(int(i) - int(j) for i, j in zip(n1, n2))\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    elif n1 > n2:\n        return digit_distance_nums(n1 - 1, n2) + 1\n    else:\n        return digit_distance_nums(n1, n2 - 1)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    for i in range(n1):\n        result += (n2 - n1 + 1)\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    if type(n1) is int:\n        n1 = n1.to_bytes(2, 'little')\n    if type(n2) is int:\n        n2 = n2.to_bytes(2, 'little')\n    for i in range(len(n1)):\n        diff += (int(n2[i])-int(n1[i]))\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # The per-digit difference formula is as follows:\n    #\n    # D=|n1\u2212n2|, equivalent to the first half of the division\n    # D=|n1\u2212n2|\n    # D=|n1\u2212n2|\u2212d\u2212d2\n    # where d\u2212d2 is the difference between the digits of n2 and n1,\n    # and D=n1\u2212n2\u2212d.\n    #\n    # Let d = n2 - n1\n    #\n    # If d is an integer, return the absolute value of d.\n    # Else, return 0.\n    #\n    # For example, if n1 = 3 and n2 = 6, the result is 7, because n1 = 6 and n2 = 3.\n    #\n    # You should return 3, since we will divide by 3, so we'll return the absolute value of 3.\n    #\n    # For the rest of the test cases, the result should be 0.\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    elif n1 < n2:\n        return digit_distance_nums(n2, n1)\n    else:\n        return digit_distance_nums(n1, n2-1)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sums = 0\n    for i in range(10):\n        sums = sums + n1 % 10 - n2 % 10\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return sums\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += n1[i] - n2[i]\n    return diff\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    for i in range(0, size):\n        sum = sum + a[i]\n    return sum\n    \ndef largest_sub_array_sum(a):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sum = 0\n    for i in range(0, len(a)):\n        sum = sum + a[i]\n        if(sum > max_sum):\n            max_sum = sum\n    return max_sum\n    \ndef find_middle_index(a):\n    '''\n    Write a function to find the index of the middle element in a.\n    '''\n    size = len(a)\n    mid = size // 2\n    \n    if(size % 2 == 1):\n        return mid\n    else:\n        return (mid + 1) // 2\n    \ndef find_sum_index(a, n):\n    '''\n    Write a function to find the index of the sum of the elements of the array a, where n is the size of the array.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + a[i]\n    return sum\n    \ndef find_sum_index_recursive(a, n, result):\n    '''\n    Write a recursive function to find the index of the sum of the elements of the array a, where n is the size of the array.\n    '''\n    if n == 0:\n        result = 0\n        return result\n    else:\n        result = result + find_sum_index(a, n-1)\n        return result\n    \ndef find_sum_index_recursive2(a, n):\n    '''\n    Write a recursive function to find the index of the sum of the elements of the array a, where n is the size of the array.\n    '''\n    if n == 0:\n        return 0\n    else:\n        result = find_sum_index_recursive2(a, n-1) + a[n-1]\n        return result\n    \ndef find_sum_index_recursive3(a, n):\n    '''\n    Write a recursive function to find the index of the sum of the elements of the array a, where n is the size of the array.\n    '''\n    if n == 0:\n        return 0\n    else:\n        result = a[0] + find_sum_index_recursive3(a, n-1)\n        return result\n    \ndef find_sum_index_recursive4(a, n):\n    '''\n    Write a recursive function to find the index of the sum of the elements of the array a, where n is the size of the array.\n    '''\n    if n == 0:\n        return 0\n    else:\n        result = a[n-1] + find_sum_index_recursive4(a, n-1)\n        return result\n    \ndef find_sum_index_recursive5(a, n):\n    '''\n    Write a recursive function to find the index of the sum of the elements of the array a, where n is the size of the array.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return a[n-1] + find_sum_index_recursive5(a, n-1)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # The idea is to find the largest sublist and return it as a sum of all the sublists.\n    # to find the largest sublist sum is to check if the whole list is sum of a given size\n    # If the list is sum of a given size, then the sublist sums should be equal to a given size.\n    # Else, the sublist sums should be different.\n    # find the largest sublist sum\n    max_sum_sum = 0\n    sublist_sum = []\n    sublist_sum.append(0)\n    for i in range(len(a)):\n        cur_sum = 0\n        for j in range(i, len(a)):\n            cur_sum += a[j]\n            if(cur_sum == size):\n                sublist_sum.append(a[j])\n                max_sum_sum = max(max_sum_sum, sum(sublist_sum))\n                sublist_sum.pop(0)\n    return max_sum_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or a == []:\n        return 0\n    if a[size - 1] > 0:\n        return a[size - 1]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    res = []\n    sub_list = []\n    for i in range(len(a) - size + 1):\n        sub_list.append(a[i:i+size])\n    for s in sub_list:\n        s_sum = 0\n        for j in range(len(s)):\n            s_sum += s[j]\n        if s_sum > 0:\n            res.append(s_sum)\n    return res\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    maximum = 0\n    current = 0\n    n = len(a)\n    for i in range(n):\n        current += a[i]\n        if current > maximum:\n            maximum = current\n    return maximum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or size == 1:\n        return a[size-1]\n    # use recursive to find the sum of the largest sublist\n    return max_sub_array_sum(a, size-1) + a[size-1]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_sub_sum = 0\n    max_index = 0\n    for i in range(size):\n        max_sub_sum = max_sub_sum + a[i]\n        if i > 0 and max_sub_sum < a[i - 1]:\n            max_index = i\n    return max_sub_sum - max_index\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    sum = 0\n    max = a[0]\n    for i in range(1, n):\n        sum = a[i] + sum\n        if sum > max:\n            max = sum\n    return max\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    m = -1\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if m < current_sum:\n            m = current_sum\n    return m\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return None\n    elif test_tup1[0] < test_tup2[0]:\n        return (test_tup1[0], test_tup2[0])\n    else:\n        return (test_tup2[0], test_tup1[0])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to hold the elements in tuple1\n    tuple1_set = set(test_tup1)\n    # Create a set to hold the elements in tuple2\n    tuple2_set = set(test_tup2)\n    # If the first set is empty, then return the second set\n    if len(tuple1_set) == 0:\n        return tuple2_set\n    if len(tuple2_set) == 0:\n        return tuple1_set\n    # If the first set contains only one element, then return the first set\n    if len(tuple1_set) == 1:\n        return tuple1_set\n    # If the second set contains only one element, then return the second set\n    if len(tuple2_set) == 1:\n        return tuple2_set\n    # Find the union of the sets and return them in sorted order\n    tuple1_set = tuple1_set.union(tuple2_set)\n    return sorted(tuple1_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # YOUR CODE HERE\n    if type(test_tup1)!= type(test_tup2):\n        print(\"Input types must be of same type\")\n        return None\n    return sorted([test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup1 = tuple(test_tup1)\n    new_tup2 = tuple(test_tup2)\n    if len(new_tup1) > len(new_tup2):\n        return new_tup1\n    elif len(new_tup1) < len(new_tup2):\n        return new_tup2\n    else:\n        return (tuple(sorted(new_tup1 + new_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 or not test_tup2:\n        return None\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    elif len(test_tup2) > len(test_tup1):\n        return union_elements(test_tup1, test_tup2)\n    else:\n        return tuple(sorted(test_tup1 + test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    result = []\n    for x in test_tup1:\n        for y in test_tup2:\n            if x == y:\n                result.append(x)\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Write your code here.\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    #convert tuples to list\n    lst = list(test_tup1)\n    lst.extend(list(test_tup2))\n    \n    #create empty list\n    union_list = []\n    \n    #convert lst to set to remove duplicates\n    set1 = set(lst)\n    \n    #loop through both sets and add each element to the union\n    for item in set1:\n        union_list.append(item)\n        \n    #sort the union\n    sorted_list = sorted(union_list)\n    \n    return sorted_lis"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_ans = []\n    i = 0\n    j = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # YOUR CODE HERE\n    return\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    for i in range(l):\n        for j in range(i + 1, l):\n            if(lst[i] > lst[j]):\n                print(lst[j])\n                break\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    def findLength(lst):\n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        result = 0\n        length = 0\n        for i in range(0,len(lst)):\n            if (len(lst[i]) > result):\n                result = len(lst[i])\n                length = i\n        print(length)\n        return length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    len_sublist_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            len_sublist_list = [i]\n        elif len(lst[i]) == max_len:\n            len_sublist_list.append(i)\n    return max_len, len_sublist_list\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_length = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) > lst_length:\n            lst_length = len(lst[i])\n    return lst_length\n    \ndef Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the shortest sublists.\n    '''\n    lst_length = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) < lst_length:\n            lst_length = len(lst[i])\n    return lst_length\n    \ndef Find_Max_Count(lst):  \n    '''\n    Write a python function to find the number of sublists of the largest length.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n    return lst_count\n    \ndef Find_Min_Count(lst):  \n    '''\n    Write a python function to find the number of sublists of the shortest length.\n    '''\n    lst_length = Find_Min_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n    return lst_count\n    \ndef Find_Max_Sublists(lst):  \n    '''\n    Write a python function to find the largest sublist of the shortest length.\n    '''\n    lst_length = Find_Min_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    lst_count -= 1\n    return lst_count\n    \ndef Find_Min_Sublists(lst):  \n    '''\n    Write a python function to find the smallest sublist of the shortest length.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n    return lst_count\n    \ndef Find_Max_Sublist_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublist.\n    '''\n    lst_length = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) > lst_length:\n            lst_length = len(lst[i])\n    return lst_length\n    \ndef Find_Min_Sublist_Length(lst):  \n    '''\n    Write a python function to find the length of the shortest sublist.\n    '''\n    lst_length = Find_Min_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) < lst_length:\n            lst_length = len(lst[i])\n    return lst_length\n    \ndef Find_Max_Sublist_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublist.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n    return lst_count\n    \ndef Find_Min_Sublist_Length(lst):  \n    '''\n    Write a python function to find the length of the shortest sublist.\n    '''\n    lst_length = Find_Min_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n    return lst_count\n    \ndef Find_Max_Sublist_Length_Sublist(lst):  \n    '''\n    Write a python function to find the length of the longest sublist.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    lst_count -= 1\n    return lst_count\n    \ndef Find_Min_Sublist_Length_Sublist(lst):  \n    '''\n    Write a python function to find the length of the shortest sublist.\n    '''\n    lst_length = Find_Min_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n    return lst_count\n    \ndef Find_Max_Sublist_Length_Sublist_Sublist(lst):  \n    '''\n    Write a python function to find the length of the longest sublist.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    lst_count -= 1\n    return lst_count\n    \ndef Find_Max_Sublist_Length_Sublist_Sublist_Sublist(lst):  \n    '''\n    Write a python function to find the length of the longest sublist.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    lst_count -= 1\n    return lst_count\n    \ndef Print_Max_Sublist(lst):  \n    '''\n    Print the length of the longest sublist.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    print(lst_count)\n    \ndef Print_Min_Sublist(lst):  \n    '''\n    Print the length of the shortest sublist.\n    '''\n    lst_length = Find_Min_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    print(lst_count)\n    \ndef Print_Max_Sublist_Length(lst):  \n    '''\n    Print the length of the longest sublist.\n    '''\n    lst_length = Find_Max_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    print(lst_count)\n    \ndef Print_Min_Sublist_Length(lst):  \n    '''\n    Print the length of the shortest sublist.\n    '''\n    lst_length = Find_Min_Length(lst)\n    lst_count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) == lst_length:\n            lst_count += 1\n            \n    print(lst_count)\n    \ndef Print_Max_Sublist_Length_Sublist(lst):  \n    '''\n    Print the length of the longest sublis"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    max_len = 1\n    start = 0\n    end = 0\n    if len(lst) <= 1:\n        return len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > longest_sublist:\n            longest_sublist = len(lst[i])\n    return longest_sublist\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    max_length = 1\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    max_list = []\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list, max_length\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # write your code here\n    return re.search(r'\\b(?:(\\'|\")([^\\']*?)(\\'|\"\\b)+)', text).group(2)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'(?:[^`\"\\\\]|^)\\\\s*\"(?:[^`\"\\\\]|\\\\\")*?(?:[^`\"\\\\]|\\\\\")*?\\s*$', text)\ndef extract_values_list(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'(?:[^`\"\\\\]|^)\\\\s*\"(?:[^`\"\\\\]|\\\\\")*?(?:[^`\"\\\\]|\\\\\")*?\\s*$', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    '''\n    Test Cases\n    '''\n    \n    # Test Case #1\n    '''\n    text = '\u041f\u043e\u0440\u0442\u0443\u0433\u0430\u043b\u044c\u0441\u043a'\n    expect = 'port'\n    \n    assert extract_values(text) == expect\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = []\n    for c in text:\n        if c == '\"' or c == \"'\":\n            result.append(c)\n        if c =='' or c == '\\n':\n            pass\n    return \"\".join(result)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.search('[a-zA-Z]+', text).group(0)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # TODO: Write a function to extract values from a string\n    return text.split(\"\\\"\")\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\"'\", \"\")\n    text = text.replace('\"', \"\")\n    pattern = r'\\[([^]]+)\\]\\((.+)\\)'\n    for i in range(len(text)):\n        if re.search(pattern, text[i]) is None:\n            text[i] = text[i][0]\n    text = ''.join(text).replace('\\n','').replace(' ', ',').replace('\\t','').replace(',','')\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.replace(\"'\", \"\").replace('\"', \"\")\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # match_obj = re.findall(r'[\\w]{2}[(]{2}[\\w]+[)]\\w*', text)\n    # if len(match_obj) > 0:\n    #     return match_obj[0]\n    # else:\n    #     return text.replace('\\n', '')\n    \n    match_obj = re.findall(r'[\\w]{2}[(]{2}[\\w]+[)]\\w*', text)\n    if len(match_obj) > 0:\n        return match_obj[0]\n    else:\n        return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if len(text)<3:\n        return text\n    elif text[0]=='\u201c':\n        if text[1]=='\u201d':\n            text=text[2:len(text)-1]\n    elif text[0]=='\u201d':\n        if text[1]=='\"':\n            text=text[2:len(text)-1]\n    return text\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    if n<=1:\n        return 0\n    if n == 2:\n        return arr[0]\n    if n == 3:\n        if arr[0] == arr[1]:\n            return 3\n        else:\n            return 1\n    if arr[0] == arr[1]:\n        return 0\n    else:\n        count1 = count_Pairs(arr[1:],n-1)\n        count2 = count_Pairs(arr[:n-1],n-1)\n        count1 += count_Pairs(arr[:n-2],n-1)\n        count2 += count_Pairs(arr[1:],n-1)\n        return max(count1,count2)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    unordered_pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                if arr[i] <= arr[j]:\n                    unordered_pairs += 1\n    return unordered_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        count = 0\n        \n        for i in range(1,n):\n            if arr[i-1]!= arr[i]:\n                count += 1\n        \n        return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # total number of pairs\n    total_pairs = 0\n    # total number of pairs\n    total_unordered_pairs = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) == 0: \n        return 0\n    elif len(arr) == 1:\n        return 1\n    else:\n        c=0\n        for i in range(len(arr) - 1):\n            if (arr[i] == arr[i+1]):\n                c+=1\n                c+=1\n        return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    n_arr=[]\n    for i in arr:\n        n_arr.append(i)\n    #print(n_arr)\n    if len(n_arr)>1:\n        for i in range(1,len(n_arr)):\n            if n_arr[i]!=n_arr[i-1]:\n                count+=1\n    print(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # case where both elements are equal\n    if len(arr)<=2:\n        return 0\n    # count the number of possible unordered pairs\n    result = 1\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]>arr[j]:\n                result = result+1\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    p = []\n    for i in range(n):\n        p.append(arr[i]*arr[i])\n    if len(p) == 0:\n        return 0\n    for i in range(len(p)):\n        for j in range(i,len(p)):\n            if p[i]!= p[j]:\n                break\n        else:\n            return i+1\n    return -1\ndef maximum_pairs(arr,n): \n    '''\n    Write a python function which returns the maximum number of possible unordered pairs.\n    '''\n    p = []\n    for i in range(n):\n        p.append(arr[i]*arr[i])\n    if len(p) == 0:\n        return 0\n    for i in range(len(p)):\n        for j in range(i,len(p)):\n            if p[i]!= p[j]:\n                break\n        else:\n            return i+1\n    return -1\ndef perm_counter(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    p = []\n    for i in range(n):\n        p.append(arr[i]*arr[i])\n    if len(p) == 0:\n        return 0\n    for i in range(len(p)):\n        for j in range(i,len(p)):\n            if p[i]!= p[j]:\n                break\n        else:\n            return i+1\n    return -1\ndef non_perm_counter(arr,n):\n    '''\n    Write a python function which returns the number of possible unordered pairs where both elements are unequal.\n    '''\n    p = []\n    for i in range(n):\n        p.append(arr[i]*arr[i])\n    if len(p) == 0:\n        return 0\n    for i in range(len(p)):\n        for j in range(i,len(p)):\n            if p[i]!= p[j]:\n                break\n        else:\n            return i+1\n    return -1\ndef partition(arr,low,high):\n    '''\n    Write a python function which returns the index of the partition.\n    '''\n    i = (low-1)        \n    pivot = arr[high]\n    for j in range(low,high):\n        if arr[j] <= pivot:\n            i = i+1\n            arr[i],arr[j] = arr[j],arr[i]\n    arr[i+1],arr[high] = arr[high],arr[i+1]\n    return i+1\ndef quick_sort(arr,low,high):\n    '''\n    Write a python function which takes a list of integers and sorts it using quick sort.\n    '''\n    if low < high:\n        part = partition(arr,low,high)\n        quick_sort(arr,low,part-1)\n        quick_sort(arr,part+1,high)\ndef sift_down(arr,low,high,i):\n    '''\n    Write a python function which takes a list of integers and sorts it using quick sort.\n    '''\n    if i == high:\n        return\n    if low < i:\n        part = partition(arr,low,i)\n        sift_down(arr,i,part-1,part)\n    if low < i and arr[i] < arr[part]:\n        arr[i],arr[part] = arr[part],arr[i]\n        sift_down(arr,i,part-1,part)\ndef sift_up(arr,low,high,i):\n    '''\n    Write a python function which sorts the list using the sift_down function.\n    '''\n    if i == low:\n        return\n    if i < low:\n        part = partition(arr,low,i)\n        sift_up(arr,i,part-1,part)\n    if arr[i] > arr[high]:\n        arr[i],arr[high] = arr[high],arr[i]\n        sift_up(arr,i,high-1,part-1)\ndef sift_down(arr,low,high,i):\n    '''\n    Write a python function which sorts the list using the sift_up function.\n    '''\n    if i == low:\n        return\n    if i < low:\n        part = partition(arr,low,i)\n        sift_down(arr,i,part-1,part)\n    if arr[i] > arr[high]:\n        arr[i],arr[high] = arr[high],arr[i]\n        sift_down(arr,i,high-1,part-1)\ndef heapify(arr,n,i):\n    '''\n    Write a python function which takes a list of integers and sorts it using heapify.\n    '''\n    if i == n-1:\n        return\n    l = i*2 + 1\n    r = i*2 + 2\n    if l < n and arr[i] < arr[l]:\n        arr[i],arr[l] = arr[l],arr[i]\n        heapify(arr,n,l)\n    if r < n and arr[i] < arr[r]:\n        arr[i],arr[r] = arr[r],arr[i]\n        heapify(arr,n,r)\ndef heap_sort(arr):\n    '''\n    Write a python function which takes a list of integers and sorts it using heapify.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        heapify(arr,n,i)\n    for i in range(n-1,0,-1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heapify(arr,i,0)\ndef heap_sort2(arr):\n    '''\n    Write a python function which sorts the list using the heap_sort function.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heap_sort2(arr,n)\n    for i in range(n-1,0,-1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heap_sort2(arr,i)\ndef heap_sort3(arr):\n    '''\n    Write a python function which sorts the list using the heap_sort function.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heap_sort3(arr,n)\n    for i in range(n-1,0,-1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heap_sort3(arr,i)\ndef heap_sort4(arr):\n    '''\n    Write a python function which sorts the list using the heap_sort function.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heap_sort4(arr,n)\n    for i in range(n-1,0,-1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heap_sort4(arr,i)\ndef bubble_sort(arr):\n    '''\n    Write a python function which sorts the list using the bubble_sort function.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\ndef quick_sort3(arr):\n    '''\n    Write a python function which sorts the list using the quick_sort function.\n    '''\n    n = len(arr)\n    if n < 2:\n        return arr\n    mid = n//2\n    left = arr"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    for i in range(n): \n        for j in range(i, n): \n            if (arr[i]!= arr[j]): \n                if (arr[i] > arr[j]): \n                    cnt += 1 \n                break\n    return cnt \n  "
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [i for i in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \ndef even_odd(text): \n    '''\n    Write a python function to print even numbers in the given string.\n    '''\n    return [char for char in text if char % 2 == 0] \ndef is_palindrome(word): \n    '''\n    Check if a word is a palindrome.\n    '''\n    return ''.join(split(word)) == word[::-1] \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    lst = list(word) \n    return lst\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word) == 0:\n        return \"\"\n    elif len(word) <= 2:\n        return word\n    else:\n        return word[:2] + split(word[2:])\n    \ndef count_char(word, char):\n    '''\n    Write a python function to count a string as a given character.\n    '''\n    if len(word) == 0:\n        return 0\n    elif len(word) == 1:\n        return 1\n    else:\n        return word.count(char)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(d) for d in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    if n < 10:\n        return n\n    else:\n        return sum(int(d) for d in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    i = 0\n    while n!= 0:\n        n = n // 10\n        i += 1\n    return i\n    \n    \n    \n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s = s + n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n % 10 + sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n >= 10:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    j = len(list1)-1\n    k = 0\n    while j>=i:\n        if list1[j]<list1[j+1]:\n            return False\n        if list1[i]<list1[j]:\n            return False\n        j-=1\n        i+=1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # There are three cases to consider:\n    # 1) The list is empty\n    # 2) The list is sorted (ascending)\n    # 3) The list is already sorted\n    # 4) The list has one item\n    #\n    # A solution is to implement an algorithm that sorts the list on each iteration, and if the\n    # list is empty, it will print \"EMPTY\"\n    #\n    # The function is expected to return the boolean value (True or False)\n    #\n    # Example\n    #\n    # Input: [10, 9, 8, 7, 6]\n    # Output: True\n    # Explanation: The list is sorted on each iteration.\n    #\n    #\n    # Note:\n    #\n    # The given list will always be sorted!\n    #\n    #\n    # If the list is already sorted, you should return true. Otherwise, the function should return\n    # false.\n    #\n    #\n    #\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    length = len(list1)\n    # Check if all elements are unique in the list\n    if length == 0:\n        return True\n    for i in range(length):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #if the list is empty\n    if len(list1) == 0:\n        return True\n    #if the list contains any duplicate\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] == list1[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(sorted(list1))\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1)==list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            flag = False\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dictionaries = []\n    for i in range(length):\n        list_of_dictionaries.append({})\n    return list_of_dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        dict_to_add = {}\n        dict_to_add[\"name\"] = \"Holberton\"\n        dict_to_add[\"height\"] = 1.78\n        dict_to_add[\"mass\"] = 2.34\n        list_of_dicts.append(dict_to_add)\n    return list_of_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    empty_list = []\n    \n    for i in range(0, length):\n        empty_list.append({})\n    return empty_list\n    \n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [[{}] * length for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = len(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #write your code here\n    \n    list1_copy=list1.copy()\n    for sublist in list1:\n        for sub_sublist in sublist:\n            sub_sublist.sort()\n    return list1_copy\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # check if list is empty\n    if len(list1) == 0:\n        return\n    \n    # sort sublists\n    sort_sublists(list1[0])\n    for i in range(1, len(list1)):\n        sort_sublists(list1[i])\n        \n    # return list\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i][0])\n    temp.sort()\n    for i in range(len(list1)):\n        list1[i] = temp[i]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=lambda x: len(x))\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Start writing your code here\n    # Complete the function so that it returns a list of strings\n    \n    \n    # Convert each element in list to lowercase and sort the list\n    #  of strings\n    #  Sort it again, and then return the list of strings\n    #  With the sorted strings.\n    # Create an empty list of strings\n    list_of_strings = []\n    # Loop through the list and append each element to a string\n    for i in list1:\n        list_of_strings.append(str(i).lower())\n    # Sort the list of strings\n    list_of_strings.sort()\n    return list_of_strings\n    # End of function\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda x: x[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code here\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create empty list\n    unique_nums = []\n    \n    # find each number in the list\n    for num in nums:\n        # add each number to unique_nums if it is not already there\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    # return the list of all unique numbers\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_list = []\n    for num in nums:\n        if num not in nums_list:\n            nums_list.append(num)\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for num in nums:\n        for i in range(len(nums)):\n            if nums[i] not in nums[i + 1:]:\n                break\n            else:\n                nums[i] = nums[i]\n        if len(num) > len(nums):\n            pass\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = list()\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] == nums[j]:\n                pass\n            else:\n                result.append(nums[i])\n                result.append(nums[j])\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Iterate through lists\n    # For each nums in the lists, check if its already in the list or not. If not, add it to the list\n    # Return the list\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    d={} # Dictionary to hold unique numbers\n    for num in nums:\n        if num not in d:\n            d[num]=1 # if not in dictionary, add num to dictionary\n        else:\n            d[num]+=1 # if in dictionary, add 1 to number\n    for num in d:\n        if d[num]==1: # if in dictionary, check if multiple values, not needed\n            nums.remove(num) # remove num from list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initializing empty lists\n    x = []\n    # looping through the nums list\n    for num in nums:\n        # if num is already in the list\n        if num in x:\n            continue\n        # adding it to the list\n        x.append(num)\n    # returning the list\n    return x\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from itertools import islice\n    return list(filter(lambda x: x not in islice(nums, 2, None), nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums1 = []\n    nums2 = []\n    for i in nums:\n        if i not in nums1:\n            nums1.append(i)\n    for j in nums:\n        if j not in nums2:\n            nums2.append(j)\n    return nums1, nums2"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    dic = {} # create an empty dictionary to store the distinct numbers\n    \n    for num in nums:\n        if num in dic: # if there is a number in the dictionary\n            # add the number to the list\n            dic[num] += 1\n        else:\n            # if there is a number in the dictionary, create a new dictionary\n            # with the number as the key and the number of times as the value\n            dic[num] = 1\n    \n    # return the dictionary with the unique numbers\n    return dic\n    \ndef two_unique_nums2(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    dic = {}\n    \n    for num in nums:\n        if num in dic: # if there is a number in the dictionary\n            # add the number to the list\n            dic[num] += 1\n        else:\n            # if there is a number in the dictionary, create a new dictionary\n            # with the number as the key and the number of times as the value\n            dic[num] = 1\n    \n    # return the dictionary with the unique numbers\n    return dic\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # your code here\n    # to do\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\n    # to do\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod_all = []\n    for elem in list_data:\n        prod = elem * list_data[elem]\n        prod_all.append(prod)\n    return prod_all\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    products = []\n    for index in range(len(list_data)):\n        for number in list_data:\n            if list_data[index] == number:\n                products.append(list_data[index])\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    count = 1\n    for item in list_data:\n        if item == list_data[-1]:\n            count += 1\n        else:\n            count += 1\n            list_data.append(item)\n    return count\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Use a list comprehension to create a new list of unique numbers and sort it.\n    list_unique = [num for num in list_data if num not in list_data]\n    print(list_unique)\n    # Use a dictionary comprehension to convert the list_unique list into a dictionary.\n    list_unique_dict = dict(zip(list_unique, range(1,len(list_unique)+1)))\n    print(list_unique_dict)\n    # Return the product of the unique numbers in the list_data.\n    return list_unique_dict\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod=1\n    for i in list_data:\n        prod=prod*i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    s = 0\n    for i in list_data:\n        s+=i\n    return s\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = {}\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for number in list_data:\n        if number not in unique_list:\n            unique_list.append(number)\n    product = 1\n    for number in unique_list:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = []\n    for i in list_data:\n        if i not in lst:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(0, len(list_data), 1):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    return(len(unique_list))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14\n    a = pi*r*r\n    b = pi*r*h\n    return a*b\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=2*(r*h)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return ((r*(h**2))-2*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r**2)*(h/2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return ((r**2*(4*np.pi*h**2))*np.pi)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*(pi)*r**2)*h**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Write your code below this line\n    return (4/3)*(pi*r**3)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*r**2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #calculate the area\n    a = math.pi*r*h\n    #return\n    return a\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A==B or B==A or A==B[::-1]"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # iterating over sublist\n    for i in range(len(A)):\n        if A[i] not in B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    subarray = False\n    \n    if len(A)>len(B):\n        if A[0:len(B)]==B:\n            subarray = True\n    else:\n        if B[0:len(A)]==A:\n            subarray = True\n    return subarray\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A)==len(B) and all(x in A for x in B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # write your code here\n    l1 = list(A)\n    l2 = list(B)\n    d = {}\n    for i in l1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i]+=1\n    for i in l2:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i]+=1\n    return d=={}\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    C=[]\n    i=0\n    j=0\n    A=A.split(',')\n    B=B.split(',')\n    for i in range(len(A)):\n        if A[i] in B:\n            j=A.index(A[i])\n            C.append(A[j])\n        else:\n            C.append(A[i])\n    return C\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A=list(A)\n    B=list(B)\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i]==B[j]:\n                return True\n    return False\ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A=list(A)\n    B=list(B)\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i]==B[j]:\n                return False\n    return True\ndef remove_duplicates(A,B):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    A=list(A)\n    B=list(B)\n    for i in range(len(A)):\n        if A[i] in B:\n            B.remove(A[i])\n    return B\ndef bubblesort(A):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    A=list(A)\n    for i in range(len(A)-1,0,-1):\n        for j in range(i):\n            if A[j]>A[j+1]:\n                temp=A[j]\n                A[j]=A[j+1]\n                A[j+1]=temp\n    return A\ndef partition(A,low,high):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    i=low-1\n    pivot=A[high]\n    for j in range(low,high):\n        if A[j]<=pivot:\n            i=i+1\n            temp=A[j]\n            A[j]=A[i]\n            A[i]=temp\n    A[i+1]=pivot\n    return i+1\ndef quickSort(A,low,high):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if len(A)==1:\n        return A\n    if low<high:\n        pi=partition(A,low,high)\n        quickSort(A,low,pi-1)\n        quickSort(A,pi+1,high)\n    return A\ndef quickSort2(A):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    return quickSort(A,0,len(A)-1)\ndef mergeSort(A,low,high):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if high<=low:\n        return A\n    if high<=high//2:\n        pi=quickSort2(A,low,high)\n        return pi+[A[low]]+pi+[A[high]]\n    else:\n        pi=quickSort2(A,low,high//2)\n        return merge(pi,low,high//2)\ndef merge(A,low,high):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if low<high:\n        i=low+high//2\n        pi=merge(A,low,i)\n        j=low\n        k=high\n        while i<j and k>=i:\n            if A[i]<A[i+1]:\n                temp=A[i]\n                A[i]=A[i+1]\n                A[i+1]=temp\n            i=i+1\n        if i>=j:\n            while A[j]>=A[k]:\n                temp=A[j]\n                A[j]=A[j+1]\n                A[j+1]=temp\n            while A[i]>=A[k]:\n                temp=A[i]\n                A[i]=A[i+1]\n                A[i+1]=temp\n        else:\n            while A[i]>=A[k]:\n                temp=A[i]\n                A[i]=A[i+1]\n                A[i+1]=temp\n            while A[j]>=A[k]:\n                temp=A[j]\n                A[j]=A[j+1]\n                A[j+1]=temp\n    return A\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []: \n        return True\n    else: \n        return A == B[0] and is_Sub_Array(A[1:],B[1:])\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    l1 = len(A) \n    l2 = len(B) \n    i = 0 \n    j = 0\n    while i < l1 : \n        if A[i] == B[j] : \n            i = i+1 \n            j = j+1\n        elif A[i]!= B[j] : \n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return \"Value must be greater than 0\"\n    if n == 1:\n        return 1\n    last_digit = 1\n    for i in range(1, n+1):\n        last_digit *= i\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    \n    if n < 0: \n        return 'Error: factorial of negative numbers not possible'\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        last_digit_factorial = n % 10\n        n = n // 10\n        return last_digit_factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n==0):\n        return 0\n    else:\n        res = 0\n        for i in range(n, 0,-1):\n            res = res * i\n        return res\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 3\n    elif n == 7:\n        return 4\n    elif n == 8:\n        return 5\n    elif n == 9:\n        return 6\n    elif n == 10:\n        return 7\n    elif n == 11:\n        return 8\n    elif n == 12:\n        return 9\n    elif n == 13:\n        return 10\n    elif n == 14:\n        return 11\n    elif n == 15:\n        return 12\n    elif n == 16:\n        return 13\n    elif n == 17:\n        return 14\n    elif n == 18:\n        return 15\n    elif n == 19:\n        return 16\n    elif n == 20:\n        return 17\n    elif n == 21:\n        return 18\n    elif n == 22:\n        return 19\n    elif n == 23:\n        return 20\n    elif n == 24:\n        return 21\n    elif n == 25:\n        return 22\n    elif n == 26:\n        return 23\n    elif n == 27:\n        return 24\n    elif n == 28:\n        return 25\n    elif n == 29:\n        return 26\n    elif n == 30:\n        return 27\n    elif n == 31:\n        return 28\n    elif n == 32:\n        return 29\n    elif n == 33:\n        return 30\n    elif n == 34:\n        return 31\n    elif n == 35:\n        return 32\n    elif n == 36:\n        return 33\n    elif n == 37:\n        return 34\n    elif n == 38:\n        return 35\n    elif n == 39:\n        return 36\n    elif n == 40:\n        return 37\n    elif n == 41:\n        return 38\n    elif n == 42:\n        return 39\n    elif n == 43:\n        return 40\n    elif n == 44:\n        return 41\n    elif n == 45:\n        return 42\n    elif n == 46:\n        return 43\n    elif n == 47:\n        return 44\n    elif n == 48:\n        return 45\n    elif n == 49:\n        return 46\n    elif n == 50:\n        return 47\n    elif n == 51:\n        return 48\n    elif n == 52:\n        return 49\n    elif n == 53:\n        return 50\n    elif n == 54:\n        return 51\n    elif n == 55:\n        return 52\n    elif n == 56:\n        return 53\n    elif n == 57:\n        return 54\n    elif n == 58:\n        return 55\n    elif n == 59:\n        return 56\n    elif n == 60:\n        return 57\n    elif n == 61:\n        return 58\n    elif n == 62:\n        return 59\n    elif n == 63:\n        return 60\n    elif n == 64:\n        return 61\n    elif n == 65:\n        return 62\n    elif n == 66:\n        return 63\n    elif n == 67:\n        return 64\n    elif n == 68:\n        return 65\n    elif n == 69:\n        return 66\n    elif n == 70:\n        return 67\n    elif n == 71:\n        return 68\n    elif n == 72:\n        return 69\n    elif n == 73:\n        return 70\n    elif n == 74:\n        return 71\n    elif n == 75:\n        return 72\n    elif n == 76:\n        return 73\n    elif n == 77:\n        return 74\n    elif n == 78:\n        return 75\n    elif n == 79:\n        return 76\n    elif n == 80:\n        return 77\n    elif n == 81:\n        return 78\n    elif n == 82:\n        return 79\n    elif n == 83:\n        return 80\n    elif n == 84:\n        return 81\n    elif n == 85:\n        return 82\n    elif n == 86:\n        return 83\n    elif n == 87:\n        return 84\n    elif n == 88:\n        return 85\n    elif n == 89:\n        return 86\n    elif n == 90:\n        return 87\n    elif n == 91:\n        return 88\n    elif n == 92:\n        return 89\n    elif n == 93:\n        return 90\n    elif n == 94:\n        return 91\n    elif n == 95:\n        return 92\n    elif n == 96:\n        return 93\n    elif n == 97:\n        return 94\n    elif n == 98:\n        return 95\n    elif n == 99:\n        return 96\n    elif n == 100:\n        return 97\n    elif n == 101:\n        return 98\n    elif n == 102:\n        return 99\n    elif n == 103:\n        return 100\n    elif n == 104:\n        return 101\n    elif n == 105:\n        return 102\n    elif n == 106:\n        return 103\n    elif n == 107:\n        return 104\n    elif n == 108:\n        return 105\n    elif n == 109:\n        return 106\n    elif n == 110:\n        return 107\n    elif n == 111:\n        return 108\n    elif n == 112:\n        return 109\n    elif n == 113:\n        return 110\n    elif n == 114:\n        return 111\n    elif n == 115:\n        return 112\n    elif n == 116:\n        return 113\n    elif n == 117:\n        return 114\n    elif n == 118:\n        return 115\n    elif n == 119:\n        return 116\n    elif n == 120:\n        return 117\n    elif n == 121:\n        return 118\n    elif n == 122:\n        return 119\n    elif n == 123:\n        return 120\n    elif n == 124:\n        return 121\n    elif n == 125:\n        return 122\n    elif n == 126:\n        return 123\n    elif n == 127:\n        return 124\n    elif n == 128:\n        return 125\n    elif n == 129:\n        return 126\n    elif n == 130:\n        return 127\n    elif n == 131:\n        return 128\n    elif n == 132:\n        return 129\n    elif n == 133:\n        return 130\n    elif n == 134:\n        return 131\n    elif n == 135:\n        return 132\n    elif n == 136:\n        return 133\n    elif n == 137:\n        return 134\n    elif n == 138:\n        return 135\n    elif n == 139:\n        return 136\n    elif n == 140:\n        return 137\n    elif n == 141:\n        return 138\n    elif n == 142:\n        return 139\n    elif n == 143:\n        return 140\n    elif n == 144:\n        return 141\n    elif n == 145:\n        return 142\n    elif n == 146:\n        return 143\n    elif n == 147:\n        return 144\n    elif n == 148:\n        return 145\n    elif n == 149:\n        return 146\n    elif n == 150:\n        return 147\n    elif n == 151:\n        return 148\n    elif n == 152:\n        return 149\n    elif n == 153:\n        return 150\n    elif n == 154:\n        return 151\n    elif n == 155:\n        return 152\n    elif n == 156:\n        return 153\n    elif n == 157:\n        return 154\n    elif n == 158:\n        return 155\n    elif n == 159:\n        return 156\n    elif n == 160:\n        return 157\n    elif n == 161:\n        return 158\n    elif n == 162:\n        return 159\n    elif n == 163:\n        return 160\n    elif n == 164:\n        return 161\n    elif n == 165:\n        return 162\n    elif n == 166:\n        return 163\n    elif n ="
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    print(fact)\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    l = [1, 2, 3, 4, 5]\n    l.reverse()\n    l.append(1)\n    for i in range(1, len(l)):\n        l[i] = l[i-1]*l[i]\n    return l[n-1]\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact\ndef factorial_Exact(n):\n    '''\n    Write a python function that calculates the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact\ndef factorial_Recur(n):\n    '''\n    Write a recursive function factorial that takes an argument n, and returns the factorial of n.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n * factorial_Recur(n-1)\ndef factorial_Recur_Except(n):\n    '''\n    Write a recursive function factorial that takes an argument n, and returns the factorial of n.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n * factorial_Recur_Except(n-1)\ndef factorial_Recur_Except_2(n):\n    '''\n    Write a recursive function factorial that takes an argument n, and returns the factorial of n.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n * factorial_Recur_Except_2(n-1)\ndef factorial_Recur_Except_2_1(n):\n    '''\n    Write a recursive function factorial that takes an argument n, and returns the factorial of n.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n * factorial_Recur_Except_2_1(n-1)\ndef factorial_Recur_Except_3(n):\n    '''\n    Write a recursive function factorial that takes an argument n, and returns the factorial of n.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n * factorial_Recur_Except_3(n-1)\ndef factorial_Recur_Except_3_1(n):\n    '''\n    Write a recursive function factorial that takes an argument n, and returns the factorial of n.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n * factorial_Recur_Except_3_1(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return n * last_Digit_Factorial(n - 1)\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    def interleave(i,j,list3):\n        list3.append(list1[i]+list2[j]+list3[i]+list3[j])\n        \n    list1 = []\n    list2 = []\n    list3 = []\n    \n    interleave(0,0,list3)\n    \n    return(list3)\n    \n    \n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [ list3[i] + list2[i] + list1[i] for i in range(len(list1)) ]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # create a 3x3 list\n    the_list = [list1,list2,list3]\n    the_list.sort()\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    for i in list2:\n        new_list.append(i)\n    for i in list3:\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = list1 + list2 + list3\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return(list(zip(list1, list2, list3)))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1):\n        while j < len(list2):\n            while k < len(list3):\n                list3[k] = list1[i]\n                i += 1\n                k += 1\n            k += 1\n            j += 1\n        k += 1\n        while j < len(list2):\n            list1[i] = list2[j]\n            j += 1\n        i += 1\n        j = 0\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i]+list2[i]+list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    temp_list = []\n    \n    while len(list1) > 0 or len(list2) > 0 or len(list3) > 0:\n        \n        if len(list1) == 0:\n            temp_list.append(list2[0])\n            list2.pop(0)\n        elif len(list2) == 0:\n            temp_list.append(list1[0])\n            list1.pop(0)\n        elif len(list2) > 0 and len(list3) > 0:\n            if list2[0] < list3[0]:\n                temp_list.append(list1[0])\n                list1.pop(0)\n                list2.pop(0)\n            elif list2[0] > list3[0]:\n                temp_list.append(list2[0])\n                list2.pop(0)\n                list3.pop(0)\n        elif len(list2) == 0:\n            temp_list.append(list1[0])\n            list1.pop(0)\n        elif len(list3) == 0:\n            temp_list.append(list2[0])\n            list2.pop(0)\n        elif list2[0] < list3[0]:\n            temp_list.append(list1[0])\n            list1.pop(0)\n            list2.pop(0)\n        elif list2[0] > list3[0]:\n            temp_list.append(list2[0])\n            list2.pop(0)\n            list3.pop(0)\n    \n    return temp_list\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    while i<len(list1):\n        list2.append(list1[i])\n        list1.pop(i)\n        i=i-1\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # remove duplicate elements\n    test_tup1 = list(dict.fromkeys(test_tup1))\n    test_tup2 = list(dict.fromkeys(test_tup2))\n    # print(test_tup1, test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup1 = []\n    dissimilar_tup2 = []\n    for i in test_tup1:\n        if i in test_tup2:\n            dissimilar_tup1.append(i)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tuple = []\n    first_tup = tuple(sorted(set(test_tup1) - set(test_tup2)))\n    second_tup = tuple(sorted(set(test_tup2) - set(test_tup1)))\n    for element in first_tup:\n        for element1 in second_tup:\n            dissimilar_tuple.append(element)\n    return dissimilar_tuple\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # YOUR CODE HERE\n    x = set(test_tup1)\n    y = set(test_tup2)\n    z = x.symmetric_difference(y)\n    print(z)\n    return z\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = set(test_tup1) - set(test_tup2)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    n1 = len(list1)\n    n2 = len(list2)\n    res = []\n    i = 0\n    for j in range(n1 - 1):\n        if list1[j]!= list2[j]:\n            i += 1\n            if i == n2:\n                res.append(list1[j])\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    output = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if i!= j:\n                #if (test_tup1[i] > test_tup2[j]) or (test_tup1[i] < test_tup2[j]):\n                if test_tup1[i] > test_tup2[j]:\n                    output.append(test_tup2[j])\n    return output\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list = list(test_tup1)\n    test_list.sort()\n    list2 = list(test_tup2)\n    list2.sort()\n    if test_list == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for tup in zip(test_tup1, test_tup2):\n        if tup not in dissimilar:\n            dissimilar.append(tup)\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_set = set(test_tuple)\n    return list(even_set)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not type(even_fnc) == type(even_fnc()):\n        raise TypeError(\"even_fnc() expects a function that returns a tuple!\")\n    even_fnc_tuple = tuple(even_fnc() for _ in test_tuple)\n    even_fnc_tuple = tuple(even_fnc_tuple)\n    if not type(even_fnc_tuple) == tuple:\n        raise TypeError(\"even_fnc() expects a tuple as the first argument!\")\n    odd_tuple = tuple(even_fnc_tuple for _ in range(0,len(even_fnc_tuple)))\n    return even_fnc_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_fnc(i)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = tuple(map(even_fnc, test_tuple))\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_res = []\n    test_tuple = list(test_tuple)\n    for i in range(0, len(test_tuple)):\n        if test_tuple[i][1] % 2 == 0:\n            even_res.append(test_tuple[i][0])\n    even_res = tuple(even_res)\n    return even_fnc(even_res)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if type(i) is tuple:\n            for j in i:\n                if type(j) is int:\n                    new_list.append(j)\n                elif type(j) is list:\n                    new_list.extend(even_fnc(j))\n                else:\n                    print('Tuple must be of type tuple or list')\n        else:\n            print('List must be of type tuple or list')\n    return new_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_elements, even_elements = test_tuple\n    #print(f\"odd_elements = {odd_elements}\")\n    #print(f\"even_elements = {even_elements}\")\n    if even_elements:\n        even_elements = even_elements[:-1]\n        even_elements = even_elements + (even_elements[-1],)\n        #print(f\"even_elements = {even_elements}\")\n        even_elements = even_fnc(even_elements)\n    #print(f\"even_elements = {even_elements}\")\n    return even_elements\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple.pop(0)\n    even_element = even_fnc(even_tuple)\n    return even_tuple + even_element\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) > 1:\n        even_tuple = tuple(sorted(test_tuple, reverse=True))\n        for i in range(0, len(even_tuple)):\n            if even_fnc(even_tuple[i]):\n                even_tuple[i] = even_fnc(even_tuple[i])\n        return tuple(even_tuple)\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple): \n        for i in range(len(test_tuple)): \n            test_tuple[i] = even_fnc(test_tuple[i]) \n    elif isinstance(test_tuple, list): \n        for i in range(len(test_tuple)): \n            test_tuple[i] = even_fnc(test_tuple[i]) \n    else:\n        raise ValueError(\"Input must be a tuple or list\")\n    return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s==0:\n        return 0\n    sides=int(s)\n    if sides>1:\n        n=(4*(4**(sides-1)-1)/3)\n    else:\n        n=0\n    return n*s**2\n    \ndef area(x,y,z):\n    '''\n    Write a python function to find the area of a box.\n    '''\n    a=x*y*z\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s == 0:\n        print(\"The surface area is: 0\")\n        return\n    print(\"The surface area of a pyramid with base edge\",b,\" and height\",s,\"is:\",s**2 * (b/2))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if not isinstance(b,int):\n        raise TypeError('b must be an integer')\n    if not isinstance(s,int):\n        raise TypeError('s must be an integer')\n    if not b >= 0:\n        raise ValueError('b must be >= 0')\n    if not s >= 0:\n        raise ValueError('s must be >= 0')\n    if s > 0:\n        print(f\"The surface area of a square pyramid with base edge {b} and height {s} is: {area(b,s)}\")\n    else:\n        print(f\"The surface area of a square pyramid with base edge {b} and height {s} is: 0\")\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # your code goes here\n    for i in range(1,s+1):\n        print(i)\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b * s\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    ans = 0\n    for i in range(1,int(b)):\n        ans += 1\n        for j in range(1,int(s)):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    m = len(s)\n    n = len(s[0])\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n    \ndef my_list(list1):\n    '''\n    Write a function to return a list with an item at the start\n    '''\n    list1.insert(0, 'hello')\n    return list1\n    \ndef my_set(set1):\n    '''\n    Write a function to return a set with an item at the start\n    '''\n    set1.insert(0, 'hello')\n    return set1\n    \ndef my_tuple(tuple1):\n    '''\n    Write a function to return a tuple with an item at the start\n    '''\n    tuple1.insert(0, 'hello')\n    return tuple1\n    \ndef main():\n    '''\n    We have two options:\n    1. Use the dictionary() function to test if the dictionary is empty\n    2. Use the list() function to test if the list is empty\n    3. Use the set() function to test if the set is empty\n    4. Use the tuple() function to test if the tuple is empty\n    '''\n    d = dict(a=1, b=2, c=3)\n    l = list(d.keys())\n    s = set(l)\n    t = tuple(s)\n    print(d)\n    print(l)\n    print(s)\n    print(t)\n    print(my_dict(d))\n    print(my_list(l))\n    print(my_set(s))\n    print(my_tuple(t))\n    \n    \nmain()\n    "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n    \ndef dict_key(dict, key):\n    '''\n    Write a function to return the value of a key from a dictionary\n    '''\n    return dict[key]\n    \ndef dict_value(dict, key):\n    '''\n    Write a function to return the value of a key from a dictionary\n    '''\n    return dict[key]\n    \ndef get_type(dict):\n    '''\n    Write a function to return the type of a dictionary\n    '''\n    return type(dict)\n    \ndef get_keys(dict):\n    '''\n    Write a function to return the keys of a dictionary\n    '''\n    return dict.keys()\n    \ndef get_values(dict):\n    '''\n    Write a function to return the values of a dictionary\n    '''\n    return dict.values()\n    \ndef set_keys(dict):\n    '''\n    Write a function to set the keys of a dictionary\n    '''\n    dict[dict.keys()[0]] = dict[dict.keys()[0]]\n    return dict\n    \ndef set_values(dict):\n    '''\n    Write a function to set the values of a dictionary\n    '''\n    dict[dict.keys()[0]] = dict[dict.keys()[0]]\n    return dict\n    \ndef dict_update(dict, new_dict):\n    '''\n    Write a function to update a dictionary\n    '''\n    for k in new_dict.keys():\n        dict[k] = new_dict[k]\n        \ndef update_dict(dict, new_dict):\n    '''\n    Write a function to update a dictionary\n    '''\n    for k, v in new_dict.items():\n        dict[k] = v\n        \ndef dict_intersection(dict1, dict2):\n    '''\n    Write a function to return the intersection of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if k in dict2.keys():\n            if dict1[k] == dict2[k]:\n                new_dict[k] = dict1[k]\n            else:\n                new_dict[k] = 0\n        else:\n            new_dict[k] = 0\n    return new_dict\n    \ndef dict_set_intersection(dict1, dict2):\n    '''\n    Write a function to set the intersection of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if k in dict2.keys():\n            new_dict[k] = dict1[k]\n        else:\n            new_dict[k] = 0\n    return new_dict\n    \ndef dict_union(dict1, dict2):\n    '''\n    Write a function to return the union of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if k in dict2.keys():\n            new_dict[k] = dict2[k]\n        else:\n            new_dict[k] = 0\n    return new_dict\n    \ndef dict_set_union(dict1, dict2):\n    '''\n    Write a function to set the union of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if k in dict2.keys():\n            new_dict[k] = dict2[k]\n        else:\n            new_dict[k] = 0\n    return new_dict\n    \ndef dict_intersection_update(dict1, dict2):\n    '''\n    Write a function to update a dictionary\n    '''\n    for k, v in dict1.items():\n        dict2[k] = 0\n    return dict2\n    \ndef dict_set_intersection_update(dict1, dict2):\n    '''\n    Write a function to set the intersection of two dictionaries\n    '''\n    for k, v in dict1.items():\n        dict2[k] = 0\n    return dict2\n    \ndef dict_diff(dict1, dict2):\n    '''\n    Write a function to return the difference of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if k in dict2.keys():\n            new_dict[k] = dict1[k] - dict2[k]\n        else:\n            new_dict[k] = 0\n    return new_dict\n    \ndef dict_union_update(dict1, dict2):\n    '''\n    Write a function to update a dictionary\n    '''\n    for k, v in dict1.items():\n        dict2[k] = 0\n    return dict2\n    \ndef dict_set_diff(dict1, dict2):\n    '''\n    Write a function to set the difference of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        new_dict[k] = 0\n    return new_dict\n    \ndef dict_compare(dict1, dict2):\n    '''\n    Write a function to compare two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if k in dict2.keys():\n            if dict1[k] == dict2[k]:\n                new_dict[k] = dict1[k]\n            else:\n                new_dict[k] = 0\n        else:\n            new_dict[k] = 0\n    return new_dict\n    \ndef dict_set_compare(dict1, dict2):\n    '''\n    Write a function to set the difference of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        new_dict[k] = 0\n    return new_dict\n    \ndef dict_subtract(dict1, dict2):\n    '''\n    Write a function to subtract two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        new_dict[k] = dict2[k] - dict1[k]\n    return new_dict\n    \ndef dict_set_subtract(dict1, dict2):\n    '''\n    Write a function to set the difference of two dictionaries\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        new_dict[k] = dict2[k] - dict1[k]\n    return new_dict\n    \ndef dict_get(dict1, key):\n    '''\n    Write a function to get a key from a dictionary\n    '''\n    return dict1[key]\n    \ndef dict_set(dict1, key, value):\n    '''\n    Write a function to set a key in a dictionary\n    '''\n    dict1[key] = value\n    \ndef dict_keys(dict1):\n    '''\n    Write a function to return all keys from a dictionary\n    '''\n    return dict1.keys()\n    \ndef dict_values(dict1):\n    '''\n    Write a function to return all values from a dictionary\n    '''\n    return dict1.values()\n    \ndef dict_items(dict1):\n    '''\n    Write a function to return all items from a dictionary\n    '''\n    return dict1.items()\n    \ndef dict_values_update(dict1, new_dict):\n    '''\n    Write a function to update a dictionary\n    '''\n    for k, v in new_dict.items():\n        dict1[k] = v\n    return dict1\n    \ndef dict_set_values_update(dict1, new_dict):\n    '''\n    Write a function to set the values of a dictionary\n    '''\n    for k, v in new_dict.items():\n        dict1[k] = v\n    return dict1\n    \ndef dict_filter(dict1, condition):\n    '''\n    Write a function to return the dictionary with the values that satisfy a condition\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if condition(v):\n            new_dict[k] = v\n    return new_dict\n    \ndef dict_filter_update(dict1, new_dict):\n    '''\n    Write a function to update a dictionary\n    '''\n    for k, v in new"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return 'Dictionary is empty'\n    else:\n        return 'Dictionary is not empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # We can define a variable called n.\n    #  n = 0 : 1st catalan number.\n    #  n = 1 : 2nd catalan number.\n    #  n = 2 : 3rd catalan number.\n    # \n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    n = len(str(num))\n    res = [0]\n    for i in range(n):\n        res.append(str(i) + res[i])\n    return res[-1][:-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case\n    if num==0:\n        return 1\n    elif num==1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return num\n    else:\n        return num * catalan_number(num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base cases\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 6\n    elif num > 2:\n        return catalan_number(num-1) + catalan_number(num-2) + catalan_number(num-3)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    #-----------------------------------------\n    # Paste your code here.\n    #-----------------------------------------\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<1:\n        return 0\n    if num==1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [1, 1]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Write your code here.\n    result = 1\n    i = 0\n    while i < num:\n        result = result * (i+1)\n        i += 1\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if len(text) < 4:\n        raise ValueError('text is too short')\n    results = []\n    indicator = 0\n    for i in range(1, len(text)):\n        if indicator == 0:\n            if text[i] == 'ly' and text[i+1] == 'ly' and text[i+2] == 'ly' and text[i+3] == 'ly':\n                results.append(i)\n                indicator = 1\n            else:\n                indicator = 0\n        elif indicator == 1:\n            if text[i] == 'ly' and text[i+1] == 'ly' and text[i+2] == 'ly':\n                results.append(i)\n                indicator = 0\n            else:\n                indicator = 0\n    return results\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Remove words with numbers\n    text = re.sub('[a-zA-Z]',' ',text)\n    # Find first adverb\n    for i in text.split(' '):\n        if i.startswith('ly'):\n            # Remove ly from string\n            i = i[2:]\n    return i\ndef remove_special_symbols(text):\n    '''\n    Write a function to remove special symbols from a given string.\n    '''\n    # Remove special symbols\n    text = re.sub('[!.?\\\\-]','',text)\n    # Remove all characters in special symbol\n    text = re.sub('[^a-zA-Z0-9_\\\\-/]','',text)\n    # Remove all characters in special symbol\n    text = re.sub('[a-zA-Z]','',text)\n    # Remove special symbol\n    for i in text:\n        if i not in ['ly', 'ly']:\n            text = text.replace(i,'')\n    return text\ndef number_tokenizer(text):\n    '''\n    Write a function to tokenize the text in a given format.\n    '''\n    # Remove all numbers\n    text = re.sub('[0-9]','',text)\n    # Split the text into a list of words\n    words = text.split(' ')\n    # Return the words as a list\n    return words\ndef determine_adjective(text):\n    '''\n    Write a function to determine the correct adjective.\n    '''\n    # Remove all numbers\n    text = re.sub('[0-9]','',text)\n    # Split the text into a list of words\n    words = text.split(' ')\n    # Return the words as a list\n    return words\ndef filter_out_adj(text):\n    '''\n    Write a function to filter out all the non-adjacent adjectives.\n    '''\n    # Remove all adverbs ending with ly\n    text = re.sub(r'ly', '', text)\n    # Remove all adverbs starting with ly\n    text = re.sub(r'ly\\\\d{2}', '', text)\n    # Remove all characters in special symbol\n    text = re.sub(r'[^a-zA-Z0-9_\\\\-/]','',text)\n    # Remove all characters in special symbol\n    text = re.sub(r'[a-zA-Z]','',text)\n    # Remove all special symbols\n    text = re.sub('[!.?\\\\-]','',text)\n    # Remove all numbers\n    text = re.sub('[0-9]','',text)\n    # Return the filtered text\n    return text\ndef find_singular(text):\n    '''\n    Write a function to find the singular of a given text.\n    '''\n    # Remove all numbers\n    text = re.sub('[0-9]','',text)\n    # Remove all characters in special symbol\n    text = re.sub(r'[^a-zA-Z0-9_\\\\-/]','',text)\n    # Remove all special symbols\n    text = re.sub(r'[!.?\\\\-]','',text)\n    # Remove all numbers\n    text = re.sub('[0-9]','',text)\n    # Return the singular\n    return text\ndef count_tokens(text):\n    '''\n    Write a function to count the number of tokens in a given text.\n    '''\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef number_of_nouns(text):\n    '''\n    Write a function to determine the number of nouns in a given text.\n    '''\n    # Remove all number symbols\n    text = remove_special_symbols(text)\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef number_of_verbs(text):\n    '''\n    Write a function to determine the number of verbs in a given text.\n    '''\n    # Remove all number symbols\n    text = remove_special_symbols(text)\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef number_of_numbers(text):\n    '''\n    Write a function to determine the number of digits in a given text.\n    '''\n    # Remove all numbers\n    text = remove_special_symbols(text)\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef find_verb_postition(text):\n    '''\n    Write a function to find the postition of a verb in a given text.\n    '''\n    # Remove all number symbols\n    text = remove_special_symbols(text)\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef number_of_adjectives(text):\n    '''\n    Write a function to determine the number of adjectives in a given text.\n    '''\n    # Remove all number symbols\n    text = remove_special_symbols(text)\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef filter_out_adverb(text):\n    '''\n    Write a function to filter out all the adverbs ending with ly and its positions in a given text.\n    '''\n    # Remove all adverbs ending with ly\n    text = re.sub(r'ly', '', text)\n    # Remove all adverbs starting with ly\n    text = re.sub(r'ly\\\\d{2}', '', text)\n    # Remove all characters in special symbol\n    text = re.sub(r'[^a-zA-Z0-9_\\\\-/]','',text)\n    # Remove all characters in special symbol\n    text = re.sub(r'[a-zA-Z]','',text)\n    # Remove all special symbols\n    text = re.sub('[!.?\\\\-]','',text)\n    # Remove all numbers\n    text = re.sub('[0-9]','',text)\n    # Return the filtered text\n    return text\ndef count_adverb(text):\n    '''\n    Write a function to count the number of adverbs in a given text.\n    '''\n    # Remove all numbers\n    text = remove_special_symbols(text)\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef filter_out_adverb_2(text):\n    '''\n    Write a function to filter out all the adverbs ending with ly and its positions in a given text.\n    '''\n    # Remove all adverbs ending with ly\n    text = re.sub(r'ly', '', text)\n    # Remove all adverbs starting with ly\n    text = re.sub(r'ly\\\\d{2}', '', text)\n    # Remove all characters in special symbol\n    text = re.sub(r'[^a-zA-Z0-9_\\\\-/]','',text)\n    # Remove all characters in special symbol\n    text = re.sub(r'[a-zA-Z]','',text)\n    # Remove all special symbols\n    text = re.sub('[!.?\\\\-]','',text)\n    # Remove all numbers\n    text = re.sub('[0-9]','',text)\n    # Return the filtered text\n    return text\ndef count_adverb_2(text):\n    '''\n    Write a function to count the number of adverbs in a given text.\n    '''\n    # Remove all numbers\n    text = remove_special_symbols(text)\n    # Split the text into a list of words\n    words = number_tokenizer(text)\n    # Return the number of words\n    return len(words)\ndef count_num_singular(text):\n    '''\n    Write a function to count the number of singular nouns in a given text.\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return(text.find(\"ly\"))\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.replace(\"ly\",\"ly\")\n    text = text.replace(\"poo\",\"poo\")\n    text = text.replace(\"fifty\",\"fifty\")\n    text = text.replace(\"half\",\"half\")\n    text = text.replace(\"1\",\"1\")\n    text = text.replace(\"2\",\"2\")\n    text = text.replace(\"3\",\"3\")\n    text = text.replace(\"4\",\"4\")\n    text = text.replace(\"5\",\"5\")\n    text = text.replace(\"6\",\"6\")\n    text = text.replace(\"7\",\"7\")\n    text = text.replace(\"8\",\"8\")\n    text = text.replace(\"9\",\"9\")\n    text = text.replace(\"10\",\"10\")\n    text = text.replace(\"11\",\"11\")\n    text = text.replace(\"12\",\"12\")\n    text = text.replace(\"13\",\"13\")\n    text = text.replace(\"14\",\"14\")\n    text = text.replace(\"15\",\"15\")\n    text = text.replace(\"16\",\"16\")\n    text = text.replace(\"17\",\"17\")\n    text = text.replace(\"18\",\"18\")\n    text = text.replace(\"19\",\"19\")\n    text = text.replace(\"20\",\"20\")\n    text = text.replace(\"2\",\"2\")\n    text = text.replace(\"3\",\"3\")\n    text = text.replace(\"4\",\"4\")\n    text = text.replace(\"5\",\"5\")\n    text = text.replace(\"6\",\"6\")\n    text = text.replace(\"7\",\"7\")\n    text = text.replace(\"8\",\"8\")\n    text = text.replace(\"9\",\"9\")\n    text = text.replace(\"10\",\"10\")\n    text = text.replace(\"11\",\"11\")\n    text = text.replace(\"12\",\"12\")\n    text = text.replace(\"13\",\"13\")\n    text = text.replace(\"14\",\"14\")\n    text = text.replace(\"15\",\"15\")\n    text = text.replace(\"16\",\"16\")\n    text = text.replace(\"17\",\"17\")\n    text = text.replace(\"18\",\"18\")\n    text = text.replace(\"19\",\"19\")\n    text = text.replace(\"20\",\"20\")\n    text = text.replace(\"21\",\"21\")\n    text = text.replace(\"22\",\"22\")\n    text = text.replace(\"23\",\"23\")\n    text = text.replace(\"24\",\"24\")\n    text = text.replace(\"25\",\"25\")\n    text = text.replace(\"26\",\"26\")\n    text = text.replace(\"27\",\"27\")\n    text = text.replace(\"28\",\"28\")\n    text = text.replace(\"29\",\"29\")\n    text = text.replace(\"30\",\"30\")\n    text = text.replace(\"3\",\"3\")\n    text = text.replace(\"4\",\"4\")\n    text = text.replace(\"5\",\"5\")\n    text = text.replace(\"6\",\"6\")\n    text = text.replace(\"7\",\"7\")\n    text = text.replace(\"8\",\"8\")\n    text = text.replace(\"9\",\"9\")\n    text = text.replace(\"10\",\"10\")\n    text = text.replace(\"11\",\"11\")\n    text = text.replace(\"12\",\"12\")\n    text = text.replace(\"13\",\"13\")\n    text = text.replace(\"14\",\"14\")\n    text = text.replace(\"15\",\"15\")\n    text = text.replace(\"16\",\"16\")\n    text = text.replace(\"17\",\"17\")\n    text = text.replace(\"18\",\"18\")\n    text = text.replace(\"19\",\"19\")\n    text = text.replace(\"20\",\"20\")\n    text = text.replace(\"21\",\"21\")\n    text = text.replace(\"22\",\"22\")\n    text = text.replace(\"23\",\"23\")\n    text = text.replace(\"24\",\"24\")\n    text = text.replace(\"25\",\"25\")\n    text = text.replace(\"26\",\"26\")\n    text = text.replace(\"27\",\"27\")\n    text = text.replace(\"28\",\"28\")\n    text = text.replace(\"29\",\"29\")\n    text = text.replace(\"30\",\"30\")\n    text = text.replace(\"31\",\"31\")\n    text = text.replace(\"32\",\"32\")\n    text = text.replace(\"33\",\"33\")\n    text = text.replace(\"34\",\"34\")\n    text = text.replace(\"35\",\"35\")\n    text = text.replace(\"36\",\"36\")\n    text = text.replace(\"37\",\"37\")\n    text = text.replace(\"38\",\"38\")\n    text = text.replace(\"39\",\"39\")\n    text = text.replace(\"40\",\"40\")\n    text = text.replace(\"41\",\"41\")\n    text = text.replace(\"42\",\"42\")\n    text = text.replace(\"43\",\"43\")\n    text = text.replace(\"44\",\"44\")\n    text = text.replace(\"45\",\"45\")\n    text = text.replace(\"46\",\"46\")\n    text = text.replace(\"47\",\"47\")\n    text = text.replace(\"48\",\"48\")\n    text = text.replace(\"49\",\"49\")\n    text = text.replace(\"50\",\"50\")\n    text = text.replace(\"51\",\"51\")\n    text = text.replace(\"52\",\"52\")\n    text = text.replace(\"53\",\"53\")\n    text = text.replace(\"54\",\"54\")\n    text = text.replace(\"55\",\"55\")\n    text = text.replace(\"56\",\"56\")\n    text = text.replace(\"57\",\"57\")\n    text = text.replace(\"58\",\"58\")\n    text = text.replace(\"59\",\"59\")\n    text = text.replace(\"60\",\"60\")\n    text = text.replace(\"61\",\"61\")\n    text = text.replace(\"62\",\"62\")\n    text = text.replace(\"63\",\"63\")\n    text = text.replace(\"64\",\"64\")\n    text = text.replace(\"65\",\"65\")\n    text = text.replace(\"66\",\"66\")\n    text = text.replace(\"67\",\"67\")\n    text = text.replace(\"68\",\"68\")\n    text = text.replace(\"69\",\"69\")\n    text = text.replace(\"70\",\"70\")\n    text = text.replace(\"71\",\"71\")\n    text = text.replace(\"72\",\"72\")\n    text = text.replace(\"73\",\"73\")\n    text = text.replace(\"74\",\"74\")\n    text = text.replace(\"75\",\"75\")\n    text = text.replace(\"76\",\"76\")\n    text = text.replace(\"77\",\"77\")\n    text = text.replace(\"78\",\"78\")\n    text = text.replace(\"79\",\"79\")\n    text = text.replace(\"80\",\"80\")\n    text = text.replace(\"81\",\"81\")\n    text = text.replace(\"82\",\"82\")\n    text = text.replace(\"83\",\"83\")\n    text = text.replace(\"84\",\"84\")\n    text = text.replace(\"85\",\"85\")\n    text = text.replace(\"86\",\"86\")\n    text = text.replace(\"87\",\"87\")\n    text = text.replace(\"88\",\"88\")\n    text = text.replace(\"89\",\"89\")\n    text = text.replace(\"90\",\"90\")\n    text = text.replace(\"91\",\"91\")\n    text = text.replace(\"92\",\"92\")\n    text = text.replace(\"93\",\"93\")\n    text = text.replace(\"94\",\"94\")\n    text = text.replace(\"95\",\"95\")\n    text = text.replace(\"96\",\"96\")\n    text = text.replace(\"97\",\"97\")\n    text = text.replace(\"98\",\"98\")\n    text = text.replace(\"99\",\"99\")\n    text = text.replace(\"100\",\"100\")\n    text = text.replace(\"101\",\"101\")\n    text = text.replace(\"102\",\"102\")\n    text = text.replace(\"103\",\"103\")\n    text = text.replace(\"104\",\"104\")\n    text = text.replace(\"105\",\"105\")\n    text = text.replace(\"106\",\"106\")\n    text = text.replace(\"107\",\"107\")\n    text = text.replace(\"108\",\"108\")\n    text = text.replace(\"109\",\"109\")\n    text = text.replace(\"110\",\"110\")\n    text = text.replace(\"111\",\"111\")\n    text = text.replace(\"112\",\"112\")\n    text = text.replace(\"113\",\"113\")\n    text = text.replace(\"114\",\"114\")\n    text = text.replace(\"115\",\"115\")\n    text = text.replace(\"116\",\"11"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Initialize a dictionary to store the abbreviation and position\n    abbrev_dict = {}\n    pos_dict = {}\n    ab_count = 0\n    ab_num = 0\n    #Get the abbreviation and position\n    #Iterate through the string\n    for i in range(len(text)):\n        if text[i] == \"ly\" and text[i-1] == \"y\" and text[i+1] == \"i\":\n            ab_num = i\n            ab_count = 1\n        if text[i] == \"ly\" and text[i-1] == \"y\" and text[i+1] == \"i\":\n            ab_num = i\n            ab_count = 2\n        if text[i] == \"ly\" and text[i-1] == \"y\" and text[i+1] == \"i\":\n            ab_num = i\n            ab_count = 3\n        if text[i] == \"ly\" and text[i-1] == \"y\" and text[i+1] == \"i\":\n            ab_num = i\n            ab_count = 4\n        if text[i] == \"ly\" and text[i-1] == \"y\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 5\n        if text[i] == \"ly\" and text[i-1] == \"y\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 6\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 7\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 8\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 9\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 10\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 11\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 12\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 13\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 14\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 15\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 16\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 17\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 18\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 19\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 20\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 21\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 22\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 23\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 24\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 25\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 26\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 27\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 28\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 29\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 30\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 31\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 32\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 33\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 34\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 35\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 36\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 37\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 38\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 39\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 40\n        if text[i] == \"ly\" and text[i-1] == \"ly\" and text[i+1] == \"ly\":\n            ab_num = i\n            ab_count = 41\n        if text[i"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['a', 'an', 'the', 'it']\n    pattern = re.compile(r'(ly)|(ly|ly)')\n    res = pattern.search(text)\n    if res is None:\n        return 'the'\n    else:\n        return adverbs[res.start()]\n    # 'a'\n    # 'an'\n    # 'the'\n    # 'ly'\n    # 'ly'\n    # 'ly'\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find the adverbs\n    s = text.split()\n    for i in range(len(s)-1):\n        if s[i][-1] == 'y':\n            adverb = s[i]\n            # find the adverb's starting and ending position\n            start_index = s[i].index('y')\n            end_index = s[i].index('ly')\n            # get the start and end positions\n            start_pos = s[i].index('ly')\n            end_pos = s[i].index('ly')\n            # write the adverb's beginning and ending position\n            yield start_index, end_index, adverb, start_pos, end_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    for i in range(len(text)):\n        if text[i] == \"ly\" and text[i+1]!= \"n\":\n            adverb_list.append(i)\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    beginning_ly = \"\"\n    ly_end_positions = []\n    for char in text:\n        if char == \"y\" or char == \"Y\":\n            beginning_ly = beginning_ly + char\n        elif char == \"v\" or char == \"V\":\n            beginning_ly = beginning_ly + char + \" \"\n        elif char == \"u\" or char == \"U\":\n            beginning_ly = beginning_ly + char + \" \"\n        elif char == \"l\" or char == \"L\":\n            beginning_ly = beginning_ly + char\n    beginning_ly = beginning_ly.strip()\n    ly_beginning_positions = []\n    for pos in beginning_ly.split(\" \"):\n        if pos.endswith(\"ly\"):\n            ly_beginning_positions.append(int(pos[:-2]))\n    for pos in ly_beginning_positions:\n        if pos in ly_end_positions:\n            pos = ly_end_positions.index(pos)\n        else:\n            pos = ly_end_positions.index(pos) + 1\n        ly_end_positions[pos] = ly_end_positions[pos] + 1\n    return ly_end_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = re.sub(r'\\([0-9]+\\)', r'', text)\n    text = re.sub(r'\\[\\d+\\]', r'', text)\n    text = re.sub(r'\\[\\W+\\]', r'', text)\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.split(' ')\n    text = [ word.lower() for word in text if word!= '' and word[-1] not in 'ly']\n    return text\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[n])\n    items_with_heap = heapq.heapify(heap)\n    for i in range(n):\n        items_with_heap[i] = heapq.heappop(heap)\n    return(items_with_heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = [0] * n\n    x = [0] * n\n    heapq.heapify(h)\n    heapq.heapify(x)\n    for item in items:\n        heapq.heappush(h, item)\n        heapq.heappush(x, -item)\n    for i in range(n):\n        if h[i]!= 0 and x[i] < 0:\n            return False\n    return True\ndef is_better(a,b,c,d):\n    '''\n    Given three items, determine if one is better than the other.\n    '''\n    #print(f'a: {a}, b: {b}, c: {c}, d: {d}')\n    if a < b:\n        return c > d\n    elif a > b:\n        return c < d\n    else:\n        return a == b\ndef check(n,is_better,items):\n    '''\n    Given an n number of items, check if all of them are better.\n    '''\n    #print(f'n: {n}, is_better: {is_better}')\n    if len(items) == n:\n        return is_better(items[0],items[1],items[2])\n    return True\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    hq = []\n    h = []\n    for i in range(len(items)):\n        heapq.heappush(hq,(items[i][1],i))\n    for j in range(n):\n        heapq.heappop(hq)\n    while(len(hq)>0):\n        item = heapq.heappop(hq)\n        heapq.heappush(hq,item[1])\n        heapq.heappush(hq,(item[0]+items[item[1]][0],item[1]))\n        heapq.heappush(hq,(item[0]-items[item[1]][0],item[1]))\n    return h\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    i = 0\n    while i < n:\n        if heap[0] < items[i]:\n            heapq.heappush(heap,items[i])\n            i+=1\n        else:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i)\n    visited = [0]*(n+1)\n    s = 0\n    total_items = 0\n    while heap and visited[s] == 0:\n        smallest = heapq.heappop(heap)\n        total_items -= smallest\n        visited[smallest] = 1\n        for i in items:\n            if visited[i] == 0:\n                heapq.heappush(heap,i)\n    return total_items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    l = list(items)\n    if len(l)<=n:\n        return l\n    l = sorted(l,key=lambda x:x[1],reverse=True)\n    return l[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items, key=lambda x: x[1], reverse=True)[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    temp_dict = {}\n    heap = []\n    for key in items:\n        temp_dict[key] = items[key]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n == 1:\n        return items\n    else:\n        # Assign every element to a heap\n        heap = []\n        # Sort the array based on the price\n        heapq.heapify(heap)\n        # Return the nth most expensive\n        for i in range(len(items)):\n            heapq.heappushpop(heap,items[i])\n        \n        return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    for i in range(n):\n        a.append(l[i])\n    a.append(l[n])\n    return a\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:]\n    #Part A\n    '''\n    def split_Arr(l, n):\n        l1 = l[0:n]\n        l2 = l[n:]\n        return l1, l2\n    return split_Arr(l, n)\n    '''\n    #Part B\n    '''\n    def split_Arr(l, n):\n        return (l[0:n], l[n:])\n    return split_Arr(l, n)\n    '''\n    #Part C\n    '''\n    def split_Arr(l, n):\n        l1 = l[0:n]\n        l2 = l[n:]\n        return l1, l2\n    return split_Arr(l, n)\n    '''\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    start = 0\n    end = len(l) - 1\n    part = []\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    j = 0\n    p = []\n    while i < len(l):\n        p.append(l[i])\n        i = i + 1\n    i = 0\n    while i < len(l):\n        p.append(l[i])\n        i = i + 1\n    j = 0\n    while j < len(p):\n        if p[j] == '*':\n            p[j] = p[j - 1]\n            del p[j - 1]\n        j = j + 1\n    i = 0\n    j = 0\n    while i < len(l):\n        p[i] = l[i]\n        i = i + 1\n        j = j + 1\n    print(p)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    start_point = 0\n    end_point = n\n    return [l[start_point:end_point]]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l[0])\n    return l\n    \ndef sort_Arr(l):\n    '''\n    Write a python function to sort a list by using bubble sort.\n    '''\n    n = len(l)\n    for i in range(n):\n        for j in range(n-i-1):\n            if l[j] > l[j+1]:\n                l[j], l[j+1] = l[j+1], l[j]\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(n):\n        l.append(l[i])\n    return l[n:] + l[:i]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n    \n    "
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Check if the list has only one item\n    if len(listx) == 1:\n        # Check if the list is empty\n        if listx[0]!= '.':\n            raise ValueError('ERROR: list must have only one element')\n        # If the list is empty, return it as a tuple\n        else:\n            return tuple(listx)\n    # If the list is not empty, convert it to a tuple\n    else:\n        # Convert the list to a tuple\n        tuplex = tuple(listx)\n        # Return the tuple\n        return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for num in listx:\n        tup = tup + (num, )\n    return tup\n    \ndef list_keys(listx):\n    '''\n    Write a function to get the keys of a dictionary.\n    '''\n    return list(listx.keys())\n    \ndef list_values(listx):\n    '''\n    Write a function to get the values of a dictionary.\n    '''\n    return list(listx.values())\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple = ()\n    for el in listx:\n        tuple = tuple + (el,)\n    return tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #create an empty list and set it to a variable\n    listx = list()\n    #make the for loop go through the list\n    for i in listx:\n        #add to the list\n        listx.append(i)\n    #return the new list\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #If there is one element return that element\n    if len(nums) == 1:\n        return nums[0]\n    #Find the element in the first list\n    first_element = nums[0]\n    #Find the number of elements\n    num_elements = len(nums)\n    #Find the largest and smallest elements in the first list\n    first_largest = max(nums)\n    first_smallest = min(nums)\n    #Find the difference between the largest and smallest elements\n    difference = first_largest - first_smallest\n    #Return the difference\n    return difference\n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n        return nums\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    lst = sorted(nums)\n    diff = lst[-1] - lst[0]\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    result = []\n    if len(nums) == 0:\n        result = [0, 0]\n    else:\n        result = [nums[0], nums[0]]\n        \n    for i in range(1, len(nums)):\n        result.append(nums[i] - result[i-1])\n    return result\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # numbers = []\n    # for i in range(1, 100):\n    #     numbers.append(i)\n    # # numbers = [1, 2, 3, 4, 5]\n    # list_of_numbers = []\n    # for i in range(0, len(numbers)):\n    #     list_of_numbers.append(numbers[i])\n    # # print(list_of_numbers)\n    # temp_number = 0\n    # for i in range(len(list_of_numbers)):\n    #     if i == 0:\n    #         temp_number = list_of_numbers[i]\n    #     elif list_of_numbers[i] > list_of_numbers[i-1]:\n    #         temp_number = list_of_numbers[i]\n    #     else:\n    #         temp_number = list_of_numbers[i]\n    # # print(temp_number)\n    # # print(list_of_numbers)\n    #\n    # for i in range(0, len(list_of_numbers)):\n    #     temp_number = list_of_numbers[i]\n    #     if temp_number > list_of_numbers[i-1]:\n    #         list_of_numbers[i] = temp_number\n    #         # print(list_of_numbers)\n    #         # print(numbers)\n    #\n    # return list_of_numbers\n    # Write a python function to find the minimum number from the list of numbers.\n    # \n    # If there are two or more numbers, return the one that is smaller.\n    # If there are only two numbers, return the smallest number.\n    # \n    # Examples:\n    # [1, 2, 3, 4, 5]\n    # [2, 4, 6, 8, 10]\n    # [2, 4, 6, 8, 10]\n    # [2, 2, 2, 2, 2]\n    # # Return 2\n    # # Return 2\n    # # Return 1\n    # # Return 0\n    # \n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    # # Return 0\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 2\n    # # Return -1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 3\n    # # Return -1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 3\n    # # Return -1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 3\n    # # Return -1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 3\n    # # Return -1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 3\n    # # Return -1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smallest of those numbers.\n    # # \n    # # Example:\n    # # [1, 2, 3, 4, 5]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # [2, 4, 6, 8, 10]\n    # # Return 3\n    # # Return -1\n    # # Return -1\n    # # Return 0\n    # # Return 2\n    #\n    # # Write a python function to find the difference between the largest and smallest value in a given list.\n    # # If the list is empty, return 0.\n    # # If the list has only one number, return that number.\n    # # If the list has more than one number, return the smalles"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # get the largest number\n    largest = max(nums)\n    # get the smallest number\n    smallest = min(nums)\n    # return the difference\n    return largest - smallest\n    # problem\n    '''\n    Given the list [4,3,5,2,3,5,2,1], the difference between the smallest and largest number is 1.\n    The difference between the smallest and largest number should be 2, while the difference between the largest and smallest number should be -3.\n    \n    '''\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    x = sorted(nums, reverse=True)\n    print(x)\n    print(x[0] - x[1])\n    return x[0] - x[1]\n    \n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    temp = sorted(nums)\n    print(temp)\n    print(min(temp))\n    print(max(temp))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    sorted_list = sorted(nums)\n    for num in sorted_list:\n        if num>sorted_list[-1]:\n            sorted_list.append(num)\n        elif num<sorted_list[0]:\n            sorted_list.insert(0, num)\n        else:\n            continue\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i]-sorted_list[i-1]>0:\n            sorted_list.insert(i, sorted_list[i]-sorted_list[i-1])\n    print(sorted_list)\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = sorted(nums)\n    b = sorted(nums)\n    print(a-b)\n    "
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i for i in range(b) if abs(a-i) == abs(b-i) and abs(i)!= 0]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b):\n        if i * i > b * b:\n            break\n        if i ** 2 == i:\n            return [i]\n        if i ** 2 < b ** 2:\n            continue\n        if i ** 2 < b ** 2:\n            continue\n        if i ** 2 == b ** 2:\n            return [i]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    if a > b:\n        a,b = b,a\n    while a % b == 0:\n        a /= b\n        count += 1\n    if count == 0:\n        return b\n    elif count == 1:\n        return a\n    else:\n        return perfect_squares(a,b/2)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # print(f\"a={a}, b={b}\")\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # i is the length of the digits of the number.\n    # j is the lenght of the digits of the prime number.\n    # if the number is prime, return true\n    if b == 0:\n        return False\n    if a == 0 or b == 0:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = 0\n    for x in range(1, b):\n        if a**2 + b**2 == x**2:\n            c+=1\n    if c==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if not a or not b:\n        return None\n    if a < 0 or b < 0:\n        return None\n    squares = []\n    for x in range(min(a, b), max(a, b)):\n        if x!= int(x) and x % int(x) == 0:\n            break\n    if x == 0:\n        squares.append(int(x))\n        return squares\n    for x in range(min(a, b), max(a, b)):\n        if x % int(x) == 0:\n            break\n        if abs(x - int(x)) % int(x) == 0:\n            break\n        if abs(x - int(x)) == int(x) and int(x)!= x and x % int(x) == 0:\n            squares.append(int(x))\n            return squares\n    return None\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(b+1):\n        for j in range(a+1):\n            if i**2 + j**2 == a**2 + b**2:\n                result.append(i**2 + j**2)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    f = a + b\n    while f > 2:\n        if f % 2 == 0:\n            f //= 2\n        else:\n            f += 1\n    return f == b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (b**2) - (a**2) == 0:\n        return [a,b]\n    if a**2 < b**2:\n        return [a,b]\n    return []\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #initialize the answer\n    answer = []\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    return(r[0],r[1])\ndef polar_rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    return(r[0],r[1])\ndef polar_rect_to_cir(x,y):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(c,r[1])\ndef polar_circ(x,y):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    c = (y*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circ_to_polar(x,y):\n    '''\n    Write a function to convert circular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(c,r[1])\ndef polar_cir(x,y):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    c = (y*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_cir_to_polar(x,y):\n    '''\n    Write a function to convert circular coordinates to polar coordinates.\n    '''\n    c = (x*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circ_to_cir(x,y):\n    '''\n    Write a function to convert circular coordinates to circular coordinates.\n    '''\n    c = (y*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_cir_to_cir(x,y):\n    '''\n    Write a function to convert circular coordinates to circular coordinates.\n    '''\n    c = (x*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circ_to_rect(x,y):\n    '''\n    Write a function to convert circular coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    return(r[0],r[1])\ndef polar_cir_to_rect(x,y):\n    '''\n    Write a function to convert circular coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    return(r[0],r[1])\ndef polar_circle_to_rect(x,y):\n    '''\n    Write a function to convert circular coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(r[0],r[1])\ndef polar_circle_to_circle(x,y):\n    '''\n    Write a function to convert circular coordinates to circular coordinates.\n    '''\n    c = (y*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circle_to_polar(x,y):\n    '''\n    Write a function to convert circular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(c,r[1])\ndef polar_rect_to_circle(x,y):\n    '''\n    Write a function to convert rectangular coordinates to circular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(c,r[1])\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    return(r[0],r[1])\ndef polar_rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(c,r[1])\ndef polar_rect_to_polar_plus_ellipse(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(r[0],r[1])\ndef polar_circ_to_polar_plus_ellipse(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    c = (y*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circ_to_polar_plus_ellipse(x,y):\n    '''\n    Write a function to convert circular coordinates to polar coordinates.\n    '''\n    c = (x*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circ_to_polar_plus_ellipse(x,y):\n    '''\n    Write a function to convert circular coordinates to polar coordinates.\n    '''\n    c = (y*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circle_to_polar_plus_ellipse(x,y):\n    '''\n    Write a function to convert circular coordinates to polar coordinates.\n    '''\n    c = (x*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_circle_to_polar_plus_ellipse(x,y):\n    '''\n    Write a function to convert circular coordinates to polar coordinates.\n    '''\n    c = (y*2+1)*cmath.pi\n    r = cmath.polar(x,c)\n    return(r[0],r[1])\ndef polar_rect_to_circle(x,y):\n    '''\n    Write a function to convert rectangular coordinates to circular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(c,r[1])\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(x,y)\n    return(r[0],r[1])\ndef polar_rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(c,r[1])\ndef polar_rect_to_polar_plus_ellipse(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    c = (r[0]*2+1)*cmath.pi\n    return(r[0],r[1])\ndef polar_rect_to_polar_plus_ellipse"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x*y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = x**2 + y**2\n    #print(\"R = \" + str(R))\n    #print(\"R = \" + str(R))\n    return (R,y)\ndef polar_rect_grad(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = x**2 + y**2\n    #print(\"R = \" + str(R))\n    #print(\"R = \" + str(R))\n    return (((x**2 + y**2)/R)*cmath.sqrt(1 - x**2 - y**2))\ndef polar_rect_grad_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = x**2 + y**2\n    #print(\"R = \" + str(R))\n    #print(\"R = \" + str(R))\n    return (((x**2 + y**2)/R)*cmath.sqrt(1 - x**2 - y**2))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x/2\n    phi = cmath.phase(y)\n    theta = cmath.phase(x)\n    if theta<0:\n        theta = 360+theta\n    if phi<0:\n        phi = 360+phi\n    return r, phi, theta\n    \ndef polar_rect_theta(x,y,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to theta values.\n    '''\n    r, phi, theta = polar_rect(x,y)\n    theta = cmath.phase(theta)\n    return r, phi, theta\n    \ndef polar_rect_y(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to y values.\n    '''\n    theta = cmath.phase(y)\n    if theta<0:\n        theta = 360+theta\n    if phi<0:\n        phi = 360+phi\n    return r, phi, theta\n    \ndef polar_rect_y_theta(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to y values and convert polar coordinates to theta values.\n    '''\n    r, phi, theta = polar_rect(x,y)\n    y = cmath.phase(y)\n    return r, phi, theta\n    \ndef polar_cartesian(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values.\n    '''\n    r = r*cmath.cos(phi)\n    phi = r*cmath.sin(phi)\n    theta = cmath.phase(y)\n    return r,phi,theta\n    \ndef polar_cartesian_y(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values.\n    '''\n    r = r*cmath.cos(phi)\n    phi = r*cmath.sin(phi)\n    theta = cmath.phase(x)\n    return r,phi,theta\n    \ndef polar_cartesian_y_theta(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values and convert polar coordinates to theta values.\n    '''\n    r = r*cmath.cos(phi)\n    phi = r*cmath.sin(phi)\n    theta = cmath.phase(y)\n    return r,phi,theta\n    \ndef polar_cartesian_theta(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to theta values.\n    '''\n    r = r*cmath.cos(phi)\n    phi = r*cmath.sin(phi)\n    theta = cmath.phase(x)\n    return r,phi,theta\n    \ndef polar_cartesian_x(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values.\n    '''\n    x = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    return x\n    \ndef polar_cartesian_y_x(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values.\n    '''\n    x = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    y = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.sin(theta))\n    return x,y\n    \ndef polar_cartesian_x_y(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values.\n    '''\n    x = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    y = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.sin(theta))\n    return x,y\n    \ndef polar_cartesian_y_x_y(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values and convert polar coordinates to y values.\n    '''\n    x = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    y = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.sin(theta))\n    z = cmath.sqrt(r*r*cmath.cos(phi))\n    return y,x,z\n    \ndef polar_cartesian_z(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to z values.\n    '''\n    z = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    return z\n    \ndef polar_cartesian_theta_z(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to z values and convert polar coordinates to theta values.\n    '''\n    z = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    theta = cmath.phase(z)\n    return z,theta\n    \ndef polar_cartesian_x_z(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to z values.\n    '''\n    z = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    x = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.sin(theta))\n    return x,z\n    \ndef polar_cartesian_y_x_z(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values and convert polar coordinates to z values.\n    '''\n    z = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    y = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.sin(theta))\n    x = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.sin(theta))\n    return y,x,z\n    \ndef polar_cartesian_x_y_z(r,phi,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates and convert polar coordinates to x values and convert polar coordinates to y values and convert polar coordinates to z values.\n    '''\n    z = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.cos(theta))\n    x = cmath.sqrt(r*r*cmath.cos(phi) + r*r*cmath.sin(phi)*cmath.sin(theta))\n    y = cmat"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (cmath.sqrt(x**2 + y**2))\n    #print(r)\n    x_lim = (x - cmath.sqrt(1 - r**2))/(r)\n    #print(x_lim)\n    y_lim = (y - cmath.sqrt(1 - r**2))/(r)\n    #print(y_lim)\n    return x_lim,y_lim\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    #print(r)\n    phi = (cmath.acos(r))*(180/math.pi)\n    #print(phi)\n    theta = (cmath.atan2(y,x))*(180/math.pi)\n    #print(theta)\n    return phi,theta\ndef elliptic_polar(x,y):\n    '''\n    Write a function to convert elliptic coordinates to polar coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    #print(r)\n    phi = (cmath.acos(r))*(180/math.pi)\n    #print(phi)\n    #print(180/phi)\n    #print((cmath.asin(y) - cmath.atan(y)))\n    theta = (cmath.atan2(y,x))*(180/math.pi)\n    #print(theta)\n    #print((cmath.asin(y) - cmath.atan(y)))\n    #print(180/theta)\n    return phi,theta\ndef circle(x,y,r):\n    '''\n    Write a function that calculates the circumference of a circle with given radius r.\n    '''\n    circumference = 2*(r*cmath.sqrt(1-r**2))\n    return circumference\ndef square(x,y,r):\n    '''\n    Write a function that calculates the circumference of a circle with given radius r.\n    '''\n    circumference = 4*(r*cmath.sqrt(1-r**2))\n    return circumference\ndef vol(x,y,r):\n    '''\n    Write a function that calculates the circumference of a circle with given radius r.\n    '''\n    circumference = 4*(r*cmath.sqrt(1-r**2))\n    return circumference\ndef plot_elliptic_lines(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    theta = (cmath.acos(x/y))*(180/math.pi)\n    phi = (cmath.atan2(y,x))*(180/math.pi)\n    #print(phi)\n    #print(theta)\n    #print((cmath.asin(y) - cmath.atan(y)))\n    #print(180/theta)\n    #print((cmath.asin(y) - cmath.atan(y)))\n    #print(180/theta)\n    return phi,theta\ndef plot_elliptic_polar(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = ellip_polar(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = ellip_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_polar_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = ellip_polar_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_circle(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = elliptic_polar(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_square(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = elliptic_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_square_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = elliptic_polar_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_circle_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = elliptic_polar_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_circle(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = plot_elliptic_circle(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_square(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = plot_elliptic_square(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_square_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = plot_elliptic_square_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_square_elliptic_polar(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = plot_elliptic_square_elliptic_polar(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_square_elliptic_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = plot_elliptic_square_elliptic_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_square_elliptic_polar_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y.\n    '''\n    phi,theta = plot_elliptic_square_elliptic_polar_rect(x,y)\n    #print(phi)\n    #print(theta)\n    #print(phi/theta)\n    return phi,theta\ndef plot_elliptic_square_elliptic_polar_elliptic_rect(x,y):\n    '''\n    Write a function that plots the elliptic curves given x and y"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=complex(x),complex(y)\n    r=cmath.sqrt(x**2+y**2)\n    phi=cmath.atan2(y,x)\n    return x,y,r,phi\ndef polar_rect_to_rect(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=complex(x),complex(y)\n    r=complex(r)\n    phi=complex(phi)\n    R=cmath.sqrt(x**2+y**2-r**2)\n    return (R,phi/cmath.pi)\ndef phase_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=complex(x),complex(y)\n    r=cmath.sqrt(x**2+y**2)\n    phi=cmath.asin(y/r)\n    return x,y,r,phi\ndef phase_rect_to_rect(x,y,r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=complex(x),complex(y)\n    r=complex(r)\n    phi=complex(phi)\n    R=cmath.sqrt(x**2+y**2-r**2)\n    return (R,phi/cmath.pi)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    from math import asin\n    return asin((x**2 + y**2))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = (x*2*cmath.pi)/360\n    return cmath.polar(angle)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    global L\n    x = round(x,1)\n    y = round(y,1)\n    x2 = round(x*L,1)\n    y2 = round(y*L,1)\n    return (x2,y2)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 1:\n        raise ValueError (\"List is empty\")\n    elif length > 1:\n        for i in range(0,length):\n            temp = newList[i]\n            newList[i] = newList[length-i-1]\n            newList[length-i-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # Make a copy of the list, and swap the first and last elements \n    temp = newList\n    newList = newList[::-1] \n    newList[0], newList[-1] = newList[-1], newList[0] \n    \n    return temp\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # remove the first element (if it exists)\n    if len(newList) > 1:\n        newList.pop(0)\n        newList.pop(len(newList)-1)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #swap 1st and 2nd element in list\n    newList[0], newList[-1] = newList[-1], newList[0] \n    \n    #swap 2nd and 3rd element in list\n    newList[1], newList[2] = newList[2], newList[1] \n    \n    #return newList\n    return newList\n    "
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    newList.reverse()\n    newList.append(newList.pop(0))\n    newList.append(newList.pop(len(newList)-1))\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code goes here\n    if len(newList) == 1:\n        return newList\n    #newList[0],newList[-1]\n    return newList[1:] + newList[0:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n    \nlist = [1,2,3,4,5,6,7,8]\nprint(swap_List(list)"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0] = newList[-1]\n    newList[-1] = newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list \n    # print(len(newList)) \n    # get the length of the list\n    length = len(newList) \n    # create a variable to store the starting index \n    startIndex = 0\n    # create a variable to store the ending index \n    endIndex = length-1\n    # iterate through the list \n    for i in range(0,length): \n        # print(i) \n        # increment the index \n        startIndex += 1\n        # print(startIndex) \n        # increment the index \n        endIndex += 1\n        # print(endIndex) \n        # swap the two adjacent elements \n        newList[startIndex],newList[endIndex] = newList[endIndex],newList[startIndex] \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    lst = newList\n    print(lst[-1], lst[-2])\n    lst[-2], lst[-1] = lst[-1], lst[-2]\n    return lst\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #Your code here\n    total = 0\n    for i in range(0, n+1):\n        total += i*(i+1)*binomial_coeff(n-i,k)\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n < 0 or k < 0):\n        raise Exception(\"Input values not valid\")\n    elif (k == 0):\n        return n\n    elif (k == 1):\n        return 1\n    elif (k == 2):\n        return 1\n    else:\n        return (n * binomial_Coeff(n-1, k-1) )"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    p = 1.0/n\n    m = 1\n    for i in range(n-1): \n        p = p*(1-p)\n        m += 1\n    return (p*m)/(n-k+1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # you can use a list comprehension to do this, or you can use sum function\n    coeff = [n//k,n%k]\n    sum = sum(coeff)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0: \n        raise Exception (\"n must be non-negative\")\n    elif k < 0: \n        raise Exception(\"k must be non-negative\")\n    elif k == 0: \n        return 1\n    elif k == 1: \n        return n \n    else: \n        return n * binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    l = 0\n    r = n-1\n    s = 0\n    while r >= 0:\n        if l == k-1:\n            s += n*binomial(l,r)\n        else:\n            s += n*binomial(l,r) * binomial(l+1,r+1)\n        l += 1\n        r -= 1\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    bcoeff = [1]*(k+1)\n    for i in range(k+1):\n        bcoeff[i] = bcoeff[i-1] * (n - i)\n    return bcoeff[-1]\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_Coeff(n,k): \n        lst = []\n        for i in range(1, n+1): \n            lst.append(i*k**i)\n        return sum(lst)\n    return binomial_Coeff(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Let's assume that the n,k values are given as in binomial_Coeff(n,k) = (k,n)\n    # The coefficients are calculated using a loop and the values calculated using a for loop.\n    \n    result = (1)\n    for i in range(1,k+1):\n        result = (result*(n+i))\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: \n        return 1\n    return binomial_Coeff(n-1,k-1)*n\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #Initialize new array\n    newArray = []\n    #Start with 1st element, and iterate through list\n    for i in range(1,len(ip)):\n        #If next element is a zero\n        if ip[i] == 0:\n            #If it's not 0, add it to the array\n            if ip[i-1] == 0:\n                newArray.append(ip[i])\n            #If it's zero, set the next index of the same element to be 0\n            else:\n                newArray.append(0)\n        #If it is not a zero, add it to the new array\n        else:\n            newArray.append(ip[i])\n    #Return new array\n    return newArray\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    addzero_ip = 0\n    pattern = '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'\n    match = re.search(pattern,ip)\n    if match is None:\n        addzero_ip = 0\n    else:\n        addzero_ip = int(match.group(1))\n    return addzero_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ipstr = ip.split('.')\n    sip = ''\n    for x in range(len(ipstr)):\n        sip += '0' if int(ipstr[x]) == 0 else str(int(ipstr[x]))\n    ip = sip\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '0':\n        return ip\n    else:\n        new_ip = ip\n        count = 1\n        for char in new_ip:\n            if char == '0':\n                count += 1\n                if count == 2:\n                    return new_ip\n            else:\n                continue\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_removed = ''\n    while len(ip) > 0:\n        char = ip[0]\n        if char == '0':\n            zero_removed += char\n            ip = ip[1:]\n        else:\n            break\n    return zero_removed\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    result=re.sub(r'^0+', '', ip)\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i = 0\n    while i < len(ip):\n        if ip[i]!= '0' and ip[i]!= '.' and ip[i]!='':\n            break\n        i += 1\n    return ip[:i]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    no_z = re.findall('\\d+',ip)\n    return ''.join(no_z[1:])\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == \"\":\n        return \"\"\n    ip = ip.strip()\n    if ip.count(\".\") == 3:\n        ip = \".\".join(ip.split(\".\")[:-1])\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    # create a regex pattern to see if it is a zero\n    zero_pattern = r'\\b([0-9])([0-9]{3})\\b'\n    \n    # iterate over the string and remove the leading zeroes\n    zero_removed = ''\n    for char in ip:\n        if char == '0':\n            continue\n        if re.match(zero_pattern, char):\n            continue\n        else:\n            zero_removed += char\n    \n    # add the remaining 0's to the end of the pattern\n    zero_removed += '0'\n    \n    # replace the leading zeros with '1'\n    return zero_removed[1:]\n    \ndef delete_white_spaces(string):\n    '''\n    Given a string, remove all instances of whitespaces.\n    '''\n    \n    return re.sub(' +',' ',string)\n    \ndef clear_IP(string):\n    '''\n    Given a string, remove all white spaces and leading zeroes.\n    '''\n    \n    return removezero_ip(string.strip())\n    \ndef delete_spaces(string):\n    '''\n    Given a string, remove all spaces.\n    '''\n    \n    return string.replace(\" \",\"\")\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd - even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = 0\n    for n in list1:\n        if n % 2 == 0:\n            even_odd += 1\n        else:\n            even_odd += 2\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    while even <= len(list1) and odd < len(list1):\n        if list1[odd] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    for i in range(len(list1)-1):\n        if list1[i] % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even - count_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1_even = list1[0::2]\n    list1_odd = list1[1::2]\n    return list1_even - list1_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list = []\n    for i in list1:\n        if i % 2 == 0:\n            new_list.append(i)\n        else:\n            new_list.append(i)\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = []\n    for i in range(len(list1) - 1):\n        if i % 2 == 0:\n            result.append(list1[i + 1] - list1[i])\n        else:\n            result.append(list1[i + 1] - list1[i])\n    return result\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return print(\"List must have at least 2 elements\")\n    if list1[0] % 2 == 0:\n        return print(\"Even\")\n    else:\n        return print(\"Odd\")\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #Diff\n    x=[]\n    for i in range(len(list1)-1):\n        x.append(list1[i+1]-list1[i])\n    return x\n    \ndef test_function(test_case):\n    input_list = test_case\n    output = diff_even_odd(input_list)\n    if sorted(output) == input_list:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)==0:\n        return (\"Empty List\")\n    elif len(list1)==1:\n        return (list1[0])\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    min_swaps = 0\n    n = len(str1)\n    str1_l = list(str1)\n    str1_r = list(str1)\n    str2_l = list(str2)\n    str2_r = list(str2)\n    str1_r.reverse()\n    str2_r.reverse()\n    \n    for i in range(len(str1_l)):\n        if str1_l[i]!= str2_l[i]:\n            min_swaps += 1\n    \n    for i in range(len(str1_r)):\n        if str1_r[i]!= str2_r[i]:\n            min_swaps += 1\n    \n    if min_swaps == n:\n        return min_swaps\n    else:\n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if str1[i] == str2[j]:\n                swaps += 1\n            else:\n                break\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    num_of_swaps = 0\n    swaps = 0\n    \n    if (str1[0] == str2[0]) and (str1[1]!= str2[1]):\n        num_of_swaps += 1\n    \n    for i in range(len(str1) - 1):\n        if str1[i] == str2[i]:\n            swaps += 1\n    \n    if swaps < num_of_swaps:\n        num_of_swaps = swaps\n    \n    return num_of_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = int(str1,2)\n    n2 = int(str2,2)\n    n = n1+n2\n    s1 = bin(n1)[2:]\n    s2 = bin(n2)[2:]\n    s = s1+s2\n    s = list(s)\n    s.sort()\n    k = 0\n    for i in range(0,len(s)) : \n        if s[i] == '1' :\n            k = k + 1\n    return k\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Write your code here\n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2) : \n        return 0\n    \n    # Count the number of min swaps needed for each character\n    count = 0\n    \n    # In each iteration of the while loop, try each pair of characters of str1\n    # and str2 and check if the swap is valid, if not, skip the iteration.\n    # If the swap is valid, check if the strings have the same characters\n    # then increment the count\n    while True : \n        if not str1 : \n            break\n        elif not str2 : \n            break\n        \n        if str1[0]!= str2[0] : \n            count += 1\n            str1 = str1[1:]\n            str2 = str2[1:]\n        else :\n            str1 = str1[1:]\n            str2 = str2[1:]\n            \n    # Check if there is at least one character swapping is required\n    if count == 0 : \n        return -1\n    \n    # Create a dictionary to hold the counts for each character\n    counts = dict()\n    # Loop through each character\n    for i in range(len(str1)) : \n        if str1[i] not in counts : \n            counts[str1[i]] = 1\n        else : \n            counts[str1[i]] += 1\n            \n        if str2[i] not in counts : \n            counts[str2[i]] = 1\n        else : \n            counts[str2[i]] += 1\n            \n    # Check if the current count is greater than the minimum count so far. \n    # If so, return the count. Else, return -1. \n    if counts[str1[0]] > counts[str2[0]] : \n        return count\n    else : \n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    k = len(str2)\n    \n    # count all solutions\n    ans = 0\n    for i in range(n) :\n        if (str1[i] == str2[i]) :\n            ans += 1\n            \n    return ans\n    \n    \n    \nif __name__ == \"__main__\" :\n    \n    str1 = '1111001101'\n    str2 = '10101'\n    \n    print(min_Swaps(str1,str2))\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code goes here\n    count = 0\n    for i in range(1,len(str1)+1):\n        for j in range(i,len(str1)+1):\n            if str1[i-1] == str1[j-1] : \n                count += 1\n            else :\n                break\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return len(str1) - len(str2) \n    \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return len(str1) - len(str2)\n    \ndef swap(str1,str2) : \n    '''\n    Write a python function to check if two binary strings are the same, and if so swap the two binary strings.\n    '''\n    return str1!= str2 \n    \ndef count_Swaps(str1,str2) : \n    '''\n    Write a python function to count number of swaps required to convert two binary strings.\n    '''\n    return len(str1) - len(str2)\n    \ndef binary_To_Decimal(str1) : \n    '''\n    Write a python function to convert a binary string to decimal number.\n    '''\n    return int(str1,2)\n    \ndef decimal_To_binary(number) : \n    '''\n    Write a python function to convert a decimal number to binary string.\n    '''\n    return bin(number)\n    \ndef DecimalToBinary(number) : \n    '''\n    Write a python function to convert a decimal number to binary string.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef bits_To_Decimal(number) : \n    '''\n    Write a python function to convert a binary string of binary bits to decimal number.\n    '''\n    return int(number,2)\n    \ndef binary_To_Decimal(number) : \n    '''\n    Write a python function to convert a binary string to decimal number.\n    '''\n    return int(number,2)\n    \ndef decimal_To_binary(number) : \n    '''\n    Write a python function to convert a decimal number to binary string.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef binary_To_Octal(number) : \n    '''\n    Write a python function to convert a binary string of binary bits to octal number.\n    '''\n    return oct(number).lstrip('0o')\n    \ndef octal_To_binary(number) : \n    '''\n    Write a python function to convert an octal number to binary string.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef binary_To_Octal_Length(number) : \n    '''\n    Write a python function to convert a binary number to octal number and get its length.\n    '''\n    return len(number)\n    \ndef binary_To_Hex(number) : \n    '''\n    Write a python function to convert a binary number to hex number.\n    '''\n    return hex(number).lstrip('0x')\n    \ndef hex_To_binary(number) : \n    '''\n    Write a python function to convert a hex number to binary number.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef octal_To_Hex_Length(number) : \n    '''\n    Write a python function to convert an octal number to hex number and get its length.\n    '''\n    return len(number)\n    \ndef Hex_To_Octal(number) : \n    '''\n    Write a python function to convert an hex number to octal number and get its length.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef Min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Octal_Length(min_Swaps(str1,str2))\n    \ndef Max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Octal_Length(max_Swaps(str1,str2))\n    \ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Hex_Length(min_Swaps(str1,str2))\n    \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Hex_Length(max_Swaps(str1,str2))\n    \ndef swap(str1,str2) : \n    '''\n    Write a python function to check if two binary strings are the same, and if so swap the two binary strings.\n    '''\n    return binary_To_Hex_Length(swap(str1,str2))\n    \ndef count_Swaps(str1,str2) : \n    '''\n    Write a python function to count number of swaps required to convert two binary strings.\n    '''\n    return binary_To_Hex_Length(count_Swaps(str1,str2))\n    \ndef binary_To_Octal_Length(number) : \n    '''\n    Write a python function to convert a binary number to octal number and get its length.\n    '''\n    return len(number)\n    \ndef octal_To_binary_Length(number) : \n    '''\n    Write a python function to convert an octal number to binary number and get its length.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef binary_To_Octal_Length(number) : \n    '''\n    Write a python function to convert a binary number to octal number and get its length.\n    '''\n    return len(number)\n    \ndef hex_To_binary_Length(number) : \n    '''\n    Write a python function to convert a hex number to binary number and get its length.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef binary_To_Octal_Length(number) : \n    '''\n    Write a python function to convert a binary number to octal number and get its length.\n    '''\n    return len(number)\n    \ndef min_Octal_Length(number) : \n    '''\n    Write a python function to count minimum number of octal length required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Octal_Length(min_Octal(number))\n    \ndef max_Octal_Length(number) : \n    '''\n    Write a python function to count maximum number of octal length required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Octal_Length(max_Octal(number))\n    \ndef min_Hex_Length(number) : \n    '''\n    Write a python function to count minimum number of hex length required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Octal_Length(min_Hex(number))\n    \ndef max_Hex_Length(number) : \n    '''\n    Write a python function to count maximum number of hex length required to convert two binary strings represented as a string to another.\n    '''\n    return binary_To_Octal_Length(max_Hex(number))\n    \ndef min_Hex(number) : \n    '''\n    Write a python function to count minimum number of hex length required to convert two binary strings represented as a string to another.\n    '''\n    return number.to_bytes(length = 2, byteorder = 'big', signed = False).hex()\n    \ndef max_Hex(number) : \n    '''\n    Write a python function t"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_load(tuple_list):\n    '''\n    Write a function to load a tuple into the given list.\n    '''\n    return tuple_list\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple_list.sort()\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple_list.reverse()\ndef tuple_list_to_list(tuple_list):\n    '''\n    Write a function to convert a list of tuples into a list of tuples.\n    '''\n    return tuple_list\ndef tuple_list_to_tuple(tuple_list):\n    '''\n    Write a function to convert a list of tuples into a tuple of tuples.\n    '''\n    return tuple(tuple_list)\ndef tuple_list_to_tuple_list(tuple_list):\n    '''\n    Write a function to convert a list of tuples into a tuple of tuples.\n    '''\n    return tuple(tuple_list)\ndef tuple_to_list(tuple_list):\n    '''\n    Write a function to convert a tuple of tuples into a list of tuples.\n    '''\n    return tuple_list\ndef list_to_tuple(list_list):\n    '''\n    Write a function to convert a list of tuples into a tuple of tuples.\n    '''\n    return tuple(list_list)\ndef list_to_tuple_list(list_list):\n    '''\n    Write a function to convert a list of tuples into a tuple of tuples.\n    '''\n    return tuple(list_list)\ndef array_to_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a list of tuples.\n    '''\n    return array_list\ndef list_to_array(list_list):\n    '''\n    Write a function to convert a list of tuples into an array of tuples.\n    '''\n    return array_list\ndef list_to_tuple_list(list_list):\n    '''\n    Write a function to convert a list of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_list(list_list)\ndef list_to_tuple_list(list_list):\n    '''\n    Write a function to convert a list of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_tuple_list(list_list)\ndef array_to_tuple_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    '''\n    return array_list\ndef array_to_tuple(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_tuple(array_list)\ndef array_to_tuple_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    '''\n    return array_list_to_tuple_list(array_list)\ndef tuple_to_string(tuple_list):\n    '''\n    Write a function to convert a tuple of tuples into a string.\n    '''\n    return tuple_list_to_string(tuple_list)\ndef tuple_list_to_string(tuple_list):\n    '''\n    Write a function to convert a list of tuples into a string.\n    '''\n    return tuple_list_to_string(tuple_list)\ndef tuple_list_to_string(tuple_list):\n    '''\n    Write a function to convert a list of tuples into a string.\n    '''\n    return tuple_list_to_string(tuple_list)\ndef tuple_list_to_string_list(tuple_list):\n    '''\n    Write a function to convert a list of tuples into a string.\n    '''\n    return tuple_list_to_string_list(tuple_list)\ndef string_to_tuple(string_list):\n    '''\n    Write a function to convert a string of tuples into a tuple of tuples.\n    '''\n    return string_list_to_tuple(string_list)\ndef string_list_to_tuple(string_list):\n    '''\n    Write a function to convert a string of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_tuple(string_list)\ndef string_list_to_tuple_list(string_list):\n    '''\n    Write a function to convert a string of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_tuple_list(string_list)\ndef string_list_to_tuple_list(string_list):\n    '''\n    Write a function to convert a string of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_array(string_list)\ndef string_to_array(string_list):\n    '''\n    Write a function to convert a string of tuples into an array of tuples.\n    '''\n    return string_list_to_array(string_list)\ndef string_list_to_array(string_list):\n    '''\n    Write a function to convert a string of tuples into an array of tuples.\n    '''\n    return array_list_to_tuple(string_list)\ndef string_list_to_array(string_list):\n    '''\n    Write a function to convert a string of tuples into an array of tuples.\n    '''\n    return array_list_to_array(string_list)\ndef string_list_to_tuple_list(string_list):\n    '''\n    Write a function to convert a string of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_array(string_list)\ndef string_list_to_tuple(string_list):\n    '''\n    Write a function to convert a string of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_tuple(string_list)\ndef string_list_to_tuple_list(string_list):\n    '''\n    Write a function to convert a string of tuples into a tuple of tuples.\n    '''\n    return tuple_list_to_array_list(string_list)\ndef array_to_string_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a string of tuples.\n    '''\n    return array_list_to_string_list(array_list)\ndef array_list_to_string_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a string of tuples.\n    '''\n    return array_list_to_string_list(array_list)\ndef array_list_to_tuple(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    '''\n    return array_list_to_tuple(array_list)\ndef array_list_to_tuple_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    '''\n    return array_list_to_tuple_list(array_list)\ndef array_list_to_tuple_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    '''\n    return array_list_to_tuple(array_list)\ndef array_list_to_tuple_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    '''\n    return array_list_to_tuple_list(array_list)\ndef array_list_to_tuple_list_list(array_list):\n    '''\n    Write a function to convert an array of tuples into a tuple of tuples.\n    ''"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        size = size + sys.getsizeof(elem)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    i = 0\n    while i < len(tuple_list):\n        j = 0\n        while j < len(tuple_list[i]):\n            print(f'\\t{tuple_list[i][j]}')\n            j += 1\n        i += 1\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    size = 0\n    for i in range(len(tuple_list)):\n        size += tuple_list[i].size\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    n = 0\n    for each_tuple in tuple_list:\n        n += len(each_tuple)\n    return n\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    n=0\n    for i in tuple_list:\n        n += sys.getsizeof(i)\n    return n\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for i in range(len(tuple_list)):\n        list_size = sys.getsizeof(tuple_list[i])\n        if list_size > 1024*1024:\n            return tuple_list[i]\n    return list_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for i in tuple_list:\n        total = total + len(i)\n    return total \n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size = size + len(element)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    assert (len(arr1) > 0) and (len(arr2) > 0) and (k > 0) and (k <= len(arr1) and len(arr2) <= len(arr1))\n    # Assign the first sorted array to a variable\n    arr1_sorted = sorted(arr1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def findKthElement(arr1, arr2, k):\n        if (arr1 is None):\n            return -1\n        if (arr2 is None):\n            return -1\n        \n        if (arr1 == arr2):\n            return arr1\n        \n        if (k >= len(arr1)):\n            return findKthElement(arr2, None, k)\n        \n        if (k < len(arr1)):\n            return findKthElement(arr1, arr2, k)\n    \n    return findKthElement(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def is_valid(arr):\n        # Checking if an element is valid\n        # if any of the list is smaller or equal to k\n        # or greater than arr[0]\n        if arr == arr1 or arr == arr2:\n            return False\n        # Iterating through the array and comparing the list elements\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                return False\n        return True\n        # if all the elements are in the list\n        # or not return that element\n        return arr[len(arr) - k] == arr1[len(arr) - k] or arr[len(arr) - k] == arr2[len(arr) - k]\n    def partition(arr, start, end):\n        pivot = arr[end]\n        i = start - 1\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[end] = arr[end], arr[i + 1]\n        return i + 1\n    def quick_sort(arr, start, end):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[end]\n        # Finding the pivot element\n        # Find the kth element in the sorted array\n        # find the kth element from the sorted array\n        left = start\n        right = end - 1\n        while left < right:\n            # Set the smaller element as the new pivot\n            # and compare it with the smallest element of the array\n            while arr[left] < pivot and left < right:\n                left += 1\n            # Set the new pivot element as the new\n            # smallest element of the array\n            while arr[right] > pivot and right > left:\n                right -= 1\n            # If the new pivot element is greater than the\n            # smallest element of the array\n            if arr[left] > pivot:\n                arr[right], arr[left] = arr[left], arr[right]\n            # Swap the new pivot element with the smallest element\n            # of the array\n            elif arr[right] < pivot:\n                arr[left], arr[right] = arr[right], arr[left]\n        # Recursively sort the array\n        # from left to right, to right to left\n        # Iterate through the array from the left to right\n        return quick_sort(arr, start, right - 1) + [pivot] + quick_sort(arr, right + 1, end)\n    arr1 = quick_sort(arr1, 0, len(arr1) - 1)\n    arr2 = quick_sort(arr2, 0, len(arr2) - 1)\n    if is_valid(arr1 + arr2):\n        return arr1 + arr2\n    # if no valid array is found, return the original array\n    return arr1"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    kth_index = arr1.index(arr2[k-1])\n    return arr1[kth_index]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the kth element using binary search.\n    def binary_search(arr1, arr2, index):\n        # If the index is between the first and last elements, return the element.\n        if index <= 0 or index >= len(arr1) or index >= len(arr2):\n            return -1\n        # If the index is between the first and last elements,\n        # swap the two elements.\n        elif index <= (len(arr1) - 1):\n            temp = arr1[index]\n            arr1[index] = arr2[index]\n            arr2[index] = temp\n            return binary_search(arr1, arr2, index - 1)\n        # If the index is between the first and last elements,\n        # return the element.\n        else:\n            return arr1[index]\n    # Return the kth element from the array.\n    return binary_search(arr1, arr2, k - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l = 0\n    r = len(arr1) - 1\n    \n    while l <= r:\n        \n        mid = l + (r - l) // 2\n        if arr1[mid] <= arr2[k-1]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return arr1[l]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k <= 0:\n        return -1\n    if k > len(arr1) or k > len(arr2):\n        return -1\n    \n    left, right = 0, len(arr1) - 1\n    while left <= right:\n        mid = left + ((right - left) >> 1)\n        if arr1[mid] == arr2[k - 1]:\n            return arr1[mid]\n        elif arr1[mid] < arr2[k - 1]:\n            left = mid + 1\n        elif arr1[mid] > arr2[k - 1]:\n            right = mid - 1\n    \n    return -"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    # find kth element\n    def find_kth_element(arr1, arr2, k):\n        if (k < 0):\n            return None\n        for i in range(l1):\n            for j in range(l2):\n                if (arr1[i] < arr2[j]):\n                    return arr1[i]\n        return None\n    return find_kth_element(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Create two pointers one at start and one at end of the array\n    # Loop until the element at the kth index\n    # If it is the end of the array\n    # Remove it from the array\n    # Return the element\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    from operator import add, mod\n    from itertools import permutations\n    from collections import defaultdict\n    \n    def is_armstrong(n):\n        n = int(n)\n        temp = sum(pow(int(d), len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow(d, len(pow"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    divider = len(str(number))\n    count = 0\n    for i in str(number):\n        count += 1\n        if i == i.lstrip('0'):\n            divider = divider - 1\n            if divider == 0:\n                break\n    \n    if count == divider:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    isArmstrong = 0\n    for i in str(number):\n        digit = int(i)\n        if digit >= 1:\n            digit = digit ** (1/len(str(digit)))\n            if digit == number:\n                isArmstrong += 1\n                break\n    if isArmstrong == 1:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    num = 0\n    while temp > 0:\n        rem = temp % 10\n        num = num + rem**3\n        temp = temp // 10\n    \n    if num == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = []\n    for i in range(len(str(number))):\n        number_list.append(int(str(number)[i]))\n    for i in range(len(number_list)):\n        c = 0\n        for j in range(len(str(number_list[i]))):\n            c += int(str(number_list[i])[j])**len(str(number_list[i]))\n        if number_list[i] == c:\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    c = 0\n    for x in str(number):\n        c += int(x)\n    return c == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    current = number\n    # For loop to iterate the number\n    while current > 0:\n        # If current has a digit,\n        # add the digit to a sum\n        # and subtract the digit from itself\n        # (there is only one digit left, hence 1)\n        # if current is divisible by 10,\n        # subtract 10 from current\n        # (there is only one digit left, hence 1)\n        # if current is divisible by 100,\n        # divide current by 100 and add it to current\n        # (there are two digits left, hence 1)\n        # if current is divisible by 1000,\n        # divide current by 1000 and add it to current\n        # (there are three digits left, hence 2)\n        if current % 10!= 0:\n            current = current // 10\n        else:\n            current = current // 10\n            current = current + current % 10\n    # If the given number is armstrong,\n    # return true\n    return current == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    total = 0\n    num_len = len(num)\n    i = 0\n    while i < num_len:\n        num_sum = 0\n        while i < num_len:\n            num_sum = num_sum + int(num[i])\n            i += 1\n        if num_sum == number:\n            return \"Armstrong\"\n        else:\n            return \"Not Armstrong\"\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))!= 10:\n        return True\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n    if sum == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = []\n    i = 0\n    while i < len(number):\n        digit = int(number[i])\n        i += 1\n        count = 0\n        while digit > 0:\n            digit = digit // 10\n            count += 1\n        number_list.append(count)\n    \n    if len(number_list) == len(set(number_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for number in range(1, n):\n        sum += number\n    average = sum/n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # TODO: Write your code here.\n    sum = 0\n    for i in range(number):\n        sum += i\n    avg = sum/number\n    return avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_number = 0\n    for i in range(number):\n        sum_number += i\n    average = sum_number / number\n    return sum_number, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        raise ValueError('Invalid number')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n=0\n    while n<number:\n        n=n+1\n        print(n)\n    print(\"sum and average of first {} natural numbers is {}\".format(number,n/number))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for num in range(1, number + 1):\n        total += num\n    return total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError(\"please input a number\")\n    if number <= 0:\n        raise ValueError(\"please input a number\")\n    result = 0\n    for i in range(1,number + 1):\n        result += i\n    result /= number\n    return result\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for n in range(1, number + 1):\n        sum += n\n        avg += n\n    return sum / number, avg / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(0, number):\n        total = total + number\n    return total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    return total/number\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return \"Even\"\n    else : \n        return \"Odd\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(f\"{n} is even.\")\n    else : \n        print(f\"{n} is odd.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print (\"\\n\\t\\t\\t\\tEven Number\")\n        return \n    else : \n        print(\"\\n\\t\\t\\t\\tOdd Number\")\n        return \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(f'{n} is even')\n    else : \n        print(f'{n} is not even')\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result=''\n    for i in str1:\n        if i not in result:\n            result=result+i\n    return result\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1.find(\"\")!= -1:\n        return -1\n    else:\n        return str1.find(\"\")\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    list_rep = []\n    for i in range(len(str1)):\n        if str1[i] not in list_rep:\n            list_rep.append(str1[i])\n    print(list_rep)\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Passes through a list of characters and checks for repeated characters\n    # Returns first repeated character\n    # Returns None if not found\n    # Returns None if not found\n    # https://www.geeksforgeeks.org/python-find-first-common-character-in-given-string/\n    for i in range(len(str1)):\n        if str1[i] in str1[i:].count(str1[i]):\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    if not isinstance(str1, str) or len(str1) == 0:\n        raise TypeError(\"This function should return a string, not {}\".format(type(str1)))\n    if len(str1) == 1 or str1[0]!= str1[0]:\n        raise ValueError(\"The first character must be a single character.\")\n    temp_str = str1\n    for i in range(1, len(str1)):\n        if temp_str[i] == temp_str[i-1] and str1[i]!= str1[i-1]:\n            return str1[i]\n    return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_char=0\n    last_char=len(str1)-1\n    while(first_char<=last_char):\n        mid_point=int((first_char+last_char)/2)\n        if str1[mid_point]==str1[mid_point-1]:\n            first_char=mid_point+1\n        else:\n            last_char=mid_point-1\n    return first_char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    temp = str1[0]\n    count = 1\n    while count < len(str1):\n        if str1[count] == temp:\n            count += 1\n        else:\n            break\n    if count < len(str1) and str1[count] == temp:\n        return count\n    else:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    counter = {}\n    for char in str1:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    for char in counter:\n        if counter[char] == 1:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # an_array = [i for i in str1 if i!= 0]\n    # for i in an_array:\n    #     if an_array.count(i) > 1:\n    #         return i\n    \n    count = 0\n    new_str = ''\n    for i in str1:\n        if i!= 0:\n            new_str = i + new_str\n        else:\n            count += 1\n    return new_str[0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(0,n):\n        if(i<n-1):\n            if(n%i==0):\n                result.append(n//i)\n    return result\n    \ndef main():\n    print(get_ludic(100))\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            if i <= 5:\n                ludic.append(i)\n            else:\n                ludic.append(i)\n        elif i%2 == 1:\n            if i <= 5:\n                ludic.append(i)\n            else:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    count = 0\n    ludic = []\n    while True:\n        count += 1\n        ludic.append(count)\n        if count > n:\n            break\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set(range(1, n+1))\n    for i in range(2, n+1):\n        ludic.add(i)\n    lud = sorted(ludic)\n    return lud\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i < 100:\n            if i >= 1 and i <= 7:\n                if i % 2 == 0:\n                    ludic.append(i)\n            elif i % 3 == 0:\n                ludic.append(i)\n            elif i % 5 == 0:\n                ludic.append(i)\n            else:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def ludic(n,l):\n        if n <= l:\n            return\n        if l % n == 0:\n            return\n        if n % l == 0:\n            return\n        return ludic(n // l, l)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if i == 1 or i == n:\n            ludic.append(i)\n        elif i % 2 == 0:\n            ludic.append(i*2)\n        else:\n            ludic.append(i*3)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 2:\n        return []\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i < 10:\n            ludic.append(i)\n        else:\n            if i%10 == 0:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = []\n    for i in range(1, n + 1):\n        if i < 10:\n            luc.append(i)\n        elif i <= 9:\n            luc.append(i ** 2)\n        else:\n            luc.append(i ** 3)\n    return luc\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    list1 = []\n    for i in s.split():\n        list1.append(i.split())\n    \n    list2 = []\n    for i in list1:\n        list2.append(i[::-1])\n    \n    return \" \".join(list2)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    str_list = s.split(' ')\n    l = len(str_list)\n    ans = ''\n    for i in range(l):\n        ans += str_list[i][::-1]\n    return ans\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reversed_s = ''\n    if len(s) == 0:\n        return ''\n    for letter in s:\n        reversed_s += letter\n    return reversed_s\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    rev = []\n    split = s.split(\" \")\n    for word in split:\n        rev.append(word[::-1])\n    return \" \".join(rev)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return(s.split())\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split by space\n    s = s.split()\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n        if len(s[i]) == 1:\n            s[i] = s[i][0]\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return \" \".join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.strip().split()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # First string is empty\n    if not s:\n        return \"\"\n    \n    # Finding length of string\n    l = len(s)\n    \n    # Creating a reverse string\n    r = s[::-1]\n    \n    # Creating a counter\n    c = 0\n    \n    # Iterating through string\n    for i in range(l):\n        \n        # Checking if the current character is uppercase\n        if s[i].isupper():\n            \n            # If the current character is uppercase and it's not a space\n            # then it is not uppercase\n            if r[i]!= \" \":\n                \n                # Incrementing counter\n                c += 1\n                \n                # Check if the current character is not a space\n                if r[i]!= \" \" and r[i]!= \" \" and c >= 2:\n                    \n                    # Check if current character is uppercase\n                    if s[i + 1].isupper():\n                        \n                        # It is an uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower()\n                        c = 0\n                        \n                    # Check if current character is not uppercase\n                    elif r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].upper() + s[i + 1].lower()\n                        c = 0\n                        \n                    # Check if current character is not uppercase\n                    else:\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower() + s[i + 1].upper()\n                        c = 0\n                    \n                    # Checking if current character is uppercase and it's not a space\n                    # then it is not uppercase\n                    if r[i].isupper():\n                        \n                        # It is an uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].upper()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase\n                    elif r[i].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase\n                    else:\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower() + s[i + 1].lower()\n                        c = 0\n                        \n                    # Check if current character is uppercase and it's not a space\n                    # then it is not uppercase\n                    if r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is an uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].upper() + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower() + s[i + 1].upper()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower() + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower() + s[i + 1].upper()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower() + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i].lower() + s[i + 1].lower()\n                        c = 0\n                        \n                    # Check if current character is not uppercase and it's not a space\n                    else:\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i]\n                        c = 0\n                        \n                    # Checking if current character is not uppercase and it's not a space\n                    # then it is not uppercase\n                    if r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i] + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase and it's not a space\n                    # then it is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i] + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase and it's not a space\n                    # then it is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i] + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase and it's not a space\n                    # then it is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i] + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase and it's not a space\n                    # then it is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i] + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase and it's not a space\n                    # then it is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercase\n                        r = r[:-1] + s[i] + s[i + 1].lower()\n                        c = 0\n                        \n                    # Checking if current character is not uppercase and it's not a space\n                    # then it is not uppercase\n                    elif r[i].isupper() and r[i + 1].isupper():\n                        \n                        # It is not uppercase and it's not a space\n                        # then it is not uppercas"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_word(s, k):\n        n=0\n        while k:\n            n+=len(s[n])\n            if n>len(s):\n                s.remove(s[n-len(s)])\n                k-=1\n            else:\n                n-=1\n        return \"\".join(s)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num < 2 or num > 9999:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num == 4 or num == 5:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i*i <= num:\n        if num % i == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # Write your logic here\n    if num < 2:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5,num,2):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    i = 3\n    while i*i <= num:\n        if num%i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # 1. check if the number is prime or not\n    # If it's not, return False.\n    if num == 1:\n        return False\n    # If it's prime, return True.\n    if num == 2:\n        return True\n    # Loop through all the squares.\n    for i in range(2, int(math.sqrt(num)) + 1):\n        # If the number is divisible by any number within the loop,\n        # it is not a prime number.\n        if num % i == 0:\n            return False\n    # Return True.\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num == 1 or num == 5 or num == 7:\n        return False\n    elif num > 3 and num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5) + 3, 3):\n            if num % i == 0:\n                return False\n        return True\n    \n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree*(math.pi/180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree*math.pi/180\n    return degree\ndef convert_radians_to_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree*math.pi/180\n    return degree\ndef print_hi(name):\n    '''\n    Write a function that takes in a parameter and prints something useful.\n    '''\n    print(f'Hi, {name}')\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree_radian = degree * (math.pi / 180)\n    return degree_radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180.0\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * math.pi / 180.0\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (180/math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * math.pi / 180\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_second(second):\n    '''\n    Write a function to convert seconds to radians.\n    '''\n    return second * math.pi / 300\ndef trigonometry(a,b,c):\n    '''\n    Write a function to calculate trigonometry (area of the circle, area of the square, area of the rectangle).\n    '''\n    return round(a * c, 2) + round(b * c, 2) + round(c * b, 2)\ndef curve_area(x,y,z):\n    '''\n    Write a function to calculate the area of a surface given its three vertices (x,y,z).\n    '''\n    return round((x ** 2 + y ** 2 + z ** 2) ** (1/2), 3)\ndef curve_surface(x,y,z):\n    '''\n    Write a function to calculate the surface of a curve given its three vertices (x,y,z).\n    '''\n    return round((x * y) ** (1/2), 3)\ndef curve_circle_area(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2), 3)\ndef curve_circle_area_square(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2), 3)\ndef curve_circle_area_rectangle(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) / 2, 3)\ndef curve_circle_area_circle(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) * math.pi, 3)\ndef curve_area_square(x,y,z):\n    '''\n    Write a function to calculate the area of a square given its three vertices (x,y,z).\n    '''\n    return round(x * y, 3)\ndef curve_area_rectangle(x,y,z):\n    '''\n    Write a function to calculate the area of a square given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2), 3)\ndef curve_area_circle(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) / math.sqrt(2), 3)\ndef circle_area(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) ** 2, 3)\ndef circle_area_square(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) ** 2 * math.pi, 3)\ndef circle_area_rectangle(x,y,z):\n    '''\n    Write a function to calculate the area of a circle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) ** 2 * math.pi * 2, 3)\ndef rectangle_area(x,y,z):\n    '''\n    Write a function to calculate the area of a rectangle given its three vertices (x,y,z).\n    '''\n    return round(x * y, 3)\ndef rectangle_area_square(x,y,z):\n    '''\n    Write a function to calculate the area of a rectangle given its three vertices (x,y,z).\n    '''\n    return round(x * y * z, 3)\ndef rectangle_area_rectangle(x,y,z):\n    '''\n    Write a function to calculate the area of a rectangle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) ** 2, 3)\ndef rectangle_area_circle(x,y,z):\n    '''\n    Write a function to calculate the area of a rectangle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) ** 2 * math.pi, 3)\ndef rectangle_area_circle_square(x,y,z):\n    '''\n    Write a function to calculate the area of a rectangle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) ** 2 * math.pi * 2, 3)\ndef rectangle_area_circle_square(x,y,z):\n    '''\n    Write a function to calculate the area of a rectangle given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2) ** 2 * math.pi * 2 * math.sqrt(2), 3)\ndef triangle_area(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices (a,b,c).\n    '''\n    return round(a * b * c, 3)\ndef triangle_area_square(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices (a,b,c).\n    '''\n    return round(a * b * c / 2, 3)\ndef triangle_area_rectangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices (a,b,c).\n    '''\n    return round(a * b * c / math.sqrt(3), 3)\ndef triangle_area_circle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices (a,b,c).\n    '''\n    return round(math.sqrt(a ** 2 + b ** 2 + c ** 2) / 2 * math.pi, 3)\ndef triangle_area_circle_square(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices (a,b,c).\n    '''\n    return round(math.sqrt(a ** 2 + b ** 2 + c ** 2) ** 2 / 2 * math.pi * 2, 3)\ndef triangle_area_circle_square(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices (a,b,c).\n    '''\n    return round(math.sqrt(a ** 2 + b ** 2 + c ** 2) ** 2 * math.pi * 2, 3)\ndef triangle_area_circle_square(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices (a,b,c).\n    '''\n    return round(math.sqrt(a ** 2 + b ** 2 + c ** 2) ** 2 * math.pi * 2 * math.sqrt(2), 3)\ndef square_area(x,y,z):\n    '''\n    Write a function to calculate the area of a square given its three vertices (x,y,z).\n    '''\n    return round(math.sqrt(x ** 2 + y ** 2 + z ** 2), 3)\ndef square_area_square(x,y,z):\n    '''\n    Write "
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_re = re.compile(pattern)\n    match_substring = pattern_re.search(text)\n    if match_substring:\n        start_index = match_substring.start()\n        end_index = match_substring.end()\n        return (match_substring, start_index, end_index)\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    \n    match = pattern.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # locate a substring within a string\n    pattern_substring = pattern.findall(text)\n    start_index = text.find(pattern)\n    end_index = len(pattern_substring)\n    return start_index, end_index, pattern_substring\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.findall(pattern, text)\n    return match[0]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.replace('\\n', '')\n    if re.search(pattern, text):\n        start = 0\n        end = len(text)\n        while end > 0:\n            if re.search(pattern, text[start:end], re.IGNORECASE):\n                start = end\n                end = end - start\n                break\n            end -= 1\n        if end == 0:\n            end = len(text)\n        return start, end, end\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    return m.start(), m.end(), m.start(), m.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # TODO: Fill this in.\n    # Create a regex for finding a pattern in a string.\n    regex = re.compile(pattern)\n    # Create a loop to go through all the characters of the string.\n    for i in range(0, len(text)):\n        # Check if the char is a valid match.\n        if regex.search(text[i:i+len(pattern)]) is not None:\n            # Return the match, the start and end index.\n            return (text[i:i+len(pattern)], i, i+len(pattern))\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matched = re.search(pattern, text)\n    \n    if matched is not None:\n        start = matched.start()\n        end = matched.end()\n        return text[start:end]\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text, flags=re.IGNORECASE)\n    if match is None:\n        return None, None, None\n    start = match.start()\n    end = match.end()\n    return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if type(text)!= type(''):\n        text = text.decode('utf-8')\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = n - 1\n    \n    # Adding/Subtracting the two entries of the Fibonacci series.\n    while i > 1:\n        i -= 1\n        if i % 2 == 0:\n            a = i + 1\n        else:\n            b = i - 1\n        \n        if a > b:\n            # Adding/Subtracting the first two elements of the Fibonacci series.\n            a = i + 1\n            b = i - 1\n        \n        else:\n            a, b = b, a\n        \n        print(a, b)\n    \n    # Printing the fibonacci series.\n    print(n)\n    "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    A = [1,2,3,5,10,20,50,100]\n    B = [1,1,2,3,5,10,20,50,100,500,1000,5000,10000]\n    c = 0\n    if n < 0:\n        return 0\n    if n >= len(A):\n        print(\"Invalid number\")\n        return 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if n == A[i] - B[j]:\n                c = i\n    return c\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = int(input(\"Enter the number: \"))\n    d = []\n    for i in range(1, num+1):\n        d.append(i)\n    print(d)\n    print(len(d))\n    print(d[len(d)-1])\n    return d[len(d)-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n >= 0:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 5\n        elif n == 2:\n            return 7\n        elif n == 3:\n            return 11\n        elif n == 4:\n            return 13\n        elif n == 5:\n            return 17\n        elif n == 6:\n            return 19\n        elif n == 7:\n            return 23\n        elif n == 8:\n            return 29\n        elif n == 9:\n            return 31\n        elif n == 10:\n            return 37\n        elif n == 11:\n            return 41\n        elif n == 12:\n            return 47\n        elif n == 13:\n            return 51\n        elif n == 14:\n            return 53\n        elif n == 15:\n            return 59\n        elif n == 16:\n            return 61\n        elif n == 17:\n            return 67\n        elif n == 18:\n            return 71\n        elif n == 19:\n            return 73\n        elif n == 20:\n            return 79\n        elif n == 21:\n            return 81\n        elif n == 22:\n            return 83\n        elif n == 23:\n            return 89\n        elif n == 24:\n            return 91\n    else:\n        raise ValueError('n must be >= 0')\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    fib = [1,1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1]+fib[i-2])\n    print(fib[n])\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here.\n    x = []\n    for i in range(1,n+1):\n        x.append(i)\n    return x[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # your code goes here\n    return n + 1\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    while(i <= n):\n        if (n % i) == 0:\n            return n // i\n        i += 1\n    return \"NOT FOUND\"\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    L_new = []\n    for i in range(L[0]):\n        L_new.append(list1[i])\n    return L_new\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    else:\n        return list1[:L[-1]] + remove_kth_element(list1, L[1:])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    if len(L) == 1:\n        return L\n    else:\n        return remove_kth_element(L[1:], L[:len(L) - 1])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #TODO: Write the code for this function\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    elif L[0] == L[-1]:\n        return remove_kth_element(list1, L[1:-1])\n    elif len(list1) == 1:\n        return remove_kth_element(list1, L[1:])\n    else:\n        return [list1[0]] + remove_kth_element(list1[1:], L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(list1)\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp = list1\n    for i in range(L):\n        temp.remove(list1[i])\n    return temp\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i <= L:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # write your code here\n    max = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] > max:\n            max = test_list[i][0]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth = 0\n    for row in test_list:\n        max_of_nth = max(row[N-1], max_of_nth)\n    return max_of_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[:,N-1]"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) < 1:\n        raise Exception(\"Empty matrix!\")\n    if N == 0:\n        return max(test_list[0])\n    if N < 0:\n        raise Exception(\"Negative value!\")\n    if N >= len(test_list):\n        return max(test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_=0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if test_list[i][j]>max_:\n                max_=test_list[i][j]\n    return max_\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_index = 0\n    for i in range(len(test_list)):\n        if i > N-1:\n            break\n        else:\n            if test_list[i][N-1] > test_list[i][N]:\n                max_index = i\n    return max_index\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[N]"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    max_row = test_list[0]\n    for i in range(N):\n        if len(max_row) > len(test_list[i]):\n            max_row = test_list[i]\n    return max_row[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = test_list[0][N-1]\n    for i in range(1, N):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    def max_of_nth(nth_column):\n        return max(test_list[nth_column-1][0:nth_column])\n    \n    return max_of_nth(N)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[element[0], element[1]] for element in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge(lst1, lst2):\n        return lst1 + lst2\n    return merge(lst1, lst2)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[0][0],lst[1][1]]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0]] + [item for item in lst[1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    out = []\n    for i in lst:\n        out.append([i[0], i[1]])\n    return out\n    # out = []\n    # for i in lst:\n    #     out.append([i[0][0], i[1][1]])\n    # return out\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    result.extend([lst[i][0] for i in range(len(lst))])\n    result.extend([lst[i][1] for i in range(len(lst))])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    if len(lst) < 2:\n        return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst is None:\n        return None\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return merge([lst[0], lst[1]])\n    \n    # e.g. 2 sublists\n    result = []\n    # dp table for first\n    for i in range(len(lst) - 1):\n        # \n        lst1 = lst[i]\n        lst2 = lst[i + 1]\n        # find indices of first and second elements\n        i1 = 0\n        i2 = 0\n        # put the first element of each sublist in new sublist\n        for j in range(len(lst1)):\n            result.append(lst1[i1])\n            result.append(lst2[i2])\n            i1 += 1\n            i2 += 1\n    return resul"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # pass\n    return [lst[0]] + [lst[i] for i in range(len(lst))]\n    # return [[lst[0][i], lst[i+1]] for i in range(len(lst))]\n    # return [ [lst[i][0], lst[i][1]] for i in range(len(lst)) ]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    \n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n    \n    \n    \ndef custom_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_list = []\n    for i in test_list:\n        cum_list.append(sum(i))\n    return cum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    for x in test_list:\n        summ += x\n    return summ\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative = 0\n    for i in range(len(test_list)):\n        cumulative += test_list[i]\n    return cumulative\n    \ntest_list = (20, 30, 40, 50, 60, 70, 80, 90, 100)\nprint(cummulative_sum(test_list)"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(sum(test_list[i]))\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(sum(test_list[i]))\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for elem in test_list:\n        sum += elem\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #print(test_list)\n    cum_sum = 0\n    for x in test_list:\n        cum_sum += x\n    return cum_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    values = []\n    for i in range(len(nums)):\n        value = 0\n        for j in range(len(nums[i])):\n            value += nums[i][j]\n        values.append(value/len(nums[i]))\n        \n    return values\n    \ndef create_string(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns a string.\n    '''\n    \n    values = []\n    for i in range(len(nums)):\n        value = ''\n        for j in range(len(nums[i])):\n            value += str(nums[i][j])\n        values.append(value)\n        \n    return '-'.join(values)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Calculate the average and return it as a list\n    return [sum(x) / len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = [0] * len(nums)\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            avg[i] += nums[i][j]\n    for i in range(len(avg)):\n        avg[i] = int(avg[i] / len(nums[i]))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(sum(nums[i]))\n    return result\n    "
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    sum = 0\n    for n in nums:\n        sum += n\n        total.append(sum/len(n))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    summ = 0\n    avg_list = []\n    for count, tup in enumerate(nums):\n        summ += tup[1]\n        avg_list.append(summ/count)\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Write your average function here\n    return (sum(list(map(lambda x: x[0] + x[1], nums))) / len(nums))\n    \ndef complex_numbers(nums):\n    '''\n    Use a lambda function that takes a list of complex numbers and returns the average value for each complex number.\n    '''\n    # TODO: Write your complex_numbers function here\n    return (sum(map(lambda x: complex(x[0],x[1]), nums)) / len(nums))\n    \ndef numbers_above_average(nums):\n    '''\n    Use a list comprehension to return a list of the numbers in the nums list that are above average.\n    '''\n    # TODO: Write your numbers_above_average function here\n    return [x for x in nums if average(nums) >= complex_numbers(nums)]\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_sum = 0\n    for n in nums:\n        tuple_sum = tuple_sum + n\n    return tuple_sum / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Write your code here.\n    return [round(sum(n) / len(n), 2) for n in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: (sum(x)/len(x)), nums))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # if the length is not equal to the length of the tuple\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Error: tuples must be of the same length')\n    # make the sum of each tuple\n    total = 0\n    for i in range(len(test_tup1)):\n        total += test_tup1[i]\n    # make the modulo of the sum of each tuple\n    modulo = total % test_tup2[i]\n    return (modulo)\n    # if the modulo is not zero\n    # print the tuple and the modulo\n    # return tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    t1 = test_tup1[0]\n    t2 = test_tup1[1]\n    t3 = test_tup1[2]\n    t4 = test_tup1[3]\n    t5 = test_tup1[4]\n    t6 = test_tup1[5]\n    t7 = test_tup1[6]\n    t8 = test_tup1[7]\n    t9 = test_tup1[8]\n    t10 = test_tup1[9]\n    t11 = test_tup1[10]\n    t12 = test_tup1[11]\n    t13 = test_tup1[12]\n    t14 = test_tup1[13]\n    t15 = test_tup1[14]\n    t16 = test_tup1[15]\n    t17 = test_tup1[16]\n    t18 = test_tup1[17]\n    t19 = test_tup1[18]\n    t20 = test_tup1[19]\n    t21 = test_tup1[20]\n    t22 = test_tup1[21]\n    t23 = test_tup1[22]\n    t24 = test_tup1[23]\n    t25 = test_tup1[24]\n    t26 = test_tup1[25]\n    t27 = test_tup1[26]\n    t28 = test_tup1[27]\n    t29 = test_tup1[28]\n    t30 = test_tup1[29]\n    t31 = test_tup1[30]\n    t32 = test_tup1[31]\n    t33 = test_tup1[32]\n    t34 = test_tup1[33]\n    t35 = test_tup1[34]\n    t36 = test_tup1[35]\n    t37 = test_tup1[36]\n    t38 = test_tup1[37]\n    t39 = test_tup1[38]\n    t40 = test_tup1[39]\n    t41 = test_tup1[40]\n    t42 = test_tup1[41]\n    t43 = test_tup1[42]\n    t44 = test_tup1[43]\n    t45 = test_tup1[44]\n    t46 = test_tup1[45]\n    t47 = test_tup1[46]\n    t48 = test_tup1[47]\n    t49 = test_tup1[48]\n    t50 = test_tup1[49]\n    t51 = test_tup1[50]\n    t52 = test_tup1[51]\n    t53 = test_tup1[52]\n    t54 = test_tup1[53]\n    t55 = test_tup1[54]\n    t56 = test_tup1[55]\n    t57 = test_tup1[56]\n    t58 = test_tup1[57]\n    t59 = test_tup1[58]\n    t60 = test_tup1[59]\n    t61 = test_tup1[60]\n    t62 = test_tup1[61]\n    t63 = test_tup1[62]\n    t64 = test_tup1[63]\n    t65 = test_tup1[64]\n    t66 = test_tup1[65]\n    t67 = test_tup1[66]\n    t68 = test_tup1[67]\n    t69 = test_tup1[68]\n    t70 = test_tup1[69]\n    t71 = test_tup1[70]\n    t72 = test_tup1[71]\n    t73 = test_tup1[72]\n    t74 = test_tup1[73]\n    t75 = test_tup1[74]\n    t76 = test_tup1[75]\n    t77 = test_tup1[76]\n    t78 = test_tup1[77]\n    t79 = test_tup1[78]\n    t80 = test_tup1[79]\n    t81 = test_tup1[80]\n    t82 = test_tup1[81]\n    t83 = test_tup1[82]\n    t84 = test_tup1[83]\n    t85 = test_tup1[84]\n    t86 = test_tup1[85]\n    t87 = test_tup1[86]\n    t88 = test_tup1[87]\n    t89 = test_tup1[88]\n    t90 = test_tup1[89]\n    t91 = test_tup1[90]\n    t92 = test_tup1[91]\n    t93 = test_tup1[92]\n    t94 = test_tup1[93]\n    t95 = test_tup1[94]\n    t96 = test_tup1[95]\n    t97 = test_tup1[96]\n    t98 = test_tup1[97]\n    t99 = test_tup1[98]\n    t100 = test_tup1[99]\n    t101 = test_tup1[100]\n    t102 = test_tup1[101]\n    t103 = test_tup1[102]\n    t104 = test_tup1[103]\n    t105 = test_tup1[104]\n    t106 = test_tup1[105]\n    t107 = test_tup1[106]\n    t108 = test_tup1[107]\n    t109 = test_tup1[108]\n    t110 = test_tup1[109]\n    t111 = test_tup1[110]\n    t112 = test_tup1[111]\n    t113 = test_tup1[112]\n    t114 = test_tup1[113]\n    t115 = test_tup1[114]\n    t116 = test_tup1[115]\n    t117 = test_tup1[116]\n    t118 = test_tup1[117]\n    t119 = test_tup1[118]\n    t120 = test_tup1[119]\n    t121 = test_tup1[120]\n    t122 = test_tup1[121]\n    t123 = test_tup1[122]\n    t124 = test_tup1[123]\n    t125 = test_tup1[124]\n    t126 = test_tup1[125]\n    t127 = test_tup1[126]\n    t128 = test_tup1[127]\n    t129 = test_tup1[128]\n    t130 = test_tup1[129]\n    t131 = test_tup1[130]\n    t132 = test_tup1[131]\n    t133 = test_tup1[132]\n    t134 = test_tup1[133]\n    t135 = test_tup1[134]\n    t136 = test_tup1[135]\n    t137 = test_tup1[136]\n    t138 = test_tup1[137]\n    t139 = test_tup1[138]\n    t140 = test_tup1[139]\n    t141 = test_tup1[140]\n    t142 = test_tup1[141]\n    t143 = test_tup1[142]\n    t144 = test_tup1[143]\n    t145 = test_tup1[144]\n    t146 = test_tup1[145]\n    t147 = test_tup1[146]\n    t148 = test_tup1[147]\n    t149 = test_tup1[148]\n    t150 = test_tup1[149]\n    t151 = test_tup1[150]\n    t152 = test_tup1[151]\n    t153 = test_tup1[152]\n    t154 = test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Tuple length does not match'\n    mod_tup = []\n    for i in range(len(test_tup1)):\n        mod_tup.append((test_tup1[i] % test_tup2[i]) % test_tup2[i])\n    return mod_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Write your code here\n    mod = 1\n    for i in range(len(test_tup1)):\n        mod = mod * test_tup1[i] % test_tup2[i]\n    return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # code goes here\n    mod_result = ()\n    for i in test_tup1:\n        for j in test_tup2:\n            if i % j == 0:\n                mod_result += (i,j)\n    return mod_result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Change here to the actual code\n    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i] % test_tup2[i])  % (test_tup1[i] % test_tup2[i]))\n    \n    return tuple(res)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    \n    #Loop through each element in the tuples and update tuple with the modulo.\n    for item in test_tup1:\n        new_tup1 += (item % test_tup2)\n    \n    return new_tup1\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                mod_tup.append(test_tup1[i])\n    return mod_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = list(tuple(t) for t in test_tup1)\n    test_tup2 = list(tuple(t) for t in test_tup2)\n    result = tuple(tuple(a%b for a,b in zip(t1,t2)) for t1,t2 in zip(test_tup1,test_tup2))\n    return result\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(steps):\n        for j in range(steps):\n            if i > 0 and i < steps - d:\n                if j > 0 and j < steps - d:\n                    if d == 0:\n                        count += 1\n                    else:\n                        if [i, j] in pts:\n                            if pts[i, j] == 0:\n                                count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if steps == 1:\n        return steps\n    elif steps == 2:\n        return steps\n    else:\n        if d == 1:\n            return min(steps, min_Jumps(steps-1, d-1))\n        else:\n            return min(steps, min_Jumps(steps-1, d))\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for step in range(steps):\n        x = 0\n        y = 0\n        while x < d:\n            x = x + 1\n            y = y + 1\n        if y == d:\n            jumps = jumps + 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    else:\n        return steps-min_Jumps(steps, d-1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from math import factorial\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # f is the starting point of the path, d is the length of path to reach to, and J is the number of jumps required to reach from the starting point. \n    def check(f, d, J): \n        x = (f[0] - f[1]) / (f[1] - f[0])\n        x = int(x * 100) \n        y = (f[1] - f[0]) / (f[0] - f[1])\n        y = int(y * 100) \n        print (x, y)\n        if x!= 0 and y!= 0:\n            if x == d and y == 0: \n                J = J + 1\n            if x!= d and y!= 0: \n                J = J + 1\n            return J\n        else:\n            return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return steps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps > d or steps < 0:\n        return False\n    elif steps == d:\n        return True\n    else:\n        return min_Jumps(steps + 1, d) or min_Jumps(steps - 1, d)\n        \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    for i in range(d[0]-1, d[0]+2):\n        for j in range(d[1]-1, d[1]+2):\n            if i < 0 or i > d[0] - 1 or j < 0 or j > d[1] - 1 or (i, j) in steps:\n                continue\n            elif i == d[0] - 1 and j == d[1] - 1 and (i, j) in steps:\n                return steps[(i, j)]\n            else:\n                steps.add((i,j))\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 0 if steps is None else steps + 1 if steps[0] == d else min_Jumps(steps[1:], d)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        if nums1[i]<=nums2[i]:\n            nums1[i]*=10\n        else:\n            nums1[i]/=10\n    return nums1\ndef sum_list(nums1,nums2):\n    '''\n    Write a function to find sum of two lists.\n    '''\n    sum=0\n    for i in range(len(nums1)):\n        sum+=nums1[i]\n    return sum\ndef mean_list(nums1,nums2):\n    '''\n    Write a function to find mean of two lists.\n    '''\n    sum=0\n    for i in range(len(nums1)):\n        sum+=nums1[i]\n    mean=sum/len(nums1)\n    return mean\ndef median_list(nums1,nums2):\n    '''\n    Write a function to find median of two lists.\n    '''\n    if len(nums1)>len(nums2):\n        smaller=nums1\n        larger=nums2\n    else:\n        smaller=nums2\n        larger=nums1\n    median=[]\n    for i in range(len(smaller)):\n        median.append(smaller[i])\n        median.append(larger[i])\n    median.sort()\n    median_index=len(median)//2\n    if len(median)%2:\n        median.append(median[median_index])\n    return median[median_index]\ndef mode_list(nums1,nums2):\n    '''\n    Write a function to find most common number in two lists.\n    '''\n    counter=dict()\n    for i in range(len(nums1)):\n        if nums1[i] not in counter:\n            counter[nums1[i]]=1\n        else:\n            counter[nums1[i]]+=1\n    max_val=max(counter.values())\n    most_common=[]\n    for k,v in counter.items():\n        if v==max_val:\n            most_common.append(k)\n    return most_common[0]\ndef last_digit_of_fibonacci(n):\n    '''\n    Write a function that returns the last digit of the fibonacci sequence.\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # create a temporary list\n    temp_list = []\n    # add each elements in the list to the temporary list\n    for elem in nums2:\n        temp_list.append(elem)\n    # sort the temporary list\n    temp_list = sorted(temp_list)\n    # return the list\n    return temp_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # TODO:  Complete this method\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for index in range(0,len(nums1)):\n        sum = 0\n        for i in range(0,len(nums2)):\n            sum = sum + nums2[i]\n        new_list.append(sum)\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    i = 0\n    j = 0\n    list1 = []\n    list2 = []\n    while i<len1 and j<len2:\n        if nums1[i]<nums2[j]:\n            list1.append(nums1[i])\n            i+=1\n        elif nums1[i]>nums2[j]:\n            list2.append(nums2[j])\n            j+=1\n    if i==len1 and j==len2:\n        return list1+list2\n    else:\n        return list1,list2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n=len(nums1)\n    k=0\n    for i in range(n):\n        k=k+nums1[i]\n        k=k+nums2[i]\n    return k/n\n    "
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums_list = []\n    for index in nums1:\n        nums_list.append(index/nums2)\n    return nums_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #returns a list\n    a = []\n    for i in range(0,len(nums1)):\n        #calculating total of each element\n        tot = 0\n        for j in range(0,len(nums2)):\n            tot = tot + (nums1[i] * nums2[j])\n        #add result to list\n        a.append(tot)\n    #return list\n    return a\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Divide nums1 by nums2 and return the result\n    nums_len = len(nums1)\n    return [num / nums2 for num in nums1]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result_list=[]\n    for i in range(len(nums1)):\n        if nums1[i]==nums2[i]:\n            result_list.append('#')\n        else:\n            result_list.append(nums1[i])\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    def move_one(num):\n        s = str(num)\n        if s[0] == '0':\n            s = s[1:]\n        elif s[0] == '1':\n            s = s[1:]\n        elif s[0] == '2':\n            s = s[1:]\n        elif s[0] == '3':\n            s = s[1:]\n        elif s[0] == '4':\n            s = s[1:]\n        elif s[0] == '5':\n            s = s[1:]\n        elif s[0] == '6':\n            s = s[1:]\n        elif s[0] == '7':\n            s = s[1:]\n        elif s[0] == '8':\n            s = s[1:]\n        elif s[0] == '9':\n            s = s[1:]\n        return s\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = list(test_str)\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str[i] = '-'\n    test_str = ''.join(test_str)\n    test_str = test_str[:len(test_str)-1]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = []\n    for i in test_str:\n        if i.isdigit():\n            lst.append(i)\n    return ''.join(lst)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = test_str.split(\" \")\n    for index in range(len(test_str_list)):\n        test_str_list[index] = test_str_list[index].replace(\"1\",\"7\")\n        test_str_list[index] = test_str_list[index].replace(\"2\",\"6\")\n        test_str_list[index] = test_str_list[index].replace(\"3\",\"5\")\n        test_str_list[index] = test_str_list[index].replace(\"4\",\"4\")\n        test_str_list[index] = test_str_list[index].replace(\"5\",\"3\")\n        test_str_list[index] = test_str_list[index].replace(\"6\",\"2\")\n        test_str_list[index] = test_str_list[index].replace(\"7\",\"1\")\n        test_str_list[index] = test_str_list[index].replace(\"8\",\"0\")\n        test_str_list[index] = test_str_list[index].replace(\"9\",\"9\")\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # TODO: Write your code here\n    counter = 0\n    new_str = ''\n    \n    for i in test_str:\n        if i.isdigit():\n            if counter == 0:\n                new_str += i\n            else:\n                new_str = new_str + i\n            counter += 1\n        else:\n            new_str = new_str + i\n    \n    return new_str\n    \n    \n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        lst = test_str.split(' ')\n        for i in range(len(lst)):\n            lst[i] = int(lst[i])\n        return''.join(map(str,lst))\n    except Exception:\n        return 'Error'\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for i in test_str:\n        if i.isnumeric():\n            numbers.append(i)\n    return ''.join(numbers)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return_str = test_str\n    new_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            if i.isdigit():\n                return_str += i + \" \"\n            else:\n                new_str += i\n        else:\n            new_str += i\n    return new_str, return_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            new_str = new_str + i\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_string = ''\n    for char in test_str:\n        if char.isdigit():\n            new_string += char\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # helper function to find largest subset of a list of numbers\n    def largest_subset_helper(a, n):\n        if n == 1:\n            return 1\n        for i in range(0, n):\n            if a[i] % n!= 0:\n                break\n            if a[i] < a[i] % n:\n                a[i] += a[i] % n\n            if a[i] > a[i] % n:\n                a[i] -= a[i] % n\n            if a[i] % n == 0:\n                a[i] //= n\n                break\n        return largest_subset_helper(a, n-1)\n    return largest_subset_helper(a, len(a))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset_list = []\n    current_subset_list = []\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    table = []\n    set_list = []\n    for i in range(1, len(a) + 1):\n        if len(set(a)) < i:\n            table.append(set(a))\n            set_list.append(i)\n    for i in range(len(set_list)):\n        for j in range(i, len(set_list)):\n            if (set_list[i] + set_list[j]) % (set_list[i] + set_list[j]) == 0:\n                table.append(set(a))\n                set_list.append(j)\n                set_list.append(i)\n    return max(table)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m = {}\n    for i in a:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    smallest = None\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                if a[i] < smallest:\n                    smallest = a[i]\n                if a[j] < smallest:\n                    smallest = a[j]\n    size = smallest\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # declare an empty list to hold the maximum subset size\n    max_subset_size = []\n    # define the current largest subset as 1 element\n    current_largest_subset = 1\n    # define the index for the index of the largest subset\n    max_subset_index = 0\n    # initialize the current largest subset size as 1\n    current_largest_subset_size = 1\n    # loop through the array\n    for i in range(len(a)):\n        # loop through the current largest subset size\n        for j in range(i,len(a)):\n            # if the current index of the current largest subset index is larger than the current largest subset size\n            if len(a[i]) < len(a[j]) and (i < len(a) - 1 and j > i + 1):\n                # increase the current largest subset size\n                current_largest_subset_size += len(a[i])\n                # check if the current index is the largest subset index (i.e. the largest subset size)\n                if len(a[i]) == current_largest_subset_size:\n                    # if the current index is the largest subset index, we must update the index of the largest subset\n                    if i == len(a) - 1:\n                        # set the largest subset index to the current largest subset size\n                        max_subset_index = i\n                # else if the current index is not the largest subset index\n                elif len(a[i]) > current_largest_subset_size:\n                    # set the current largest subset size to the largest subset index\n                    current_largest_subset_size = len(a[i])\n                    # set the largest subset index to the current largest subset size\n                    max_subset_index = i\n                # if the current index is the largest subset index (i.e. the current largest subset index)\n                # we must update the current largest subset size\n                if len(a[i]) == current_largest_subset_size:\n                    # if the current index is the largest subset index, we must update the current largest subset size\n                    current_largest_subset_size = len(a[i])\n                # if the current index is not the largest subset index\n                elif len(a[i]) > current_largest_subset_size:\n                    # set the current largest subset size to the largest subset index\n                    current_largest_subset_size = len(a[i])\n                    # set the largest subset index to the current largest subset size\n                    max_subset_index = i\n                # if the current index is not the largest subset index\n                elif len(a[i]) < current_largest_subset_size:\n                    # set the current largest subset size to the current largest subset index\n                    current_largest_subset_size = len(a[i])\n                    # set the current largest subset index to the current largest subset size\n                    max_subset_index = i\n        # if the current largest subset size is not set, the current index is the largest subset index\n        # (i.e. the largest subset index)\n        if len(a[i])!= current_largest_subset_size:\n            # if the index is not the largest subset index\n            if len(a[i])!= current_largest_subset_size:\n                # set the current largest subset size to the current largest subset index\n                current_largest_subset_size = len(a[i])\n                # set the current largest subset index to the largest subset size\n                max_subset_index = i\n    # if the current largest subset size is set\n    if len(a[max_subset_index]) == current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is not set\n    elif len(a[max_subset_index]) > current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is equal to the current largest subset index\n    elif len(a[max_subset_index]) == current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is not equal to the current largest subset index\n    elif len(a[max_subset_index]) > current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is greater than the current largest subset index\n    elif len(a[max_subset_index]) < current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is less than the current largest subset index\n    elif len(a[max_subset_index]) > current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is equal to the current largest subset index\n    elif len(a[max_subset_index]) == current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is not equal to the current largest subset index\n    elif len(a[max_subset_index]) > current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is less than the current largest subset index\n    elif len(a[max_subset_index]) < current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is greater than the current largest subset index\n    elif len(a[max_subset_index]) > current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset size is less than the current largest subset index\n    elif len(a[max_subset_index]) < current_largest_subset_size:\n        # set the current largest subset size to the current largest subset index\n        current_largest_subset_size = len(a[max_subset_index])\n        # set the current largest subset index to the current largest subset size\n        max_subset_index = max_subset_index\n    # if the current largest subset siz"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # TODO: Write your code here\n    # hint: you can use a loop to build a combination of integers of size 3 and 5\n    # len(combination) = max(3,5)\n    # remember that combinations[i] = combination[i][0] + combination[i][1]\n    # for each combination of 3's and 5's,\n    # if a[i] is divisible by that number,\n    # return that number. If it is not divisible by that number,\n    # return the largest subset of a.\n    \n    # example:\n    # a = [1,2,3,4,5]\n    # a = [2,3,5,6,8]\n    # a = [2,2,3,5,6]\n    # a = [2,2,3,5,7,9]\n    # a = [2,2,3,5,6,8,9,11]\n    # a = [1,2,3,4,5,6,7,8]\n    # a = [1,2,3,5,6,7,8]\n    # a = [1,2,3,5,7,8]\n    # a = [1,2,3,5,7]\n    # a = [1,2,3]\n    # a = [1,2]\n    # a = [1,2,3,4,5]\n    # a = [1,2,3,4,5,6,7,8]\n    # a = [1,2,3,4,5,6,7,8,9,11]\n    # a = [1,2,3,4,5,6,7,8,9,11]\n    # a = [1,2,3,4,5,6,7,8,9,11]\n    # a = [1,2,3,4,5,6,7,8,9,11]\n    \n    combinations = []\n    for i in range(len(a)):\n        combinations.append([a[i], a[i]])\n    \n    a_sum = sum(a)\n    if a_sum == 0:\n        return a[0]\n    if a_sum % 3!= 0:\n        return a[0]\n    \n    for combination in combinations:\n        result = largest_subset(combination)\n        if result > a_sum:\n            a_sum = result\n    return a_sum\n    \n    "
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change(a):\n    '''\n    Write a function to calculate the minimum number of coins needed to make a given amount.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change2(a):\n    '''\n    Given a list of numbers, find the minimum number of coins required to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change3(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change4(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change5(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change6(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change7(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change8(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change9(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change10(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change11(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change12(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change13(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change14(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return dp[n-1]\ndef coin_change15(a):\n    '''\n    Given a list of numbers, find the minimum number of coins needed to make the amount in the list.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp["
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # write your code here\n    max_list = []\n    max_num = 0\n    for i in range(len(a)):\n        if len(a)!= i:\n            if a[i] % a[i] == 0:\n                max_list.append(a[i])\n        else:\n            if max_num > len(max_list):\n                max_list = [a[i]]\n            elif len(max_list) > len(max_num):\n                max_num = len(max_list)\n    return max_num\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = []\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                break\n        else:\n            result.append(a[i])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise Exception(\"Lengths of arr1 and arr2 must be same.\")\n    \n    if len(arr1) < 2:\n        raise Exception(\"The number of elements in both arr1 and arr2 must be at least 2.\")\n    \n    if len(arr1) == 2:\n        return (arr1[0]+arr1[1])/2.0\n    \n    if len(arr2) == 2:\n        return (arr2[0]+arr2[1])/2.0\n    \n    if len(arr1) < len(arr2):\n        return get_median(arr2, arr1, n)\n    \n    else:\n        return get_median(arr1, arr2, n)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        #return the average of the two sorted lists\n        return (arr1[int(n/2)] + arr2[int(n/2)])/2\n    else:\n        #return the maximum value of the two sorted lists\n        if arr1[int(n/2)] > arr2[int(n/2)]:\n            return arr1[int(n/2)]\n        else:\n            return arr2[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    temp = len(arr1)\n    if len(arr2) == 0:\n        return -1\n    elif len(arr2) == 1:\n        if temp == 1:\n            return arr1[0]\n        else:\n            return (arr1[0] + arr2[0]) / 2\n    elif len(arr2) == 2:\n        if temp == 1:\n            return arr1[0]\n        elif temp == 2:\n            return (arr1[0] + arr2[1]) / 2\n        else:\n            return (arr1[0] + arr2[0] + arr2[1]) / 3\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if len(arr1) == len(arr2):\n        arr1_len = len(arr1)\n        arr2_len = len(arr2)\n        if arr1_len == arr2_len:\n            return find_median(arr1, arr2, n)\n        elif arr1_len > arr2_len:\n            return arr1[int(len(arr1)/2)]\n        else:\n            return arr2[int(len(arr2)/2)]\n    else:\n        return \"List lengths don't match\"\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    else:\n        return (arr1[n//2] + arr2[n//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    while i < n:\n        if arr1[i] > arr2[j]:\n            i += 1\n        elif arr2[j] > arr1[i]:\n            j += 1\n        elif arr1[i] == arr2[j]:\n            if i < n // 2:\n                i += 1\n            elif j < n // 2:\n                j += 1\n            elif j == n:\n                return (arr1[i] + arr2[j]) / 2\n            else:\n                return arr1[i]\n    return arr1[i]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr1[0]\n    if n % 2 == 0:\n        median1 = arr1[int(n/2)]\n        median2 = arr2[int(n/2)]\n        mid = (n + 1)//2\n        return (median1 + median2 + arr1[mid] + arr2[mid])/4\n    else:\n        mid = (n + 1)//2\n        return (arr1[mid] + arr2[mid])/2\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0]+arr1[1])/2\n    else:\n        arr = arr1+arr2\n        arr.sort()\n        if len(arr) % 2 == 0:\n            return arr[(len(arr)-1)/2]\n        return (arr[(len(arr)-1)/2]+arr[(len(arr)-1)/2+1])/2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = list(map(lambda x: x**n, nums))\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return [nums[0] ** n]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # initialize the first and the second iterators\n    first_iterator = iter(nums)\n    second_iterator = iter(nums)\n    # loop through the numbers and compute the result\n    # for i in range(n):\n    #     val = next(first_iterator)\n    #     val = val**2\n    #     first_iterator.next()\n    #     val = next(second_iterator)\n    #     val = val**2\n    # return the list\n    return [val**n for val in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Helper function to compute the nth power of a list\n    def power(n,p):\n        if n == 0:\n            return 1\n        else:\n            return n*power(n-1,p)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # base case\n    if n==0 or n==1:\n        return [1]\n    # recursive case\n    else:\n        return [nums[i]**n for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[i]**(n-1) for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # make a function to recieve a number\n    # list of numbers\n    def recur(num):\n        if num < 1:\n            return 0\n        else:\n            # return the n-th number\n            return num**n\n    # return the list of nth numbers\n    return [recur(i) for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return nums\n    else:\n        return nums[n-1]**nth_nums(nums[0:n-1],n-1)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [1]\n    for num in nums:\n        result.append(num**n)\n    return result\n    \nprint(nth_nums([1,2,3,4,5], 3))\nprint(nth_nums([1,2,3,4,5], 2))\nprint(nth_nums([1,2,3,4,5], 1)"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            upper_string += string[i]\n        else:\n            upper_string += string[i].upper()\n    return upper_string\n    \nprint(is_upper(\"snake_case\"))\nprint(is_upper(\"SnakeCase\"))\nprint(is_upper(\"SnakeCeased\"))\nprint(is_upper(\"snake_case_upper\")"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new = []\n    for char in string:\n        if char.isupper():\n            new.append(char.upper())\n        else:\n            new.append(char)\n    return \"\".join(new)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper()==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    try:\n        string.upper()\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    def upper_letter(letter):\n        if letter.isupper():\n            return letter.upper()\n        else:\n            return letter\n    return upper_letter(string)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = len(newList)\n    b = a - 1\n    for i in range(a - 1):\n        newList[i], newList[b] = newList[b], newList[i]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"\\n The first element in the given list is\", newList[0])\n    print(\"The last element in the given list is\", newList[-1])\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The new list is now\", newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0, newList.pop())\n    newList.append(newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    x = newList[1:len(newList)]\n    y = newList[0:1]\n    newList = x+y\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList[0])\n    newList.append(newList[-1])\n    return newList\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code goes here\n    # swap the first and last element\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n=len(newList)\n    for i in range(0,n-1):\n        newList[i], newList[i+1] = newList[i+1], newList[i]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(newList)\n    print(newList.pop(0))\n    print(newList.pop(len(newList)-1))\n    print(newList)\n    \nnewList = [10, 20, 3, 40, 50]\nswap_List(newList)"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    index1=int(input(\"Enter index1: \"))\n    index2=int(input(\"Enter index2: \"))\n    temp=newList[index1]\n    newList[index1]=newList[index2]\n    newList[index2]=temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = ( 4 * r * (r + (r**2))) / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    area = 0\n    \n    if r < 0:\n        raise ValueError('The radius of a triangle must be positive')\n    else:\n        for i in range(r):\n            area = (2*i*r*(r-i))/(1-i)\n    \n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return r * (r - 1) / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r * r) / 2\n    return (2 * pi * a)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if type(r)!= int :\n        print('Error: r is not an integer')\n        return None\n    elif r < 0 :\n        print('Error: r is less than 0')\n        return None\n    else:\n        area = 2 * pi * r * r\n        return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return ( 3.14*r**2)*( ( -1/2 )**2 )\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r<=0 or r>=1 :\n        raise ValueError(\"Radius needs to be positive.\")\n    else :\n        x = (r*(r-1)/2)\n        a = math.sqrt(x)\n        return a\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.0\n    for sides in [3, 4, 5] : \n        temp = sides\n        while temp > 0 : \n            area += (temp ** 2) / 2\n            temp -= sides\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r<0 :\n        raise ValueError(\"Radius should be positive\")\n    if r==0 :\n        return 0\n    else :\n        return 3.14*(r**2)\n        \n        \ndef main() : \n    r = input(\"Enter the radius of the circle to find the area: \")\n    print(\"The area of the triangle with radius \", r, \"is: \", triangle_area(r))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = sqrt((r**2)/2)\n    return a\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    if (start == end):\n        return array[start]\n    \n    p = (start + end) // 2\n    \n    if array[p] == array[start]:\n        return find_First_Missing(array,start=start+1,end=p-1)\n    elif array[p] == array[end]:\n        return find_First_Missing(array,start=p+1,end=end)\n    else:\n        return array[start]\n        \n    \n    \ndef merge_sort(array):\n    \"\"\"\n    Write a python function to sort an array of numbers.\n    \"\"\"\n    \n    if len(array) < 2:\n        return array\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start<=end:\n        pivot = start\n        for i in range(start,end):\n            if array[i]<array[pivot]:\n                pivot = i\n        array[pivot],array[start] = array[start],array[pivot]\n        return find_First_Missing(array,start,pivot-1)\n    return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i] == end:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>end:\n        return -1\n    if start==end:\n        if array[start]==0:\n            return start\n        return -1\n    p=start\n    for i in range(start+1,end+1):\n        if array[i]>array[p]:\n            p=i\n    if array[p]==0:\n        return p\n    return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i] - array[start] < 0:\n            array[i],array[start] = array[start],array[i]\n    start = start + 1\n    array[start:end] = array[start:end][::-1]\n    return array[start:end]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end == None:\n        end = len(array) - 1\n    \n    i = start\n    j = end\n    \n    # If the array is empty\n    if array == []:\n        return -1\n    \n    # If the array contains only one number\n    if array[j] == end:\n        return end\n    \n    # If the array contains at least 2 numbers\n    while(i < j):\n        if array[i] < array[j]:\n            j = j - 1\n        elif array[i] > array[j]:\n            i = i + 1\n        else:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    \n    low=start\n    high=end\n    while low<high:\n        mid=(low+high)//2\n        if array[mid]<array[mid+1]:\n            high=mid\n        else:\n            low=mid+1\n    return array[low]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start==end:\n        return end\n    if start>=end:\n        return end\n    mid = (start+end)//2\n    if array[mid]==mid:\n        return mid\n    elif array[mid]<mid:\n        return find_First_Missing(array,mid,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return None\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    output_string = ''\n    for char in string:\n        if char!='':\n            output_string += char\n        else:\n            output_string += '%20'\n    return output_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if not string:\n        return string\n    if string.strip().endswith(' '):\n        string = string[:-2]\n        string += '%20'\n        return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if string == None:\n        return None\n    else:\n        string = string.replace(' ', '%20')\n        return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n    \ndef replace_numbers(string):\n    '''\n    Write a function to replace all numbers in the given string with '%3d'.\n    '''\n    string = string.replace('%','3')\n    return string\n    \ndef replace_punct(string):\n    '''\n    Write a function to replace all punctuations in the given string with '%5p'.\n    '''\n    string = string.replace('%','5')\n    return string\n    \ndef replace_lower(string):\n    '''\n    Write a function to replace all lowercase letters in the given string with '%20'.\n    '''\n    string = string.replace('%','20')\n    return string\n    \ndef replace_upper(string):\n    '''\n    Write a function to replace all uppercase letters in the given string with '%20'.\n    '''\n    string = string.replace('%','20')\n    return string\n    \ndef replace_punct(string):\n    '''\n    Write a function to replace all punctuations in the given string with '%5p'.\n    '''\n    string = string.replace('%','5')\n    return string\n    \ndef replace_special(string):\n    '''\n    Write a function to replace all special characters in the given string with '%3s'.\n    '''\n    string = string.replace('%','3')\n    return string\n    \ndef replace_space(string):\n    '''\n    Write a function to replace all whitespaces in the given string with '%20'.\n    '''\n    string = string.replace('%','20')\n    return string\n    \ndef replace_spaces_and_numbers(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20' and all numbers in the given string with '%3d'.\n    '''\n    string = string.replace(' ','%20')\n    string = string.replace('%','3')\n    return string\n    \ndef replace_dots(string):\n    '''\n    Write a function to replace all dashes in the given string with '%20'.\n    '''\n    string = string.replace('-','%20')\n    return string\n    \ndef replace_special_dots(string):\n    '''\n    Write a function to replace all special dashes in the given string with '%20'.\n    '''\n    string = string.replace('/','%20')\n    return string\n    \ndef replace_dots_and_special_dots(string):\n    '''\n    Write a function to replace all dashes in the given string with '%20' and all special dashes in the given string with '%3d'.\n    '''\n    string = string.replace('/','%20')\n    string = string.replace('\\\\','%20')\n    string = string.replace('+','%20')\n    string = string.replace('_','%20')\n    string = string.replace('.','%20')\n    string = string.replace('-','%20')\n    string = string.replace('*','%20')\n    string = string.replace('*','%20')\n    string = string.replace('%','%20')\n    return string\n    \ndef replace_dots_and_special_dots_and_spaces(string):\n    '''\n    Write a function to replace all dashes in the given string with '%20' and all special dashes in the given string with '%3d' and spaces in the given string with '%20'.\n    '''\n    string = string.replace('/','%20')\n    string = string.replace('\\\\','%20')\n    string = string.replace('+','%20')\n    string = string.replace('_','%20')\n    string = string.replace('.','%20')\n    string = string.replace('-','%20')\n    string = string.replace('*','%20')\n    string = string.replace('*','%20')\n    string = string.replace('%','%20')\n    string = string.replace(' ','%20')\n    return string\n    \ndef remove_special_dots(string):\n    '''\n    Write a function to remove special dashes in the given string.\n    '''\n    string = string.replace('/','%20')\n    string = string.replace('\\\\','%20')\n    string = string.replace('+','%20')\n    string = string.replace('_','%20')\n    string = string.replace('.','%20')\n    string = string.replace('-','%20')\n    string = string.replace('*','%20')\n    string = string.replace('*','%20')\n    string = string.replace('%','%20')\n    string = string.replace(' ','%20')\n    return string\n    \ndef remove_special_dots_and_spaces(string):\n    '''\n    Write a function to remove special dashes in the given string and all spaces.\n    '''\n    string = string.replace('/','%20')\n    string = string.replace('\\\\','%20')\n    string = string.replace('+','%20')\n    string = string.replace('_','%20')\n    string = string.replace('.','%20')\n    string = string.replace('-','%20')\n    string = string.replace('*','%20')\n    string = string.replace('*','%20')\n    string = string.replace('%','%20')\n    string = string.replace(' ','%20')\n    return string\n    \ndef remove_spaces(string):\n    '''\n    Write a function to remove all spaces in the given string.\n    '''\n    string = string.replace(' ','%20')\n    return string\n    \ndef remove_special_dots_and_spaces(string):\n    '''\n    Write a function to remove special dashes and spaces in the given string.\n    '''\n    string = string.replace('/','%20')\n    string = string.replace('\\\\','%20')\n    string = string.replace('+','%20')\n    string = string.replace('_','%20')\n    string = string.replace('.','%20')\n    string = string.replace('-','%20')\n    string = string.replace('*','%20')\n    string = string.replace('*','%20')\n    string = string.replace('%','%20')\n    string = string.replace(' ','%20')\n    return string\n    \ndef remove_dots(string):\n    '''\n    Write a function to remove all dashes in the given string.\n    '''\n    string = string.replace('-','%20')\n    return string\n    \ndef remove_special_dots_and_spaces(string):\n    '''\n    Write a function to remove special dashes and spaces in the given string and all spaces.\n    '''\n    string = string.replace('/','%20')\n    string = string.replace('\\\\','%20')\n    string = string.replace('+','%20')\n    string = string.replace('_','%20')\n    string = string.replace('.','%20')\n    string = string.replace('-','%20')\n    string = string.replace('*','%20')\n    string = string.replace('*','%20')\n    string = string.replace('%','%20')\n    string = string.replace(' ','%20')\n    return string\n    \ndef remove_spaces_and_special_dots(string):\n    '''\n    Write a function to remove all spaces and special dashes in the given string and all special dashes in the given string and all spaces.\n    '''\n    string = string.replace(' ','%20')\n    string = string.replace('%','%20')\n    string = string.replace('%','%20')\n    string = string.replace(' ','%20')\n    string = string.replace('/','%20')\n    string = string.replace('\\\\','%20')\n    string = string.replace('+','%20')\n    string = string.replace('_','%20')\n    string = string.replace('.','%20')\n    string = string.replace('-','%20')\n    string = string.replace('*','%20')\n    string = string.replace('*','%20')\n    string = string.replace('%','"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # your code goes here\n    newString = \"\"\n    for char in string:\n        if char == \" \":\n            newString += \"%20\"\n        else:\n            newString += char\n    return newString\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    newstring = string.replace(' ','%20')\n    return newstring\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    lst = []\n    for i in range(0,len(list)):\n        if list[i]%2==0:\n            lst.append(list[i])\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list)): \n        if list[i] % 2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    numbers = list\n    even_numbers = []\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    return even_numbers, odd_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for n in list:\n        if n%2 == 0:\n            even_list.append(n)\n        else:\n            odd_list.append(n)\n    return even_list, odd_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    res=[]\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            res.append(list[i])\n    print(res)\n    return res\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for x in list:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = []\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return odd, even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = []\n    if ele[1] < ele[2]: \n        sub.append( (ele[0], ele[1]+1) ) \n    else: \n        sub.append( (ele[0], ele[2]-1) )\n    return sub\n    \ndef get_cell(elem, grid): \n    '''\n    Return the element at the given coordinates.\n    '''\n    for i in range(len(grid)): \n        for j in range(len(grid[i])): \n            if grid[i][j] == elem: \n                return i, j\n    return None\n    \ndef get_data(grid, x, y, dx, dy): \n    '''\n    Return the value at the given coordinate tuple.\n    '''\n    if not (0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0])): \n        return 0\n    return grid[x+dx][y+dy]\n        \ndef get_neighbours(elem, grid): \n    '''\n    Return all the neighbouring coordinates for the given element.\n    '''\n    return adjac(elem, sub = [])\n    \ndef get_edge(elem, grid): \n    '''\n    Return all the edges of the given cell.\n    '''\n    return get_cell(elem, grid)\n    \ndef get_initial(grid): \n    '''\n    Return the initial value of the grid.\n    '''\n    return grid[0][0]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 3:\n        if ele[0] < ele[1]:\n            sub.append((ele[0], ele[1]))\n        elif ele[0] > ele[1]:\n            sub.append((ele[1], ele[0]))\n        else:\n            sub.append(None)\n    else:\n        sub.append(None)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < 0 or ele[0] >= size[0]: \n        sub.append((-ele[0] - 1, ele[1])) \n        sub.append((ele[0] - 1, ele[1])) \n    if ele[1] < 0 or ele[1] >= size[1]: \n        sub.append((-ele[0], ele[1] - 1)) \n        sub.append((ele[0], ele[1] - 1)) \n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # base case \n    if ele == sub: \n        return [[(0,0)]]\n    \n    # if the tuple is empty, just return its coordinates\n    if len(ele) == 0: \n        return sub\n    \n    # pop the last two indices from the tuple \n    last_index = len(ele) - 1\n    # pop the second index from the tuple \n    second_index = ele[last_index]\n    # create a list with the coordinates of the elements of the tuple \n    coordinates = [coord[1] for coord in sub + [(second_index, ele[last_index])]]\n    \n    # return all the coordinates and concatenate them in a new list \n    return [coord + [coord[2] for coord in sub] for coord in coordinates]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub+[ele[0]+1, ele[1], ele[0], ele[1]+1]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        return ele\n    else:\n        return adjac(ele[0], sub + [ele[1]])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return sub\n    else: sub.append(ele)\n    return adjac(ele[0],sub) + adjac(ele[1],sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return \n    sub.append(ele) \n    adjac(ele[0], sub) \n    adjac(ele[1], sub) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (ele[0], ele[1] + sub[0], ele[1] + sub[1])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    try:\n        return ele[1:], ele[0] + 1, ele[0] - 1, ele[0] * ele[1]\n    except IndexError:\n        sub.append(ele)\n        return adjac(ele, sub)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_without_newline = re.sub(' +',' ',text).lower()\n    text_without_space = re.sub(' +',' ',text_without_newline).replace(' ','_').replace('  ',' ').replace('.','_')\n    return text_without_space\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    ans = ''\n    for c in text:\n        if c =='':\n            ans += '_'\n        else:\n            ans += c\n    return ans\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('\\n','').replace('\\r','')\n    text = text.replace(' ', '_')\n    text = text.replace('\\t', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Set replacement for space. \n    replacement = \" _ \"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for char in text:\n        if char =='':\n            text = text.replace(char, '_')\n        if char == '\\t':\n            text = text.replace(char, '_')\n        if char == '\\n':\n            text = text.replace(char, '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('\\t', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\r', '_')\n    text = text.replace(' ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = re.sub(' +','', text)\n    text = text.replace('  ','')\n    text = text.replace('\\t','')\n    text = text.replace('\\n','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # this way we don't have to worry about the spacings\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #first, check if the string is empty\n    if len(text) == 0:\n        return ''\n    #if not empty, split the string into parts\n    text = text.split()\n    #loop through the parts and replace any whitespaces with an underscore\n    for i in text:\n        if len(i) > 1:\n            i = i.replace(' ', '_')\n            i = i.replace('_','')\n            text.append(i)\n    #combine parts to string\n    text = \" \".join(text)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_')\n    text = text.replace('  ', '_')\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list:\n        return []\n    new_list = []\n    for num in num_list:\n        if num == 0:\n            new_list.append(num)\n        else:\n            new_list.append(num)\n    new_list.extend([0]*(len(num_list) - len(new_list)))\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.insert(i,0)\n            return num_list\n        \n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[-1]\n            num_list.pop()\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[i+1]\n            num_list[i+1] = 0\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print(num_list)\n    num_list.pop(0)\n    print(num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in range(0, len(num_list), 1):\n        if num_list[num] == 0:\n            num_list.remove(num_list[num])\n            num_list.insert(num_list.index(0), 0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_list.append(num_list[i])\n            break\n    return zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(i, num_list[i])\n            del num_list[i]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            temp += 1\n            num_list[i] = temp\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # init the sum\n    sum=0\n    # loop through the array\n    for i in range(0,n) :\n        xor=arr[i]^arr[i+1]\n        sum=sum+xor\n        \n    # print out the sum\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr = sorted(arr)\n    if n<=1 : return arr[0]\n    return arr[0]*(arr[n-1]^arr[n-2])\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    count = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) :\n            if arr[i] ^ arr[j] == 0 : \n                count += 1\n    return count\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the empty set\n    res=set()\n    # Go through the list\n    for i in range(n) :\n        # Add the sum to the set\n        res.add(i)\n    # Iterate over the list\n    for i in range(n-1) :\n        # Add all the xor of the two numbers (i,j)\n        for j in range(i+1,n) :\n            res.add(arr[i]+arr[j])\n    return sum(res)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            s = s ^ arr[i] ^ arr[j] \n    return s \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if (n == 1) :\n        return arr[0]\n    p = 0\n    q = n - 1\n    while (p < q) :\n        temp = arr[p] ^ arr[q]\n        if temp == 0 :\n            q -= 1\n        else :\n            p += 1\n    return arr[q]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 1\n    while (x <= n) : \n        sum = 0\n        for i in range(0,n) : \n            sum = sum ^ arr[i]\n        x = x + 1\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #this will be the inital string\n    x = \"0\" * n\n    #initialize counters\n    counter = 0\n    #loop through the entire list\n    for i in range(n):\n        #check if the character is 0 or 1\n        if arr[i] == 0:\n            #count the numbers\n            counter += 1\n            #for every number, add one to the counter\n            if arr[i] == 1:\n                counter += 1\n    #find the new string\n    return int(x, 2) - 2 * counter\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #Takes array as input and n as the input.\n    arr_xor = []\n    for i in range(0,n):\n        xor = arr[i]\n        for j in range(i+1,n):\n            if (xor&1) == 1:\n                arr_xor.append(xor)\n                break\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        hq.heapify(iterable)\n        hq.heapreplace(iterable, iterable[0])\n        hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    def swap(a, b):\n        tmp = a\n        a = b\n        b = tmp\n        \n    def insert(a):\n        tmp = a\n        a = tmp[0]\n        \n        heapq.heappush(hq, a)\n        \n    def pop():\n        if len(hq) == 0:\n            return\n        \n        a = hq.pop(0)\n        heapq.heapify(hq)\n        \n        return a\n        \n    def siftup(a, b):\n        tmp = a\n        a = b\n        b = tmp\n        \n    def siftdown(a, b):\n        tmp = a\n        a = b\n        b = tmp\n        \n    def heap_comp(a):\n        b = a\n        x = b[0]\n        heapq.heapify(b)\n        heapq.heapreplace(a,x)\n        \n    for i in range(len(iterable)):\n        for j in range(len(iterable)):\n            if iterable[j] > iterable[i]:\n                swap(iterable, j)\n                \n                if j < i:\n                    insert(iterable[j:i])\n                break\n    \n    return iterable\ndef merge(a, b):\n    i, j = 0, 0\n    n = len(a)\n    m = len(b)\n    \n    while i < n and j < m:\n        if a[i] < b[j]:\n            a[i] += b[j]\n            i += 1\n        else:\n            a[i] += a[j]\n            j += 1\n    while i < n:\n        a[i] += a[i - 1]\n        i += 1\n    while j < m:\n        b[j] += b[j - 1]\n        j += 1\n    \ndef merge_sort(a, b):\n    if len(a) > 1:\n        m = len(b) // 2\n        a, b = a[:m], b[:m]\n        merge_sort(a, b)\n        \n        a, b = a[:m], b[:m]\n        merge(a, b)\n        \n    return a\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    h = []\n    while iterable:\n        heapq.heappush(h, iterable.pop())\n    while h:\n        yield h.pop()\n        heapq.heappush(h, heapq.heappop(h) + iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if type(iterable)!= list: return iterable\n    return hq.nsmallest(len(iterable), iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(iterable, n, i):\n        \"\"\"\n        Given a list, sort it in-place, maintaining heap order\n        \"\"\"\n        if 2*i + 1 < n:\n            largest = i\n            if iterable[i] > iterable[largest]:\n                largest = 2*i + 1\n            if 2*i + 2 < n and iterable[i] > iterable[largest]:\n                largest = 2*i + 2\n            if largest!= i:\n                iterable[i], iterable[largest] = iterable[largest], iterable[i]\n                heapify(iterable, n, largest)\n        else:\n            return\n        \n    def heap_sift_down(iterable, start, end):\n        \"\"\"\n        Sift the given list down to find the start of the heap\n        \"\"\"\n        root = start\n        while 2*root + 1 < end:\n            child = 2*root + 1\n            if iterable[root] > iterable[child]:\n                root = child\n            else:\n                break\n        iterable[root], iterable[start] = iterable[start], iterable[root]\n        heapify(iterable, end-1, root)\n        \n    def heap_sift_up(iterable, start, end):\n        \"\"\"\n        Sift the given list up to find the end of the heap\n        \"\"\"\n        root = start\n        while 2*root + 2 < end:\n            child = 2*root + 2\n            if iterable[root] > iterable[child]:\n                root = child\n            else:\n                break\n        iterable[root], iterable[start] = iterable[start], iterable[root]\n        heapify(iterable, end-1, root)\n        \n    n = len(iterable)\n    for k in range(n // 2):\n        heap_sift_up(iterable, k, n-1)\n    \n    for k in range(n-2, -1, -1):\n        heap_sift_down(iterable, k, n-1)\n    \n    for i in range(n-1):\n        iterable[i], iterable[i+1] = iterable[i+1], iterable[i]\n    \n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def swap(i, j):\n        tmp = iterable[i]\n        iterable[i] = iterable[j]\n        iterable[j] = tmp\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 2:\n        return iterable\n    \n    heap = []\n    hq.heapify(heap)\n    for value in iterable:\n        heapq.heappush(heap, value)\n    \n    return [heapq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for elem in iterable:\n        heapq.heappush(heap, elem)\n    for _ in range(len(heap)):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a new heap\n    heap = []\n    # iterate over the list\n    for item in iterable:\n        # add the item to the heap\n        heapq.heappush(heap, item)\n        # check if the heap is empty or not\n        # if not then print out the popped item\n        if len(heap) == 0:\n            print(heapq.heappop(heap))\n    # print out the popped item\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min-heap of integers.\n    arr = []\n    # Iterate over the given list.\n    for value in iterable:\n        # Insert the value into the heap.\n        hq.heappush(arr, value)\n    # Return the sorted list.\n    return arr\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost - sale_amount \n    return profit \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<=sale_amount:\n        print(\"Your cost is less than the amount you expect\")\n    else:\n        print(\"Your cost is greater than the amount you expect\")\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # your code here\n    if actual_cost >= sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # check if it can't be\n    if actual_cost-sale_amount<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    elif actual_cost == 0:\n        return False\n    elif sale_amount == actual_cost:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return \"No Profit\"\n    if actual_cost <= 0:\n        return \"No Loss\"\n    if sale_amount < 0:\n        return \"No Loss\"\n    else:\n        return \"No Profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    elif actual_cost < sale_amount and sale_amount < actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = 0\n    if actual_cost > sale_amount:\n        profit_loss = actual_cost - sale_amount\n    else:\n        profit_loss = sale_amount - actual_cost\n    return profit_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # if amount is more than any sale, then return True\n    if sale_amount >= actual_cost:\n        return True\n    # if the amount is less than any sale and profit is not zero, then return False\n    else: \n        if sale_amount < actual_cost: \n            return False\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    #Calculate the Wind Chill\n    w = v * math.pow(t,4.25) - 0.0065\n    w = w - (w * 0.621371)\n    w = w + 0.071\n    \n    #Return the Wind Chill\n    return w\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = math.exp(17.265 * (t - 32)) + 35.273\n    return round(v*k/100,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c1 = (100-v)*(9.0/5.0)\n    c2 = (v**5.0)/(5.0*(v**4.0)+9.0*(v**3.0))\n    c3 = -1.0*(v**3.0)/(9.0*(v**2.0)+3.0*(v**2.0))\n    c4 = (v**4.0)/(9.0*(v**2.0)+6.0*(v**2.0))\n    c5 = (math.cos(math.radians(t)))*c3\n    c6 = (math.cos(math.radians(t+273.1)))*(v**2.0)\n    c7 = (c1+c2+c3+c4+c5+c6)/6.0\n    c8 = math.log(v/(1.0+c7))\n    c9 = (c2*v+c4*(1.0-v)+c6*(1.0+v))/(1.0+c7)\n    return (c9+459.67)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (9 / 5) + (v/3)\n    d = (0.621371 * t + 0.4275)\n    return round(c,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #using the formula\n    Chill = (v/0.62)*(9.0/5.0)\n    chill = round(Chill)\n    if chill < -20.0:\n        chill = -20.0\n    if chill > 20.0:\n        chill = 20.0\n    return chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Calculate wind chill\n    return v*(9/5)+32\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Adjust for wind chill value and temperature\n    b0 = math.log((v/3.6),2)\n    b1 = math.log((v/3.6),2) + 1.67\n    b2 = math.log((v/3.6),2) - 1.67\n    b3 = math.log((v/3.6),2) + 2.5\n    b4 = math.log((v/3.6),2) - 2.5\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v**5 + t**4, 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Initialize the variables:\n    p = 101325\n    e = 0.078\n    r = 3.67  # Radius of the earth in meters\n    K = 9.12   # Air density of the earth in kg/m3\n    C = 6.67 * (10 ** -8)  # Stefan-Boltzman constant in c\n    # Calculate wind chill index:\n    w_index = p * (v ** 5) / ((v ** 3) + ((e * ((v ** 4) / r * (p ** 2) - (K * v ** 2))) ** 0.16))\n    # Round up or down the wind chill index:\n    if w_index >= 36:\n        w_index = 36\n    elif w_index <= -36:\n        w_index = -36\n    return round(w_index, 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    b = 101325\n    a = 5/3.0\n    h = b - (a*math.log(v/b))\n    if t < 10:\n        return round(h,1)\n    else:\n        return round(h,1) + 273.15\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print(\"Sample of names after lowercase letters is: \")\n    for name in sample_names:\n        if name[0].islower():\n            print(name, end=' ')\n        else:\n            print(name)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    samples_names = []\n    for i in range(len(sample_names)):\n        name = sample_names[i].lower()\n        if name.startswith('a'):\n            samples_names.append(sample_names[i])\n    return len(samples_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for i in sample_names:\n        if i[0].islower():\n            names.append(i[1:])\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import random\n    l = len(sample_names)\n    removed = [i[0].lower() for i in sample_names]\n    return sum([len(i) for i in sample_names if i[0].lower() not in removed])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name.lower()) for name in sample_names)"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = list(map(len,sample_names))\n    i = 0\n    while i< len(s):\n        if s[i]>1:\n            s.remove(s[i])\n        i+=1\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # dictionary\n    sample_names_d = {}\n    # read the sample names\n    with open(sample_names, 'r') as f:\n        for line in f:\n            # read one line of the file\n            line_data = line.split()\n            # add the entry to the dictionary\n            sample_names_d[line_data[0]] = len(line_data[1])\n    # return the length of the dictionary\n    return sum(sample_names_d.values())\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_nam = []\n    for name in sample_names:\n        if name[0].lower() not in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]:\n            sample_nam.append(name)\n    return sum(len(name) for name in sample_nam)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    i = 0\n    count = 0\n    for item in sample_names:\n        if item[0].lower() == 'a':\n            count += len(item)\n        if item[0].lower()!= 'a':\n            i += 1\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # For each name in the list, remove the first character in it.\n    # Append the length to the list.\n    # Return the list.\n    def nam_length(names):\n        nam_length = []\n        for nam in names:\n            nam_length.append(len(nam))\n        return nam_length\n    \n    #print(nam_length(sample_names))\n    #print(nam_length(sample_names[:5]))\n    \n    nam_length = nam_length(sample_names)\n    nam_length_sum = 0\n    for nam in nam_length:\n        if nam[0].islower():\n            nam_length_sum += nam\n    #print(nam_length_sum)\n    \n    return nam_length_sum\n    \n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis = '()'\n    new_string = []\n    for i in items:\n        if i in parenthesis:\n            i = i[1:-1]\n        if i in parenthesis:\n            new_string.append(i)\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for i in items:\n        if \"(\" in i:\n            if \")\" in i:\n                result.append(i)\n            else:\n                result.append(i.replace(\"(\", \"\"))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    clean_string = items\n    for index in range(len(items)):\n        if items[index] == '(':\n            start = index\n            end = 0\n            while items[end]!= '(':\n                end += 1\n            start = end+1\n            #print(start, end)\n            start = end\n            for index in range(start, len(items)):\n                if items[index] == '(':\n                    end = index\n                    break\n                else:\n                    start = index\n            #print(start, end)\n            start = end\n            #print(items[start:end])\n            clean_string = items[start:end]\n            #print(clean_string)\n    return clean_string\n    '''\n    def remove_parenthesis(items):\n        \"\"\"\n        :type items: str\n        :rtype: str\n        \"\"\"\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    #print(items)\n    return remove_parenthesis(items)\n    '''\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join(i for i in items if i!= ')' and i!= '(')\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    # make a dictionary with the character of the string\n    char_dict = {ord(c): i for i, c in enumerate(items)}\n    \n    # remove the parenthesis\n    result = [char_dict.pop(char_dict[item]) for item in char_dict if item not in char_dict]\n    \n    # remove the what is inbetween the brackets\n    result = [item[1:-1] for item in result if item[1:-1] in items]\n    \n    # return the result\n    return result\n    "
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # build an empty string\n    str_output = ''\n    # build the string, starting with the whole string\n    str_output += items\n    # iterate over the string, removing the parenthesis\n    for i in range(len(items)):\n        if items[i] == '(':\n            # add parentheses\n            str_output += ')'\n        elif items[i] == ')':\n            # if this is a parenthesis, add a closing bracket\n            if str_output[i] == '(':\n                # if this is the first bracket, add the closing bracket to the string\n                str_output += ')'\n            else:\n                # if this is not the first bracket, add the closing bracket\n                str_output += ')'\n    # return the string\n    return str_output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[0] == '(':\n            item = item[1:]\n        new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res=''\n    for i in items:\n        if(i[-1]=='(') and i[:-1].count('(') and i[-1]!='('):\n            res+=i[:-1]+' '\n        elif(i[-1]==')' and i[:-1].count('(') and i[-1]!='(':\n            res+=i[:-1]+' '\n        else:\n            res+=i+' '\n    return res[:-1]\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_re = re.compile(r'\\([^)]*\\)')\n    result = parenthesis_re.sub('',''.join(items))\n    return result\ndef normalize_english_words(text):\n    '''\n    Write a function to normalize a list of english words into a list of words with the form:\n        [\"word_one\", \"word_two\", \"word_three\"]\n    '''\n    result = []\n    for word in text:\n        word = remove_parenthesis(word)\n        word = re.sub(r'[^\\w]+','',word).lower()\n        if len(word) == 0:\n            continue\n        if word[0].isalpha():\n            result.append(word)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = list(filter(None,items.replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\")))\n    return items\ndef normalize_number(items):\n    '''\n    Write a function to normalize the numbers that are inbetween
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 2\n    elif n==2:\n        return 4\n    elif n==3:\n        return 8\n    elif n==4:\n        return 16\n    elif n==5:\n        return 32\n    else:\n        return 64\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        if n % i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n % 2) == 0: \n        return n // 2 \n    else: \n        return n - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        x = int(((n-1)**0.5)) + 1\n        return (n-x)/x\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return(n % 2!= 0)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return is_nonagonal(n-1)\n    \n    return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1 or n > 50:\n        raise ValueError('n must be between 1 and 50')\n    \n    def is_valid(num):\n        '''\n        Checks if the given number is valid or not.\n        '''\n        if isinstance(num, int) and 1 <= num <= 50:\n            return True\n        else:\n            return False\n    \n    def is_valid_num(num):\n        '''\n        Checks if the given number is a valid number or not.\n        '''\n        is_valid = is_valid_num(num)\n        if not is_valid:\n            raise ValueError('Only integers between 1 and 50 are accepted as valid numbers')\n        return num\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: return n\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 4\n    if n == 5: return 5\n    if n == 6: return 6\n    if n == 7: return 7\n    if n == 8: return 8\n    if n == 9: return 9\n    if n == 10: return 10\n    if n == 11: return 11\n    if n == 12: return 12\n    if n == 13: return 13\n    if n == 14: return 14\n    if n == 15: return 15\n    if n == 16: return 16\n    if n == 17: return 17\n    if n == 18: return 18\n    if n == 19: return 19\n    if n == 20: return 20\n    if n == 21: return 21\n    if n == 22: return 22\n    if n == 23: return 23\n    if n == 24: return 24\n    if n == 25: return 25\n    if n == 26: return 26\n    if n == 27: return 27\n    if n == 28: return 28\n    if n == 29: return 29\n    if n == 30: return 30\n    if n == 31: return 31\n    if n == 32: return 32\n    if n == 33: return 33\n    if n == 34: return 34\n    if n == 35: return 35\n    if n == 36: return 36\n    if n == 37: return 37\n    if n == 38: return 38\n    if n == 39: return 39\n    if n == 40: return 40\n    if n == 41: return 41\n    if n == 42: return 42\n    if n == 43: return 43\n    if n == 44: return 44\n    if n == 45: return 45\n    if n == 46: return 46\n    if n == 47: return 47\n    if n == 48: return 48\n    if n == 49: return 49\n    if n == 50: return 50\n    if n == 51: return 51\n    if n == 52: return 52\n    if n == 53: return 53\n    if n == 54: return 54\n    if n == 55: return 55\n    if n == 56: return 56\n    if n == 57: return 57\n    if n == 58: return 58\n    if n == 59: return 59\n    if n == 60: return 60\n    if n == 61: return 61\n    if n == 62: return 62\n    if n == 63: return 63\n    if n == 64: return 64\n    if n == 65: return 65\n    if n == 66: return 66\n    if n == 67: return 67\n    if n == 68: return 68\n    if n == 69: return 69\n    if n == 70: return 70\n    if n == 71: return 71\n    if n == 72: return 72\n    if n == 73: return 73\n    if n == 74: return 74\n    if n == 75: return 75\n    if n == 76: return 76\n    if n == 77: return 77\n    if n == 78: return 78\n    if n == 79: return 79\n    if n == 80: return 80\n    if n == 81: return 81\n    if n == 82: return 82\n    if n == 83: return 83\n    if n == 84: return 84\n    if n == 85: return 85\n    if n == 86: return 86\n    if n == 87: return 87\n    if n == 88: return 88\n    if n == 89: return 89\n    if n == 90: return 90\n    if n == 91: return 91\n    if n == 92: return 92\n    if n == 93: return 93\n    if n == 94: return 94\n    if n == 95: return 95\n    if n == 96: return 96\n    if n == 97: return 97\n    if n == 98: return 98\n    if n == 99: return 99\n    if n == 100: return 100\n    if n == 101: return 101\n    if n == 102: return 102\n    if n == 103: return 103\n    if n == 104: return 104\n    if n == 105: return 105\n    if n == 106: return 106\n    if n == 107: return 107\n    if n == 108: return 108\n    if n == 109: return 109\n    if n == 110: return 110\n    if n == 111: return 111\n    if n == 112: return 112\n    if n == 113: return 113\n    if n == 114: return 114\n    if n == 115: return 115\n    if n == 116: return 116\n    if n == 117: return 117\n    if n == 118: return 118\n    if n == 119: return 119\n    if n == 120: return 120\n    if n == 121: return 121\n    if n == 122: return 122\n    if n == 123: return 123\n    if n == 124: return 124\n    if n == 125: return 125\n    if n == 126: return 126\n    if n == 127: return 127\n    if n == 128: return 128\n    if n == 129: return 129\n    if n == 130: return 130\n    if n == 131: return 131\n    if n == 132: return 132\n    if n == 133: return 133\n    if n == 134: return 134\n    if n == 135: return 135\n    if n == 136: return 136\n    if n == 137: return 137\n    if n == 138: return 138\n    if n == 139: return 139\n    if n == 140: return 140\n    if n == 141: return 141\n    if n == 142: return 142\n    if n == 143: return 143\n    if n == 144: return 144\n    if n == 145: return 145\n    if n == 146: return 146\n    if n == 147: return 147\n    if n == 148: return 148\n    if n == 149: return 149\n    if n == 150: return 150\n    if n == 151: return 151\n    if n == 152: return 152\n    if n == 153: return 153\n    if n == 154: return 154\n    if n == 155: return 155\n    if n == 156: return 156\n    if n == 157: return 157\n    if n == 158: return 158\n    if n == 159: return 159\n    if n == 160: return 160\n    if n == 161: return 161\n    if n == 162: return 162\n    if n == 163: return 163\n    if n == 164: return 164\n    if n == 165: return 165\n    if n == 166: return 166\n    if n == 167: return 167\n    if n == 168: return 168\n    if n == 169: return 169\n    if n == 170: return 170\n    if n == 171: return 171\n    if n == 172: return 172\n    if n == 173: return 173\n    if n == 174: return 174\n    if n == 175: return 175\n    if n == 176: return 176\n    if n == 177: return 177\n    if n == 178: return 178\n    if n == 179: return 179\n    if n == 180: return 180\n    if n == 181: return 181\n    if n == 182: return 182\n    if n == 183: return 183\n    if n == 184: return 184\n    if n == 185: return 185\n    if n == 186: return 186\n    if n == 187: return 187\n    if n == 188: return 188\n    if n == 189: return 189\n    if n == 190: return 190\n    if n == 191: return 191\n    if n == 192: return 192\n    if n == 193: return 193\n    if n == 194: return 194\n    if n == 195: return 195\n    if n == 196: return 196\n    if n == 197: return 197\n    if n == 198: return 198\n    if n == 199: return 199\n    if n == 200: return 200\n    if n == 201: return 201\n    if n == 202: return 202\n    if n == 203: return 203\n    if n == 204: return 204\n    if n == 205: return 205\n    if n == 206: return 206\n    if n == 207: return 207\n    if n == 208: return 208\n    if n == 209: return 209\n    if n == 210: return 210\n    if n == 211: return 211\n    if n == 212: return 212\n    if n == 213: return 213\n    if n == 214: return 214\n    if n == 215: return 215\n    if n == 216: return 216\n    if n == 217: return 217\n    if n == 218: return 218\n    if n == 219: return 219\n    if n == 220: return 220\n    if n == 221: return 221\n    if n == 222: return 222\n    if n == 223: return 223"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # if the length of the array is even:\n    if n % 2 == 0:\n        # if the first number is greater than the second:\n        if n > 3:\n            # if the second number is greater than the third:\n            if n > 5:\n                # if the third number is greater than the last:\n                if n > 9:\n                    return True\n        # if the second number is greater than the first:\n        elif n > 1:\n            # if the first number is greater than the second:\n            if n > 3:\n                # if the second number is greater than the last:\n                if n > 5:\n                    return True\n        # if the second number is less than the first:\n        elif n < 1:\n            # if the first number is greater than the second:\n            if n < 3:\n                # if the second number is greater than the last:\n                if n < 5:\n                    return True\n        # if the first number is less than the second:\n        elif n < 1:\n            # if the second number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is greater than the second:\n        elif n > 3:\n            # if the third number is greater than the first:\n            if n > 5:\n                # if the first number is greater than the second:\n                if n > 9:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n    # if the length of the array is odd:\n    else:\n        # if the first number is greater than the second:\n        if n > 3:\n            # if the second number is greater than the first:\n            if n > 5:\n                # if the first number is greater than the second:\n                if n > 9:\n                    return True\n        # if the first number is greater than the second:\n        elif n > 1:\n            # if the second number is greater than the first:\n            if n > 3:\n                # if the first number is greater than the second:\n                if n > 5:\n                    return True\n        # if the second number is less than the first:\n        elif n < 1:\n            # if the first number is greater than the second:\n            if n < 3:\n                # if the first number is greater than the second:\n                if n < 5:\n                    return True\n        # if the second number is less than the first:\n        elif n < 1:\n            # if the first number is less than the second:\n            if n < 3:\n                # if the second number is less than the first:\n                if n < 5:\n                    return True\n        # if the third number is greater than the second:\n        elif n > 3:\n            # if the third number is greater than the first:\n            if n > 5:\n                # if the first number is greater than the second:\n                if n > 9:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is greater than the second:\n        elif n > 3:\n            # if the third number is greater than the first:\n            if n > 5:\n                # if the first number is greater than the second:\n                if n > 9:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is less than the first:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is greater than the second:\n        elif n > 3:\n            # if the third number is greater than the first:\n            if n > 5:\n                # if the first number is greater than the second:\n                if n > 9:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is greater than the second:\n        elif n > 3:\n            # if the first number is greater than the second:\n            if n > 5:\n                # if the second number is greater than the first:\n                if n > 9:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n        # if the third number is less than the second:\n        elif n < 1:\n            # if the third number is less than the first:\n            if n < 3:\n                # if the first number is less than the second:\n                if n < 5:\n                    return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if not text:\n        return None\n    if text[0] == 'z':\n        if len(text) == 1:\n            return True\n        else:\n            return False\n    elif text[0] == 'Z':\n        if len(text) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z=''\n    for i in range(len(text)):\n        if text[i] in \"yz\":\n            if text[i]==\"z\":\n                z+=text[i]\n            else:\n                z=z+text[i]\n    if z==text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('z', text)\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(\"z\")\n    match = regex.search(text)\n    if match!= None:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_recursion(text, start, end):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if start == end:\n        return text.lower().startswith('z')\n    if text[start:end].startswith(\"z\") == False:\n        return False\n    else:\n        return text[start:end].startswith(\"z\")\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z'):\n        return text.startswith('z') and not text.endswith('z')\n    if text.endswith('z'):\n        return text.endswith('z')\n    if text.startswith('z') and not text.endswith('z'):\n        return text.startswith('z')\n    return text.startswith('z') and not text.endswith('z')\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z'):\n            text_list[i]=text_list[i][1:]\n    return text_list\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z'):\n            text_list[i]=text_list[i][1:]\n    return text_list\ndef text_match_wordz_middle_or_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z') or text_list[i].startswith('z'):\n            text_list[i]=text_list[i][1:]\n    return text_list\ndef text_match_wordz_middle_or_start_or_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word or at the end of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z') or text_list[i].endswith('z'):\n            text_list[i]=text_list[i][1:]\n    return text_list\ndef text_match_wordz_middle_or_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].endswith('z'):\n            text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_start_or_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z') or text_list[i].endswith('z'):\n            text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_start_or_end_or_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word or at the end of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z') or text_list[i].endswith('z'):\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][1:]\n            if text_list[i].endswith('z'):\n                text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_end_or_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].endswith('z'):\n            text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_start_or_middle_or_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word or at the end of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z') or text_list[i].endswith('z'):\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][1:]\n            if text_list[i].endswith('z'):\n                text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_end_or_middle_or_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].endswith('z'):\n            text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_middle_or_end_or_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].endswith('z'):\n            text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_start_middle_or_end_or_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word or at the middle of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].startswith('z') or text_list[i].endswith('z'):\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][1:]\n            if text_list[i].endswith('z'):\n                text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_start_middle_or_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word or at the middle of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].endswith('z'):\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][1:]\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][:-1]\n    return text_list\ndef text_match_wordz_middle_or_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].endswith('z'):\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][:-1]\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][1:]\n    return text_list\ndef text_match_wordz_start_or_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word or at the end of the word.\n    '''\n    text_list=text.split()\n    for i in range(len(text_list)):\n        if text_list[i].endswith('z'):\n            if text_list[i].startswith('z'):\n                text_list[i]=text_list[i][:-1]\n        "
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile('\\w+z\\w+')\n    if regex.search(text) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\w{1,}'\n    pattern_two = r'\\w{2,}'\n    pattern_three = r'\\w{3,}'\n    pattern_four = r'\\w{4,}'\n    pattern_five = r'\\w{5,}'\n    pattern_six = r'\\w{6,}'\n    pattern_seven = r'\\w{7,}'\n    pattern_eight = r'\\w{8,}'\n    pattern_nine = r'\\w{9,}'\n    pattern_ten = r'\\w{10,}'\n    pattern_eleven = r'\\w{11,}'\n    pattern_twelve = r'\\w{12,}'\n    pattern_thirteen = r'\\w{13,}'\n    pattern_fourteen = r'\\w{14,}'\n    pattern_twenty = r'\\w{20,}'\n    pattern_thirty = r'\\w{30,}'\n    pattern_forty = r'\\w{40,}'\n    pattern_fifty = r'\\w{50,}'\n    pattern_sixty = r'\\w{60,}'\n    pattern_seventy = r'\\w{70,}'\n    pattern_sixty_five = r'\\w{70,}'\n    pattern_sixty_six = r'\\w{80,}'\n    pattern_seventy_five = r'\\w{80,}'\n    pattern_seventy_six = r'\\w{90,}'\n    pattern_seventy_seven = r'\\w{90,}'\n    pattern_eighth = r'\\w{100,}'\n    pattern_nineteen = r'\\w{100,}'\n    pattern_twenty_two = r'\\w{20,}'\n    pattern_twenty_three = r'\\w{20,}'\n    pattern_twenty_four = r'\\w{20,}'\n    pattern_twenty_five = r'\\w{20,}'\n    pattern_twenty_six = r'\\w{20,}'\n    pattern_twenty_seven = r'\\w{20,}'\n    pattern_twenty_eight = r'\\w{20,}'\n    pattern_twenty_nine = r'\\w{20,}'\n    pattern_twenty_ten = r'\\w{20,}'\n    pattern_twenty_eleven = r'\\w{20,}'\n    pattern_twenty_twelve = r'\\w{20,}'\n    pattern_twenty_thirteen = r'\\w{20,}'\n    pattern_twenty_fourteen = r'\\w{20,}'\n    pattern_twenty_fifteen = r'\\w{20,}'\n    pattern_twenty_sixteen = r'\\w{20,}'\n    pattern_twenty_seventy = r'\\w{20,}'\n    pattern_twenty_sixten = r'\\w{20,}'\n    pattern_twenty_seventy_five = r'\\w{20,}'\n    pattern_twenty_seventy_six = r'\\w{20,}'\n    pattern_twenty_seventy_seven = r'\\w{20,}'\n    pattern_twenty_eighth = r'\\w{20,}'\n    pattern_twenty_nineteen = r'\\w{20,}'\n    pattern_twenty_twenty_two = r'\\w{20,}'\n    pattern_twenty_twenty_three = r'\\w{20,}'\n    pattern_twenty_twenty_four = r'\\w{20,}'\n    pattern_twenty_twenty_five = r'\\w{20,}'\n    pattern_twenty_twenty_six = r'\\w{20,}'\n    pattern_twenty_twenty_seven = r'\\w{20,}'\n    pattern_twenty_twenty_eight = r'\\w{20,}'\n    pattern_twenty_twenty_nine = r'\\w{20,}'\n    pattern_twenty_twenty_ten = r'\\w{20,}'\n    pattern_twenty_twenty_eleven = r'\\w{20,}'\n    pattern_twenty_twenty_twelve = r'\\w{20,}'\n    pattern_twenty_twenty_thirteen = r'\\w{20,}'\n    pattern_twenty_twenty_fourteen = r'\\w{20,}'\n    pattern_twenty_twenty_fifteen = r'\\w{20,}'\n    pattern_twenty_twenty_sixteen = r'\\w{20,}'\n    pattern_twenty_twenty_seventy = r'\\w{20,}'\n    pattern_twenty_twenty_sixten = r'\\w{20,}'\n    pattern_twenty_twenty_seventy_five = r'\\w{20,}'\n    pattern_twenty_twenty_seventy_six = r'\\w{20,}'\n    pattern_twenty_twenty_seventy_seven = r'\\w{20,}'\n    pattern_twenty_twenty_eighth = r'\\w{20,}'\n    pattern_twenty_twenty_nineteen = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_two = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_three = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_four = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_five = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_six = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_seven = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_eight = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_nine = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_ten = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_eleven = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_twelve = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_thirteen = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_fourteen = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_fifteen = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_sixteen = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_seventy = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_sixten = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_seventy_five = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_seventy_six = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_seventy_seven = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_eighth = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_nineteen = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_twenty = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_fifty = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_fifty_five = r'\\w{20,}'\n    pattern_twenty_twenty_twenty_fifty_six = r'\\w{20,}'\n    pattern_t"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=re.sub(r'[^\\w_]+',' ',text)\n    text=text.strip()\n    \n    text=text.lower()\n    \n    return text==text.replace('z','').strip()\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text=re.sub(r'[^\\w_]+',' ',text)\n    text=text.strip()\n    \n    text=text.lower()\n    \n    return text==text.replace('z','').strip()\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=re.sub(r'[^\\w_]+',' ',text)\n    text=text.strip()\n    \n    text=text.lower()\n    \n    return text==text.replace('z','').strip()\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    string = text.strip()\n    new_text = \"\"\n    for letter in string:\n        if letter == \"z\":\n            new_text += \"1\"\n        else:\n            new_text += letter\n    # print(new_text)\n    return new_text\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) - 1\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if n <= k:\n        return input\n    \n    j = n - 1\n    # traverse in reverse order\n    while j >= k:\n        temp = input[j]\n        input[j] = input[j-1]\n        input[j-1] = temp\n        j = j - 1\n    return input\n    \n    \n    \ndef reverse_List(input):\n    '''\n    Write a python function to reverse an array in place\n    '''\n    n = len(input)\n    if n <= 1:\n        return input\n    \n    j = n - 1\n    i = n - 2\n    # traverse in reverse order\n    while j >= 1:\n        temp = input[j]\n        input[j] = input[i]\n        input[i] = temp\n        i = i - 1\n        j = j - 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(input==None or k==0):\n        return None\n    if(k>len(input)):\n        return input\n    \n    temp_array=[]\n    while(len(input)>0):\n        temp_array.append(input.pop())\n    \n    return temp_array[::-1] + [k] + temp_array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    lst = list(input)\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            lst[j], lst[i] = lst[i], lst[j]\n    \n    return ''.join(lst)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = []\n    for i in range(len(input)):\n        temp.append(input[i][-k])\n    return temp\n    pass    \n    \ndef Find_K_Elements(array, K): \n    '''\n    Write a python function to find the K-th element in an array upto a given position.\n    '''\n    for i in range(len(array)):\n        if array[i][-K] == K: \n            return array[i]\n    return None\n    pass\n    \ndef reverse_Array_Upto_K_Recursive(array, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if k == 0: \n        return array \n    \n    if k > len(array): \n        return None\n        \n    return reverse_Array_Upto_K_Recursive(array[:-k], k-1) + [array[-1]] + reverse_Array_Upto_K_Recursive(array[k:], k-1)\n    pass\n    \ndef reverse_Array_Upto_K_Iterative(array, K): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if K == 0: \n        return array \n    \n    curr = array[-1]\n    nxt = array[-K-1]\n    \n    array[-1] = curr \n    array[-K-1] = nxt \n    \n    return array\n    pass    \n    \ndef sum_Array(array, k): \n    '''\n    Write a python function to sum an array upto a given position.\n    '''\n    if k == 0: \n        return 0\n    if array == []: \n        return 0\n    \n    return sum_Array(array[:-k], k-1) + array[-1]\n    pass\n    \ndef Reverse_Array_Upto_K(array, K): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if K == 0: \n        return array \n    \n    nxt = array[-K]\n    array[-K] = array[0]\n    array[0] = nxt\n    \n    return array\n    pass\n    \ndef Get_K_Elements_In_Array(array, K): \n    '''\n    Write a python function to find the K-th element in an array upto a given position.\n    '''\n    for i in range(len(array)):\n        if array[i][-K] == K: \n            return array[i]\n    return None\n    pass\n    \ndef reverse_Array_Upto_K_Recursive(array, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if k == 0: \n        return array \n    \n    if k > len(array): \n        return None\n        \n    return reverse_Array_Upto_K_Recursive(array[:-k], k-1) + [array[-1]] + reverse_Array_Upto_K_Recursive(array[k:], k-1)\n    pass\n    \ndef reverse_Array_Upto_K_Iterative(array, K): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if K == 0: \n        return array \n    \n    curr = array[-1]\n    nxt = array[-K]\n    \n    array[-1] = curr \n    array[-K] = nxt \n    \n    return array\n    pass\n    \ndef sum_Array_Recursive(array, k): \n    '''\n    Write a python function to sum an array upto a given position.\n    '''\n    if array == []: \n        return 0\n    if k == 0: \n        return array \n    \n    if k == len(array): \n        return sum_Array(array, k-1)\n        \n    return sum_Array_Recursive(array[:-k], k-1) + array[-1]\n    pass\n    \ndef Reverse_Array_Upto_K_Iterative(array, K): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if K == 0: \n        return array \n    \n    curr = array[-1]\n    nxt = array[-K]\n    \n    array[-1] = curr \n    array[-K] = nxt \n    \n    return array\n    pass\n    \ndef Sum_K_Elements_In_Array(array, K): \n    '''\n    Write a python function to find the K-th element in an array upto a given position.\n    '''\n    nxt = 0\n    for i in range(len(array)):\n        if array[i][-K] == K: \n            return array[i]\n    return None\n    pass\n    \ndef Reverse_Array_Upto_K_Iterative(array, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if k == 0: \n        return array \n    \n    if k > len(array): \n        return None\n        \n    nxt = array[-k]\n    array[-k] = array[0]\n    array[0] = nxt\n    \n    return array\n    pass\n    \ndef get_K_Elements_in_Array(array, K): \n    '''\n    Write a python function to find the K-th element in an array upto a given position.\n    '''\n    nxt = 0\n    for i in range(len(array)):\n        if array[i][-K] == K: \n            return array[i]\n    return None\n    pass\n    \ndef reverse_Array_Upto_K_Naive(array, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if k == 0: \n        return array \n    \n    for i in range(len(array)):\n        if array[i][-k] == k: \n            array[i] = array[i][:-k] + array[i][-1:]\n            break\n        \n    return array\n    pass\n    \ndef reverse_Array_Upto_K_Recursive(array, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if k == 0: \n        return array \n    \n    if k > len(array): \n        return None\n        \n    return reverse_Array_Upto_K_Recursive(array[:-k], k-1) + [array[-1]] + reverse_Array_Upto_K_Recursive(array[k:], k-1)\n    pass\n    \ndef reverse_Array_Upto_K_Iterative(array, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if array == []: \n        return []\n    if k == 0: \n        return array \n    \n    for i in range(len(array)):\n        if array[i][-k] == k: \n            array[i] = array[i][:-k] + array[i][-1:]\n            break\n        \n    return array\n    pass\n    \ndef Sum_K_Elements_In_Array_Naive(array, K): \n    '''\n    Write a python function to find the K-th element in an array upto a given position.\n    '''\n    nxt = 0\n    for i in rang"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    result = []\n    \n    # if the index is greater than the length of the array, then return the entire array \n    # since the array is already in order\n    if k >= length:\n        return input\n    \n    # looping through the array and reversing it \n    for i in range(length-k):\n        result.append(input[i+k])\n    \n    # for-loop to reverse the array \n    for i in range(k, length):\n        result.append(input[i])\n    \n    return result\n    "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code here\n    reverse_arr = []\n    for i in input:\n        reverse_arr.append(i)\n    \n    for i in range(0,len(reverse_arr)-k):\n        reverse_arr[i],reverse_arr[i+k] = reverse_arr[i+k],reverse_arr[i]\n    \n    print(reverse_arr)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input)==0:\n        return []\n    output=[]\n    for i in range(len(input)):\n        output.append(input[i])\n        \n    for i in range(len(input)):\n        for j in range(k-1):\n            output[j]=input[i][j]\n    \n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    for i in range(len(input)):\n        result.append(input[len(input)-1-i])\n        input.pop()\n    return result\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #empty_tuple = ()\n    for i in range(len(test_dict)):\n        if test_dict[i] is None:\n            test_tup = test_tup + (None,)\n        else:\n            test_tup = test_tup + (test_dict[i],)\n    \n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup += tuple(test_dict.items())\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    for k,v in test_dict.items():\n        if type(v) is tuple:\n            test_tup = test_tup + (k,) + v\n        elif type(v) is list:\n            test_tup = test_tup + (k,) + tuple(v)\n        else:\n            test_tup = test_tup + (k,v)\n    return test_tup\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #t = tuple(test_dict.values())\n    #print(t)\n    test_tup = test_tup + test_dict\n    return test_tup\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if isinstance(test_dict[key], dict):\n            add_dict_to_tuple(test_tup, test_dict[key])\n        elif key in test_tup:\n            test_tup[key] = test_dict[key]\n        else:\n            print(test_tup, test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Print the key and value of the dictionary and add it to the result\n    print(test_tup[1])\n    test_dict[1] = test_tup[1]\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i in range(len(test_dict)):\n        if type(test_dict[i]) is dict:\n            for j in range(len(test_dict[i])):\n                if type(test_dict[i][j]) is dict:\n                    for k in range(len(test_dict[i][j])):\n                        test_tup.append((test_dict[i][j][k]))\n        else:\n            if test_dict[i] is not None:\n                test_tup.append(test_dict[i])\n    return test_tup\n    "
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for key in test_dict:\n        new_tup = new_tup[:1]\n        new_tup[1] = test_dict[key]\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if type(test_dict[key]) is not tuple:\n            test_tup = test_tup + (key,)\n            test_dict[key] = test_dict[key]\n    return test_tup, test_dict\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    visited = [[0 for i in range(N)] for j in range(N)]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Create a list of all cells visited in the path\n    path = []\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] == 1:\n                path.append((i,j))\n    # Initialize the total cost of each path as 0\n    totalCost = 0\n    # Iterate over all the paths\n    for i in range(len(path)-1):\n        currentCell = path[i]\n        nextCell = path[i+1]\n        # We need to calculate the cost of moving the current cell down from the current cell\n        currentCost = abs(nextCell[0] - currentCell[0]) + abs(nextCell[1] - currentCell[1])\n        # We need to calculate the cost of moving the current cell right from the current cell\n        nextCost = abs(currentCell[0] - nextCell[0]) + abs(currentCell[1] - nextCell[1])\n        totalCost += currentCost\n        totalCost += nextCost\n    # Return the average of the total cost of each path\n    return totalCost/len(path)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    count = 0\n    avg = 0\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n            avg += cost[i][j]\n    return avg/count\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = {}\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if j == 0:\n                paths[cost[i][j]] = cost[i][j+1]\n            else:\n                paths[cost[i][j]] = cost[i][j-1] + cost[i][j]\n    return paths\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # create a list to store the path\n    path = []\n    # get the size of the matrix\n    N = len(cost)\n    # populate the list with the start cell\n    path.append([])\n    # populate the list with the end cell\n    path.append([])\n    # populate the path with the cells visited\n    path[0].append(0)\n    path[1].append(0)\n    # populate the path with the cells visited\n    path[N-1].append(N-1)\n    # populate the path with the cells visited\n    path[N-2].append(N-2)\n    # populate the path with the cells visited\n    path[N-3].append(N-3)\n    # populate the path with the cells visited\n    path[N-4].append(N-4)\n    # go through the matrix one by one\n    for k in range(0,len(cost)-1):\n        # add the first row\n        path[0].append(cost[k][0])\n        # add the first column\n        path[1].append(cost[k][1])\n        # find the path with the value of the cell at the end\n        l = len(path[0])\n        if k == l - 1:\n            # print the result\n            print(round((path[0][l]/path[N-1][l-1]),1))\n        # add the next cell to the path\n        else:\n            # get the next cell in the path\n            x = path[0][l-1]\n            # get the next cell in the path\n            y = path[1][l-1]\n            # get the next cell in the path\n            z = path[0][l-2]\n            # get the next cell in the path\n            w = path[1][l-2]\n            # get the next cell in the path\n            u = path[0][l-3]\n            # get the next cell in the path\n            v = path[1][l-3]\n            # add the new value to the path\n            path[0][l-1] = x + y + z + w + u + v\n            # populate the path with the new value\n            path[1].append(x + y + z + w + u + v)\n    # return the path\n    return path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    totalCost = 0\n    currentCost = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            totalCost += cost[i][j]\n            currentCost += cost[i][j]\n            path = [i,j]\n            for step in range(j, len(cost[0])):\n                path.append(cost[i][step])\n                if cost[i][step]!= 0:\n                    currentCost -= cost[i][step]\n            paths.append(path)\n    if totalCost == 0:\n        return None\n    else:\n        return totalCost/len(paths),currentCost/len(paths)\n    \ndef minAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    totalCost = 0\n    currentCost = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            totalCost += cost[i][j]\n            currentCost += cost[i][j]\n            path = [i,j]\n            for step in range(j, len(cost[0])):\n                path.append(cost[i][step])\n                if cost[i][step]!= 0:\n                    currentCost -= cost[i][step]\n            paths.append(path)\n    if totalCost == 0:\n        return None\n    else:\n        return totalCost/len(paths),currentCost/len(paths)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # We find the size of our grid.\n    N = len(cost)\n    # We initialize the path queue.\n    pathQueue = []\n    # We initialize the path visited.\n    pathVisited = []\n    # We initialize the current node with the current cell.\n    currentNode = None\n    # We initialize the visited boolean value as false.\n    visited = False\n    # We initialize the maximum path.\n    path = []\n    # We get the size of the grid.\n    N = len(cost)\n    # We set the maximum path length as infinite.\n    maximumPathLength = float('inf')\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Define variables\n    N = len(cost)\n    avg = 0\n    total = 0\n    total_sum = 0\n    \n    # For every row\n    for row in range(N):\n        # For every column\n        for col in range(N):\n            # For each cell in that column\n            # Update total and average\n            total += cost[row][col]\n            avg = total/N\n            total_sum += avg\n    \n    # Return the maximum average\n    return total_sum/total\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def _getPath(m,n,cost,visited,path,pathVisited):\n        visited[n][n] = True\n        pathVisited[n][n] = True\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxAverage = 0\n    current = 0\n    for i in range(0, len(cost)):\n        for j in range(0, len(cost[0])):\n            current = current + cost[i][j]\n        current = current / len(cost[0])\n        if current > maxAverage:\n            maxAverage = current\n    return maxAverage\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = filter(lambda student: (student[1] >= h and student[1] >= w),students.items())\n    return list(filtered)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_dictionary = {}\n    # Iterate over all students\n    for student in students.values():\n        # Obtain height and weight of student\n        student_height = student[0]\n        student_weight = student[1]\n        # Obtain minimum height and weight\n        student_height_min = min(student_height)\n        student_weight_min = min(student_weight)\n        # Create a tuple with minimum height and weight\n        student_tuple = (student_height_min,student_weight_min)\n        # Check if tuple of minimum height and weight is contained in dictionary\n        if student_tuple in student_dictionary:\n            # If so, remove student from dictionary\n            student_dictionary.pop(student_tuple)\n            # If so, write a message to the console\n            # message = f\"Removed {student} from the dictionary\"\n            # print(message)\n        # Else add student to the dictionary\n        else:\n            # Add student to dictionary\n            student_dictionary[student_tuple] = student\n    # Return dictionary of students and their respective minimum height and weight\n    return student_dictionary\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if student[1][1] > h and student[1][0] > w:\n            filtered_students.append(student)\n    print(\"The filtered list is\",filtered_students)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if len(student)==3:\n            if student[2]<h and student[2]>=w and student[1]>=h and student[0]>=w:\n                print(student)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    final_data=[]\n    for name,data in students.items():\n        if data[1]>h and data[2]>w:\n            final_data.append(name)\n    return final_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students.items():\n        if i[1][0] > h:\n            students.pop(i)\n        elif i[1][1] > w:\n            students.pop(i)\n        else:\n            pass\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #create a copy of students list\n    filtered_students = students.copy()\n    #iterate through the list of students\n    for i in filtered_students:\n        #if the student's height is above the minimum, remove it\n        if i[1][1] > w[i[0]][1]:\n            #add the student to the new list\n            filtered_students.remove(i)\n    #iterate through the filtered list\n    for i in filtered_students:\n        #if the student's weight is below the minimum, remove it\n        if i[1][0] < h[i[0]][0]:\n            #add the student to the new list\n            filtered_students.remove(i)\n    #print filtered students\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if h >= student[0] and w >= student[1]:\n            return student\n    return None\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #First, create a new dictionary\n    student_heights = {name:height for (name,height) in students.items() if height >= h}\n    student_weights = {name:weight for (name,weight) in students.items() if weight >= w}\n    return student_heights,student_weights\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if i == j:\n                    count += 1\n                else:\n                    break\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d1 = dict()\n    for i in range(len(nums1)):\n        if nums1[i] not in d1:\n            d1[nums1[i]] = 1\n        else:\n            d1[nums1[i]] += 1\n    \n    d2 = dict()\n    for i in range(len(nums2)):\n        if nums2[i] not in d2:\n            d2[nums2[i]] = 1\n        else:\n            d2[nums2[i]] += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #create the hash table\n    hash_table = dict()\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([x for x in nums1 if x in nums2])\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count1 = 0\n    count2 = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count1 += 1\n        if nums1[i] == nums2[i]:\n            count2 += 1\n    return count1, count2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    # all the same values\n    count = 0\n    \n    # create a count dict\n    count_dict = {}\n    \n    for i in range(len(nums1)):\n        \n        if nums1[i] in count_dict:\n            count += 1\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    \n    for j in range(len(nums2)):\n        \n        if nums2[j] in count_dict:\n            count += 1\n            count_dict[nums2[j]] += 1\n        else:\n            count_dict[nums2[j]] = 1\n    \n    # find the dict\n    for i in range(len(count_dict)):\n        \n        if count_dict[i] > 1:\n            return i\n    \n    # return the index of the first key with more than 1 value\n    return count_dict.keys().index(min(count_dict, key = lambda x: count_dict[x]))\n    \n    \n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert is_power_of_2(power), \"power must be an integer that is a power of two\"\n    assert is_base_power(base,power), \"the base and power must be of the same base and power\"\n    assert base > 0 and power > 0, \"all inputs must be positive\"\n    assert is_base_power(base,power), \"base and power must be of the same base and power\"\n    return sum(int(i) for i in str(base**power))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while(power):\n        sum_digits += int(power)\n        power = int(power)//int(base)\n    return sum_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_num = 0\n    while base!= 0:\n        remainder = base % 10\n        power_num += remainder\n        base = int(base / 10)\n    return power_num\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while base!= 0:\n        total += base % 10\n        base //= 10\n    return total ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert 0 < power < 10, \"The power should be between 0 and 10 inclusive\"\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return power\n    return base + power_base_sum(base-1, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base==10:\n        return power\n    if base==11:\n        return 9\n    return power+base_sum(base,power)\n    \ndef power_base_sum_list(base,power):\n    '''\n    Write a function that takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    return power_base_sum(base,power)-power_base_sum(base,power+1)\n    \ndef power_digit_sum(digit,power):\n    '''\n    Write a function that takes digit and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    return digit_power(digit,power)\n    \ndef digit_power(digit,power):\n    '''\n    Write a function that takes digit and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    if digit==10:\n        return power\n    if digit==11:\n        return 1\n    return digit_power(digit,power+1)\n    \ndef power_digit_sum_list(digit,power):\n    '''\n    Write a function that takes digit and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    return power_digit_sum(digit,power)-power_digit_sum(digit,power+1)\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes a number as a parameter and returns the sum of all the digits of the number.\n    '''\n    if n==0:\n        return 0\n    return sum_digits(n-1)+n\n    \ndef is_prime(n):\n    '''\n    Write a function that takes a number as a parameter and returns True if n is prime, else returns False.\n    '''\n    if n<2:\n        return False\n    if n%2==0:\n        return False\n    if n==2 or n==3:\n        return True\n    \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n        \ndef is_prime_list(n):\n    '''\n    Write a function that takes a number as a parameter and returns a list of prime numbers greater than n.\n    '''\n    prime_list=[]\n    for i in range(1,n+1):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n    \ndef is_even(n):\n    '''\n    Write a function that takes a number as a parameter and returns True if n is even, else returns False.\n    '''\n    if n==0:\n        return False\n    if n%2==0:\n        return False\n    \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n        \ndef is_even_list(n):\n    '''\n    Write a function that takes a number as a parameter and returns a list of prime numbers greater than n.\n    '''\n    prime_list=[]\n    for i in range(1,n+1):\n        if is_even(i):\n            prime_list.append(i)\n    return prime_list\n    \ndef is_positive_prime(n):\n    '''\n    Write a function that takes a number as a parameter and returns True if n is a positive prime, else returns False.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n        \ndef is_positive_prime_list(n):\n    '''\n    Write a function that takes a number as a parameter and returns a list of positive prime numbers greater than n.\n    '''\n    prime_list=[]\n    for i in range(1,n+1):\n        if is_positive_prime(i):\n            prime_list.append(i)\n    return prime_list\n    \ndef is_primality(n):\n    '''\n    Write a function that takes a number as a parameter and returns True if n is prime, else returns False.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n    \ndef is_prime_sum(n):\n    '''\n    Write a function that takes a number as a parameter and returns the sum of all the prime numbers less than n.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return 0\n    prime_list=[]\n    for i in range(3,n+1,2):\n        if is_primality(i):\n            prime_list.append(i)\n    if len(prime_list)==0:\n        return 0\n    return sum(prime_list)\n    \ndef is_prime_sum_list(n):\n    '''\n    Write a function that takes a number as a parameter and returns a list of prime numbers less than n.\n    '''\n    prime_list=[]\n    for i in range(3,n+1,2):\n        if is_primality(i):\n            prime_list.append(i)\n    if len(prime_list)==0:\n        return 0\n    return sum(prime_list)\n    \ndef is_square(n):\n    '''\n    Write a function that takes a number as a parameter and returns True if n is a square, else returns False.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n    \ndef is_square_list(n):\n    '''\n    Write a function that takes a number as a parameter and returns a list of squares less than n.\n    '''\n    square_list=[]\n    for i in range(3,n+1,2):\n        if is_square(i):\n            square_list.append(i)\n    if len(square_list)==0:\n        return 0\n    return sum(square_list)\n    \ndef is_power(n):\n    '''\n    Write a function that takes a number as a parameter and returns True if n is a power, else returns False.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n    \ndef is_power_list(n):\n    '''\n    Write a function that takes a number as a parameter and returns a list of powers less than n.\n    '''\n    power_list=[]\n    for i in range(3,n+1,2):\n        if is_power(i):\n            power_list.append(i)\n    if len(power_list)==0:\n        return 0\n    return sum(power_list)\n    \ndef is_square_product(n):\n    '''\n    Write a function that takes a number as a parameter and returns True if n is a square product, else returns False.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n%2==0:\n        return False\n    \n    for i in range(3,int(n**0.5)+1,2):\n        if n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif power == 0:\n        return 1\n    elif base == 1:\n        return 1\n    elif base == 2:\n        return 10\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1 #base = int(base)\n    base_sum = 0 #base_sum = 0\n    while base > 0: #base_sum = base_sum + base\n        base_sum = base_sum + base % 10\n        base = int(base / 10) #base = int(base)\n    return base_sum\n    \ndef power_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1 #base = int(base)\n    sum = 0 #sum = 0\n    while base > 0: #sum = sum + base\n        sum = sum + power % 10\n        power = int(power / 10) #power = int(power)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = []\n    while base > 0:\n        rem = base % 10\n        digits.append(rem)\n        base //= 10\n    digits.reverse()\n    if power == len(digits):\n        return 0\n    elif power < len(digits):\n        return digits[power]\n    else:\n        return 0\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*)?')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'])\\w+')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*)?')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^\\'\"])')\n    quotation_m.sub('',text1)\n    quotation_m = re.compile(r'(?<=[\\'\"])\\w+[\\'\"](?:[^\\'\"].*?[^\\'\"])*?(?<=[\\'\"]).*?[^"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # remove unwanted characters from the given string\n    text1 = re.sub('[^a-zA-Z0-9_]+',' ',text1)\n    # split the string in words\n    words = text1.split()\n    # initialize an empty list\n    final_list = []\n    for i in words:\n        if i!= '':\n            final_list.append(i)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex_quotation_mark = r'\\s\"\\s*|\\s*\"\\s*|\\s*<\\s*\\s*'\n    quotation_text = re.sub(regex_quotation_mark, '', text1)\n    return quotation_text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"\\\".*?\\\"\"\n    text = re.sub(pattern, \"\", text1)\n    text = text.lower()\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = text1.find('\"')\n    return text1[quot_pos+1:]\ndef extract_quote(text1):\n    '''\n    Write a function to extract quotes at the end of a string.\n    '''\n    return text1[text1.find(':'):]\ndef extract_section(text1):\n    '''\n    Write a function to extract section names.\n    '''\n    return text1.split(' - ')[0]\ndef extract_number(text1):\n    '''\n    Write a function to extract numbers.\n    '''\n    return re.search(r'[0-9]', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search(r'\\d{4}-\\d{2}-\\d{2}', text1).group(0)\ndef extract_time(text1):\n    '''\n    Write a function to extract time.\n    '''\n    return re.search(r'([0-5][0-9]|1[0-2]) :', text1).group(0)\ndef extract_subject(text1):\n    '''\n    Write a function to extract subject.\n    '''\n    return re.search(r'\\[\\d+\\]', text1).group(0)\ndef extract_location(text1):\n    '''\n    Write a function to extract location.\n    '''\n    return re.search(r'\\[\\d+\\]', text1).group(0)\ndef extract_time(text1):\n    '''\n    Write a function to extract time.\n    '''\n    return re.search(r'\\d{1,2}:\\d{1,2}', text1).group(0)\ndef extract_time(text1):\n    '''\n    Write a function to extract time.\n    '''\n    return re.search(r'\\d{1,2}:\\d{1,2}', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search(r'\\d{4}-\\d{2}-\\d{2}', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search(r'\\d{4}-\\d{2}-\\d{2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_location(text1):\n    '''\n    Write a function to extract location.\n    '''\n    return re.search(r'\\[\\d+\\]', text1).group(0)\ndef extract_location(text1):\n    '''\n    Write a function to extract location.\n    '''\n    return re.search(r'\\[\\d+\\]', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_time(text1):\n    '''\n    Write a function to extract time.\n    '''\n    return re.search(r'\\d{1,2}:\\d{1,2}', text1).group(0)\ndef extract_time(text1):\n    '''\n    Write a function to extract time.\n    '''\n    return re.search(r'\\d{1,2}:\\d{1,2}', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search(r'\\d{4}-\\d{2}-\\d{2}', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search(r'\\d{4}-\\d{2}-\\d{2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_location(text1):\n    '''\n    Write a function to extract location.\n    '''\n    return re.search(r'\\[\\d+\\]', text1).group(0)\ndef extract_location(text1):\n    '''\n    Write a function to extract location.\n    '''\n    return re.search(r'\\[\\d+\\]', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search(r'\\d{4}-\\d{2}-\\d{2}', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search(r'\\d{4}-\\d{2}-\\d{2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_number(text1):\n    '''\n    Write a function to extract number.\n    '''\n    return re.search(r'\\d{1,2}\\d{1,2}\\d{1,2}', text1).group(0)\ndef extract_date(text1):\n    '''\n    Write a function to extract date.\n    '''\n    return re.search("
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    '''\n    1. Extracting and transforming the content of the given string to remove the quotation marks.\n    2. Removing the quotation marks.\n    3. Splitting the content of the given string by the quotation marks.\n    4. Cleaning the content of the given string.\n    '''\n    text_split = re.split('\\\"|\\(|\\)|,|\\)|\\]',text1)\n    '''\n    i. Print the content of the given string after all the quotation marks.\n    ii. Extracting the quotation marks.\n    iii. Removing the quotation marks.\n    iv. Splitting the content of the given string by the quotation marks.\n    '''\n    for i in range(len(text_split)):\n        if text_split[i] == '\"':\n            if text_split[i-1] == '\"':\n                text_split[i] = \"\"\n                text_split[i-1] = \"\"\n            elif text_split[i-1]!= '\\\"':\n                text_split[i] = \"\"\n    print(text_split)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_index=text1.find(\"\\\"\")\n    quotation_value=text1[quotation_index+2:len(text1)]\n    return quotation_value\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list=[]\n    for i in range(len(text1)):\n        if(text1[i]==' '):\n            if(i==len(text1)-1):\n                list.append(''.join(list))\n                break\n            if(text1[i+1]!=' '):\n                list.append(text1[i])\n                break\n    return list\n    \ndef extract_title(text1):\n    '''\n    Write a function to extract title of book from the given string.\n    '''\n    list=[]\n    for i in range(len(text1)):\n        if(text1[i]=='('):\n            if(i==len(text1)-1):\n                list.append(''.join(list))\n                break\n            if(text1[i+1]!=')'):\n                list.append(text1[i])\n                break\n    return list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # print('quotation:', text1)\n    \n    text1 = text1.strip()\n    # print('after_quotation:', text1)\n    # text1 = re.sub('\\s+',' ', text1)\n    text1 = re.sub('[^A-Za-z0-9]+',' ', text1)\n    # print('after_quotation:', text1)\n    \n    # text1 = re.sub('[\\n\\t\\s]','',text1)\n    # print('after_quotation:', text1)\n    # text1 = re.sub('[^A-Za-z0-9]+',' ', text1)\n    text1 = text1.split(' ')\n    # print('after_quotation:', text1)\n    \n    # text1 = [word for word in text1 if word.strip()!= '']\n    \n    text1 = list(map(str,text1))\n    # print('after_quotation:', text1)\n    \n    # print('after_quotation:', len(text1))\n    \n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub('\\W+','', text1)\n    return text.split()\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (x * t_i for x, t_i in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    N = len(test_tup)\n    for i in range(N):\n        res = res + test_tup[i] * (i + 1)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    t_5 = test_tup[4]\n    \n    t_6 = (t_1*t_2)+(t_3*t_4)+(t_5*t_6)\n    \n    return (t_1, t_2, t_3, t_4, t_5, t_6)\n    \ndef add_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    t_5 = test_tup[4]\n    t_6 = t_1 + t_2 + t_3 + t_4 + t_5 + t_6\n    \n    return (t_1, t_2, t_3, t_4, t_5, t_6)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = (t_i for t_i in test_tup)\n    return tuple(tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x:x*test_tup[x+1],range(len(test_tup))))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    return tuple((t_1 * t_2) * t_3)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in test_tup:\n        result = result + (i * test_tup[i])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(0,len(test_tup)):\n        result += test_tup[i] * test_tup[i+1]\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = []\n    for t_i in range(len(test_tup)-1):\n        res.append(test_tup[t_i]*test_tup[t_i+1])\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1_sum = 0\n    lst2_sum = 0\n    for i in lst1:\n        lst1_sum += i\n    for j in lst2:\n        lst2_sum += j\n    return lst1_sum + lst2_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = [0]*len(lst1)\n    for x in range(len(lst1)):\n        for y in range(len(lst2)):\n            res[x] += lst1[x] + lst2[y]\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    ans = 0\n    for i in range(len(lst1)):\n        ans += lst1[i]\n    for j in range(len(lst2)):\n        ans += lst2[j]\n    return ans\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    sum = 0\n    for i in range(len(lst1)):\n        sum = sum + lst1[i] + lst2[i]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = 0\n    for i in range(len(lst1)):\n        result += lst1[i] + lst2[i]\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_to_sum = []\n    for i in range(len(lst1)):\n        lst_to_sum.append(lst1[i]+lst2[i])\n    return lst_to_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        sum=0\n        for i in range(len(lst1)):\n            sum+=lst1[i]*lst2[i]\n        return sum\n    else:\n        raise TypeError(\"Input lists must be same length\")\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum([lst1[i]+lst2[i] for i in range(len(lst1))])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    a_n = len(lst1)\n    b_n = len(lst2)\n    sum = []\n    for i in range(a_n):\n        sum.append(lst1[i] + lst2[i])\n    return sum\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    #sort the list\n    nums.sort()\n    #check if duplicates exist\n    for i in range(1,len(nums)):\n        #check if the previous element is already in the list\n        if nums[i-1] == nums[i]:\n            return False\n    #append the first element to the list\n    nums[0] = nums[0]\n    #check if the list has a duplicates\n    if len(nums) > 2:\n        for j in range(1,len(nums)):\n            if nums[j]!= nums[j-1]:\n                return True\n    return False\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    count = 0\n    for idx, val in enumerate(nums):\n        if val not in seen:\n            seen.add(val)\n            count += 1\n        else:\n            seen.remove(val)\n            count -= 1\n            if count == 0:\n                return nums\n    return nums[count:]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    seen = set()\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    d = collections.defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for key in d:\n        if d[key] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [item for item, count in groupby(nums) if count > 1]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    j = 1\n    while j < len(nums):\n        if nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    if len(nums) <= 1:\n        return len(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    list_ = []\n    for i in nums:\n        if i not in list_:\n            list_.append(i)\n        else:\n            list_.append(i)\n            \n    return list_\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    set_nums = set(nums)\n    return list(set_nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    dup = set(nums)\n    new_nums = [dup.pop()]\n    for i in range(1, len(nums)):\n        if new_nums[i - 1]!= new_nums[i]:\n            new_nums.append(new_nums[i - 1])\n    return new_nums\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0\n    if r == 0:\n        s = 0\n        return s\n    else:\n        y = (math.sqrt(r*r+h*h))/2\n        s = (2*math.pi*y*r)/h\n        return s\n    \n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S_W = 0.5 * math.pi * (r ** 2)\n    S_N = 0.5 * math.pi * (r ** 2)\n    S_A = (S_W + S_N)\n    print('\\nSurface area of cone is : {0:.2f}'.format(S_A))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=2*math.pi*r\n    B=math.pi*h\n    C=r*math.tan(B/2)\n    D=A/C\n    return D\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    #Determine the area of the cone\n    a=math.pi*(r**2)*(math.tan(math.pi*(1/2)))\n    #Compute the area\n    area=math.acos(math.fabs(math.sin(h/a)))\n    #Print out the area\n    print('Surface area of cone of radius '+str(r)+' and height '+str(h)+' is '+str(area)+'.')\n    #Return the area\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    x = r*math.cos(math.radians(h))\n    y = r*math.sin(math.radians(h))\n    \n    return math.sqrt(x**2+y**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def sin_sqrt(t):\n        '''\n        Calculate the sin_sqrt function for sine and cosine\n        '''\n        return math.sin(math.pi/4*t)**2 + math.cos(math.pi/4*t)**2\n        \n    def tan_sqrt(t):\n        '''\n        Calculate the tan_sqrt function for tangent and inverse tangent\n        '''\n        return math.tan(math.pi/4*t)**2 + math.sin(math.pi/4*t)**2 + math.cos(math.pi/4*t)**2\n        \n    def sin(t):\n        '''\n        Calculate the sin function for a given function\n        '''\n        return math.sin(math.pi*t)\n        \n    def cos(t):\n        '''\n        Calculate the cos function for a given function\n        '''\n        return math.cos(math.pi*t)\n        \n    return 0.5*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #theta = (2*math.pi) * (r/2)\n    #lambda = r/math.tan(theta/2)\n    #radial = lambda * math.sqrt(r**2 - lambda**2)\n    #return math.pi * (r**2 - lambda**2)\n    lambda = math.sqrt((2*h)/r)\n    radial = lambda * math.sqrt(r**2 - lambda**2)\n    return math.pi * (r**2 - lambda**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #a = 2*math.pi*r*h/3\n    a = 4*math.pi*r*h/3\n    lateral_surface_area = (1/3)*a*math.sqrt(3)\n    return lateral_surface_area\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #a = 2*math.pi*r*h/3\n    a = 4*math.pi*r*h/3\n    lateral_surface_area = (1/3)*a*math.sqrt(3)\n    return lateral_surface_area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    #a = 2*math.pi*r/3\n    a = 4*math.pi*r/3\n    lateral_surface_area = (1/3)*a*math.sqrt(3)\n    return lateral_surface_area\ndef lateralsurface_cylinder_cube(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #a = 2*math.pi*r*h/3\n    a = 4*math.pi*r*h/3\n    lateral_surface_area = (1/3)*a*math.sqrt(3)\n    return lateral_surface_area\ndef transverse_convection(r,h):\n    '''\n    Write a function to calculate the transverse convection coefficient.\n    '''\n    #a = 2*math.pi*r/3\n    a = 4*math.pi*r/3\n    transverse_convection_coefficient = (1/3)*a*math.sqrt(3)\n    return transverse_convection_coefficient\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*math.sin(math.radians(h))**2\ndef perlin_func(x,y):\n    '''\n    Write a function to generate a perlin noise map for the given position x,y.\n    '''\n    return (math.sin((x-y)*(math.pi/180))/3)**3\ndef sphere(r,c,v):\n    '''\n    Write a function to return a surface of a sphere given its radius and center c.\n    '''\n    return r*(c-v)\ndef cylinder(r,c,h,v):\n    '''\n    Write a function to return a surface of a cylinder given its radius,center c, and height h.\n    '''\n    return r*(c-v)\ndef cone(r,h,v):\n    '''\n    Write a function to return a surface of a cone given its radius,height and center c.\n    '''\n    return r*(h-v)\ndef base(r,c,v):\n    '''\n    Write a function to return a surface of a base given its radius,center c, and vertical height v.\n    '''\n    return r*(c-v)\ndef chamfer(x,y):\n    '''\n    Write a function to return the distance between two points x,y.\n    '''\n    return math.sqrt((x-y)**2)\ndef cube(r,h,v):\n    '''\n    Write a function to return a surface of a cube given its radius,height and center c.\n    '''\n    return r*(h-v)\ndef square(r,h,v):\n    '''\n    Write a function to return a surface of a square given its radius,height and center c.\n    '''\n    return r*(h-v)\ndef cube_lateral(x,y,z):\n    '''\n    Write a function to return the surface area of a cube given its position x,y and z.\n    '''\n    return (cube(x,y,z)-cube(x,y-1,z))*3\ndef sphere_lateral(x,y,z):\n    '''\n    Write a function to return the surface area of a sphere given its position x,y and z.\n    '''\n    return (sphere(x,y,z)-sphere(x,y-1,z))*3\ndef sphere_lateral_dist(x,y,z,r):\n    '''\n    Write a function to return the surface area of a sphere given its position x,y and z and its radius.\n    '''\n    return (sphere(x,y,z)-sphere(x,y-1,z))*(r**2)\ndef sphere_lateral_dist_2(x,y,z,r):\n    '''\n    Write a function to return the surface area of a sphere given its position x,y and z and its radius.\n    '''\n    return (sphere(x,y,z)-sphere(x,y-1,z))*(r**2)\ndef sphere_lateral_dist_3(x,y,z,r,c,d):\n    '''\n    Write a function to return the surface area of a sphere given its position x,y and z and its radius.\n    '''\n    return (sphere(x,y,z)-sphere(x,y-1,z))*(r**2)+(c-d)*(r**2)\ndef cone_lateral_dist(x,y,z,h,r):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)\ndef cone_lateral_dist_2(x,y,z,h,r):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(h-r)*(r**2)\ndef cone_lateral_dist_3(x,y,z,h,r,c):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(c-h)*(r**2)+(h-r)*(r**2)\ndef cone_lateral_dist_4(x,y,z,h,r,c,d):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(c-h)*(r**2)+(h-r)*(r**2)+(d-r)*(r**2)\ndef cone_lateral_dist_5(x,y,z,h,r,c,d):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(c-h)*(r**2)+(h-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)\ndef cone_lateral_dist_6(x,y,z,h,r,c,d):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(c-h)*(r**2)+(h-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)\ndef cone_lateral_dist_7(x,y,z,h,r,c,d):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(c-h)*(r**2)+(h-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)\ndef cone_lateral_dist_8(x,y,z,h,r,c,d):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(c-h)*(r**2)+(h-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)\ndef cone_lateral_dist_9(x,y,z,h,r,c,d):\n    '''\n    Write a function to return the surface area of a cone given its position x,y and z and its height and radius.\n    '''\n    return (cone(x,y,z)-cone(x,y-1,z))*(r**2)+(c-h)*(r**2)+(h-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2)+(d-r)*(r**2"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return round(4*math.pi*math.pow(r,3)*h*(1/math.sqrt(3)))\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_clean = re.sub(' +', ':', text)\n    text_clean = re.sub('\\t', ':', text_clean)\n    text_clean = re.sub(' +', ':', text_clean)\n    text_clean = re.sub('\\.', ':', text_clean)\n    text_clean = re.sub('\\n', ':', text_clean)\n    return text_clean\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\";\",\":\")\n    text = text.replace(\"[\",\":\")\n    text = text.replace(\"]\",\":\")\n    text = text.replace(\"_\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(r'\\s+',':',text)\n    result = re.sub(r'\\.',':',result)\n    result = re.sub(r'\\,',':',result)\n    result = re.sub(r'\\:',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\?',':',result)\n    result = re.sub(r'\\?',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\_',':',result)\n    result = re.sub(r'\\_',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\}',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\(',':',result)\n    result = re.sub(r'\\)',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'\\,',':',result)\n    result = re.sub(r'\\,',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\:',':',result)\n    result = re.sub(r'\\:',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\}',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\(',':',result)\n    result = re.sub(r'\\)',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'\\,',':',result)\n    result = re.sub(r'\\,',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\:',':',result)\n    result = re.sub(r'\\:',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\}',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\(',':',result)\n    result = re.sub(r'\\)',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'\\,',':',result)\n    result = re.sub(r'\\,',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\;',':',result)\n    result = re.sub(r'\\:',':',result)\n    result = re.sub(r'\\:',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\!',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\$',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\[',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\{',':',result)\n    result = re.sub(r'\\}',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\]',':',result)\n    result = re.sub(r'\\(',':',result)\n    result = re.sub(r'\\)',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r',',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\+',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'\\*',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'-',':',result)\n    result = re.sub(r'\\,',':',result)\n    resul"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':').replace(',', ':').replace(';', ':').replace('!', ':').replace('?', ':').replace('\\'', ':').replace('\"', ':').replace('(', ':').replace(')', ':').replace(' ', ':')\n    text = text.replace('\\n', '<br>\\n').replace(' ', '<br>')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # 1. split the string into parts\n    # i.e. The first part of a string is 'Hello there, '\n    # 2. split the rest of the string into a list of each character\n    #     * this list is a list of all the other characters that were inside the part\n    #     * e.g. ['h', 'e', 'l', 'o','', 't','','', 'r', 'e','','','', 'i','s', 'r', 't','', 'd']\n    #     * e.g. ['H', 'E', 'L', 'O', 'T','','','', 'R', 'E','','','', 'I', 'S', 'R', 'E','', 'D']\n    # 3. loop through each character, and replace it with a colon\n    # i.e. ['H', 'E', 'L', 'O', 'T','','','', 'R', 'E','','','', 'I', 'S', 'R', 'E','', 'D']\n    # i.e. ['H   E   L   O   T   S   R   E   D']\n    # i.e. ['H   E   L   O   T   S   R   E   D]\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'(\\s+)', r':', text.replace('\\n', '\\n '))\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r\"([A-Za-z, \\. ',_]+) +\"\n    text = re.sub(pattern, r\" : \", text)\n    pattern = r\"([A-Za-z, \\. ',_]+) +\"\n    text = re.sub(pattern, r\" : \", text)\n    pattern = r\"([A-Za-z, \\. ',_]+) +\"\n    text = re.sub(pattern, r\":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_new=text.replace(' ',':')\n    text_new=text_new.replace('.',':')\n    text_new=text_new.replace(',','|:')\n    text_new=text_new.replace(';','|:')\n    text_new=text_new.replace('\\'','|:')\n    text_new=text_new.replace('!','|:')\n    text_new=text_new.replace('?','|:')\n    text_new=text_new.replace('$','|:')\n    text_new=text_new.replace('{','|:')\n    text_new=text_new.replace('}','|:')\n    text_new=text_new.replace('_','|:')\n    return text_new\n    \ndef normalize_specialchar(text):\n    '''\n    This function normalizes each of the special characters that are used for a\n    placeholder.\n    '''\n    text_new=text.replace(' ',':')\n    text_new=text_new.replace('.',':')\n    text_new=text_new.replace(',','|:')\n    text_new=text_new.replace(';','|:')\n    text_new=text_new.replace('\\'','|:')\n    text_new=text_new.replace('!','|:')\n    text_new=text_new.replace('?','|:')\n    text_new=text_new.replace('$','|:')\n    text_new=text_new.replace('{','|:')\n    text_new=text_new.replace('}','|:')\n    text_new=text_new.replace('_','|:')\n    return text_new\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    print(\"\\n\\n==============================================================\")\n    print(\"\\t\\tREPLACE_SPECIAL_CHAR\")\n    print(\"==============================================================\\n\")\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'(?<=[\\.\\,;:\\*\\\\])[ \\n]*', '', text)\n    text = re.sub(r'[,;:|.?!]', ':', text)\n    text = re.sub(r'[.,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[,;:|.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[,;:|.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[,;:|.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[,;:|.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[,;:|.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[\\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[ \\n]+', ':', text)\n    text = re.sub(r'[,;:|.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\.?!]+', ':', text)\n    text = re.sub(r'[,;:|\\"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while A[i]!= x:\n        i += 1\n    return i\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    for i in range(0, len(A)):\n        if A[i] == x:\n            index = i\n            break\n    return index\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low<=high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A is None or len(A) == 0:\n        return None\n    if x == A[0]:\n        return 0\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while j >= i and A[j]!= x:\n        if A[j] < x:\n            j -= 1\n        else:\n            i += 1\n    if j >= i:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #the array is sorted\n    if len(A) == 0:\n        return None\n    #the first occurrence of the number is at the index\n    if A[0] == x:\n        return 0\n    #when the first occurrence of the number is different from the first element, the function\n    #returns the index of the first element that is before it\n    return find_first_occurrence(A[1:], x)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    \n    # create an empty dictionary to store the sums of sublists\n    sub_dict = {}\n    \n    # create a dictionary to store possible sums\n    possible_dict = {}\n    \n    for i in range(1,n+1):\n        sub_dict[i] = 0\n        \n    # initialize a empty sublists\n    sublist_arr = []\n    \n    # traverse the array\n    for i in range(len(arr)):\n        sublist_arr.append(arr[i])\n    \n    # check if the array has sublists\n    for i in range(n):\n        # if the array is a list of sublists, add the value to the dictionary\n        if type(sublist_arr[i]) is list:\n            for j in range(len(sublist_arr[i])):\n                sub_dict[sublist_arr[i][j]] = sub_dict[sublist_arr[i][j]] + sublist_arr[i][j]\n        # if the array is not a list of sublists, add the value to the dictionary\n        else:\n            sub_dict[sublist_arr[i]] = sub_dict[sublist_arr[i]] + sublist_arr[i]\n    \n    # sum the sublists\n    for k in range(n):\n        # get the sum of the sublists\n        sum = 0\n        for i in range(len(sub_dict)):\n            sum = sum + sub_dict[i]\n        # add the sum to the dictionary\n        possible_dict[k] = sum\n        \n    return possible_dic"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    sum_of_products = 1\n    prod_of_subarray = 1\n    subarrays = []\n    for i in range(0,len(arr)):\n        for j in range(0,i):\n            sum_of_products += arr[i] * arr[j]\n        prod_of_subarray *= arr[i]\n        subarrays.append(prod_of_subarray)\n    for k in range(0,len(subarrays)):\n        sum_of_products += subarrays[k] * prod_of_subarray\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n    \nsum_Of_Subarray_Prod = sum_Of_Subarray(arr)\nprint(sum_Of_Subarray_Prod"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    prod=1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum+=arr[i]*arr[j]\n            prod*=arr[i]*arr[j]\n    return sum,prod\narr=[1,2,3,4]\nprint(sum_Of_Subarray_Prod(arr)"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Python code to find sum of products of all possible sublists of a given list\n    s=0\n    for i in range(len(arr)):\n        s+=arr[i][0]*(i+1)\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    print(\"\\n\\tFUNCTION SUM OF PRODUCTS OF ALL SUBARRANGES\\n\")\n    \n    sum = 0\n    for i in range(1, len(arr)+1):\n        sum += arr[i-1] * arr[i]\n        \n    print(\"The sum of all the pairs in the given array is : \", sum)\n    \n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum += arr[i]*arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([ sum(nums) for nums in product(*arr) ])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Your code here\n    print(sum(i*j for i in arr for j in arr if i%j==0))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        n = n & 0b
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Your code here\n    if n & 0x80 == 0:\n        return 0x80\n    else:\n        return 0x00\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] == 0):\n            count+=1\n            n[i] = count\n        elif (n[i] == 1):\n            count-=1\n            n[i] = count\n        else:\n            pass\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(num):\n        '''\n        This function will toggle the bit of the number, the first and the last bit.\n        '''\n        num_temp = num\n        num_temp = num_temp & (1 << 31)\n        num_temp = num_temp | (1 << 31)\n        return num_temp\n    \n    num = n\n    #print('Original number is:', num)\n    \n    # 2 bits of the number\n    num = num >> 1\n    #print('2 bits of the number:', num)\n    # 4 bits of the number\n    num = num >> 2\n    #print('4 bits of the number:', num)\n    # 8 bits of the number\n    num = num >> 4\n    #print('8 bits of the number:', num)\n    # 16 bits of the number\n    num = num >> 16\n    #print('16 bits of the number:', num)\n    # 32 bits of the number\n    num = num >> 32\n    #print('32 bits of the number:', num)\n    # 64 bits of the number\n    num = num >> 64\n    #print('64 bits of the number:', num)\n    # 128 bits of the number\n    num = num >> 128\n    #print('128 bits of the number:', num)\n    # 256 bits of the number\n    num = num >> 256\n    #print('256 bits of the number:', num)\n    \n    num = num ^ num\n    num = num ^ num\n    num = num ^ num\n    num = num ^ num\n    #print('Number after toggle bits:', num)\n    \n    return toggle_bits(num)\n    \ndef add_end(num):\n    '''\n    This function will add the end bit in the number.\n    '''\n    end_bits = num >> 31\n    num = num & (1 << 31)\n    num = num | end_bits\n    return num\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    if n==0:\n        return n\n    if n==1:\n        return n-1\n    \n    if n>=2:\n        num = n\n        \n        while num > 0:\n            temp = num % 2\n            num = num // 2\n            if temp == 0:\n                n = n + 1\n            elif temp == 1:\n                n = n - 1\n    \n    return n\n    \n    \ndef get_number_in_binary(n):\n    \"\"\"\n    Write a python function to get the number in binary form. https://www.geeksforgeeks.org/binomial-exact-factors-of-n/\n    \"\"\"\n    n = int(n)\n    \n    while n>=2:\n        factors = math.factorial(n)\n        \n        if factors <= n:\n            n = n * 2\n        \n        n = n//2\n        \n    return n\n    \ndef get_modular_exponent(n, k):\n    \"\"\"\n    write a python function to find the modular exponent of a number n using the function we have written.\n    https://www.geeksforgeeks.org/python-modular-exponent/\n    \"\"\"\n    # get the number of bits\n    # n will be divided by k (n>>k)\n    # n will be divided by (n >> k)\n    # n will be the same as n >> k\n    n = n // k\n    # if n is negative, then n must be positive\n    if n < 0:\n        n = n + k\n    # find the remainder of the number\n    remainder = n % k\n    # find the modulus of the remainder\n    modulo = (n // k) * k\n    # return the modulus as an integer\n    return modulo + remainder\n    \ndef get_length_of_binary(n):\n    \"\"\"\n    Write a python function to get the length of a binary number.\n    https://www.geeksforgeeks.org/python-binary-number-length/\n    \"\"\"\n    # write a python function to find the length of a binary number.\n    # https://www.geeksforgeeks.org/python-binary-number-length/\n    \n    # if n is negative, then n must be positive\n    if n < 0:\n        n = n + 1\n        \n    # find the number of zeros\n    num_zeros = math.ceil(math.log2(n))\n    \n    # print the number of zeros\n    print(num_zeros)\n    \n    # find the length of the binary number\n    # n will be given as a multiple of 2^num_zeros\n    # and n will be given as a multiple of 2^(num_zeros-1)\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^(num_zeros-1)\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^(num_zeros-1)\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    # n will be given as a multiple of 2^num_zeros\n    "
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:\n        print(\"The number is not positive.\")\n        return\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # write your code here\n    number = n\n    number = list(str(number))\n    lst = []\n    for i in number:\n        lst.append(i[0])\n    print(lst)\n    return int(''.join(lst[1:]), 2"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    answer = 0\n    for i in range(n):\n        answer = answer + (i)\n    for i in range(n-1):\n        answer = answer + ((n-1)-i)\n    return answer\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)\n    return int(n[2:len(n)], 2"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # set first bit to 1 and last bit to 0\n    if n & 1 == 0:\n        n = n | 1\n    else:\n        n = n & 1\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return False\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(0, len(a)):\n        if a[i] < x:\n            a[i] = a[i] + 1\n        else:\n            break\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a = sorted(a)\n    i = bisect.bisect_left(a, x)\n    return i if x < a[i] else i - 1\ndef insert_at(a, x, x_before, x_after):\n    '''\n    a = sorted(a)\n    if x < x_before:\n        i = bisect.bisect_left(a, x_before)\n    elif x > x_after:\n        i = bisect.bisect_right(a, x_after)\n    elif x == x_before:\n        i = bisect.bisect_left(a, x_after)\n    else:\n        i = bisect.bisect_right(a, x_before)\n    '''\n    #i = bisect.bisect_left(a, x_before)\n    #if x < x_before:\n    i = bisect.bisect_left(a, x_before)\n    if a[i]!= x:\n        a[i:i+1] = [x, x]\n    return a\ndef search_for_val(a, x):\n    '''\n    a = sorted(a)\n    i = bisect.bisect_left(a, x)\n    if x < a[i] and x >= a[i-1]:\n        return i\n    return -1\n    '''\n    #i = bisect.bisect_left(a, x)\n    #if x < a[i] and x >= a[i-1]:\n        #return i-1\n    return bisect.bisect_right(a, x)\n    #return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # pass\n    # Your Code Here\n    for i, item in enumerate(a):\n        if x < item:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return -1\n    i = 0\n    while i + 1 < n and a[i] >= a[i + 1]:\n        i += 1\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #return bisect.bisect_left(a, x, lo=0, hi=len(a))\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Implement the left_insertion function\n    j = 0\n    while a[j] < x and j < len(a):\n        j += 1\n    if j > len(a) and a[j] >= x:\n        return j\n    else:\n        return j\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low=0\n    high=len(a)-1\n    while low<high:\n        mid=(low+high)//2\n        if a[mid]<=x:\n            low=mid+1\n        else:\n            high=mid\n    return low\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None \ndef check_str_punct(string): \n    '''\n    Write a function to check whether the given string is starting with a punctuation mark or not using regex.\n    '''\n    return re.search(r'[!@#$%&\\`]', string) is not None \ndef check_str_mail(string): \n    '''\n    Write a function to check whether the given string is starting with a mail address or not using regex.\n    '''\n    return re.search(r'[^@][a-zA-Z0-9_\\-_]*@[a-zA-Z0-9_\\-_]*\\.[a-zA-Z0-9_]*', string) is not None \ndef check_str_phone(string): \n    '''\n    Write a function to check whether the given string is starting with a phone number or not using regex.\n    '''\n    return re.search(r'[0-9][0-9]\\.[0-9]{4}', string) is not None \ndef check_str_num(string): \n    '''\n    Write a function to check whether the given string is starting with a number or not using regex.\n    '''\n    return re.search(r'\\d+', string) is not None \ndef check_str_phon(string): \n    '''\n    Write a function to check whether the given string is starting with a phone number or not using regex.\n    '''\n    return re.search(r'[a-zA-Z0-9]+[a-zA-Z0-9]', string) is not None \ndef check_str_alpha(string): \n    '''\n    Write a function to check whether the given string is starting with a phone number or not using regex.\n    '''\n    return re.search(r'\\w\\d{2,7}', string) is not None \ndef check_str_email(string): \n    '''\n    Write a function to check whether the given string is starting with an email address or not using regex.\n    '''\n    return re.search(r'[^@][a-zA-Z0-9\\-_]*@[a-zA-Z0-9\\-_]*\\.[a-zA-Z0-9]*', string) is not None \ndef check_str_time(string): \n    '''\n    Write a function to check whether the given string is starting with a time or not using regex.\n    '''\n    return re.search(r'[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}', string) is not None \ndef check_str_date(string): \n    '''\n    Write a function to check whether the given string is starting with a date or not using regex.\n    '''\n    return re.search(r'[0-9]{4}-0[0-9]{2}-0[0-9]{2}', string) is not None \ndef check_str_space(string): \n    '''\n    Write a function to check whether the given string is starting with a space or not using regex.\n    '''\n    return re.search(r'[\\s]', string) is not None \ndef check_str_special(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[!]', string) is not None \ndef check_str_special_numerics(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[+]', string) is not None \ndef check_str_special_letter(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-z]', string) is not None \ndef check_str_special_period(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-zA-Z]*\\.[a-zA-Z0-9]{4}', string) is not None \ndef check_str_special_digit(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-zA-Z0-9]*\\d', string) is not None \ndef check_str_special_space(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[\\s]', string) is not None \ndef check_str_special_special(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[!]', string) is not None \ndef check_str_special_special_number(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[+]', string) is not None \ndef check_str_special_special_letter(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-z]', string) is not None \ndef check_str_special_special_period(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-zA-Z]*\\.[a-zA-Z0-9]{4}', string) is not None \ndef check_str_special_special_digit(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-zA-Z0-9]*\\d', string) is not None \ndef check_str_special_special_space(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[\\s]', string) is not None \ndef check_str_special_special_special(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[!]', string) is not None \ndef check_str_special_special_special_number(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[+]', string) is not None \ndef check_str_special_special_special_letter(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-z]', string) is not None \ndef check_str_special_special_special_period(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-zA-Z]*\\.[a-zA-Z0-9]{4}', string) is not None \ndef check_str_special_special_special_digit(string): \n    '''\n    Write a function to check whether the given string is starting with a special character or not using regex.\n    '''\n    return re.search(r'[a-zA-Z0-9]*\\d', string"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (string.lower() in 'aeiouAEIOU'): return True\n    else: return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if not re.search(regex, string):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)!= None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string) and re.search(regex,string[0]):\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_num(string): \n    '''\n    Write a function to check whether the given string is a number or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_bool(string): \n    '''\n    Write a function to check whether the given string is a boolean or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_lower(string): \n    '''\n    Write a function to check whether the given string is lower case or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_upper(string): \n    '''\n    Write a function to check whether the given string is upper case or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_digit(string): \n    '''\n    Write a function to check whether the given string is a digit or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_all(string): \n    '''\n    Write a function to check whether the given string is a multiple of all the given characters or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_s(string): \n    '''\n    Write a function to check whether the given string is a single character or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q(string): \n    '''\n    Write a function to check whether the given string is a question mark or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_d(string): \n    '''\n    Write a function to check whether the given string is a dash or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_w(string): \n    '''\n    Write a function to check whether the given string is a word or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_e(string): \n    '''\n    Write a function to check whether the given string is a e or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_r(string): \n    '''\n    Write a function to check whether the given string is a right dot or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_y(string): \n    '''\n    Write a function to check whether the given string is a y or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q_dash(string): \n    '''\n    Write a function to check whether the given string is a question dash or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q_word(string): \n    '''\n    Write a function to check whether the given string is a question word or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_e_dot(string): \n    '''\n    Write a function to check whether the given string is an e or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_e_word(string): \n    '''\n    Write a function to check whether the given string is an e or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q_dash_dot(string): \n    '''\n    Write a function to check whether the given string is a question dash dash or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q_word_dot(string): \n    '''\n    Write a function to check whether the given string is a question word dash or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_d_dot(string): \n    '''\n    Write a function to check whether the given string is a dash dot or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_d_word(string): \n    '''\n    Write a function to check whether the given string is a dash word or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_r_dot(string): \n    '''\n    Write a function to check whether the given string is a right dot or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_y_dot(string): \n    '''\n    Write a function to check whether the given string is a y or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q_dash_dot_dot(string): \n    '''\n    Write a function to check whether the given string is a question dash dash dot dot or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_y_word_dot(string): \n    '''\n    Write a function to check whether the given string is a y word or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_s_dot(string): \n    '''\n    Write a function to check whether the given string is a single character or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_s_word(string): \n    '''\n    Write a function to check whether the given string is a single character or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q_dash_dot_dot_dot(string): \n    '''\n    Write a function to check whether the given string is a question dash dash dash dot dot dot or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_q_word_dot_dot(string): \n    '''\n    Write a function to check whether the given string is a question word dash dash dash dash or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\ndef check_s_dot_dot_dot(string): \n    '''\n    Write a function to check whether the given string is a single character or not using regex"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    vowels = ['a','e','i','o','u']\n    if not any(re.match(regex, string) for string in vowels):\n        return 'true'\n    else:\n        return 'false'\n    \ndef check_str_1(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    vowels = ['a','e','i','o','u']\n    if any(re.match(regex, string[:i]) for i in range(len(string))):\n        return 'true'\n    else:\n        return 'false'\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return (re.search(regex, string))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        sum += i\n    return sum\n    \n    # Time complexity: O(n)\n    # Space complexity: O(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(geometric_sum(n-1) if n>1 else n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return n\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n<10):\n        return n\n    return n%10"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    largest = -1\n    smallest = n\n    for i in range(1, n+1):\n        temp = i*i\n        if temp > largest:\n            largest = temp\n        if temp < smallest:\n            smallest = temp\n    return largest-smallest\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (n!= 0):\n        m = n%10\n        n = n//10\n        i = i + 1\n    if (n == 0):\n        return -1\n    else:\n        return i-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<=0: \n        return None \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    elif n==2: \n        return 0\n    elif n==3: \n        return 1\n    elif n==4: \n        return 2\n    elif n==5: \n        return 3\n    elif n==6: \n        return 4\n    elif n==7: \n        return 5\n    elif n==8: \n        return 6\n    elif n==9: \n        return 7\n    elif n==10: \n        return 8\n    elif n==11: \n        return 9\n    elif n==12: \n        return 10\n    elif n==13: \n        return 11\n    elif n==14: \n        return 12\n    elif n==15: \n        return 13\n    elif n==16: \n        return 14\n    elif n==17: \n        return 15\n    elif n==18: \n        return 16\n    elif n==19: \n        return 17\n    elif n==20: \n        return 18\n    elif n==21: \n        return 19\n    elif n==22: \n        return 20\n    elif n==23: \n        return 21\n    elif n==24: \n        return 22\n    elif n==25: \n        return 23\n    elif n==26: \n        return 24\n    elif n==27: \n        return 25\n    elif n==28: \n        return 26\n    elif n==29: \n        return 27\n    elif n==30: \n        return 28\n    elif n==31: \n        return 29\n    elif n==32: \n        return 30\n    elif n==33: \n        return 31\n    elif n==34: \n        return 32\n    elif n==35: \n        return 33\n    elif n==36: \n        return 34\n    elif n==37: \n        return 35\n    elif n==38: \n        return 36\n    elif n==39: \n        return 37\n    elif n==40: \n        return 38\n    elif n==41: \n        return 39\n    elif n==42: \n        return 40\n    elif n==43: \n        return 41\n    elif n==44: \n        return 42\n    elif n==45: \n        return 43\n    elif n==46: \n        return 44\n    elif n==47: \n        return 45\n    elif n==48: \n        return 46\n    elif n==49: \n        return 47\n    elif n==50: \n        return 48\n    elif n==51: \n        return 49\n    elif n==52: \n        return 50\n    elif n==53: \n        return 51\n    elif n==54: \n        return 52\n    elif n==55: \n        return 53\n    elif n==56: \n        return 54\n    elif n==57: \n        return 55\n    elif n==58: \n        return 56\n    elif n==59: \n        return 57\n    elif n==60: \n        return 58\n    elif n==61: \n        return 59\n    elif n==62: \n        return 60\n    elif n==63: \n        return 61\n    elif n==64: \n        return 62\n    elif n==65: \n        return 63\n    elif n==66: \n        return 64\n    elif n==67: \n        return 65\n    elif n==68: \n        return 66\n    elif n==69: \n        return 67\n    elif n==70: \n        return 68\n    elif n==71: \n        return 69\n    elif n==72: \n        return 70\n    elif n==73: \n        return 71\n    elif n==74: \n        return 72\n    elif n==75: \n        return 73\n    elif n==76: \n        return 74\n    elif n==77: \n        return 75\n    elif n==78: \n        return 76\n    elif n==79: \n        return 77\n    elif n==80: \n        return 78\n    elif n==81: \n        return 79\n    elif n==82: \n        return 80\n    elif n==83: \n        return 81\n    elif n==84: \n        return 82\n    elif n==85: \n        return 83\n    elif n==86: \n        return 84\n    elif n==87: \n        return 85\n    elif n==88: \n        return 86\n    elif n==89: \n        return 87\n    elif n==90: \n        return 88\n    elif n==91: \n        return 89\n    elif n==92: \n        return 90\n    elif n==93: \n        return 91\n    elif n==94: \n        return 92\n    elif n==95: \n        return 93\n    elif n==96: \n        return 94\n    elif n==97: \n        return 95\n    elif n==98: \n        return 96\n    elif n==99: \n        return 97\n    elif n==100: \n        return 98\n    elif n==101: \n        return 99\n    elif n==102: \n        return 100\n    elif n==103: \n        return 101\n    elif n==104: \n        return 102\n    elif n==105: \n        return 103\n    elif n==106: \n        return 104\n    elif n==107: \n        return 105\n    elif n==108: \n        return 106\n    elif n==109: \n        return 107\n    elif n==110: \n        return 108\n    elif n==111: \n        return 109\n    elif n==112: \n        return 110\n    elif n==113: \n        return 111\n    elif n==114: \n        return 112\n    elif n==115: \n        return 113\n    elif n==116: \n        return 114\n    elif n==117: \n        return 115\n    elif n==118: \n        return 116\n    elif n==119: \n        return 117\n    elif n==120: \n        return 118\n    elif n==121: \n        return 119\n    elif n==122: \n        return 120\n    elif n==123: \n        return 121\n    elif n==124: \n        return 122\n    elif n==125: \n        return 123\n    elif n==126: \n        return 124\n    elif n==127: \n        return 125\n    elif n==128: \n        return 126\n    elif n==129: \n        return 127\n    elif n==130: \n        return 128\n    elif n==131: \n        return 129\n    elif n==132: \n        return 130\n    elif n==133: \n        return 131\n    elif n==134: \n        return 132\n    elif n==135: \n        return 133\n    elif n==136: \n        return 134\n    elif n==137: \n        return 135\n    elif n==138: \n        return 136\n    elif n==139: \n        return 137\n    elif n==140: \n        return 138\n    elif n==141: \n        return 139\n    elif n==142: \n        return 140\n    elif n==143: \n        return 141\n    elif n==144: \n        return 142\n    elif n==145: \n        return 143\n    elif n==146: \n        return 144\n    elif n==147: \n        return 145\n    elif n==148: \n        return 146\n    elif n==149: \n        return 147\n    elif n==150: \n        return 148\n    e"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Task\n    # Write a function to find the index of smallest triangular number with n digits.\n    #\n    # Example:\n    #\n    # find_Index(10) -> 5\n    # find_Index(3) -> 0\n    # find_Index(32) -> 6\n    # find_Index(16) -> 7\n    #\n    #\n    # Input\n    # Integer number which needs to be found in given number of digits.\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    list_n = range(1, n+1) \n    list_n.sort()\n    count = 0\n    for i in list_n: \n        if(i == (n+1) // 2): \n            count = count + 1\n    return count\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(2,n+1): \n        x = n\n        for j in range(2, i): \n            if (i % j == 0): \n                x = i \n                break\n        if (x!= i): \n            return x\n    return '-1'\ndef fibonacci(n): \n    if n < 2: \n        return n \n    return fibonacci(n - 2) + fibonacci(n - 1) \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    f = 0\n    for i in range(2,n+1):\n        if n % i == 0:\n            f = i\n            break\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = 1\n    for i in range(n):\n        a += 1\n        b = 0\n        for j in range(a):\n            b += 1\n            if b > 3:\n                break\n            if b == 3:\n                if b == 2:\n                    return i\n    return None\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr = []\n    \n    for i in range(n + 1):\n        arr.append(i)\n    arr.append(0)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d={}\n    for i in range(0,len(test_tup)):\n        for j in range(0,i+1):\n            d[test_tup[j]]=test_tup[i]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    #convert tup to dictionary\n    for idx, item in enumerate(test_tup):\n        d[item] = idx\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # First case, if input is a tuple and there is only one element, return the element.\n    if len(test_tup) == 1:\n        return test_tup[0]\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dic = dict()\n    # iterate over the tuple\n    for i in test_tup:\n        dic[i] = test_tup.count(i)\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output_dict = {}\n    for i in range(len(test_tup)):\n        output_dict[test_tup[i][0]] = test_tup[i][1]\n    return output_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    dict = {}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) == 0:\n        return {}\n    dct = {}\n    for i in range(len(test_tup)):\n        dct[test_tup[i]] = test_tup[i+1]\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    for i in range(len(test_tup)):\n        res[test_tup[i][0]] = test_tup[i][1]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_test = {}\n    for ele in test_tup:\n        dict_test[ele] = tuple_to_dict(tuple(test_tup))\n    return dict_test\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for elem in test_tup:\n        d[elem] = test_tup.index(elem)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    if len(s) == 1 :\n        return True\n    if len(s) == 2 :\n        return True\n    if s[0] == s[1] :\n        return True\n    if len(s) % 2 == 0 :\n        return False\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    t = s.upper()\n    for char in t :\n        if (char == char.upper()) :\n            continue\n        elif (char.isupper()) :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    characters_list = list(s)\n    #print(characters_list)\n    #print(\"The characters in given string are : {}\".format(characters_list))\n    for char in characters_list:\n        if char not in unique_char:\n            unique_char.append(char)\n        else:\n            pass\n        \n    print(unique_char)\n    \n    if len(unique_char) == len(set(unique_char)):\n        print(\"All characters are Unique\")\n    else:\n        print(\"All characters are not Unique\")\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s :\n        if i in s and i in s :\n            count += 1\n    if count == len(s) :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s:\n        if i not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz':\n            count = count + 1\n    return count == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = list(s)\n    for char in s:\n        if char not in char_list:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i.isalpha() == False :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    from collections import Counter\n    def is_Same(s1,s2):\n        c=Counter(s1)\n        for char,count in c.items():\n            if char not in s2:\n                return False\n            if count!= s2[char]:\n                return False\n        return True\n    return is_Same(s,s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a list to store the characters\n    characters = list(s)\n    \n    # Loop through the string\n    for char in s:\n        # Check if the character is already present in the list\n        if char in characters:\n            # Check if the character is same as the previous one\n            if char!= characters[characters.index(char)]:\n                return False\n        \n        # Append the character to the list\n        characters.append(char)\n        \n    # Return if it all the characters are same\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Initialize empty dict and return result\n    char_dict = {}\n    for char in s :\n        char_dict[char] = 0\n    return char_dict\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 6*side*side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_side = side\n    side_side = int(side)\n    side_side = int(side)\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = int(side_side)\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side**2\n    side_side = int(side_side)\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    side_side = side_side\n    sid"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 4 * math.pi * side**2\n    print(f'The area of a tetrahedron with side {side} is {area}')\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(side**2 - 4 * side)) * (math.sqrt(side**2 - 4 * side))\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2*3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    side = side/2\n    for i in range(3):\n        area = area + side**(i+1)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (4*side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 * math.pi * 6\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'I':\n        side = 1\n    else:\n        side = -1\n    return (4*side)**2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = side.lower()\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'zero':\n        return 0.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if side == 'nine':\n        return 9.0\n    if side == 'ten':\n        return 10.0\n    if side == 'eleven':\n        return 11.0\n    if side == 'twelve':\n        return 12.0\n    if side == 'one':\n        return 1.0\n    if side == 'two':\n        return 2.0\n    if side == 'three':\n        return 3.0\n    if side == 'four':\n        return 4.0\n    if side == 'five':\n        return 5.0\n    if side =='six':\n        return 6.0\n    if side =='seven':\n        return 7.0\n    if side == 'eight':\n        return 8.0\n    if sid"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    for i in range(l//2):\n        if (i < l//2):\n            temp = list[i]\n            j = i\n            while(j < l-i-1):\n                list[j] = list[j+1]\n                j += 1\n            list[i] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return rotate_right_list(list, m, len(list)-m)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop())\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Our head\n    head = list[0]\n    # How many items we need to move to the right\n    n = len(list)\n    # The indices of the head\n    i = 0\n    # The index we are moving backwards to\n    j = n - 1\n    # The index we are moving back to\n    k = 0\n    # The index of the end of our list\n    l = n - 1\n    # How many items are left in the list\n    m = len(list)\n    # While the end of the list is not reached\n    while (i < j) and (k < m):\n        # Let's find the next item to be moved forward\n        # This is where the function looks to the right for the reverse\n        if (list[j] == head):\n            i += 1\n            j -= 1\n            k = j\n            j = n - 1\n            if (j == -1):\n                l = n - 1\n                j = n - 1\n        else:\n            j -= 1\n    # Now that we know where the end of the list is, lets move it to the end of the list\n    l += 1\n    list[l] = head\n    # Let's move the head forward\n    list[i] = head\n    # Let's move the tail forward to the end\n    while (i < m):\n        list[i] = list[i+1]\n        i += 1\n    # Let's move the tail forward to the end\n    list[j] = list[j + 1]\n    # Let's move the head forward\n    list[k] = list[k + 1]\n    # Let's move the tail forward to the end\n    list[l] = list[l + 1]\n    # Let's return the list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp_list = []\n    # access elements from front to end of list\n    for i in range(len(list)):\n        temp_list.insert(0,list[i])\n        # remove elements from front to end\n        list.pop(i)\n        \n    # access elements from end to front of list\n    for i in range(len(list)-m):\n        temp_list.append(list[-1])\n        list.pop()\n        \n    # return modified list\n    return temp_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Write your code here\n    left_index = 0\n    right_index = n - 1\n    while left_index < right_index:\n        temp = list[left_index]\n        list[left_index] = list[right_index]\n        list[right_index] = temp\n        left_index += 1\n        right_index -= 1\n    return list\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = len(list)\n    while len(list)>0:\n        if len(list)>1:\n            temp-=1\n            list = list[:temp] + list[temp:]\n    return list\n    \n    \ndef reverse(list):\n    '''\n    Write a function to reverse a given list.\n    '''\n    if len(list)>1:\n        temp = len(list)\n        while temp>0:\n            list[temp-1],list[temp] = list[temp-1],list[temp]\n            temp-=1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, m):\n        # i = (m - 1) % len(list)\n        a = i % len(list)\n        list[a], list[(a + m) % len(list)] = list[(a + m) % len(list)], list[a]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[::-1]\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is None or any(x is None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if all(test_tup):\n        return True\n    else:\n        return False\n    \n    \ndef is_true(test_tup):\n    '''\n    Write a function to check if all the elements in the tuple are true or not.\n    '''\n    return all(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        print(f'{test_tup} has a None value')\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = list(test_tup)\n    if len(test_tup) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        print(f'Yes, {test_tup[1]} is not None')\n    else:\n        print(f'Yes, {test_tup[1]} is not None')\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        for ele in test_tup:\n            if ele is None:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    range = (startnum, endnum + 1)\n    \n    return list(filter(lambda x: x % 10 == 0, range))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def num_in_range(start, end, divisor):\n        '''\n        Returns number which is divisible by divisor and between start and end\n        '''\n        counter = 0\n        for num in range(start, end):\n            if num % divisor == 0:\n                counter += 1\n        return counter\n    \n    divisors = [1, 3, 5, 7, 9, 11]\n    \n    startnum = int(startnum)\n    endnum = int(endnum)\n    divisor = divisors[startnum % len(divisors)]\n    \n    for num in range(startnum, endnum):\n        if num % divisor == 0:\n            yield num\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = str(startnum)\n    endnum = str(endnum)\n    digits = []\n    for i in range(len(startnum)):\n        digits.append(int(startnum[i])*10)\n    for i in range(len(endnum)):\n        digits.append(int(endnum[i])*10)\n    return [int(num) % 10 for num in digits if int(num) % 10 in digits]"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    output_list = []\n    for i in range(startnum, endnum+1):\n        temp = list(i)\n        digit_count = 0\n        while(i!= 0):\n            digit_count += 1\n            i = i // 10\n        if digit_count <= temp[-1]:\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num):\n        return num % 10 == 0\n    return [num for num in range(startnum, endnum) if is_divisible(num)]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % 10 == 0, range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    from itertools import count, filterfalse\n    output = []\n    for digit in range(startnum, endnum + 1):\n        output.append(list(filterfalse(lambda x: x % digit == 0, count(digit))))\n    return output\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for num in range(startnum, endnum+1):\n        lst.append(num)\n    for num in range(0, len(lst)):\n        if lst[num] % 10 == 0:\n            lst[num] = 'number'\n    return lst\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    \n    # If the number is less than or equal to the startnum and less than or equal to the endnum, return True\n    if startnum <= endnum:\n        if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n            return True\n    # If the number is less than or equal to the startnum and more than or equal to the endnum, return False\n    else:\n        if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n            return False\n    # If there is no number between the startnum and the endnum, return True\n    if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return False\n    if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and more than or equal to the startnum, return True\n    if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n        return True\n    \n    # If the number is equal to the startnum and less than or equal to the endnum, return True\n    if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n        return True\n    \n    # If the number is equal to the endnum and less than or equal to the startnum, return False\n    if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and more than or equal to the startnum, return False\n    if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return True\n    if startnum <= int(str(startnum) + str(startnum)) <= endnum:\n        return True\n    \n    # If the number is greater than or equal to the endnum and less than or equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is greater than or equal to the endnum and more than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is greater than or equal to the endnum and equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and more than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is more than or equal to the endnum and less than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is more than or equal to the endnum and equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and less than or equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and greater than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is greater than or equal to the endnum and less than or equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is greater than or equal to the endnum and equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and less than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and greater than or equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is greater than or equal to the endnum and less than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is greater than or equal to the endnum and equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and less than or equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and greater than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and less than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and greater than or equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is greater than or equal to the endnum and less than or equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is greater than or equal to the endnum and equal to the startnum, return False\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return False\n    \n    # If the number is less than or equal to the endnum and equal to the startnum, return True\n    if startnum >= int(str(startnum) + str(startnum)) >= endnum:\n        return True\n    \n    # If the number is less than or equal to the endnum and less than or equal to the startnum, return False\n    if startnum >= int(str(startnum) + st"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    s = startnum\n    e = endnum\n    count = 0\n    while s!= e:\n        if s%10 == 0 and s%100!= 0:\n            if e%10 == 0 and e%100!= 0:\n                count += 1\n            else:\n                if e%10 == 0:\n                    count += 1\n                else:\n                    count += 1\n        elif s%10 == 0:\n            count += 1\n        elif e%10 == 0:\n            count += 1\n        else:\n            count += 1\n        s += 1\n        e += 1\n    return count\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = r*r*a\n    if sector_area >= 1:\n        print(\"Inside area function\")\n    else:\n        print(\"Outside area function\")\n    print(sector_area)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #convert angle to degrees\n    #a=math.radians(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        print(\"Angle must be between 0 and 360 degrees\")\n        return None\n    area=0.5*r*math.sin(a*math.pi/180)\n    print(\"Area of sector is: \",round(area,2))\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # TODO: define function that returns the area of a sector\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a==0 or a==360 or a==-360 or a==-90 or a==90 or a==0):\n        print(\"Invalid angle\")\n        return None\n    else:\n        phi = math.radians(a)\n        theta = math.radians((r+360)/360*math.pi)\n        sec_area = math.sqrt(math.pow(math.cos(theta),2)+math.pow(math.sin(theta),2))\n        return sec_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_inverse_perimeter(r,angle,a):\n    '''\n    Write a function to find inverse perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_side_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_square_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_square_side_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_fibonacci_number(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_fibonacci_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_trisected_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_trisected_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_pascal_number(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_pascal_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_solid_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_solid_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_circle_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_circle_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_pentagon_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_pentagon_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_pentagon_side_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_octagon_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_octagon_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_octagon_side_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_hexagon_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_hexagon_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_hexagon_side_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_square_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_square_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_square_side_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_triangle_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_triangle_perimeter(r,angle,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_triangle_side_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_sphere_area(r,angle,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef find_sphere_perimeter(r,angle,a):\n    '''\n    Write "
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #counts the angle range\n    ang = math.ceil(math.fabs(math.degrees(math.atan2(r,r))))\n    #radius of the sector\n    s = math.pi/4\n    #determines the area\n    area = s*(s-1)*math.sin(math.radians(ang))\n    #returns\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0 and r < math.pi * 2 and a < math.pi * 2:\n        return math.pi * r * a\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a * math.pi / 180\n    c = math.cos(a)\n    s = math.sin(a)\n    r = math.sqrt(r)\n    if r == 0:\n        return math.atan2(s,c)\n    else:\n        r = r - 2\n        if r % 2 == 0:\n            c1 = math.cos(a)\n            c2 = math.cos(a)\n            d = math.sin(a)\n            a = a - c2\n            a = a - c1\n            return (c1 * c2) * math.sqrt(r * r - 2 * d * d * r)\n        else:\n            c1 = math.cos(a)\n            c2 = math.cos(a)\n            d = math.sin(a)\n            a = a - c2\n            a = a - c1\n            return (c1 * c2) * math.sqrt(r * r + 2 * d * d * r - 2 * d * c1 * c1 * r)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Implement your code here\n    area = (2 * math.tan(math.radians(a)))*(r**2)*(math.sin(math.radians(a))**2)\n    return area\n    #raise NotImplementedError\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if(len(X) == 0 and len(Y) == 0 and len(Z) == 0): return ''\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # declaring the variables\n    N = len(X)\n    M = len(Y)\n    T = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #initialize the result variable\n    LCS = [[None]*(len(Z)+1) for i in range(len(Z)+1)]\n    #initialize first row and column \n    for j in range(1, len(Z)+1):\n        LCS[j][0] = 0\n        for i in range(1, j):\n            if Z[i-1] == Z[j-1]:\n                LCS[j][i] = 1 + LCS[j-1][i-1]\n            else:\n                LCS[j][i] = max(LCS[j-1][i], LCS[j][i-1])\n        #print(LCS)\n    #print(LCS[-1][-1])\n    #print(LCS)\n    for i in range(1, len(Z)+1):\n        for j in range(1, len(Z)+1):\n            if Z[i-1] == Z[j-1]:\n                LCS[j][i] = LCS[j-1][i-1]\n            else:\n                LCS[j][i] = max(LCS[j-1][i], LCS[j][i-1], LCS[j-1][i-1])\n    return LCS[-1][-1]"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_four(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_five(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given five string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-five-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_six(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given six string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-six-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_seven(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given seven string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-seven-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_eight(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given eight string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-eight-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_nine(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given nine string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-nine-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_ten(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given ten string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-ten-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens[0]):\n        for j in range(i+1):\n            if X[i] == Y[j] or Z[i] == Y[j] or X[j] == Z[i]:\n                LCS[i][j] = LCS[i][j-1]+1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[lens[-1]][lens[-1]-1]\ndef lcs_of_eleven(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given eleven string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-eleven-strings/\n    '''\n    lens = [len(x) for x in X, Y, Z]\n    LCS = [[0 for i in range(lens[i])] for i in range(lens[i])]\n    for i in range(lens["
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #this function will take two inputs, strings X and Y, and print the Longest Common Subsequence.\n    #this function will return the length of the longest common subsequence\n    #pass\n    m = len(X)\n    n = len(Y)\n    lcs = [[0]*(n+1) for i in range(m+1)]\n    \n    #this function will take two inputs, strings X and Y, and print the Longest Common Subsequence.\n    #this function will return the length of the longest common subsequence\n    #pass\n    \n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if X[i-1] == Y[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    dp = [[0 for x in range(l)] for y in range(m)]\n    for x in range(m - 1):\n        for y in range(n - 1):\n            if X[x] == Y[y] and Z[x] == Z[y]:\n                dp[x][y] = 1 + dp[x + 1][y + 1]\n            else:\n                dp[x][y] = max(dp[x + 1][y], dp[x][y + 1])\n    return dp[0][0]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    m = len(Z)\n    s = [[0 for i in range(m+1)] for j in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                s[i][j] = s[i-1][j-1] + 1\n            else:\n                s[i][j] = max(s[i-1][j], s[i][j-1])\n    \n    print(s[n][m])\n    return s[n][m]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) > len(Y) and len(X) > len(Z):\n        X, Y, Z = Z, Y, X\n    if len(Y) > len(X) and len(Y) > len(Z):\n        X, Y, Z = Z, Y, X\n    if len(Z) > len(X) and len(Z) > len(Y):\n        X, Y, Z = Y, Z, X\n    if len(X) > len(Y) and len(X) > len(Z):\n        X, Y, Z = Z, Y, X\n    if len(X) > len(Y) and len(Y) > len(Z):\n        X, Y, Z = Y, Z, X\n    if len(X) > len(Y) and len(Y) > len(Z):\n        X, Y, Z = Z, Y, X\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    the input is list of three strings\n    the output is an integer\n    '''\n    \n    # # === your code here ===\n    \n    X = X.split()\n    Y = Y.split()\n    Z = Z.split()\n    # # === your code here ===\n    \n    # get length of the first string\n    x = len(X)\n    # get length of the second string\n    y = len(Y)\n    z = len(Z)\n    # get the maximum length of the three strings\n    maxLength = max(x, y, z)\n    # build a list\n    dp = [[0] * (maxLength+1) for _ in range(x+1)]\n    for i in range(x+1):\n        dp[i][0] = 1\n    for i in range(y+1):\n        dp[0][i] = 1\n    for i in range(z+1):\n        dp[i][0] = 1\n    # print the dp\n    print(dp)\n    \n    # define the lcs(longest common substring)\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                # if the current index is 0\n                # then the lcs is zero\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j+1] = 0\n                # if the current index is 1\n                # then the lcs is equal to the previous\n                elif i == 1 or j == 1 or k == 1:\n                    dp[i][j+1] = dp[i-1][j] + dp[i-1][k]\n                    print(dp)\n                else:\n                    # case 1\n                    if j >= i:\n                        dp[i][j+1] = dp[i-1][j]\n                    else:\n                        dp[i][j+1] = dp[i-1][j-i] + dp[i-1][k]\n                    print(dp)\n    print(dp)\n    # get the lcs\n    lcs = ''\n    i = x+1\n    j = y+1\n    k = z+1\n    while i > 0 and j > 0 and k > 0:\n        if dp[i][j] > dp[i-1][j-1] + dp[i-1][k]:\n            lcs = lcs + Z[j-1]\n            j -= 1\n            k -= 1\n        elif dp[i][j] < dp[i-1][j-1] + dp[i-1][k]:\n            lcs = lcs + X[i-1]\n            i -= 1\n        else:\n            i -= 1\n    print(lcs)\n    print(dp)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    # create a dp table to store lcs value\n    dp = [[0]*(n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # print(dp)\n    # print(dp[-1][-1])\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\".\", \"\")\n    str1 = str1.replace(\":\", \"\")\n    str1 = str1.replace(\"!\", \"\")\n    str1 = str1.replace(\"(\", \"\")\n    str1 = str1.replace(\")\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"\\\"\", \"\")\n    str1 = str1.replace(\"\\'\", \"\")\n    str1 = str1.replace(\"?\", \"\")\n    str1 = str1.replace(\";\", \"\")\n    str1 = str1.replace(\";\", \"\")\n    str1 = str1.replace(\"*\", \"\")\n    str1 = str1.replace(\"=\", \"\")\n    str1 = str1.replace(\"+\", \"\")\n    str1 = str1.replace(\";\", \"\")\n    str1 = str1.replace(\";\", \"\")\n    str1 = str1.replace(\"~\", \"\")\n    str1 = str1.replace(\".\", \"\")\n    str1 = str1.replace(\"+\", \"\")\n    str1 = str1.replace(\"+\", \"\")\n    str1 = str1.replace(\"+\", \"\")\n    str1 = str1.replace(\"+\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"\\\"\", \"\")\n    str1 = str1.replace(\"\\'\", \"\")\n    str1 = str1.replace(\"\\\"\", \"\")\n    str1 = str1.replace(\"\\'\", \"\")\n    str1 = str1.replace(\"?\", \"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    str1 = str1.replace(\"*\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    str1 = str1.replace(\"*\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    str1 = str1.replace(\"*\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str_lst = str1.split()\n    for x in range(len(str_lst)):\n        if str_lst[x][0].isupper():\n            str_lst[x] = str_lst[x][0].upper() + \" \"\n    return''.join(str_lst)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\b\\w+\\b','', str1).strip().lower().split()\n    str3 = list(map(lambda x: x.capitalize(), str2))\n    str4 = list(filter(lambda x: x, str3))\n    return str4\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    spl = re.split(r'[^A-Z]', str1)\n    for i in range(len(spl)):\n        if(spl[i][0].isupper()):\n            spl[i] = spl[i][0].upper() + spl[i][1:].lower()\n    return \" \".join(spl)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(' ', '')\n    str1 = re.sub('[^A-Za-z0-9]','', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #split string into words\n    str_list = str1.split(\" \")\n    #iterate through words\n    for i in range(0,len(str_list)):\n        #get the first word\n        word = str_list[i]\n        #remove punctuation\n        punctuation = re.sub(r'[^a-zA-Z]', '', word)\n        #remove special characters\n        special_chars = re.sub(r'[`!#$%&*+\\./:<=>?@^_`{|}~]', '', punctuation)\n        #capitalize word\n        capitalized_word = special_chars.upper()\n        #add capitalized word to list\n        str_list[i] = capitalized_word\n    #join words\n    final_str = \" \".join(str_list)\n    return final_str\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'^[A-Za-z]+[\\s]?', '', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'[^A-Za-z]+'\n    text = re.sub(pattern,' ',str1)\n    return text\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #input\n    str1 = str(input('Enter a string:\\n'))\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    final_string = ''\n    for word in str1.split():\n        final_string = final_string + word.capitalize() +''\n    return final_string\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = []\n    for i in nums_str:\n        try:\n            sorted_list.append(float(i))\n        except ValueError:\n            pass\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split(',')\n    nums_str.sort()\n    nums_str = ', '.join(nums_str)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Write your code here\n    for i in range(len(nums_str)):\n        for j in range(len(nums_str) - i - 1):\n            if nums_str[j].isdigit() and nums_str[j + 1].isdigit() and not nums_str[j + 1].isdigit():\n                break\n            elif nums_str[j].isdigit() and nums_str[j + 1].isdigit():\n                nums_str[j] = int(nums_str[j])\n                nums_str[j + 1] = int(nums_str[j + 1])\n        else:\n            pass\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # print(nums_str)\n    return sorted(nums_str, key=nums_str.count)\n    # nums_str = sorted(nums_str, key=lambda x: nums_str.count(x))\n    # nums_str = sorted(nums_str, key=lambda x: nums_str.index(x))\n    # return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # your code goes here\n    a_list=[]\n    for x in nums_str:\n        a_list.append(int(x))\n    a_list.sort()\n    #print(a_list)\n    for x in range(len(a_list)):\n        for y in range(len(a_list)):\n            if a_list[x]>a_list[y]:\n                a_list[x],a_list[y]=a_list[y],a_list[x]\n    print(a_list)\n    return a_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: x.replace('.','').replace(',','').isdigit())\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(int(i))\n    return sorted(nums)\n    # Note that you need to use the sorted() function in order to sort the numbers!\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # your code goes here\n    nums_str.sort(key = lambda x: int(x), reverse = False)\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # YOUR CODE HERE\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = sorted(nums_str)\n    return sorted_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_tup)!= 2:\n        print('Error: test tuple must have 2 elements.')\n        return\n    for i in range(0, len(test_list)):\n        if test_list[i] == test_tup[0] or test_list[i] == test_tup[1]:\n            print(f'Tuple #{i} is already in the list.')\n            return\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    try:\n        if test_list is None:\n            raise ValueError(\"The list is empty!\")\n        else:\n            for i in test_tup:\n                if i not in test_list:\n                    test_list.append(i)\n    except ValueError as e:\n        print(\"The list is empty!\")\n        print(e)\n    else:\n        print(f\"{test_list} is added to {test_tup}\")\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i].append(test_tup[i])\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \n    "
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    \ndef check_tuple(test_tup, test_list):\n    '''\n    Write a function to check if the given tuple is correct.\n    '''\n    return test_tup in test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    while i*2+1 < len(arr):\n        if arr[i] < arr[i*2]:\n            return False\n        i = i*2\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    if arr[i] < arr[(i + 1) % len(arr)]:\n        return False\n    return check_min_heap_helper(arr, (i + 1) // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i==0:\n        return True\n    elif i==1:\n        return False\n    if arr[i]<arr[i//2] or arr[i//2]<arr[i]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return check_min_heap_helper(arr, i)\n    \ndef min_heap(arr):\n    '''\n    Creates a min heap based off a given array\n    '''\n    for i in range(len(arr)//2, -1, -1):\n        heapify(arr, i, len(arr))\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 1:\n        return False\n    if i == 2:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    \n    if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1) or check_min_heap_helper(arr, 2 * i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    while i * 2 + 1 < len(arr) and arr[i * 2] < arr[i * 2 + 1]:\n        i = (i * 2)\n    if i == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        if arr[i] >= arr[i//2]:\n            return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i == len(arr)-1):\n        return True\n    else:\n        if (arr[i] < arr[i+1]):\n            return False\n        else:\n            return check_min_heap_helper(arr, i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return False\n    return (arr[i] > arr[i//2]) and check_min_heap_helper(arr, 2*i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Your Code Here\n    if i == len(arr) - 1:\n        return True\n    if arr[i] < arr[i+1]:\n        return False\n    return check_min_heap_helper(arr,i+1)\n    #return arr[i] < arr[i+1]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_nums = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 3131, 3331, 4331, 6331, 7331, 8331, 9331, 11331, 13331, 15331, 16331, 17331, 18331, 19331, 20331, 21331, 23331, 25331, 27331]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    fibo = [0, 1]\n    for i in range(2,n+1):\n        fibo.append(fibo[i-1] + fibo[i-2])\n    return fibo[n]\n    \ndef get_jacobsthal_num(n):\n    '''\n    Return the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return jacobsthal_num(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import math\n    i = math.ceil(n/2)\n    #print(\"i = \", i)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #print(\"n/2 = \", n/2)\n    #prin"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n < 0:\n        return -1\n    if n > 9:\n        return -1\n    print(\"Printing jacobsthal_num...\")\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3) + jacobsthal_num(n-4) + jacobsthal_num(n-5) + jacobsthal_num(n-6) + jacobsthal_num(n-7) + jacobsthal_num(n-8) + jacobsthal_num(n-9)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n < 1 or n > 10 ** 11:\n        raise ValueError('Invalid n!')\n    elif n == 1:\n        return 1\n    else:\n        return n + jacobsthal_num(n - 1)"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n < 2):\n        return n\n    \n    return (n%11)*(n%11) + (3*n//11)*((n%11)**2) + (5*n//11)*((n%11)**3) + (11*n//11)*((n%11)**4)"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n % 1000\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 1\n    if n == 4: return 1\n    if n == 5: return 2\n    if n == 6: return 2\n    if n == 7: return 2\n    if n == 8: return 3\n    if n == 9: return 5\n    if n == 10: return 7\n    if n == 11: return 9\n    if n == 12: return 11\n    if n == 13: return 12\n    if n == 14: return 13\n    if n == 15: return 14\n    if n == 16: return 15\n    if n == 17: return 16\n    if n == 18: return 17\n    if n == 19: return 18\n    if n == 20: return 19\n    if n == 21: return 20\n    if n == 22: return 21\n    if n == 23: return 22\n    if n == 24: return 23\n    if n == 25: return 24\n    if n == 26: return 25\n    if n == 27: return 26\n    if n == 28: return 27\n    if n == 29: return 28\n    if n == 30: return 29\n    if n == 31: return 30\n    if n == 32: return 31\n    if n == 33: return 32\n    if n == 34: return 33\n    if n == 35: return 34\n    if n == 36: return 35\n    if n == 37: return 36\n    if n == 38: return 37\n    if n == 39: return 38\n    if n == 40: return 39\n    if n == 41: return 40\n    if n == 42: return 41\n    if n == 43: return 42\n    if n == 44: return 43\n    if n == 45: return 44\n    if n == 46: return 45\n    if n == 47: return 46\n    if n == 48: return 47\n    if n == 49: return 48\n    if n == 50: return 49\n    if n == 51: return 50\n    if n == 52: return 51\n    if n == 53: return 52\n    if n == 54: return 53\n    if n == 55: return 54\n    if n == 56: return 55\n    if n == 57: return 56\n    if n == 58: return 57\n    if n == 59: return 58\n    if n == 60: return 59\n    if n == 61: return 60\n    if n == 62: return 61\n    if n == 63: return 62\n    if n == 64: return 63\n    if n == 65: return 64\n    if n == 66: return 65\n    if n == 67: return 66\n    if n == 68: return 67\n    if n == 69: return 68\n    if n == 70: return 69\n    if n == 71: return 70\n    if n == 72: return 71\n    if n == 73: return 72\n    if n == 74: return 73\n    if n == 75: return 74\n    if n == 76: return 75\n    if n == 77: return 76\n    if n == 78: return 77\n    if n == 79: return 78\n    if n == 80: return 79\n    if n == 81: return 80\n    if n == 82: return 81\n    if n == 83: return 82\n    if n == 84: return 83\n    if n == 85: return 84\n    if n == 86: return 85\n    if n == 87: return 86\n    if n == 88: return 87\n    if n == 89: return 88\n    if n == 90: return 89\n    if n == 91: return 90\n    if n == 92: return 91\n    if n == 93: return 92\n    if n == 94: return 93\n    if n == 95: return 94\n    if n == 96: return 95\n    if n == 97: return 96\n    if n == 98: return 97\n    if n == 99: return 98\n    if n == 100: return 99\n    if n == 101: return 100\n    if n == 102: return 101\n    if n == 103: return 102\n    if n == 104: return 103\n    if n == 105: return 104\n    if n == 106: return 105\n    if n == 107: return 106\n    if n == 108: return 107\n    if n == 109: return 108\n    if n == 110: return 109\n    if n == 111: return 110\n    if n == 112: return 111\n    if n == 113: return 112\n    if n == 114: return 113\n    if n == 115: return 114\n    if n == 116: return 115\n    if n == 117: return 116\n    if n == 118: return 117\n    if n == 119: return 118\n    if n == 120: return 119\n    if n == 121: return 120\n    if n == 122: return 121\n    if n == 123: return 122\n    if n == 124: return 123\n    if n == 125: return 124\n    if n == 126: return 125\n    if n == 127: return 126\n    if n == 128: return 127\n    if n == 129: return 128\n    if n == 130: return 129\n    if n == 131: return 130\n    if n == 132: return 131\n    if n == 133: return 132\n    if n == 134: return 133\n    if n == 135: return 134\n    if n == 136: return 135\n    if n == 137: return 136\n    if n == 138: return 137\n    if n == 139: return 138\n    if n == 140: return 139\n    if n == 141: return 140\n    if n == 142: return 141\n    if n == 143: return 142\n    if n == 144: return 143\n    if n == 145: return 144\n    if n == 146: return 145\n    if n == 147: return 146\n    if n == 148: return 147\n    if n == 149: return 148\n    if n == 150: return 149\n    if n == 151: return 150\n    if n == 152: return 151\n    if n == 153: return 152\n    if n == 154: return 153\n    if n == 155: return 154\n    if n == 156: return 155\n    if n == 157: return 156\n    if n == 158: return 157\n    if n == 159: return 158\n    if n == 160: return 159\n    if n == 161: return 160\n    if n == 162: return 161\n    if n == 163: return 162\n    if n == 164: return 163\n    if n == 165: return 164\n    if n == 166: return 165\n    if n == 167: return 166\n    if n == 168: return 167\n    if n == 169: return 168\n    if n == 170: return 169\n    if n == 171: return 170\n    if n == 172: return 171\n    if n == 173: return 172\n    if n == 174: return 173\n    if n == 175: return 174\n    if n == 176: return 175\n    if n == 177: return 176\n    if n == 178: return 177\n    if n == 179: return 178\n    if n == 180: return 179\n    if n == 181: return 180\n    if n == 182: return 181\n    if n == 183: return 182\n    if n == 184: return 183\n    if n == 185: return 184\n    if n == 186: return 185\n    if n == 187: return 186\n    if n == 188: return 187\n    if n == 189: return 188\n    if n == 190: return 189\n    if n == 191: return 190\n    if n == 192: return 191\n    if n == 193: return 192\n    if n == 194: return 193\n    if n == 195: return 194\n    if n == 196: return 195\n    if n == 197: return 196\n    if n == 198: return 197\n    if n == 199: return 198\n    if n == 200: return 199\n    if n == 201: return 200\n    if n == 202: return 201\n    if n == 203: return 202\n    if n == 204: return 203\n    if n == 205: return 204\n    if n == 206: return 205\n    if n == 207: return 206\n    if n == 208: return 207\n    if n == 209: return 208\n    if n == 210: return 209\n    if n == 211: return 210\n    if n == 212: return 211\n    if n == 213: return 212\n    if n == 214: return 213\n    if n == 215: return 214\n    if n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    assert type(n) == int and n >= 0\n    fact = [1, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_lucas = 0\n    jacobsthal_lucas = lucas(n)\n    print(jacobsthal_lucas)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    K_test_list = []\n    \n    for i in test_list:\n        K_test_list.append(i)\n        \n    K_test_list = tuple(K_test_list)\n    # print(K_test_list)\n    \n    return sorted(K_test_list)[:K]\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    tuple_list = [(x, y) for x, y in test_list]\n    return tuple_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = 0\n    a = sorted(test_list)\n    for i in range(len(a)):\n        if i!= a[i]:\n            k += 1\n    if K == 0:\n        return 1\n    elif K == 1:\n        return len(a) - k\n    elif K > 1:\n        return len(a) - k\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = test_list[0]\n    for i in test_list[1:]:\n        if minimum > i:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    # Create a list of tuples (k,n,m)\n    k_list = [ (min(tup[0:2]),tup[2],tup[0]) for tup in test_list[:K]]\n    return min(k_list)[1]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_list = [None] * len(test_list)\n    for i in range(0, len(test_list)):\n        min_k_list[i] = test_list[i][1]\n    return min(min_k_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n    else:\n        best = []\n        for i in range(0,K):\n            min_rec = test_list[0]\n            for x in test_list[1:]:\n                if x < min_rec:\n                    min_rec = x\n            best.append(min_rec)\n            test_list.remove(min_rec)\n        return best\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for item in test_list:\n        min_k.append(item[0])\n    min_k.sort()\n    return min_k[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_records = []\n    for i in range(len(test_list)):\n        min_k_records.append(test_list[i])\n    for i in range(K):\n        min_k_records.remove(min(min_k_records))\n    return min(min_k_records)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indexList = []\n    # print(type(l1))\n    # print(type(l2))\n    # print(type(l3))\n    if type(l1[0]) == list:\n        # print(l1[0])\n        # print(type(l1[0]))\n        for i in range(len(l1)):\n            for j in range(len(l1[i])):\n                if l1[i][j] in l2:\n                    indexList.append(l2.index(l1[i][j]))\n                if l1[i][j] in l3:\n                    indexList.append(l3.index(l1[i][j]))\n        # print(indexList)\n        # print(len(indexList))\n        return indexList\n    elif type(l1[0]) == int:\n        # print(l1[0])\n        for i in range(len(l1)):\n            for j in range(len(l1[i])):\n                if l1[i][j] in l2:\n                    indexList.append(l2.index(l1[i][j]))\n                if l1[i][j] in l3:\n                    indexList.append(l3.index(l1[i][j]))\n        # print(indexList)\n        # print(len(indexList))\n        return indexList\n    elif type(l1[0]) == str:\n        for i in range(len(l1)):\n            for j in range(len(l1[i])):\n                if l1[i][j] in l2:\n                    indexList.append(l2.index(l1[i][j]))\n                if l1[i][j] in l3:\n                    indexList.append(l3.index(l1[i][j]))\n        # print(indexList)\n        # print(len(indexList))\n        return indexList\n    else:\n        # print(l1)\n        # print(type(l1))\n        # print(l2)\n        # print(type(l2))\n        # print(l3)\n        # print(type(l3))\n        for i in range(len(l1)):\n            for j in range(len(l1[i])):\n                if l1[i][j] in l2:\n                    indexList.append(l2.index(l1[i][j]))\n                if l1[i][j] in l3:\n                    indexList.append(l3.index(l1[i][j]))\n        # print(indexList)\n        # print(len(indexList))\n        return indexList\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #Your code here\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    for i in l3:\n        if i in l2:\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l2 and l3[i] in l1:\n            index_list.append(l1[i])\n            common_list.append(l2[i])\n            common_list.append(l3[i])\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index1 = 0\n    index2 = 0\n    index3 = 0\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = [int(i) for i in l1]\n    l2 = [int(i) for i in l2]\n    l3 = [int(i) for i in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = list(zip(l1, l2, l3))\n    index_list.sort()\n    return index_list\n    \ndef extract_index_list_without_duplicates(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = list(zip(l1, l2, l3))\n    index_list.sort()\n    return index_list\n    \ndef append_element_in_list(l, element):\n    '''\n    Append an element to a list l.\n    '''\n    l.append(element)\n    return l\n    \ndef remove_element_from_list(l, element):\n    '''\n    Remove an element from a list.\n    '''\n    l.remove(element)\n    return l\n    \ndef sort_array(l):\n    '''\n    Sort a list l.\n    '''\n    l.sort()\n    return l\n    \ndef search_in_list(l, element):\n    '''\n    Find the index of the element in a list.\n    '''\n    return l.index(element)\n    \ndef convert_to_array(l):\n    '''\n    Convert a list into an array.\n    '''\n    return l\n    \ndef display_array(l):\n    '''\n    Print the list.\n    '''\n    print(l)\n    "
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            for k in range(len(l1)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(l1[i])\n    index_list = sorted(index_list)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j] and l1[i] == l3[j]:\n                l.append(l1[i])\n                break\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # 2nd answer\n    l1_index = 0\n    l2_index = 0\n    l3_index = 0\n    answer = []\n    for index in range(len(l1)):\n        if l1[index] == l2[l2_index] and l2[l2_index] == l3[l3_index] and l3[l3_index] == l1[index]:\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        elif l1[index] == l3[l3_index] and l3[l3_index] == l2[l2_index] and l2[l2_index] == l1[index]:\n            l1_index += 1\n            l3_index += 1\n        else:\n            answer.append(l1[index])\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n    return answer\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = 0\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for i in range(0, len(numbers)):\n        if smallest > numbers[i] and i < len(numbers) - 1:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) > 1:\n        numbers.sort()\n        return numbers[1]\n    else:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    l = numbers.copy()\n    l.sort()\n    return l[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return numbers[0]\n    else:\n        return second_smallest(numbers[1:])\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return numbers[0]\n    else:\n        smallest = numbers[0]\n        for i in range(len(numbers)):\n            if smallest > numbers[i]:\n                smallest = numbers[i]\n        return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for i in range(len(numbers)):\n        if numbers[i] > numbers[i+1]:\n            return numbers[i]\n    return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #start at the first item\n    smallest = numbers[0]\n    \n    #start at the second item\n    for item in numbers:\n        if smallest < item:\n            smallest = item\n    \n    return smallest\n    \n    #return the second smallest number\n    "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search(r'(?<=a)(?=[bB])', text)\n    if m!= None:\n        return m.group()\n    else:\n        return 'No match'\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # for some reason, there are a couple of specific cases - and if you try to match something that's wrong, you get an IndexError\n    # so try to look for this:\n    # x = text_match_zero_one('bob')\n    # x = text_match_zero_one('alice')\n    # x = text_match_zero_one('bob')\n    # so this is an index error.\n    # not found in this example\n    text = text.lower() # converts the string to lowercase\n    text = re.findall(r'(?=\\b[a-z])(?=\\w)[a-zA-Z]*(?=\\d)', text) # returns a list of words with one or more digits\n    for i in text:\n        if re.search('\\d',i):\n            text = re.sub(r'\\b[a-z]{3}\\b', '', text) # removes words that are numbers\n        if i.startswith('b'):\n            text = re.sub(r'\\b[a-z]{3}\\b', '', text) # removes words that are numbers\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    try:\n        if 'b' in text.lower():\n            return text\n        else:\n            return 'a' + text\n    except AttributeError:\n        return 'a' + text\n    \n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a = re.compile('\\d+a')\n    b = re.compile('\\d+b')\n    matches = a.finditer(text)\n    matches = b.finditer(text)\n    match_count = 0\n    for match in matches:\n        match_count += 1\n    if match_count > 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.findall(r'a[1-9]b', text)\n    return matches\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    text = re.sub(r'\\([^)]*\\)', '', text)\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\b[a-zA-Z0-9\\_]+\\b', '', text)\n    # print(text)\n    # text = re.sub(r'\\b[a-zA-Z]\\b', '', text)\n    # print(text)\n    # print(type(text))\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(\\b)(\\b)?b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('a+', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b+', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{2,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{2,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{1,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{1,}', text):\n        return \"It's an 'b'\\n\"\n    if re.search('a{,}', text):\n        return \"It's an 'a'\\n\"\n    if re.search('b{,}', text):\n        return \"It's an 'b'\\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"a([bB])\\s+\\1\", re.MULTILINE)\n    match = pattern.search(text)\n    if match:\n        return match.group(1)\n    else:\n        return 'no match'\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a\\b', text) is not None\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    for i in test_list:\n        count = 0\n        j = 0\n        while(j < len(i)-1):\n            if i[j] == i[j+1]:\n                count += 1\n            j += 1\n        total += count * 2\n        print(count, \",\", end = \"\")\n    print(\"\")\n    print(total)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) < 2:\n        return 0\n    reverse_dict = {}\n    for string in test_list:\n        reverse_dict[string] = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i + 1] > test_list[i]:\n            reverse_dict[test_list[i]] += 1\n        else:\n            reverse_dict[test_list[i + 1]] += 1\n    return reverse_dict[test_list[0]] + reverse_dict[test_list[1]]\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n        \n    print(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_pair = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                total_pair += 1\n    return total_pair\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pair_count = 0\n    for x in range(len(test_list)-1):\n        if test_list[x]!= test_list[x+1]:\n            pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #code here\n    reversed_list = []\n    for i in range(len(test_list)-1):\n        reversed_list.append(test_list[i] + test_list[i+1])\n    reversed_list.append(test_list[-1])\n    return reversed_list\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count=0\n    j=len(test_list)\n    for i in range(j-1, -1, -1):\n        if test_list[i]==test_list[i+1]:\n            count+=1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def count_pairs(left, right):\n        count = 0\n        for i in range(len(left) - 1):\n            for j in range(i + 1, len(right)):\n                if left[i] == right[j]:\n                    count += 1\n        return count\n    \n    if len(test_list) <= 1:\n        return len(test_list)\n    \n    left = []\n    right = []\n    \n    for string in test_list:\n        if string == test_list[0]:\n            left.append(test_list[0])\n            right.append(test_list[0])\n        else:\n            left.append(string)\n            right.append(test_list[0])\n        \n    return count_pairs(left, right)\n    \n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_rev_pairs = 0\n    test_list = test_list.split(' ')\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list) - 1 - i):\n            if test_list[j] > test_list[j+1]:\n                count_rev_pairs += 1\n    return count_rev_pairs\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in list1:\n        i = tuple(i)\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    return dict\n    \n    \ndef main():\n    '''\n    Write a function to get the word, the number of times it occurs in a given string, and the number of unique words.\n    '''\n    text = input(\"Enter the string: \").lower()\n    list1 = unique_sublists(text)\n    print(list1)\n    print(len(list1))\n    print(len(set(text)))\n    print(text.count(\"hello\"))\n    print(text.count(\"world\"))\n    print(text.count(\"bar\"))\n    print(len(text.split(\" \")))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = {}\n    \n    for item in list1:\n        unique_list[item] = len(list1) - list1.count(item)\n    \n    return unique_list\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for item in list1:\n        if item not in unique_dict.keys():\n            unique_dict[item] = 0\n        unique_dict[item] += 1\n    return unique_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = dict()\n    for list_ in list1:\n        tuple_ = tuple(list_)\n        if tuple_ in counter:\n            counter[tuple_] += 1\n        else:\n            counter[tuple_] = 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    num_list = {}\n    i = 0\n    while i < len(list1):\n        if list1[i] in num_list:\n            num_list[list1[i]] += 1\n        else:\n            num_list[list1[i]] = 1\n        i += 1\n    return num_list\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for element in list1:\n        count = 0\n        for i in range(len(element)):\n            if element[i] in dict1:\n                count += 1\n            else:\n                dict1[element[i]] = 1\n        list1.remove(element)\n        if len(list1) == 0:\n            dict1 = {}\n    return dict1\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def uniques(list):\n        num = {}\n        for i in range(len(list)):\n            x = tuple(list[i])\n            if x not in num:\n                num[x] = 0\n            num[x] += 1\n        return num\n    \n    for i in range(len(list)):\n        num = uniques(list[i])\n        list[i] = num.values()\n    return list\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique = []\n    count = {}\n    for i in range(len(list1)):\n        tuple_ = (list1[i],)\n        if tuple_ not in unique:\n            unique.append(tuple_)\n        else:\n            count[tuple_] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    num_list = {}\n    for i in range(len(list1)):\n        list_1 = list1[i]\n        if list_1 not in num_list:\n            num_list[list_1] = 0\n        num_list[list_1] += 1\n    return num_list\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str or num == '' or num == None:\n        return None\n    if '.' not in num:\n        return False\n    decimal_num = False\n    # print(num)\n    i = 0\n    while (i < len(num)):\n        if num[i] == '.':\n            if decimal_num == True:\n                return False\n            if len(num) > i + 1:\n                if num[i + 1] == '.':\n                    decimal_num = True\n                    i = i + 2\n                else:\n                    i = i + 1\n        else:\n            i = i + 1\n    return decimal_num\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # your code here\n    if num.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if num.endswith('.'):\n        return False\n    num = num.replace('.', '')\n    return len(num) == len(num[::-1])\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if str(num).isnumeric():\n        return False\n    if str(num) == '.':\n        return False\n    if len(str(num)) > 2:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # find decimal place \n    decimal_place = num.find('.')\n    # if there are no decimal places print the string\n    if decimal_place == -1:\n        return str(num)\n    # if there are decimal places print the string and increment the decimal place counter \n    else:\n        print(str(num))\n        decimal_place += 2\n        return str(num) + '.' + '0'*decimal_place\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    num_list = list(num)\n    \n    for i in range(len(num)):\n        num_list[i] = int(num_list[i])\n    \n    return (sum(num_list)%2 == 1)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit() == False:\n        return False\n    if num[0] == '-' or num[0] == '+':\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace('.','')\n    if len(num) < 2:\n        return False\n    if num.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import math\n    pow=2\n    #Is decimal number\n    while(num!=0):\n        if num%10 ==0:\n            return True\n        num=num//10\n        pow=pow+1\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return round(float(num), 2)\n    except:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #make a dictionary of all the number in the list\n    dictionary = {}\n    for i in arr:\n        dictionary[i] = 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dic = {}\n    for i in arr:\n        if i in dic:\n            return False\n        else:\n            dic[i] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_list = set(arr)\n    if len(arr) == 1:\n        print(\"The element is only 1 distinct.\")\n        return\n    elif len(set_list) == 1:\n        print(\"The element is only 1 distinct.\")\n        return\n    else:\n        print(\"The element is only 1 distinct.\")\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if arr.count(arr[0]) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return not len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) <= 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if len(set(arr))==1:\n            return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    lst = []\n    for elem in arr:\n        if elem not in lst:\n            lst.append(elem)\n    return len(lst) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    new_arr = []\n    for i in range(0, len(arr)):\n        if arr[i] in new_arr:\n            return False\n        else:\n            new_arr.append(arr[i])\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i])>1:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #get the month number from the given month\n    monthnum=monthnum3\n    #convert the month number to int\n    monthnum=int(monthnum)\n    if monthnum>=1 and monthnum<=12:\n        #check if the given month number has 30 days\n        if monthnum==2:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid Month number. Month number should be from 1 to 12\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==2 or monthnum3==3 or monthnum3==4 or monthnum3==5 or monthnum3==6 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==11 or monthnum3==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3)>=1 and int(monthnum3)<=12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 <= 1:\n        return False\n    if monthnum3 == 1:\n        if monthnum3 == 2:\n            if monthnum3 == 3:\n                if monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                    if monthnum3 == 12:\n                        return True\n                    return False\n        elif monthnum3 == 2:\n            if monthnum3 == 3:\n                if monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                    if monthnum3 == 12:\n                        return True\n                    return False\n        elif monthnum3 == 3:\n            if monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 4:\n            if monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 5:\n            if monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 6:\n            if monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 7:\n            if monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 8:\n            if monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 9:\n            if monthnum3 == 10 or monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 10:\n            if monthnum3 == 11:\n                if monthnum3 == 12:\n                    return True\n                return False\n        elif monthnum3 == 11:\n            if monthnum3 == 12:\n                return True\n        return False\n    elif monthnum3 > 12:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1:\n        if int(monthnum3) > 29 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 2:\n        if int(monthnum3) > 30 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 3:\n        if int(monthnum3) > 31 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 4:\n        if int(monthnum3) > 30 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 5:\n        if int(monthnum3) > 31 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 6:\n        if int(monthnum3) > 30 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 7:\n        if int(monthnum3) > 31 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 8:\n        if int(monthnum3) > 30 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 9:\n        if int(monthnum3) > 31 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 10:\n        if int(monthnum3) > 30 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 11:\n        if int(monthnum3) > 31 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    elif monthnum3 == 12:\n        if int(monthnum3) > 31 or int(monthnum3) < 1:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if type(monthnum3)!= int:\n        return'monthnum3 must be an integer'\n    elif monthnum3 < 1 or monthnum3 > 12:\n        return'monthnum3 must be between 1 and 12'\n    elif monthnum3 == 1:\n        if daynum3 == 1 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 2 or daynum3 == 29:\n            return 'a day has 28 days'\n        elif daynum3 == 3 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 4 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 5 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 6 or daynum3 == 30:\n            return 'a day has 30 days'\n        elif daynum3 == 7 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 8 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 9 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 10 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 11 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 12 or daynum3 == 31:\n            return 'a day has 30 days'\n    elif monthnum3 == 2:\n        if daynum3 == 1 or daynum3 == 29:\n            return 'a day has 28 days'\n        elif daynum3 == 2 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 3 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 4 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 5 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 6 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 7 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 8 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 9 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 10 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 11 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 12 or daynum3 == 31:\n            return 'a day has 31 days'\n    elif monthnum3 == 3:\n        if daynum3 == 1 or daynum3 == 29:\n            return 'a day has 28 days'\n        elif daynum3 == 2 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 3 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 4 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 5 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 6 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 7 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 8 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 9 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 10 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 11 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 12 or daynum3 == 31:\n            return 'a day has 31 days'\n    elif monthnum3 == 4:\n        if daynum3 == 1 or daynum3 == 29:\n            return 'a day has 28 days'\n        elif daynum3 == 2 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 3 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 4 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 5 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 6 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 7 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 8 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 9 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 10 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 11 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 12 or daynum3 == 31:\n            return 'a day has 31 days'\n    elif monthnum3 == 5:\n        if daynum3 == 1 or daynum3 == 29:\n            return 'a day has 28 days'\n        elif daynum3 == 2 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 3 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 4 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 5 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 6 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 7 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 8 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 9 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 10 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 11 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 12 or daynum3 == 31:\n            return 'a day has 31 days'\n    elif monthnum3 == 6:\n        if daynum3 == 1 or daynum3 == 29:\n            return 'a day has 28 days'\n        elif daynum3 == 2 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 3 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 4 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 5 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 6 or daynum3 == 30:\n            return 'a day has 31 days'\n        elif daynum3 == 7 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 8 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 9 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 10 or daynum3 == 31:\n            return 'a day has 31 days'\n        elif daynum3 == 11 or daynum3 == 31:\n            return 'a day has 30 days'\n        elif daynum3 == 12 or daynum3 == 31:\n            return 'a day has 31 days'\n    elif monthnum3 == 7:\n        if daynum3 == 1 or da"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\ndef check_monthnumber_name(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return False\n    else:\n        return True\ndef check_monthnumber_year(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    monthnum3 = int(monthnum3)\n    \n    #Checking whether it contains 30 days or not\n    if monthnum3 % 100 == 0 and monthnum3 % 400 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 > 12 or monthnum3 < 1):\n        return False\n    else:\n        return True\n    \n    # Main\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0]\n    i = 1\n    while i < n:\n        j = 0\n        while j < i:\n            if arr[j] - arr[i] < min_diff:\n                min_diff = arr[j] - arr[i]\n            j = j + 1\n        i = i + 1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    min_val = arr[0]\n    for i in range(1,n):\n        min_diff = min(min_diff,arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    min_diff = arr[0] - arr[1]\n    \n    for i in range(2,n):\n        min_diff = min(arr[i],min_diff)\n        \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=999999\n    for i in range(0,n):\n        for j in range(i,n):\n            if(arr[i]-arr[j]<min_diff):\n                min_diff=arr[i]-arr[j]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    dp = [[0]*n for _ in range(2)]\n    #dp[0][0] = 0\n    #dp[1][0] = 0\n    #dp[0][1] = 1\n    #dp[1][1] = 2\n    for i in range(2):\n        dp[i][0] = arr[i]\n        dp[i][1] = arr[0]\n    for i in range(1,n-1):\n        dp[0][i] = arr[i] - arr[i-1]\n        dp[1][i] = arr[i] - arr[i-1]\n    return dp[0][n-1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    a = sorted(arr) #sort the array to sort it in ascending order\n    for i in range(n-1):\n        if(a[i] - a[i+1] < min_diff):\n            min_diff = a[i] - a[i+1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    s=sum(arr)\n    return arr[0]-arr[1],s\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] + arr[j] == arr[j]):\n                return arr[j] - arr[i]\n            \n    return arr[n] - arr[n-1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2,n):\n        min_diff = min(min_diff,arr[i]-arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0]\n    min_diff_idx = 0\n    for i in range(1, n):\n        cur_diff = arr[i] - arr[i-1]\n        if cur_diff < min_diff:\n            min_diff = cur_diff\n            min_diff_idx = i\n    return min_diff, min_diff_idx\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = len(str)\n    ctr = 0\n    for i in range(l):\n        if str[i] in '1234567890':\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    lst = list(str)\n    print(lst)\n    count = 0\n    for char in lst:\n        if char.isdigit():\n            count += 1\n        if char.isalpha():\n            count += 1\n        if char.isspace():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    \n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        else:\n            break\n    \n    return ctr\n    \ndef main():\n    '''\n    Execute the main function.\n    '''\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"1231234\"))\n    print(number_ctr(\"1231234\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"1231234\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"1231234\"))\n    print(number_ctr(\"1231234\"))\n    print(number_ctr(\"1111234\"))\n    print(number_ctr(\"1111234\"))\n    print(number_ctr(\"1111234\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11234232\"))\n    print(number_ctr(\"11"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    if '0' in str:\n        ctr+=1\n    elif '1' in str:\n        ctr+=2\n    else:\n        ctr+=3\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i == '0':\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = list(str)\n    for i in range(len(str)):\n        if str[i].isdigit():\n            str[i] = str[i].upper()\n    return sum(1 for i in str if i.isdigit())\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in range(len(str)):\n        if str[i]=='0' or str[i]=='1':\n            ctr+=1\n        else:\n            break\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    dig_count = 0\n    for char in str:\n        if char.isdigit():\n            dig_count += 1\n    return dig_count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    result = 0\n    for i in str:\n        if i.isdigit():\n            result += 1\n    return result\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1: \n        return n \n    return is_polite(n - 1) + (n - 2) ** 2 \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 1\n    for i in range(1, n + 1):\n        x = x * i\n    return x\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return False \n    elif n < 0: \n        return False \n    else: \n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    m = n//2\n    if n%2 == 0:\n        m = m+1\n    return m\n    \ndef is_pallindrome(n): \n    '''\n    Write a function to check whether the number n is a pallindrome.\n    geeksforgeeks.org/check-if-number-is-a-pallindrome/\n    '''\n    n = int(n)\n    rev = 0\n    while n > 0:\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if rev == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = n % 10\n    if n in [4,6,8,9,1,3,5,7]: return n\n    else: return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return True\n    elif n == 3: \n        return False\n    else: \n        while n > 0:\n            if n%2 == 1: \n                return False\n            n = n//2\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1 or n == 0: return 0\n    \n    d = math.log(n) + 1\n    while d <= n:\n        if n % d == 0: \n            return d\n        d += 1\n    return -1 \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not. geeksforgeeks.org/check-if-a-number-is-prime-in-python-part-1/\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n        return True\n    return True\ndef is_sum_of_prime(n):\n    '''\n    Write a function to check whether a number is sum of a number or not. geeksforgeeks.org/check-if-a-number-is-sum-of-a-number-in-python-part-2/\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += i\n    if (sum == n):\n        return True\n    else:\n        return False\ndef is_prime_or_not(n):\n    '''\n    Write a function to check whether a number is prime or not. geeksforgeeks.org/check-if-a-number-is-prime-or-not-in-python-part-3/\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if is_sum_of_prime(n):\n        return True\n    elif is_polite(n):\n        return True\n    else:\n        return False\ndef prime_sum_without_divisors(n):\n    '''\n    Write a function to get sum of prime numbers without divisors. geeksforgeeks.org/prime-sum-of-primes-without-divisors-in-python-part-2/\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if is_prime(i):\n            sum += i\n    return sum\ndef is_prime_or_not_without_divisors(n):\n    '''\n    Write a function to get sum of prime numbers without divisors. geeksforgeeks.org/prime-sum-of-primes-without-divisors-in-python-part-3/\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if is_sum_of_prime(i) == True:\n            sum += i\n    return sum\ndef prime_sum_with_divisors(n):\n    '''\n    Write a function to get sum of prime numbers with divisors. geeksforgeeks.org/prime-sum-of-primes-with-divisors-in-python-part-2/\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if is_sum_of_prime(i) == True:\n            if i == 2:\n                sum += 2\n            else:\n                sum += is_sum_of_prime(i)\n    return sum\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Here you should find the nth-th polite number.\n    '''\n    return n // 3 % 10 == 1 and n % 3 == 0\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n % 3!= 0\ndef main():\n    # initialize the basic variables \n    while True:\n        try:\n            # get the number of pollers \n            pollers = int(input(\"Please input the number of pollers: \"))\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n in range(10,100):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,y) for x,y in zip(l1,l1[1:]) if x!= y]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    for i in l1:\n        for j in l1[i+1:]:\n            if i < j:\n                if j == l1.index(i):\n                    j = l1.index(j)\n                    res.append([i,j])\n                else:\n                    break\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,x+1) for x in l1]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    last_index = len(l1) - 1\n    for i in range(last_index):\n        if i % 2 == 0:\n            pairs.append([l1[i],l1[i+1]])\n        else:\n            pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    i = 0\n    while i < len(l1):\n        if l1[i]!= l1[i+1]:\n            res.append([l1[i], l1[i+1]])\n            i += 2\n        else:\n            i += 1\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # write your code here\n    l = []\n    l1.sort()\n    for i in range(len(l1) - 1):\n        if l1[i]!= l1[i + 1]:\n            l.append((l1[i],l1[i + 1]))\n    return l\n    \ndef check_l1(l1):\n    '''\n    Check if a list is a list of pairs of consecutive items in l1\n    '''\n    # write your code here\n    if (len(l1) % 2) == 1:\n        return False\n    else:\n        return True\n        \ndef check_l2(l2):\n    '''\n    Check if a list is a list of pairs of consecutive items in l2\n    '''\n    # write your code here\n    if (len(l2) % 2) == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    for x in range(0, len(l1)):\n        for y in range(x+1, len(l1)):\n            res.append((l1[x],l1[y]))\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for index in range(len(l1) - 1):\n        for y in range(index + 1, len(l1)):\n            l2.append([l1[index], l1[y]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair = []\n    for i in range(len(l1)):\n        for j in range(i + 1, len(l1)):\n            if l1[i] == l1[j] and i!= j:\n                pair.append([l1[i], l1[j]])\n    return pair\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1:\n        raise Exception(\"Empty list\")\n    else:\n        return [(i, l1[i]) for i in range(len(l1))]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    # Your code here\n    count = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    if sum not in arr:\n        return count\n    for i in arr:\n        if sum-i in arr:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for x in range(len(arr)):\n        if sum - arr[x] == arr[x]:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    count = 0\n    # iterate through the array\n    for i in range(len(arr)):\n        # calculate the sum\n        sum = sum + arr[i]\n        # check if the sum is equal to the sum of the two arrays\n        if sum == sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in arr:\n        if sum == i:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                count +=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    answer = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i]+arr[j]) == sum:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    \n    for i in arr:\n        if sum == i:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=0\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff+=1\n    return diff\n    \ndef main():\n    '''\n    Test the program against a list of numbers and returns a\n    list containing the numbers after any removed digits and\n    the number of digits removed.\n    '''\n    list1=[]\n    num=int(input(\"How many numbers you want to add? \"))\n    for i in range(num):\n        elem=int(input(\"Enter a number: \"))\n        list1.append(elem)\n    list1=sorted(list1)\n    print(list1)\n    print(\"{} numbers removed from {} list\".format(len(list1),num))\n    result=[]\n    print(\"The numbers after any removed digits: \")\n    for i in range(len(list1)):\n        if list1[i]==0:\n            result.append(list1[i])\n    print(result)\n    result=list(set(result))\n    print(\"The number of digits removed: {}\".format(Diff(list1,result)))\n    print(\"\\n\")\n    \nmain("
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1-li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!= len(li2):\n        return None\n    result = []\n    for i in range(len(li1)):\n        result.append(li1[i] - li2[i])\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in range(len(li1)):\n        if i not in li2:\n            li3.append(li1[i])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if(len(li1)==len(li2)):\n        for i in range(len(li1)):\n            if(li1[i]!=li2[i]):\n                li2.remove(li1[i])\n                li2.append(li1[i])\n    return li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in li1:\n        list1.append(i)\n    for i in li2:\n        list2.append(i)\n    return list1,list2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    difference=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            difference.append(li1[i])\n    return difference\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    return diff\n    \n    # -----------------------------------------------------\n    # Use map to get difference \n    # -----------------------------------------------------\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (len(li1)-len(li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return pow(n, 4)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 4:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n, 2):\n            sum += i**2\n        return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(n) :\n        sum = sum + (1 / 4)\n    print (sum)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        print('Error: input negative value')\n        return 0\n    result = 1\n    sum = 0\n    while n>1:\n        if n%2 == 0:\n            sum+=n\n            n//=2\n        else:\n            sum-=n\n            n//=2\n        result+=sum\n    return result\ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        print('Error: input negative value')\n        return 0\n    result = 1\n    sum = 0\n    while n>1:\n        if n%2 == 0:\n            sum+=n\n            n//=2\n        else:\n            sum-=n\n            n//=2\n        result+=sum\n    return result\ndef first_n_odd_num_sum(n) :\n    '''\n    Write a python function to find the sum of fifth power of first n odd natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        print('Error: input negative value')\n        return 0\n    result = 1\n    sum = 0\n    while n>1:\n        if n%2 == 0:\n            sum+=n\n            n//=2\n        else:\n            sum-=n\n            n//=2\n        result+=sum\n    return result\ndef second_n_even_num_sum(n) :\n    '''\n    Write a python function to find the sum of fifth power of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        print('Error: input negative value')\n        return 0\n    result = 1\n    sum = 0\n    while n>1:\n        if n%2 == 0:\n            sum+=n\n            n//=2\n        else:\n            sum-=n\n            n//=2\n        result+=sum\n    return result\ndef first_n_even_num_sum(n) :\n    '''\n    Write a python function to find the sum of fifth power of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        print('Error: input negative value')\n        return 0\n    result = 1\n    sum = 0\n    while n>1:\n        if n%2 == 0:\n            sum+=n\n            n//=2\n        else:\n            sum-=n\n            n//=2\n        result+=sum\n    return result"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else :\n        return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Declare variables\n    sum = 0\n    # Using for loop\n    for i in range(n+1) :\n        # If the power is odd, then sum += 2^(power)\n        if i % 2 == 1 :\n            sum += 2**(i)\n    # Returning sum\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(n) :\n        result += pow(4,i)\n    return result\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for num in range(n) : \n        if num%2==1 : sum+=num**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(n) :\n        sum += (i**4)\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stmt = list(exp)\n    for i in range(len(stmt)):\n        if stmt[i] in ('(',')'):\n            stmt[i] = stmt[i] + stmt[i]\n        elif stmt[i] == ')':\n            if stmt[i+1] == '(' or stmt[i+1] == ')':\n                stmt[i] = stmt[i] + stmt[i+1]\n                stmt[i+1] = '('\n        elif stmt[i] == ')':\n            if stmt[i+1] == '(':\n                stmt[i] = stmt[i] + stmt[i+1]\n                stmt[i+1] = ')'\n    return stmt\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if len(stack)!= 1:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def check_balanced(exp):\n        \"\"\"\n        This function is to check if the given expression is balanced or not.\n        \"\"\"\n        # var = []\n        # for i in exp:\n        #     if i in var:\n        #         return False\n        #     var.append(i)\n        #     if not check_balanced(exp):\n        #         return False\n        # return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp[0] == '(' and exp[-1] == ')':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    if len(exp) == 1:\n        return check_expression(exp[0])\n    if exp[0] == '(':\n        dp = [0] * len(exp)\n        dp[0] = check_expression(exp[0:1])\n        for i in range(1, len(exp)):\n            if dp[i-1] == 1:\n                dp[i] = check_expression(exp[i:])\n            if dp[i-1] == 0:\n                return False\n        return True\n    else:\n        dp = [0] * len(exp)\n        dp[0] = check_expression(exp[0:1])\n        for i in range(1, len(exp)):\n            if dp[i-1] == 0:\n                return False\n            if dp[i-1] == 1:\n                dp[i] = check_expression(exp[i:])\n            if dp[i-1] == 0:\n                return False\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_stack = []\n    closed_stack = []\n    for c in exp:\n        if c in '({[':\n            open_stack.append(c)\n        elif c in ')}]':\n            closed_stack.append(c)\n        elif c in '},':\n            if len(open_stack) == 0:\n                return False\n            open_stack.pop()\n    if len(open_stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for exp in exp:\n        if exp == '(':\n            stack.append(exp)\n        elif exp == ')':\n            if not stack:\n                return False\n            top_of_stack = stack.pop()\n            if exp!= top_of_stack:\n                return False\n    if not stack:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef check_parentheses(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef check_paranthesis(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    for i in range(len(exp)):\n        if exp[i] == ')':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef check_operator(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    for i in range(len(exp)):\n        if exp[i] == '+' or exp[i] == '-':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef check_math(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    for i in range(len(exp)):\n        if exp[i] == '*' or exp[i] == '/':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef expression_completion(expression):\n    '''\n    Write a function to return the expression's string, which is the result of applying all given functions on the given expression.\n    '''\n    #expression = input(\"Enter Expression : \")\n    s = set()\n    op = ['(', '+', '-']\n    t = True\n    for i in range(len(expression)):\n        if expression[i] in op:\n            if t:\n                t = False\n            else:\n                s.add(expression[i])\n        else:\n            t = True\n            s.remove(expression[i])\n    #if expression == '':\n    #    return ''\n    #else:\n    #    return ''.join(s)\n    if t:\n        return ''.join(s)\n    else:\n        return '(' + ''.join(s) + ')'\ndef is_valid(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    if check_parentheses(exp):\n        return check_parentheses(exp)\n    if check_parenthesis(exp):\n        return check_parenthesis(exp)\n    if check_paranthesis(exp):\n        return check_paranthesis(exp)\n    if check_parenthesis_or_operator(exp):\n        return check_parenthesis_or_operator(exp)\n    if check_operator(exp):\n        return check_operator(exp)\n    if check_math(exp):\n        return check_math(exp)\n    else:\n        return False\ndef part1():\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    for i in range(len(exp)):\n        if exp[i] == ')' or exp[i] == '}' or exp[i] == ']' or exp[i] =='' or exp[i] == ')':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef part2():\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef part3():\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    op = ['(', '+', '-', '*', '/']\n    for i in range(len(exp)):\n        if exp[i] in op:\n            if exp[i] == '+' or exp[i] == '-':\n                s.add(i)\n            else:\n                s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef part4():\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    op = ['(', '+', '-', '*', '/']\n    for i in range(len(exp)):\n        if exp[i] == '+' or exp[i] == '-':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef part5():\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    op = ['(', '+', '-', '*', '/']\n    for i in range(len(exp)):\n        if exp[i] == '+' or exp[i] == '-':\n            s.add(i)\n        else:\n            s.remove(i)\n    if len(s) > 0:\n        return False\n    else:\n        return True\ndef part6():\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #exp = input(\"Enter Expression : \")\n    s = set()\n    op = ['(', '+', '-', '*', '/']"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            if i == 0:\n                return False\n            if exp[i] == ')':\n                if i + 1 < len(exp):\n                    if exp[i + 1] == '(':\n                        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = []\n    \n    if len(exp) < 0:\n        return True\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    test_str = test_str.lower()\n    if test_str not in res:\n        res.append(test_str)\n    for i in range(len(test_str)):\n        if len(test_str) - i < K:\n            break\n        elif test_str[i]!= test_str[i+1]:\n            res.append(test_str[i])\n            test_str = test_str[:i] + test_str[i+1:]\n    return test_str"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.replace(K, \"\")\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    i = 0\n    while i < len(test_str):\n        if test_str[i] == K:\n            result += test_str[i:]\n            i = len(test_str) - 1\n        i += 1\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_string = test_str\n    word_list = new_string.split()\n    for word in word_list:\n        if len(word) <= K:\n            new_string = new_string.replace(word, \"\")\n    return new_string\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return_string = ''\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    new_str = \"\"\n    i = 0\n    j = 0\n    \n    while i < len(test_str):\n        if len(test_str[i]) == K:\n            j += 1\n            new_str += test_str[i]\n        i += 1\n    \n    return new_str\n        \ndef remove_words(test_str, word_to_remove):\n    '''\n    Write a function to remove all the words with the given word in the given string.\n    '''\n    \n    for i in range(len(test_str)):\n        if test_str[i] in word_to_remove:\n            test_str = test_str[:i] + test_str[i+1:]\n    \n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    p = test_str.split()\n    l = len(p)\n    while l > 0:\n        if len(p) == 1:\n            print(test_str)\n            break\n        if len(p) >= K:\n            l -= 1\n            p.pop(0)\n            print(test_str)\n        else:\n            print(test_str)\n            break\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Dictionaries of words and their length\n    d = {}\n    for w in test_str:\n        if w in d:\n            d[w] += 1\n        else:\n            d[w] = 1\n    # Getting the k words\n    k = K\n    # Removing the words with length k\n    for w in d:\n        if d[w] >= k:\n            del d[w]\n        else:\n            k -= 1\n    # Returning the resulting string\n    return test_str\n    "
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = \"\"\n    for i in range(len(test_str)):\n        if len(test_str)!= 0:\n            if test_str[i]!= test_str[i+1]:\n                new_str += test_str[i]\n        else:\n            new_str += test_str[i]\n    return new_str\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #opening strings\n    i = 0\n    j = 0\n    len_text = len(text)\n    n = len(pattern)\n    #check if pattern is empty\n    if len(pattern) == 0:\n        return None\n    #if the pattern is a single char a match\n    if len(pattern) == 1:\n        #check if pattern is there in the string\n        if pattern in text:\n            #if pattern is anywhere in the string, return it's position\n            if text.find(pattern) > -1:\n                return text.find(pattern)\n            else:\n                return None\n        #if pattern is not there, return None\n        else:\n            return None\n    #loop through all chars in the pattern\n    while j < len(pattern):\n        #check if pattern is a single char a match\n        if pattern[j] in text:\n            #if pattern is anywhere in the string, return it's position\n            if text.find(pattern[j]) > -1:\n                return text.find(pattern[j])\n            else:\n                return None\n        #if pattern is not there, return None\n        else:\n            return None\n        #check if pattern is not there, return None\n        if j + n < len(pattern):\n            return None\n        #check if pattern is a single char a match\n        j = j + n\n    #if pattern is not there, return None\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m is not None:\n        start = m.start()\n        end = m.end()\n        return(text[start:end])\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substrings=re.finditer(pattern,text)\n    for match in substrings:\n        start=match.start()\n        end=match.end()\n        return(start,end)\n    return(None)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = 0\n    pattern = pattern.lower()\n    text = text.lower()\n    pattern = pattern.replace('.','.*').replace('?','.')\n    pattern = pattern.replace('!','.')\n    pattern = pattern.replace('-','.')\n    pattern = pattern.replace('\\(','.')\n    pattern = pattern.replace('\\)','.')\n    pattern = pattern.replace('*','.')\n    pattern = pattern.replace('+','.')\n    pattern = pattern.replace('$','.')\n    pattern = pattern.replace('&','.')\n    pattern = pattern.replace('$','.')\n    pattern = pattern.replace('+','.')\n    pattern = pattern.replace('&','.')\n    pattern = pattern.replace('\\s','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('[\\[\\]\\s\\d\\D\\d\\s\\s]','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\d','.')\n    pattern = pattern.replace('\\d+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\d+','.')\n    pattern = pattern.replace('\\d+','.')\n    pattern = pattern.replace('\\d+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\d','.')\n    pattern = pattern.replace('\\d+','.')\n    pattern = pattern.replace('\\d+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\d','.')\n    pattern = pattern.replace('\\d+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\w+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\s+','.')\n    pattern = pattern.replace('\\"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    def find_index(pattern, s):\n        '''\n        Return the index of the substrings in a given pattern.\n        '''\n        pos = 0\n        while pos < len(pattern) and pattern[pos] == s[pos]:\n            pos += 1\n        return pos\n        \n    def find_substrings(pattern):\n        '''\n        Given a string, find all substrings in it. Return a list of each substrings.\n        '''\n        substrings = []\n        for pos in range(len(pattern)):\n            substrings.append(pattern[pos:pattern.index(pattern[pos])+1])\n        return substrings\n        \n    pattern = re.sub(r'\\s+', '', pattern)\n    pattern = re.sub(r'\\s+', '', pattern.strip())\n    pattern = re.sub(r'[^a-zA-Z0-9]', '', pattern)\n    pattern = re.sub(r'[0-9]', '', pattern)\n    pattern = re.sub(r'[^a-zA-Z0-9]', '', pattern)\n    pattern = pattern.lower()\n    pattern = pattern.strip()\n    substrings = find_substrings(pattern)\n    return substrings\n    \ndef get_substring_count(text, pattern):\n    '''\n    Given a string, find the number of occurrences of a substring in a given pattern.\n    Return the number of occurrences as a string.\n    '''\n    substrings = occurance_substring(text, pattern)\n    if len(substrings) == 0:\n        return text\n    if len(substrings) == 1:\n        return text.count(substrings[0])\n    return get_substring_count(text[:substrings[0]], pattern[:substrings[0]]) + get_substring_count(text[substrings[0]:], pattern[substrings[0]:])\n    \ndef get_substring_count_2(text, pattern):\n    '''\n    Given a string, find the number of occurrences of a substring in a given pattern.\n    Return the number of occurrences as a string.\n    '''\n    pattern = pattern.lower()\n    substrings = occurance_substring(text, pattern)\n    if len(substrings) == 0:\n        return text\n    if len(substrings) == 1:\n        return text.count(substrings[0])\n    return get_substring_count_2(text[:substrings[0]], pattern[:substrings[0]]) + get_substring_count_2(text[substrings[0]:], pattern[substrings[0]:])\n    \ndef get_substring_count_3(text, pattern):\n    '''\n    Given a string, find the number of occurrences of a substring in a given pattern.\n    Return the number of occurrences as a string.\n    '''\n    pattern = pattern.lower()\n    substrings = occurance_substring(text, pattern)\n    if len(substrings) == 0:\n        return text\n    if len(substrings) == 1:\n        return text.count(substrings[0])\n    substrings.reverse()\n    start = len(text)-1\n    for i in range(0, len(substrings)):\n        if text[i:i+1].lower() in pattern.lower():\n            start = i\n            break\n    end = len(text)-1\n    for i in range(0, len(substrings)):\n        if text[start:end].lower() in pattern.lower():\n            end = i\n            break\n    return text[start:start+len(pattern)-1].count(substrings[i]) + get_substring_count_3(text[end:], pattern[end:])\n    \ndef get_substring_count_4(text, pattern):\n    '''\n    Given a string, find the number of occurrences of a substring in a given pattern.\n    Return the number of occurrences as a string.\n    '''\n    pattern = pattern.lower()\n    substrings = occurance_substring(text, pattern)\n    if len(substrings) == 0:\n        return text\n    if len(substrings) == 1:\n        return text.count(substrings[0])\n    substrings.reverse()\n    start = 0\n    end = len(text)-1\n    for i in range(0, len(substrings)):\n        if text[i:i+1].lower() in pattern.lower():\n            start = i\n            break\n    if start == 0:\n        end = len(text)-1\n    for i in range(0, len(substrings)):\n        if text[start:end].lower() in pattern.lower():\n            end = i\n            break\n    return text[start:start+len(pattern)-1].count(substrings[i]) + get_substring_count_4(text[end:], pattern[end:])\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occ_subst=0\n    pos_subst=0\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    s = re.finditer(pattern,text)\n    for i in s:\n        print(i.start())\n        print(i.end())\n    # print(s.group())\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substrings_list=[]\n    substrings_list=[]\n    substrings_list=text.split()\n    positions=[i for i,x in enumerate(substrings_list) if x.startswith(pattern)]\n    if len(positions)==0:\n        return None\n    else:\n        return positions[0]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\n    \ndef occurance_substring_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\n    \ndef test_occurrence_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_2_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_2_3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_3_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_3_3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_4_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_4_3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_4_4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_4_5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_5_1(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position=[]\n    substring=[]\n    regex=re.compile(pattern)\n    for i in text:\n        if (re.match(pattern,i)):\n            position.append(text.index(i))\n            substring.append(i)\n    return(position,substring)\ndef test_occurrence_substring_5_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no matc"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # 1. Split the text into list of words\n    # 2. iterate through list, \n    #     check for substrings that are found, and \n    #     return the locations of them.\n    # 3. check each character to see if it is a word or not. If it is, return the locations.\n    # 4. If it is, return None.\n    \n    # 4.1 \n    # split the text into a list of words\n    # iterate through the string, checking for the substrings\n    # if found, return the locations of them.\n    \n    # 4.2 \n    # add each character to a list\n    # check each character in list\n    # if found, return the locations\n    \n    # 5.\n    # add each word to a list of words\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    # find the last number\n    last_number = nums[-1]\n    # if it's odd\n    if nums[0] % 2 == 0:\n        if last_number % 2!= 0:\n            # add it to the list\n            nums.append(last_number)\n        else:\n            # if its odd, check every number\n            for index in range(len(nums) - 1, 0, -1):\n                if nums[index] % 2 == 0:\n                    # add the number to the list\n                    nums.append(nums[index])\n        # return the list\n        return nums\n    # if it's not odd, check every number\n    else:\n        for index in range(len(nums) - 1, 0, -1):\n            if nums[index] % 2!= 0:\n                nums.append(nums[index])\n        return nums\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    l = list(nums)\n    l.sort()\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if (nums[i] % 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through the list\n    for index in range(len(nums)):\n        # if it's odd, return false\n        if nums[index] % 2!= 0:\n            return False\n    # if it's not odd, return true\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd=[]\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            odd.append(nums[i])\n    if len(odd)%2==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if (nums[i] % 2 == 1) :\n            return False\n        else:\n            i = i + 1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return [False if i % 2 == 1 else True for i in nums]\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(nums[i]%2!= 0):\n            return False\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for vowel in vowels:\n        if vowel in test_str:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowel_count = {'a':0,'e':0,'i':0,'o':0,'u':0}\n    for i in test_str:\n        if i in ['a','e','i','o','u']:\n            vowel_count['a']+=1\n            if i in ['a','e','i','o','u']:\n                count+=1\n            count+=test_str.count(i)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            if char in vowels:\n                count += 1\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    count_vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in \"aeiouAEIOU\":\n            if test_str[i-1] in \"aeiouAEIOU\":\n                if test_str[i+1] in \"aeiouAEIOU\":\n                    if test_str[i-2] in \"aeiouAEIOU\":\n                        if test_str[i+2] in \"aeiouAEIOU\":\n                            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # count_vowels('aabbcc')\n    # count_vowels('aabbccddeeeeeeeeeeff')\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    def count_vowels(word):\n        count = 0\n        for letter in word:\n            if letter.lower() in ('a', 'e', 'i', 'o', 'u'):\n                count += 1\n        return count\n    \n    if test_str.isalpha():\n        test_str = test_str.lower()\n        if test_str.isupper():\n            return ''.join(c for c in test_str if c.isupper())\n        else:\n            return ''.join(c for c in test_str if c.isalpha())\n    else:\n        return ''.join(c for c in test_str if c.isdigit())\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    result = 0\n    for char in test_str:\n        if char in vowels:\n            result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for i in test_str:\n        if i in 'aeiou':\n            count+=1\n    return count\nprint(count_vowels('abracadabra'))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        return arr[0]+find_sum(arr[1:])\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i]:\n            s+= arr[i]\n    return s \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Method 1 \n    return sum(set(arr)) \n    \n    # Method 2 \n    sum = 0\n    for i in arr:\n        if arr.count(i) > 1:\n            sum += i\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    max_val = max(arr)\n    count = 0\n    for i in arr:\n        if i!= max_val:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #declare a dictionary to store the keys and the value of the dictionary\n    dic={}\n    for item in arr:\n        if item not in dic:\n            dic[item]=1\n        else:\n            dic[item]+=1\n    print(dic)\n    #create an empty list to store the result\n    res=[]\n    #iterate through the keys in dic and add the value to the res list\n    for item in dic:\n        if dic[item]>1:\n            res.append(item)\n            for i in range(dic[item]):\n                res.append(item)\n    print(res)\n    return sum(res)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # declare an empty array\n    res = []\n    # loop through array \n    for i in arr: \n        # if element is not duplicate \n        if i not in res: \n            res.append(i)\n    # return the sum of all the elements \n    return sum(res)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_arr = 0\n    for i in arr:\n        if i not in sum_arr:\n            sum_arr += i\n    return sum_arr\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    sum = 0\n    for i in range(0,len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    sum = 0\n    for i in arr:\n        if i not in sum:\n            sum += i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    new_result = []\n    for element in list1:\n        if element not in new_result:\n            new_result.append(element)\n        else:\n            if element not in result:\n                result.append(element)\n            else:\n                if len(result) == 1:\n                    result[0] = result[0] + element\n                else:\n                    if len(result)!= 1:\n                        for i in range(len(result)):\n                            if result[i] == result[i-1]:\n                                result[i] = element\n                                result[i-1] = element\n                        if result[len(result)-1] == element:\n                            result.append(element)\n                new_result.clear()\n    return new_result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    prev_elem = []\n    for elem in list1:\n        if elem not in prev_elem:\n            output.append(prev_elem)\n            prev_elem = []\n        prev_elem.append(elem)\n    output.append(prev_elem)\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        if len(list1[i:i+5])==5:\n            list2.append(list1[i:i+5])\n    return list2\ndef pack_recursive(list1,list2):\n    '''\n    Write a recursive function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1)==len(list2):\n        return list1\n    if list1[0]==list2[-1]:\n        list2.append(list1[0])\n    return pack_recursive(list1[1:],list2[:-1])+list2[:2]+pack_recursive(list1[2:],list2[1:])\ndef main():\n    '''\n    Write a main function that packs a list of 5 consecutive duplicate numbers into sublists.\n    '''\n    import sys\n    if len(sys.argv)>1:\n        try:\n            file_name=sys.argv[1]\n            file=open(file_name)\n            data=file.read()\n            list1=data.split()\n            list2=[]\n            list2=pack_consecutive_duplicates(list1)\n            print(list2)\n            list3=[]\n            list3=pack_recursive(list2,list3)\n            print(list3)\n            list4=[]\n            list4=pack_recursive(list2,list4)\n            print(list4)\n            file.close()\n        except IOError:\n            print(\"Can't read file: %s\" % file_name)\n            sys.exit()\nmain()"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    newList=[]\n    \n    for element in list1:\n        if element not in newList:\n            newList.append(element)\n        elif newList[-1]==element:\n            newList[-1] = element\n            newList.append(element)\n    \n    return newList\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublists = [list1[i+1:] for i in range(len(list1)-1)]\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def get_num_of_duplicates(list_elements):\n        '''\n        Return the number of duplicates\n        '''\n        num_of_duplicates = 0\n        for element in list_elements:\n            if element == list_elements[0]:\n                num_of_duplicates += 1\n            else:\n                num_of_duplicates += 1\n                if num_of_duplicates > 1:\n                    yield element, num_of_duplicates\n        return\n    return [get_num_of_duplicates(list1), list1]\ndef group_consecutive_duplicates(list1):\n    '''\n    Return a list of groups of consecutive duplicates\n    '''\n    def get_num_of_duplicates(list_elements):\n        '''\n        Return the number of duplicates\n        '''\n        num_of_duplicates = 0\n        for element in list_elements:\n            if element == list_elements[0]:\n                num_of_duplicates += 1\n            elif element == list_elements[1]:\n                num_of_duplicates += 1\n                if num_of_duplicates > 1:\n                    yield element, num_of_duplicates\n        return\n    return [get_num_of_duplicates(list1), list1]\ndef pack_consecutive_duplicates2(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def get_num_of_duplicates(list_elements):\n        '''\n        Return the number of duplicates\n        '''\n        num_of_duplicates = 0\n        for element in list_elements:\n            if element == list_elements[0]:\n                num_of_duplicates += 1\n            elif element == list_elements[1]:\n                num_of_duplicates += 1\n                if num_of_duplicates > 1:\n                    yield element, num_of_duplicates\n        return\n    return [get_num_of_duplicates(list1), list1]\ndef group_consecutive_duplicates2(list1):\n    '''\n    Return a list of groups of consecutive duplicates\n    '''\n    def get_num_of_duplicates(list_elements):\n        '''\n        Return the number of duplicates\n        '''\n        num_of_duplicates = 0\n        for element in list_elements:\n            if element == list_elements[0]:\n                num_of_duplicates += 1\n            elif element == list_elements[1]:\n                num_of_duplicates += 1\n                if num_of_duplicates > 1:\n                    yield element, num_of_duplicates\n        return\n    return [get_num_of_duplicates(list1), list1]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    L=len(list1)\n    output=[]\n    while list1:\n        if len(list1)>1:\n            #find the nth element of the list\n            nth=len(list1)//2\n            #find the left and right sublists\n            left_list=list1[:nth]\n            right_list=list1[nth:]\n            #append to left sublist\n            output.append(left_list)\n            #append to right sublist\n            output.append(right_list)\n            #remove the left and right sublists\n            list1=list1[nth:]\n            #remove the left sublist\n            list1=left_list\n            #remove the right sublist\n            list1=right_list\n        else:\n            output.append(list1)\n            list1=[]\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # 1. replace [] with {}\n    # 2. keep the leading and trailing duplicates\n    # 3. keep the length of each sublist\n    # 4. keep the order of the sublists\n    # 5. keep the order of the sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        temp = []\n        for j in range(0, i + 1):\n            if (list1[j] == list1[j + 1]):\n                temp.append(list1[j])\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    n = len(list1)\n    possible_duplicates = []\n    duplicates_stack = []\n    possible_duplicates_without_duplicates = []\n    for i in range(0, n):\n        if list1[i] == list1[i - 1]:\n            possible_duplicates.append(list1[i])\n        elif list1[i]!= list1[i - 1]:\n            duplicates_stack.append(list1[i])\n    for i in range(n - 2, -1, -1):\n        if not possible_duplicates:\n            break\n        if possible_duplicates[-1] == possible_duplicates[-2]:\n            possible_duplicates.pop()\n            possible_duplicates_without_duplicates.append(list1[i])\n        else:\n            possible_duplicates.pop()\n            break\n    return possible_duplicates_without_duplicates\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list(list1)\n    count = dict()\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in list1:\n        t = tuple(i)\n        if t in dict1.keys():\n            dict1[t] += 1\n        else:\n            dict1[t] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Write your code here\n    dict = {}\n    for i in range(len(list1)):\n        dict[tuple(list1[i])] = list1[i].count(list1[i])\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_tuple = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in unique_tuple:\n                unique_tuple[list1[i][j]] += 1\n            else:\n                unique_tuple[list1[i][j]] = 1\n    return unique_tuple\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    d = {}\n    \n    for i in list1:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for i in range(len(list1)):\n        list2 = list1[i]\n        if list2 in unique_list:\n            unique_list[list2] = unique_list[list2] + 1\n        else:\n            unique_list[list2] = 1\n    return unique_list"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists = {}\n    for i in list1:\n        if i in unique_sublists.keys():\n            unique_sublists[i] += 1\n        else:\n            unique_sublists[i] = 1\n    return unique_sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(0, len(list1)):\n        if type(list1[i]) is list:\n            for j in range(0, len(list1[i])):\n                if type(list1[i][j]) is tuple:\n                    list1[i][j] = tuple(list1[i][j])\n                else:\n                    list1[i][j] = [list1[i][j]]\n            count_dict[list1[i]] = 0\n        else:\n            count_dict[list1[i]] += 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    n = len(list1)\n    counter = {}\n    for i in range(n):\n        for j in range(i,n):\n            if list1[i]==list1[j]:\n                counter[tuple(list1[i:j+1])] = counter.get(tuple(list1[i:j+1]),0) + 1\n    return counter\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list,3)"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    print(test_list)\n    combo_list = []\n    for i in range(len(test_list)-1):\n        #print(test_list[i],test_list[i+1])\n        for j in range(i+1,len(test_list)):\n            #print(test_list[j],test_list[j+1])\n            comb = list(combinations(test_list,i+1))\n            print(comb)\n            #print(comb[0])\n            if comb[0][0]+comb[0][1]+comb[0][2]==test_list[i]+(test_list[i+1]):\n                print(\"yes\")\n                combo_list.append(tuple(comb))\n                break\n    print(combo_list)\n    return combo_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    for i in test_list:\n        if not set(i).isdisjoint(set(range(1,len(i)+1))):\n            yield tuple(i)\n        "
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result=[]\n    for k in range(len(test_list)+1):\n        for i in combinations(test_list,k):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Your code goes here\n    if len(test_list) == 0:\n        return []\n    else:\n        return list(combinations(test_list, len(test_list)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    lst = []\n    for i in test_list:\n        for j in combinations(i,2):\n            lst.append(j)\n    return lst\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in test_list:\n        sum_list.extend(i)\n    #print(sum_list)\n    comb = list(combinations(sum_list,len(test_list)))\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in test_list:\n        combs = list(combinations(i,2))\n        for c in combs:\n            if tuple(c) not in comb_list:\n                comb_list.append(tuple(c))\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = list(combinations(test_list,len(test_list)))\n    for tup in comb:\n        print(tup)\n        "
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = list(combinations(test_list, 2))\n    return comb_list\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 :\n            count += 1\n            if count % 2 == 0 :\n                return 'even'\n            else :\n                return 'odd'\n    return 'even'\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    divisors = 0\n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            divisors += 1\n        i += 1\n    if divisors == 0 : \n        return \"It is a divisor\"\n    elif divisors == 1 : \n        return \"It is a divisor\"\n    else : \n        return \"It is not a divisor\""
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i) \n    if len(divisors) == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 or n == 0:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)+1)):\n            if n % i == 0:\n                return False\n        return True\n    \ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n < 2:\n        return False\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    while i * i < n :\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_leap(n) :\n    '''\n    Write a Python function that returns whether the number passed as input is a leap year. \n    Leap years are years that are evenly divisible by 4 and are also evenly divisible by 100. \n    Note: Assume the input is always an integer.\n    \n    example: \n    >>> is_leap(2019)\n    False\n    >>> is_leap(2020)\n    True\n    >>> is_leap(1533)\n    True\n    >>> is_leap(1534)\n    False\n    '''\n    if n % 4 == 0:\n        if n % 100 == 0:\n            if n % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_perfect(n) : \n    '''\n    Write a Python function that checks whether the number passed as input is a perfect number. \n    The function should return a boolean value that is True if the number passed as input is a perfect number, and False otherwise.\n    \n    example:\n    >>> is_perfect(9)\n    True\n    >>> is_perfect(42)\n    True\n    >>> is_perfect(19)\n    False\n    '''\n    \n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        divisors = math.factorial(math.floor(n/2))\n        return divisors == n\ndef is_square(n) :\n    '''\n    Write a Python function that checks whether the number passed as input is a perfect number. \n    The function should return a boolean value that is True if the number passed as input is a perfect number, and False otherwise.\n    \n    example:\n    >>> is_square(4)\n    False\n    >>> is_square(7)\n    True\n    >>> is_square(8)\n    False\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        divisors = math.factorial(math.floor(n/2))\n        if n % divisors == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    j = 2\n    k = 3\n    while i <= math.sqrt(n) :\n        if (n % i == 0) :\n            if (n // i == j) :\n                print(i)\n                j += 1\n                if (n // i == j) :\n                    print(i)\n                    j += 1\n            elif (n // i == k) :\n                print(i)\n                k += 1\n                if (n // i == k) :\n                    print(i)\n                    k += 1\n            i += 1\n        i += 1\n    return (j == math.sqrt(n))\n    '''\n    Check whether the count of divisors is even. \n    '''\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    counter = 0\n    for i in range(1, n+1) : \n        if (n % i == 0) : \n            counter += 1\n    if counter % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 0\n    count = 0\n    while i <= n :\n        if n % i == 0 :\n            count += 1\n            n = n / i\n            i += 1\n        else :\n            i += 1\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    even_length = len(arr)\n    odd_length = even_length % 2\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    odd = 0\n    odd_arr = []\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize all subarrays to 0.\n    res = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr.sort()\n    x=0\n    k=0\n    odd_length=0\n    for i in range(len(arr)-1,0,-1):\n        if(k+1==i):\n            x=arr[i]\n            odd_length+=1\n            k=0\n        elif(k+1>i):\n            x=arr[i]\n            odd_length+=1\n            k+=1\n    return x\narr=[1,2,3,4,5,6,7,8,9]\nprint(odd_length_sum(arr)"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #return sum(odd_length_subarrays(arr))\n    if len(arr) < 2:\n        return 0\n    odd_sum = 0\n    curr_sum = 0\n    index = 1\n    while index < len(arr):\n        if (index % 2) == 0:\n            if curr_sum + arr[index] <= odd_sum:\n                curr_sum += arr[index]\n            else:\n                odd_sum = curr_sum\n                curr_sum = arr[index]\n        else:\n            if curr_sum + arr[index] > odd_sum:\n                curr_sum += arr[index]\n            else:\n                odd_sum = curr_sum\n                curr_sum = arr[index]\n        index += 1\n    if odd_sum:\n        return odd_sum\n    else:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_arr = []\n    \n    sum_of_odd_length_arr = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_of_odd_length_arr = sum_of_odd_length_arr + arr[i]\n            else:\n                sum_of_odd_length_arr = sum_of_odd_length_arr + arr[i] * 2\n        \n    if sum_of_odd_length_arr % 2 == 0:\n        odd_length_arr.append(sum_of_odd_length_arr)\n    else:\n        odd_length_arr.append(sum_of_odd_length_arr * 2)\n    \n    \n    return odd_length_arr\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result=0\n    odd_length=[]\n    length=len(arr)\n    for i in range(0,length,2):\n        odd_length.append(arr[i])\n    print(odd_length)\n    for i in range(0,len(odd_length),2):\n        result+=odd_length[i]\n    print(result)\n    return result\narr=[]\nodd=[]\neven=[]\ni=1\nwhile(i<=100):\n    arr.append(i)\n    i+=2\nprint(odd_length_sum(arr))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = int(r), int(g), int(b)\n    mx = max(r, g, b)\n    my = min(r, g, b)\n    delta = mx - my\n    if delta == 0:\n        return 0, 0, 0\n    delta = delta * 0.272\n    delta = delta + 0.545\n    if delta == 0:\n        delta = 0\n    a = (6 - delta) / 6\n    b = 255 - 255 * a\n    if b > 255:\n        b = 255\n    if b < 0:\n        b = 0\n    S = mx\n    if r > g:\n        R = mx\n        G = g\n        B = b\n    else:\n        R = g\n        G = mx\n        B = b\n    H = 360 + a * 6\n    S = (R - G) * 0.0078125\n    v = (B - G) * (1 - a)\n    if R == G:\n        H += a * 6\n        v += 255\n    if R == B:\n        v += 255\n        H += a * 6\n    if H > 360:\n        H = H % 360\n    else:\n        H += a\n        if H > 100:\n            H = H % 100\n    return round(v * 255), round(S * 255), round(H * 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define some values for the range of our color\n    max_val = 255 # full white\n    min_val = 0 # black\n    hue_max = 15\n    hue_min = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    return [(((r+g+b)/3.0)) % 1, ((r/255.0) % 1), ((g/255.0) % 1), ((b/255.0) % 1)]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    # return 0, 0, 0\n    # if r > 0.5:\n    #     r, g, b = (255, 0, 0)\n    # elif g > 0.5:\n    #     r, g, b = (0, 255, 0)\n    # else:\n    #     r, g, b = (0, 0, 255)\n    return (r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert from RGB to HSB\n    if r+g+b == 0:\n        return [0,0,0]\n    d = float(r+g+b)/float(r+g+b)\n    if d == 0:\n        return [0,0,0]\n    i = float(d)/float(d+1)\n    r = r-i*(r-i*r)\n    g = g-i*(g-i*g)\n    b = b-i*(b-i*b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # The colors below are from https://www.w3schools.com/colors/colors_color_names.asp\n    # The functions below will be based on the colors below.\n    rgb = [r, g, b]\n    hsv = [0,0,0]\n    # Applying a list comprehension to a list of numbers to get all of these numbers\n    # Here's the formula: [2*(x-0.5),(x-0.5),(x+0.5)]\n    for i in range(0,3):\n        if rgb[i]<=0:\n            rgb[i] = 0\n        elif rgb[i]>=255:\n            rgb[i] = 255\n        else:\n            rgb[i] = (rgb[i]/255.0)*2*(1-1.0/255.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    return (r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #convert R to g\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    r, g, b = map(lambda x: (x/255.0), [r, g, b])\n    m = x / sum(x)\n    #convert g to h\n    if m < 1.0:\n        h = (1.0 - m) * (180.0) + m * (180.0) + 20\n    else:\n        h = (1.0 - m) * (180.0)\n    #convert b to x\n    if m < 1.0:\n        s = (1.0 - m) * (180.0) + m * (180.0) + 50\n    else:\n        s = (1.0 - m) * (180.0)\n    #convert h to y\n    if m < 1.0:\n        v = (1.0 - m) * (180.0) + m * (180.0) + 40\n    else:\n        v = (1.0 - m) * (180.0)\n    #convert x to 0 - 1\n    x = 1.0 - m * (1.0 - s) * (1.0 - v)\n    x = max(x, 0.0)\n    x = min(x, 1.0)\n    #convert y to 0 - 1\n    y = 1.0 - m * (1.0 - s) * (1.0 - v)\n    y = max(y, 0.0)\n    y = min(y, 1.0)\n    #convert z to 0 - 1\n    z = 1.0 - m * (1.0 - s) * (1.0 - v)\n    z = max(z, 0.0)\n    z = min(z, 1.0)\n    return [x, y, z]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #define colors\n    #define colors to rgb\n    #define numbers to hsv\n    #define hsv\n    #define hs\n    #define s\n    #define v\n    #define r\n    #define g\n    #define b\n    #define min\n    #define max\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n    r_max = max(r_norm)\n    r_min = min(r_norm)\n    g_max = max(g_norm)\n    g_min = min(g_norm)\n    b_max = max(b_norm)\n    b_min = min(b_norm)\n    h = 0.0745 + 0.3961 * r_max + 0.1373 * r_min + 0.0812 * g_max + 0.0784 * g_min + 0.0429 * b_max + 0.0221 * b_min\n    s = 0.4314 * r_max + 0.2872 * r_min + 0.1524 * g_max + 0.0117 * g_min + 0.1449 * b_max + 0.0495 * b_min\n    v = 255.0\n    h = round(h * 100)\n    s = round(s * 100)\n    v = round(v * 100)\n    h = int(h)\n    s = int(s)\n    v = int(v)\n    return hsv(h, s, v)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = 0\n    product = 1\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            product *= list1[i]\n        else:\n            product *= list1[len(list1) - 1 - i]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in list1:\n        if i%2 == 0:\n            return i*i\n    return 1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n = len(list1)\n    list2 = []\n    \n    for i in range(n):\n        if i % 2 == 0:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i]*2)\n    return list2\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # split the list into two list for even and odd\n    even = list1[0::2]\n    odd = list1[1::2]\n    \n    # find the product of both lists\n    product = sum(list(map(lambda x: x*x, even + odd)))\n    \n    # return product\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # 1st append new item to the end of the list\n    new = list1.append(list1[-1])\n    # 2nd append new item to the end of the list\n    for i in range(len(list1)-2):\n        new = new * 2\n        list1.append(new)\n    # 3rd append new item to the end of the list\n    new = list1[-2] * 2\n    list1.append(new)\n    return list1\n    \nlist1 = [2, 4, 6, 8]\nprint(mul_even_odd(list1)"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    #we need to check if even or odd numbers exist in the list\n    for i in range(len(list1)):\n        #if even numbers then we multiply the product by the number\n        if i%2==0:\n            list1[i]*=2\n        else:\n            list1[i]*=3\n    \n    return list1\n    \n    "
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    i=0\n    total=0\n    while i<len(list1):\n        if i%2==0:\n            total=total+list1[i]\n        else:\n            total=total+list1[i]\n        i=i+1\n    return total\n    \n    \n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    length = len(list1)\n    # if list is odd, return 0\n    if length % 2 == 1:\n        return 0\n    # if list is even, return -1\n    if length % 2 == 0:\n        return -1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    cnt = 0\n    for i in list1:\n        if i % 2 == 0:\n            cnt += i\n        else:\n            cnt -= i\n    return cnt\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in range(len(list1)):\n        result = result * list1[i]\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Your code here\n    # TODO: your code here\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res_tuple = ()\n    for i in range(0, len(test_str), 2):\n        res_tuple = tuple(test_str[i:i+2])\n        break\n    return res_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup = tuple(test_str)\n    tup = list(tup)\n    return(tuple(tup))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_int = 0\n        for num in test_str:\n            test_int += ord(num)\n        return test_int\n    except:\n        return test_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, tuple):\n        test_str = (test_str,)\n    for x in test_str:\n        test_str = tuple(map(int, x))\n    return test_str\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    if not isinstance(test_str, tuple):\n        test_str = (test_str,)\n    for x in test_str:\n        test_str = tuple(map(float, x))\n    return test_str\n    \ndef tuple_str_complex(test_str):\n    '''\n    Write a function to convert tuple string to complex tuple.\n    '''\n    if not isinstance(test_str, tuple):\n        test_str = (test_str,)\n    for x in test_str:\n        test_str = tuple(map(complex, x))\n    return test_str\n    \ndef dict_str_str(test_dict):\n    '''\n    Write a function to convert dict string to string.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return str(test_dict)\n    \ndef dict_str_list(test_dict):\n    '''\n    Write a function to convert dict string to list.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return list(test_dict.values())\n    \ndef dict_str_iter(test_dict):\n    '''\n    Write a function to convert dict string to iterator.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return iter(test_dict.values())\n    \ndef dict_str_str_int(test_str):\n    '''\n    Write a function to convert dict string to string.\n    '''\n    if not isinstance(test_str, dict):\n        test_str = dict([(x,y) for x, y in test_str])\n    return str(test_str)\n    \ndef dict_str_str_float(test_str):\n    '''\n    Write a function to convert dict string to float tuple.\n    '''\n    if not isinstance(test_str, dict):\n        test_str = dict([(x,y) for x, y in test_str])\n    return tuple(map(float, test_str.values()))\n    \ndef dict_str_str_complex(test_str):\n    '''\n    Write a function to convert dict string to complex tuple.\n    '''\n    if not isinstance(test_str, dict):\n        test_str = dict([(x,y) for x, y in test_str])\n    return tuple(map(complex, test_str.values()))\n    \ndef list_str_list(test_list):\n    '''\n    Write a function to convert list string to list.\n    '''\n    if not isinstance(test_list, list):\n        test_list = list([test_list])\n    return test_list\n    \ndef list_str_iter(test_list):\n    '''\n    Write a function to convert list string to iterator.\n    '''\n    if not isinstance(test_list, list):\n        test_list = list([test_list])\n    return iter(test_list)\n    \ndef list_str_str_int(test_str):\n    '''\n    Write a function to convert list string to string.\n    '''\n    if not isinstance(test_str, list):\n        test_str = list([test_str])\n    return str(test_str)\n    \ndef list_str_str_float(test_str):\n    '''\n    Write a function to convert list string to float tuple.\n    '''\n    if not isinstance(test_str, list):\n        test_str = list([test_str])\n    return tuple(map(float, test_str))\n    \ndef list_str_str_complex(test_str):\n    '''\n    Write a function to convert list string to complex tuple.\n    '''\n    if not isinstance(test_str, list):\n        test_str = list([test_str])\n    return tuple(map(complex, test_str))\n    \ndef list_str_str_str_int(test_str):\n    '''\n    Write a function to convert list string to string.\n    '''\n    if not isinstance(test_str, list):\n        test_str = list([test_str])\n    return str(test_str)\n    \ndef list_str_str_str_float(test_str):\n    '''\n    Write a function to convert list string to float tuple.\n    '''\n    if not isinstance(test_str, list):\n        test_str = list([test_str])\n    return tuple(map(float, test_str))\n    \ndef list_str_str_str_complex(test_str):\n    '''\n    Write a function to convert list string to complex tuple.\n    '''\n    if not isinstance(test_str, list):\n        test_str = list([test_str])\n    return tuple(map(complex, test_str))\n    \ndef dict_str_str_str_str_int(test_dict):\n    '''\n    Write a function to convert dict string to string.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return str(test_dict)\n    \ndef dict_str_str_str_float(test_dict):\n    '''\n    Write a function to convert dict string to float tuple.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return tuple(map(float, test_dict.values()))\n    \ndef dict_str_str_str_complex(test_dict):\n    '''\n    Write a function to convert dict string to complex tuple.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return tuple(map(complex, test_dict.values()))\n    \ndef dict_str_str_str_str_str_str_str_str(test_dict):\n    '''\n    Write a function to convert dict string to str string.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return str(test_dict)\n    \ndef dict_str_str_str_str_str_str_str_str(test_dict):\n    '''\n    Write a function to convert dict string to str string.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return str(test_dict)\n    \ndef dict_str_str_str_str_str_str_str_str(test_dict):\n    '''\n    Write a function to convert dict string to str string.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return str(test_dict)\n    \ndef dict_str_str_str_str_str_str_str_str(test_dict):\n    '''\n    Write a function to convert dict string to str string.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return str(test_dict)\n    \ndef dict_str_str_str_str_str_str_str_str(test_dict):\n    '''\n    Write a function to convert dict string to str string.\n    '''\n    if not isinstance(test_dict, dict):\n        test_dict = dict([(x,y) for x, y in test_dict])\n    return st"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_int = tuple(map(int, test_str))\n    return test_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in test_str:\n        int_tuple += (int(i),)\n    return int_tuple\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    float_tuple = ()\n    for i in test_str:\n        float_tuple += (float(i),)\n    return float_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = tuple(map(lambda x: int(x), test_str.split(',')))\n    return test_str\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_str = tuple(map(lambda x: float(x), test_str.split(',')))\n    return test_str\n    \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    test_str = tuple(map(lambda x: bool(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_int(test_str):\n    '''\n    Write a function to convert boolean string to integer tuple.\n    '''\n    test_str = tuple(map(lambda x: int(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_float(test_str):\n    '''\n    Write a function to convert boolean string to float tuple.\n    '''\n    test_str = tuple(map(lambda x: float(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_bool(test_str):\n    '''\n    Write a function to convert boolean string to boolean tuple.\n    '''\n    test_str = tuple(map(lambda x: bool(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_string(test_str):\n    '''\n    Write a function to convert boolean string to string tuple.\n    '''\n    test_str = tuple(map(lambda x: str(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_date(test_str):\n    '''\n    Write a function to convert boolean string to date tuple.\n    '''\n    test_str = tuple(map(lambda x: date.fromisoformat(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_datetime(test_str):\n    '''\n    Write a function to convert boolean string to datetime tuple.\n    '''\n    test_str = tuple(map(lambda x: datetime.fromisoformat(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_timedelta(test_str):\n    '''\n    Write a function to convert boolean string to timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef bool_str_timedelta_timedelta(test_str):\n    '''\n    Write a function to convert boolean string to timedelta and timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef bool_str_timedelta_timedelta_timedelta(test_str):\n    '''\n    Write a function to convert boolean string to timedelta, timedelta and timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef str_tuple(test_str):\n    '''\n    Write a function to convert string to tuple.\n    '''\n    test_str = tuple(map(lambda x: str(x), test_str.split(',')))\n    return test_str\n    \ndef str_bool(test_str):\n    '''\n    Write a function to convert string to boolean tuple.\n    '''\n    test_str = tuple(map(lambda x: bool(x), test_str.split(',')))\n    return test_str\n    \ndef str_float(test_str):\n    '''\n    Write a function to convert string to float tuple.\n    '''\n    test_str = tuple(map(lambda x: float(x), test_str.split(',')))\n    return test_str\n    \ndef str_string(test_str):\n    '''\n    Write a function to convert string to string tuple.\n    '''\n    test_str = tuple(map(lambda x: str(x), test_str.split(',')))\n    return test_str\n    \ndef str_date(test_str):\n    '''\n    Write a function to convert string to date tuple.\n    '''\n    test_str = tuple(map(lambda x: date.fromisoformat(x), test_str.split(',')))\n    return test_str\n    \ndef str_datetime(test_str):\n    '''\n    Write a function to convert string to date tuple.\n    '''\n    test_str = tuple(map(lambda x: date.fromisoformat(x), test_str.split(',')))\n    return test_str\n    \ndef str_timedelta(test_str):\n    '''\n    Write a function to convert string to timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef str_timedelta_timedelta(test_str):\n    '''\n    Write a function to convert string to timedelta, timedelta and timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef str_timedelta_timedelta_timedelta(test_str):\n    '''\n    Write a function to convert string to timedelta, timedelta and timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef str_timedelta_timedelta_timedelta_timedelta(test_str):\n    '''\n    Write a function to convert string to timedelta, timedelta and timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef bool_str_string(test_str):\n    '''\n    Write a function to convert boolean string to string tuple.\n    '''\n    test_str = tuple(map(lambda x: str(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_string_bool(test_str):\n    '''\n    Write a function to convert boolean string to string tuple.\n    '''\n    test_str = tuple(map(lambda x: str(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_string_bool_string(test_str):\n    '''\n    Write a function to convert boolean string to string tuple.\n    '''\n    test_str = tuple(map(lambda x: str(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_date(test_str):\n    '''\n    Write a function to convert boolean string to date tuple.\n    '''\n    test_str = tuple(map(lambda x: date.fromisoformat(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_datetime(test_str):\n    '''\n    Write a function to convert boolean string to date tuple.\n    '''\n    test_str = tuple(map(lambda x: date.fromisoformat(x), test_str.split(',')))\n    return test_str\n    \ndef bool_str_timedelta(test_str):\n    '''\n    Write a function to convert boolean string to timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), test_str.split(',')))\n    return test_str\n    \ndef bool_str_timedelta_timedelta(test_str):\n    '''\n    Write a function to convert boolean string to timedelta, timedelta and timedelta tuple.\n    '''\n    test_str = tuple(map(lambda x: timedelta(days=int(x)), tes"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a,x)\n    if i == len(a):\n        return len(a)\n    else:\n        if a[i] <= x:\n            return i\n        else:\n            return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        a.append(x)\n        return a\n    for i in range(len(a) - 1):\n        if x < a[i]:\n            a[i] = x\n            break\n    a[i] = x\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    idx = bisect.bisect_right(a, x)\n    if idx == l:\n        return l\n    elif idx < l:\n        return idx\n    else:\n        return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # your code here\n    pos=bisect.bisect_right(a,x)\n    if pos==len(a):\n        print('Invalid')\n    else:\n        return pos\n    \ndef median(a):\n    '''\n    Write a function to compute the median of an array of numbers.\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i > len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[len(a)-1] < x:\n        return len(a)\n    else:\n        i = bisect.bisect_left(a, x)\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if x > a[-1]:\n        return n\n    # Initialize the location of the right-most value\n    i = 0\n    # Initialize the insertion point\n    j = 0\n    # Initialize the max index\n    m = n-1\n    # Loop through the array\n    while i<m:\n        # If the current element is the largest element, or the element is less than the current element\n        if j >= n-1 or (i==0 and a[i]<x):\n            # Insert the current element into the sorted array\n            i += 1\n            # Update the max index\n            m = m-1\n        elif a[i]>x:\n            # Swap the current element with the rightmost element\n            a[j] = a[i]\n            # Update the max index\n            j += 1\n            # Decrease the index by one\n            i += 1\n        # If the current element is less than the rightmost element, or if i is not the last index\n        else:\n            # Decrease the index by one\n            i += 1\n    # Swap the new element at the end of the array\n    i = n-1\n    j = m-1\n    a[i], a[j] = a[j], a[i]\n    # Return the location of the right-most element\n    return j\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n        \n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid\n    return high\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n    while l <= r:\n        m = (l+r)//2\n        if a[m] <= x:\n            l = m + 1\n        else:\n            r = m - 1\n    return r\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a_match = re.findall(r'a[b]*\\w+',text)\n    if a_match!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile('(a)(b)')\n    matches = regex.finditer(text)\n    print(f'Found {len(matches)} matches:')\n    for match in matches:\n        print('\\t', match)\n    print('\\n')\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*[,]\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*[,]\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*[,]\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    pattern = r'a.\\s*\\(.+\\)\\s*[,]\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*\\(.+\\)\\s*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_fifteen(text):\n    '''"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'([a-b]{3,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a four followed by four 'b'.\n    '''\n    pattern = r'([a-b]{4,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five followed by five 'b'.\n    '''\n    pattern = r'([a-b]{5,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has six followed by six 'b'.\n    '''\n    pattern = r'([a-b]{6,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has seven followed by seven 'b'.\n    '''\n    pattern = r'([a-b]{7,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has eight followed by eight 'b'.\n    '''\n    pattern = r'([a-b]{8,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has nine followed by nine 'b'.\n    '''\n    pattern = r'([a-b]{9,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has ten followed by ten 'b'.\n    '''\n    pattern = r'([a-b]{10,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has eleven followed by eleven 'b'.\n    '''\n    pattern = r'([a-b]{11,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has twelve followed by twelve 'b'.\n    '''\n    pattern = r'([a-b]{12,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has thirteen followed by thirteen 'b'.\n    '''\n    pattern = r'([a-b]{13,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has fourteen followed by fourteen 'b'.\n    '''\n    pattern = r'([a-b]{14,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has fifteen followed by fifteen 'b'.\n    '''\n    pattern = r'([a-b]{15,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has sixteen followed by sixteen 'b'.\n    '''\n    pattern = r'([a-b]{16,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has seventeen followed by seventeen 'b'.\n    '''\n    pattern = r'([a-b]{17,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has eighteen followed by eighteen 'b'.\n    '''\n    pattern = r'([a-b]{18,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has nineteen followed by nineteen 'b'.\n    '''\n    pattern = r'([a-b]{19,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has twenty followed by twenty 'b'.\n    '''\n    pattern = r'([a-b]{20,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has thirty followed by thirty 'b'.\n    '''\n    pattern = r'([a-b]{30,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has forty followed by forty 'b'.\n    '''\n    pattern = r'([a-b]{40,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has sixty followed by sixty 'b'.\n    '''\n    pattern = r'([a-b]{60,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has seventy followed by seventy 'b'.\n    '''\n    pattern = r'([a-b]{70,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_eighty(text):\n    '''\n    Write a function that matches a string that has eighty followed by eighty 'b'.\n    '''\n    pattern = r'([a-b]{80,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has nineteen followed by ninety 'b'.\n    '''\n    pattern = r'([a-b]{19,})'\n    res = re.findall(pattern, text)\n    #for match in res:\n        #print(match)\n    return res\ndef text_match_twenty(tex"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a certain condition, for example:\n    \"Argh\" and \"Pydj\" are the same,\n    \"Argh\" is the same as \"Pydj\".\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has two or more, for example:\n    \"Argh\" and \"Pydj\" are the same,\n    \"Argh\" is the same as \"Pydj\".\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has at most one 'b', for example:\n    \"Argh\" and \"Pydj\" are the same,\n    \"Argh\" is the same as \"Pydj\".\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has two or more 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has exactly one 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has no more than one 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has exactly one 'b' followed by an 'a'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has no more than one 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has exactly one 'b' followed by an 'a'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has no more than one 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has at most one 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has no more than one 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has at most one 'a' followed by an 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has no more than one 'a' followed by an 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]\\s\\[(.+?)\\]',text)\n    if match:\n        return(match.group(1))\n    else:\n        return(None)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has at most one 'a' followed by an 'b'.\n    '''\n    match = re.match('(.+?)\\s\\[(.+?)\\]\\s\\"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'(b)([aeiouAEIOU])', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_seven_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'\\b(\\w*\\s*\\b[a-zA-Z])*\\b(?:b\\b)|b\\b', text)\n    match = match.group(0)\n    text = text.replace(match,'')\n    return text\ndef tex"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'a(bc)?', text)!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"\\b[a-z]{3}b\\b\"\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Create a list for matching the text\n    matched = []\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        new_tuple = tuple(test_list)\n    except TypeError:\n        print(\"invalid input\")\n    else:\n        print(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = ()\n    for i in range(0, len(test_str)):\n        result += (test_list[i],)\n    return result\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str:\n        for i in range(len(test_list)):\n            test_list[i] = str(test_list[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    t = tuple(test_list)\n    t = list(t)\n    return t\n    \ndef read_tuple(input_tuple):\n    '''\n    Write a function to read a tuple from a string.\n    '''\n    for i in range(len(input_tuple)):\n        input_tuple[i] = int(input_tuple[i])\n    return tuple(input_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list)!= type(None):\n        return (test_list, test_str)\n    else:\n        return test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(str, test_list))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    list_new = []\n    for i in range(len(test_list)):\n        list_new.append(test_list[i].split('\\n'))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        list_of_tuples.append(eval(test_str[i]))\n    return tuple(list_of_tuples)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not test_str:\n        return 'empty'\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    \n    # Loop over list\n    for i in range(len(nums)):\n        # if odd index is even, add to even list\n        if i % 2 == 0:\n            even_numbers.append(nums[i])\n    \n    return even_numbers\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for num in nums:\n        if num%2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = []\n    for i in range(0,len(nums)):\n        if (nums[i] % 2 == 0):\n            even_list.append(nums[i])\n    print(even_list)\n    return len(even_list)\n    \neven_position([1, 2, 3, 4, 5, 6])\neven_position([1, 2, 3])"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    \n    return all(num % 2 == 0 for num in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num % 2 == 0 for num in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Creating empty array to store the odd numbers \n    odd_numbers = []\n    # loop through numbers in the list\n    for num in nums:\n        # if even num is not found\n        if num % 2 == 0:\n            # append the even numbers into even_numbers list\n            odd_numbers.append(num)\n    # printing the list of odd numbers\n    print(odd_numbers)\n    # printing the sum of odd numbers\n    print(sum(odd_numbers))\n    # printing the sum of odd numbers\n    print(sum(odd_numbers)+sum(odd_numbers))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_nums = []\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_nums.append(nums[i])\n    print(even_nums)\n    return even_nums\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # creating a list with all even numbers\n    evens = []\n    for index in range(len(nums)):\n        if index % 2 == 0:\n            evens.append(nums[index])\n    \n    # print the evens list\n    print(evens)\n    \n    # return true if even numbers of the list are even\n    for i in range(len(evens)):\n        if evens[i] % 2 == 0:\n            return True\n    \n    return False\n    \n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # creating a list with all odd numbers\n    odds = []\n    for index in range(len(nums)):\n        if index % 2 == 1:\n            odds.append(nums[index])\n    \n    # print the evens list\n    print(odds)\n    \n    # return true if even numbers of the list are odd\n    for i in range(len(odds)):\n        if odds[i] % 2!= 0:\n            return True\n    \n    return False\n    \n    \n    \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # We will use an outer loop to iterate through every index in the given list.\n    # We will then iterate through every index that is even and check if it is even.\n    # For this we will need to use a for loop.\n    # i.e. for each index in the list, if it is even, it will also check if the number is even.\n    # For this we will need to use an if statement and then our if statement will check to see if the number is even.\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # time = 0\n    #\n    # for i in range(0,len(nums),2):\n    #     # if nums[i] % 2 == 0:\n    #     #     # even_index = nums[i]\n    #     #     #     time += 1\n    #     # elif nums[i] % 2 == 0:\n    #     #     # even_index = nums[i]\n    #     #     # time += 1\n    #     # else:\n    #     #     time += 1\n    #     # if time == even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    # # return False\n    # even_index = 0\n    # even_index_2 = 0\n    # if nums[0] % 2 == 0:\n    #     even_index = nums[0]\n    #     even_index_2 = nums[0]\n    # else:\n    #     even_index = nums[0]\n    #     even_index_2 = nums[0]\n    # for i in range(1,len(nums),2):\n    #     # if nums[i] % 2 == 0:\n    #     #     # even_index = nums[i]\n    #     #     #     even_index_2 = nums[i]\n    #     #     #     time += 1\n    #     # elif nums[i] % 2 == 0:\n    #     #     # even_index = nums[i]\n    #     #     # even_index_2 = nums[i]\n    #     #     time += 1\n    #     # else:\n    #     #     time += 1\n    #     # if time == even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # if time == even_index_2:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # time += 1\n    #     # if nums[i] % 2 == 0:\n    #     #     even_index = nums[i]\n    #     #     even_index_2 = nums[i]\n    #     #     time += 1\n    #     # elif nums[i] % 2 == 0:\n    #     #     even_index = nums[i]\n    #     #     even_index_2 = nums[i]\n    #     #     time += 1\n    #     # else:\n    #     #     time += 1\n    #     # if time == even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # if time == even_index_2:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # time += 1\n    #     # if even_index % 2!= 0:\n    #     #     even_index = even_index\n    #     #     time += 1\n    #     # elif even_index % 2!= 0:\n    #     #     even_index = even_index\n    #     #     time += 1\n    #     # else:\n    #     #     even_index = even_index\n    #     # if even_index % 2!= 0:\n    #     #     even_index_2 = even_index\n    #     #     time += 1\n    #     # elif even_index % 2!= 0:\n    #     #     even_index_2 = even_index\n    #     #     time += 1\n    #     # else:\n    #     #     even_index_2 = even_index\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # time += 1\n    #     # if nums[i] % 2!= 0:\n    #     #     even_index = nums[i]\n    #     #     even_index_2 = nums[i]\n    #     #     time += 1\n    #     # elif even_index % 2!= 0:\n    #     #     even_index = even_index\n    #     #     even_index_2 = even_index\n    #     #     time += 1\n    #     # else:\n    #     #     even_index = even_index\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index += 1\n    #     # even_index_2 += 1\n    #     # time += 1\n    #     # if even_index >= even_index_2:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # even_index_2 += 1\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # if even_index_2 >= even_index:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # i"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_to_remove = test_tup[1]\n    for x in test_tup[0]:\n        if x in tup_to_remove:\n            tup_to_remove.remove(x)\n    test_tup = test_tup[0] + tup_to_remove + test_tup[1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup[1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp = test_tup[0]\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            test_tup[i] = remove_nested(test_tup[i])\n    return temp\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is not tuple:\n        raise TypeError('You can only return tuples')\n    elif len(test_tup) == 0:\n        raise ValueError('You must provide at least one tuple.')\n    elif test_tup[0] is None:\n        raise ValueError('The first element of the tuple can not be None')\n    else:\n        nested_tuple = test_tup[1:]\n        return tuple([val for key, val in test_tup[0]]) + tuple([val for key, val in nested_tuple])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove duplicate elements in the given tuple.\n    '''\n    pass\n    \ndef delete_nth(test_tup, n):\n    '''\n    Write a function to delete the nth element of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Write your code here\n    x = test_tup[0]\n    y = test_tup[1]\n    z = test_tup[2]\n    x,y,z = y[0],z[0],x[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # YOUR CODE HERE\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        count += len(item)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Initialize empty list \n    output_list = []\n    for index in range(0, len(input_list)):\n        output_list.append(len(input_list[index]))\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    for i in input_list:\n        if type(input_list) == list:\n            if type(i) == list:\n                print(len(i))\n            else:\n                print(1)\n        else:\n            print(1)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Dictionaries (Lists) to store the counts\n    dic = {}\n    for items in input_list:\n        for item in items:\n            if item in dic:\n                dic[item] += 1\n            else:\n                dic[item] = 1\n    # Return the number of items in the given dictionary\n    return dic\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    from collections import Counter\n    counter = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            for j in range(len(input_list[i])):\n                counter += 1\n        else:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # your code goes here\n    if len(input_list) == 0:\n        return 0\n    else:\n        return len(input_list[0])\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_list = 0\n    for x in input_list:\n        if type(x) == list:\n            count_list += 1\n    return count_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total = 0\n    for i in input_list:\n        total = total + len(i)\n    return total \n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    h = len(arr) - 1\n    while x > 0:\n        if arr[x-1] > arr[h]:\n            return h\n        x -= 1\n        h -= 1\n    return h\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # write your code here\n    l = 0\n    r = len(arr)-1\n    while(l<=r):\n        mid = (l+r)//2\n        if arr[mid]<x:\n            l = mid+1\n        elif arr[mid]>x:\n            r = mid-1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return -1\n    else:\n        return arr[-1]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr.sort()\n    start = 0\n    end = len(arr)-1\n    while start<= end:\n        mid = (start+end)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            start = mid+1\n        else:\n            end = mid-1\n    return None\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==1:\n        return 0\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    a=arr.find(x)\n    if a==-1:\n        return -1\n    if a==len(arr)-1:\n        return -1\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left<=right:\n        mid = left + (right-left)//2\n        if arr[mid] == x:\n            return mid\n        if arr[mid]>x:\n            right = mid-1\n        else:\n            left = mid+1\n    if arr[right]!= x:\n        return right\n    else:\n        return right\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start=0\n    end=len(arr)-1\n    while(start<end):\n        mid = (start+end)//2\n        if(arr[mid]==x):\n            return mid\n        if(arr[mid]>x):\n            end=mid-1\n        else:\n            start=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def recur(arr,l,r,x):\n        if l>=r:\n            if arr[r]==x:\n                return r\n            return recur(arr,l,r-1,x)\n        return -1\n    return recur(arr,0,len(arr)-1,x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def find_lasts(arr,x):\n        # Edge Case\n        if arr[0] > x:\n            return 0\n        if len(arr) == 0:\n            return -1\n        \n        # Find the index of the first element in arr, and the last element\n        # with the value 'x'.\n        low, high = 0, len(arr) - 1\n        while high >= low:\n            mid = low + (high - low) // 2\n            if arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return high\n    return find_lasts(arr,x)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    matcher = re.compile(r'(\\s*[a-zA-Z]*[^a-zA-Z]*)*')\n    start_text = matcher.search(text)\n    return start_text.group(0)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    reg = re.compile(r'(?<=\\w)\\b(a+b)\\b')\n    return reg.findall(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # TODO: Your code here\n    \n    #find the string that starts with 'a' and ends with 'b'\n    \n    #Regex Pattern\n    #https://regex101.com/r/cFhQqj/1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regexp_pattern = r'a\\b[\\n\\s]*b'\n    return re.search(regexp_pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'\\w+a\\b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print(\"Text: \" + text)\n    m = re.findall('a(\\w+)b', text)\n    print(m)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(\\w[a-z]\\w*)'\n    match = re.search(pattern, text)\n    if match is None:\n        return False\n    if match.group() == match.group().upper():\n        return True\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #i used re.search to match 'a' and anything, ending in 'b'\n    pattern = re.compile(r'a')\n    #or pattern = re.search(r'a', text)\n    #if not pattern.match('a')\n    if re.search(r'a', text):\n        #print(text)\n        pattern = re.compile(r'a')\n        print(pattern.search(text))\n        print(pattern.search('a'))\n    else:\n        #print(text)\n        print(re.search(r'a', text))\n        print(re.search(r'a', text))\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'a', text):\n            print(text[i])\n    '''\n    return text\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'a', text):\n            print(text[i])\n    '''\ndef text_startb_endc(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'c'.\n    '''\n    #i used re.search to match 'b' and anything, ending in 'c'\n    pattern = re.compile(r'b')\n    #or pattern = re.search(r'b', text)\n    #if not pattern.match('b')\n    if re.search(r'b', text):\n        #print(text)\n        pattern = re.compile(r'b')\n        print(pattern.search(text))\n        print(pattern.search('b'))\n    else:\n        #print(text)\n        print(re.search(r'b', text))\n        print(re.search(r'b', text))\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'b', text):\n            print(text[i])\n    '''\n    return text\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'b', text):\n            print(text[i])\n    '''\ndef text_startc_endd(text):\n    '''\n    Write a function that matches a string that has an 'c' followed by anything, ending in 'd'.\n    '''\n    #i used re.search to match 'c' and anything, ending in 'd'\n    pattern = re.compile(r'c')\n    #or pattern = re.search(r'c', text)\n    #if not pattern.match('c')\n    if re.search(r'c', text):\n        #print(text)\n        pattern = re.compile(r'c')\n        print(pattern.search(text))\n        print(pattern.search('c'))\n    else:\n        #print(text)\n        print(re.search(r'c', text))\n        print(re.search(r'c', text))\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'c', text):\n            print(text[i])\n    '''\n    return text\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'c', text):\n            print(text[i])\n    '''\ndef text_startd_ende(text):\n    '''\n    Write a function that matches a string that has an 'd' followed by anything, ending in 'e'.\n    '''\n    #i used re.search to match 'd' and anything, ending in 'e'\n    pattern = re.compile(r'd')\n    #or pattern = re.search(r'd', text)\n    #if not pattern.match('d')\n    if re.search(r'd', text):\n        #print(text)\n        pattern = re.compile(r'd')\n        print(pattern.search(text))\n        print(pattern.search('d'))\n    else:\n        #print(text)\n        print(re.search(r'd', text))\n        print(re.search(r'd', text))\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'd', text):\n            print(text[i])\n    '''\n    return text\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'd', text):\n            print(text[i])\n    '''\ndef text_starte_endf(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'f'.\n    '''\n    #i used re.search to match 'e' and anything, ending in 'f'\n    pattern = re.compile(r'e')\n    #or pattern = re.search(r'e', text)\n    #if not pattern.match('e')\n    if re.search(r'e', text):\n        #print(text)\n        pattern = re.compile(r'e')\n        print(pattern.search(text))\n        print(pattern.search('e'))\n    else:\n        #print(text)\n        print(re.search(r'e', text))\n        print(re.search(r'e', text))\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'e', text):\n            print(text[i])\n    '''\n    return text\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'e', text):\n            print(text[i])\n    '''\ndef text_startf_endg(text):\n    '''\n    Write a function that matches a string that has an 'f' followed by anything, ending in 'g'.\n    '''\n    #i used re.search to match 'f' and anything, ending in 'g'\n    pattern = re.compile(r'f')\n    #or pattern = re.search(r'f', text)\n    #if not pattern.match('f')\n    if re.search(r'f', text):\n        #print(text)\n        pattern = re.compile(r'f')\n        print(pattern.search(text))\n        print(pattern.search('f'))\n    else:\n        #print(text)\n        print(re.search(r'f', text))\n        print(re.search(r'f', text))\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'f', text):\n            print(text[i])\n    '''\n    return text\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'f', text):\n            print(text[i])\n    '''\ndef text_startg_endh(text):\n    '''\n    Write a function that matches a string that has an 'g' followed by anything, ending in 'h'.\n    '''\n    #i used re.search to match 'g' and anything, ending in 'h'\n    pattern = re.compile(r'g')\n    #or pattern = re.search(r'g', text)\n    #if not pattern.match('g')\n    if re.search(r'g', text):\n        #print(text)\n        pattern = re.compile(r'g')\n        print(pattern.search(text))\n        print(pattern.search('g'))\n    else:\n        #print(text)\n        print(re.search(r'g', text))\n        print(re.search(r'g', text))\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'g', text):\n            print(text[i])\n    '''\n    return text\n    '''\n    for i in range(0, len(text)):\n        if re.search(r'g', text):\n            print(text[i])\n    '''\ndef text_starth_endi(text):\n    '''\n    Write a function that matches a string that has an 'h' followed by anything, ending in "
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile(r'a\\w+\\b')\n    result = pattern.search(text)\n    if result:\n        print(f'The string: {text} contains at least one \"a\" character')\n    else:\n        print(f'The string: {text} does not contain any \"a\" character')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text\ndef text_startb_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, starting with 'a'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text\ndef text_startb_a(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, starting with 'a'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text\ndef text_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text\ndef text_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text\ndef text_enda_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text\ndef text_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text\ndef text_starta_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text\ndef text_enda_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text\ndef text_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text_starta_endb(text)\ndef text_enda_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text_enda_b(text)\ndef text_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text_endb_a(text)\ndef text_starta_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text_starta_endb(text)\ndef text_enda_b_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text_enda_b_a(text)\ndef text_enda_b_a_no_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text_enda_b_a(text)\ndef text_startb_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, starting with 'a'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:\n        return text_startb_end(text)\ndef text_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text_endb_a(text)\ndef text_endb_a_no_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'a'\n    else:\n        return text_endb_a(text)\ndef text_starta_endb_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'b'.\n    '''\n    if re.search('[a-z]', text) is not None:\n        return re.search('[a-z]', text).group(0) + 'b'\n    else:"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_item = 0\n    for item in dict.values():\n        sum_item += item\n    print(sum_item)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    if not dict:\n        return 0\n    for i in dict:\n        total+=dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key, value in dict.items():\n        sum+=value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict:\n        sum+=dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n    "
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k, v in dict.items():\n        sum += v\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    sum = 0\n    \n    for key, value in dict.items():\n        sum += value\n    \n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_all_items = 0\n    for key in dict:\n        sum_of_all_items += dict[key]\n    return sum_of_all_items\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if dict == {}:\n        return 0\n    else:\n        return dict.values() + return_sum(dict.keys())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total = total + i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    while n >= 2: \n        if n % 2 == 1: \n            sum = sum + n \n            n = n // 2\n        else: \n            n = n - 1\n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        raise ValueError(\"Negative input is not permitted\")\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return sum_odd(n // 2) + 1\n    else: \n        return sum_odd(n - 1) + 1\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(1,n+1): \n        if i%2==1: \n            sum=sum+i \n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if (i % 2 == 1):\n            s = s + i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1): \n        if i%2 == 0: \n            sum += i \n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return sum_odd(n//2) \n    elif n % 2 == 1: \n        return sum_odd((n+1)//2) \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether an input number is prime or not.\n    '''\n    if num==2 or num==3:\n        return True\n    if num<2 or num%2==0:\n        return False\n    if num==4:\n        return True\n    if num==5:\n        return False\n    if num%2==0:\n        return False\n    for i in range(3,int(math.sqrt(num))+1,2):\n        if num%i==0:\n            return False\n    return True\n    \ndef is_prime_number(number):\n    '''\n    This function checks whether an input number is prime or not.\n    '''\n    if number==2 or number==3:\n        return True\n    if number==4 or number==5:\n        return False\n    if number%2==0:\n        return False\n    for i in range(3,int(math.sqrt(number))+1,2):\n        if number%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s = s + i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_arr = 0\n    for i in range(0, len(arr)):\n        sum_arr = sum_arr + arr[i]\n    return sum_arr\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total += element\n    return total\n    \n    \ndef _product(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    product = 1\n    for element in arr:\n        product *= element\n    return product\n    \n    \ndef _max(arr):\n    '''\n    Write a python function to find the max element in an array.\n    '''\n    max_value = arr[0]\n    for element in arr:\n        if element > max_value:\n            max_value = element\n    return max_value\n    \n    \ndef _min(arr):\n    '''\n    Write a python function to find the min element in an array.\n    '''\n    min_value = arr[0]\n    for element in arr:\n        if element < min_value:\n            min_value = element\n    return min_value\n    \n    \ndef _min_value_max(arr):\n    '''\n    Write a python function to find the max, min and the index of the minimum value in an array.\n    '''\n    # Initialize variables\n    min = _min(arr)\n    max = _max(arr)\n    index = 0\n    # Check for max value\n    if arr[index] > max:\n        max = arr[index]\n        index = 0\n    if arr[index] < min:\n        min = arr[index]\n        index = 0\n    # Check for min value\n    if arr[index] < min:\n        min = arr[index]\n        index = 0\n    # Check for min index\n    if arr[index] < min:\n        min = arr[index]\n        index = 0\n    return min, max, index\n    \n    \ndef _is_empty(arr):\n    '''\n    Write a python function to check if an array is empty or not.\n    '''\n    return arr == [] or arr == []\n    \n    \ndef _print_odds(numbers):\n    '''\n    Write a python function to print all odd numbers from a list.\n    '''\n    print(numbers)\n    print(list(filter(lambda x: x % 2!= 0, numbers)))\n    \n    \ndef _even_odd(numbers):\n    '''\n    Write a python function to print even odd numbers from a list.\n    '''\n    print(numbers)\n    print(list(filter(lambda x: x % 2 == 0, numbers)))\n    \n    \ndef _even_odd_sum(numbers):\n    '''\n    Write a python function to find the sum of all even numbers from a list.\n    '''\n    sum = 0\n    for element in numbers:\n        if element % 2 == 0:\n            sum += element\n    return sum\n    \n    \ndef _max_min(arr):\n    '''\n    Write a python function to find the max and min value in an array.\n    '''\n    max_value = arr[0]\n    min_value = arr[0]\n    for element in arr:\n        if element > max_value:\n            max_value = element\n        if element < min_value:\n            min_value = element\n    return max_value, min_value\n    \n    \ndef _sorting(arr):\n    '''\n    Write a python function to sort a list.\n    '''\n    return arr[::-1]\n    \n    \ndef _binary_search(arr, target):\n    '''\n    Write a python function to return the index of the target value.\n    '''\n    left = 0\n    right = len(arr) - 1\n    mid = 0\n    # Check for the value at the middle\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n    \n    \ndef _insert_sort(arr):\n    '''\n    Write a python function to sort an array.\n    '''\n    for index in range(1, len(arr)):\n        for item in arr[index:]:\n            if item > arr[index - 1]:\n                arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            else:\n                break\n    return arr\n    \n    \ndef _quick_sort(arr):\n    '''\n    Write a python function to sort an array in constant time.\n    '''\n    if len(arr) <= 1:\n        return arr\n    left, right = [], []\n    pivot = arr[0]\n    for item in arr[1:]:\n        if item > pivot:\n            right.append(item)\n        elif item < pivot:\n            left.append(item)\n        else:\n            pass\n    return _quick_sort(left) + [pivot] + _quick_sort(right)\n    \n    \ndef _partition(arr):\n    '''\n    Write a python function to partition a list into two equal halves.\n    '''\n    # Find the mid point\n    mid = len(arr) // 2\n    # Assign the last value to be the right half\n    # as the pivot\n    arr[mid], arr[len(arr) - 1] = arr[len(arr) - 1], arr[mid]\n    # Swap the values of the mid index and the last index\n    arr[len(arr) - 1], arr[mid] = arr[mid], arr[len(arr) - 1]\n    # Return the first half\n    return arr[:mid] + arr[mid + 1:]\n    \n    \ndef _selection(arr):\n    '''\n    Write a python function to select a pivot from an array.\n    '''\n    arr = arr[:]\n    sorted_arr = sorted(arr)\n    # Find the first index where the sum of the values is less than the pivot\n    # and divide it by the pivot\n    left, right = 0, len(arr) - 1\n    # Check if the sum of the values is not greater than the pivot\n    # or not, if it is, divide it by the pivot\n    while left < right:\n        mid = (left + right) // 2\n        if sorted_arr[mid] < sorted_arr[len(arr) - 1]:\n            left = mid\n        else:\n            right = mid\n    # Swap the values of the last index and the first index\n    arr[len(arr) - 1], arr[left] = arr[left], arr[len(arr) - 1]\n    return arr\n    \n    \ndef _selection_sort(arr):\n    '''\n    Write a python function to sort an array in constant time.\n    '''\n    if len(arr) <= 1:\n        return arr\n    # Get the minimum and second minimum\n    arr = arr[:]\n    minimum = arr[0]\n    second_min = arr[1]\n    # Loop through the array\n    for item in arr[2:]:\n        # If the item is greater than the minimum, swap it with the minimum\n        # and move the index to the second minimum\n        if item > minimum:\n            arr[2] = minimum\n            minimum = item\n        # If the item is greater than the second minimum, swap it with the second minimum\n        # and move the index to the second minimum\n        elif item > second_min:\n            arr[2] = second_min\n            second_min = item\n        else:\n            pass\n    return arr\n    \n    \ndef _heap_sort(arr):\n    '''\n    Write a python function to sort an array in a heap manner.\n    '''\n    if len(arr) <= 1:\n        return arr\n    # Find the last node\n    length = len(arr) // 2\n    # Traverse the array using a recursive call\n    for index in range(length):\n        arr[index], arr[length - index - 1] = arr[length - index - 1], arr[index]\n        _heapify(arr, length, index)\n    # Sort the array\n    arr = [arr[i] for i in range(length)]\n    return arr\n    \n    \ndef _heapify(arr, length, index):\n    '''\n    Write a python function to sort an array in a heap manner.\n    '''\n    # Check if the parent is a leaf\n    if index < length // 2:\n        # Swap with the left child\n        arr[index], arr[length "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n >> d\n    d=d & 1\n    x=n & (1<<d)\n    n=n | (x << (d+1))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(n)\n    print(d)\n    \n    def bit(x,k):\n        \n        if (x >> k) & 1:\n            return (x & (x - 1)) | ((~x) & 1)\n        else:\n            return x\n        \n    n = n & ((1 << d) - 1)\n    \n    l = n >> d\n    \n    for i in range(d):\n        n = l\n        l = (l << 1) ^ bit(n,i)\n    \n    l = n\n    \n    for i in range(d):\n        n = l\n        l = (l << 1) ^ bit(n,i)\n        \n    l = n\n        \n    return l\n    \ndef right_rotate(n,d):\n    '''\n    Write a function that rotates right a given number. We assume that the number is 32 bit.\n    '''\n    print(n)\n    print(d)\n    \n    def bit(x,k):\n        \n        if (x >> k) & 1:\n            return (x >> 1) | (x << 1)\n        else:\n            return x\n        \n    n = n & ((1 << d) - 1)\n    \n    r = n >> d\n    \n    for i in range(d):\n        n = r\n        r = (r << 1) ^ bit(n,i)\n    \n    r = n\n        \n    for i in range(d):\n        n = r\n        r = (r << 1) ^ bit(n,i)\n        \n    r = n\n        \n    return r\n        \ndef bit_shift(x,k):\n    '''\n    Write a function to shift the bits in x by a given number of bits.\n    '''\n    print(x)\n    print(k)\n    \n    def bit(x,k):\n        \n        if k > 0:\n            \n            if (x >> k) & 1:\n                \n                x = (x << 1) | (x >> 1)\n                \n            else:\n                \n                x = (x << 1) | (x >> 1) | (x >> 2)\n                \n        else:\n            \n            if (x >> k) & 1:\n                \n                x = (x << 1) | (x >> 1)\n                \n            else:\n                \n                x = (x << 1) | (x >> 1) | (x >> 2)\n                \n        return x\n        \n    \n    x = x & (1 << k)\n    \n    r = x\n    \n    for i in range(k):\n        \n        x = (x << 1) | (x >> 1)\n        r = (r << 1) ^ bit(x,i)\n        \n    r = (r << 1) ^ bit(x,k-i)\n        \n    return r\n    \n    \n    \ndef binary(n):\n    '''\n    Write a function that returns a binary number.\n    '''\n    \n    a = 0\n    \n    while n > 0:\n        \n        a = a << 1\n        \n        if (n & 1):\n            \n            a = a | 0x01\n            \n            n = n >> 1\n        else:\n            \n            n = n >> 1\n    \n    return a\n    \ndef string(s):\n    '''\n    Write a function that returns a string.\n    '''\n    \n    s = bin(s)[2:]\n    \n    s = s[::-1]\n    \n    s = \"0\" * (32 - len(s)) + s\n    \n    s = bin(int(s,2))[2:]\n    \n    s = s[::-1]\n    \n    return s\n    \ndef sub_bytes(s,k):\n    '''\n    Write a function that returns a string\n    '''\n    \n    \n    def rotate_right(x):\n        \n        if len(x) <= k:\n            \n            return x\n            \n        else:\n            \n            return x[(k - len(x)):] + x[:k - len(x)]\n        \n    \n    def rotate_left(x):\n        \n        if len(x) <= k:\n            \n            return x\n            \n        else:\n            \n            return x[(k - len(x)):] + x[:k - len(x)]\n    \n    def add_sub_bytes(x,y):\n        \n        if len(x) == 0:\n            \n            return y\n            \n        elif len(x) == 1:\n            \n            return x + y\n            \n        else:\n            \n            a = rotate_right(x)\n            \n            a = rotate_left(a)\n            \n            return add_sub_bytes(a,y)\n        \n    if len(s) == 0:\n        \n        return s\n    \n    elif len(s) == 1:\n        \n        return s + add_sub_bytes(s,s)\n        \n    else:\n        \n        a = rotate_right(s)\n        \n        a = rotate_left(a)\n        \n        return add_sub_bytes(a,s)\n        \n    \n    \ndef reverse(s):\n    '''\n    Write a function that returns a string\n    '''\n    \n    s = str(s)\n    \n    if len(s) == 1:\n        \n        return s\n    \n    elif len(s) == 2:\n        \n        return \"0\" + s + \"0\"\n    \n    elif len(s) == 3:\n        \n        return \"0\" + s + \"0\" + \"0\"\n        \n    elif len(s) == 4:\n        \n        return \"0\" + s + \"0\" + \"0\" + \"0\"\n    \n    elif len(s) == 5:\n        \n        return \"0\" + s + \"0\" + \"0\" + \"0\" + \"0\"\n        \n    elif len(s) == 6:\n        \n        return \"0\" + s + \"0\" + \"0\" + \"0\" + \"0\" + \"0\"\n        \n    elif len(s) == 7:\n        \n        return \"0\" + s + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\"\n    \n    elif len(s) == 8:\n        \n        return \"0\" + s + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\"\n    \n    elif len(s) == 9:\n        \n        return \"0\" + s + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\"\n    \n    else:\n        \n        a = reverse(s[0])\n        b = reverse(s[1])\n        c = reverse(s[2])\n        d = reverse(s[3])\n        \n        if a + b + c + d == 0:\n            \n            return \"0\" + a + b + c + d\n        \n        elif a + b + c + d == 1:\n            \n            return \"1\" + a + b + c + d\n        \n        elif a + b + c + d == 2:\n            \n            return \"2\" + a + b + c + d\n        \n        elif a + b + c + d == 3:\n            \n            return \"3\" + a + b + c + d\n        \n        elif a + b + c + d == 4:\n            \n            return \"4\" + a + b + c + d\n        \n        elif a + b + c + d == 5:\n            \n            return \"5\" + a + b + c + d\n        \n        elif a + b + c + d == 6:\n            \n            return \"6\" + a + b + c + d\n        \n        elif a + b + c + d == 7:\n            \n            return \"7\" + a + b + c + d\n        \n        elif a + b + c + d == 8:\n            \n            return \"8\" + a + b + c + d\n        \n        elif a + b + c + d == 9:\n            \n            return \"9\" + a + b + c + d\n        \n        else:\n            \n            a = add_sub_bytes(a, "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n%(2**32)\n    r = (n//(2**32))%(2**32)\n    if l%(2**32)==0:\n        return (l + d)%(2**32)\n    elif l%(2**32)==(2**32):\n        if d==0:\n            return (l+d)%(2**32)\n        elif d==1:\n            return ((l+d)%(2**32))\n        elif d==2:\n            return ((l+d)%(2**32)+1)\n        elif d==3:\n            return ((l+d)%(2**32)+2)\n        elif d==4:\n            return ((l+d)%(2**32)+3)\n        elif d==5:\n            return ((l+d)%(2**32)+4)\n        elif d==6:\n            return ((l+d)%(2**32)+5)\n        elif d==7:\n            return ((l+d)%(2**32)+6)\n        elif d==8:\n            return ((l+d)%(2**32)+7)\n        elif d==9:\n            return ((l+d)%(2**32)+8)\n        elif d==10:\n            return ((l+d)%(2**32)+9)\n        elif d==11:\n            return ((l+d)%(2**32)+10)\n        elif d==12:\n            return ((l+d)%(2**32)+11)\n    else:\n        if d==0:\n            return (l+d)%(2**32)\n        elif d==1:\n            return ((l+d)%(2**32)+1)\n        elif d==2:\n            return ((l+d)%(2**32)+2)\n        elif d==3:\n            return ((l+d)%(2**32)+3)\n        elif d==4:\n            return ((l+d)%(2**32)+4)\n        elif d==5:\n            return ((l+d)%(2**32)+5)\n        elif d==6:\n            return ((l+d)%(2**32)+6)\n        elif d==7:\n            return ((l+d)%(2**32)+7)\n        elif d==8:\n            return ((l+d)%(2**32)+8)\n        elif d==9:\n            return ((l+d)%(2**32)+9)\n        elif d==10:\n            return ((l+d)%(2**32)+10)\n        elif d==11:\n            return ((l+d)%(2**32)+11)\n        elif d==12:\n            return ((l+d)%(2**32)+12)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xffffffff\n    d = d & 15\n    res = (n >> d) | (n << (32-d))\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = n\n    temp = temp >> d\n    temp = temp << d\n    return temp\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a=bin(n)[2:].rjust(32,'0')\n    print(a)\n    print(\"Rotating a: \" + str(d))\n    for i in range(d):\n        b=a[len(a)-2:]\n        a=a[0:len(a)-2]+b[-i-1]\n    print(\"Rotated a: \" + str(a))\n    return a\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    d = d >> d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n < 0: return -1\n    return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n + (n >> d) # (n+d) to the left of n\n    \n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    m = n>>d\n    return (n & (n-1)) | (((~(n&(n-1)) & (n-m)) << d) | (n&(n-1)) )\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all whitespaces from the text\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', str(text))\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    text = re.sub(r'\\s+',' ',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'^\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\"\\n\", \" \")\n    text = text.replace(\"\\t\", \" \")\n    text = text.replace(\"  \", \" \")\n    text = text.replace(\"  \", \" \")\n    text = text.replace(\"\\r\", \" \")\n    text = text.replace(\"\\r\", \" \")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex = r\"\\s+\"\n    text = re.sub(regex, \"\", text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\"  \", \" \")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x,y,z = map(int,(x,y,z))\n    count = 0\n    for i in range(x,y-1):\n        for j in range(y-1,z):\n            if(i==j):\n                count+=1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x==y==z):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,3):\n        if x == y == z:\n            count +=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        print(\"This is the number of equal numbers:\",x+y+z)\n    elif x==y or y==z or x==z:\n        print(\"This is the number of equal numbers:\",x+y+z)\n    else:\n        print(\"This is the number of equal numbers:\",x+y+z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum=0\n    count=0\n    for i in x:\n        for j in y:\n            for k in z:\n                if i==j==k:\n                    count=count+1\n        sum=sum+count\n    return sum\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print('Testing count of equal numbers between 3 and 4:', end='')\n    assert_equal(three_equal(x, y, z), 3)\n    print('Passed.')\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    \n    if (x==y):\n        count=x\n    elif (y==z):\n        count=y\n    else:\n        count=z\n        \n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    total = 0\n    for i in range(x,y+1):\n        for j in range(z,x+1):\n            if i==j:\n                total+=1\n    return total\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for x in x:\n        for y in y:\n            for z in z:\n                if x==y==z:\n                    count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    c = 0\n    for i in range(n):\n        if i >= n-1 or arr[i]!= arr[i+1]:\n            c += 1\n    print(c)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # validate the array\n    if not isinstance(arr, list):\n        raise TypeError(\"Invalid parameter.\")\n    if len(arr) < 2:\n        raise TypeError(\"Invalid parameter.\")\n    \n    # count the rotations\n    count = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    else:\n        \n        return count_rotation(arr[1:]) + count_rotation(arr[:1]) \n    \n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotation = 0\n    if n == 0:\n        return rotation\n    else:\n        for i in range(n-1, -1, -1):\n            rotation += (n-i)\n            print(rotation, end = \" \")\n        print(rotation)\n        return rotation\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    def rotate(arr, k):\n        \"\"\"\n        (Arrays are already sorted)\n        Return the count of k rotations required to rotate arr with arr[i]\n        \"\"\"\n        # Store initial count\n        count = 0\n        # Loop through all elements\n        for i in range(len(arr)):\n            # If value is the same, count\n            if arr[i] == k:\n                count += 1\n            # If value is less, swap and increment count\n            elif arr[i] < k:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n                count += 1\n        # If no rotations required, return count\n        return count\n    \n    # While there is a value to rotate\n    while True:\n        # If array is empty\n        if not arr:\n            # Break out of while loop\n            break\n        # If no rotation required\n        elif rotate(arr, k) == 0:\n            # Return count\n            return count\n        # Else, rotate again\n        else:\n            # Increment count\n            count += 1\n            # Get index of k\n            k = k - 1\n    \n    \nif __name__ == \"__main__\":\n    \n    arr = [4, 6, 5, 8, 7, 1, 2, 3, 9, 10, 13]\n    print(\"No. of rotations: \", count_rotation(arr))\n    print(\"No. of rotations: \", count_rotation(arr))\n    arr.sort()\n    print(\"No. of rotations: \", count_rotation(arr))\n    print(\"No. of rotations: \", count_rotation(arr))\n    arr.sort(reverse=True)\n    print(\"No. of rotations: \", count_rotation(arr))\n    print(\"No. of rotations: \", count_rotation(arr))\n    print(\"No. of rotations: \", count_rotation(arr)"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotation2(arr):\n        if len(arr) <= 1:\n            return len(arr)\n        \n        i = 0\n        j = 0\n        temp_len = 1\n        \n        while (i < len(arr) and j < len(arr)):\n            if arr[i] < arr[j]:\n                i += 1\n                temp_len += 1\n            else:\n                j += 1\n                temp_len += 1\n                \n        return temp_len\n    \n    rotated_arr = []\n    \n    for i in range(len(arr)):\n        rotated_arr.append(arr[len(arr) - i - 1])\n        \n    return count_rotation2(rotated_arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] > arr[j]:\n                if j > i:\n                    count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count number of rotations \n    rotations = 0\n    # pivot\n    pivot = arr[0]\n    \n    for i in range(1, len(arr)):\n        # if arr[i] > pivot\n        if arr[i] > pivot:\n            # if arr[i] > pivot and arr[i]< pivot\n            if arr[i] >= pivot:\n                # if arr[i]< pivot\n                rotations += 1\n                pivot = arr[i]\n            # if arr[i] < pivot and arr[i]> pivot\n            elif arr[i] > pivot and arr[i] < pivot:\n                # if arr[i]> pivot\n                rotations += 1\n                pivot = arr[i]\n            # if arr[i]== pivot\n            elif arr[i] == pivot:\n                # if arr[i]< pivot\n                rotations += 1\n                pivot = arr[i]\n        # if arr[i] < pivot\n        elif arr[i] < pivot:\n            rotations += 1\n            pivot = arr[i]\n    \n    # return number of rotations\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count the number of rotations required to generate the sorted array\n    num_rotations = 0\n    # traverse the array to find the number of rotations required\n    for i in range(0, len(arr)):\n        num_rotations += arr[i] * (len(arr) - i)\n    return num_rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    count = 0\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 1 or n % 2 == 0 :\n        return False\n    return n == int(n**0.5)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 1 :\n        return False\n    elif n % 2 == 0 :\n        return True\n    elif n == 1 :\n        return True\n    else :\n        for i in range(3, int(math.sqrt(n)+1)):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n%2 == 0 :\n        if n > 1 :\n            if n % 5 == 0:\n                return True\n            else :\n                return False\n    else:\n        if n == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    for i in range(1, int(math.sqrt(x) + 1)) :\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n > 0 and math.sqrt(n) == math.sqrt(n)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1:\n        return n == 1\n    if n == 2:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i < n :\n        if (n % i == 0) :\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n<=1):\n        return False\n    else:\n        for i in range(1,int(math.sqrt(n) + 1)) :\n            if(n%i==0) :\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    while n % 2 == 0 :\n        n //= 2\n    if n == 1 :\n        return True\n    if n % 4 == 3 :\n        return False\n    return is_perfect_square(n - 1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1 :\n        return True\n    if n % 2 == 0 :\n        return n ** 0.5 == n\n    else :\n        return n ** 0.5!= n\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in arr:\n        count += i\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Iterate through the given list\n    for i in range(0,len(arr)): \n        # If the current element is odd\n        if arr[i] % 2 == 0: \n            # If it is even, return False \n            return False \n    # If it is even, return True \n    return True \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n    if(count % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    prod=1\n    for i in arr:\n        prod *= i\n    \n    if prod%2==0:\n        return False\n    else:\n        return True\n    \n    \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    summ = sum(arr)\n    if summ % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even = True\n    i = 1\n    while i<len(arr):\n        if arr[i]%2==0:\n            even=False\n        i = i+1\n    if even:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product=1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product%2==0\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            max_sum.append(lists[i][j])\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max = []\n    \n    for list in lists:\n        sum = 0\n        for element in list:\n            sum = sum + element\n        \n        if len(max) == 0:\n            max.append(list)\n        else:\n            if sum > max[0][0] + max[0][1]:\n                max = [list]\n            elif sum > max[0][0] + max[0][1]:\n                max.append(list)\n    \n    return max\n    \n    "
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    max_sum.append(lists[0][0])\n    for i in range(1, len(lists[0])):\n        if lists[0][i] > max_sum[i-1]:\n            max_sum.append(lists[0][i])\n        else:\n            max_sum.append(max_sum[i-1])\n            max_sum.append(lists[0][i])\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(list(map(lambda l: sum(l), lists)))\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # your code goes here\n    max_sum = 0\n    for i in lists:\n        for j in lists:\n            if i+j > max_sum:\n                max_sum = i+j\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in lists:\n        max_list.append(max(i))\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in lists:\n        sum_list = []\n        for j in i:\n            sum_list.append(j)\n        max_sum = 0\n        for k in range(len(sum_list)):\n            if sum_list[k] > max_sum:\n                max_sum = sum_list[k]\n        lists.append(max_sum)\n    return lists\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    return max(test_str.count(c) for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_count += 1\n            if run_count > max_count:\n                max_count = run_count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_characters_count = 0\n    for i in test_str:\n        if i.isupper():\n            upper_characters_count += 1\n    return upper_characters_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.lower()\n    test_str = test_str.replace(' ','').replace('.','-')\n    run_upp = 0\n    \n    for char in test_str:\n        if char.isupper():\n            run_upp += 1\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    MAX_RUN_UPPERCASE = 0\n    MAX_RUN_UPPERCASE_STR = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    length=len(test_str)\n    max_run=0\n    for i in range(length):\n        if test_str[i].isupper():\n            if test_str[i].islower():\n                max_run=max(max_run,i+1)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if nums[0] % 2!= 0 else nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = 0\n    for n in range(len(nums)):\n        if nums[n] % 2!= 0:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    evens = list(filter(lambda x: x % 2 == 0, nums))\n    return evens[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # brute force approach.\n    \n    return first_odd_num(nums)\n    \n    # can be done using naive approach\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    '''\n    1. Use enumerate to return a tuple of the index and value\n        1.1. Use enumerate to return a tuple of the index and value\n        1.2. use the tuple index and value\n        1.3. use return the tuple index and value\n    '''\n    # first_index = 0\n    # first_val = nums[0]\n    # nums.pop(0)\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    num_list = []\n    for n in nums:\n        if n % 2 == 1:\n            num_list.append(n)\n    if num_list:\n        return sorted(num_list)[-1]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if nums[mid] % 2 == 1:\n            start = mid + 1\n        else:\n            end = mid\n    return nums[start]"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    index = 0\n    for num in range(len(nums)):\n        if num % 2!= 0:\n            index = num\n            break\n    return index\n    \n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[0]\n    else:\n        return nums[nums_len//2+1]\n        \n    \n    \n    \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[0]\n    else:\n        return nums[nums_len//2]\n        \n        \n    \n    \ndef second_even(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[nums_len//2]\n    else:\n        return nums[nums_len//2+1]\n        \n    \n    \n    \ndef third_even(nums):\n    '''\n    Write a python function to find the third even number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[nums_len//2]\n    else:\n        return nums[nums_len//2+1]\n        \n    \n    \ndef first_odd_and_even(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[0]\n    else:\n        return nums[nums_len//2]\n    \n    \n    \ndef first_even_and_odd(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[0]\n    else:\n        return nums[nums_len//2]\n    \n    \n    \ndef second_even_and_odd(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[0]\n    else:\n        return nums[nums_len//2]\n    \n    \n    \ndef third_even_and_odd(nums):\n    '''\n    Write a python function to find the third even number in a given list of numbers.\n    '''\n    count=0\n    nums_len=len(nums)\n    if nums_len%2==0:\n        return nums[0]\n    else:\n        return nums[nums_len//2]\n    \n    \n    \ndef main():\n    # nums=[1,2,3,4,5,6,7,8,9,10]\n    # nums=[1,2,3,4,5,6,7,8,9,10]\n    nums=[1,2,3,4,5,6,7,8,9,10]\n    print(first_odd(nums))\n    print(first_even(nums))\n    print(second_even(nums))\n    print(third_even(nums))\n    print(first_odd_and_even(nums))\n    print(first_even_and_odd(nums))\n    print(second_even_and_odd(nums))\n    print(third_even_and_odd(nums))\n    \n    \n    \nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if K == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 0:\n        return True\n    for i in range(len(test_tup) - 1):\n        if test_tup[i]!= test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_val = True\n    for tup in test_tup:\n        check_val = check_val and K.is_subset(tup)\n    return check_val\n    "
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K = sorted(K)\n    if (test_tup[0] in K):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    l_tup = []\n    if len(test_tup) > K:\n        return False\n    for i in range(K):\n        l_tup.append(test_tup[i])\n    if len(l_tup)!= K:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    i = 0\n    while i < len(test_tup):\n        j = 0\n        while j < len(test_tup[i]):\n            if (test_tup[i][j] == K):\n                return False\n            j = j + 1\n        i = i + 1\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(i in test_tup for i in range(K))\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup2[0] < test_tup1[0] and test_tup2[1] < test_tup1[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for t in test_tup2:\n        if t < test_tup1[0]:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[1] < test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    small_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            small_tup.append(test_tup1[i])\n    return(small_tup)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in test_tup1:\n        if i < test_tup2[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    if test_tup1[1] > test_tup2[1]:\n        return False\n    if test_tup1[2] > test_tup2[2]:\n        return False\n    if test_tup1[3] > test_tup2[3]:\n        return False\n    if test_tup1[4] > test_tup2[4]:\n        return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # first argument is a tuple\n    # second argument is another tuple\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = True\n    for t1,t2 in zip(test_tup1, test_tup2):\n        if t1 > t2:\n            smaller = False\n    return smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return True\n    else:\n        return False\n"
    }
]